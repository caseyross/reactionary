/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var Page, React, ReactDOM;

	__webpack_require__(1);

	__webpack_require__(5);

	React = __webpack_require__(7);

	ReactDOM = __webpack_require__(164);

	Page = __webpack_require__(165);

	ReactDOM.render(React.createElement(Page, null), document.getElementById('react'));


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(2);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../css-loader/index.js!./normalize.css", function() {
				var newContent = require("!!../css-loader/index.js!./normalize.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports


	// module
	exports.push([module.id, "/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\n\n/**\n * 1. Set default font family to sans-serif.\n * 2. Prevent iOS and IE text size adjust after device orientation change,\n *    without disabling user zoom.\n */\n\nhtml {\n  font-family: sans-serif; /* 1 */\n  -ms-text-size-adjust: 100%; /* 2 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/**\n * Remove default margin.\n */\n\nbody {\n  margin: 0;\n}\n\n/* HTML5 display definitions\n   ========================================================================== */\n\n/**\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\n * and Firefox.\n * Correct `block` display not defined for `main` in IE 11.\n */\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\n\n/**\n * 1. Correct `inline-block` display not defined in IE 8/9.\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\n */\n\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block; /* 1 */\n  vertical-align: baseline; /* 2 */\n}\n\n/**\n * Prevent modern browsers from displaying `audio` without controls.\n * Remove excess height in iOS 5 devices.\n */\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\n/**\n * Address `[hidden]` styling not present in IE 8/9/10.\n * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.\n */\n\n[hidden],\ntemplate {\n  display: none;\n}\n\n/* Links\n   ========================================================================== */\n\n/**\n * Remove the gray background color from active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * Improve readability of focused elements when they are also in an\n * active/hover state.\n */\n\na:active,\na:hover {\n  outline: 0;\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n */\n\nabbr[title] {\n  border-bottom: 1px dotted;\n}\n\n/**\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n */\n\nb,\nstrong {\n  font-weight: bold;\n}\n\n/**\n * Address styling not present in Safari and Chrome.\n */\n\ndfn {\n  font-style: italic;\n}\n\n/**\n * Address variable `h1` font-size and margin within `section` and `article`\n * contexts in Firefox 4+, Safari, and Chrome.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/**\n * Address styling not present in IE 8/9.\n */\n\nmark {\n  background: #ff0;\n  color: #000;\n}\n\n/**\n * Address inconsistent and variable font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsup {\n  top: -0.5em;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove border when inside `a` element in IE 8/9/10.\n */\n\nimg {\n  border: 0;\n}\n\n/**\n * Correct overflow not hidden in IE 9/10/11.\n */\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * Address margin not present in IE 8/9 and Safari.\n */\n\nfigure {\n  margin: 1em 40px;\n}\n\n/**\n * Address differences between Firefox and other browsers.\n */\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n}\n\n/**\n * Contain overflow in all browsers.\n */\n\npre {\n  overflow: auto;\n}\n\n/**\n * Address odd `em`-unit font size rendering in all browsers.\n */\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\n * styling of `select`, unless a `border` property is set.\n */\n\n/**\n * 1. Correct color not being inherited.\n *    Known issue: affects color of disabled elements.\n * 2. Correct font properties not being inherited.\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit; /* 1 */\n  font: inherit; /* 2 */\n  margin: 0; /* 3 */\n}\n\n/**\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\n */\n\nbutton {\n  overflow: visible;\n}\n\n/**\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\n * All other form control elements do not inherit `text-transform` values.\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\n * Correct `select` style inheritance in Firefox.\n */\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/**\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n *    and `video` controls.\n * 2. Correct inability to style clickable `input` types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    `input` and others.\n */\n\nbutton,\nhtml input[type=\"button\"], /* 1 */\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button; /* 2 */\n  cursor: pointer; /* 3 */\n}\n\n/**\n * Re-set default cursor for disabled elements.\n */\n\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\n\n/**\n * Remove inner padding and border in Firefox 4+.\n */\n\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n\n/**\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n * the UA stylesheet.\n */\n\ninput {\n  line-height: normal;\n}\n\n/**\n * It's recommended that you don't attempt to style these elements.\n * Firefox's implementation doesn't respect box-sizing, padding, or width.\n *\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\n * 2. Remove excess padding in IE 8/9/10.\n */\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Fix the cursor style for Chrome's increment/decrement buttons. For certain\n * `font-size` values of the `input`, it causes the cursor style of the\n * decrement button to change from `default` to `text`.\n */\n\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.\n */\n\ninput[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  box-sizing: content-box; /* 2 */\n}\n\n/**\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\n * Safari (but not Chrome) clips the cancel button when the search input has\n * padding (and `textfield` appearance).\n */\n\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * Define consistent border, margin, and padding.\n */\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\n * 2. Remove padding so people aren't caught out if they zero out fieldsets.\n */\n\nlegend {\n  border: 0; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Remove default vertical scrollbar in IE 8/9/10/11.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * Don't inherit the `font-weight` (applied by a rule above).\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\n */\n\noptgroup {\n  font-weight: bold;\n}\n\n/* Tables\n   ========================================================================== */\n\n/**\n * Remove most spacing between table cells.\n */\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd,\nth {\n  padding: 0;\n}\n", ""]);

	// exports


/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(6);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../node_modules/css-loader/index.js!./main.css", function() {
				var newContent = require("!!../node_modules/css-loader/index.js!./main.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	exports.push([module.id, "@import url(https://fonts.googleapis.com/css?family=Fredoka+One);", ""]);

	// module
	exports.push([module.id, "body {\n    font: 1rem/1.5 'Fredoka One', serif;\n    margin: 0;\n}\n\ninput[type='search'] {\n    box-sizing: border-box;\n}\n\n.react-autosuggest__container {\n    position: relative;\n}\n\n.react-autosuggest__input {\n    width: 100%;\n    height: 80px;\n    padding: 10px 20px;\n    font-size: 2.4rem;\n    border: 1px solid #aaa;\n    border-radius: 4px;\n}\n\n.react-autosuggest__container--open .react-autosuggest__input {\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n}\n\n.react-autosuggest__suggestions-container {\n    position: absolute;\n    top: 80px;\n    width: 320px;\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    border: 1px solid #aaa;\n    background: white;\n    border-bottom-left-radius: 4px;\n    border-bottom-right-radius: 4px;\n}\n\n.react-autosuggest__suggestion {\n    cursor: pointer;\n    padding: 10px 20px;\n}\n\n.react-autosuggest__suggestion--focused {\n    background-color: #ddd;\n}\n\n@media screen and (min-resolution: 130dpi) {\n    \n    body {\n        font-size: 240%;\n    }\n\n    .react-autosuggest__suggestions-container {\n        width: 640px;\n    }\n    \n}", ""]);

	// exports


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(8);


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(9);
	var ReactDOMServer = __webpack_require__(154);
	var ReactIsomorphic = __webpack_require__(158);

	var assign = __webpack_require__(45);
	var deprecated = __webpack_require__(163);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(11);
	var ReactDOMTextComponent = __webpack_require__(12);
	var ReactDefaultInjection = __webpack_require__(77);
	var ReactInstanceHandles = __webpack_require__(51);
	var ReactMount = __webpack_require__(34);
	var ReactPerf = __webpack_require__(24);
	var ReactReconciler = __webpack_require__(56);
	var ReactUpdates = __webpack_require__(60);
	var ReactVersion = __webpack_require__(152);

	var findDOMNode = __webpack_require__(97);
	var renderSubtreeIntoContainer = __webpack_require__(153);
	var warning = __webpack_require__(31);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(15);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 10 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 11 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(13);
	var DOMPropertyOperations = __webpack_require__(28);
	var ReactComponentBrowserEnvironment = __webpack_require__(32);
	var ReactMount = __webpack_require__(34);

	var assign = __webpack_require__(45);
	var escapeTextContentForBrowser = __webpack_require__(27);
	var setTextContent = __webpack_require__(26);
	var validateDOMNesting = __webpack_require__(76);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(14);
	var ReactMultiChildUpdateTypes = __webpack_require__(22);
	var ReactPerf = __webpack_require__(24);

	var setInnerHTML = __webpack_require__(25);
	var setTextContent = __webpack_require__(26);
	var invariant = __webpack_require__(19);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	var createNodesFromMarkup = __webpack_require__(16);
	var emptyFunction = __webpack_require__(21);
	var getMarkupWrap = __webpack_require__(20);
	var invariant = __webpack_require__(19);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	var createArrayFromMixed = __webpack_require__(17);
	var getMarkupWrap = __webpack_require__(20);
	var invariant = __webpack_require__(19);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(18);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(19);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	var invariant = __webpack_require__(19);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(23);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(19);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);
	var escapeTextContentForBrowser = __webpack_require__(27);
	var setInnerHTML = __webpack_require__(25);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 27 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(29);
	var ReactPerf = __webpack_require__(24);

	var quoteAttributeValueForBrowser = __webpack_require__(30);
	var warning = __webpack_require__(31);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(19);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(27);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(21);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(33);
	var ReactMount = __webpack_require__(34);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(13);
	var DOMPropertyOperations = __webpack_require__(28);
	var ReactMount = __webpack_require__(34);
	var ReactPerf = __webpack_require__(24);

	var invariant = __webpack_require__(19);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(29);
	var ReactBrowserEventEmitter = __webpack_require__(35);
	var ReactCurrentOwner = __webpack_require__(11);
	var ReactDOMFeatureFlags = __webpack_require__(47);
	var ReactElement = __webpack_require__(48);
	var ReactEmptyComponentRegistry = __webpack_require__(50);
	var ReactInstanceHandles = __webpack_require__(51);
	var ReactInstanceMap = __webpack_require__(53);
	var ReactMarkupChecksum = __webpack_require__(54);
	var ReactPerf = __webpack_require__(24);
	var ReactReconciler = __webpack_require__(56);
	var ReactUpdateQueue = __webpack_require__(59);
	var ReactUpdates = __webpack_require__(60);

	var assign = __webpack_require__(45);
	var emptyObject = __webpack_require__(64);
	var containsNode = __webpack_require__(65);
	var instantiateReactComponent = __webpack_require__(68);
	var invariant = __webpack_require__(19);
	var setInnerHTML = __webpack_require__(25);
	var shouldUpdateReactComponent = __webpack_require__(73);
	var validateDOMNesting = __webpack_require__(76);
	var warning = __webpack_require__(31);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(37);
	var EventPluginRegistry = __webpack_require__(38);
	var ReactEventEmitterMixin = __webpack_require__(43);
	var ReactPerf = __webpack_require__(24);
	var ViewportMetrics = __webpack_require__(44);

	var assign = __webpack_require__(45);
	var isEventSupported = __webpack_require__(46);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(23);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(38);
	var EventPluginUtils = __webpack_require__(39);
	var ReactErrorUtils = __webpack_require__(40);

	var accumulateInto = __webpack_require__(41);
	var forEachAccumulated = __webpack_require__(42);
	var invariant = __webpack_require__(19);
	var warning = __webpack_require__(31);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(19);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var ReactErrorUtils = __webpack_require__(40);

	var invariant = __webpack_require__(19);
	var warning = __webpack_require__(31);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(19);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 42 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(37);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 45 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(11);

	var assign = __webpack_require__(45);
	var canDefineProperty = __webpack_require__(49);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(52);

	var invariant = __webpack_require__(19);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 53 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(55);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 55 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(57);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(58);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(19);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(11);
	var ReactElement = __webpack_require__(48);
	var ReactInstanceMap = __webpack_require__(53);
	var ReactUpdates = __webpack_require__(60);

	var assign = __webpack_require__(45);
	var invariant = __webpack_require__(19);
	var warning = __webpack_require__(31);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(61);
	var PooledClass = __webpack_require__(62);
	var ReactPerf = __webpack_require__(24);
	var ReactReconciler = __webpack_require__(56);
	var Transaction = __webpack_require__(63);

	var assign = __webpack_require__(45);
	var invariant = __webpack_require__(19);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(62);

	var assign = __webpack_require__(45);
	var invariant = __webpack_require__(19);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(19);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(19);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(66);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(67);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 67 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(69);
	var ReactEmptyComponent = __webpack_require__(74);
	var ReactNativeComponent = __webpack_require__(75);

	var assign = __webpack_require__(45);
	var invariant = __webpack_require__(19);
	var warning = __webpack_require__(31);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(70);
	var ReactCurrentOwner = __webpack_require__(11);
	var ReactElement = __webpack_require__(48);
	var ReactInstanceMap = __webpack_require__(53);
	var ReactPerf = __webpack_require__(24);
	var ReactPropTypeLocations = __webpack_require__(71);
	var ReactPropTypeLocationNames = __webpack_require__(72);
	var ReactReconciler = __webpack_require__(56);
	var ReactUpdateQueue = __webpack_require__(59);

	var assign = __webpack_require__(45);
	var emptyObject = __webpack_require__(64);
	var invariant = __webpack_require__(19);
	var shouldUpdateReactComponent = __webpack_require__(73);
	var warning = __webpack_require__(31);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(19);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(23);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 73 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(48);
	var ReactEmptyComponentRegistry = __webpack_require__(50);
	var ReactReconciler = __webpack_require__(56);

	var assign = __webpack_require__(45);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(45);
	var invariant = __webpack_require__(19);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(45);
	var emptyFunction = __webpack_require__(21);
	var warning = __webpack_require__(31);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(78);
	var ChangeEventPlugin = __webpack_require__(86);
	var ClientReactRootIndex = __webpack_require__(89);
	var DefaultEventPluginOrder = __webpack_require__(90);
	var EnterLeaveEventPlugin = __webpack_require__(91);
	var ExecutionEnvironment = __webpack_require__(15);
	var HTMLDOMPropertyConfig = __webpack_require__(95);
	var ReactBrowserComponentMixin = __webpack_require__(96);
	var ReactComponentBrowserEnvironment = __webpack_require__(32);
	var ReactDefaultBatchingStrategy = __webpack_require__(98);
	var ReactDOMComponent = __webpack_require__(99);
	var ReactDOMTextComponent = __webpack_require__(12);
	var ReactEventListener = __webpack_require__(124);
	var ReactInjection = __webpack_require__(127);
	var ReactInstanceHandles = __webpack_require__(51);
	var ReactMount = __webpack_require__(34);
	var ReactReconcileTransaction = __webpack_require__(131);
	var SelectEventPlugin = __webpack_require__(136);
	var ServerReactRootIndex = __webpack_require__(137);
	var SimpleEventPlugin = __webpack_require__(138);
	var SVGDOMPropertyConfig = __webpack_require__(147);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(148);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPropagators = __webpack_require__(79);
	var ExecutionEnvironment = __webpack_require__(15);
	var FallbackCompositionState = __webpack_require__(80);
	var SyntheticCompositionEvent = __webpack_require__(82);
	var SyntheticInputEvent = __webpack_require__(84);

	var keyOf = __webpack_require__(85);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(37);

	var warning = __webpack_require__(31);

	var accumulateInto = __webpack_require__(41);
	var forEachAccumulated = __webpack_require__(42);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(62);

	var assign = __webpack_require__(45);
	var getTextContentAccessor = __webpack_require__(81);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(83);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(62);

	var assign = __webpack_require__(45);
	var emptyFunction = __webpack_require__(21);
	var warning = __webpack_require__(31);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(83);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 85 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(37);
	var EventPropagators = __webpack_require__(79);
	var ExecutionEnvironment = __webpack_require__(15);
	var ReactUpdates = __webpack_require__(60);
	var SyntheticEvent = __webpack_require__(83);

	var getEventTarget = __webpack_require__(87);
	var isEventSupported = __webpack_require__(46);
	var isTextInputElement = __webpack_require__(88);
	var keyOf = __webpack_require__(85);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 87 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 89 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(85);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPropagators = __webpack_require__(79);
	var SyntheticMouseEvent = __webpack_require__(92);

	var ReactMount = __webpack_require__(34);
	var keyOf = __webpack_require__(85);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(93);
	var ViewportMetrics = __webpack_require__(44);

	var getEventModifierState = __webpack_require__(94);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(83);

	var getEventTarget = __webpack_require__(87);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 94 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(29);
	var ExecutionEnvironment = __webpack_require__(15);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(53);

	var findDOMNode = __webpack_require__(97);
	var warning = __webpack_require__(31);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(53);
	var ReactMount = __webpack_require__(34);

	var invariant = __webpack_require__(19);
	var warning = __webpack_require__(31);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(60);
	var Transaction = __webpack_require__(63);

	var assign = __webpack_require__(45);
	var emptyFunction = __webpack_require__(21);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(100);
	var CSSPropertyOperations = __webpack_require__(102);
	var DOMProperty = __webpack_require__(29);
	var DOMPropertyOperations = __webpack_require__(28);
	var EventConstants = __webpack_require__(36);
	var ReactBrowserEventEmitter = __webpack_require__(35);
	var ReactComponentBrowserEnvironment = __webpack_require__(32);
	var ReactDOMButton = __webpack_require__(110);
	var ReactDOMInput = __webpack_require__(111);
	var ReactDOMOption = __webpack_require__(115);
	var ReactDOMSelect = __webpack_require__(118);
	var ReactDOMTextarea = __webpack_require__(119);
	var ReactMount = __webpack_require__(34);
	var ReactMultiChild = __webpack_require__(120);
	var ReactPerf = __webpack_require__(24);
	var ReactUpdateQueue = __webpack_require__(59);

	var assign = __webpack_require__(45);
	var canDefineProperty = __webpack_require__(49);
	var escapeTextContentForBrowser = __webpack_require__(27);
	var invariant = __webpack_require__(19);
	var isEventSupported = __webpack_require__(46);
	var keyOf = __webpack_require__(85);
	var setInnerHTML = __webpack_require__(25);
	var setTextContent = __webpack_require__(26);
	var shallowEqual = __webpack_require__(123);
	var validateDOMNesting = __webpack_require__(76);
	var warning = __webpack_require__(31);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(34);

	var findDOMNode = __webpack_require__(97);
	var focusNode = __webpack_require__(101);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 101 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(103);
	var ExecutionEnvironment = __webpack_require__(15);
	var ReactPerf = __webpack_require__(24);

	var camelizeStyleName = __webpack_require__(104);
	var dangerousStyleValue = __webpack_require__(106);
	var hyphenateStyleName = __webpack_require__(107);
	var memoizeStringOnly = __webpack_require__(109);
	var warning = __webpack_require__(31);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(105);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 105 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(103);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(108);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 109 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(33);
	var LinkedValueUtils = __webpack_require__(112);
	var ReactMount = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(60);

	var assign = __webpack_require__(45);
	var invariant = __webpack_require__(19);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(113);
	var ReactPropTypeLocations = __webpack_require__(71);

	var invariant = __webpack_require__(19);
	var warning = __webpack_require__(31);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(48);
	var ReactPropTypeLocationNames = __webpack_require__(72);

	var emptyFunction = __webpack_require__(21);
	var getIteratorFn = __webpack_require__(114);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 114 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(116);
	var ReactDOMSelect = __webpack_require__(118);

	var assign = __webpack_require__(45);
	var warning = __webpack_require__(31);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(62);
	var ReactElement = __webpack_require__(48);

	var emptyFunction = __webpack_require__(21);
	var traverseAllChildren = __webpack_require__(117);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(11);
	var ReactElement = __webpack_require__(48);
	var ReactInstanceHandles = __webpack_require__(51);

	var getIteratorFn = __webpack_require__(114);
	var invariant = __webpack_require__(19);
	var warning = __webpack_require__(31);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(112);
	var ReactMount = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(60);

	var assign = __webpack_require__(45);
	var warning = __webpack_require__(31);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(112);
	var ReactDOMIDOperations = __webpack_require__(33);
	var ReactUpdates = __webpack_require__(60);

	var assign = __webpack_require__(45);
	var invariant = __webpack_require__(19);
	var warning = __webpack_require__(31);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(70);
	var ReactMultiChildUpdateTypes = __webpack_require__(22);

	var ReactCurrentOwner = __webpack_require__(11);
	var ReactReconciler = __webpack_require__(56);
	var ReactChildReconciler = __webpack_require__(121);

	var flattenChildren = __webpack_require__(122);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(56);

	var instantiateReactComponent = __webpack_require__(68);
	var shouldUpdateReactComponent = __webpack_require__(73);
	var traverseAllChildren = __webpack_require__(117);
	var warning = __webpack_require__(31);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(117);
	var warning = __webpack_require__(31);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 123 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(125);
	var ExecutionEnvironment = __webpack_require__(15);
	var PooledClass = __webpack_require__(62);
	var ReactInstanceHandles = __webpack_require__(51);
	var ReactMount = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(60);

	var assign = __webpack_require__(45);
	var getEventTarget = __webpack_require__(87);
	var getUnboundedScrollPosition = __webpack_require__(126);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(21);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 126 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(29);
	var EventPluginHub = __webpack_require__(37);
	var ReactComponentEnvironment = __webpack_require__(70);
	var ReactClass = __webpack_require__(128);
	var ReactEmptyComponent = __webpack_require__(74);
	var ReactBrowserEventEmitter = __webpack_require__(35);
	var ReactNativeComponent = __webpack_require__(75);
	var ReactPerf = __webpack_require__(24);
	var ReactRootIndex = __webpack_require__(52);
	var ReactUpdates = __webpack_require__(60);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(129);
	var ReactElement = __webpack_require__(48);
	var ReactPropTypeLocations = __webpack_require__(71);
	var ReactPropTypeLocationNames = __webpack_require__(72);
	var ReactNoopUpdateQueue = __webpack_require__(130);

	var assign = __webpack_require__(45);
	var emptyObject = __webpack_require__(64);
	var invariant = __webpack_require__(19);
	var keyMirror = __webpack_require__(23);
	var keyOf = __webpack_require__(85);
	var warning = __webpack_require__(31);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(130);

	var canDefineProperty = __webpack_require__(49);
	var emptyObject = __webpack_require__(64);
	var invariant = __webpack_require__(19);
	var warning = __webpack_require__(31);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(31);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(61);
	var PooledClass = __webpack_require__(62);
	var ReactBrowserEventEmitter = __webpack_require__(35);
	var ReactDOMFeatureFlags = __webpack_require__(47);
	var ReactInputSelection = __webpack_require__(132);
	var Transaction = __webpack_require__(63);

	var assign = __webpack_require__(45);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(133);

	var containsNode = __webpack_require__(65);
	var focusNode = __webpack_require__(101);
	var getActiveElement = __webpack_require__(135);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	var getNodeForCharacterOffset = __webpack_require__(134);
	var getTextContentAccessor = __webpack_require__(81);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 134 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 135 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPropagators = __webpack_require__(79);
	var ExecutionEnvironment = __webpack_require__(15);
	var ReactInputSelection = __webpack_require__(132);
	var SyntheticEvent = __webpack_require__(83);

	var getActiveElement = __webpack_require__(135);
	var isTextInputElement = __webpack_require__(88);
	var keyOf = __webpack_require__(85);
	var shallowEqual = __webpack_require__(123);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 137 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventListener = __webpack_require__(125);
	var EventPropagators = __webpack_require__(79);
	var ReactMount = __webpack_require__(34);
	var SyntheticClipboardEvent = __webpack_require__(139);
	var SyntheticEvent = __webpack_require__(83);
	var SyntheticFocusEvent = __webpack_require__(140);
	var SyntheticKeyboardEvent = __webpack_require__(141);
	var SyntheticMouseEvent = __webpack_require__(92);
	var SyntheticDragEvent = __webpack_require__(144);
	var SyntheticTouchEvent = __webpack_require__(145);
	var SyntheticUIEvent = __webpack_require__(93);
	var SyntheticWheelEvent = __webpack_require__(146);

	var emptyFunction = __webpack_require__(21);
	var getEventCharCode = __webpack_require__(142);
	var invariant = __webpack_require__(19);
	var keyOf = __webpack_require__(85);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(83);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(93);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(93);

	var getEventCharCode = __webpack_require__(142);
	var getEventKey = __webpack_require__(143);
	var getEventModifierState = __webpack_require__(94);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 142 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(142);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(92);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(93);

	var getEventModifierState = __webpack_require__(94);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(92);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(29);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(29);
	var ReactDefaultPerfAnalysis = __webpack_require__(149);
	var ReactMount = __webpack_require__(34);
	var ReactPerf = __webpack_require__(24);

	var performanceNow = __webpack_require__(150);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(45);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(151);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(15);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 152 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.7';

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(34);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(77);
	var ReactServerRendering = __webpack_require__(155);
	var ReactVersion = __webpack_require__(152);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(98);
	var ReactElement = __webpack_require__(48);
	var ReactInstanceHandles = __webpack_require__(51);
	var ReactMarkupChecksum = __webpack_require__(54);
	var ReactServerBatchingStrategy = __webpack_require__(156);
	var ReactServerRenderingTransaction = __webpack_require__(157);
	var ReactUpdates = __webpack_require__(60);

	var emptyObject = __webpack_require__(64);
	var instantiateReactComponent = __webpack_require__(68);
	var invariant = __webpack_require__(19);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 156 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(62);
	var CallbackQueue = __webpack_require__(61);
	var Transaction = __webpack_require__(63);

	var assign = __webpack_require__(45);
	var emptyFunction = __webpack_require__(21);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(116);
	var ReactComponent = __webpack_require__(129);
	var ReactClass = __webpack_require__(128);
	var ReactDOMFactories = __webpack_require__(159);
	var ReactElement = __webpack_require__(48);
	var ReactElementValidator = __webpack_require__(160);
	var ReactPropTypes = __webpack_require__(113);
	var ReactVersion = __webpack_require__(152);

	var assign = __webpack_require__(45);
	var onlyChild = __webpack_require__(162);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(48);
	var ReactElementValidator = __webpack_require__(160);

	var mapObject = __webpack_require__(161);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(48);
	var ReactPropTypeLocations = __webpack_require__(71);
	var ReactPropTypeLocationNames = __webpack_require__(72);
	var ReactCurrentOwner = __webpack_require__(11);

	var canDefineProperty = __webpack_require__(49);
	var getIteratorFn = __webpack_require__(114);
	var invariant = __webpack_require__(19);
	var warning = __webpack_require__(31);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 161 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(48);

	var invariant = __webpack_require__(19);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(45);
	var warning = __webpack_require__(31);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(9);


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var APICaller, FlexContainer, React;

	React = __webpack_require__(7);

	FlexContainer = __webpack_require__(166);

	APICaller = __webpack_require__(167);

	module.exports = React.createClass({
	  style: function() {
	    return {
	      background: '#444',
	      height: '100%',
	      overflow: 'hidden'
	    };
	  },
	  render: function() {
	    return React.createElement("div", {
	      "style": this.style()
	    }, React.createElement(FlexContainer, {
	      "direction": 'column',
	      "justify": 'center',
	      "align": 'center',
	      "height": '100%'
	    }, React.createElement(APICaller, null)));
	  }
	});


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var React;

	React = __webpack_require__(7);

	module.exports = React.createClass({
	  style: function() {
	    return {
	      display: 'flex',
	      flexDirection: this.props.direction,
	      justifyContent: this.props.justify,
	      alignItems: this.props.align,
	      flexWrap: this.props.wrap,
	      height: this.props.height,
	      padding: this.props.padding
	    };
	  },
	  render: function() {
	    return React.createElement("div", {
	      "style": this.style()
	    }, this.props.children);
	  }
	});


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var Autosuggest, DatasourceAttribution, React, WeatherDisplay, worldCities;

	React = __webpack_require__(7);

	Autosuggest = __webpack_require__(168);

	DatasourceAttribution = __webpack_require__(215);

	WeatherDisplay = __webpack_require__(217);

	worldCities = __webpack_require__(221);

	module.exports = React.createClass({
	  getInitialState: function() {
	    return {
	      search_text: '',
	      suggestions: [],
	      city: '',
	      weather: null
	    };
	  },
	  updateSearchText: function(event, arg) {
	    var newValue;
	    newValue = arg.newValue;
	    return this.setState({
	      search_text: newValue
	    });
	  },
	  updateSuggestions: function(arg) {
	    var value;
	    value = arg.value;
	    return this.getSuggestionsFromDatastore(value).then((function(_this) {
	      return function(suggestions) {
	        return _this.setState({
	          suggestions: suggestions
	        });
	      };
	    })(this));
	  },
	  getSuggestionsFromDatastore: function(query) {
	    var current_city, i, suggestions;
	    i = 0;
	    suggestions = [];
	    while (suggestions.length < 10 && i < worldCities.data.length) {
	      current_city = worldCities.data[i];
	      if (current_city.n.toLowerCase().startsWith(query)) {
	        suggestions.push(current_city);
	      }
	      i += 1;
	    }
	    return Promise.resolve(suggestions);
	  },
	  chooseSuggestion: function(event, arg) {
	    var suggestion;
	    suggestion = arg.suggestion;
	    return this.getWeatherFromAPI([suggestion.y, suggestion.x]).then((function(_this) {
	      return function(weather) {
	        return _this.setState({
	          city: suggestion.n,
	          weather: weather,
	          search_text: ''
	        });
	      };
	    })(this));
	  },
	  getWeatherFromAPI: function(arg) {
	    var lat, lon, url;
	    lat = arg[0], lon = arg[1];
	    url = "https://api.openweathermap.org/data/2.5/weather?lat=" + lat + "&lon=" + lon + "&units=metric&appid=" + ("ac8f19a9abcd8c093d87e3f8e40adacc");
	    return fetch(url).then(function(res) {
	      switch (res.status) {
	        case 200:
	          return res.json();
	        default:
	          throw new Error('Weather API did not respond as expected');
	      }
	    }).then(function(json) {
	      return json;
	    })["catch"](function(err) {
	      console.log(err);
	      return null;
	    });
	  },
	  maybeRenderWeather: function() {
	    if (this.state.weather != null) {
	      return React.createElement(WeatherDisplay, {
	        "weather": this.state.weather,
	        "location": this.state.city
	      });
	    } else {
	      return null;
	    }
	  },
	  render: function() {
	    return React.createElement("div", null, React.createElement(Autosuggest, {
	      "suggestions": this.state.suggestions,
	      "onSuggestionsUpdateRequested": this.updateSuggestions,
	      "getSuggestionValue": (function(suggestion) {
	        return suggestion.n + ', ' + suggestion.c;
	      }),
	      "renderSuggestion": (function(suggestion) {
	        return React.createElement("span", null, suggestion.n + ', ' + suggestion.c);
	      }),
	      "inputProps": {
	        value: this.state.search_text,
	        onChange: this.updateSearchText,
	        type: 'search',
	        placeholder: 'Where?'
	      },
	      "onSuggestionSelected": this.chooseSuggestion
	    }), this.maybeRenderWeather(), React.createElement(DatasourceAttribution, null));
	  }
	});


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(169).default;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _redux = __webpack_require__(170);

	var _reactRedux = __webpack_require__(190);

	var _reducerAndActions = __webpack_require__(209);

	var _reducerAndActions2 = _interopRequireDefault(_reducerAndActions);

	var _Autosuggest = __webpack_require__(210);

	var _Autosuggest2 = _interopRequireDefault(_Autosuggest);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function noop() {}

	var defaultTheme = {
	  container: 'react-autosuggest__container',
	  containerOpen: 'react-autosuggest__container--open',
	  input: 'react-autosuggest__input',
	  suggestionsContainer: 'react-autosuggest__suggestions-container',
	  suggestion: 'react-autosuggest__suggestion',
	  suggestionFocused: 'react-autosuggest__suggestion--focused',
	  sectionContainer: 'react-autosuggest__section-container',
	  sectionTitle: 'react-autosuggest__section-title',
	  sectionSuggestionsContainer: 'react-autosuggest__section-suggestions-container'
	};

	function mapToAutowhateverTheme(theme) {
	  var result = {};

	  for (var key in theme) {
	    switch (key) {
	      case 'suggestionsContainer':
	        result['itemsContainer'] = theme[key];
	        break;

	      case 'suggestion':
	        result['item'] = theme[key];
	        break;

	      case 'suggestionFocused':
	        result['itemFocused'] = theme[key];
	        break;

	      case 'sectionSuggestionsContainer':
	        result['sectionItemsContainer'] = theme[key];
	        break;

	      default:
	        result[key] = theme[key];
	    }
	  }

	  return result;
	}

	var AutosuggestContainer = function (_Component) {
	  _inherits(AutosuggestContainer, _Component);

	  function AutosuggestContainer(props) {
	    _classCallCheck(this, AutosuggestContainer);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AutosuggestContainer).call(this));

	    var initialState = {
	      isFocused: false,
	      isCollapsed: true,
	      focusedSectionIndex: null,
	      focusedSuggestionIndex: null,
	      valueBeforeUpDown: null,
	      lastAction: null
	    };

	    _this.store = (0, _redux.createStore)(_reducerAndActions2.default, initialState);
	    _this.theme = mapToAutowhateverTheme(props.theme);

	    _this.saveInput = _this.saveInput.bind(_this);
	    return _this;
	  }

	  _createClass(AutosuggestContainer, [{
	    key: 'saveInput',
	    value: function saveInput(input) {
	      this.input = input;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var multiSection = _props.multiSection;
	      var shouldRenderSuggestions = _props.shouldRenderSuggestions;
	      var suggestions = _props.suggestions;
	      var onSuggestionsUpdateRequested = _props.onSuggestionsUpdateRequested;
	      var getSuggestionValue = _props.getSuggestionValue;
	      var renderSuggestion = _props.renderSuggestion;
	      var renderSectionTitle = _props.renderSectionTitle;
	      var getSectionSuggestions = _props.getSectionSuggestions;
	      var inputProps = _props.inputProps;
	      var onSuggestionSelected = _props.onSuggestionSelected;
	      var focusInputOnSuggestionClick = _props.focusInputOnSuggestionClick;
	      var id = _props.id;

	      return _react2.default.createElement(
	        _reactRedux.Provider,
	        { store: this.store },
	        _react2.default.createElement(_Autosuggest2.default, { multiSection: multiSection,
	          shouldRenderSuggestions: shouldRenderSuggestions,
	          suggestions: suggestions,
	          onSuggestionsUpdateRequested: onSuggestionsUpdateRequested,
	          getSuggestionValue: getSuggestionValue,
	          renderSuggestion: renderSuggestion,
	          renderSectionTitle: renderSectionTitle,
	          getSectionSuggestions: getSectionSuggestions,
	          inputProps: inputProps,
	          onSuggestionSelected: onSuggestionSelected,
	          focusInputOnSuggestionClick: focusInputOnSuggestionClick,
	          theme: this.theme,
	          id: id,
	          inputRef: this.saveInput })
	      );
	    }
	  }]);

	  return AutosuggestContainer;
	}(_react.Component);

	AutosuggestContainer.propTypes = {
	  suggestions: _react.PropTypes.array.isRequired,
	  onSuggestionsUpdateRequested: _react.PropTypes.func,
	  getSuggestionValue: _react.PropTypes.func.isRequired,
	  renderSuggestion: _react.PropTypes.func.isRequired,
	  inputProps: function inputProps(props, propName) {
	    var inputProps = props[propName];

	    if (!inputProps.hasOwnProperty('value')) {
	      throw new Error('\'inputProps\' must have \'value\'.');
	    }

	    if (!inputProps.hasOwnProperty('onChange')) {
	      throw new Error('\'inputProps\' must have \'onChange\'.');
	    }
	  },
	  shouldRenderSuggestions: _react.PropTypes.func,
	  onSuggestionSelected: _react.PropTypes.func,
	  multiSection: _react.PropTypes.bool,
	  renderSectionTitle: _react.PropTypes.func,
	  getSectionSuggestions: _react.PropTypes.func,
	  focusInputOnSuggestionClick: _react.PropTypes.bool,
	  theme: _react.PropTypes.object,
	  id: _react.PropTypes.string
	};
	AutosuggestContainer.defaultProps = {
	  onSuggestionsUpdateRequested: noop,
	  shouldRenderSuggestions: function shouldRenderSuggestions(value) {
	    return value.trim().length > 0;
	  },
	  onSuggestionSelected: noop,
	  multiSection: false,
	  renderSectionTitle: function renderSectionTitle() {
	    throw new Error('`renderSectionTitle` must be provided');
	  },
	  getSectionSuggestions: function getSectionSuggestions() {
	    throw new Error('`getSectionSuggestions` must be provided');
	  },

	  focusInputOnSuggestionClick: true,
	  theme: defaultTheme,
	  id: '1'
	};
	exports.default = AutosuggestContainer;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

	var _createStore = __webpack_require__(171);

	var _createStore2 = _interopRequireDefault(_createStore);

	var _combineReducers = __webpack_require__(185);

	var _combineReducers2 = _interopRequireDefault(_combineReducers);

	var _bindActionCreators = __webpack_require__(187);

	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

	var _applyMiddleware = __webpack_require__(188);

	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

	var _compose = __webpack_require__(189);

	var _compose2 = _interopRequireDefault(_compose);

	var _warning = __webpack_require__(186);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}

	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}

	exports.createStore = _createStore2['default'];
	exports.combineReducers = _combineReducers2['default'];
	exports.bindActionCreators = _bindActionCreators2['default'];
	exports.applyMiddleware = _applyMiddleware2['default'];
	exports.compose = _compose2['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports['default'] = createStore;

	var _isPlainObject = __webpack_require__(172);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _symbolObservable = __webpack_require__(182);

	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'

	  /**
	   * Creates a Redux store that holds the state tree.
	   * The only way to change the data in the store is to call `dispatch()` on it.
	   *
	   * There should only be a single store in your app. To specify how different
	   * parts of the state tree respond to actions, you may combine several reducers
	   * into a single reducer function by using `combineReducers`.
	   *
	   * @param {Function} reducer A function that returns the next state tree, given
	   * the current state tree and the action to handle.
	   *
	   * @param {any} [preloadedState] The initial state. You may optionally specify it
	   * to hydrate the state from the server in universal apps, or to restore a
	   * previously serialized user session.
	   * If you use `combineReducers` to produce the root reducer function, this must be
	   * an object with the same shape as `combineReducers` keys.
	   *
	   * @param {Function} [enhancer] The store enhancer. You may optionally specify it
	   * to enhance the store with third-party capabilities such as middleware,
	   * time travel, persistence, etc. The only store enhancer that ships with Redux
	   * is `applyMiddleware()`.
	   *
	   * @returns {Store} A Redux store that lets you read the state, dispatch actions
	   * and subscribe to changes.
	   */
	};function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;

	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, preloadedState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }

	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }

	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }

	    var isSubscribed = true;

	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);

	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      isSubscribed = false;

	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }

	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2['default'])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      var listener = listeners[i];
	      listener();
	    }

	    return action;
	  }

	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }

	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/tc39/proposal-observable
	   */
	  function observable() {
	    var _ref;

	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object') {
	          throw new TypeError('Expected the observer to be an object.');
	        }

	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }

	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return { unsubscribe: unsubscribe };
	      }
	    }, _ref[_symbolObservable2['default']] = function () {
	      return this;
	    }, _ref;
	  }

	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });

	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[_symbolObservable2['default']] = observable, _ref2;
	}

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(173),
	    getPrototype = __webpack_require__(179),
	    isObjectLike = __webpack_require__(181);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}

	module.exports = isPlainObject;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(174),
	    getRawTag = __webpack_require__(177),
	    objectToString = __webpack_require__(178);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	module.exports = baseGetTag;


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(175);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(176);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ },
/* 176 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(174);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;


/***/ },
/* 178 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(180);

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	module.exports = getPrototype;


/***/ },
/* 180 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ },
/* 181 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _ponyfill = __webpack_require__(184);

	var _ponyfill2 = _interopRequireDefault(_ponyfill);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var root; /* global window */


	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global !== 'undefined') {
	  root = global;
	} else if (true) {
	  root = module;
	} else {
	  root = Function('return this')();
	}

	var result = (0, _ponyfill2['default'])(root);
	exports['default'] = result;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(183)(module)))

/***/ },
/* 183 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 184 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;

		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	};

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports['default'] = combineReducers;

	var _createStore = __webpack_require__(171);

	var _isPlainObject = __webpack_require__(172);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _warning = __webpack_require__(186);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!(0, _isPlainObject2['default'])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });

	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });

	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}

	function assertReducerShape(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });

	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
	    }

	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
	    }
	  });
	}

	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];

	    if (process.env.NODE_ENV !== 'production') {
	      if (typeof reducers[key] === 'undefined') {
	        (0, _warning2['default'])('No reducer provided for key "' + key + '"');
	      }
	    }

	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);

	  var unexpectedKeyCache = void 0;
	  if (process.env.NODE_ENV !== 'production') {
	    unexpectedKeyCache = {};
	  }

	  var shapeAssertionError = void 0;
	  try {
	    assertReducerShape(finalReducers);
	  } catch (e) {
	    shapeAssertionError = e;
	  }

	  return function combination() {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var action = arguments[1];

	    if (shapeAssertionError) {
	      throw shapeAssertionError;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
	      if (warningMessage) {
	        (0, _warning2['default'])(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};
	    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
	      var _key = finalReducerKeys[_i];
	      var reducer = finalReducers[_key];
	      var previousStateForKey = state[_key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(_key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[_key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 186 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 187 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}

	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }

	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = applyMiddleware;

	var _compose = __webpack_require__(189);

	var _compose2 = _interopRequireDefault(_compose);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function (reducer, preloadedState, enhancer) {
	      var store = createStore(reducer, preloadedState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);

	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ },
/* 189 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */

	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(undefined, arguments));
	    };
	  });
	}

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.connect = exports.Provider = undefined;

	var _Provider = __webpack_require__(191);

	var _Provider2 = _interopRequireDefault(_Provider);

	var _connect = __webpack_require__(204);

	var _connect2 = _interopRequireDefault(_connect);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Provider = _Provider2["default"];
	exports.connect = _connect2["default"];

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports["default"] = undefined;

	var _react = __webpack_require__(7);

	var _propTypes = __webpack_require__(192);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _storeShape = __webpack_require__(202);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _warning = __webpack_require__(203);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var didWarnAboutReceivingStore = false;
	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }
	  didWarnAboutReceivingStore = true;

	  (0, _warning2["default"])('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	}

	var Provider = function (_Component) {
	  _inherits(Provider, _Component);

	  Provider.prototype.getChildContext = function getChildContext() {
	    return { store: this.store };
	  };

	  function Provider(props, context) {
	    _classCallCheck(this, Provider);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    _this.store = props.store;
	    return _this;
	  }

	  Provider.prototype.render = function render() {
	    return _react.Children.only(this.props.children);
	  };

	  return Provider;
	}(_react.Component);

	exports["default"] = Provider;


	if (process.env.NODE_ENV !== 'production') {
	  Provider.prototype.componentWillReceiveProps = function (nextProps) {
	    var store = this.store;
	    var nextStore = nextProps.store;


	    if (store !== nextStore) {
	      warnAboutReceivingStore();
	    }
	  };
	}

	Provider.propTypes = {
	  store: _storeShape2["default"].isRequired,
	  children: _propTypes2["default"].element.isRequired
	};
	Provider.childContextTypes = {
	  store: _storeShape2["default"].isRequired
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var ReactIs = __webpack_require__(193);

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(196)(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(201)();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (process.env.NODE_ENV === 'production') {
	  module.exports = __webpack_require__(194);
	} else {
	  module.exports = __webpack_require__(195);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 194 */
/***/ function(module, exports) {

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;
	exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};
	exports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};
	exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';



	if (process.env.NODE_ENV !== "production") {
	  (function() {
	'use strict';

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	exports.AsyncMode = AsyncMode;
	exports.ConcurrentMode = ConcurrentMode;
	exports.ContextConsumer = ContextConsumer;
	exports.ContextProvider = ContextProvider;
	exports.Element = Element;
	exports.ForwardRef = ForwardRef;
	exports.Fragment = Fragment;
	exports.Lazy = Lazy;
	exports.Memo = Memo;
	exports.Portal = Portal;
	exports.Profiler = Profiler;
	exports.StrictMode = StrictMode;
	exports.Suspense = Suspense;
	exports.isAsyncMode = isAsyncMode;
	exports.isConcurrentMode = isConcurrentMode;
	exports.isContextConsumer = isContextConsumer;
	exports.isContextProvider = isContextProvider;
	exports.isElement = isElement;
	exports.isForwardRef = isForwardRef;
	exports.isFragment = isFragment;
	exports.isLazy = isLazy;
	exports.isMemo = isMemo;
	exports.isPortal = isPortal;
	exports.isProfiler = isProfiler;
	exports.isStrictMode = isStrictMode;
	exports.isSuspense = isSuspense;
	exports.isValidElementType = isValidElementType;
	exports.typeOf = typeOf;
	  })();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactIs = __webpack_require__(193);
	var assign = __webpack_require__(197);

	var ReactPropTypesSecret = __webpack_require__(198);
	var has = __webpack_require__(199);
	var checkPropTypes = __webpack_require__(200);

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bigint: createPrimitiveTypeChecker('bigint'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message, data) {
	    this.message = message;
	    this.data = data && typeof data === 'object' ? data: {};
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError(
	          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
	          {expectedType: expectedType}
	        );
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var expectedTypes = [];
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
	        if (checkerResult == null) {
	          return null;
	        }
	        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
	          expectedTypes.push(checkerResult.data.expectedType);
	        }
	      }
	      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function invalidValidatorError(componentName, location, propFullName, key, type) {
	    return new PropTypeError(
	      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
	      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
	    );
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (has(shapeTypes, key) && typeof checker !== 'function') {
	          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
	        }
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 197 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 198 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ },
/* 199 */
/***/ function(module, exports) {

	module.exports = Function.call.bind(Object.prototype.hasOwnProperty);


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = __webpack_require__(198);
	  var loggedTypeFailures = {};
	  var has = __webpack_require__(199);

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) { /**/ }
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
	              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures = {};
	  }
	}

	module.exports = checkPropTypes;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = __webpack_require__(198);

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bigint: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _propTypes = __webpack_require__(192);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _propTypes2["default"].shape({
	  subscribe: _propTypes2["default"].func.isRequired,
	  dispatch: _propTypes2["default"].func.isRequired,
	  getState: _propTypes2["default"].func.isRequired
	});

/***/ },
/* 203 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports["default"] = connect;

	var _react = __webpack_require__(7);

	var _storeShape = __webpack_require__(202);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _shallowEqual = __webpack_require__(205);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _wrapActionCreators = __webpack_require__(206);

	var _wrapActionCreators2 = _interopRequireDefault(_wrapActionCreators);

	var _warning = __webpack_require__(203);

	var _warning2 = _interopRequireDefault(_warning);

	var _isPlainObject = __webpack_require__(172);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _hoistNonReactStatics = __webpack_require__(207);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _invariant = __webpack_require__(208);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var defaultMapStateToProps = function defaultMapStateToProps(state) {
	  return {};
	}; // eslint-disable-line no-unused-vars
	var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
	  return { dispatch: dispatch };
	};
	var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
	  return _extends({}, parentProps, stateProps, dispatchProps);
	};

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	var errorObject = { value: null };
	function tryCatch(fn, ctx) {
	  try {
	    return fn.apply(ctx);
	  } catch (e) {
	    errorObject.value = e;
	    return errorObject;
	  }
	}

	// Helps track hot reloading.
	var nextVersion = 0;

	function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	  var shouldSubscribe = Boolean(mapStateToProps);
	  var mapState = mapStateToProps || defaultMapStateToProps;

	  var mapDispatch = void 0;
	  if (typeof mapDispatchToProps === 'function') {
	    mapDispatch = mapDispatchToProps;
	  } else if (!mapDispatchToProps) {
	    mapDispatch = defaultMapDispatchToProps;
	  } else {
	    mapDispatch = (0, _wrapActionCreators2["default"])(mapDispatchToProps);
	  }

	  var finalMergeProps = mergeProps || defaultMergeProps;
	  var _options$pure = options.pure,
	      pure = _options$pure === undefined ? true : _options$pure,
	      _options$withRef = options.withRef,
	      withRef = _options$withRef === undefined ? false : _options$withRef;

	  var checkMergedEquals = pure && finalMergeProps !== defaultMergeProps;

	  // Helps track hot reloading.
	  var version = nextVersion++;

	  return function wrapWithConnect(WrappedComponent) {
	    var connectDisplayName = 'Connect(' + getDisplayName(WrappedComponent) + ')';

	    function checkStateShape(props, methodName) {
	      if (!(0, _isPlainObject2["default"])(props)) {
	        (0, _warning2["default"])(methodName + '() in ' + connectDisplayName + ' must return a plain object. ' + ('Instead received ' + props + '.'));
	      }
	    }

	    function computeMergedProps(stateProps, dispatchProps, parentProps) {
	      var mergedProps = finalMergeProps(stateProps, dispatchProps, parentProps);
	      if (process.env.NODE_ENV !== 'production') {
	        checkStateShape(mergedProps, 'mergeProps');
	      }
	      return mergedProps;
	    }

	    var Connect = function (_Component) {
	      _inherits(Connect, _Component);

	      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	        return !pure || this.haveOwnPropsChanged || this.hasStoreStateChanged;
	      };

	      function Connect(props, context) {
	        _classCallCheck(this, Connect);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	        _this.version = version;
	        _this.store = props.store || context.store;

	        (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));

	        var storeState = _this.store.getState();
	        _this.state = { storeState: storeState };
	        _this.clearCache();
	        return _this;
	      }

	      Connect.prototype.computeStateProps = function computeStateProps(store, props) {
	        if (!this.finalMapStateToProps) {
	          return this.configureFinalMapState(store, props);
	        }

	        var state = store.getState();
	        var stateProps = this.doStatePropsDependOnOwnProps ? this.finalMapStateToProps(state, props) : this.finalMapStateToProps(state);

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(stateProps, 'mapStateToProps');
	        }
	        return stateProps;
	      };

	      Connect.prototype.configureFinalMapState = function configureFinalMapState(store, props) {
	        var mappedState = mapState(store.getState(), props);
	        var isFactory = typeof mappedState === 'function';

	        this.finalMapStateToProps = isFactory ? mappedState : mapState;
	        this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;

	        if (isFactory) {
	          return this.computeStateProps(store, props);
	        }

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedState, 'mapStateToProps');
	        }
	        return mappedState;
	      };

	      Connect.prototype.computeDispatchProps = function computeDispatchProps(store, props) {
	        if (!this.finalMapDispatchToProps) {
	          return this.configureFinalMapDispatch(store, props);
	        }

	        var dispatch = store.dispatch;

	        var dispatchProps = this.doDispatchPropsDependOnOwnProps ? this.finalMapDispatchToProps(dispatch, props) : this.finalMapDispatchToProps(dispatch);

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(dispatchProps, 'mapDispatchToProps');
	        }
	        return dispatchProps;
	      };

	      Connect.prototype.configureFinalMapDispatch = function configureFinalMapDispatch(store, props) {
	        var mappedDispatch = mapDispatch(store.dispatch, props);
	        var isFactory = typeof mappedDispatch === 'function';

	        this.finalMapDispatchToProps = isFactory ? mappedDispatch : mapDispatch;
	        this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;

	        if (isFactory) {
	          return this.computeDispatchProps(store, props);
	        }

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedDispatch, 'mapDispatchToProps');
	        }
	        return mappedDispatch;
	      };

	      Connect.prototype.updateStatePropsIfNeeded = function updateStatePropsIfNeeded() {
	        var nextStateProps = this.computeStateProps(this.store, this.props);
	        if (this.stateProps && (0, _shallowEqual2["default"])(nextStateProps, this.stateProps)) {
	          return false;
	        }

	        this.stateProps = nextStateProps;
	        return true;
	      };

	      Connect.prototype.updateDispatchPropsIfNeeded = function updateDispatchPropsIfNeeded() {
	        var nextDispatchProps = this.computeDispatchProps(this.store, this.props);
	        if (this.dispatchProps && (0, _shallowEqual2["default"])(nextDispatchProps, this.dispatchProps)) {
	          return false;
	        }

	        this.dispatchProps = nextDispatchProps;
	        return true;
	      };

	      Connect.prototype.updateMergedPropsIfNeeded = function updateMergedPropsIfNeeded() {
	        var nextMergedProps = computeMergedProps(this.stateProps, this.dispatchProps, this.props);
	        if (this.mergedProps && checkMergedEquals && (0, _shallowEqual2["default"])(nextMergedProps, this.mergedProps)) {
	          return false;
	        }

	        this.mergedProps = nextMergedProps;
	        return true;
	      };

	      Connect.prototype.isSubscribed = function isSubscribed() {
	        return typeof this.unsubscribe === 'function';
	      };

	      Connect.prototype.trySubscribe = function trySubscribe() {
	        if (shouldSubscribe && !this.unsubscribe) {
	          this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
	          this.handleChange();
	        }
	      };

	      Connect.prototype.tryUnsubscribe = function tryUnsubscribe() {
	        if (this.unsubscribe) {
	          this.unsubscribe();
	          this.unsubscribe = null;
	        }
	      };

	      Connect.prototype.componentDidMount = function componentDidMount() {
	        this.trySubscribe();
	      };

	      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!pure || !(0, _shallowEqual2["default"])(nextProps, this.props)) {
	          this.haveOwnPropsChanged = true;
	        }
	      };

	      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.tryUnsubscribe();
	        this.clearCache();
	      };

	      Connect.prototype.clearCache = function clearCache() {
	        this.dispatchProps = null;
	        this.stateProps = null;
	        this.mergedProps = null;
	        this.haveOwnPropsChanged = true;
	        this.hasStoreStateChanged = true;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;
	        this.renderedElement = null;
	        this.finalMapDispatchToProps = null;
	        this.finalMapStateToProps = null;
	      };

	      Connect.prototype.handleChange = function handleChange() {
	        if (!this.unsubscribe) {
	          return;
	        }

	        var storeState = this.store.getState();
	        var prevStoreState = this.state.storeState;
	        if (pure && prevStoreState === storeState) {
	          return;
	        }

	        if (pure && !this.doStatePropsDependOnOwnProps) {
	          var haveStatePropsChanged = tryCatch(this.updateStatePropsIfNeeded, this);
	          if (!haveStatePropsChanged) {
	            return;
	          }
	          if (haveStatePropsChanged === errorObject) {
	            this.statePropsPrecalculationError = errorObject.value;
	          }
	          this.haveStatePropsBeenPrecalculated = true;
	        }

	        this.hasStoreStateChanged = true;
	        this.setState({ storeState: storeState });
	      };

	      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
	        (0, _invariant2["default"])(withRef, 'To access the wrapped instance, you need to specify ' + '{ withRef: true } as the fourth argument of the connect() call.');

	        return this.refs.wrappedInstance;
	      };

	      Connect.prototype.render = function render() {
	        var haveOwnPropsChanged = this.haveOwnPropsChanged,
	            hasStoreStateChanged = this.hasStoreStateChanged,
	            haveStatePropsBeenPrecalculated = this.haveStatePropsBeenPrecalculated,
	            statePropsPrecalculationError = this.statePropsPrecalculationError,
	            renderedElement = this.renderedElement;


	        this.haveOwnPropsChanged = false;
	        this.hasStoreStateChanged = false;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;

	        if (statePropsPrecalculationError) {
	          throw statePropsPrecalculationError;
	        }

	        var shouldUpdateStateProps = true;
	        var shouldUpdateDispatchProps = true;
	        if (pure && renderedElement) {
	          shouldUpdateStateProps = hasStoreStateChanged || haveOwnPropsChanged && this.doStatePropsDependOnOwnProps;
	          shouldUpdateDispatchProps = haveOwnPropsChanged && this.doDispatchPropsDependOnOwnProps;
	        }

	        var haveStatePropsChanged = false;
	        var haveDispatchPropsChanged = false;
	        if (haveStatePropsBeenPrecalculated) {
	          haveStatePropsChanged = true;
	        } else if (shouldUpdateStateProps) {
	          haveStatePropsChanged = this.updateStatePropsIfNeeded();
	        }
	        if (shouldUpdateDispatchProps) {
	          haveDispatchPropsChanged = this.updateDispatchPropsIfNeeded();
	        }

	        var haveMergedPropsChanged = true;
	        if (haveStatePropsChanged || haveDispatchPropsChanged || haveOwnPropsChanged) {
	          haveMergedPropsChanged = this.updateMergedPropsIfNeeded();
	        } else {
	          haveMergedPropsChanged = false;
	        }

	        if (!haveMergedPropsChanged && renderedElement) {
	          return renderedElement;
	        }

	        if (withRef) {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, _extends({}, this.mergedProps, {
	            ref: 'wrappedInstance'
	          }));
	        } else {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, this.mergedProps);
	        }

	        return this.renderedElement;
	      };

	      return Connect;
	    }(_react.Component);

	    Connect.displayName = connectDisplayName;
	    Connect.WrappedComponent = WrappedComponent;
	    Connect.contextTypes = {
	      store: _storeShape2["default"]
	    };
	    Connect.propTypes = {
	      store: _storeShape2["default"]
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        if (this.version === version) {
	          return;
	        }

	        // We are hot reloading!
	        this.version = version;
	        this.trySubscribe();
	        this.clearCache();
	      };
	    }

	    return (0, _hoistNonReactStatics2["default"])(Connect, WrappedComponent);
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 205 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = shallowEqual;
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var hasOwn = Object.prototype.hasOwnProperty;
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = wrapActionCreators;

	var _redux = __webpack_require__(170);

	function wrapActionCreators(actionCreators) {
	  return function (dispatch) {
	    return (0, _redux.bindActionCreators)(actionCreators, dispatch);
	  };
	}

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var reactIs = __webpack_require__(193);

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	function getStatics(component) {
	  // React v16.11 and below
	  if (reactIs.isMemo(component)) {
	    return MEMO_STATICS;
	  } // React v16.12 and above


	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;
	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype) {
	      var inheritedComponent = getPrototypeOf(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype) {
	        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames(sourceComponent);

	    if (getOwnPropertySymbols) {
	      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	module.exports = hoistNonReactStatics;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 209 */
/***/ function(module, exports) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.inputFocused = inputFocused;
	exports.inputBlurred = inputBlurred;
	exports.inputChanged = inputChanged;
	exports.updateFocusedSuggestion = updateFocusedSuggestion;
	exports.revealSuggestions = revealSuggestions;
	exports.closeSuggestions = closeSuggestions;
	exports.default = reducer;
	var INPUT_FOCUSED = 'INPUT_FOCUSED';
	var INPUT_BLURRED = 'INPUT_BLURRED';
	var INPUT_CHANGED = 'INPUT_CHANGED';
	var UPDATE_FOCUSED_SUGGESTION = 'UPDATE_FOCUSED_SUGGESTION';
	var REVEAL_SUGGESTIONS = 'REVEAL_SUGGESTIONS';
	var CLOSE_SUGGESTIONS = 'CLOSE_SUGGESTIONS';

	function inputFocused(shouldRenderSuggestions) {
	  return {
	    type: INPUT_FOCUSED,
	    shouldRenderSuggestions: shouldRenderSuggestions
	  };
	}

	function inputBlurred() {
	  return {
	    type: INPUT_BLURRED
	  };
	}

	function inputChanged(shouldRenderSuggestions, lastAction) {
	  return {
	    type: INPUT_CHANGED,
	    shouldRenderSuggestions: shouldRenderSuggestions,
	    lastAction: lastAction
	  };
	}

	function updateFocusedSuggestion(sectionIndex, suggestionIndex, value) {
	  return {
	    type: UPDATE_FOCUSED_SUGGESTION,
	    sectionIndex: sectionIndex,
	    suggestionIndex: suggestionIndex,
	    value: value
	  };
	}

	function revealSuggestions() {
	  return {
	    type: REVEAL_SUGGESTIONS
	  };
	}

	function closeSuggestions(lastAction) {
	  return {
	    type: CLOSE_SUGGESTIONS,
	    lastAction: lastAction
	  };
	}

	function reducer(state, action) {
	  switch (action.type) {
	    case INPUT_FOCUSED:
	      return _extends({}, state, {
	        isFocused: true,
	        isCollapsed: !action.shouldRenderSuggestions
	      });

	    case INPUT_BLURRED:
	      return _extends({}, state, {
	        isFocused: false,
	        focusedSectionIndex: null,
	        focusedSuggestionIndex: null,
	        valueBeforeUpDown: null,
	        isCollapsed: true
	      });

	    case INPUT_CHANGED:
	      return _extends({}, state, {
	        focusedSectionIndex: null,
	        focusedSuggestionIndex: null,
	        valueBeforeUpDown: null,
	        isCollapsed: !action.shouldRenderSuggestions,
	        lastAction: action.lastAction
	      });

	    case UPDATE_FOCUSED_SUGGESTION:
	      {
	        var value = action.value;
	        var sectionIndex = action.sectionIndex;
	        var suggestionIndex = action.suggestionIndex;

	        var valueBeforeUpDown = state.valueBeforeUpDown === null && typeof value !== 'undefined' ? value : state.valueBeforeUpDown;

	        return _extends({}, state, {
	          focusedSectionIndex: sectionIndex,
	          focusedSuggestionIndex: suggestionIndex,
	          valueBeforeUpDown: valueBeforeUpDown
	        });
	      }

	    case REVEAL_SUGGESTIONS:
	      return _extends({}, state, {
	        isCollapsed: false
	      });

	    case CLOSE_SUGGESTIONS:
	      return _extends({}, state, {
	        focusedSectionIndex: null,
	        focusedSuggestionIndex: null,
	        valueBeforeUpDown: null,
	        isCollapsed: true,
	        lastAction: action.lastAction
	      });

	    default:
	      return state;
	  }
	}

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(190);

	var _reducerAndActions = __webpack_require__(209);

	var _reactAutowhatever = __webpack_require__(211);

	var _reactAutowhatever2 = _interopRequireDefault(_reactAutowhatever);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function mapStateToProps(state) {
	  return {
	    isFocused: state.isFocused,
	    isCollapsed: state.isCollapsed,
	    focusedSectionIndex: state.focusedSectionIndex,
	    focusedSuggestionIndex: state.focusedSuggestionIndex,
	    valueBeforeUpDown: state.valueBeforeUpDown,
	    lastAction: state.lastAction
	  };
	}

	function mapDispatchToProps(dispatch) {
	  return {
	    inputFocused: function inputFocused(shouldRenderSuggestions) {
	      dispatch((0, _reducerAndActions.inputFocused)(shouldRenderSuggestions));
	    },
	    inputBlurred: function inputBlurred() {
	      dispatch((0, _reducerAndActions.inputBlurred)());
	    },
	    inputChanged: function inputChanged(shouldRenderSuggestions, lastAction) {
	      dispatch((0, _reducerAndActions.inputChanged)(shouldRenderSuggestions, lastAction));
	    },
	    updateFocusedSuggestion: function updateFocusedSuggestion(sectionIndex, suggestionIndex, value) {
	      dispatch((0, _reducerAndActions.updateFocusedSuggestion)(sectionIndex, suggestionIndex, value));
	    },
	    revealSuggestions: function revealSuggestions() {
	      dispatch((0, _reducerAndActions.revealSuggestions)());
	    },
	    closeSuggestions: function closeSuggestions(lastAction) {
	      dispatch((0, _reducerAndActions.closeSuggestions)(lastAction));
	    }
	  };
	}

	var Autosuggest = function (_Component) {
	  _inherits(Autosuggest, _Component);

	  function Autosuggest() {
	    _classCallCheck(this, Autosuggest);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Autosuggest).call(this));

	    _this.saveInput = _this.saveInput.bind(_this);
	    return _this;
	  }

	  _createClass(Autosuggest, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.suggestions !== this.props.suggestions) {
	        var suggestions = nextProps.suggestions;
	        var inputProps = nextProps.inputProps;
	        var shouldRenderSuggestions = nextProps.shouldRenderSuggestions;
	        var isCollapsed = nextProps.isCollapsed;
	        var revealSuggestions = nextProps.revealSuggestions;
	        var lastAction = nextProps.lastAction;
	        var value = inputProps.value;

	        if (isCollapsed && lastAction !== 'click' && lastAction !== 'enter' && suggestions.length > 0 && shouldRenderSuggestions(value)) {
	          revealSuggestions();
	        }
	      }
	    }
	  }, {
	    key: 'getSuggestion',
	    value: function getSuggestion(sectionIndex, suggestionIndex) {
	      var _props = this.props;
	      var suggestions = _props.suggestions;
	      var multiSection = _props.multiSection;
	      var getSectionSuggestions = _props.getSectionSuggestions;

	      if (multiSection) {
	        return getSectionSuggestions(suggestions[sectionIndex])[suggestionIndex];
	      }

	      return suggestions[suggestionIndex];
	    }
	  }, {
	    key: 'getFocusedSuggestion',
	    value: function getFocusedSuggestion() {
	      var _props2 = this.props;
	      var focusedSectionIndex = _props2.focusedSectionIndex;
	      var focusedSuggestionIndex = _props2.focusedSuggestionIndex;

	      if (focusedSuggestionIndex === null) {
	        return null;
	      }

	      return this.getSuggestion(focusedSectionIndex, focusedSuggestionIndex);
	    }
	  }, {
	    key: 'getSuggestionValueByIndex',
	    value: function getSuggestionValueByIndex(sectionIndex, suggestionIndex) {
	      var getSuggestionValue = this.props.getSuggestionValue;

	      return getSuggestionValue(this.getSuggestion(sectionIndex, suggestionIndex));
	    }
	  }, {
	    key: 'getSuggestionIndices',
	    value: function getSuggestionIndices(suggestionElement) {
	      var sectionIndex = suggestionElement.getAttribute('data-section-index');
	      var suggestionIndex = suggestionElement.getAttribute('data-suggestion-index');

	      return {
	        sectionIndex: typeof sectionIndex === 'string' ? parseInt(sectionIndex, 10) : null,
	        suggestionIndex: parseInt(suggestionIndex, 10)
	      };
	    }
	  }, {
	    key: 'findSuggestionElement',
	    value: function findSuggestionElement(startNode) {
	      var node = startNode;

	      do {
	        if (node.getAttribute('data-suggestion-index') !== null) {
	          return node;
	        }

	        node = node.parentNode;
	      } while (node !== null);

	      console.error('Clicked element:', startNode); // eslint-disable-line no-console
	      throw new Error('Couldn\'t find suggestion element');
	    }
	  }, {
	    key: 'maybeEmitOnChange',
	    value: function maybeEmitOnChange(event, newValue, method) {
	      var _props$inputProps = this.props.inputProps;
	      var value = _props$inputProps.value;
	      var onChange = _props$inputProps.onChange;

	      if (newValue !== value) {
	        onChange && onChange(event, { newValue: newValue, method: method });
	      }
	    }
	  }, {
	    key: 'willRenderSuggestions',
	    value: function willRenderSuggestions() {
	      var _props3 = this.props;
	      var suggestions = _props3.suggestions;
	      var inputProps = _props3.inputProps;
	      var shouldRenderSuggestions = _props3.shouldRenderSuggestions;
	      var value = inputProps.value;

	      return suggestions.length > 0 && shouldRenderSuggestions(value);
	    }
	  }, {
	    key: 'saveInput',
	    value: function saveInput(autowhatever) {
	      if (autowhatever !== null) {
	        var input = autowhatever.refs.input;

	        this.input = input;
	        this.props.inputRef(input);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props4 = this.props;
	      var suggestions = _props4.suggestions;
	      var onSuggestionsUpdateRequested = _props4.onSuggestionsUpdateRequested;
	      var renderSuggestion = _props4.renderSuggestion;
	      var inputProps = _props4.inputProps;
	      var shouldRenderSuggestions = _props4.shouldRenderSuggestions;
	      var onSuggestionSelected = _props4.onSuggestionSelected;
	      var multiSection = _props4.multiSection;
	      var renderSectionTitle = _props4.renderSectionTitle;
	      var id = _props4.id;
	      var getSectionSuggestions = _props4.getSectionSuggestions;
	      var focusInputOnSuggestionClick = _props4.focusInputOnSuggestionClick;
	      var theme = _props4.theme;
	      var isFocused = _props4.isFocused;
	      var isCollapsed = _props4.isCollapsed;
	      var focusedSectionIndex = _props4.focusedSectionIndex;
	      var focusedSuggestionIndex = _props4.focusedSuggestionIndex;
	      var valueBeforeUpDown = _props4.valueBeforeUpDown;
	      var inputFocused = _props4.inputFocused;
	      var inputBlurred = _props4.inputBlurred;
	      var inputChanged = _props4.inputChanged;
	      var updateFocusedSuggestion = _props4.updateFocusedSuggestion;
	      var revealSuggestions = _props4.revealSuggestions;
	      var closeSuggestions = _props4.closeSuggestions;
	      var value = inputProps.value;
	      var _onBlur = inputProps.onBlur;
	      var _onFocus = inputProps.onFocus;
	      var _onKeyDown = inputProps.onKeyDown;

	      var isOpen = isFocused && !isCollapsed && this.willRenderSuggestions();
	      var items = isOpen ? suggestions : [];
	      var autowhateverInputProps = _extends({}, inputProps, {
	        onFocus: function onFocus(event) {
	          if (!_this2.justClickedOnSuggestion) {
	            inputFocused(shouldRenderSuggestions(value));
	            _onFocus && _onFocus(event);
	          }
	        },
	        onBlur: function onBlur(event) {
	          _this2.onBlurEvent = event;

	          if (!_this2.justClickedOnSuggestion) {
	            inputBlurred();
	            _onBlur && _onBlur(event);

	            if (valueBeforeUpDown !== null && value !== valueBeforeUpDown) {
	              onSuggestionsUpdateRequested({ value: value, reason: 'blur' });
	            }
	          }
	        },
	        onChange: function onChange(event) {
	          var value = event.target.value;
	          var _props5 = _this2.props;
	          var shouldRenderSuggestions = _props5.shouldRenderSuggestions;
	          var onSuggestionsUpdateRequested = _props5.onSuggestionsUpdateRequested;

	          _this2.maybeEmitOnChange(event, value, 'type');
	          inputChanged(shouldRenderSuggestions(value), 'type');
	          onSuggestionsUpdateRequested({ value: value, reason: 'type' });
	        },
	        onKeyDown: function onKeyDown(event, data) {
	          switch (event.key) {
	            case 'ArrowDown':
	            case 'ArrowUp':
	              if (isCollapsed) {
	                if (_this2.willRenderSuggestions()) {
	                  revealSuggestions();
	                }
	              } else if (suggestions.length > 0) {
	                var newFocusedSectionIndex = data.newFocusedSectionIndex;
	                var newFocusedItemIndex = data.newFocusedItemIndex;

	                var newValue = newFocusedItemIndex === null ? valueBeforeUpDown : _this2.getSuggestionValueByIndex(newFocusedSectionIndex, newFocusedItemIndex);

	                updateFocusedSuggestion(newFocusedSectionIndex, newFocusedItemIndex, value);
	                _this2.maybeEmitOnChange(event, newValue, event.key === 'ArrowDown' ? 'down' : 'up');
	              }
	              event.preventDefault();
	              break;

	            case 'Enter':
	              {
	                var focusedSuggestion = _this2.getFocusedSuggestion();

	                if (focusedSuggestion !== null) {
	                  closeSuggestions('enter');
	                  onSuggestionSelected(event, {
	                    suggestion: focusedSuggestion,
	                    suggestionValue: value,
	                    method: 'enter'
	                  });
	                  onSuggestionsUpdateRequested({ value: value, reason: 'enter' });
	                }
	                break;
	              }

	            case 'Escape':
	              if (isOpen) {
	                // If input.type === 'search', the browser clears the input
	                // when Escape is pressed. We want to disable this default
	                // behaviour so that, when suggestions are shown, we just hide
	                // them, without clearing the input.
	                event.preventDefault();
	              }

	              if (valueBeforeUpDown === null) {
	                // Didn't interact with Up/Down
	                if (!isOpen) {
	                  _this2.maybeEmitOnChange(event, '', 'escape');
	                  onSuggestionsUpdateRequested({ value: '', reason: 'escape' });
	                }
	              } else {
	                // Interacted with Up/Down
	                _this2.maybeEmitOnChange(event, valueBeforeUpDown, 'escape');
	              }

	              closeSuggestions('escape');
	              break;
	          }

	          _onKeyDown && _onKeyDown(event);
	        }
	      });
	      var onMouseEnter = function onMouseEnter(event, _ref) {
	        var sectionIndex = _ref.sectionIndex;
	        var itemIndex = _ref.itemIndex;

	        updateFocusedSuggestion(sectionIndex, itemIndex);
	      };
	      var onMouseLeave = function onMouseLeave() {
	        updateFocusedSuggestion(null, null);
	      };
	      var onMouseDown = function onMouseDown() {
	        _this2.justClickedOnSuggestion = true;
	      };
	      var onClick = function onClick(event) {
	        var _getSuggestionIndices = _this2.getSuggestionIndices(_this2.findSuggestionElement(event.target));

	        var sectionIndex = _getSuggestionIndices.sectionIndex;
	        var suggestionIndex = _getSuggestionIndices.suggestionIndex;

	        var clickedSuggestion = _this2.getSuggestion(sectionIndex, suggestionIndex);
	        var clickedSuggestionValue = _this2.props.getSuggestionValue(clickedSuggestion);

	        _this2.maybeEmitOnChange(event, clickedSuggestionValue, 'click');
	        onSuggestionSelected(event, {
	          suggestion: clickedSuggestion,
	          suggestionValue: clickedSuggestionValue,
	          method: 'click'
	        });
	        closeSuggestions('click');

	        if (focusInputOnSuggestionClick === true) {
	          _this2.input.focus();
	        } else {
	          inputBlurred();
	          _onBlur && _onBlur(_this2.onBlurEvent);
	        }

	        onSuggestionsUpdateRequested({ value: clickedSuggestionValue, reason: 'click' });

	        _this2.justClickedOnSuggestion = false;
	      };
	      var itemProps = function itemProps(_ref2) {
	        var sectionIndex = _ref2.sectionIndex;
	        var itemIndex = _ref2.itemIndex;

	        return {
	          'data-section-index': sectionIndex,
	          'data-suggestion-index': itemIndex,
	          onMouseEnter: onMouseEnter,
	          onMouseLeave: onMouseLeave,
	          onMouseDown: onMouseDown,
	          onTouchStart: onMouseDown, // Because on iOS `onMouseDown` is not triggered
	          onClick: onClick
	        };
	      };
	      var renderItem = function renderItem(item) {
	        return renderSuggestion(item, { value: value, valueBeforeUpDown: valueBeforeUpDown });
	      };

	      return _react2.default.createElement(_reactAutowhatever2.default, { multiSection: multiSection,
	        items: items,
	        renderItem: renderItem,
	        renderSectionTitle: renderSectionTitle,
	        getSectionItems: getSectionSuggestions,
	        focusedSectionIndex: focusedSectionIndex,
	        focusedItemIndex: focusedSuggestionIndex,
	        inputProps: autowhateverInputProps,
	        itemProps: itemProps,
	        theme: theme,
	        id: id,
	        ref: this.saveInput });
	    }
	  }]);

	  return Autosuggest;
	}(_react.Component);

	Autosuggest.propTypes = {
	  suggestions: _react.PropTypes.array.isRequired,
	  onSuggestionsUpdateRequested: _react.PropTypes.func.isRequired,
	  getSuggestionValue: _react.PropTypes.func.isRequired,
	  renderSuggestion: _react.PropTypes.func.isRequired,
	  inputProps: _react.PropTypes.object.isRequired,
	  shouldRenderSuggestions: _react.PropTypes.func.isRequired,
	  onSuggestionSelected: _react.PropTypes.func.isRequired,
	  multiSection: _react.PropTypes.bool.isRequired,
	  renderSectionTitle: _react.PropTypes.func.isRequired,
	  getSectionSuggestions: _react.PropTypes.func.isRequired,
	  focusInputOnSuggestionClick: _react.PropTypes.bool.isRequired,
	  theme: _react.PropTypes.object.isRequired,
	  id: _react.PropTypes.string.isRequired,
	  inputRef: _react.PropTypes.func.isRequired,

	  isFocused: _react.PropTypes.bool.isRequired,
	  isCollapsed: _react.PropTypes.bool.isRequired,
	  focusedSectionIndex: _react.PropTypes.number,
	  focusedSuggestionIndex: _react.PropTypes.number,
	  valueBeforeUpDown: _react.PropTypes.string,
	  lastAction: _react.PropTypes.string,

	  inputFocused: _react.PropTypes.func.isRequired,
	  inputBlurred: _react.PropTypes.func.isRequired,
	  inputChanged: _react.PropTypes.func.isRequired,
	  updateFocusedSuggestion: _react.PropTypes.func.isRequired,
	  revealSuggestions: _react.PropTypes.func.isRequired,
	  closeSuggestions: _react.PropTypes.func.isRequired
	};
	exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Autosuggest);

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(7);

	var _react2 = _interopRequireDefault(_react);

	var _sectionIterator = __webpack_require__(212);

	var _sectionIterator2 = _interopRequireDefault(_sectionIterator);

	var _reactThemeable = __webpack_require__(213);

	var _reactThemeable2 = _interopRequireDefault(_reactThemeable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function noop() {}

	var Autowhatever = function (_Component) {
	  _inherits(Autowhatever, _Component);

	  function Autowhatever(props) {
	    _classCallCheck(this, Autowhatever);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Autowhatever).call(this, props));

	    _this.onKeyDown = _this.onKeyDown.bind(_this);
	    return _this;
	  } // Styles. See: https://github.com/markdalgleish/react-themeable


	  _createClass(Autowhatever, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.ensureFocusedSuggestionIsVisible();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.ensureFocusedSuggestionIsVisible();
	    }
	  }, {
	    key: 'getItemId',
	    value: function getItemId(sectionIndex, itemIndex) {
	      if (itemIndex === null) {
	        return null;
	      }

	      var id = this.props.id;

	      var section = sectionIndex === null ? '' : 'section-' + sectionIndex;

	      return 'react-autowhatever-' + id + '-' + section + '-item-' + itemIndex;
	    }
	  }, {
	    key: 'getItemsContainerId',
	    value: function getItemsContainerId() {
	      var id = this.props.id;


	      return 'react-whatever-' + id;
	    }
	  }, {
	    key: 'renderItemsList',
	    value: function renderItemsList(theme, items, sectionIndex) {
	      var _this2 = this;

	      var _props = this.props;
	      var id = _props.id;
	      var renderItem = _props.renderItem;
	      var focusedSectionIndex = _props.focusedSectionIndex;
	      var focusedItemIndex = _props.focusedItemIndex;

	      var isItemPropsFunction = typeof this.props.itemProps === 'function';

	      return items.map(function (item, itemIndex) {
	        var itemPropsObj = isItemPropsFunction ? _this2.props.itemProps({ sectionIndex: sectionIndex, itemIndex: itemIndex }) : _this2.props.itemProps;
	        var onMouseEnter = itemPropsObj.onMouseEnter;
	        var onMouseLeave = itemPropsObj.onMouseLeave;
	        var onMouseDown = itemPropsObj.onMouseDown;
	        var onClick = itemPropsObj.onClick;


	        var onMouseEnterFn = onMouseEnter ? function (event) {
	          return onMouseEnter(event, { sectionIndex: sectionIndex, itemIndex: itemIndex });
	        } : noop;
	        var onMouseLeaveFn = onMouseLeave ? function (event) {
	          return onMouseLeave(event, { sectionIndex: sectionIndex, itemIndex: itemIndex });
	        } : noop;
	        var onMouseDownFn = onMouseDown ? function (event) {
	          return onMouseDown(event, { sectionIndex: sectionIndex, itemIndex: itemIndex });
	        } : noop;
	        var onClickFn = onClick ? function (event) {
	          return onClick(event, { sectionIndex: sectionIndex, itemIndex: itemIndex });
	        } : noop;
	        var sectionPrefix = sectionIndex === null ? '' : 'section-' + sectionIndex + '-';
	        var itemKey = 'react-autowhatever-' + id + '-' + sectionPrefix + 'item-' + itemIndex;
	        var isFocused = sectionIndex === focusedSectionIndex && itemIndex === focusedItemIndex;
	        var itemProps = _extends({
	          id: _this2.getItemId(sectionIndex, itemIndex),
	          ref: isFocused ? 'focusedItem' : null,
	          role: 'option'
	        }, theme(itemKey, 'item', isFocused && 'itemFocused'), itemPropsObj, {
	          onMouseEnter: onMouseEnterFn,
	          onMouseLeave: onMouseLeaveFn,
	          onMouseDown: onMouseDownFn,
	          onClick: onClickFn
	        });

	        return _react2.default.createElement(
	          'li',
	          itemProps,
	          renderItem(item)
	        );
	      });
	    }
	  }, {
	    key: 'renderSections',
	    value: function renderSections(theme) {
	      var _this3 = this;

	      var _props2 = this.props;
	      var items = _props2.items;
	      var getSectionItems = _props2.getSectionItems;

	      var sectionItemsArray = items.map(function (section) {
	        return getSectionItems(section);
	      });
	      var noItemsExist = sectionItemsArray.every(function (sectionItems) {
	        return sectionItems.length === 0;
	      });

	      if (noItemsExist) {
	        return null;
	      }

	      var _props3 = this.props;
	      var id = _props3.id;
	      var shouldRenderSection = _props3.shouldRenderSection;
	      var renderSectionTitle = _props3.renderSectionTitle;


	      return _react2.default.createElement(
	        'div',
	        _extends({ id: this.getItemsContainerId(),
	          ref: 'itemsContainer',
	          role: 'listbox'
	        }, theme('react-autowhatever-' + id + '-items-container', 'itemsContainer')),
	        items.map(function (section, sectionIndex) {
	          if (!shouldRenderSection(section)) {
	            return null;
	          }

	          var sectionTitle = renderSectionTitle(section);

	          return _react2.default.createElement(
	            'div',
	            theme('react-autowhatever-' + id + '-section-' + sectionIndex + '-container', 'sectionContainer'),
	            sectionTitle && _react2.default.createElement(
	              'div',
	              theme('react-autowhatever-' + id + '-section-' + sectionIndex + '-title', 'sectionTitle'),
	              sectionTitle
	            ),
	            _react2.default.createElement(
	              'ul',
	              theme('react-autowhatever-' + id + '-section-' + sectionIndex + '-items-container', 'sectionItemsContainer'),
	              _this3.renderItemsList(theme, sectionItemsArray[sectionIndex], sectionIndex)
	            )
	          );
	        })
	      );
	    }
	  }, {
	    key: 'renderItems',
	    value: function renderItems(theme) {
	      var items = this.props.items;


	      if (items.length === 0) {
	        return null;
	      }

	      var id = this.props;

	      return _react2.default.createElement(
	        'ul',
	        _extends({ id: this.getItemsContainerId(),
	          ref: 'itemsContainer',
	          role: 'listbox'
	        }, theme('react-autowhatever-' + id + '-items-container', 'itemsContainer')),
	        this.renderItemsList(theme, items, null)
	      );
	    }
	  }, {
	    key: 'onKeyDown',
	    value: function onKeyDown(event) {
	      var _this4 = this;

	      var _props4 = this.props;
	      var inputProps = _props4.inputProps;
	      var focusedSectionIndex = _props4.focusedSectionIndex;
	      var focusedItemIndex = _props4.focusedItemIndex;
	      var onKeyDownFn = inputProps.onKeyDown; // Babel is throwing:
	      //   "onKeyDown" is read-only
	      // on:
	      //   const { onKeyDown } = inputProps;

	      switch (event.key) {
	        case 'ArrowDown':
	        case 'ArrowUp':
	          {
	            var _ret = function () {
	              var _props5 = _this4.props;
	              var multiSection = _props5.multiSection;
	              var items = _props5.items;
	              var getSectionItems = _props5.getSectionItems;

	              var sectionIterator = (0, _sectionIterator2.default)({
	                multiSection: multiSection,
	                data: multiSection ? items.map(function (section) {
	                  return getSectionItems(section).length;
	                }) : items.length
	              });
	              var nextPrev = event.key === 'ArrowDown' ? 'next' : 'prev';

	              var _sectionIterator$next = sectionIterator[nextPrev]([focusedSectionIndex, focusedItemIndex]);

	              var _sectionIterator$next2 = _slicedToArray(_sectionIterator$next, 2);

	              var newFocusedSectionIndex = _sectionIterator$next2[0];
	              var newFocusedItemIndex = _sectionIterator$next2[1];


	              onKeyDownFn(event, { newFocusedSectionIndex: newFocusedSectionIndex, newFocusedItemIndex: newFocusedItemIndex });
	              return 'break';
	            }();

	            if (_ret === 'break') break;
	          }

	        default:
	          onKeyDownFn(event, { focusedSectionIndex: focusedSectionIndex, focusedItemIndex: focusedItemIndex });
	      }
	    }
	  }, {
	    key: 'ensureFocusedSuggestionIsVisible',
	    value: function ensureFocusedSuggestionIsVisible() {
	      if (!this.refs.focusedItem) {
	        return;
	      }

	      var _refs = this.refs;
	      var focusedItem = _refs.focusedItem;
	      var itemsContainer = _refs.itemsContainer;

	      var itemOffsetRelativeToContainer = focusedItem.offsetParent === itemsContainer ? focusedItem.offsetTop : focusedItem.offsetTop - itemsContainer.offsetTop;

	      var scrollTop = itemsContainer.scrollTop; // Top of the visible area

	      if (itemOffsetRelativeToContainer < scrollTop) {
	        // Item is off the top of the visible area
	        scrollTop = itemOffsetRelativeToContainer;
	      } else if (itemOffsetRelativeToContainer + focusedItem.offsetHeight > scrollTop + itemsContainer.offsetHeight) {
	        // Item is off the bottom of the visible area
	        scrollTop = itemOffsetRelativeToContainer + focusedItem.offsetHeight - itemsContainer.offsetHeight;
	      }

	      if (scrollTop !== itemsContainer.scrollTop) {
	        itemsContainer.scrollTop = scrollTop;
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props6 = this.props;
	      var id = _props6.id;
	      var multiSection = _props6.multiSection;
	      var focusedSectionIndex = _props6.focusedSectionIndex;
	      var focusedItemIndex = _props6.focusedItemIndex;

	      var theme = (0, _reactThemeable2.default)(this.props.theme);
	      var renderedItems = multiSection ? this.renderSections(theme) : this.renderItems(theme);
	      var isOpen = renderedItems !== null;
	      var ariaActivedescendant = this.getItemId(focusedSectionIndex, focusedItemIndex);
	      var inputProps = _extends({
	        type: 'text',
	        value: '',
	        autoComplete: 'off',
	        role: 'combobox',
	        ref: 'input',
	        'aria-autocomplete': 'list',
	        'aria-owns': this.getItemsContainerId(),
	        'aria-expanded': isOpen,
	        'aria-activedescendant': ariaActivedescendant
	      }, theme('react-autowhatever-' + id + '-input', 'input'), this.props.inputProps, {
	        onKeyDown: this.props.inputProps.onKeyDown && this.onKeyDown
	      });

	      return _react2.default.createElement(
	        'div',
	        theme('react-autowhatever-' + id + '-container', 'container', isOpen && 'containerOpen'),
	        _react2.default.createElement('input', inputProps),
	        renderedItems
	      );
	    }
	  }]);

	  return Autowhatever;
	}(_react.Component);

	Autowhatever.propTypes = {
	  id: _react.PropTypes.string, // Used in aria-* attributes. If multiple Autowhatever's are rendered on a page, they must have unique ids.
	  multiSection: _react.PropTypes.bool, // Indicates whether a multi section layout should be rendered.
	  items: _react.PropTypes.array.isRequired, // Array of items or sections to render.
	  renderItem: _react.PropTypes.func, // This function renders a single item.
	  shouldRenderSection: _react.PropTypes.func, // This function gets a section and returns whether it should be rendered, or not.
	  renderSectionTitle: _react.PropTypes.func, // This function gets a section and renders its title.
	  getSectionItems: _react.PropTypes.func, // This function gets a section and returns its items, which will be passed into `renderItem` for rendering.
	  inputProps: _react.PropTypes.object, // Arbitrary input props
	  itemProps: _react.PropTypes.oneOfType([// Arbitrary item props
	  _react.PropTypes.object, _react.PropTypes.func]),
	  focusedSectionIndex: _react.PropTypes.number, // Section index of the focused item
	  focusedItemIndex: _react.PropTypes.number, // Focused item index (within a section)
	  theme: _react.PropTypes.object };
	Autowhatever.defaultProps = {
	  id: '1',
	  multiSection: false,
	  shouldRenderSection: function shouldRenderSection() {
	    return true;
	  },
	  renderItem: function renderItem() {
	    throw new Error('`renderItem` must be provided');
	  },
	  renderSectionTitle: function renderSectionTitle() {
	    throw new Error('`renderSectionTitle` must be provided');
	  },
	  getSectionItems: function getSectionItems() {
	    throw new Error('`getSectionItems` must be provided');
	  },
	  inputProps: {},
	  itemProps: {},
	  focusedSectionIndex: null,
	  focusedItemIndex: null,
	  theme: {
	    container: 'react-autowhatever__container',
	    containerOpen: 'react-autowhatever__container--open',
	    input: 'react-autowhatever__input',
	    itemsContainer: 'react-autowhatever__items-container',
	    item: 'react-autowhatever__item',
	    itemFocused: 'react-autowhatever__item--focused',
	    sectionContainer: 'react-autowhatever__section-container',
	    sectionTitle: 'react-autowhatever__section-title',
	    sectionItemsContainer: 'react-autowhatever__section-items-container'
	  }
	};
	exports.default = Autowhatever;


/***/ },
/* 212 */
/***/ function(module, exports) {

	"use strict";

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	module.exports = function (_ref) {
	  var data = _ref.data;
	  var multiSection = _ref.multiSection;

	  function nextNonEmptySectionIndex(sectionIndex) {
	    if (sectionIndex === null) {
	      sectionIndex = 0;
	    } else {
	      sectionIndex++;
	    }

	    while (sectionIndex < data.length && data[sectionIndex] === 0) {
	      sectionIndex++;
	    }

	    return sectionIndex === data.length ? null : sectionIndex;
	  }

	  function prevNonEmptySectionIndex(sectionIndex) {
	    if (sectionIndex === null) {
	      sectionIndex = data.length - 1;
	    } else {
	      sectionIndex--;
	    }

	    while (sectionIndex >= 0 && data[sectionIndex] === 0) {
	      sectionIndex--;
	    }

	    return sectionIndex === -1 ? null : sectionIndex;
	  }

	  function next(position) {
	    var _position = _slicedToArray(position, 2);

	    var sectionIndex = _position[0];
	    var itemIndex = _position[1];


	    if (multiSection) {
	      if (itemIndex === null || itemIndex === data[sectionIndex] - 1) {
	        sectionIndex = nextNonEmptySectionIndex(sectionIndex);

	        if (sectionIndex === null) {
	          return [null, null];
	        }

	        return [sectionIndex, 0];
	      }

	      return [sectionIndex, itemIndex + 1];
	    }

	    if (data === 0 || itemIndex === data - 1) {
	      return [null, null];
	    }

	    if (itemIndex === null) {
	      return [null, 0];
	    }

	    return [null, itemIndex + 1];
	  }

	  function prev(position) {
	    var _position2 = _slicedToArray(position, 2);

	    var sectionIndex = _position2[0];
	    var itemIndex = _position2[1];


	    if (multiSection) {
	      if (itemIndex === null || itemIndex === 0) {
	        sectionIndex = prevNonEmptySectionIndex(sectionIndex);

	        if (sectionIndex === null) {
	          return [null, null];
	        }

	        return [sectionIndex, data[sectionIndex] - 1];
	      }

	      return [sectionIndex, itemIndex - 1];
	    }

	    if (data === 0 || itemIndex === 0) {
	      return [null, null];
	    }

	    if (itemIndex === null) {
	      return [null, data - 1];
	    }

	    return [null, itemIndex - 1];
	  }

	  function isLast(position) {
	    return next(position)[1] === null;
	  }

	  return {
	    next: next,
	    prev: prev,
	    isLast: isLast
	  };
	};


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	var _objectAssign = __webpack_require__(214);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var truthy = function truthy(x) {
	  return x;
	};

	exports['default'] = function (input) {
	  var _ref = Array.isArray(input) && input.length === 2 ? input : [input, null];

	  var _ref2 = _slicedToArray(_ref, 2);

	  var theme = _ref2[0];
	  var classNameDecorator = _ref2[1];

	  return function (key) {
	    for (var _len = arguments.length, names = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      names[_key - 1] = arguments[_key];
	    }

	    var styles = names.map(function (name) {
	      return theme[name];
	    }).filter(truthy);

	    return typeof styles[0] === 'string' || typeof classNameDecorator === 'function' ? { key: key, className: classNameDecorator ? classNameDecorator.apply(undefined, _toConsumableArray(styles)) : styles.join(' ') } : { key: key, style: _objectAssign2['default'].apply(undefined, [{}].concat(_toConsumableArray(styles))) };
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 214 */
/***/ function(module, exports) {

	'use strict';
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function ownEnumerableKeys(obj) {
		var keys = Object.getOwnPropertyNames(obj);

		if (Object.getOwnPropertySymbols) {
			keys = keys.concat(Object.getOwnPropertySymbols(obj));
		}

		return keys.filter(function (key) {
			return propIsEnumerable.call(obj, key);
		});
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = ownEnumerableKeys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	var DatasourceLink, FlexContainer, React;

	React = __webpack_require__(7);

	FlexContainer = __webpack_require__(166);

	DatasourceLink = __webpack_require__(216);

	module.exports = React.createClass({
	  render: function() {
	    return React.createElement(FlexContainer, {
	      "align": 'end',
	      "direction": 'column',
	      "padding": '20px 0'
	    }, React.createElement(DatasourceLink, {
	      "href": 'https://openweathermap.org/current',
	      "label": 'OpenWeather'
	    }), React.createElement(DatasourceLink, {
	      "href": 'https://simplemaps.com/data/world-cities',
	      "label": 'simplemaps'
	    }));
	  }
	});


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	var React;

	React = __webpack_require__(7);

	module.exports = React.createClass({
	  style: function() {
	    return {
	      color: 'gray'
	    };
	  },
	  render: function() {
	    return React.createElement("a", {
	      "href": this.props.href,
	      "style": this.style()
	    }, this.props.label);
	  }
	});


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var FlexContainer, IntuitiveConditionsReadout, IntuitiveTemperatureReadout, LocationReadout, React;

	React = __webpack_require__(7);

	FlexContainer = __webpack_require__(166);

	IntuitiveTemperatureReadout = __webpack_require__(218);

	IntuitiveConditionsReadout = __webpack_require__(219);

	LocationReadout = __webpack_require__(220);

	module.exports = React.createClass({
	  maybeRenderConditions: function() {
	    var conditions;
	    conditions = this.props.weather.weather[0].description;
	    switch (false) {
	      case conditions !== '':
	        return null;
	      default:
	        return React.createElement("span", null, React.createElement("span", {
	          "style": {
	            margin: '20px'
	          }
	        }, "and"), React.createElement(IntuitiveConditionsReadout, {
	          "conditions": conditions,
	          "daytime": this.isLocalDaytime(),
	          "windy": this.props.weather.wind.speed > 5
	        }));
	    }
	  },
	  isLocalDaytime: function() {
	    var sunrise, sunset, time;
	    time = this.props.weather.dt;
	    sunrise = this.props.weather.sys.sunrise;
	    sunset = this.props.weather.sys.sunset;
	    return (sunrise < time && time < sunset);
	  },
	  style: function() {
	    return {
	      color: '#ccc',
	      fontSize: '1.6rem',
	      margin: '20px 0'
	    };
	  },
	  render: function() {
	    return React.createElement("div", {
	      "style": this.style()
	    }, React.createElement(FlexContainer, {
	      "direction": 'column',
	      "justify": 'center',
	      "padding": '20px'
	    }, React.createElement("div", null, "It\'s"), React.createElement(FlexContainer, {
	      "direction": 'row',
	      "justify": 'center',
	      "wrap": 'wrap'
	    }, React.createElement(IntuitiveTemperatureReadout, {
	      "temp": this.props.weather.main.feels_like,
	      "units": 'c'
	    }), this.maybeRenderConditions()), React.createElement("div", {
	      "style": {
	        alignSelf: 'flex-end'
	      }
	    }, "in ", React.createElement(LocationReadout, {
	      "location": this.props.location
	    }))));
	  }
	});


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var React, colors;

	React = __webpack_require__(7);

	module.exports = React.createClass({
	  getIntuitiveTemperature: function(temp, units) {
	    if (units === 'f') {
	      temp = (temp - 32) * 5 / 9;
	    }
	    switch (false) {
	      case !(temp < -7):
	        return 'very cold';
	      case !(temp < 11):
	        return 'cold';
	      case !(temp < 22):
	        return 'cool';
	      case !(temp < 29):
	        return 'warm';
	      case !(temp < 37):
	        return 'hot';
	      default:
	        return 'very hot';
	    }
	  },
	  style: function(temp) {
	    return {
	      color: colors[temp],
	      textTransform: 'uppercase',
	      fontSize: '4.8rem'
	    };
	  },
	  render: function() {
	    var temp;
	    temp = this.getIntuitiveTemperature(this.props.temp, this.props.units);
	    return React.createElement("span", {
	      "style": this.style(temp)
	    }, temp);
	  }
	});

	colors = {
	  'very cold': '#6F66E4',
	  cold: '#86A2DC',
	  cool: '#C2D5FF',
	  warm: '#FF972F',
	  hot: '#FF5821',
	  'very hot': '#FF310A'
	};


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var React, colors;

	React = __webpack_require__(7);

	module.exports = React.createClass({
	  getIntuitiveConditions: function(conditions) {
	    var c;
	    c = conditions.toLowerCase();
	    switch (false) {
	      case !c.includes('storm'):
	        return 'stormy';
	      case !c.includes('squall'):
	        return 'stormy';
	      case !c.includes('tornado'):
	        return 'stormy';
	      case !c.includes('snow'):
	        return 'snowy';
	      case !c.includes('sleet'):
	        return 'icy';
	      case !c.includes('rain'):
	        return 'rainy';
	      case !c.includes('mist'):
	        return 'misty';
	      case !c.includes('drizzle'):
	        return 'misty';
	      case !c.includes('haze'):
	        return 'hazy';
	      case !c.includes('smoke'):
	        return 'hazy';
	      case !c.includes('ash'):
	        return 'hazy';
	      case !c.includes('dust'):
	        return 'hazy';
	      case !c.includes('sand'):
	        return 'hazy';
	      case !c.includes('fog'):
	        return 'foggy';
	      case !c.includes('overcast'):
	        return 'cloudy';
	      case !c.includes('broken clouds'):
	        return 'cloudy';
	      case !((c.includes('clear')) || (c.includes('few clouds')) || (c.includes('scattered clouds'))):
	        if (this.props.windy) {
	          'windy';
	        }
	        if (this.props.daytime) {
	          return 'sunny';
	        } else {
	          return 'clear';
	        }
	        break;
	      default:
	        return 'mysterious';
	    }
	  },
	  style: function(conditions) {
	    return {
	      color: colors[conditions],
	      textTransform: 'uppercase',
	      fontSize: '4.8rem'
	    };
	  },
	  render: function() {
	    var conditions;
	    conditions = this.getIntuitiveConditions(this.props.conditions);
	    return React.createElement("span", {
	      "style": this.style(conditions)
	    }, conditions);
	  }
	});

	colors = {
	  sunny: '#F3F0CB',
	  hazy: '#CCA983',
	  misty: '#8EBD95',
	  icy: '#D5EDF5',
	  stormy: '#222',
	  foggy: 'gray',
	  cloudy: '#D6C9D5',
	  snowy: 'white',
	  rainy: '#745EE2',
	  mysterious: '#FF5A3C'
	};


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	var React;

	React = __webpack_require__(7);

	module.exports = React.createClass({
	  render: function() {
	    return React.createElement("span", null, this.props.location);
	  }
	});


/***/ },
/* 221 */
/***/ function(module, exports) {

	module.exports = {"data":[{"n":"Tokyo","c":"Japan","y":35.6897,"x":139.6922},{"n":"Jakarta","c":"Indonesia","y":-6.2146,"x":106.8451},{"n":"Delhi","c":"India","y":28.66,"x":77.23},{"n":"Mumbai","c":"India","y":18.9667,"x":72.8333},{"n":"Manila","c":"Philippines","y":14.6,"x":120.9833},{"n":"Shanghai","c":"China","y":31.1667,"x":121.4667},{"n":"Sao Paulo","c":"Brazil","y":-23.5504,"x":-46.6339},{"n":"Seoul","c":"Korea, South","y":37.56,"x":126.99},{"n":"Mexico City","c":"Mexico","y":19.4333,"x":-99.1333},{"n":"Guangzhou","c":"China","y":23.1288,"x":113.259},{"n":"Beijing","c":"China","y":39.905,"x":116.3914},{"n":"Cairo","c":"Egypt","y":30.0561,"x":31.2394},{"n":"New York","c":"United States","y":40.6943,"x":-73.9249},{"n":"Kolkata","c":"India","y":22.5411,"x":88.3378},{"n":"Moscow","c":"Russia","y":55.7558,"x":37.6178},{"n":"Bangkok","c":"Thailand","y":13.75,"x":100.5167},{"n":"Buenos Aires","c":"Argentina","y":-34.5997,"x":-58.3819},{"n":"Shenzhen","c":"China","y":22.535,"x":114.054},{"n":"Dhaka","c":"Bangladesh","y":23.7289,"x":90.3944},{"n":"Lagos","c":"Nigeria","y":6.45,"x":3.4},{"n":"Istanbul","c":"Turkey","y":41.01,"x":28.9603},{"n":"Osaka","c":"Japan","y":34.75,"x":135.4601},{"n":"Karachi","c":"Pakistan","y":24.86,"x":67.01},{"n":"Bangalore","c":"India","y":12.9699,"x":77.598},{"n":"Tehran","c":"Iran","y":35.7,"x":51.4167},{"n":"Kinshasa","c":"Congo (Kinshasa)","y":-4.3233,"x":15.3081},{"n":"Ho Chi Minh City","c":"Vietnam","y":10.8167,"x":106.6333},{"n":"Los Angeles","c":"United States","y":34.1139,"x":-118.4068},{"n":"Rio de Janeiro","c":"Brazil","y":-22.9083,"x":-43.1964},{"n":"Nanyang","c":"China","y":32.9987,"x":112.5292},{"n":"Baoding","c":"China","y":38.8671,"x":115.4845},{"n":"Chennai","c":"India","y":13.0825,"x":80.275},{"n":"Chengdu","c":"China","y":30.66,"x":104.0633},{"n":"Lahore","c":"Pakistan","y":31.5497,"x":74.3436},{"n":"Paris","c":"France","y":48.8566,"x":2.3522},{"n":"London","c":"United Kingdom","y":51.5072,"x":-0.1275},{"n":"Linyi","c":"China","y":35.0606,"x":118.3425},{"n":"Tianjin","c":"China","y":39.1467,"x":117.2056},{"n":"Shijiazhuang","c":"China","y":38.0422,"x":114.5086},{"n":"Zhoukou","c":"China","y":33.625,"x":114.6418},{"n":"Lima","c":"Peru","y":-12.05,"x":-77.0333},{"n":"Hyderabad","c":"India","y":17.3667,"x":78.4667},{"n":"Handan","c":"China","y":36.6116,"x":114.4894},{"n":"Bogota","c":"Colombia","y":4.6126,"x":-74.0705},{"n":"Weifang","c":"China","y":36.7167,"x":119.1},{"n":"Nagoya","c":"Japan","y":35.1167,"x":136.9333},{"n":"Wuhan","c":"China","y":30.5872,"x":114.2881},{"n":"Heze","c":"China","y":35.2333,"x":115.4333},{"n":"Ganzhou","c":"China","y":25.8292,"x":114.9336},{"n":"Tongshan","c":"China","y":34.261,"x":117.1859},{"n":"Chicago","c":"United States","y":41.8373,"x":-87.6862},{"n":"Luanda","c":"Angola","y":-8.8383,"x":13.2344},{"n":"Changsha","c":"China","y":28.1987,"x":112.9709},{"n":"Fuyang","c":"China","y":32.8986,"x":115.8045},{"n":"Kuala Lumpur","c":"Malaysia","y":3.1478,"x":101.6953},{"n":"Jining","c":"China","y":35.4,"x":116.5667},{"n":"Dongguan","c":"China","y":23.0475,"x":113.7493},{"n":"Jinan","c":"China","y":36.6667,"x":116.9833},{"n":"Foshan","c":"China","y":23.0292,"x":113.1056},{"n":"Hanoi","c":"Vietnam","y":21.0245,"x":105.8412},{"n":"Pune","c":"India","y":18.5196,"x":73.8553},{"n":"Chongqing","c":"China","y":29.5628,"x":106.5528},{"n":"Changchun","c":"China","y":43.9,"x":125.2},{"n":"Zhumadian","c":"China","y":32.9773,"x":114.0253},{"n":"Ningbo","c":"China","y":29.875,"x":121.5492},{"n":"Cangzhou","c":"China","y":38.3037,"x":116.8452},{"n":"Nanjing","c":"China","y":32.05,"x":118.7667},{"n":"Hefei","c":"China","y":31.8639,"x":117.2808},{"n":"Ahmedabad","c":"India","y":23.03,"x":72.58},{"n":"Hong Kong","c":"Hong Kong","y":22.305,"x":114.185},{"n":"Zhanjiang","c":"China","y":21.1967,"x":110.4031},{"n":"Shaoyang","c":"China","y":27.2418,"x":111.4725},{"n":"Hengyang","c":"China","y":26.8968,"x":112.5857},{"n":"Khartoum","c":"Sudan","y":15.6031,"x":32.5265},{"n":"Nantong","c":"China","y":31.9829,"x":120.8873},{"n":"Yancheng","c":"China","y":33.3936,"x":120.1339},{"n":"Nanning","c":"China","y":22.8192,"x":108.315},{"n":"Xi'an","c":"China","y":34.2667,"x":108.9},{"n":"Shenyang","c":"China","y":41.8039,"x":123.4258},{"n":"Tangshan","c":"China","y":39.6292,"x":118.1742},{"n":"Santiago","c":"Chile","y":-33.45,"x":-70.6667},{"n":"Zhengzhou","c":"China","y":34.7492,"x":113.6605},{"n":"Shangqiu","c":"China","y":34.4259,"x":115.6467},{"n":"Yantai","c":"China","y":37.3997,"x":121.2664},{"n":"Riyadh","c":"Saudi Arabia","y":24.65,"x":46.71},{"n":"Dar es Salaam","c":"Tanzania","y":-6.8,"x":39.2833},{"n":"Xinyang","c":"China","y":32.1264,"x":114.0672},{"n":"Shangrao","c":"China","y":28.4419,"x":117.9633},{"n":"Luoyang","c":"China","y":34.6587,"x":112.4245},{"n":"Bijie","c":"China","y":27.3019,"x":105.2863},{"n":"Quanzhou","c":"China","y":24.9139,"x":118.5858},{"n":"Hangzhou","c":"China","y":30.25,"x":120.1675},{"n":"Miami","c":"United States","y":25.7839,"x":-80.2102},{"n":"Huanggang","c":"China","y":30.45,"x":114.875},{"n":"Maoming","c":"China","y":21.6618,"x":110.9178},{"n":"Kunming","c":"China","y":25.0433,"x":102.7061},{"n":"Nanchong","c":"China","y":30.7991,"x":106.0784},{"n":"Zunyi","c":"China","y":27.705,"x":106.9336},{"n":"Jieyang","c":"China","y":23.5533,"x":116.3649},{"n":"Lu'an","c":"China","y":31.7542,"x":116.5078},{"n":"Yichun","c":"China","y":27.8041,"x":114.383},{"n":"Madrid","c":"Spain","y":40.4167,"x":-3.7167},{"n":"Changde","c":"China","y":29.0397,"x":111.6839},{"n":"Taizhou","c":"China","y":28.6583,"x":121.4221},{"n":"Liaocheng","c":"China","y":36.45,"x":115.9833},{"n":"Qujing","c":"China","y":25.5102,"x":103.8029},{"n":"Surat","c":"India","y":21.17,"x":72.83},{"n":"Baghdad","c":"Iraq","y":33.35,"x":44.4167},{"n":"Qingdao","c":"China","y":36.1167,"x":120.4},{"n":"Singapore","c":"Singapore","y":1.3,"x":103.8},{"n":"Dallas","c":"United States","y":32.7936,"x":-96.7662},{"n":"Dazhou","c":"China","y":31.2152,"x":107.4947},{"n":"Suzhou","c":"China","y":33.6333,"x":116.9683},{"n":"Xiangyang","c":"China","y":32.0654,"x":112.1531},{"n":"Philadelphia","c":"United States","y":40.0077,"x":-75.1339},{"n":"Giza","c":"Egypt","y":29.987,"x":31.2118},{"n":"Nairobi","c":"Kenya","y":-1.2864,"x":36.8172},{"n":"Nangandao","c":"China","y":35.2992,"x":113.8851},{"n":"Ankara","c":"Turkey","y":39.93,"x":32.85},{"n":"Tai'an","c":"China","y":36.2001,"x":117.0809},{"n":"Yulin","c":"China","y":22.6293,"x":110.1507},{"n":"Dezhou","c":"China","y":37.4513,"x":116.3105},{"n":"Houston","c":"United States","y":29.7863,"x":-95.3889},{"n":"Atlanta","c":"United States","y":33.7627,"x":-84.4224},{"n":"Yongzhou","c":"China","y":26.4515,"x":111.5953},{"n":"Rangoon","c":"Myanmar","y":16.8,"x":96.15},{"n":"Toronto","c":"Canada","y":43.7417,"x":-79.3733},{"n":"Suihua","c":"China","y":46.6384,"x":126.9808},{"n":"Washington","c":"United States","y":38.9047,"x":-77.0163},{"n":"Qiqihar","c":"China","y":47.3398,"x":123.9512},{"n":"Jinhua","c":"China","y":29.1046,"x":119.6494},{"n":"Saint Petersburg","c":"Russia","y":59.95,"x":30.3167},{"n":"Shantou","c":"China","y":23.3735,"x":116.6941},{"n":"Sydney","c":"Australia","y":-33.865,"x":151.2094},{"n":"Weinan","c":"China","y":34.4996,"x":109.4684},{"n":"Suqian","c":"China","y":33.9331,"x":118.2831},{"n":"Guadalajara","c":"Mexico","y":20.6767,"x":-103.3475},{"n":"Fuzhou","c":"China","y":26.0769,"x":119.2917},{"n":"Zhaotong","c":"China","y":27.3328,"x":103.7144},{"n":"Pudong","c":"China","y":31.2231,"x":121.5397},{"n":"Belo Horizonte","c":"Brazil","y":-19.9281,"x":-43.9419},{"n":"Zhangzhou","c":"China","y":24.5093,"x":117.6612},{"n":"Bozhou","c":"China","y":33.8626,"x":115.7742},{"n":"Melbourne","c":"Australia","y":-37.8136,"x":144.9631},{"n":"Nanchang","c":"China","y":28.6842,"x":115.8872},{"n":"Xianyang","c":"China","y":34.35,"x":108.7167},{"n":"Surabaya","c":"Indonesia","y":-7.2458,"x":112.7378},{"n":"Abidjan","c":"Côte D’Ivoire","y":5.3364,"x":-4.0267},{"n":"Huaihua","c":"China","y":27.5494,"x":109.9592},{"n":"Ji'an","c":"China","y":27.1172,"x":114.9793},{"n":"Mianyang","c":"China","y":31.4669,"x":104.7385},{"n":"Xiaoganzhan","c":"China","y":30.9273,"x":113.911},{"n":"Shaoxing","c":"China","y":30,"x":120.5833},{"n":"Alexandria","c":"Egypt","y":31.2,"x":29.9167},{"n":"Yuncheng","c":"China","y":35.0304,"x":110.998},{"n":"Pingdingshan","c":"China","y":33.735,"x":113.2999},{"n":"Huizhou","c":"China","y":23.1115,"x":114.4152},{"n":"Huai'an","c":"China","y":33.5,"x":119.1331},{"n":"Xinpu","c":"China","y":34.5906,"x":119.1801},{"n":"Chenzhou","c":"China","y":25.7989,"x":113.0267},{"n":"Guilin","c":"China","y":25.2667,"x":110.2833},{"n":"Jiujiang","c":"China","y":29.7048,"x":116.0021},{"n":"Anqing","c":"China","y":30.5,"x":117.0333},{"n":"Boston","c":"United States","y":42.3188,"x":-71.0846},{"n":"Huanglongsi","c":"China","y":34.7936,"x":114.3403},{"n":"Jiangmen","c":"China","y":22.5833,"x":113.0833},{"n":"Changzhou","c":"China","y":31.8122,"x":119.9692},{"n":"Barcelona","c":"Spain","y":41.3825,"x":2.1769},{"n":"Wuxi","c":"China","y":31.5667,"x":120.2833},{"n":"Zibo","c":"China","y":36.7831,"x":118.0497},{"n":"Jiaxing","c":"China","y":30.7522,"x":120.75},{"n":"Dalian","c":"China","y":38.9,"x":121.6},{"n":"Hengshui","c":"China","y":37.7348,"x":115.686},{"n":"Harbin","c":"China","y":45.75,"x":126.6333},{"n":"Yangzhou","c":"China","y":32.3912,"x":119.4363},{"n":"Yibin","c":"China","y":28.7596,"x":104.64},{"n":"Johannesburg","c":"South Africa","y":-26.2044,"x":28.0416},{"n":"Yiyang","c":"China","y":28.5833,"x":112.3333},{"n":"Meizhou","c":"China","y":24.2998,"x":116.1191},{"n":"Chifeng","c":"China","y":42.2663,"x":118.9223},{"n":"Casablanca","c":"Morocco","y":33.5992,"x":-7.62},{"n":"Guiyang","c":"China","y":26.5794,"x":106.7078},{"n":"Langfang","c":"China","y":39.5196,"x":116.7006},{"n":"Zhangjiakou","c":"China","y":40.8108,"x":114.8811},{"n":"Izmir","c":"Turkey","y":38.4127,"x":27.1384},{"n":"Linfen","c":"China","y":36.0812,"x":111.5087},{"n":"Wenzhou","c":"China","y":27.9991,"x":120.6561},{"n":"Monterrey","c":"Mexico","y":25.6667,"x":-100.3},{"n":"Luzhou","c":"China","y":28.8918,"x":105.4409},{"n":"Jiangguanchi","c":"China","y":34.0244,"x":113.8201},{"n":"Neijiang","c":"China","y":29.5872,"x":105.0635},{"n":"Phoenix","c":"United States","y":33.5722,"x":-112.0891},{"n":"Yanjiang","c":"China","y":30.1256,"x":104.6397},{"n":"Zhaoqing","c":"China","y":23.05,"x":112.4667},{"n":"Xiaoxita","c":"China","y":30.7083,"x":111.2803},{"n":"Guigang","c":"China","y":23.0961,"x":109.6092},{"n":"Xiamen","c":"China","y":24.4797,"x":118.0819},{"n":"Chuzhou","c":"China","y":32.3062,"x":118.3115},{"n":"Zhuzhou","c":"China","y":27.8407,"x":113.1469},{"n":"Amman","c":"Jordan","y":31.95,"x":35.9333},{"n":"Jeddah","c":"Saudi Arabia","y":21.5428,"x":39.1728},{"n":"Loudi","c":"China","y":27.7378,"x":111.9974},{"n":"Deyang","c":"China","y":31.1289,"x":104.395},{"n":"Qingyuan","c":"China","y":23.6842,"x":113.0507},{"n":"Wuhu","c":"China","y":31.334,"x":118.3622},{"n":"Hechi","c":"China","y":23.0965,"x":109.6091},{"n":"Seattle","c":"United States","y":47.6211,"x":-122.3244},{"n":"Binzhou","c":"China","y":37.3806,"x":118.0125},{"n":"Yokohama","c":"Japan","y":35.4333,"x":139.6333},{"n":"Liuzhou","c":"China","y":24.3264,"x":109.4281},{"n":"Baojishi","c":"China","y":34.3609,"x":107.1751},{"n":"Guang'an","c":"China","y":30.4673,"x":106.6336},{"n":"Hanzhong","c":"China","y":33.0794,"x":107.026},{"n":"Kabul","c":"Afghanistan","y":34.5328,"x":69.1658},{"n":"Zaozhuang","c":"China","y":34.8667,"x":117.55},{"n":"Berlin","c":"Germany","y":52.5167,"x":13.3833},{"n":"Anshan","c":"China","y":41.1066,"x":122.9895},{"n":"Lanzhou","c":"China","y":36.0617,"x":103.8318},{"n":"Chengde","c":"China","y":40.9739,"x":117.9322},{"n":"San Francisco","c":"United States","y":37.7562,"x":-122.443},{"n":"Puyang","c":"China","y":35.7639,"x":115.03},{"n":"Suining","c":"China","y":30.5098,"x":105.5737},{"n":"Jiaozuo","c":"China","y":35.229,"x":113.2304},{"n":"Bengbu","c":"China","y":32.9354,"x":117.3531},{"n":"Montreal","c":"Canada","y":45.5089,"x":-73.5617},{"n":"Detroit","c":"United States","y":42.3834,"x":-83.1024},{"n":"Baicheng","c":"China","y":23.901,"x":106.6194},{"n":"Busan","c":"Korea, South","y":35.1,"x":129.0403},{"n":"Algiers","c":"Algeria","y":36.7764,"x":3.0586},{"n":"Qincheng","c":"China","y":34.5809,"x":105.7311},{"n":"Taiyuan","c":"China","y":37.8733,"x":112.5425},{"n":"Shiyan","c":"China","y":32.6351,"x":110.7755},{"n":"Lucknow","c":"India","y":26.847,"x":80.947},{"n":"Chaoyang","c":"China","y":41.5757,"x":120.4486},{"n":"Leshan","c":"China","y":29.5854,"x":103.7575},{"n":"Yulinshi","c":"China","y":38.2655,"x":109.7388},{"n":"Siping","c":"China","y":43.1715,"x":124.3644},{"n":"Zhongshan","c":"China","y":22.5333,"x":113.35},{"n":"Changzhi","c":"China","y":36.1953,"x":113.097},{"n":"San Diego","c":"United States","y":32.8312,"x":-117.1225},{"n":"Faisalabad","c":"Pakistan","y":31.418,"x":73.079},{"n":"Santa Cruz","c":"Bolivia","y":-17.7892,"x":-63.1975},{"n":"Qinhuangdao","c":"China","y":39.9398,"x":119.5881},{"n":"Bazhou","c":"China","y":31.8576,"x":106.7559},{"n":"Zhenjiang","c":"China","y":32.2109,"x":119.4551},{"n":"Urumqi","c":"China","y":43.8225,"x":87.6125},{"n":"Tongliao","c":"China","y":43.6172,"x":122.264},{"n":"Heyuan","c":"China","y":23.7503,"x":114.6923},{"n":"Tongren","c":"China","y":27.7233,"x":109.1885},{"n":"Qinzhou","c":"China","y":21.95,"x":108.6167},{"n":"Jaipur","c":"India","y":26.9167,"x":75.8667},{"n":"Xinzhou","c":"China","y":38.4178,"x":112.7233},{"n":"Addis Ababa","c":"Ethiopia","y":9.0272,"x":38.7369},{"n":"Meishan","c":"China","y":30.0575,"x":103.8381},{"n":"Brasilia","c":"Brazil","y":-15.7939,"x":-47.8828},{"n":"Mashhad","c":"Iran","y":36.3069,"x":59.6042},{"n":"Jinzhou","c":"China","y":41.1144,"x":121.1292},{"n":"Tieling","c":"China","y":42.2841,"x":123.8365},{"n":"Shaoguan","c":"China","y":24.8011,"x":113.5927},{"n":"Kuwait City","c":"Kuwait","y":29.375,"x":47.98},{"n":"Shanwei","c":"China","y":22.7664,"x":115.3331},{"n":"Minneapolis","c":"United States","y":44.9635,"x":-93.2678},{"n":"Kyiv","c":"Ukraine","y":50.45,"x":30.5236},{"n":"Sanaa","c":"Yemen","y":15.35,"x":44.2},{"n":"Quezon City","c":"Philippines","y":14.6333,"x":121.0333},{"n":"Dingxi","c":"China","y":35.5806,"x":104.6263},{"n":"Incheon","c":"Korea, South","y":37.4639,"x":126.6486},{"n":"Bursa","c":"Turkey","y":40.1833,"x":29.0667},{"n":"Ningde","c":"China","y":26.6667,"x":119.5167},{"n":"Tampa","c":"United States","y":27.9942,"x":-82.4451},{"n":"Daqing","c":"China","y":46.5979,"x":125.008},{"n":"Birmingham","c":"United Kingdom","y":52.48,"x":-1.9025},{"n":"Putian","c":"China","y":25.4394,"x":119.0103},{"n":"Huzhou","c":"China","y":30.8695,"x":120.0958},{"n":"Salvador","c":"Brazil","y":-12.9708,"x":-38.5108},{"n":"Wuzhou","c":"China","y":23.4833,"x":111.3167},{"n":"Xiangtan","c":"China","y":27.8431,"x":112.9228},{"n":"Denver","c":"United States","y":39.7621,"x":-104.8759},{"n":"Rome","c":"Italy","y":41.8931,"x":12.4828},{"n":"La Paz","c":"Bolivia","y":-16.4942,"x":-68.1475},{"n":"Pyongyang","c":"Korea, North","y":39.03,"x":125.73},{"n":"Kano","c":"Nigeria","y":12,"x":8.5167},{"n":"Taichung","c":"Taiwan","y":24.15,"x":120.6667},{"n":"Omdurman","c":"Sudan","y":15.6835,"x":32.4629},{"n":"Zigong","c":"China","y":29.3498,"x":104.7645},{"n":"Mudanjiang","c":"China","y":44.5861,"x":129.5997},{"n":"Huludao","c":"China","y":40.7094,"x":120.8378},{"n":"Kaohsiung","c":"Taiwan","y":22.6167,"x":120.3},{"n":"Guayaquil","c":"Ecuador","y":-2.1833,"x":-79.8833},{"n":"Rizhao","c":"China","y":35.4164,"x":119.4331},{"n":"Manchester","c":"United Kingdom","y":53.4794,"x":-2.2453},{"n":"Cawnpore","c":"India","y":26.4725,"x":80.3311},{"n":"Baotou","c":"China","y":40.6562,"x":109.8345},{"n":"Taipei","c":"Taiwan","y":25.0478,"x":121.5319},{"n":"Nanping","c":"China","y":26.6448,"x":118.1728},{"n":"Chaozhou","c":"China","y":23.67,"x":116.63},{"n":"Longyan","c":"China","y":25.0881,"x":117.0244},{"n":"Ibadan","c":"Nigeria","y":7.3964,"x":3.9167},{"n":"Hohhot","c":"China","y":40.8151,"x":111.6629},{"n":"Antananarivo","c":"Madagascar","y":-18.9386,"x":47.5214},{"n":"Longba","c":"China","y":33.535,"x":105.349},{"n":"Weihai","c":"China","y":37.5,"x":122.1},{"n":"Chattogram","c":"Bangladesh","y":22.335,"x":91.8325},{"n":"Santo Domingo","c":"Dominican Republic","y":18.4764,"x":-69.8933},{"n":"Xuanzhou","c":"China","y":30.9475,"x":118.7518},{"n":"Sanming","c":"China","y":26.2658,"x":117.6302},{"n":"Brooklyn","c":"United States","y":40.6501,"x":-73.9496},{"n":"Yangjiang","c":"China","y":21.8556,"x":111.9627},{"n":"Medellin","c":"Colombia","y":6.2447,"x":-75.5748},{"n":"Yunfu","c":"China","y":22.9242,"x":112.0353},{"n":"Brisbane","c":"Australia","y":-27.4678,"x":153.0281},{"n":"Baoshan","c":"China","y":25.1211,"x":99.169},{"n":"Dubai","c":"United Arab Emirates","y":25.2697,"x":55.3094},{"n":"Luohe","c":"China","y":33.583,"x":114.0109},{"n":"Qinbaling","c":"China","y":35.7278,"x":107.64},{"n":"Mirzapur","c":"India","y":25.15,"x":82.58},{"n":"Guangyuan","c":"China","y":32.4353,"x":105.8398},{"n":"Cali","c":"Colombia","y":3.44,"x":-76.5197},{"n":"Huangshi","c":"China","y":30.2018,"x":115.0326},{"n":"Daegu","c":"Korea, South","y":35.8667,"x":128.6},{"n":"Fortaleza","c":"Brazil","y":-3.7275,"x":-38.5275},{"n":"Guatemala City","c":"Guatemala","y":14.6099,"x":-90.5252},{"n":"Yaounde","c":"Cameroon","y":3.8578,"x":11.5181},{"n":"Douala","c":"Cameroon","y":4.05,"x":9.7},{"n":"Jilin","c":"China","y":43.85,"x":126.55},{"n":"Lianshan","c":"China","y":40.7503,"x":120.83},{"n":"Lincang","c":"China","y":23.8864,"x":100.0871},{"n":"Antalya","c":"Turkey","y":36.9081,"x":30.6956},{"n":"Tashkent","c":"Uzbekistan","y":41.3,"x":69.2667},{"n":"Bandung","c":"Indonesia","y":-6.95,"x":107.5667},{"n":"Nagpur","c":"India","y":21.1539,"x":79.0831},{"n":"Huainan","c":"China","y":32.4831,"x":117.0164},{"n":"Dandong","c":"China","y":40.1167,"x":124.3833},{"n":"Shangzhou","c":"China","y":33.868,"x":109.9244},{"n":"Bekasi","c":"Indonesia","y":-6.2333,"x":107},{"n":"Ghaziabad","c":"India","y":28.6667,"x":77.4167},{"n":"Tijuana","c":"Mexico","y":32.525,"x":-117.0333},{"n":"Jiamusi","c":"China","y":46.8081,"x":130.3653},{"n":"Accra","c":"Ghana","y":5.6037,"x":-0.187},{"n":"Yuxi","c":"China","y":24.3495,"x":102.5432},{"n":"Anshun","c":"China","y":26.2456,"x":105.934},{"n":"Vancouver","c":"Canada","y":49.25,"x":-123.1},{"n":"Tangerang","c":"Indonesia","y":-6.1783,"x":106.6319},{"n":"Konya","c":"Turkey","y":37.8714,"x":32.4847},{"n":"Queens","c":"United States","y":40.7498,"x":-73.7976},{"n":"Yingkou","c":"China","y":40.6653,"x":122.2297},{"n":"Adana","c":"Turkey","y":37,"x":35.325},{"n":"Medan","c":"Indonesia","y":3.6667,"x":98.6667},{"n":"Sanmenxia","c":"China","y":34.7736,"x":111.195},{"n":"Indore","c":"India","y":22.7206,"x":75.8472},{"n":"Ma'anshan","c":"China","y":31.7135,"x":118.3605},{"n":"Pingliang","c":"China","y":35.5412,"x":106.6819},{"n":"Quzhou","c":"China","y":28.9545,"x":118.8763},{"n":"Baku","c":"Azerbaijan","y":40.3667,"x":49.8352},{"n":"Gaoping","c":"China","y":30.7804,"x":106.13},{"n":"Huaibei","c":"China","y":33.9562,"x":116.789},{"n":"Xining","c":"China","y":36.6239,"x":101.7787},{"n":"Harare","c":"Zimbabwe","y":-17.8292,"x":31.0522},{"n":"Yan'an","c":"China","y":36.5952,"x":109.4863},{"n":"Havana","c":"Cuba","y":23.1367,"x":-82.3589},{"n":"Phnom Penh","c":"Cambodia","y":11.5696,"x":104.921},{"n":"Fukuoka","c":"Japan","y":33.6,"x":130.4167},{"n":"Mogadishu","c":"Somalia","y":2.0408,"x":45.3425},{"n":"Jincheng","c":"China","y":35.4906,"x":112.8483},{"n":"Puning","c":"China","y":23.2993,"x":116.1586},{"n":"Lishui","c":"China","y":28.45,"x":119.9167},{"n":"Qingyang","c":"China","y":24.8141,"x":118.5792},{"n":"Riverside","c":"United States","y":33.9381,"x":-117.3948},{"n":"Baltimore","c":"United States","y":39.3051,"x":-76.6144},{"n":"Haiphong","c":"Vietnam","y":20.8,"x":106.6667},{"n":"Las Vegas","c":"United States","y":36.2333,"x":-115.2654},{"n":"Laibin","c":"China","y":23.7333,"x":109.2333},{"n":"Rawalpindi","c":"Pakistan","y":33.6007,"x":73.0679},{"n":"Kumasi","c":"Ghana","y":6.6833,"x":-1.6167},{"n":"Portland","c":"United States","y":45.5372,"x":-122.65},{"n":"Vadodara","c":"India","y":22.3,"x":73.2},{"n":"Perth","c":"Australia","y":-31.9522,"x":115.8589},{"n":"San Antonio","c":"United States","y":29.4658,"x":-98.5253},{"n":"Vishakhapatnam","c":"India","y":17.7333,"x":83.3167},{"n":"Gujranwala","c":"Pakistan","y":32.15,"x":74.1833},{"n":"Gaziantep","c":"Turkey","y":37.0667,"x":37.3833},{"n":"Fushun","c":"China","y":41.8708,"x":123.8917},{"n":"St. Louis","c":"United States","y":38.6358,"x":-90.2451},{"n":"Bamako","c":"Mali","y":12.6458,"x":-7.9922},{"n":"Quito","c":"Ecuador","y":-0.2186,"x":-78.5097},{"n":"Minsk","c":"Belarus","y":53.9022,"x":27.5618},{"n":"Pingxiang","c":"China","y":27.6333,"x":113.85},{"n":"Chongzuo","c":"China","y":22.4167,"x":107.3667},{"n":"Sanliurfa","c":"Turkey","y":37.1583,"x":38.7917},{"n":"Kananga","c":"Congo (Kinshasa)","y":-5.897,"x":22.4488},{"n":"Peshawar","c":"Pakistan","y":34,"x":71.5},{"n":"Sapporo","c":"Japan","y":43.0621,"x":141.3544},{"n":"Hezhou","c":"China","y":24.4164,"x":111.5478},{"n":"Jixi","c":"China","y":45.2937,"x":130.965},{"n":"Caracas","c":"Venezuela","y":10.5,"x":-66.9333},{"n":"Fuxin","c":"China","y":42.0127,"x":121.6486},{"n":"Aleppo","c":"Syria","y":36.2,"x":37.15},{"n":"Almaty","c":"Kazakhstan","y":43.25,"x":76.9},{"n":"Dayr az Zawr","c":"Syria","y":35.3333,"x":40.15},{"n":"Vienna","c":"Austria","y":48.2083,"x":16.3731},{"n":"Leeds","c":"United Kingdom","y":53.7997,"x":-1.5492},{"n":"Sacramento","c":"United States","y":38.5667,"x":-121.4683},{"n":"Blantyre","c":"Malawi","y":-15.7861,"x":35.0058},{"n":"Tainan","c":"Taiwan","y":22.9833,"x":120.1833},{"n":"Zhuhai","c":"China","y":22.2769,"x":113.5678},{"n":"Bucharest","c":"Romania","y":44.4,"x":26.0833},{"n":"Wuwei","c":"China","y":37.9278,"x":102.6329},{"n":"Bhopal","c":"India","y":23.25,"x":77.4167},{"n":"Curitiba","c":"Brazil","y":-25.4297,"x":-49.2719},{"n":"Multan","c":"Pakistan","y":30.1978,"x":71.4711},{"n":"Xiping","c":"China","y":40.08,"x":113.3},{"n":"Asuncion","c":"Paraguay","y":-25.3,"x":-57.6333},{"n":"Saidu Sharif","c":"Pakistan","y":34.75,"x":72.3572},{"n":"Hamburg","c":"Germany","y":53.55,"x":10},{"n":"Meru","c":"Kenya","y":0.05,"x":37.65},{"n":"Brazzaville","c":"Congo (Brazzaville)","y":-4.2667,"x":15.2833},{"n":"Orlando","c":"United States","y":28.4772,"x":-81.3369},{"n":"Mersin","c":"Turkey","y":36.8,"x":34.6167},{"n":"Kyoto","c":"Japan","y":35.0111,"x":135.7669},{"n":"Manaus","c":"Brazil","y":-3.1,"x":-60.0167},{"n":"Liaoyang","c":"China","y":41.2643,"x":123.1772},{"n":"Baiyin","c":"China","y":36.5448,"x":104.1766},{"n":"San Jose","c":"United States","y":37.3019,"x":-121.8486},{"n":"Warsaw","c":"Poland","y":52.2167,"x":21.0333},{"n":"Shengli","c":"China","y":37.45,"x":118.4667},{"n":"Lubumbashi","c":"Congo (Kinshasa)","y":-11.6697,"x":27.4581},{"n":"Haikou","c":"China","y":20.02,"x":110.32},{"n":"Damascus","c":"Syria","y":33.5131,"x":36.2919},{"n":"Shuyangzha","c":"China","y":34.1299,"x":118.7734},{"n":"Brussels","c":"Belgium","y":50.8333,"x":4.3333},{"n":"Esfahan","c":"Iran","y":32.6447,"x":51.6675},{"n":"Budapest","c":"Hungary","y":47.4983,"x":19.0408},{"n":"Heihe","c":"China","y":50.2458,"x":127.4886},{"n":"Lusaka","c":"Zambia","y":-15.4167,"x":28.2833},{"n":"Hyderabad City","c":"Pakistan","y":25.3792,"x":68.3683},{"n":"Diyarbakir","c":"Turkey","y":37.9108,"x":40.2367},{"n":"Chinchvad","c":"India","y":18.6278,"x":73.8131},{"n":"Shuozhou","c":"China","y":39.3408,"x":112.4292},{"n":"Cleveland","c":"United States","y":41.4767,"x":-81.6804},{"n":"Pittsburgh","c":"United States","y":40.4396,"x":-79.9762},{"n":"Patna","c":"India","y":25.61,"x":85.1414},{"n":"Mosul","c":"Iraq","y":36.3667,"x":43.1167},{"n":"Austin","c":"United States","y":30.3004,"x":-97.7522},{"n":"Sanzhou","c":"China","y":30.82,"x":108.4},{"n":"Mecca","c":"Saudi Arabia","y":21.4225,"x":39.8261},{"n":"Conakry","c":"Guinea","y":9.5092,"x":-13.7122},{"n":"Kampala","c":"Uganda","y":0.3136,"x":32.5811},{"n":"Ecatepec","c":"Mexico","y":19.6097,"x":-99.06},{"n":"Cincinnati","c":"United States","y":39.1413,"x":-84.5061},{"n":"Makassar","c":"Indonesia","y":-5.1331,"x":119.4136},{"n":"Yushan","c":"China","y":31.3867,"x":120.9766},{"n":"Ludhiana","c":"India","y":30.9083,"x":75.8486},{"n":"Newcastle","c":"United Kingdom","y":55.0077,"x":-1.6578},{"n":"Depok","c":"Indonesia","y":-6.394,"x":106.8225},{"n":"Zhongli","c":"Taiwan","y":24.965,"x":121.2168},{"n":"Kansas City","c":"United States","y":39.1239,"x":-94.5541},{"n":"Ouagadougou","c":"Burkina Faso","y":12.3572,"x":-1.5353},{"n":"Davao","c":"Philippines","y":7.0667,"x":125.6},{"n":"Manhattan","c":"United States","y":40.7834,"x":-73.9662},{"n":"Semarang","c":"Indonesia","y":-6.9667,"x":110.4167},{"n":"Yinchuan","c":"China","y":38.4795,"x":106.2254},{"n":"Caloocan City","c":"Philippines","y":14.65,"x":120.9667},{"n":"Novosibirsk","c":"Russia","y":55.0333,"x":82.9167},{"n":"Chengtangcun","c":"China","y":35.0833,"x":117.15},{"n":"Agra","c":"India","y":27.18,"x":78.02},{"n":"Karaj","c":"Iran","y":35.8327,"x":50.9915},{"n":"Indianapolis","c":"United States","y":39.7771,"x":-86.1458},{"n":"Jingdezhen","c":"China","y":29.2942,"x":117.2036},{"n":"Puebla","c":"Mexico","y":19.0333,"x":-98.1833},{"n":"Kalyan","c":"India","y":19.2502,"x":73.1602},{"n":"Madurai","c":"India","y":9.9197,"x":78.1194},{"n":"Benxi","c":"China","y":41.292,"x":123.761},{"n":"Jamshedpur","c":"India","y":22.8,"x":86.1833},{"n":"Recife","c":"Brazil","y":-8.0539,"x":-34.8808},{"n":"Columbus","c":"United States","y":39.9862,"x":-82.985},{"n":"Tabriz","c":"Iran","y":38.0833,"x":46.2833},{"n":"Maracaibo","c":"Venezuela","y":10.6333,"x":-71.6333},{"n":"Zhangjiajie","c":"China","y":29.1255,"x":110.4844},{"n":"Beihai","c":"China","y":21.4667,"x":109.1},{"n":"Shuangyashan","c":"China","y":46.6388,"x":131.1545},{"n":"Kobe","c":"Japan","y":34.6913,"x":135.183},{"n":"Charlotte","c":"United States","y":35.208,"x":-80.8304},{"n":"Yucheng","c":"China","y":29.9888,"x":103.0007},{"n":"Changshu","c":"China","y":31.65,"x":120.7333},{"n":"Lianjiang","c":"China","y":21.6146,"x":110.2794},{"n":"Ximeicun","c":"China","y":24.9633,"x":118.3811},{"n":"Jianguang","c":"China","y":28.1958,"x":115.7833},{"n":"Madinat as Sadis min Uktubar","c":"Egypt","y":29.9361,"x":30.9269},{"n":"Xushan","c":"China","y":30.1697,"x":121.2665},{"n":"Belem","c":"Brazil","y":-1.4558,"x":-48.5039},{"n":"Guiping","c":"China","y":23.4,"x":110.0833},{"n":"Leizhou","c":"China","y":20.9147,"x":110.0806},{"n":"Gwangju","c":"Korea, South","y":35.1667,"x":126.9167},{"n":"Nasik","c":"India","y":20,"x":73.7833},{"n":"Porto Alegre","c":"Brazil","y":-30.0328,"x":-51.23},{"n":"Valencia","c":"Venezuela","y":10.1667,"x":-68},{"n":"Onitsha","c":"Nigeria","y":6.1667,"x":6.7833},{"n":"Virginia Beach","c":"United States","y":36.7335,"x":-76.0435},{"n":"Daejeon","c":"Korea, South","y":36.351,"x":127.385},{"n":"Munich","c":"Germany","y":48.1372,"x":11.5755},{"n":"Auckland","c":"New Zealand","y":-36.85,"x":174.7833},{"n":"Yekaterinburg","c":"Russia","y":56.8356,"x":60.6128},{"n":"Huangshan","c":"China","y":29.7132,"x":118.3151},{"n":"Huazhou","c":"China","y":32.6889,"x":112.0447},{"n":"Shiraz","c":"Iran","y":29.61,"x":52.5425},{"n":"Pizhou","c":"China","y":34.3422,"x":118.0097},{"n":"Palembang","c":"Indonesia","y":-2.9833,"x":104.7644},{"n":"Leon de los Aldama","c":"Mexico","y":21.1167,"x":-101.6833},{"n":"El Kelaa des Srarhna","c":"Morocco","y":32.05,"x":-7.4},{"n":"Kharkiv","c":"Ukraine","y":50,"x":36.2292},{"n":"Kawanakajima","c":"Japan","y":35.53,"x":139.705},{"n":"Yangshe","c":"China","y":31.8775,"x":120.5512},{"n":"Chizhou","c":"China","y":30.6583,"x":117.4849},{"n":"Guyuan","c":"China","y":36.008,"x":106.2782},{"n":"Rui'an","c":"China","y":27.778,"x":120.6526},{"n":"Birstall","c":"United Kingdom","y":52.6736,"x":-1.12},{"n":"Muscat","c":"Oman","y":23.6139,"x":58.5922},{"n":"Hebi","c":"China","y":35.7497,"x":114.2887},{"n":"Bronx","c":"United States","y":40.8501,"x":-73.8662},{"n":"Gaozhou","c":"China","y":21.9135,"x":110.8481},{"n":"The Hague","c":"Netherlands","y":52.0767,"x":4.2986},{"n":"Owerri","c":"Nigeria","y":5.4833,"x":7.0333},{"n":"Sharjah","c":"United Arab Emirates","y":25.3575,"x":55.3919},{"n":"Faridabad","c":"India","y":28.4333,"x":77.3167},{"n":"Ulaanbaatar","c":"Mongolia","y":47.9203,"x":106.9172},{"n":"Goiania","c":"Brazil","y":-16.6806,"x":-49.2564},{"n":"Kayseri","c":"Turkey","y":38.7333,"x":35.4833},{"n":"Yueqing","c":"China","y":28.1188,"x":120.9621},{"n":"Belgrade","c":"Serbia","y":44.8167,"x":20.4667},{"n":"Pingdu","c":"China","y":36.7833,"x":119.9556},{"n":"Milan","c":"Italy","y":45.4669,"x":9.19},{"n":"Aurangabad","c":"India","y":19.88,"x":75.32},{"n":"Yutan","c":"China","y":28.3147,"x":112.554},{"n":"Wenling","c":"China","y":28.3797,"x":121.3718},{"n":"Milwaukee","c":"United States","y":43.0642,"x":-87.9673},{"n":"Sofia","c":"Bulgaria","y":42.6979,"x":23.3217},{"n":"Adelaide","c":"Australia","y":-34.9289,"x":138.6011},{"n":"Prague","c":"Czechia","y":50.0833,"x":14.4167},{"n":"Samsun","c":"Turkey","y":41.2867,"x":36.33},{"n":"Rajkot","c":"India","y":22.2969,"x":70.7984},{"n":"Liangshi","c":"China","y":27.2578,"x":111.7351},{"n":"Khulna","c":"Bangladesh","y":22.8167,"x":89.55},{"n":"Cordoba","c":"Argentina","y":-31.4167,"x":-64.1833},{"n":"Guarulhos","c":"Brazil","y":-23.4667,"x":-46.5333},{"n":"Juarez","c":"Mexico","y":31.7386,"x":-106.487},{"n":"Saitama","c":"Japan","y":35.8617,"x":139.6453},{"n":"Montevideo","c":"Uruguay","y":-34.8667,"x":-56.1667},{"n":"Mbuji-Mayi","c":"Congo (Kinshasa)","y":-6.1209,"x":23.5967},{"n":"Fuqing","c":"China","y":25.7232,"x":119.3735},{"n":"Xintai","c":"China","y":35.91,"x":117.78},{"n":"Doha","c":"Qatar","y":25.3,"x":51.5333},{"n":"Hiroshima","c":"Japan","y":34.4,"x":132.45},{"n":"Meerut","c":"India","y":28.99,"x":77.7},{"n":"Yushu","c":"China","y":44.8249,"x":126.5451},{"n":"Rongcheng","c":"China","y":26.2312,"x":104.0966},{"n":"Yangquan","c":"China","y":37.8576,"x":113.5762},{"n":"Haicheng","c":"China","y":40.8523,"x":122.7474},{"n":"Yingtan","c":"China","y":28.2333,"x":117},{"n":"Huaiyin","c":"China","y":33.58,"x":119.03},{"n":"Wuzhong","c":"China","y":37.9874,"x":106.1919},{"n":"Barranquilla","c":"Colombia","y":10.9639,"x":-74.7964},{"n":"Jabalpur","c":"India","y":23.1667,"x":79.9333},{"n":"Thane","c":"India","y":19.18,"x":72.9633},{"n":"Zhangye","c":"China","y":38.9355,"x":100.4553},{"n":"Rucheng","c":"China","y":32.3852,"x":120.5634},{"n":"Nizhniy Novgorod","c":"Russia","y":56.3269,"x":44.0075},{"n":"Comayaguela","c":"Honduras","y":14.0833,"x":-87.2167},{"n":"Dhanbad","c":"India","y":23.7928,"x":86.435},{"n":"Laiwu","c":"China","y":36.1833,"x":117.6667},{"n":"Jingling","c":"China","y":30.6667,"x":113.1667},{"n":"Kazan","c":"Russia","y":55.7908,"x":49.1144},{"n":"Dayan","c":"China","y":26.8808,"x":100.2208},{"n":"Suwon","c":"Korea, South","y":37.2858,"x":127.01},{"n":"Jiangyin","c":"China","y":31.9087,"x":120.2653},{"n":"Yongcheng","c":"China","y":33.9317,"x":116.4459},{"n":"Calgary","c":"Canada","y":51.05,"x":-114.0667},{"n":"Can Tho","c":"Vietnam","y":10.0333,"x":105.7833},{"n":"Abuja","c":"Nigeria","y":9.0556,"x":7.4914},{"n":"Yiwu","c":"China","y":29.3081,"x":120.0698},{"n":"Mandalay","c":"Myanmar","y":21.9769,"x":96.0869},{"n":"Beidao","c":"China","y":34.6,"x":105.92},{"n":"Al Basrah","c":"Iraq","y":30.4889,"x":47.81},{"n":"Shuangshui","c":"China","y":26.5944,"x":104.8333},{"n":"Vila Velha","c":"Brazil","y":3.2167,"x":-51.2167},{"n":"Allahabad","c":"India","y":25.455,"x":81.84},{"n":"Varanasi","c":"India","y":25.3189,"x":83.0128},{"n":"Chelyabinsk","c":"Russia","y":55.15,"x":61.4},{"n":"Mombasa","c":"Kenya","y":-4.05,"x":39.6667},{"n":"Providence","c":"United States","y":41.823,"x":-71.4187},{"n":"Qom","c":"Iran","y":34.6461,"x":50.8789},{"n":"Maiduguri","c":"Nigeria","y":11.8333,"x":13.15},{"n":"Maputo","c":"Mozambique","y":-25.9153,"x":32.5764},{"n":"Rosario","c":"Argentina","y":-32.9575,"x":-60.6394},{"n":"Benin City","c":"Nigeria","y":6.3176,"x":5.6145},{"n":"Xinyu","c":"China","y":27.795,"x":114.9242},{"n":"Pikine","c":"Senegal","y":14.75,"x":-17.4},{"n":"Ahvaz","c":"Iran","y":31.3203,"x":48.6692},{"n":"Dublin","c":"Ireland","y":53.3497,"x":-6.2603},{"n":"Jacksonville","c":"United States","y":30.3322,"x":-81.6749},{"n":"Medina","c":"Saudi Arabia","y":24.4667,"x":39.6},{"n":"Srinagar","c":"India","y":34.0911,"x":74.8061},{"n":"Omsk","c":"Russia","y":54.9667,"x":73.3833},{"n":"Cilacap","c":"Indonesia","y":-7.7167,"x":109.017},{"n":"Bandar Lampung","c":"Indonesia","y":-5.4294,"x":105.2625},{"n":"Samara","c":"Russia","y":53.1833,"x":50.1167},{"n":"Guankou","c":"China","y":28.1417,"x":113.625},{"n":"Ulsan","c":"Korea, South","y":35.55,"x":129.3167},{"n":"Dingzhou","c":"China","y":38.5158,"x":114.9845},{"n":"Campinas","c":"Brazil","y":-22.9009,"x":-47.0573},{"n":"Lianyuan","c":"China","y":27.6961,"x":111.6659},{"n":"Kaiyuan","c":"China","y":36.0656,"x":113.8153},{"n":"Nay Pyi Taw","c":"Myanmar","y":19.7475,"x":96.115},{"n":"Dakar","c":"Senegal","y":14.7319,"x":-17.4572},{"n":"Zhuji","c":"China","y":29.7169,"x":120.2314},{"n":"Kigali","c":"Rwanda","y":-1.9536,"x":30.0606},{"n":"Zapopan","c":"Mexico","y":20.7167,"x":-103.4},{"n":"Leiyang","c":"China","y":26.4179,"x":112.8457},{"n":"Santiago","c":"Dominican Republic","y":19.45,"x":-70.7},{"n":"Dadukou","c":"China","y":26.5849,"x":101.7149},{"n":"Xiantao","c":"China","y":30.3833,"x":113.4},{"n":"Amritsar","c":"India","y":31.6167,"x":74.85},{"n":"Callao","c":"Peru","y":-12.0611,"x":-77.1333},{"n":"Aligarh","c":"India","y":27.88,"x":78.08},{"n":"Yingchuan","c":"China","y":34.1511,"x":113.4733},{"n":"Tegucigalpa","c":"Honduras","y":14.0942,"x":-87.2067},{"n":"Ciudad Nezahualcoyotl","c":"Mexico","y":19.41,"x":-99.03},{"n":"Tripoli","c":"Libya","y":32.8752,"x":13.1875},{"n":"Rostov","c":"Russia","y":47.2333,"x":39.7167},{"n":"Nezahualcoyotl","c":"Mexico","y":19.4,"x":-98.9889},{"n":"Bhiwandi","c":"India","y":19.3,"x":73.0667},{"n":"Zhoushan","c":"China","y":30.0162,"x":122.0988},{"n":"Tbilisi","c":"Georgia","y":41.7225,"x":44.7925},{"n":"Ufa","c":"Russia","y":54.7333,"x":55.9667},{"n":"Fes","c":"Morocco","y":34.0433,"x":-5.0033},{"n":"Sevilla","c":"Spain","y":37.39,"x":-5.99},{"n":"Mexicali","c":"Mexico","y":32.6633,"x":-115.4678},{"n":"Bien Hoa","c":"Vietnam","y":10.9277,"x":106.8681},{"n":"Gwalior","c":"India","y":26.215,"x":78.1931},{"n":"Ankang","c":"China","y":32.6877,"x":109.0235},{"n":"Ikare","c":"Nigeria","y":7.5304,"x":5.76},{"n":"Huambo","c":"Angola","y":-12.7667,"x":15.7333},{"n":"Hegang","c":"China","y":47.3139,"x":130.2775},{"n":"Salt Lake City","c":"United States","y":40.7777,"x":-111.9306},{"n":"Bhilai","c":"India","y":21.2167,"x":81.4333},{"n":"Yuyao","c":"China","y":30.0372,"x":121.1546},{"n":"N'Djamena","c":"Chad","y":12.11,"x":15.05},{"n":"Hanchuan","c":"China","y":30.652,"x":113.8274},{"n":"Gongzhuling","c":"China","y":43.5036,"x":124.8088},{"n":"Irbid","c":"Jordan","y":32.5556,"x":35.85},{"n":"Haora","c":"India","y":22.59,"x":88.31},{"n":"Cologne","c":"Germany","y":50.9422,"x":6.9578},{"n":"Krasnoyarsk","c":"Russia","y":56.0167,"x":92.8667},{"n":"Yicheng","c":"China","y":31.3697,"x":119.8239},{"n":"Sao Goncalo","c":"Brazil","y":-22.8269,"x":-43.0539},{"n":"Nashville","c":"United States","y":36.1715,"x":-86.7843},{"n":"Yerevan","c":"Armenia","y":40.1814,"x":44.5144},{"n":"Ranchi","c":"India","y":23.3556,"x":85.3347},{"n":"Nur-Sultan","c":"Kazakhstan","y":51.1333,"x":71.4333},{"n":"Nouakchott","c":"Mauritania","y":18.0858,"x":-15.9785},{"n":"Vereeniging","c":"South Africa","y":-26.6736,"x":27.9319},{"n":"Richmond","c":"United States","y":37.5295,"x":-77.4756},{"n":"Sao Luis","c":"Brazil","y":-2.53,"x":-44.3028},{"n":"San Pedro Sula","c":"Honduras","y":15.5,"x":-88.0333},{"n":"Taixing","c":"China","y":32.1724,"x":120.0142},{"n":"Memphis","c":"United States","y":35.1046,"x":-89.9773},{"n":"Goyang","c":"Korea, South","y":37.6564,"x":126.835},{"n":"Bezwada","c":"India","y":16.5167,"x":80.6167},{"n":"Edmonton","c":"Canada","y":53.5344,"x":-113.4903},{"n":"Mizhou","c":"China","y":35.99,"x":119.3801},{"n":"Tunis","c":"Tunisia","y":36.8008,"x":10.18},{"n":"Xishan","c":"China","y":27.6609,"x":113.4946},{"n":"Ezhou","c":"China","y":30.3972,"x":114.8842},{"n":"Barquisimeto","c":"Venezuela","y":10.0678,"x":-69.3467},{"n":"Sendai","c":"Japan","y":38.2683,"x":140.8694},{"n":"Voronezh","c":"Russia","y":51.6717,"x":39.2106},{"n":"Perm","c":"Russia","y":58.0139,"x":56.2489},{"n":"Changwon","c":"Korea, South","y":35.2281,"x":128.6811},{"n":"Zhongwei","c":"China","y":37.5139,"x":105.1884},{"n":"Shouguang","c":"China","y":36.8833,"x":118.7333},{"n":"Bogor","c":"Indonesia","y":-6.6,"x":106.8},{"n":"Raleigh","c":"United States","y":35.8325,"x":-78.6435},{"n":"Cartagena","c":"Colombia","y":10.4236,"x":-75.5253},{"n":"Chandigarh","c":"India","y":30.7353,"x":76.7911},{"n":"Bishkek","c":"Kyrgyzstan","y":42.8667,"x":74.5667},{"n":"Matola","c":"Mozambique","y":-25.9667,"x":32.4667},{"n":"Ogbomoso","c":"Nigeria","y":8.1333,"x":4.25},{"n":"Ashgabat","c":"Turkmenistan","y":37.95,"x":58.3833},{"n":"Maceio","c":"Brazil","y":-9.6658,"x":-35.735},{"n":"Niamey","c":"Niger","y":13.5086,"x":2.1111},{"n":"Managua","c":"Nicaragua","y":12.15,"x":-86.2667},{"n":"Patam","c":"Indonesia","y":1.0678,"x":104.0167},{"n":"Tekirdag","c":"Turkey","y":40.9833,"x":27.5167},{"n":"Shubra al Khaymah","c":"Egypt","y":30.1286,"x":31.2422},{"n":"Linhai","c":"China","y":28.8523,"x":121.1409},{"n":"Monrovia","c":"Liberia","y":6.3106,"x":-10.8047},{"n":"Wafangdian","c":"China","y":39.6271,"x":121.9972},{"n":"Zhongxiang","c":"China","y":31.169,"x":112.5853},{"n":"Odesa","c":"Ukraine","y":46.4775,"x":30.7326},{"n":"Shymkent","c":"Kazakhstan","y":42.3,"x":69.6},{"n":"New Orleans","c":"United States","y":30.0687,"x":-89.9288},{"n":"Thu Duc","c":"Vietnam","y":10.8199,"x":106.7909},{"n":"Volgograd","c":"Russia","y":48.7086,"x":44.5147},{"n":"Port-au-Prince","c":"Haiti","y":18.5425,"x":-72.3386},{"n":"Islamabad","c":"Pakistan","y":33.6989,"x":73.0369},{"n":"Mysore","c":"India","y":12.3086,"x":76.6531},{"n":"Xinyi","c":"China","y":22.3559,"x":110.9369},{"n":"Kathmandu","c":"Nepal","y":27.7167,"x":85.3667},{"n":"Raipur","c":"India","y":21.2379,"x":81.6337},{"n":"Nice","c":"France","y":43.7034,"x":7.2663},{"n":"Arequipa","c":"Peru","y":-16.3988,"x":-71.5369},{"n":"Port Harcourt","c":"Nigeria","y":4.75,"x":7},{"n":"Louisville","c":"United States","y":38.1663,"x":-85.6485},{"n":"Zaoyang","c":"China","y":32.1287,"x":112.7581},{"n":"Shuizhai","c":"China","y":33.4433,"x":114.8994},{"n":"Dnipro","c":"Ukraine","y":48.45,"x":34.9833},{"n":"Kota","c":"India","y":25.18,"x":75.83},{"n":"Quetta","c":"Pakistan","y":30.192,"x":67.007},{"n":"Abu Dhabi","c":"United Arab Emirates","y":24.4781,"x":54.3686},{"n":"Stockholm","c":"Sweden","y":59.3294,"x":18.0686},{"n":"Ottawa","c":"Canada","y":45.4247,"x":-75.695},{"n":"Asmara","c":"Eritrea","y":15.3333,"x":38.9167},{"n":"Freetown","c":"Sierra Leone","y":8.4833,"x":-13.2331},{"n":"Jerusalem","c":"Israel","y":31.7833,"x":35.2167},{"n":"Bangui","c":"Central African Republic","y":4.3732,"x":18.5628},{"n":"Panama City","c":"Panama","y":9,"x":-79.5},{"n":"Amsterdam","c":"Netherlands","y":52.3667,"x":4.8833},{"n":"Lome","c":"Togo","y":6.1319,"x":1.2228},{"n":"Libreville","c":"Gabon","y":0.3901,"x":9.4544},{"n":"Zagreb","c":"Croatia","y":45.8,"x":15.95},{"n":"Dushanbe","c":"Tajikistan","y":38.5731,"x":68.7864},{"n":"Lilongwe","c":"Malawi","y":-13.9833,"x":33.7833},{"n":"Cotonou","c":"Benin","y":6.4,"x":2.52},{"n":"Vientiane","c":"Laos","y":17.9667,"x":102.6},{"n":"Colombo","c":"Sri Lanka","y":6.9167,"x":79.8333},{"n":"Pretoria","c":"South Africa","y":-25.7464,"x":28.1881},{"n":"Winnipeg","c":"Canada","y":49.8844,"x":-97.1464},{"n":"Quebec City","c":"Canada","y":46.8139,"x":-71.2081},{"n":"Oslo","c":"Norway","y":59.9111,"x":10.7528},{"n":"Athens","c":"Greece","y":37.9842,"x":23.7281},{"n":"Bujumbura","c":"Burundi","y":-3.3825,"x":29.3611},{"n":"Helsinki","c":"Finland","y":60.1756,"x":24.9342},{"n":"Skopje","c":"Macedonia","y":41.9833,"x":21.4333},{"n":"Chisinau","c":"Moldova","y":47.0228,"x":28.8353},{"n":"Riga","c":"Latvia","y":56.9475,"x":24.1069},{"n":"Copenhagen","c":"Denmark","y":55.6761,"x":12.5689},{"n":"Kingston","c":"Jamaica","y":17.9714,"x":-76.7931},{"n":"Rabat","c":"Morocco","y":34.0253,"x":-6.8361},{"n":"Vilnius","c":"Lithuania","y":54.6833,"x":25.2833},{"n":"San Salvador","c":"El Salvador","y":13.6989,"x":-89.1914},{"n":"Djibouti","c":"Djibouti","y":11.595,"x":43.1481},{"n":"Lisbon","c":"Portugal","y":38.7452,"x":-9.1604},{"n":"Kitchener","c":"Canada","y":43.4186,"x":-80.4728},{"n":"Tallinn","c":"Estonia","y":59.4372,"x":24.745},{"n":"Cape Town","c":"South Africa","y":-33.925,"x":18.425},{"n":"Bratislava","c":"Slovakia","y":48.1447,"x":17.1128},{"n":"Tirana","c":"Albania","y":41.33,"x":19.82},{"n":"Canberra","c":"Australia","y":-35.2931,"x":149.1269},{"n":"Wellington","c":"New Zealand","y":-41.2889,"x":174.7772},{"n":"Beirut","c":"Lebanon","y":33.8869,"x":35.5131},{"n":"Dodoma","c":"Tanzania","y":-6.1835,"x":35.746},{"n":"Halifax","c":"Canada","y":44.6475,"x":-63.5906},{"n":"Bissau","c":"Guinea-Bissau","y":11.8592,"x":-15.5956},{"n":"Juba","c":"South Sudan","y":4.85,"x":31.6},{"n":"Port Moresby","c":"Papua New Guinea","y":-9.4789,"x":147.1494},{"n":"Yamoussoukro","c":"Côte D’Ivoire","y":6.8161,"x":-5.2742},{"n":"Victoria","c":"Canada","y":48.4283,"x":-123.3647},{"n":"Maseru","c":"Lesotho","y":-29.31,"x":27.48},{"n":"Nicosia","c":"Cyprus","y":35.1725,"x":33.365},{"n":"Windhoek","c":"Namibia","y":-22.57,"x":17.0836},{"n":"Porto-Novo","c":"Benin","y":6.4833,"x":2.6167},{"n":"Sucre","c":"Bolivia","y":-19.0431,"x":-65.2592},{"n":"San Jose","c":"Costa Rica","y":9.9333,"x":-84.0833},{"n":"Ljubljana","c":"Slovenia","y":46.05,"x":14.5167},{"n":"Sarajevo","c":"Bosnia And Herzegovina","y":43.8667,"x":18.4167},{"n":"Nassau","c":"Bahamas, The","y":25.0667,"x":-77.3333},{"n":"Bloemfontein","c":"South Africa","y":-29.1,"x":26.2167},{"n":"Fort-de-France","c":"Martinique","y":14.6104,"x":-61.08},{"n":"Gaborone","c":"Botswana","y":-24.6569,"x":25.9086},{"n":"Paramaribo","c":"Suriname","y":5.8667,"x":-55.1667},{"n":"Dili","c":"Timor-Leste","y":-8.5586,"x":125.5736},{"n":"Pristina","c":"Kosovo","y":42.6667,"x":21.1667},{"n":"Georgetown","c":"Guyana","y":6.7833,"x":-58.1667},{"n":"Malabo","c":"Equatorial Guinea","y":3.7521,"x":8.7737},{"n":"Gibraltar","c":"Gibraltar","y":36.1324,"x":-5.3781},{"n":"Saint-Denis","c":"Reunion","y":-20.8789,"x":55.4481},{"n":"Male","c":"Maldives","y":4.175,"x":73.5083},{"n":"Podgorica","c":"Montenegro","y":42.4397,"x":19.2661},{"n":"Manama","c":"Bahrain","y":26.225,"x":50.5775},{"n":"Port Louis","c":"Mauritius","y":-20.1667,"x":57.5},{"n":"Willemstad","c":"Curaçao","y":12.108,"x":-68.935},{"n":"New Delhi","c":"India","y":28.7,"x":77.2},{"n":"Bern","c":"Switzerland","y":46.948,"x":7.4474},{"n":"Papeete","c":"French Polynesia","y":-17.5334,"x":-149.5667},{"n":"Reykjavik","c":"Iceland","y":64.1475,"x":-21.935},{"n":"Praia","c":"Cabo Verde","y":14.9177,"x":-23.5092},{"n":"Luxembourg","c":"Luxembourg","y":49.6106,"x":6.1328},{"n":"Sri Jayewardenepura Kotte","c":"Sri Lanka","y":6.9,"x":79.9164},{"n":"Bridgetown","c":"Barbados","y":13.0975,"x":-59.6167},{"n":"Moroni","c":"Comoros","y":-11.7036,"x":43.2536},{"n":"Thimphu","c":"Bhutan","y":27.4833,"x":89.6333},{"n":"Mbabane","c":"Swaziland","y":-26.3208,"x":31.1617},{"n":"Noumea","c":"New Caledonia","y":-22.2625,"x":166.4443},{"n":"Honiara","c":"Solomon Islands","y":-9.4333,"x":159.95},{"n":"Suva","c":"Fiji","y":-18.1333,"x":178.4333},{"n":"Castries","c":"Saint Lucia","y":14.0167,"x":-60.9833},{"n":"Cayenne","c":"French Guiana","y":4.933,"x":-52.33},{"n":"Sao Tome","c":"Sao Tome And Principe","y":0.3333,"x":6.7333},{"n":"Port-Vila","c":"Vanuatu","y":-17.7333,"x":168.3167},{"n":"Hamilton","c":"Bermuda","y":32.2942,"x":-64.7839},{"n":"Bandar Seri Begawan","c":"Brunei","y":4.9167,"x":114.9167},{"n":"Monaco","c":"Monaco","y":43.7396,"x":7.4069},{"n":"Gitega","c":"Burundi","y":-3.4264,"x":29.9306},{"n":"Port of Spain","c":"Trinidad And Tobago","y":10.6667,"x":-61.5167},{"n":"Apia","c":"Samoa","y":-13.8333,"x":-171.8333},{"n":"Douglas","c":"Isle Of Man","y":54.15,"x":-4.4819},{"n":"Oranjestad","c":"Aruba","y":12.5186,"x":-70.0358},{"n":"Saint Helier","c":"Jersey","y":49.1833,"x":-2.1167},{"n":"Vaduz","c":"Liechtenstein","y":47.1415,"x":9.5215},{"n":"Banjul","c":"Gambia, The","y":13.4531,"x":-16.5775},{"n":"Mamoudzou","c":"Mayotte","y":-12.7871,"x":45.275},{"n":"Majuro","c":"Marshall Islands","y":7.0918,"x":171.3802},{"n":"Tarawa","c":"Kiribati","y":1.3382,"x":173.0176},{"n":"George Town","c":"Cayman Islands","y":19.2866,"x":-81.3744},{"n":"Victoria","c":"Seychelles","y":-4.6236,"x":55.4544},{"n":"Kingstown","c":"Saint Vincent And The Grenadines","y":13.1667,"x":-61.2333},{"n":"Saint John's","c":"Antigua And Barbuda","y":17.1211,"x":-61.8447},{"n":"Nuku`alofa","c":"Tonga","y":-21.1347,"x":-175.2083},{"n":"Andorra la Vella","c":"Andorra","y":42.5,"x":1.5},{"n":"Nuuk","c":"Greenland","y":64.175,"x":-51.7333},{"n":"Belmopan","c":"Belize","y":17.25,"x":-88.7675},{"n":"Roseau","c":"Dominica","y":15.3,"x":-61.3833},{"n":"Basseterre","c":"Saint Kitts And Nevis","y":17.2983,"x":-62.7342},{"n":"Torshavn","c":"Faroe Islands","y":62,"x":-6.7833},{"n":"Pago Pago","c":"American Samoa","y":-14.274,"x":-170.7046},{"n":"Valletta","c":"Malta","y":35.8978,"x":14.5125},{"n":"Gaza","c":"Gaza Strip","y":31.5069,"x":34.456},{"n":"Grand Turk","c":"Turks And Caicos Islands","y":21.4664,"x":-71.136},{"n":"Palikir","c":"Micronesia, Federated States Of","y":6.9178,"x":158.185},{"n":"Funafuti","c":"Tuvalu","y":-8.5167,"x":179.2167},{"n":"Lobamba","c":"Swaziland","y":-26.4465,"x":31.2064},{"n":"Avarua","c":"Cook Islands","y":-21.207,"x":-159.771},{"n":"Saint George's","c":"Grenada","y":12.0444,"x":-61.7417},{"n":"San Marino","c":"San Marino","y":43.932,"x":12.4484},{"n":"Al Quds","c":"West Bank","y":31.7764,"x":35.2269},{"n":"Capitol Hill","c":"Northern Mariana Islands","y":15.2137,"x":145.7546},{"n":"Basse-Terre","c":"Guadeloupe","y":16,"x":-61.7167},{"n":"Stanley","c":"Falkland Islands (Islas Malvinas)","y":-51.7,"x":-57.85},{"n":"Vatican City","c":"Vatican City","y":41.9,"x":12.4478},{"n":"Alofi","c":"Niue","y":-19.056,"x":-169.921},{"n":"Hagta","c":"Guam","y":13.4745,"x":144.7504},{"n":"Jamestown","c":"Saint Helena, Ascension, And Tristan Da Cunha","y":-15.9251,"x":-5.7179},{"n":"Marigot","c":"Saint Martin","y":18.0706,"x":-63.0847},{"n":"Philipsburg","c":"Sint Maarten","y":18.0256,"x":-63.0492},{"n":"Road Town","c":"Virgin Islands, British","y":18.4167,"x":-64.6167},{"n":"Gustavia","c":"Saint Barthelemy","y":17.8958,"x":-62.8508},{"n":"Saint-Pierre","c":"Saint Pierre And Miquelon","y":46.7811,"x":-56.1764},{"n":"The Valley","c":"Anguilla","y":18.2167,"x":-63.05},{"n":"Mata-Utu","c":"Wallis And Futuna","y":-13.2825,"x":-176.1736},{"n":"Kingston","c":"Norfolk Island","y":-29.0569,"x":167.9617},{"n":"Ngerulmud","c":"Palau","y":7.5006,"x":134.6242},{"n":"Tifariti","c":"Morocco","y":26.0928,"x":-10.6089},{"n":"Tifariti","c":"Western Sahara","y":26.0928,"x":-10.6089},{"n":"Longyearbyen","c":"Svalbard","y":78.2167,"x":15.6333},{"n":"Adamstown","c":"Pitcairn Islands","y":-25.0667,"x":-130.0833},{"n":"Flying Fish Cove","c":"Christmas Island","y":-10.4167,"x":105.7167},{"n":"Bareilly","c":"India","y":28.364,"x":79.415},{"n":"Quang Ha","c":"Vietnam","y":16.06,"x":108.25},{"n":"Soacha","c":"Colombia","y":4.5781,"x":-74.2144},{"n":"Kitaku","c":"Japan","y":33.8704,"x":130.82},{"n":"Jodhpur","c":"India","y":26.2918,"x":73.0168},{"n":"Xingcheng","c":"China","y":24.1681,"x":115.6669},{"n":"Dongtai","c":"China","y":32.8534,"x":120.3037},{"n":"Yingcheng","c":"China","y":24.1878,"x":113.4042},{"n":"Al Mansurah","c":"Egypt","y":31.05,"x":31.3833},{"n":"Glasgow","c":"United Kingdom","y":55.8609,"x":-4.2514},{"n":"Chiba","c":"Japan","y":35.6,"x":140.1},{"n":"Luocheng","c":"China","y":22.7645,"x":111.5745},{"n":"Danyang","c":"China","y":31.9948,"x":119.575},{"n":"Natal","c":"Brazil","y":-6.9838,"x":-60.2699},{"n":"Zhaodong","c":"China","y":46.0635,"x":125.9773},{"n":"Nada","c":"China","y":19.5,"x":109.5833},{"n":"Xibeijie","c":"China","y":39.737,"x":98.5049},{"n":"Kirkuk","c":"Iraq","y":35.4667,"x":44.4},{"n":"Naples","c":"Italy","y":40.8333,"x":14.25},{"n":"Wuchuan","c":"China","y":21.4283,"x":110.7749},{"n":"Huilong","c":"China","y":31.8131,"x":121.6574},{"n":"Oklahoma City","c":"United States","y":35.4676,"x":-97.5136},{"n":"Toulouse","c":"France","y":43.6045,"x":1.444},{"n":"Malaga","c":"Spain","y":36.7194,"x":-4.42},{"n":"Denizli","c":"Turkey","y":37.7731,"x":29.0878},{"n":"Dispur","c":"India","y":26.15,"x":91.77},{"n":"Coimbatore","c":"India","y":11,"x":76.9667},{"n":"Guwahati","c":"India","y":26.1667,"x":91.7667},{"n":"Songnam","c":"Korea, South","y":37.4386,"x":127.1378},{"n":"Taishan","c":"China","y":22.2486,"x":112.785},{"n":"Solapur","c":"India","y":17.6833,"x":75.9167},{"n":"Tangier","c":"Morocco","y":35.7767,"x":-5.8039},{"n":"Anqiu","c":"China","y":36.3619,"x":119.1072},{"n":"Feicheng","c":"China","y":36.186,"x":116.772},{"n":"Kisangani","c":"Congo (Kinshasa)","y":0.5153,"x":25.1911},{"n":"Khartoum North","c":"Sudan","y":15.6333,"x":32.6333},{"n":"Aguascalientes","c":"Mexico","y":21.876,"x":-102.296},{"n":"Marrakech","c":"Morocco","y":31.6295,"x":-7.9811},{"n":"Donetsk","c":"Ukraine","y":48.0089,"x":37.8042},{"n":"Taihecun","c":"China","y":45.768,"x":131.0063},{"n":"Trujillo","c":"Peru","y":-8.1119,"x":-79.0289},{"n":"Cebu City","c":"Philippines","y":10.3,"x":123.9},{"n":"Taihe","c":"China","y":30.8706,"x":105.3784},{"n":"Bridgeport","c":"United States","y":41.1918,"x":-73.1953},{"n":"Antwerp","c":"Belgium","y":51.2206,"x":4.4003},{"n":"Trichinopoly","c":"India","y":10.8269,"x":78.6928},{"n":"Xin'an","c":"China","y":34.3662,"x":118.3369},{"n":"Padang","c":"Indonesia","y":-0.9556,"x":100.3606},{"n":"Qingzhou","c":"China","y":36.6967,"x":118.4797},{"n":"Buffalo","c":"United States","y":42.9016,"x":-78.8487},{"n":"Lichuan","c":"China","y":30.2965,"x":108.9378},{"n":"Daye","c":"China","y":30.1003,"x":114.9699},{"n":"Fort Worth","c":"United States","y":32.7811,"x":-97.3473},{"n":"Hengzhou","c":"China","y":22.6896,"x":109.2674},{"n":"Campo Grande","c":"Brazil","y":-20.4686,"x":-54.6222},{"n":"Zhuanghe","c":"China","y":39.6896,"x":122.9664},{"n":"Hartford","c":"United States","y":41.7661,"x":-72.6834},{"n":"Ad Dammam","c":"Saudi Arabia","y":26.4333,"x":50.1},{"n":"Bucheon","c":"Korea, South","y":37.4989,"x":126.7831},{"n":"Lhasa","c":"China","y":29.65,"x":91.1},{"n":"Homs","c":"Syria","y":34.7333,"x":36.7167},{"n":"Jiaozhou","c":"China","y":36.2481,"x":119.9625},{"n":"Merida","c":"Mexico","y":20.97,"x":-89.62},{"n":"Yangchun","c":"China","y":22.1717,"x":111.7846},{"n":"Concepcion","c":"Chile","y":-36.82,"x":-73.0445},{"n":"Dengtalu","c":"China","y":36.08,"x":114.35},{"n":"Hubli","c":"India","y":15.36,"x":75.125},{"n":"Abeokuta","c":"Nigeria","y":7.15,"x":3.35},{"n":"Tucson","c":"United States","y":32.1545,"x":-110.8782},{"n":"Krasnodar","c":"Russia","y":45.0333,"x":38.9833},{"n":"Chihuahua","c":"Mexico","y":28.6353,"x":-106.0889},{"n":"Klang","c":"Malaysia","y":3.0333,"x":101.45},{"n":"Turin","c":"Italy","y":45.0667,"x":7.7},{"n":"Jos","c":"Nigeria","y":9.9333,"x":8.8833},{"n":"Laiyang","c":"China","y":36.9758,"x":120.7136},{"n":"Jalandhar","c":"India","y":31.3256,"x":75.5792},{"n":"Sale","c":"Morocco","y":34.05,"x":-6.8167},{"n":"Marseille","c":"France","y":43.2964,"x":5.37},{"n":"Kaifeng Chengguanzhen","c":"China","y":34.85,"x":114.35},{"n":"Eskisehir","c":"Turkey","y":39.7767,"x":30.5206},{"n":"Gaomi","c":"China","y":36.3833,"x":119.75},{"n":"Teresina","c":"Brazil","y":-5.0949,"x":-42.8042},{"n":"Ipoh","c":"Malaysia","y":4.6,"x":101.07},{"n":"Hai'an","c":"China","y":32.532,"x":120.4604},{"n":"Liverpool","c":"United Kingdom","y":53.4,"x":-2.9833},{"n":"Zamboanga City","c":"Philippines","y":6.9167,"x":122.0833},{"n":"Oran","c":"Algeria","y":35.6969,"x":-0.6331},{"n":"Southampton","c":"United Kingdom","y":50.9,"x":-1.4},{"n":"Weichanglu","c":"China","y":37.1792,"x":119.9333},{"n":"Pekanbaru","c":"Indonesia","y":0.5333,"x":101.45},{"n":"Portsmouth","c":"United Kingdom","y":50.8058,"x":-1.0872},{"n":"Leping","c":"China","y":28.9632,"x":117.1203},{"n":"Kermanshah","c":"Iran","y":34.3167,"x":47.0686},{"n":"Hailun","c":"China","y":47.4585,"x":126.9632},{"n":"Macheng","c":"China","y":31.1817,"x":115.0189},{"n":"Ilorin","c":"Nigeria","y":8.5,"x":4.55},{"n":"Omaha","c":"United States","y":41.2627,"x":-96.0522},{"n":"Yuci","c":"China","y":37.6804,"x":112.73},{"n":"Saratov","c":"Russia","y":51.5333,"x":46},{"n":"Sao Bernardo do Campo","c":"Brazil","y":-23.6939,"x":-46.565},{"n":"Erbil","c":"Iraq","y":36.1911,"x":44.0094},{"n":"Iguacu","c":"Brazil","y":-22.74,"x":-43.47},{"n":"El Paso","c":"United States","y":31.8479,"x":-106.4309},{"n":"Denpasar","c":"Indonesia","y":-8.6667,"x":115.2167},{"n":"Dehui","c":"China","y":44.5323,"x":125.6965},{"n":"Naucalpan de Juarez","c":"Mexico","y":19.4753,"x":-99.2378},{"n":"Bhubaneshwar","c":"India","y":20.2644,"x":85.8281},{"n":"Tongchuan","c":"China","y":34.9057,"x":108.9422},{"n":"Cheongju","c":"Korea, South","y":36.6372,"x":127.4897},{"n":"Warri","c":"Nigeria","y":5.5167,"x":5.75},{"n":"Pointe-Noire","c":"Congo (Brazzaville)","y":-4.7889,"x":11.8653},{"n":"Rongjiawan","c":"China","y":29.1409,"x":113.1087},{"n":"Butterworth","c":"Malaysia","y":5.3942,"x":100.3664},{"n":"Bhayandar","c":"India","y":19.3,"x":72.85},{"n":"San Luis Potosi","c":"Mexico","y":22.1511,"x":-100.9761},{"n":"Renqiu","c":"China","y":38.7094,"x":116.1008},{"n":"Joao Pessoa","c":"Brazil","y":-7.12,"x":-34.88},{"n":"Toluca","c":"Mexico","y":19.2925,"x":-99.6569},{"n":"Honolulu","c":"United States","y":21.3294,"x":-157.846},{"n":"Queretaro","c":"Mexico","y":20.5875,"x":-100.3928},{"n":"Xindi","c":"China","y":29.8182,"x":113.4653},{"n":"Wu'an","c":"China","y":36.6941,"x":114.1847},{"n":"Hermosillo","c":"Mexico","y":29.0989,"x":-110.9542},{"n":"Wutong","c":"China","y":30.6326,"x":120.5474},{"n":"Taguig City","c":"Philippines","y":14.5167,"x":121.05},{"n":"Saltillo","c":"Mexico","y":25.4333,"x":-101},{"n":"Gaoyou","c":"China","y":32.7847,"x":119.4432},{"n":"Hejian","c":"China","y":38.4451,"x":116.0897},{"n":"Puxi","c":"China","y":35.2125,"x":114.735},{"n":"Zijinglu","c":"China","y":34.7513,"x":112.9854},{"n":"Trabzon","c":"Turkey","y":41.005,"x":39.7225},{"n":"Xiashi","c":"China","y":30.5333,"x":120.6833},{"n":"Valencia","c":"Spain","y":39.47,"x":-0.3764},{"n":"Dongyang","c":"China","y":29.2785,"x":120.2282},{"n":"McAllen","c":"United States","y":26.2273,"x":-98.2471},{"n":"Abaete","c":"Brazil","y":-19.1583,"x":-45.4522},{"n":"Palermo","c":"Colombia","y":2.8883,"x":-75.4339},{"n":"Johor Bahru","c":"Malaysia","y":1.4556,"x":103.7611},{"n":"Qingping","c":"China","y":34.538,"x":113.3796},{"n":"Morelia","c":"Mexico","y":19.7683,"x":-101.1894},{"n":"Niigata","c":"Japan","y":37.9161,"x":139.0364},{"n":"Pasig City","c":"Philippines","y":14.575,"x":121.0833},{"n":"Moradabad","c":"India","y":28.8418,"x":78.7568},{"n":"Hamamatsu","c":"Japan","y":34.7167,"x":137.7333},{"n":"Culiacan","c":"Mexico","y":24.8069,"x":-107.3939},{"n":"Xiangxiang","c":"China","y":27.7389,"x":112.5223},{"n":"Malang","c":"Indonesia","y":-7.98,"x":112.62},{"n":"Xingyi","c":"China","y":25.091,"x":104.9011},{"n":"Chaohucun","c":"China","y":31.6783,"x":117.7353},{"n":"Antipolo","c":"Philippines","y":14.5842,"x":121.1763},{"n":"Lubango","c":"Angola","y":-14.9167,"x":13.5},{"n":"Nottingham","c":"United Kingdom","y":52.95,"x":-1.15},{"n":"Cencheng","c":"China","y":22.9297,"x":111.0186},{"n":"Krakow","c":"Poland","y":50.0614,"x":19.9372},{"n":"Erzurum","c":"Turkey","y":39.9097,"x":41.2756},{"n":"Hempstead","c":"United States","y":40.6629,"x":-73.6089},{"n":"Al `Ayn","c":"United Arab Emirates","y":24.2075,"x":55.7447},{"n":"Songzi","c":"China","y":30.1772,"x":111.7732},{"n":"Laixi","c":"China","y":36.8667,"x":120.5333},{"n":"Bahawalpur","c":"Pakistan","y":29.3956,"x":71.6722},{"n":"Zhongba","c":"China","y":31.7761,"x":104.7406},{"n":"Qingnian","c":"China","y":36.8494,"x":115.7061},{"n":"Albuquerque","c":"United States","y":35.1053,"x":-106.6464},{"n":"Kaduna","c":"Nigeria","y":10.5231,"x":7.4403},{"n":"Tlalnepantla","c":"Mexico","y":19.5367,"x":-99.1947},{"n":"Xinhualu","c":"China","y":34.3962,"x":113.7249},{"n":"Guangshui","c":"China","y":31.6189,"x":113.8229},{"n":"Frankfurt","c":"Germany","y":50.1136,"x":8.6797},{"n":"Samarinda","c":"Indonesia","y":-0.5022,"x":117.1536},{"n":"Changhua","c":"Taiwan","y":24.0667,"x":120.5333},{"n":"Pietermaritzburg","c":"South Africa","y":-29.5833,"x":30.4167},{"n":"Hungnam","c":"Korea, North","y":39.8231,"x":127.6232},{"n":"Kolhapur","c":"India","y":16.7,"x":74.2333},{"n":"Ciudad Guayana","c":"Venezuela","y":8.3596,"x":-62.6517},{"n":"Cucuta","c":"Colombia","y":7.9075,"x":-72.5047},{"n":"Licheng","c":"China","y":31.4174,"x":119.4786},{"n":"Thiruvananthapuram","c":"India","y":8.5,"x":76.8997},{"n":"Tyumen","c":"Russia","y":57.15,"x":65.5333},{"n":"Cancun","c":"Mexico","y":21.1606,"x":-86.8475},{"n":"Zaporizhzhia","c":"Ukraine","y":47.8378,"x":35.1383},{"n":"Tlajomulco de Zuniga","c":"Mexico","y":20.4736,"x":-103.4431},{"n":"Chengguan","c":"China","y":35.4599,"x":113.7975},{"n":"Kumamoto","c":"Japan","y":32.8031,"x":130.7078},{"n":"Nehe","c":"China","y":48.48,"x":124.8738},{"n":"Sokoto","c":"Nigeria","y":13.0622,"x":5.2339},{"n":"Birmingham","c":"United States","y":33.5277,"x":-86.7987},{"n":"Zunhua","c":"China","y":40.1881,"x":117.9593},{"n":"Orumiyeh","c":"Iran","y":37.5486,"x":45.0675},{"n":"Oyo","c":"Nigeria","y":7.8333,"x":3.9333},{"n":"Wugang","c":"China","y":26.7345,"x":110.6293},{"n":"Shuangqiao","c":"China","y":35.0833,"x":112.5833},{"n":"Rennes","c":"France","y":48.1147,"x":-1.6794},{"n":"Sizhan","c":"China","y":39.0099,"x":106.3694},{"n":"Comodoro Rivadavia","c":"Argentina","y":-45.8667,"x":-67.5},{"n":"Langzhong","c":"China","y":31.5833,"x":105.972},{"n":"Bristol","c":"United Kingdom","y":51.45,"x":-2.5833},{"n":"Qian'an","c":"China","y":40.0059,"x":118.6973},{"n":"Lviv","c":"Ukraine","y":49.8419,"x":24.0315},{"n":"Zouping","c":"China","y":36.8625,"x":117.7424},{"n":"Bremen","c":"Germany","y":53.1153,"x":8.7975},{"n":"Reynosa","c":"Mexico","y":26.0922,"x":-98.2778},{"n":"An Najaf","c":"Iraq","y":32.029,"x":44.3396},{"n":"Sagamihara","c":"Japan","y":35.5667,"x":139.3667},{"n":"Guli","c":"China","y":28.9008,"x":120.0284},{"n":"Sarasota","c":"United States","y":27.3386,"x":-82.5431},{"n":"Mississauga","c":"Canada","y":43.6,"x":-79.65},{"n":"Lingbao Chengguanzhen","c":"China","y":34.5221,"x":110.8786},{"n":"Okayama","c":"Japan","y":34.65,"x":133.9167},{"n":"Anlu","c":"China","y":31.2575,"x":113.6783},{"n":"Wusong","c":"China","y":30.9333,"x":117.7667},{"n":"Dayton","c":"United States","y":39.7797,"x":-84.1998},{"n":"Enugu","c":"Nigeria","y":6.4403,"x":7.4942},{"n":"George Town","c":"Malaysia","y":5.4145,"x":100.3292},{"n":"Jaboatao","c":"Brazil","y":-8.1803,"x":-35.0014},{"n":"Santo Andre","c":"Brazil","y":-23.6572,"x":-46.5333},{"n":"Xichang","c":"China","y":27.8983,"x":102.2706},{"n":"Soledad","c":"Colombia","y":10.92,"x":-74.77},{"n":"Chengxiang","c":"China","y":31.4515,"x":121.1043},{"n":"Tolyatti","c":"Russia","y":53.5167,"x":49.4167},{"n":"Saharanpur","c":"India","y":29.964,"x":77.546},{"n":"Warangal","c":"India","y":17.9756,"x":79.6011},{"n":"Edogawa","c":"Japan","y":35.6924,"x":139.8757},{"n":"Osasco","c":"Brazil","y":-23.5328,"x":-46.7919},{"n":"Dashiqiao","c":"China","y":40.6328,"x":122.5021},{"n":"Latakia","c":"Syria","y":35.5236,"x":35.7917},{"n":"Rochester","c":"United States","y":43.168,"x":-77.6162},{"n":"Fresno","c":"United States","y":36.7831,"x":-119.7941},{"n":"Banjarmasin","c":"Indonesia","y":-3.3333,"x":114.5833},{"n":"Salem","c":"India","y":11.65,"x":78.1667},{"n":"Uberlandia","c":"Brazil","y":-18.9189,"x":-48.2769},{"n":"Shishi","c":"China","y":24.7355,"x":118.6434},{"n":"Grenoble","c":"France","y":45.1715,"x":5.7224},{"n":"Guadalupe","c":"Mexico","y":25.6775,"x":-100.2597},{"n":"Adachi","c":"Japan","y":35.7833,"x":139.8},{"n":"Qianxi","c":"China","y":27.0284,"x":106.0327},{"n":"Aracaju","c":"Brazil","y":-10.9111,"x":-37.0717},{"n":"Bauchi","c":"Nigeria","y":10.3158,"x":9.8442},{"n":"Hamilton","c":"Canada","y":43.2567,"x":-79.8692},{"n":"Lodz","c":"Poland","y":51.7769,"x":19.4547},{"n":"Miluo Chengguanzhen","c":"China","y":28.8049,"x":113.0745},{"n":"Gaizhou","c":"China","y":40.4019,"x":122.3499},{"n":"Malegaon","c":"India","y":20.55,"x":74.55},{"n":"Karbala'","c":"Iraq","y":32.6167,"x":44.0333},{"n":"Leling","c":"China","y":37.7333,"x":117.2167},{"n":"Sao Jose dos Campos","c":"Brazil","y":-23.1789,"x":-45.8869},{"n":"Jianshe","c":"China","y":34.2189,"x":113.7693},{"n":"Acapulco de Juarez","c":"Mexico","y":16.8636,"x":-99.8825},{"n":"Sheffield","c":"United Kingdom","y":53.3833,"x":-1.4667},{"n":"Shizuoka","c":"Japan","y":34.9756,"x":138.3825},{"n":"Jingcheng","c":"China","y":32.0058,"x":120.2547},{"n":"City of Paranaque","c":"Philippines","y":14.4667,"x":121.0167},{"n":"Kochi","c":"India","y":9.9667,"x":76.2833},{"n":"Allentown","c":"United States","y":40.5961,"x":-75.4756},{"n":"Tasikmalaya","c":"Indonesia","y":-7.3333,"x":108.2},{"n":"Macau","c":"Macau","y":22.203,"x":113.545},{"n":"Torreon","c":"Mexico","y":25.5394,"x":-103.4486},{"n":"Xinmin","c":"China","y":41.9952,"x":122.8224},{"n":"Shanhu","c":"China","y":29.5908,"x":120.8176},{"n":"Zhongshu","c":"China","y":27.8116,"x":106.4133},{"n":"Xigaze","c":"China","y":29.2649,"x":88.8799},{"n":"Gold Coast","c":"Australia","y":-28.0167,"x":153.4},{"n":"Cagayan de Oro","c":"Philippines","y":8.4833,"x":124.65},{"n":"Gorakhpur","c":"India","y":26.7611,"x":83.3667},{"n":"Pinghu","c":"China","y":30.7005,"x":121.0104},{"n":"Palermo","c":"Italy","y":38.1157,"x":13.3613},{"n":"Tulsa","c":"United States","y":36.1284,"x":-95.9042},{"n":"Yatou","c":"China","y":37.1653,"x":122.4867},{"n":"Songyang","c":"China","y":34.4161,"x":113.0424},{"n":"Cape Coral","c":"United States","y":26.6446,"x":-81.9956},{"n":"Ch'ongjin","c":"Korea, North","y":41.8,"x":129.7831},{"n":"Puyang Chengguanzhen","c":"China","y":35.7004,"x":114.98},{"n":"Qionghu","c":"China","y":28.8417,"x":112.3595},{"n":"Ribeirao Preto","c":"Brazil","y":-21.1783,"x":-47.8067},{"n":"Dasmarinas","c":"Philippines","y":14.3294,"x":120.9367},{"n":"Wenchang","c":"China","y":31.054,"x":116.9507},{"n":"Shulan","c":"China","y":44.4167,"x":126.95},{"n":"Catia La Mar","c":"Venezuela","y":10.6,"x":-67.0333},{"n":"Sargodha","c":"Pakistan","y":32.0836,"x":72.6711},{"n":"Bouake","c":"Côte D’Ivoire","y":7.6833,"x":-5.0331},{"n":"Sialkot City","c":"Pakistan","y":32.5,"x":74.5333},{"n":"As Sulaymaniyah","c":"Iraq","y":35.55,"x":45.4333},{"n":"Hwasu-dong","c":"Korea, South","y":37.2,"x":126.7667},{"n":"Jeonju","c":"Korea, South","y":35.8219,"x":127.1489},{"n":"Durango","c":"Mexico","y":24.0167,"x":-104.6667},{"n":"Shimoga","c":"India","y":13.9304,"x":75.56},{"n":"Ansan","c":"Korea, South","y":37.3236,"x":126.8219},{"n":"Bulawayo","c":"Zimbabwe","y":-20.1667,"x":28.5667},{"n":"Sanhe","c":"China","y":39.9808,"x":117.0701},{"n":"Guntur","c":"India","y":16.3,"x":80.45},{"n":"Dali","c":"China","y":25.7003,"x":100.1564},{"n":"Concord","c":"United States","y":37.9722,"x":-122.0016},{"n":"Contagem","c":"Brazil","y":-19.9319,"x":-44.0539},{"n":"Tiruppur","c":"India","y":11.1075,"x":77.3398},{"n":"Ch'onan","c":"Korea, South","y":36.8064,"x":127.1522},{"n":"Zaragoza","c":"Spain","y":41.6483,"x":-0.883},{"n":"Dusseldorf","c":"Germany","y":51.2311,"x":6.7724},{"n":"Izhevsk","c":"Russia","y":56.85,"x":53.2167},{"n":"Guixi","c":"China","y":28.2861,"x":117.2083},{"n":"Sorocaba","c":"Brazil","y":-23.5019,"x":-47.4578},{"n":"Villahermosa","c":"Mexico","y":17.9892,"x":-92.9281},{"n":"Petaling Jaya","c":"Malaysia","y":3.1073,"x":101.6067},{"n":"Tengyue","c":"China","y":25.0208,"x":98.4972},{"n":"Wuxue","c":"China","y":29.8518,"x":115.5539},{"n":"Utrecht","c":"Netherlands","y":52.0908,"x":5.1222},{"n":"Kikwit","c":"Congo (Kinshasa)","y":-5.0333,"x":18.8167},{"n":"Colorado Springs","c":"United States","y":38.8674,"x":-104.7606},{"n":"Valenzuela","c":"Philippines","y":14.7,"x":120.9833},{"n":"Qufu","c":"China","y":35.6,"x":116.9833},{"n":"Gaobeidian","c":"China","y":39.3257,"x":115.8678},{"n":"Ruiming","c":"China","y":25.8833,"x":116.0333},{"n":"Wroclaw","c":"Poland","y":51.11,"x":17.0325},{"n":"Rasht","c":"Iran","y":37.2833,"x":49.6},{"n":"Nantes","c":"France","y":47.2181,"x":-1.5528},{"n":"Stuttgart","c":"Germany","y":48.7761,"x":9.1775},{"n":"Al Hufuf","c":"Saudi Arabia","y":25.3608,"x":49.5997},{"n":"Xinshi","c":"China","y":31.0236,"x":113.1079},{"n":"Cochabamba","c":"Bolivia","y":-17.3935,"x":-66.157},{"n":"Barnaul","c":"Russia","y":53.3567,"x":83.7872},{"n":"Tripoli","c":"Lebanon","y":34.4333,"x":35.8333},{"n":"Jin'e","c":"China","y":29.3395,"x":105.2868},{"n":"Rotterdam","c":"Netherlands","y":51.9225,"x":4.4792},{"n":"Benghazi","c":"Libya","y":32.1167,"x":20.0667},{"n":"Kryvyi Rih","c":"Ukraine","y":47.9086,"x":33.3433},{"n":"Yanggok","c":"Korea, South","y":37.6367,"x":127.2142},{"n":"Changping","c":"China","y":40.2248,"x":116.1944},{"n":"Raurkela","c":"India","y":22.2492,"x":84.8828},{"n":"Halwan","c":"Egypt","y":29.8419,"x":31.3342},{"n":"Charleston","c":"United States","y":32.8153,"x":-79.9628},{"n":"Chimalhuacan","c":"Mexico","y":19.4167,"x":-98.9},{"n":"Xinxing","c":"China","y":39.8734,"x":124.1453},{"n":"Suohe","c":"China","y":34.7879,"x":113.392},{"n":"Mangalore","c":"India","y":12.8703,"x":74.8806},{"n":"Zhuangyuan","c":"China","y":37.3,"x":120.8333},{"n":"Ulyanovsk","c":"Russia","y":54.3167,"x":48.3667},{"n":"Irkutsk","c":"Russia","y":52.2833,"x":104.3},{"n":"Nanded","c":"India","y":19.15,"x":77.3333},{"n":"Bacoor","c":"Philippines","y":14.4624,"x":120.9645},{"n":"Pontianak","c":"Indonesia","y":-0.0206,"x":109.3414},{"n":"Villa Nueva","c":"Guatemala","y":14.5314,"x":-90.5964},{"n":"Springfield","c":"United States","y":42.1155,"x":-72.5395},{"n":"Turpan","c":"China","y":42.95,"x":89.1822},{"n":"Xingtai","c":"China","y":37.0659,"x":114.4753},{"n":"Meihekou","c":"China","y":42.5279,"x":125.678},{"n":"Cuiaba","c":"Brazil","y":-15.5958,"x":-56.0969},{"n":"Jurong","c":"China","y":31.9579,"x":119.1595},{"n":"Feira de Santana","c":"Brazil","y":-12.2669,"x":-38.9669},{"n":"Khabarovsk","c":"Russia","y":48.4833,"x":135.0667},{"n":"Zhugang","c":"China","y":28.1277,"x":121.2288},{"n":"Xinji","c":"China","y":37.9423,"x":115.2118},{"n":"Hamhung","c":"Korea, North","y":39.9656,"x":127.4886},{"n":"Serang","c":"Indonesia","y":-6.12,"x":106.1503},{"n":"Sanya","c":"China","y":18.2536,"x":109.5019},{"n":"Buraydah","c":"Saudi Arabia","y":26.3333,"x":43.9667},{"n":"Ta`izz","c":"Yemen","y":13.5789,"x":44.0219},{"n":"Montpellier","c":"France","y":43.6119,"x":3.8772},{"n":"San Miguel de Tucuman","c":"Argentina","y":-26.8167,"x":-65.2167},{"n":"Yaroslavl","c":"Russia","y":57.6167,"x":39.85},{"n":"Zhangshu","c":"China","y":28.0667,"x":115.5375},{"n":"Grand Rapids","c":"United States","y":42.962,"x":-85.6562},{"n":"Vladivostok","c":"Russia","y":43.1167,"x":131.9},{"n":"Kuantan","c":"Malaysia","y":3.8167,"x":103.3333},{"n":"Gothenburg","c":"Sweden","y":57.6717,"x":11.981},{"n":"Cuttack","c":"India","y":20.45,"x":85.8667},{"n":"Jambi","c":"Indonesia","y":-1.59,"x":103.61},{"n":"Zhuozhou","c":"China","y":39.4887,"x":115.9918},{"n":"Tianchang","c":"China","y":32.6853,"x":119.0041},{"n":"Las Pinas City","c":"Philippines","y":14.45,"x":120.9833},{"n":"Cimahi","c":"Indonesia","y":-6.8833,"x":107.5333},{"n":"Tuxtla","c":"Mexico","y":16.7528,"x":-93.1167},{"n":"Balikpapan","c":"Indonesia","y":-1.1489,"x":116.9031},{"n":"Qamdo","c":"China","y":31.1375,"x":97.1777},{"n":"Joinvile","c":"Brazil","y":-26.3039,"x":-48.8458},{"n":"Durban","c":"South Africa","y":-29.8583,"x":31.025},{"n":"General Santos","c":"Philippines","y":6.1167,"x":125.1667},{"n":"Chanda","c":"India","y":19.95,"x":79.3},{"n":"Kagoshima","c":"Japan","y":31.58,"x":130.5281},{"n":"Leipzig","c":"Germany","y":51.3333,"x":12.3833},{"n":"Al Hillah","c":"Saudi Arabia","y":23.4895,"x":46.7564},{"n":"Makhachkala","c":"Russia","y":42.9833,"x":47.4833},{"n":"Sihui","c":"China","y":23.3448,"x":112.6956},{"n":"Mar del Plata","c":"Argentina","y":-38,"x":-57.55},{"n":"Brampton","c":"Canada","y":43.6833,"x":-79.7667},{"n":"Pereira","c":"Colombia","y":4.8143,"x":-75.6946},{"n":"Mission Viejo","c":"United States","y":33.6095,"x":-117.655},{"n":"Dortmund","c":"Germany","y":51.5139,"x":7.4653},{"n":"Chuxiong","c":"China","y":25.0461,"x":101.5436},{"n":"Makati City","c":"Philippines","y":14.55,"x":121.0333},{"n":"Albany","c":"United States","y":42.6664,"x":-73.7987},{"n":"Shah Alam","c":"Malaysia","y":3.0833,"x":101.5333},{"n":"Knoxville","c":"United States","y":35.9692,"x":-83.9496},{"n":"Essen","c":"Germany","y":51.4508,"x":7.0131},{"n":"Shangzhi","c":"China","y":45.2116,"x":127.962},{"n":"Botou","c":"China","y":38.074,"x":116.57},{"n":"Bucaramanga","c":"Colombia","y":7.1186,"x":-73.1161},{"n":"Anyang","c":"Korea, South","y":37.3925,"x":126.9269},{"n":"Genoa","c":"Italy","y":44.4072,"x":8.934},{"n":"Kuiju","c":"China","y":36.8528,"x":119.3904},{"n":"Tlaquepaque","c":"Mexico","y":20.6167,"x":-103.3167},{"n":"Puente Alto","c":"Chile","y":-33.6167,"x":-70.5833},{"n":"Dehra Dun","c":"India","y":30.318,"x":78.029},{"n":"At Ta'if","c":"Saudi Arabia","y":21.2667,"x":40.4167},{"n":"San Jose del Monte","c":"Philippines","y":14.8139,"x":121.0453},{"n":"Bakersfield","c":"United States","y":35.3529,"x":-119.0359},{"n":"Wancheng","c":"China","y":18.8,"x":110.4},{"n":"Hachioji","c":"Japan","y":35.6667,"x":139.3167},{"n":"Ogden","c":"United States","y":41.2278,"x":-111.9682},{"n":"Xiulin","c":"China","y":29.7211,"x":112.4037},{"n":"Fu'an","c":"China","y":27.1,"x":119.6333},{"n":"Tomsk","c":"Russia","y":56.4886,"x":84.9522},{"n":"Kerman","c":"Iran","y":30.2833,"x":57.0667},{"n":"Kingston upon Hull","c":"United Kingdom","y":53.7444,"x":-0.3325},{"n":"Al Mahallah al Kubra","c":"Egypt","y":30.9667,"x":31.1667},{"n":"Kumul","c":"China","y":42.8322,"x":93.5155},{"n":"Luofeng","c":"China","y":37.359,"x":120.396},{"n":"Lingyuan","c":"China","y":41.2407,"x":119.3957},{"n":"Baton Rouge","c":"United States","y":30.4418,"x":-91.131},{"n":"Wencheng","c":"China","y":19.6167,"x":110.75},{"n":"Ciudad Bolivar","c":"Venezuela","y":8.1167,"x":-63.55},{"n":"Durgapur","c":"India","y":23.55,"x":87.32},{"n":"Orenburg","c":"Russia","y":51.7667,"x":55.1},{"n":"Shenzhou","c":"China","y":38.0005,"x":115.5541},{"n":"Asansol","c":"India","y":23.6833,"x":86.9667},{"n":"Bacolod","c":"Philippines","y":10.6765,"x":122.9509},{"n":"Akron","c":"United States","y":41.0798,"x":-81.5219},{"n":"New Haven","c":"United States","y":41.3112,"x":-72.9246},{"n":"Zhenzhou","c":"China","y":32.2739,"x":119.1619},{"n":"Surakarta","c":"Indonesia","y":-7.5667,"x":110.8167},{"n":"Jieshou","c":"China","y":33.2605,"x":115.3618},{"n":"Lanxi","c":"China","y":29.2167,"x":119.4722},{"n":"Zahedan","c":"Iran","y":29.4833,"x":60.8667},{"n":"Dangyang","c":"China","y":30.8258,"x":111.791},{"n":"Columbia","c":"United States","y":34.0376,"x":-80.9037},{"n":"Kemerovo","c":"Russia","y":55.3333,"x":86.0667},{"n":"Dresden","c":"Germany","y":51.05,"x":13.74},{"n":"Veracruz","c":"Mexico","y":19.1903,"x":-96.1533},{"n":"Bhavnagar","c":"India","y":21.765,"x":72.1369},{"n":"Luanzhou","c":"China","y":39.7396,"x":118.6978},{"n":"Novokuznetsk","c":"Russia","y":53.75,"x":87.1167},{"n":"Nellore","c":"India","y":14.4333,"x":79.9667},{"n":"Chiclayo","c":"Peru","y":-6.763,"x":-79.8366},{"n":"Palma","c":"Spain","y":39.5667,"x":2.65},{"n":"Al Hudaydah","c":"Yemen","y":14.8022,"x":42.9511},{"n":"Eslamshahr","c":"Iran","y":35.5333,"x":51.2},{"n":"Cabinda","c":"Angola","y":-5.5667,"x":12.2},{"n":"Amravati","c":"India","y":20.9333,"x":77.75},{"n":"Korla","c":"China","y":41.7646,"x":86.1527},{"n":"Huanghua","c":"China","y":38.371,"x":117.3329},{"n":"Londrina","c":"Brazil","y":-23.31,"x":-51.1628},{"n":"Tabuk","c":"Saudi Arabia","y":28.3838,"x":36.555},{"n":"Valledupar","c":"Colombia","y":10.4603,"x":-73.2597},{"n":"Fengcheng","c":"China","y":40.4543,"x":124.0646},{"n":"Ajmer","c":"India","y":26.468,"x":74.639},{"n":"Tinnevelly","c":"India","y":8.7289,"x":77.7081},{"n":"Fuding","c":"China","y":27.2,"x":120.2},{"n":"Maturin","c":"Venezuela","y":9.7457,"x":-63.1832},{"n":"An Nasiriyah","c":"Iraq","y":31.0439,"x":46.2575},{"n":"Al Hillah","c":"Iraq","y":32.4833,"x":44.4333},{"n":"Ibague","c":"Colombia","y":4.4378,"x":-75.2006},{"n":"Hannover","c":"Germany","y":52.3744,"x":9.7386},{"n":"Ryazan","c":"Russia","y":54.6167,"x":39.7167},{"n":"Panshi","c":"China","y":42.9392,"x":126.0561},{"n":"Kassala","c":"Sudan","y":15.45,"x":36.4},{"n":"Ananindeua","c":"Brazil","y":-1.3658,"x":-48.3719},{"n":"Chang'an","c":"China","y":29.4761,"x":113.448},{"n":"Shashi","c":"China","y":30.32,"x":112.23},{"n":"Poznan","c":"Poland","y":52.4,"x":16.9167},{"n":"Aksu","c":"China","y":41.1664,"x":80.25},{"n":"Salta","c":"Argentina","y":-24.7883,"x":-65.4106},{"n":"Astrakhan","c":"Russia","y":46.3333,"x":48.0167},{"n":"Mingguang","c":"China","y":32.7816,"x":117.9899},{"n":"Naberezhnyye Chelny","c":"Russia","y":55.7,"x":52.3333},{"n":"Bikaner","c":"India","y":28.0181,"x":73.3169},{"n":"Agartala","c":"India","y":23.8333,"x":91.2667},{"n":"Xalapa","c":"Mexico","y":19.54,"x":-96.9275},{"n":"Ndola","c":"Zambia","y":-12.9683,"x":28.6337},{"n":"Hamadan","c":"Iran","y":34.8065,"x":48.5162},{"n":"Villavicencio","c":"Colombia","y":4.1425,"x":-73.6294},{"n":"Ailan Mubage","c":"China","y":43.9167,"x":81.3167},{"n":"Ensenada","c":"Mexico","y":31.8578,"x":-116.6058},{"n":"Lyon","c":"France","y":45.76,"x":4.84},{"n":"Bac Ninh","c":"Vietnam","y":21.1861,"x":106.0763},{"n":"Ciudad Apodaca","c":"Mexico","y":25.7833,"x":-100.1833},{"n":"Santa Teresa del Tuy","c":"Venezuela","y":10.2333,"x":-66.65},{"n":"Maipu","c":"Chile","y":-33.5167,"x":-70.7667},{"n":"Penza","c":"Russia","y":53.2,"x":45},{"n":"Heroica Matamoros","c":"Mexico","y":25.8797,"x":-97.5042},{"n":"Port Said","c":"Egypt","y":31.25,"x":32.2833},{"n":"Meknes","c":"Morocco","y":33.8833,"x":-5.55},{"n":"Nuremberg","c":"Germany","y":49.4539,"x":11.0775},{"n":"Pohang","c":"Korea, South","y":36.0322,"x":129.365},{"n":"Anda","c":"China","y":46.4078,"x":125.3252},{"n":"Jinghong","c":"China","y":22.0057,"x":100.7948},{"n":"Utsunomiya","c":"Japan","y":36.55,"x":139.8833},{"n":"Liaoyuan","c":"China","y":42.8976,"x":125.1381},{"n":"Mesa","c":"United States","y":33.4017,"x":-111.718},{"n":"Surrey","c":"Canada","y":49.19,"x":-122.8489},{"n":"Caxias do Sul","c":"Brazil","y":-29.1678,"x":-51.1789},{"n":"Heshan","c":"China","y":22.7697,"x":112.9578},{"n":"Cuautitlan Izcalli","c":"Mexico","y":19.65,"x":-99.25},{"n":"Ujjain","c":"India","y":23.1828,"x":75.7772},{"n":"Jiaji","c":"China","y":19.2431,"x":110.4642},{"n":"Santa Marta","c":"Colombia","y":11.2361,"x":-74.2017},{"n":"Beining","c":"China","y":41.5933,"x":121.7932},{"n":"Hai Duong","c":"Vietnam","y":20.9399,"x":106.3309},{"n":"Carrefour","c":"Haiti","y":18.5333,"x":-72.4},{"n":"Homyel'","c":"Belarus","y":52.4417,"x":30.9833},{"n":"Leicester","c":"United Kingdom","y":52.6333,"x":-1.1333},{"n":"Yanji","c":"China","y":42.9044,"x":129.5067},{"n":"Lipetsk","c":"Russia","y":52.6167,"x":39.6},{"n":"Choloma","c":"Honduras","y":15.6333,"x":-88},{"n":"Ulhasnagar","c":"India","y":19.2167,"x":73.15},{"n":"Encheng","c":"China","y":22.1879,"x":112.3131},{"n":"Muntinlupa City","c":"Philippines","y":14.3833,"x":121.05},{"n":"Linghai","c":"China","y":41.1676,"x":121.3558},{"n":"Aden","c":"Yemen","y":12.8,"x":45.0333},{"n":"Matsuyama","c":"Japan","y":33.8333,"x":132.7667},{"n":"Jhansi","c":"India","y":25.4486,"x":78.5696},{"n":"Kitwe","c":"Zambia","y":-12.8208,"x":28.2119},{"n":"Kashgar","c":"China","y":39.45,"x":75.9833},{"n":"Aba","c":"Nigeria","y":5.1167,"x":7.3667},{"n":"Palm Bay","c":"United States","y":27.955,"x":-80.6627},{"n":"Pingtung","c":"Taiwan","y":22.6761,"x":120.4942},{"n":"Monteria","c":"Colombia","y":8.76,"x":-75.8856},{"n":"Samarkand","c":"Uzbekistan","y":39.6542,"x":66.9597},{"n":"Davangere","c":"India","y":14.4667,"x":75.9167},{"n":"Jammu","c":"India","y":32.7333,"x":74.85},{"n":"Mazatlan","c":"Mexico","y":23.22,"x":-106.42},{"n":"Murcia","c":"Spain","y":37.9861,"x":-1.1303},{"n":"Ile-Ife","c":"Nigeria","y":7.4667,"x":4.5667},{"n":"Kirov","c":"Russia","y":58.6,"x":49.65},{"n":"Qaraghandy","c":"Kazakhstan","y":49.8,"x":73.1167},{"n":"Belas","c":"Angola","y":-8.9983,"x":13.265},{"n":"Mazatan","c":"Mexico","y":29.0167,"x":-110.1333},{"n":"Duisburg","c":"Germany","y":51.4322,"x":6.7611},{"n":"Mykolaiv","c":"Ukraine","y":46.9667,"x":32},{"n":"Provo","c":"United States","y":40.2457,"x":-111.6457},{"n":"Meicheng","c":"China","y":30.6412,"x":116.5689},{"n":"Niteroi","c":"Brazil","y":-22.8833,"x":-43.1036},{"n":"Matsudo","c":"Japan","y":35.7878,"x":139.9031},{"n":"Sukkur","c":"Pakistan","y":27.6995,"x":68.8673},{"n":"Rouen","c":"France","y":49.4428,"x":1.0886},{"n":"Higashi-osaka","c":"Japan","y":34.6794,"x":135.6008},{"n":"Worcester","c":"United States","y":42.2705,"x":-71.8079},{"n":"Hongjiang","c":"China","y":27.1167,"x":109.95},{"n":"Chimbote","c":"Peru","y":-9.0745,"x":-78.5936},{"n":"Ixtapaluca","c":"Mexico","y":19.3186,"x":-98.8822},{"n":"Dengtacun","c":"China","y":41.42,"x":123.33},{"n":"Zhijiang","c":"China","y":30.4271,"x":111.7506},{"n":"Chengjiao","c":"China","y":35.4043,"x":114.0593},{"n":"Beipiao","c":"China","y":41.802,"x":120.7621},{"n":"Murrieta","c":"United States","y":33.572,"x":-117.1909},{"n":"Kota Bharu","c":"Malaysia","y":6.1333,"x":102.25},{"n":"Ciudad Lopez Mateos","c":"Mexico","y":19.55,"x":-99.2833},{"n":"Vinh","c":"Vietnam","y":18.6733,"x":105.6922},{"n":"Tultitlan de Mariano Escobedo","c":"Mexico","y":19.645,"x":-99.1694},{"n":"Duyun","c":"China","y":26.2672,"x":107.5143},{"n":"Kandahar","c":"Afghanistan","y":31.6078,"x":65.7053},{"n":"Nishinomiya-hama","c":"Japan","y":34.7333,"x":135.3333},{"n":"Larkana","c":"Pakistan","y":27.56,"x":68.2264},{"n":"Cheboksary","c":"Russia","y":56.1333,"x":47.25},{"n":"Yuanping","c":"China","y":38.7299,"x":112.7134},{"n":"Port Sudan","c":"Sudan","y":19.6158,"x":37.2164},{"n":"Edinburgh","c":"United Kingdom","y":55.953,"x":-3.189},{"n":"Belgaum","c":"India","y":15.8667,"x":74.5},{"n":"Tula","c":"Russia","y":54.2,"x":37.6167},{"n":"Suez","c":"Egypt","y":29.9667,"x":32.5333},{"n":"Shahe","c":"China","y":36.8622,"x":114.502},{"n":"Yazd","c":"Iran","y":31.8972,"x":54.3678},{"n":"Serra","c":"Brazil","y":-20.1289,"x":-40.3078},{"n":"Nazret","c":"Ethiopia","y":8.55,"x":39.27},{"n":"Greenville","c":"United States","y":34.8353,"x":-82.3647},{"n":"Arak","c":"Iran","y":34.08,"x":49.7},{"n":"San Nicolas de los Garza","c":"Mexico","y":25.75,"x":-100.2833},{"n":"Gulbarga","c":"India","y":17.3333,"x":76.8333},{"n":"Juiz de Fora","c":"Brazil","y":-21.7642,"x":-43.3503},{"n":"Dunhua","c":"China","y":43.3667,"x":128.2333},{"n":"Brookhaven","c":"United States","y":40.8321,"x":-72.9518},{"n":"Az Zarqa'","c":"Jordan","y":32.0833,"x":36.1},{"n":"Americana","c":"Brazil","y":-22.7392,"x":-47.3314},{"n":"Ardabil","c":"Iran","y":38.25,"x":48.3},{"n":"Sylhet","c":"Bangladesh","y":24.9,"x":91.8667},{"n":"Wichita","c":"United States","y":37.6896,"x":-97.3442},{"n":"Toledo","c":"United States","y":41.6639,"x":-83.5822},{"n":"Kaihua","c":"China","y":23.3715,"x":104.2437},{"n":"Caerdydd","c":"United Kingdom","y":51.4833,"x":-3.1833},{"n":"Jamnagar","c":"India","y":22.47,"x":70.07},{"n":"Dhulia","c":"India","y":20.9,"x":74.7833},{"n":"Nampula","c":"Mozambique","y":-15.1167,"x":39.2667},{"n":"Gaya","c":"India","y":24.75,"x":85.0167},{"n":"Florianopolis","c":"Brazil","y":-27.5933,"x":-48.553},{"n":"Chiniot","c":"Pakistan","y":31.7167,"x":72.9833},{"n":"Jiannan","c":"China","y":31.3446,"x":104.1994},{"n":"Oita","c":"Japan","y":33.2333,"x":131.6067},{"n":"Wuhai","c":"China","y":39.6708,"x":106.8114},{"n":"Kaliningrad","c":"Russia","y":54.7167,"x":20.5},{"n":"Nangong","c":"China","y":37.3606,"x":115.3803},{"n":"Staten Island","c":"United States","y":40.5834,"x":-74.1496},{"n":"San Juan","c":"Argentina","y":-31.5375,"x":-68.5364},{"n":"Macapa","c":"Brazil","y":0.033,"x":-51.0653},{"n":"Shekhupura","c":"Pakistan","y":31.7083,"x":74},{"n":"Des Moines","c":"United States","y":41.5725,"x":-93.6105},{"n":"Piura","c":"Peru","y":-5.2008,"x":-80.6253},{"n":"Jiaojiangcun","c":"China","y":28.6804,"x":121.45},{"n":"Laohekou","c":"China","y":32.3849,"x":111.6695},{"n":"Beian","c":"China","y":48.2395,"x":126.5037},{"n":"Fujin","c":"China","y":47.2489,"x":132.0341},{"n":"Celaya","c":"Mexico","y":20.5222,"x":-100.8122},{"n":"Xiaoyi","c":"China","y":37.1449,"x":111.7718},{"n":"Strasbourg","c":"France","y":48.5833,"x":7.7458},{"n":"Lanus","c":"Argentina","y":-34.7,"x":-58.4},{"n":"Qingzhen","c":"China","y":26.5555,"x":106.4646},{"n":"Jiangshan","c":"China","y":28.7412,"x":118.6225},{"n":"Ba`qubah","c":"Iraq","y":33.7447,"x":44.6436},{"n":"Tamale","c":"Ghana","y":9.4075,"x":-0.8533},{"n":"Gdansk","c":"Poland","y":54.3667,"x":18.6333},{"n":"Manado","c":"Indonesia","y":1.4931,"x":124.8413},{"n":"Jinchang","c":"China","y":38.5168,"x":102.1866},{"n":"Kanazawa","c":"Japan","y":36.6,"x":136.6167},{"n":"Calabar","c":"Nigeria","y":4.95,"x":8.325},{"n":"Long Beach","c":"United States","y":33.7981,"x":-118.1675},{"n":"Malatya","c":"Turkey","y":38.3554,"x":38.3337},{"n":"Hue","c":"Vietnam","y":16.4637,"x":107.5908},{"n":"Cranbourne","c":"Australia","y":-38.0996,"x":145.2834},{"n":"Jalgaon","c":"India","y":21.0167,"x":75.5667},{"n":"Port St. Lucie","c":"United States","y":27.2796,"x":-80.3883},{"n":"Maua","c":"Brazil","y":-23.6678,"x":-46.4608},{"n":"Fukuyama","c":"Japan","y":34.4858,"x":133.3625},{"n":"Tel Aviv-Yafo","c":"Israel","y":32.08,"x":34.78},{"n":"Xicheng","c":"China","y":23.3629,"x":103.1545},{"n":"Marikina City","c":"Philippines","y":14.65,"x":121.1},{"n":"Pyeongtaek","c":"Korea, South","y":36.9947,"x":127.0889},{"n":"Kurnool","c":"India","y":15.8222,"x":78.035},{"n":"City of Calamba","c":"Philippines","y":14.2167,"x":121.1667},{"n":"Denton","c":"United States","y":33.2176,"x":-97.1419},{"n":"Ar Ramadi","c":"Iraq","y":33.4258,"x":43.2992},{"n":"Melaka","c":"Malaysia","y":2.1889,"x":102.2511},{"n":"Jian'ou","c":"China","y":27.0387,"x":118.3215},{"n":"Huadian","c":"China","y":42.9688,"x":126.7388},{"n":"Taoyuan District","c":"Taiwan","y":24.9889,"x":121.3111},{"n":"Iloilo","c":"Philippines","y":10.7167,"x":122.5667},{"n":"Kota Kinabalu","c":"Malaysia","y":5.975,"x":116.0725},{"n":"Minzhu","c":"China","y":43.7192,"x":127.337},{"n":"Rajshahi","c":"Bangladesh","y":24.3667,"x":88.6},{"n":"Tanta","c":"Egypt","y":30.7833,"x":31},{"n":"Balashikha","c":"Russia","y":55.8,"x":37.95},{"n":"Udaipur","c":"India","y":24.5833,"x":73.6833},{"n":"Kursk","c":"Russia","y":51.7372,"x":36.1872},{"n":"Mariupol","c":"Ukraine","y":47.1306,"x":37.5639},{"n":"Bukavu","c":"Congo (Kinshasa)","y":-2.5,"x":28.8667},{"n":"Hsinchu","c":"Taiwan","y":24.8047,"x":120.9714},{"n":"Barcelona","c":"Venezuela","y":10.1333,"x":-64.6833},{"n":"Constantine","c":"Algeria","y":36.365,"x":6.6147},{"n":"Tanbei","c":"China","y":35.0907,"x":112.9317},{"n":"Ado-Ekiti","c":"Nigeria","y":7.6167,"x":5.2167},{"n":"Batman","c":"Turkey","y":37.8833,"x":41.1333},{"n":"Pasay City","c":"Philippines","y":14.55,"x":121},{"n":"Madison","c":"United States","y":43.0826,"x":-89.3931},{"n":"Baisha","c":"China","y":29.4774,"x":119.2853},{"n":"Betim","c":"Brazil","y":-19.9678,"x":-44.1978},{"n":"Bellary","c":"India","y":15.15,"x":76.915},{"n":"Santiago de Cuba","c":"Cuba","y":20.0283,"x":-75.8206},{"n":"Yongji","c":"China","y":34.867,"x":110.4417},{"n":"Reno","c":"United States","y":39.5497,"x":-119.8483},{"n":"Danjiangkou","c":"China","y":32.5408,"x":111.5098},{"n":"Kahramanmaras","c":"Turkey","y":37.5875,"x":36.9453},{"n":"Sao Jose do Rio Preto","c":"Brazil","y":-20.82,"x":-49.3789},{"n":"Andijon","c":"Uzbekistan","y":40.7,"x":72.35},{"n":"Harrisburg","c":"United States","y":40.2752,"x":-76.8843},{"n":"Nancy","c":"France","y":48.6936,"x":6.1846},{"n":"Puerto Plata","c":"Dominican Republic","y":19.7958,"x":-70.6944},{"n":"Machida","c":"Japan","y":35.5486,"x":139.4467},{"n":"Ning'an","c":"China","y":44.3429,"x":129.4621},{"n":"Beira","c":"Mozambique","y":-19.8333,"x":34.85},{"n":"Little Rock","c":"United States","y":34.7256,"x":-92.3576},{"n":"San Cristobal","c":"Venezuela","y":7.7714,"x":-72.2261},{"n":"Zurich","c":"Switzerland","y":47.3786,"x":8.54},{"n":"Zhangjiakou Shi Xuanhua Qu","c":"China","y":40.5944,"x":115.0243},{"n":"Sunch'on","c":"Korea, North","y":39.4167,"x":125.9333},{"n":"Diadema","c":"Brazil","y":-23.6858,"x":-46.6228},{"n":"Guangming","c":"China","y":45.3357,"x":122.7765},{"n":"Sangli","c":"India","y":16.8667,"x":74.5667},{"n":"Tuticorin","c":"India","y":8.7833,"x":78.1333},{"n":"Herat","c":"Afghanistan","y":34.3738,"x":62.1792},{"n":"Kupang","c":"Indonesia","y":-10.1633,"x":123.5778},{"n":"Jeju","c":"Korea, South","y":33.5097,"x":126.5219},{"n":"Bandar `Abbas","c":"Iran","y":27.2,"x":56.25},{"n":"Santos","c":"Brazil","y":-23.9608,"x":-46.3339},{"n":"Manizales","c":"Colombia","y":5.0661,"x":-75.4847},{"n":"Stavropol","c":"Russia","y":45.05,"x":41.9833},{"n":"Katsina","c":"Nigeria","y":12.9889,"x":7.6008},{"n":"Yogyakarta","c":"Indonesia","y":-7.8014,"x":110.3644},{"n":"Calicut","c":"India","y":11.25,"x":75.7667},{"n":"Zanjan","c":"Iran","y":36.6667,"x":48.4833},{"n":"Welkom","c":"South Africa","y":-27.9831,"x":26.7208},{"n":"Ulan-Ude","c":"Russia","y":51.8272,"x":107.6064},{"n":"Oakland","c":"United States","y":37.7903,"x":-122.2165},{"n":"Mazar-e Sharif","c":"Afghanistan","y":36.7,"x":67.1167},{"n":"Kashan","c":"Iran","y":33.9833,"x":51.4333},{"n":"Kenitra","c":"Morocco","y":34.25,"x":-6.5833},{"n":"Uyo","c":"Nigeria","y":5.05,"x":7.9333},{"n":"Maringa","c":"Brazil","y":-23.425,"x":-51.9389},{"n":"Khamis Mushayt","c":"Saudi Arabia","y":18.3,"x":42.7333},{"n":"Masan","c":"Korea, South","y":35.1833,"x":128.55},{"n":"Cusco","c":"Peru","y":-13.5183,"x":-71.9781},{"n":"Sevastopol","c":"Ukraine","y":44.6,"x":33.5333},{"n":"Mandaluyong City","c":"Philippines","y":14.5833,"x":121.0333},{"n":"Porto Velho","c":"Brazil","y":-8.7619,"x":-63.9039},{"n":"Florencio Varela","c":"Argentina","y":-34.8167,"x":-58.2833},{"n":"Akola","c":"India","y":20.7333,"x":77},{"n":"Yan'an Beilu","c":"China","y":44.0222,"x":87.2961},{"n":"Agadir","c":"Morocco","y":30.4167,"x":-9.5833},{"n":"Mogi das Cruzes","c":"Brazil","y":-23.5228,"x":-46.1931},{"n":"Durham","c":"United States","y":35.9794,"x":-78.9031},{"n":"Likasi","c":"Congo (Kinshasa)","y":-10.9833,"x":26.7333},{"n":"Buenaventura","c":"Colombia","y":3.8772,"x":-77.0267},{"n":"Laval","c":"Canada","y":45.5833,"x":-73.75},{"n":"Toyota","c":"Japan","y":35.0833,"x":137.1567},{"n":"Winston-Salem","c":"United States","y":36.1029,"x":-80.2611},{"n":"Uijeongbu","c":"Korea, South","y":37.7486,"x":127.0389},{"n":"Tver","c":"Russia","y":56.8578,"x":35.9219},{"n":"Elazig","c":"Turkey","y":38.6667,"x":39.2167},{"n":"Akure","c":"Nigeria","y":7.25,"x":5.195},{"n":"Hpa-An","c":"Myanmar","y":16.8906,"x":97.6333},{"n":"Bonita Springs","c":"United States","y":26.3559,"x":-81.7861},{"n":"Mishan","c":"China","y":45.542,"x":131.8666},{"n":"Hailin","c":"China","y":44.5735,"x":129.3825},{"n":"Seremban","c":"Malaysia","y":2.7297,"x":101.9381},{"n":"Lecheng","c":"China","y":25.1307,"x":113.3472},{"n":"Zhengjiatun","c":"China","y":43.513,"x":123.5003},{"n":"Luhansk","c":"Ukraine","y":48.5833,"x":39.3333},{"n":"Pencheng","c":"China","y":29.6792,"x":115.6611},{"n":"Magnitogorsk","c":"Russia","y":53.3833,"x":59.0333},{"n":"Takamatsu","c":"Japan","y":34.35,"x":134.05},{"n":"Angeles City","c":"Philippines","y":15.1472,"x":120.5847},{"n":"El Obeid","c":"Sudan","y":13.1833,"x":30.2167},{"n":"Dalai","c":"China","y":45.505,"x":124.2863},{"n":"Xingren","c":"China","y":25.4352,"x":105.1907},{"n":"Kolwezi","c":"Congo (Kinshasa)","y":-10.7167,"x":25.4667},{"n":"Wenlan","c":"China","y":23.3689,"x":103.3881},{"n":"Indio","c":"United States","y":33.7346,"x":-116.2346},{"n":"Palm Coast","c":"United States","y":29.5392,"x":-81.246},{"n":"Arusha","c":"Tanzania","y":-3.3667,"x":36.6833},{"n":"Fenyang","c":"China","y":37.2652,"x":111.7793},{"n":"Paju","c":"Korea, South","y":37.8328,"x":126.8169},{"n":"Oujda-Angad","c":"Morocco","y":34.69,"x":-1.91},{"n":"Mataram","c":"Indonesia","y":-8.5833,"x":116.1167},{"n":"Chattanooga","c":"United States","y":35.0657,"x":-85.2488},{"n":"Lapu-Lapu City","c":"Philippines","y":10.3127,"x":123.9488},{"n":"Jhang City","c":"Pakistan","y":31.2681,"x":72.3181},{"n":"Nagqu","c":"China","y":31.4766,"x":92.0569},{"n":"Kisumu","c":"Kenya","y":-0.1,"x":34.75},{"n":"Jayapura","c":"Indonesia","y":-2.5333,"x":140.7167},{"n":"Montes Claros","c":"Brazil","y":-16.7322,"x":-43.8636},{"n":"Rio Branco","c":"Brazil","y":-9.9781,"x":-67.8117},{"n":"Toyama","c":"Japan","y":36.7,"x":137.22},{"n":"Fangting","c":"China","y":31.1282,"x":104.1695},{"n":"Spokane","c":"United States","y":47.6671,"x":-117.433},{"n":"Sochi","c":"Russia","y":43.5853,"x":39.7203},{"n":"Bhagalpur","c":"India","y":25.25,"x":87.0167},{"n":"Ivanovo","c":"Russia","y":57,"x":41},{"n":"Osogbo","c":"Nigeria","y":7.7667,"x":4.5667},{"n":"Imus","c":"Philippines","y":14.4297,"x":120.9367},{"n":"Ciudad Obregon","c":"Mexico","y":27.4939,"x":-109.9389},{"n":"Turkmenabat","c":"Turkmenistan","y":39.1,"x":63.5667},{"n":"Zaria","c":"Nigeria","y":11.0667,"x":7.7},{"n":"Namangan","c":"Uzbekistan","y":40.9953,"x":71.6725},{"n":"Bryansk","c":"Russia","y":53.25,"x":34.3667},{"n":"Taiping","c":"China","y":32.0691,"x":108.0351},{"n":"Maracay","c":"Venezuela","y":10.2469,"x":-67.5958},{"n":"Jiexiu","c":"China","y":37.0282,"x":111.9103},{"n":"Mbale","c":"Uganda","y":1.0806,"x":34.175},{"n":"Taraz","c":"Kazakhstan","y":42.8833,"x":71.3667},{"n":"Asyut","c":"Egypt","y":27.1869,"x":31.1714},{"n":"Santa Fe","c":"Argentina","y":-31.6333,"x":-60.7},{"n":"Campina Grande","c":"Brazil","y":-7.2306,"x":-35.8811},{"n":"Nagasaki","c":"Japan","y":32.7833,"x":129.8667},{"n":"Szczecin","c":"Poland","y":53.4247,"x":14.5553},{"n":"Ghulja","c":"China","y":43.9,"x":81.35},{"n":"Syracuse","c":"United States","y":43.0409,"x":-76.1438},{"n":"Carapicuiba","c":"Brazil","y":-23.5228,"x":-46.8358},{"n":"Quilon","c":"India","y":8.8853,"x":76.5864},{"n":"Jundiai","c":"Brazil","y":-23.1864,"x":-46.8842},{"n":"Gifu","c":"Japan","y":35.4167,"x":136.7667},{"n":"Lancaster","c":"United States","y":40.0421,"x":-76.3012},{"n":"Eindhoven","c":"Netherlands","y":51.4408,"x":5.4778},{"n":"Sikar","c":"India","y":27.6119,"x":75.1397},{"n":"Tumkur","c":"India","y":13.33,"x":77.1},{"n":"Jiangjiafan","c":"China","y":31.0304,"x":112.1},{"n":"Dera Ghazi Khan","c":"Pakistan","y":30.05,"x":70.6333},{"n":"Arlington","c":"United States","y":32.6998,"x":-97.125},{"n":"Miyazaki","c":"Japan","y":31.9167,"x":131.4167},{"n":"Stockton","c":"United States","y":37.9765,"x":-121.3109},{"n":"Bhatpara","c":"India","y":22.8667,"x":88.4167},{"n":"Sandakan","c":"Malaysia","y":5.8388,"x":118.1173},{"n":"Hejin","c":"China","y":35.5914,"x":110.706},{"n":"Thanh Hoa","c":"Vietnam","y":19.8075,"x":105.7764},{"n":"Muzaffarnagar","c":"India","y":29.4708,"x":77.7033},{"n":"Poughkeepsie","c":"United States","y":41.6949,"x":-73.921},{"n":"Campos","c":"Brazil","y":-21.7523,"x":-41.3304},{"n":"Metz","c":"France","y":49.1203,"x":6.1778},{"n":"Nha Trang","c":"Vietnam","y":12.2495,"x":109.1908},{"n":"Belgorod","c":"Russia","y":50.6,"x":36.6},{"n":"Yola","c":"Nigeria","y":9.2,"x":12.4833},{"n":"Lobito","c":"Angola","y":-12.3597,"x":13.5308},{"n":"Saurimo","c":"Angola","y":-9.6589,"x":20.3934},{"n":"Olinda","c":"Brazil","y":-8.0089,"x":-34.855},{"n":"Bologna","c":"Italy","y":44.4939,"x":11.3428},{"n":"Ad Diwaniyah","c":"Iraq","y":31.9892,"x":44.9247},{"n":"Gujrat","c":"Pakistan","y":32.5736,"x":74.0789},{"n":"Hancheng","c":"China","y":35.4603,"x":110.4292},{"n":"Fuyu","c":"China","y":45.1804,"x":124.82},{"n":"Karamay","c":"China","y":45.5928,"x":84.8711},{"n":"Kakinada","c":"India","y":16.9333,"x":82.2167},{"n":"Augusta","c":"United States","y":33.3645,"x":-82.0708},{"n":"Bhilwara","c":"India","y":25.35,"x":74.6333},{"n":"Tieli","c":"China","y":46.9804,"x":128.045},{"n":"Cilegon","c":"Indonesia","y":-6.0027,"x":106.0112},{"n":"Nizamabad","c":"India","y":18.6704,"x":78.1},{"n":"Boise","c":"United States","y":43.6007,"x":-116.2312},{"n":"Tonala","c":"Mexico","y":20.6167,"x":-103.2333},{"n":"Mwanza","c":"Tanzania","y":-2.5167,"x":32.9},{"n":"Aqtobe","c":"Kazakhstan","y":50.3,"x":57.1667},{"n":"Oxnard","c":"United States","y":34.1963,"x":-119.1815},{"n":"Tetouan","c":"Morocco","y":35.5667,"x":-5.3667},{"n":"Okazaki","c":"Japan","y":34.95,"x":137.1667},{"n":"Cariacica","c":"Brazil","y":-20.2639,"x":-40.42},{"n":"Ha'il","c":"Saudi Arabia","y":27.5236,"x":41.7001},{"n":"Las Palmas","c":"Spain","y":28.1272,"x":-15.4314},{"n":"Yidu","c":"China","y":30.388,"x":111.4505},{"n":"Lianzhou","c":"China","y":24.7868,"x":112.3735},{"n":"Florence","c":"Italy","y":43.7714,"x":11.2542},{"n":"Scranton","c":"United States","y":41.4044,"x":-75.6649},{"n":"Brno","c":"Czechia","y":49.1953,"x":16.6083},{"n":"London","c":"Canada","y":42.9836,"x":-81.2497},{"n":"Modesto","c":"United States","y":37.6374,"x":-121.0028},{"n":"Kissimmee","c":"United States","y":28.3042,"x":-81.4164},{"n":"Pasto","c":"Colombia","y":1.2136,"x":-77.2811},{"n":"Ichinomiya","c":"Japan","y":35.3039,"x":136.8031},{"n":"Qazvin","c":"Iran","y":36.2688,"x":50.0041},{"n":"Irapuato","c":"Mexico","y":20.6667,"x":-101.35},{"n":"Novi Sad","c":"Serbia","y":45.2644,"x":19.8317},{"n":"Shihezi","c":"China","y":44.3,"x":86.0333},{"n":"Shache","c":"China","y":38.4261,"x":77.25},{"n":"Panihati","c":"India","y":22.69,"x":88.37},{"n":"Huancayo","c":"Peru","y":-12.0667,"x":-75.2167},{"n":"Aurora","c":"United States","y":39.7087,"x":-104.7273},{"n":"Malabon","c":"Philippines","y":14.6625,"x":120.9567},{"n":"Petion-Ville","c":"Haiti","y":18.5098,"x":-72.2856},{"n":"Sintra","c":"Portugal","y":38.7974,"x":-9.3904},{"n":"Parbhani","c":"India","y":19.2704,"x":76.76},{"n":"Usulutan","c":"El Salvador","y":13.35,"x":-88.45},{"n":"Youngstown","c":"United States","y":41.0993,"x":-80.6463},{"n":"Christchurch","c":"New Zealand","y":-43.5309,"x":172.6365},{"n":"Hatay","c":"Turkey","y":36.2,"x":36.15},{"n":"Iquitos","c":"Peru","y":-3.7333,"x":-73.25},{"n":"Sivas","c":"Turkey","y":39.75,"x":37.0167},{"n":"Helixi","c":"China","y":30.6267,"x":118.9861},{"n":"A Coruna","c":"Spain","y":43.3713,"x":-8.4188},{"n":"Manukau City","c":"New Zealand","y":-37,"x":174.885},{"n":"Stoke-on-Trent","c":"United Kingdom","y":53,"x":-2.1833},{"n":"Cumana","c":"Venezuela","y":10.45,"x":-64.1667},{"n":"Vinnytsia","c":"Ukraine","y":49.2372,"x":28.4672},{"n":"Rohtak","c":"India","y":28.9,"x":76.5667},{"n":"Latur","c":"India","y":18.4004,"x":76.57},{"n":"Bello","c":"Colombia","y":6.3319,"x":-75.5581},{"n":"Sanandaj","c":"Iran","y":35.3097,"x":46.9989},{"n":"Nuevo Laredo","c":"Mexico","y":27.4861,"x":-99.5069},{"n":"Ambon","c":"Indonesia","y":-3.705,"x":128.17},{"n":"Mandaue City","c":"Philippines","y":10.3333,"x":123.9333},{"n":"Keelung","c":"Taiwan","y":25.1283,"x":121.7419},{"n":"Toyohashi","c":"Japan","y":34.7667,"x":137.3833},{"n":"La Florida","c":"Chile","y":-33.55,"x":-70.5667},{"n":"Varna","c":"Bulgaria","y":43.2114,"x":27.9111},{"n":"Lengshuijiang","c":"China","y":27.6858,"x":111.4279},{"n":"Anguo","c":"China","y":38.4177,"x":115.3204},{"n":"Rajapalaiyam","c":"India","y":9.4204,"x":77.58},{"n":"Rodriguez","c":"Philippines","y":14.7167,"x":121.1167},{"n":"Madan","c":"Iran","y":30.3307,"x":48.2797},{"n":"Az Zubayr","c":"Iraq","y":30.3892,"x":47.7081},{"n":"Al Qatif","c":"Saudi Arabia","y":26.5196,"x":50.0115},{"n":"Cuernavaca","c":"Mexico","y":18.9186,"x":-99.2342},{"n":"Nicolas Romero","c":"Mexico","y":19.5833,"x":-99.3667},{"n":"Huichang","c":"China","y":34.9136,"x":112.7852},{"n":"Vitsyebsk","c":"Belarus","y":55.1833,"x":30.1667},{"n":"Nagano","c":"Japan","y":36.6486,"x":138.1928},{"n":"Bauru","c":"Brazil","y":-22.3147,"x":-49.0606},{"n":"Yanjiao","c":"China","y":39.9432,"x":116.8036},{"n":"Bochum","c":"Germany","y":51.4833,"x":7.2167},{"n":"Anapolis","c":"Brazil","y":-16.3269,"x":-48.9528},{"n":"Coventry","c":"United Kingdom","y":52.4081,"x":-1.5106},{"n":"Zalantun","c":"China","y":48.0033,"x":122.7365},{"n":"Tecamac","c":"Mexico","y":19.7131,"x":-98.9683},{"n":"Ciudad General Escobedo","c":"Mexico","y":25.7933,"x":-100.1583},{"n":"Wonsan","c":"Korea, North","y":39.1475,"x":127.4461},{"n":"Kocaeli","c":"Turkey","y":40.7656,"x":29.9406},{"n":"Bengkulu","c":"Indonesia","y":-3.7956,"x":102.2592},{"n":"Shuanghejiedao","c":"China","y":30.3866,"x":106.7756},{"n":"Surgut","c":"Russia","y":61.25,"x":73.4333},{"n":"Bobo-Dioulasso","c":"Burkina Faso","y":11.1833,"x":-4.2833},{"n":"Umuahia","c":"Nigeria","y":5.5333,"x":7.4833},{"n":"Gedaref","c":"Sudan","y":14.0333,"x":35.3833},{"n":"Palu","c":"Indonesia","y":-0.895,"x":119.8594},{"n":"Santa Rosa","c":"Philippines","y":14.3167,"x":121.1167},{"n":"Pokhara","c":"Nepal","y":28.2097,"x":83.9853},{"n":"Mahilyow","c":"Belarus","y":53.9089,"x":30.343},{"n":"Wudalianchi","c":"China","y":48.6433,"x":126.1408},{"n":"Sungai Petani","c":"Malaysia","y":5.65,"x":100.48},{"n":"Nam Dinh","c":"Vietnam","y":20.42,"x":106.1683},{"n":"Sinuiju","c":"Korea, North","y":40.1,"x":124.4},{"n":"Vitoria","c":"Brazil","y":-20.3189,"x":-40.3378},{"n":"Hrodna","c":"Belarus","y":53.6667,"x":23.8167},{"n":"Vladimir","c":"Russia","y":56.1286,"x":40.4058},{"n":"Bilbao","c":"Spain","y":43.2569,"x":-2.9236},{"n":"Sao Vicente","c":"Brazil","y":-23.9633,"x":-46.3922},{"n":"Cubal","c":"Angola","y":-13.0333,"x":14.2333},{"n":"Yong'an","c":"China","y":25.9733,"x":117.3593},{"n":"Itaquaquecetuba","c":"Brazil","y":-23.4864,"x":-46.3486},{"n":"Wuppertal","c":"Germany","y":51.2667,"x":7.1833},{"n":"Minatitlan","c":"Mexico","y":17.9833,"x":-94.55},{"n":"Nizhniy Tagil","c":"Russia","y":57.9167,"x":59.9667},{"n":"Ponta Grossa","c":"Brazil","y":-25.095,"x":-50.1619},{"n":"Hongzhai","c":"China","y":35.0476,"x":104.6394},{"n":"Wakayama","c":"Japan","y":34.2333,"x":135.1667},{"n":"Pavlodar","c":"Kazakhstan","y":52.3156,"x":76.9564},{"n":"Gimpo","c":"Korea, South","y":37.6236,"x":126.7142},{"n":"Rahimyar Khan","c":"Pakistan","y":28.4202,"x":70.2952},{"n":"Nara","c":"Japan","y":34.6833,"x":135.7833},{"n":"Van","c":"Turkey","y":38.5019,"x":43.4167},{"n":"Corrientes","c":"Argentina","y":-27.4833,"x":-58.8167},{"n":"San Pedro","c":"Philippines","y":14.3583,"x":121.0583},{"n":"Neiva","c":"Colombia","y":2.9275,"x":-75.2875},{"n":"Arkhangelsk","c":"Russia","y":64.55,"x":40.5333},{"n":"Koshigaya","c":"Japan","y":35.8911,"x":139.7908},{"n":"Cabimas","c":"Venezuela","y":10.4,"x":-71.4333},{"n":"Yakeshi","c":"China","y":49.2842,"x":120.7283},{"n":"Baguio City","c":"Philippines","y":16.4152,"x":120.5956},{"n":"Ahmadnagar","c":"India","y":19.0833,"x":74.7333},{"n":"Fayetteville","c":"United States","y":36.0713,"x":-94.166},{"n":"Canoas","c":"Brazil","y":-29.92,"x":-51.18},{"n":"Holguin","c":"Cuba","y":20.8872,"x":-76.2631},{"n":"Qoqon","c":"Uzbekistan","y":40.5404,"x":70.94},{"n":"Anaheim","c":"United States","y":33.839,"x":-117.8572},{"n":"Yingmen","c":"China","y":39.83,"x":97.73},{"n":"Piracicaba","c":"Brazil","y":-22.725,"x":-47.6489},{"n":"Bydgoszcz","c":"Poland","y":53.1167,"x":18},{"n":"Antofagasta","c":"Chile","y":-23.6464,"x":-70.398},{"n":"Khorramabad","c":"Iran","y":33.4667,"x":48.35},{"n":"Rajahmundry","c":"India","y":16.9833,"x":81.7833},{"n":"Chita","c":"Russia","y":52.0333,"x":113.5},{"n":"Caruaru","c":"Brazil","y":-8.2828,"x":-35.9758},{"n":"Makiivka","c":"Ukraine","y":48.0556,"x":37.9611},{"n":"Chitungwiza","c":"Zimbabwe","y":-18,"x":31.1},{"n":"Pensacola","c":"United States","y":30.4427,"x":-87.1886},{"n":"Victorville","c":"United States","y":34.5277,"x":-117.3536},{"n":"Tanch'on","c":"Korea, North","y":40.458,"x":128.911},{"n":"Tokorozawa","c":"Japan","y":35.7994,"x":139.4689},{"n":"Sumqayit","c":"Azerbaijan","y":40.5917,"x":49.6397},{"n":"Kusti","c":"Sudan","y":13.17,"x":32.66},{"n":"Al `Amarah","c":"Iraq","y":31.8416,"x":47.1512},{"n":"Cuddapah","c":"India","y":14.4667,"x":78.8167},{"n":"Simferopol","c":"Ukraine","y":44.9484,"x":34.1},{"n":"Plovdiv","c":"Bulgaria","y":42.1433,"x":24.7489},{"n":"Tarlac City","c":"Philippines","y":15.4802,"x":120.5979},{"n":"Otsu","c":"Japan","y":35.0167,"x":135.85},{"n":"Pelotas","c":"Brazil","y":-31.7719,"x":-52.3428},{"n":"Greensboro","c":"United States","y":36.0956,"x":-79.8269},{"n":"Iligan","c":"Philippines","y":8.2333,"x":124.25},{"n":"East London","c":"South Africa","y":-33.0153,"x":27.9116},{"n":"Franca","c":"Brazil","y":-20.5389,"x":-47.4008},{"n":"Brest","c":"Belarus","y":52.0847,"x":23.6569},{"n":"Kaluga","c":"Russia","y":54.5333,"x":36.2667},{"n":"Yeosu","c":"Korea, South","y":34.7368,"x":127.7458},{"n":"Corpus Christi","c":"United States","y":27.726,"x":-97.3755},{"n":"Muzaffarpur","c":"India","y":26.12,"x":85.3833},{"n":"Lublin","c":"Poland","y":51.2333,"x":22.5667},{"n":"Lianran","c":"China","y":24.9211,"x":102.4778},{"n":"Alwar","c":"India","y":27.5667,"x":76.6167},{"n":"Baishan","c":"China","y":41.9377,"x":126.4179},{"n":"Kawagoe","c":"Japan","y":35.9251,"x":139.4858},{"n":"Farg`ona","c":"Uzbekistan","y":40.3864,"x":71.7864},{"n":"Tamuramachi-moriyama","c":"Japan","y":37.3252,"x":140.4134},{"n":"Brahmapur","c":"India","y":19.32,"x":84.8},{"n":"Buon Ma Thuot","c":"Vietnam","y":12.6667,"x":108.05},{"n":"Binan","c":"Philippines","y":14.3333,"x":121.0833},{"n":"Semey","c":"Kazakhstan","y":50.4111,"x":80.2275},{"n":"Tarsus","c":"Turkey","y":36.9167,"x":34.9},{"n":"Alicante","c":"Spain","y":38.3453,"x":-0.4831},{"n":"Randburg","c":"South Africa","y":-26.0936,"x":28.0064},{"n":"Tepic","c":"Mexico","y":21.5083,"x":-104.8931},{"n":"Jitpur","c":"Nepal","y":27.6666,"x":85.3333},{"n":"Kaesong","c":"Korea, North","y":37.964,"x":126.5644},{"n":"Beni","c":"Congo (Kinshasa)","y":0.5,"x":29.4667},{"n":"Petrolina","c":"Brazil","y":-9.3928,"x":-40.5078},{"n":"Chinju","c":"Korea, South","y":35.1928,"x":128.0847},{"n":"Tangdong","c":"China","y":25.9755,"x":113.2302},{"n":"Butuan","c":"Philippines","y":8.9534,"x":125.5288},{"n":"Reading","c":"United Kingdom","y":51.4542,"x":-0.9731},{"n":"Uberaba","c":"Brazil","y":-19.7478,"x":-47.9319},{"n":"Belfast","c":"United Kingdom","y":54.5964,"x":-5.93},{"n":"Iwaki","c":"Japan","y":37.0333,"x":140.8833},{"n":"Blida","c":"Algeria","y":36.4722,"x":2.8333},{"n":"Hangu","c":"China","y":39.232,"x":117.777},{"n":"Yingzhong","c":"China","y":32.2381,"x":119.8133},{"n":"Vina del Mar","c":"Chile","y":-33.0245,"x":-71.5518},{"n":"Bielefeld","c":"Germany","y":52.0167,"x":8.5333},{"n":"Cuenca","c":"Ecuador","y":-2.8974,"x":-79.0045},{"n":"Fort Wayne","c":"United States","y":41.0886,"x":-85.1437},{"n":"Lipa City","c":"Philippines","y":13.9411,"x":121.1622},{"n":"Wad Medani","c":"Sudan","y":14.4,"x":33.51},{"n":"Ribeirao das Neves","c":"Brazil","y":-19.7669,"x":-44.0869},{"n":"Kamarhati","c":"India","y":22.67,"x":88.37},{"n":"Maebashi","c":"Japan","y":36.3833,"x":139.0667},{"n":"Thessaloniki","c":"Greece","y":40.6403,"x":22.9356},{"n":"Ganca","c":"Azerbaijan","y":40.6828,"x":46.3606},{"n":"Bilaspur","c":"India","y":22.15,"x":82.0167},{"n":"Santa Ana","c":"United States","y":33.7366,"x":-117.8819},{"n":"Mymensingh","c":"Bangladesh","y":24.7504,"x":90.38},{"n":"Al Fayyum","c":"Egypt","y":29.3,"x":30.8333},{"n":"Flint","c":"United States","y":43.0235,"x":-83.6922},{"n":"Kendari","c":"Indonesia","y":-3.9675,"x":122.5947},{"n":"Balikesir","c":"Turkey","y":39.6511,"x":27.8842},{"n":"Az Zaqaziq","c":"Egypt","y":30.5667,"x":31.5},{"n":"Thai Nguyen","c":"Vietnam","y":21.6,"x":105.85},{"n":"Smolensk","c":"Russia","y":54.7828,"x":32.0453},{"n":"Asahikawa","c":"Japan","y":43.7706,"x":142.365},{"n":"Islip","c":"United States","y":40.7384,"x":-73.1887},{"n":"Wonju","c":"Korea, South","y":37.3417,"x":127.9208},{"n":"Dahuk","c":"Iraq","y":36.85,"x":42.9833},{"n":"Batangas","c":"Philippines","y":13.75,"x":121.05},{"n":"Mathura","c":"India","y":27.4833,"x":77.6833},{"n":"Barishal","c":"Bangladesh","y":22.7,"x":90.3667},{"n":"Bamiantong","c":"China","y":44.9164,"x":130.5212},{"n":"Patiala","c":"India","y":30.3204,"x":76.385},{"n":"Cainta","c":"Philippines","y":14.5667,"x":121.1167},{"n":"Bonn","c":"Germany","y":50.7339,"x":7.0997},{"n":"Sao Jose dos Pinhais","c":"Brazil","y":-25.535,"x":-49.2058},{"n":"Vung Tau","c":"Vietnam","y":10.4042,"x":107.1417},{"n":"Markham","c":"Canada","y":43.8767,"x":-79.2633},{"n":"Saugor","c":"India","y":23.8504,"x":78.75},{"n":"Malmo","c":"Sweden","y":55.5932,"x":13.0214},{"n":"Roodepoort","c":"South Africa","y":-26.1625,"x":27.8725},{"n":"Gomez Palacio","c":"Mexico","y":25.5611,"x":-103.4983},{"n":"Volzhskiy","c":"Russia","y":48.7833,"x":44.7667},{"n":"Taourirt","c":"Morocco","y":34.41,"x":-2.89},{"n":"Bijapur","c":"India","y":16.8244,"x":75.7154},{"n":"Sukabumi","c":"Indonesia","y":-6.9197,"x":106.9272},{"n":"Taytay","c":"Philippines","y":14.5692,"x":121.1325},{"n":"Ulanhot","c":"China","y":46.0726,"x":122.0719},{"n":"Nakuru","c":"Kenya","y":-0.2833,"x":36.0667},{"n":"Yunzhong","c":"China","y":39.8143,"x":113.0946},{"n":"Al Fallujah","c":"Iraq","y":33.35,"x":43.7833},{"n":"Kochi","c":"Japan","y":33.5589,"x":133.5314},{"n":"Boa Vista","c":"Brazil","y":2.82,"x":-60.6719},{"n":"Gwangmyeongni","c":"Korea, South","y":37.4772,"x":126.8664},{"n":"Bari","c":"Italy","y":41.1253,"x":16.8667},{"n":"Pucallpa","c":"Peru","y":-8.3833,"x":-74.55},{"n":"Kuching","c":"Malaysia","y":1.5397,"x":110.3542},{"n":"Zinder","c":"Niger","y":13.8,"x":8.9833},{"n":"Caucaia","c":"Brazil","y":-3.7328,"x":-38.6558},{"n":"Gonder","c":"Ethiopia","y":12.6,"x":37.4667},{"n":"Jackson","c":"United States","y":32.3163,"x":-90.2124},{"n":"Mekele","c":"Ethiopia","y":13.4969,"x":39.4769},{"n":"Kulti","c":"India","y":23.73,"x":86.85},{"n":"Santa Rosa","c":"United States","y":38.4458,"x":-122.7067},{"n":"Gonaives","c":"Haiti","y":19.4456,"x":-72.6883},{"n":"Lansing","c":"United States","y":42.7142,"x":-84.5601},{"n":"Naha","c":"Japan","y":26.2122,"x":127.6789},{"n":"Binxian","c":"China","y":35.0364,"x":108.0764},{"n":"San Juan","c":"Puerto Rico","y":18.4037,"x":-66.0636},{"n":"Lexington","c":"United States","y":38.0423,"x":-84.4587},{"n":"Hotan","c":"China","y":37.1012,"x":79.9327},{"n":"Uige","c":"Angola","y":-7.6167,"x":15.05},{"n":"Newcastle","c":"Australia","y":-32.9167,"x":151.75},{"n":"Kurgan","c":"Russia","y":55.4408,"x":65.3411},{"n":"Temara","c":"Morocco","y":33.9234,"x":-6.9076},{"n":"Uruapan","c":"Mexico","y":19.4208,"x":-102.0628},{"n":"Camaguey","c":"Cuba","y":21.3786,"x":-77.9186},{"n":"Ann Arbor","c":"United States","y":42.2755,"x":-83.7312},{"n":"San Salvador de Jujuy","c":"Argentina","y":-24.1856,"x":-65.2994},{"n":"Timisoara","c":"Romania","y":45.7597,"x":21.23},{"n":"Cordoba","c":"Spain","y":37.8845,"x":-4.7796},{"n":"Al Kut","c":"Iraq","y":32.4907,"x":45.8304},{"n":"Tapachula","c":"Mexico","y":14.9,"x":-92.2667},{"n":"Shahjanpur","c":"India","y":27.8804,"x":79.905},{"n":"Cherepovets","c":"Russia","y":59.1333,"x":37.9167},{"n":"San Miguelito","c":"Panama","y":9.05,"x":-79.5},{"n":"Menongue","c":"Angola","y":-14.6585,"x":17.691},{"n":"Poltava","c":"Ukraine","y":49.5744,"x":34.5686},{"n":"Henderson","c":"United States","y":36.0133,"x":-115.038},{"n":"Maroua","c":"Cameroon","y":10.5823,"x":14.3275},{"n":"Kaech'on","c":"Korea, North","y":39.6986,"x":125.9061},{"n":"Asan","c":"Korea, South","y":36.35,"x":126.9167},{"n":"Coatzacoalcos","c":"Mexico","y":18.15,"x":-94.4333},{"n":"Huntsville","c":"United States","y":34.6988,"x":-86.6412},{"n":"Oskemen","c":"Kazakhstan","y":49.99,"x":82.6149},{"n":"Tampico","c":"Mexico","y":22.2553,"x":-97.8686},{"n":"Trichur","c":"India","y":10.52,"x":76.21},{"n":"Cluj-Napoca","c":"Romania","y":46.7667,"x":23.6},{"n":"General Trias","c":"Philippines","y":14.3833,"x":120.8833},{"n":"Cirebon","c":"Indonesia","y":-6.7167,"x":108.5667},{"n":"Boaco","c":"Nicaragua","y":12.4722,"x":-85.6586},{"n":"Ca Mau","c":"Vietnam","y":9.1833,"x":105.15},{"n":"Cabuyao","c":"Philippines","y":14.275,"x":121.125},{"n":"Vologda","c":"Russia","y":59.2167,"x":39.9},{"n":"Saransk","c":"Russia","y":54.1833,"x":45.1833},{"n":"Mobile","c":"United States","y":30.6783,"x":-88.1162},{"n":"Bor","c":"South Sudan","y":6.2167,"x":31.55},{"n":"Munster","c":"Germany","y":51.9625,"x":7.6256},{"n":"Barddhaman","c":"India","y":23.25,"x":87.85},{"n":"Toshima","c":"Japan","y":35.7333,"x":139.7167},{"n":"Karlsruhe","c":"Germany","y":49.0167,"x":8.4},{"n":"Kasur","c":"Pakistan","y":31.1167,"x":74.45},{"n":"Yakou","c":"China","y":33.2937,"x":113.5203},{"n":"Orel","c":"Russia","y":52.9686,"x":36.0694},{"n":"Safi","c":"Morocco","y":32.2833,"x":-9.2333},{"n":"Shahr-e Qods","c":"Iran","y":35.7214,"x":51.1089},{"n":"Vitoria da Conquista","c":"Brazil","y":-14.8661,"x":-40.8394},{"n":"Hamah","c":"Syria","y":35.1333,"x":36.75},{"n":"Guaruja","c":"Brazil","y":-23.9936,"x":-46.2564},{"n":"Catania","c":"Italy","y":37.5027,"x":15.0873},{"n":"Purnea","c":"India","y":25.78,"x":87.47},{"n":"Datang","c":"China","y":22.9476,"x":113.9326},{"n":"Fort Collins","c":"United States","y":40.5478,"x":-105.0656},{"n":"Port Elizabeth","c":"South Africa","y":-33.9581,"x":25.6},{"n":"Alanya","c":"Turkey","y":36.5436,"x":31.9997},{"n":"Asheville","c":"United States","y":35.5704,"x":-82.5536},{"n":"Santa Clarita","c":"United States","y":34.4175,"x":-118.4964},{"n":"Gorgan","c":"Iran","y":36.83,"x":54.48},{"n":"Quy Nhon","c":"Vietnam","y":13.7696,"x":109.2314},{"n":"Sambalpur","c":"India","y":21.4704,"x":83.9701},{"n":"Yokkaichi","c":"Japan","y":34.9667,"x":136.6167},{"n":"Chalco","c":"Mexico","y":19.2647,"x":-98.8975},{"n":"Mannheim","c":"Germany","y":49.4878,"x":8.4661},{"n":"Namp'o","c":"Korea, North","y":38.7333,"x":125.4},{"n":"Shahriar","c":"Iran","y":35.6597,"x":51.0592},{"n":"Coban","c":"Guatemala","y":15.4833,"x":-90.3667},{"n":"Kasugai","c":"Japan","y":35.25,"x":136.9667},{"n":"Sapele","c":"Nigeria","y":5.8904,"x":5.68},{"n":"Blumenau","c":"Brazil","y":-26.9189,"x":-49.0658},{"n":"Sariwon","c":"Korea, North","y":38.5039,"x":125.7589},{"n":"St. Catharines","c":"Canada","y":43.1833,"x":-79.2333},{"n":"Matadi","c":"Congo (Kinshasa)","y":-5.8167,"x":13.4833},{"n":"Niagara Falls","c":"Canada","y":43.06,"x":-79.1067},{"n":"Firozabad","c":"India","y":27.15,"x":78.3949},{"n":"San Fernando","c":"Philippines","y":15.0333,"x":120.6833},{"n":"St. Paul","c":"United States","y":44.9477,"x":-93.104},{"n":"Vladikavkaz","c":"Russia","y":43.04,"x":44.6775},{"n":"Yakutsk","c":"Russia","y":62.0272,"x":129.7319},{"n":"Minna","c":"Nigeria","y":9.6139,"x":6.5569},{"n":"Hisar","c":"India","y":29.1489,"x":75.7367},{"n":"Puerto La Cruz","c":"Venezuela","y":10.2167,"x":-64.6167},{"n":"Podolsk","c":"Russia","y":55.4297,"x":37.5444},{"n":"Ciudad Victoria","c":"Mexico","y":23.7333,"x":-99.1333},{"n":"Ciudad del Este","c":"Paraguay","y":-25.5167,"x":-54.6167},{"n":"Vaughan","c":"Canada","y":43.8333,"x":-79.5},{"n":"Oakashicho","c":"Japan","y":34.6431,"x":134.9975},{"n":"Pekalongan","c":"Indonesia","y":-6.8883,"x":109.6753},{"n":"Adiyaman","c":"Turkey","y":37.7644,"x":38.2763},{"n":"Vila Nova de Gaia","c":"Portugal","y":41.1333,"x":-8.6167},{"n":"Curepipe","c":"Mauritius","y":-20.3162,"x":57.5166},{"n":"Cabanatuan City","c":"Philippines","y":15.4833,"x":120.9667},{"n":"Paulista","c":"Brazil","y":-7.9408,"x":-34.8728},{"n":"Oaxaca","c":"Mexico","y":17.0833,"x":-96.75},{"n":"Armenia","c":"Colombia","y":4.5389,"x":-75.6725},{"n":"Akita","c":"Japan","y":39.7197,"x":140.1025},{"n":"San Bernardo","c":"Chile","y":-33.6,"x":-70.7167},{"n":"Wollongong","c":"Australia","y":-34.4331,"x":150.8831},{"n":"Brest","c":"France","y":48.39,"x":-4.49},{"n":"Awka","c":"Nigeria","y":6.2,"x":7.0667},{"n":"Iksan","c":"Korea, South","y":35.9439,"x":126.9544},{"n":"Taubate","c":"Brazil","y":-23.0333,"x":-45.55},{"n":"Antioch","c":"United States","y":37.9789,"x":-121.7958},{"n":"Lakeland","c":"United States","y":28.0556,"x":-81.9545},{"n":"Soc Trang","c":"Vietnam","y":9.6,"x":105.9719},{"n":"Awasa","c":"Ethiopia","y":7.05,"x":38.4667},{"n":"Mardan","c":"Pakistan","y":34.1958,"x":72.0447},{"n":"Popayan","c":"Colombia","y":2.4411,"x":-76.6061},{"n":"Praia Grande","c":"Brazil","y":-24.0058,"x":-46.4028},{"n":"Qianzhou","c":"China","y":28.3185,"x":109.7318},{"n":"Cotabato","c":"Philippines","y":7.2167,"x":124.25},{"n":"Valladolid","c":"Spain","y":41.6528,"x":-4.7236},{"n":"Mossoro","c":"Brazil","y":-5.1878,"x":-37.3439},{"n":"Coatepeque","c":"Guatemala","y":14.7,"x":-91.8667},{"n":"Bidar","c":"India","y":17.9229,"x":77.5175},{"n":"Bialystok","c":"Poland","y":53.1167,"x":23.1667},{"n":"Merida","c":"Venezuela","y":8.5833,"x":-71.1333},{"n":"Murmansk","c":"Russia","y":68.9667,"x":33.0833},{"n":"Ar Raqqah","c":"Syria","y":35.95,"x":39.0167},{"n":"Afyonkarahisar","c":"Turkey","y":38.7581,"x":30.5386},{"n":"Vigo","c":"Spain","y":42.2314,"x":-8.7124},{"n":"Jember","c":"Indonesia","y":-8.1727,"x":113.6873},{"n":"Bahia Blanca","c":"Argentina","y":-38.7167,"x":-62.2667},{"n":"Iskenderun","c":"Turkey","y":36.5804,"x":36.17},{"n":"Al Mubarraz","c":"Saudi Arabia","y":25.41,"x":49.5808},{"n":"Petropolis","c":"Brazil","y":-22.505,"x":-43.1789},{"n":"Al Kharj","c":"Saudi Arabia","y":24.1556,"x":47.312},{"n":"Rampur","c":"India","y":28.8154,"x":79.025},{"n":"Najran","c":"Saudi Arabia","y":17.4917,"x":44.1322},{"n":"Chernihiv","c":"Ukraine","y":51.4939,"x":31.2947},{"n":"Yangsan","c":"Korea, South","y":35.3386,"x":129.0386},{"n":"Comilla","c":"Bangladesh","y":23.45,"x":91.2},{"n":"Oyster Bay","c":"United States","y":40.7845,"x":-73.5139},{"n":"Valparaiso","c":"Chile","y":-33.0458,"x":-71.6197},{"n":"Augsburg","c":"Germany","y":48.3717,"x":10.8983},{"n":"Mbeya","c":"Tanzania","y":-8.9,"x":33.45},{"n":"Limeira","c":"Brazil","y":-22.5647,"x":-47.4017},{"n":"Rangpur","c":"Bangladesh","y":25.75,"x":89.25},{"n":"Shiliguri","c":"India","y":26.72,"x":88.42},{"n":"Aksaray","c":"Turkey","y":38.3686,"x":34.0297},{"n":"Navotas","c":"Philippines","y":14.6667,"x":120.9417},{"n":"Corum","c":"Turkey","y":40.5489,"x":34.9533},{"n":"Bali","c":"India","y":22.65,"x":88.34},{"n":"Ismailia","c":"Egypt","y":30.5833,"x":32.2667},{"n":"Vila Teixeira da Silva","c":"Angola","y":-12.1958,"x":15.8556},{"n":"Panipat","c":"India","y":29.4004,"x":76.97},{"n":"Delmas","c":"Haiti","y":18.55,"x":-72.3},{"n":"Batna","c":"Algeria","y":35.55,"x":6.1667},{"n":"Kunp'o","c":"Korea, South","y":37.3675,"x":126.9469},{"n":"Tambov","c":"Russia","y":52.7167,"x":41.4333},{"n":"Iasi","c":"Romania","y":47.1622,"x":27.5889},{"n":"Thies","c":"Senegal","y":14.7833,"x":-16.9167},{"n":"Makurdi","c":"Nigeria","y":7.73,"x":8.53},{"n":"Kherson","c":"Ukraine","y":46.6333,"x":32.6},{"n":"Groznyy","c":"Russia","y":43.3125,"x":45.6986},{"n":"Hong'an","c":"China","y":47.21,"x":123.61},{"n":"Bafoussam","c":"Cameroon","y":5.4667,"x":10.4167},{"n":"Resistencia","c":"Argentina","y":-27.4514,"x":-58.9867},{"n":"Brasov","c":"Romania","y":45.65,"x":25.6},{"n":"Kassel","c":"Germany","y":51.3166,"x":9.4912},{"n":"Juliaca","c":"Peru","y":-15.4908,"x":-70.1269},{"n":"Karimnagar","c":"India","y":18.4333,"x":79.15},{"n":"Morioka","c":"Japan","y":39.6833,"x":141.15},{"n":"Setif","c":"Algeria","y":36.19,"x":5.41},{"n":"Trenton","c":"United States","y":40.2236,"x":-74.7641},{"n":"Kaunas","c":"Lithuania","y":54.9,"x":23.9333},{"n":"Mulhouse","c":"France","y":47.75,"x":7.34},{"n":"Sekondi","c":"Ghana","y":4.9433,"x":-1.704},{"n":"Lincoln","c":"United States","y":40.809,"x":-96.6788},{"n":"Bhuj","c":"India","y":23.2504,"x":69.81},{"n":"Ichalkaranji","c":"India","y":16.7,"x":74.47},{"n":"Tirupati","c":"India","y":13.65,"x":79.42},{"n":"Anchorage","c":"United States","y":61.1508,"x":-149.1091},{"n":"Punto Fijo","c":"Venezuela","y":11.7167,"x":-70.1833},{"n":"Sincelejo","c":"Colombia","y":9.2994,"x":-75.3958},{"n":"Plano","c":"United States","y":33.0502,"x":-96.7487},{"n":"Irvine","c":"United States","y":33.6772,"x":-117.7738},{"n":"Camacari","c":"Brazil","y":-12.6978,"x":-38.3239},{"n":"Orleans","c":"France","y":47.9025,"x":1.909},{"n":"Binangonan","c":"Philippines","y":14.4514,"x":121.1919},{"n":"Suzano","c":"Brazil","y":-23.5428,"x":-46.3108},{"n":"Hospet","c":"India","y":15.2667,"x":76.4},{"n":"Ostrava","c":"Czechia","y":49.8356,"x":18.2925},{"n":"Tacna","c":"Peru","y":-18.0556,"x":-70.2483},{"n":"Korhogo","c":"Côte D’Ivoire","y":9.4578,"x":-5.6294},{"n":"Constanta","c":"Romania","y":44.1733,"x":28.6383},{"n":"Haifa","c":"Israel","y":32.8,"x":34.9833},{"n":"Coacalco","c":"Mexico","y":19.6333,"x":-99.0931},{"n":"Crato","c":"Brazil","y":-7.2342,"x":-39.4094},{"n":"Limoges","c":"France","y":45.8353,"x":1.2625},{"n":"Davenport","c":"United States","y":41.5563,"x":-90.6052},{"n":"Fukushima","c":"Japan","y":37.7608,"x":140.4733},{"n":"Barinas","c":"Venezuela","y":8.615,"x":-70.1985},{"n":"Coro","c":"Venezuela","y":11.395,"x":-69.6816},{"n":"Bago","c":"Myanmar","y":17.3433,"x":96.4981},{"n":"Fuquan","c":"China","y":26.7039,"x":107.5087},{"n":"Tongchuanshi","c":"China","y":35.08,"x":109.03},{"n":"Aizawl","c":"India","y":23.7104,"x":92.72},{"n":"Santa Maria","c":"Brazil","y":-29.6839,"x":-53.8069},{"n":"Taboao da Serra","c":"Brazil","y":-23.6019,"x":-46.7528},{"n":"Maraba","c":"Brazil","y":-5.3689,"x":-49.1178},{"n":"Sannai","c":"India","y":24.16,"x":80.83},{"n":"Huozhou","c":"China","y":36.5726,"x":111.7176},{"n":"Temuco","c":"Chile","y":-38.7399,"x":-72.5901},{"n":"Sterlitamak","c":"Russia","y":53.6333,"x":55.95},{"n":"Rockford","c":"United States","y":42.2597,"x":-89.0641},{"n":"Tegal","c":"Indonesia","y":-6.8667,"x":109.1333},{"n":"Ica","c":"Peru","y":-14.0667,"x":-75.7333},{"n":"Newark","c":"United States","y":40.7245,"x":-74.1725},{"n":"Chuncheon","c":"Korea, South","y":37.8747,"x":127.7342},{"n":"Malard","c":"Iran","y":35.6658,"x":50.9767},{"n":"Pematangsiantar","c":"Indonesia","y":2.96,"x":99.06},{"n":"Long Xuyen","c":"Vietnam","y":10.3686,"x":105.4234},{"n":"Petrozavodsk","c":"Russia","y":61.7833,"x":34.35},{"n":"South Bend","c":"United States","y":41.6767,"x":-86.2696},{"n":"Mingaora","c":"Pakistan","y":34.7717,"x":72.36},{"n":"San Pedro Carcha","c":"Guatemala","y":15.4768,"x":-90.312},{"n":"Barasat","c":"India","y":22.2333,"x":88.45},{"n":"Shreveport","c":"United States","y":32.4656,"x":-93.7956},{"n":"Sumbe","c":"Angola","y":-11.2052,"x":13.8417},{"n":"Viet Tri","c":"Vietnam","y":21.3136,"x":105.3947},{"n":"Cherkasy","c":"Ukraine","y":49.4444,"x":32.0597},{"n":"Caala","c":"Angola","y":-12.85,"x":15.55},{"n":"Wiesbaden","c":"Germany","y":50.0825,"x":8.24},{"n":"Kostroma","c":"Russia","y":57.7667,"x":40.9333},{"n":"Round Lake Beach","c":"United States","y":42.379,"x":-88.0811},{"n":"Gyeongsan","c":"Korea, South","y":35.8167,"x":128.7333},{"n":"Governador Valadares","c":"Brazil","y":-18.8508,"x":-41.9489},{"n":"Katowice","c":"Poland","y":50.25,"x":19},{"n":"Shaowu","c":"China","y":27.3417,"x":117.4869},{"n":"Sfax","c":"Tunisia","y":34.74,"x":10.76},{"n":"Nizhnevartovsk","c":"Russia","y":60.9389,"x":76.595},{"n":"Linxia Chengguanzhen","c":"China","y":35.6,"x":103.2167},{"n":"Pachuca","c":"Mexico","y":20.1,"x":-98.75},{"n":"Juazeiro do Norte","c":"Brazil","y":-7.2128,"x":-39.315},{"n":"Dire Dawa","c":"Ethiopia","y":9.5833,"x":41.8667},{"n":"Khmelnytskyi","c":"Ukraine","y":49.42,"x":27},{"n":"Owo","c":"Nigeria","y":7.1962,"x":5.5868},{"n":"San Cristobal","c":"Dominican Republic","y":18.4167,"x":-70.1333},{"n":"Savannah","c":"United States","y":32.0281,"x":-81.1784},{"n":"Posadas","c":"Argentina","y":-27.3667,"x":-55.8969},{"n":"Gatineau","c":"Canada","y":45.4833,"x":-75.65},{"n":"Windsor","c":"Canada","y":42.2833,"x":-83},{"n":"Myrtle Beach","c":"United States","y":33.7096,"x":-78.8843},{"n":"Mbandaka","c":"Congo (Kinshasa)","y":0.0486,"x":18.2603},{"n":"Tehuacan","c":"Mexico","y":18.4617,"x":-97.3928},{"n":"La Guaira","c":"Venezuela","y":10.6,"x":-66.9331},{"n":"Kunsan","c":"Korea, South","y":35.9786,"x":126.7114},{"n":"Chula Vista","c":"United States","y":32.6281,"x":-117.0145},{"n":"Ratlam","c":"India","y":23.3167,"x":75.0667},{"n":"Derby","c":"United Kingdom","y":52.9167,"x":-1.4667},{"n":"Tsu","c":"Japan","y":34.7186,"x":136.5056},{"n":"Kafr ad Dawwar","c":"Egypt","y":31.1417,"x":30.1272},{"n":"Eugene","c":"United States","y":44.0563,"x":-123.1173},{"n":"Gijon","c":"Spain","y":43.5333,"x":-5.7},{"n":"Bijiao","c":"China","y":22.9311,"x":113.2018},{"n":"Chiayi","c":"Taiwan","y":23.48,"x":120.4497},{"n":"Palmas","c":"Brazil","y":-10.2128,"x":-48.3603},{"n":"Craiova","c":"Romania","y":44.3333,"x":23.8167},{"n":"Sorong","c":"Indonesia","y":-0.8667,"x":131.25},{"n":"Majene","c":"Indonesia","y":-3.5336,"x":118.966},{"n":"Bukhara","c":"Uzbekistan","y":39.7747,"x":64.4286},{"n":"Aomori","c":"Japan","y":40.8222,"x":140.7475},{"n":"Thai Binh","c":"Vietnam","y":20.4461,"x":106.3422},{"n":"Minato","c":"Japan","y":35.6581,"x":139.7514},{"n":"Binjai","c":"Indonesia","y":3.6,"x":98.4853},{"n":"Fuchu","c":"Japan","y":35.6689,"x":139.4778},{"n":"Oral","c":"Kazakhstan","y":51.2333,"x":51.3667},{"n":"Brahmanbaria","c":"Bangladesh","y":23.9667,"x":91.1},{"n":"Sarta","c":"Iran","y":36.5504,"x":53.1},{"n":"Imphal","c":"India","y":24.82,"x":93.95},{"n":"Plymouth","c":"United Kingdom","y":50.3714,"x":-4.1422},{"n":"Santo Domingo de los Colorados","c":"Ecuador","y":-0.2542,"x":-79.1719},{"n":"Novorossiysk","c":"Russia","y":44.7167,"x":37.7667},{"n":"Santa Ana","c":"El Salvador","y":13.9833,"x":-89.5333},{"n":"Zhytomyr","c":"Ukraine","y":50.2544,"x":28.6578},{"n":"Villa Altagracia","c":"Dominican Republic","y":18.67,"x":-70.17},{"n":"Gombe","c":"Nigeria","y":10.2904,"x":11.17},{"n":"Mito","c":"Japan","y":36.3667,"x":140.4667},{"n":"Espoo","c":"Finland","y":60.21,"x":24.66},{"n":"Drug","c":"India","y":21.19,"x":81.28},{"n":"Floridablanca","c":"Colombia","y":7.0697,"x":-73.0978},{"n":"Bamenda","c":"Cameroon","y":5.9333,"x":10.1667},{"n":"Handwara","c":"India","y":34.4,"x":74.28},{"n":"Lucena","c":"Philippines","y":13.9333,"x":121.6167},{"n":"Canton","c":"United States","y":40.8075,"x":-81.3677},{"n":"Yoshkar-Ola","c":"Russia","y":56.6328,"x":47.8958},{"n":"Parnamirim","c":"Brazil","y":-5.9158,"x":-35.2628},{"n":"Nalchik","c":"Russia","y":43.4833,"x":43.6167},{"n":"Ichihara","c":"Japan","y":35.4981,"x":140.1156},{"n":"Aswan","c":"Egypt","y":24.0889,"x":32.8997},{"n":"Salamanca","c":"Mexico","y":20.5703,"x":-101.1972},{"n":"Inegol","c":"Turkey","y":40.0806,"x":29.5097},{"n":"Chernivtsi","c":"Ukraine","y":48.2908,"x":25.9344},{"n":"Sumare","c":"Brazil","y":-22.8219,"x":-47.2669},{"n":"Lubbock","c":"United States","y":33.5659,"x":-101.8878},{"n":"Yanbu`","c":"Saudi Arabia","y":24.0943,"x":38.0493},{"n":"Sumy","c":"Ukraine","y":50.9068,"x":34.7992},{"n":"Tshikapa","c":"Congo (Kinshasa)","y":-6.4167,"x":20.8},{"n":"Anantapur","c":"India","y":14.6833,"x":77.6},{"n":"San Pablo","c":"Philippines","y":14.07,"x":121.325},{"n":"Reading","c":"United States","y":40.34,"x":-75.9267},{"n":"Winter Haven","c":"United States","y":28.0118,"x":-81.7017},{"n":"Ipatinga","c":"Brazil","y":-19.4678,"x":-42.5369},{"n":"Myeik","c":"Myanmar","y":12.4394,"x":98.6003},{"n":"Kutahya","c":"Turkey","y":39.4242,"x":29.9833},{"n":"Salem","c":"United States","y":44.9231,"x":-123.0246},{"n":"Djelfa","c":"Algeria","y":34.6667,"x":3.25},{"n":"Suncheon","c":"Korea, South","y":34.9506,"x":127.4875},{"n":"Graz","c":"Austria","y":47.0749,"x":15.4409},{"n":"St. Petersburg","c":"United States","y":27.7931,"x":-82.6652},{"n":"Engels","c":"Russia","y":51.4667,"x":46.1167},{"n":"Kindu","c":"Congo (Kinshasa)","y":-2.95,"x":25.9167},{"n":"Oruro","c":"Bolivia","y":-17.9667,"x":-67.1167},{"n":"Dezful","c":"Iran","y":32.3878,"x":48.4033},{"n":"Osmaniye","c":"Turkey","y":37.075,"x":36.25},{"n":"Lafayette","c":"United States","y":30.2084,"x":-92.0323},{"n":"Kyongju","c":"Korea, South","y":35.85,"x":129.2167},{"n":"Dumai","c":"Indonesia","y":1.6667,"x":101.45},{"n":"Gent","c":"Belgium","y":51.0536,"x":3.7253},{"n":"San Lorenzo","c":"Paraguay","y":-25.3431,"x":-57.5094},{"n":"Geelong","c":"Australia","y":-38.15,"x":144.35},{"n":"Corlu","c":"Turkey","y":41.1597,"x":27.8028},{"n":"Nawabshah","c":"Pakistan","y":26.2442,"x":68.41},{"n":"Gelsenkirchen","c":"Germany","y":51.5167,"x":7.1},{"n":"Bordeaux","c":"France","y":44.84,"x":-0.58},{"n":"Monchengladbach","c":"Germany","y":51.2,"x":6.4333},{"n":"Volta Redonda","c":"Brazil","y":-22.5231,"x":-44.1042},{"n":"Matala","c":"Angola","y":-14.7306,"x":15.0367},{"n":"Annaba","c":"Algeria","y":36.9,"x":7.7667},{"n":"Barueri","c":"Brazil","y":-23.5111,"x":-46.8764},{"n":"Laredo","c":"United States","y":27.5629,"x":-99.4875},{"n":"Nonthaburi","c":"Thailand","y":13.8667,"x":100.5167},{"n":"Jersey City","c":"United States","y":40.7161,"x":-74.0682},{"n":"Venice","c":"Italy","y":45.4397,"x":12.3319},{"n":"Quang Ngai","c":"Vietnam","y":15.1206,"x":108.7922},{"n":"Damanhur","c":"Egypt","y":31.05,"x":30.4667},{"n":"Ciudad Benito Juarez","c":"Mexico","y":25.65,"x":-100.0833},{"n":"Cascavel","c":"Brazil","y":-24.9558,"x":-53.4553},{"n":"Hiratsuka","c":"Japan","y":35.3231,"x":139.3422},{"n":"Chandler","c":"United States","y":33.2826,"x":-111.8516},{"n":"Sakarya","c":"Turkey","y":40.7778,"x":30.4028},{"n":"Tagum","c":"Philippines","y":7.4478,"x":125.8078},{"n":"Fukui","c":"Japan","y":36.0641,"x":136.2196},{"n":"Soka","c":"Japan","y":35.8256,"x":139.8056},{"n":"Kunduz","c":"Afghanistan","y":36.728,"x":68.8725},{"n":"Ciudad Santa Catarina","c":"Mexico","y":25.6833,"x":-100.45},{"n":"Los Mochis","c":"Mexico","y":25.7835,"x":-108.9937},{"n":"Imperatriz","c":"Brazil","y":-5.5258,"x":-47.4758},{"n":"Texcoco","c":"Mexico","y":19.52,"x":-98.88},{"n":"Santa Maria","c":"Philippines","y":14.8183,"x":120.9563},{"n":"Misratah","c":"Libya","y":32.3778,"x":15.0901},{"n":"Isparta","c":"Turkey","y":37.7667,"x":30.55},{"n":"Foz do Iguacu","c":"Brazil","y":-25.54,"x":-54.5875},{"n":"Verona","c":"Italy","y":45.4386,"x":10.9928},{"n":"Huayin","c":"China","y":34.5664,"x":110.0866},{"n":"Etawah","c":"India","y":26.7855,"x":79.015},{"n":"McKinney","c":"United States","y":33.2015,"x":-96.6669},{"n":"Playa del Carmen","c":"Mexico","y":20.6275,"x":-87.0811},{"n":"Scottsdale","c":"United States","y":33.6872,"x":-111.8651},{"n":"Wolverhampton","c":"United Kingdom","y":52.5833,"x":-2.1333},{"n":"Killeen","c":"United States","y":31.0754,"x":-97.7296},{"n":"Bergen","c":"Norway","y":60.3925,"x":5.3233},{"n":"Tallahassee","c":"United States","y":30.4551,"x":-84.2526},{"n":"Horlivka","c":"Ukraine","y":48.3336,"x":38.0925},{"n":"Antsirabe","c":"Madagascar","y":-19.8667,"x":47.0333},{"n":"Ondo","c":"Nigeria","y":7.0904,"x":4.84},{"n":"San Mateo","c":"Philippines","y":14.6969,"x":121.1219},{"n":"Ap Da Loi","c":"Vietnam","y":11.9304,"x":108.42},{"n":"Viamao","c":"Brazil","y":-30.0808,"x":-51.0228},{"n":"Peoria","c":"United States","y":40.752,"x":-89.6153},{"n":"Gravatai","c":"Brazil","y":-29.9433,"x":-50.9939},{"n":"Kediri","c":"Indonesia","y":-7.8166,"x":112.0119},{"n":"Damaturu","c":"Nigeria","y":11.75,"x":11.9667},{"n":"Tokushima","c":"Japan","y":34.0667,"x":134.55},{"n":"Malolos","c":"Philippines","y":14.8433,"x":120.8114},{"n":"La Paz","c":"Mexico","y":24.1422,"x":-110.3108},{"n":"Wilmington","c":"United States","y":34.21,"x":-77.8866},{"n":"Raichur","c":"India","y":16.2104,"x":77.355},{"n":"Mawlamyine","c":"Myanmar","y":16.4847,"x":97.6258},{"n":"Turmero","c":"Venezuela","y":10.2283,"x":-67.4753},{"n":"Kuala Terengganu","c":"Malaysia","y":5.3303,"x":103.1408},{"n":"Daloa","c":"Côte D’Ivoire","y":6.89,"x":-6.45},{"n":"Puerto Princesa","c":"Philippines","y":9.75,"x":118.75},{"n":"Mocamedes","c":"Angola","y":-15.1953,"x":12.1508},{"n":"Vitoria-Gasteiz","c":"Spain","y":42.85,"x":-2.6833},{"n":"Qarshi","c":"Uzbekistan","y":38.8667,"x":65.8},{"n":"Montgomery","c":"United States","y":32.3473,"x":-86.2666},{"n":"Gilbert","c":"United States","y":33.3101,"x":-111.7463},{"n":"Rishon LeZiyyon","c":"Israel","y":31.95,"x":34.8},{"n":"Ongole","c":"India","y":15.5,"x":80.05},{"n":"Arua","c":"Uganda","y":3.03,"x":30.91},{"n":"Bharatpur","c":"India","y":27.2172,"x":77.49},{"n":"Shinozaki","c":"Japan","y":33.95,"x":130.9333},{"n":"Goma","c":"Congo (Kinshasa)","y":-1.6794,"x":29.2336},{"n":"Rach Gia","c":"Vietnam","y":10.0125,"x":105.0808},{"n":"Kanggye","c":"Korea, North","y":40.9667,"x":126.6},{"n":"Taganrog","c":"Russia","y":47.2333,"x":38.9},{"n":"Kiziltepe","c":"Turkey","y":37.1939,"x":40.5861},{"n":"El Fasher","c":"Sudan","y":13.63,"x":25.35},{"n":"Varzea Grande","c":"Brazil","y":-15.65,"x":-56.14},{"n":"Las Condes","c":"Chile","y":-33.4167,"x":-70.5833},{"n":"Glendale","c":"United States","y":33.5791,"x":-112.2311},{"n":"Santiago del Estero","c":"Argentina","y":-27.7844,"x":-64.2669},{"n":"Hakodate","c":"Japan","y":41.7733,"x":140.7261},{"n":"Usak","c":"Turkey","y":38.6833,"x":29.4},{"n":"Begusarai","c":"India","y":25.42,"x":86.13},{"n":"North Las Vegas","c":"United States","y":36.288,"x":-115.0901},{"n":"Sonipat","c":"India","y":28.9958,"x":77.0114},{"n":"Los Teques","c":"Venezuela","y":10.3411,"x":-67.0406},{"n":"Mabalacat","c":"Philippines","y":15.2167,"x":120.5833},{"n":"Jinshi","c":"China","y":29.6334,"x":111.8746},{"n":"Chofugaoka","c":"Japan","y":35.6506,"x":139.5408},{"n":"Osh","c":"Kyrgyzstan","y":40.5333,"x":72.7833},{"n":"Iwo","c":"Nigeria","y":7.63,"x":4.18},{"n":"Bata","c":"Equatorial Guinea","y":1.865,"x":9.77},{"n":"Komsomol'sk-na-Amure","c":"Russia","y":50.55,"x":137},{"n":"Babol","c":"Iran","y":36.55,"x":52.6833},{"n":"Galati","c":"Romania","y":45.4233,"x":28.0425},{"n":"Al Bayda'","c":"Libya","y":32.7628,"x":21.755},{"n":"Kurmuk","c":"Sudan","y":10.5563,"x":34.2848},{"n":"Manzhouli","c":"China","y":49.5881,"x":117.4525},{"n":"Braunschweig","c":"Germany","y":52.2692,"x":10.5211},{"n":"Rivne","c":"Ukraine","y":50.6197,"x":26.2514},{"n":"Gdynia","c":"Poland","y":54.5189,"x":18.5319},{"n":"Soyapango","c":"El Salvador","y":13.7472,"x":-89.1639},{"n":"Palangkaraya","c":"Indonesia","y":-2.21,"x":113.92},{"n":"Silang","c":"Philippines","y":14.2306,"x":120.975},{"n":"Al Minya","c":"Egypt","y":28.0833,"x":30.75},{"n":"Hafr al Batin","c":"Saudi Arabia","y":28.4337,"x":45.9601},{"n":"Chigasaki","c":"Japan","y":35.3339,"x":139.4047},{"n":"Bukan","c":"Iran","y":36.5208,"x":46.2117},{"n":"Aachen","c":"Germany","y":50.7762,"x":6.0838},{"n":"Kiel","c":"Germany","y":54.3233,"x":10.1394},{"n":"Sahiwal","c":"Pakistan","y":30.6706,"x":73.1064},{"n":"Thu Dau Mot","c":"Vietnam","y":11.0042,"x":106.6583},{"n":"Novo Hamburgo","c":"Brazil","y":-29.6778,"x":-51.1308},{"n":"Sibu","c":"Malaysia","y":2.3,"x":111.8167},{"n":"Yato","c":"Japan","y":35.4693,"x":139.4616},{"n":"Parana","c":"Argentina","y":-31.7444,"x":-60.5175},{"n":"Yamagata","c":"Japan","y":38.25,"x":140.3333},{"n":"Tsukuba-kenkyugakuen-toshi","c":"Japan","y":36.0333,"x":140.0667},{"n":"Merlo","c":"Argentina","y":-34.6653,"x":-58.7275},{"n":"Mage","c":"Brazil","y":-22.6528,"x":-43.0408},{"n":"Syktyvkar","c":"Russia","y":61.6667,"x":50.8167},{"n":"Khimki","c":"Russia","y":55.8892,"x":37.445},{"n":"Biratnagar","c":"Nepal","y":26.4833,"x":87.2833},{"n":"Colombo","c":"Brazil","y":-25.2919,"x":-49.2239},{"n":"Chemnitz","c":"Germany","y":50.8333,"x":12.9167},{"n":"Saskatoon","c":"Canada","y":52.1333,"x":-106.6833},{"n":"Colon","c":"Panama","y":9.3598,"x":-79.9004},{"n":"Itagui","c":"Colombia","y":6.1726,"x":-75.6096},{"n":"Abertawe","c":"United Kingdom","y":51.6167,"x":-3.95},{"n":"Jessore","c":"Bangladesh","y":23.1704,"x":89.2},{"n":"Beichengqu","c":"China","y":40.4348,"x":113.1565},{"n":"Tuy Hoa","c":"Vietnam","y":13.0869,"x":109.3086},{"n":"Shrirampur","c":"India","y":22.75,"x":88.34},{"n":"Chesapeake","c":"United States","y":36.6778,"x":-76.3024},{"n":"Fuji","c":"Japan","y":35.1614,"x":138.6764},{"n":"Hapur","c":"India","y":28.7437,"x":77.7628},{"n":"Bahir Dar","c":"Ethiopia","y":11.585,"x":37.39},{"n":"Manisa","c":"Turkey","y":38.6131,"x":27.4258},{"n":"Tanga","c":"Tanzania","y":-5.0667,"x":39.1},{"n":"Sabzevar","c":"Iran","y":36.2167,"x":57.6667},{"n":"Ramgundam","c":"India","y":18.8,"x":79.45},{"n":"Porto","c":"Portugal","y":41.1495,"x":-8.6108},{"n":"Baruta","c":"Venezuela","y":10.4335,"x":-66.8754},{"n":"Tacloban","c":"Philippines","y":11.2444,"x":125.0039},{"n":"Itaborai","c":"Brazil","y":-22.7475,"x":-42.8558},{"n":"Myitkyina","c":"Myanmar","y":25.3867,"x":97.3936},{"n":"Barnstable","c":"United States","y":41.6722,"x":-70.3599},{"n":"Haeju","c":"Korea, North","y":38.0333,"x":125.7167},{"n":"Petah Tiqwa","c":"Israel","y":32.0833,"x":34.8833},{"n":"Norfolk","c":"United States","y":36.8945,"x":-76.259},{"n":"Gonzalez Catan","c":"Argentina","y":-34.7708,"x":-58.6464},{"n":"Sete Lagoas","c":"Brazil","y":-19.4658,"x":-44.2469},{"n":"Tarapoto","c":"Peru","y":-6.4833,"x":-76.3667},{"n":"Zhangping","c":"China","y":25.2938,"x":117.4148},{"n":"San Juan del Rio","c":"Mexico","y":20.3833,"x":-99.9833},{"n":"Sao Carlos","c":"Brazil","y":-22.0178,"x":-47.8908},{"n":"Fremont","c":"United States","y":37.5265,"x":-121.9852},{"n":"Halle","c":"Germany","y":51.4828,"x":11.9697},{"n":"Sao Leopoldo","c":"Brazil","y":-29.76,"x":-51.1469},{"n":"Arakawa","c":"Japan","y":35.7333,"x":139.7833},{"n":"Duzce","c":"Turkey","y":40.8417,"x":31.1583},{"n":"Anju","c":"Korea, North","y":39.6167,"x":125.6667},{"n":"Divinopolis","c":"Brazil","y":-20.1389,"x":-44.8839},{"n":"Aarhus","c":"Denmark","y":56.1572,"x":10.2107},{"n":"Kennewick","c":"United States","y":46.1978,"x":-119.1732},{"n":"Hobart","c":"Australia","y":-42.8806,"x":147.325},{"n":"Atushi","c":"China","y":39.7114,"x":76.1753},{"n":"Chimoio","c":"Mozambique","y":-19.1167,"x":33.45},{"n":"Limassol","c":"Cyprus","y":34.675,"x":33.0443},{"n":"Garland","c":"United States","y":32.91,"x":-96.6305},{"n":"Magdeburg","c":"Germany","y":52.1278,"x":11.6292},{"n":"Irving","c":"United States","y":32.8584,"x":-96.9702},{"n":"Hachimancho","c":"Japan","y":40.51,"x":141.54},{"n":"Longueuil","c":"Canada","y":45.5333,"x":-73.5167},{"n":"Mokpo","c":"Korea, South","y":34.7936,"x":126.3886},{"n":"Kosice","c":"Slovakia","y":48.7167,"x":21.25},{"n":"`Ajman","c":"United Arab Emirates","y":25.3994,"x":55.4797},{"n":"Lille","c":"France","y":50.6278,"x":3.0583},{"n":"Banda Aceh","c":"Indonesia","y":5.55,"x":95.3175},{"n":"Shenmu","c":"China","y":38.827,"x":110.499},{"n":"Le Havre","c":"France","y":49.49,"x":0.1},{"n":"Taiping","c":"Malaysia","y":4.85,"x":100.7333},{"n":"P'yong-dong","c":"Korea, North","y":39.25,"x":125.85},{"n":"Springs","c":"South Africa","y":-26.2547,"x":28.4428},{"n":"Ivano-Frankivsk","c":"Ukraine","y":48.9228,"x":24.7106},{"n":"As Sib","c":"Oman","y":23.6802,"x":58.1825},{"n":"Narayanganj","c":"Bangladesh","y":23.6167,"x":90.5},{"n":"Maradi","c":"Niger","y":13.4916,"x":7.0964},{"n":"Wuyishan","c":"China","y":27.7562,"x":118.0267},{"n":"Sato","c":"Japan","y":33.1631,"x":129.7177},{"n":"Amol","c":"Iran","y":36.4669,"x":52.3569},{"n":"Quilmes","c":"Argentina","y":-34.7167,"x":-58.2667},{"n":"Mirpur Khas","c":"Pakistan","y":25.5269,"x":69.0111},{"n":"Nizhnekamsk","c":"Russia","y":55.6333,"x":51.8167},{"n":"Visalia","c":"United States","y":36.3276,"x":-119.3269},{"n":"Al Jubayl","c":"Saudi Arabia","y":27.0046,"x":49.646},{"n":"Pathein","c":"Myanmar","y":16.7667,"x":94.7333},{"n":"Secunderabad","c":"India","y":17.45,"x":78.5},{"n":"Neya","c":"Japan","y":34.7661,"x":135.6281},{"n":"Chishui","c":"China","y":28.5902,"x":105.6946},{"n":"Centurion","c":"South Africa","y":-25.8603,"x":28.1894},{"n":"Atlantic City","c":"United States","y":39.3797,"x":-74.4527},{"n":"Uluberiya","c":"India","y":22.47,"x":88.11},{"n":"Shakhty","c":"Russia","y":47.7,"x":40.2333},{"n":"Pakdasht","c":"Iran","y":35.4817,"x":51.6803},{"n":"Granada","c":"Spain","y":37.1781,"x":-3.6008},{"n":"Abha","c":"Saudi Arabia","y":18.2167,"x":42.5},{"n":"Ibb","c":"Yemen","y":13.9759,"x":44.1709},{"n":"Garoua","c":"Cameroon","y":9.3,"x":13.4},{"n":"Bole","c":"China","y":44.898,"x":82.0726},{"n":"Ganda","c":"Angola","y":-13.0167,"x":14.6333},{"n":"Elche","c":"Spain","y":38.2669,"x":-0.6983},{"n":"Najafabad","c":"Iran","y":32.6342,"x":51.3667},{"n":"Bayamo","c":"Cuba","y":20.3817,"x":-76.6428},{"n":"Porbandar","c":"India","y":21.6425,"x":69.6047},{"n":"Kamianske","c":"Ukraine","y":48.5076,"x":34.6132},{"n":"Borujerd","c":"Iran","y":33.8972,"x":48.7514},{"n":"Paradise","c":"United States","y":36.0807,"x":-115.1369},{"n":"Singaraja","c":"Indonesia","y":-8.1152,"x":115.0944},{"n":"Macae","c":"Brazil","y":-22.3708,"x":-41.7869},{"n":"Miri","c":"Malaysia","y":4.4147,"x":114.0089},{"n":"Machala","c":"Ecuador","y":-3.2667,"x":-79.9667},{"n":"Longquan","c":"China","y":28.0733,"x":119.1277},{"n":"Monclova","c":"Mexico","y":26.9103,"x":-101.4222},{"n":"Puducherry","c":"India","y":11.93,"x":79.83},{"n":"Olongapo","c":"Philippines","y":14.8333,"x":120.2833},{"n":"Messina","c":"Italy","y":38.1936,"x":15.5542},{"n":"Kremenchuk","c":"Ukraine","y":49.0775,"x":33.4239},{"n":"Nashua","c":"United States","y":42.7491,"x":-71.491},{"n":"Santarem","c":"Brazil","y":-2.4431,"x":-54.7083},{"n":"Badalona","c":"Spain","y":41.4333,"x":2.2333},{"n":"Okara","c":"Pakistan","y":30.81,"x":73.4597},{"n":"Talisay","c":"Philippines","y":10.25,"x":123.8333},{"n":"Hialeah","c":"United States","y":25.8696,"x":-80.3046},{"n":"Saidpur","c":"Bangladesh","y":25.8004,"x":89},{"n":"York","c":"United States","y":39.9651,"x":-76.7315},{"n":"Saga","c":"Japan","y":33.2667,"x":130.3},{"n":"Burnaby","c":"Canada","y":49.2667,"x":-122.9667},{"n":"Rancagua","c":"Chile","y":-34.1654,"x":-70.7398},{"n":"Dzerzhinsk","c":"Russia","y":56.2333,"x":43.45},{"n":"Milton Keynes","c":"United Kingdom","y":52.04,"x":-0.76},{"n":"Marilia","c":"Brazil","y":-22.2139,"x":-49.9458},{"n":"Bratsk","c":"Russia","y":56.1667,"x":101.6167},{"n":"Jiayuguan","c":"China","y":39.8112,"x":98.2862},{"n":"Indaiatuba","c":"Brazil","y":-23.0903,"x":-47.2181},{"n":"Envigado","c":"Colombia","y":6.1719,"x":-75.5803},{"n":"Freiburg im Breisgau","c":"Germany","y":47.9947,"x":7.8497},{"n":"Eloy Alfaro","c":"Ecuador","y":-2.1733,"x":-79.8311},{"n":"Maracanau","c":"Brazil","y":-3.8769,"x":-38.6258},{"n":"Ageoshimo","c":"Japan","y":35.9775,"x":139.5933},{"n":"Qarchak","c":"Iran","y":35.4394,"x":51.5689},{"n":"Neuquen","c":"Argentina","y":-38.9573,"x":-68.0455},{"n":"Banfield","c":"Argentina","y":-34.75,"x":-58.3833},{"n":"Cabo Frio","c":"Brazil","y":-22.8789,"x":-42.0189},{"n":"Singkawang","c":"Indonesia","y":0.9,"x":108.9833},{"n":"Orsk","c":"Russia","y":51.2,"x":58.6167},{"n":"Vizianagaram","c":"India","y":18.1167,"x":83.4167},{"n":"North Hempstead","c":"United States","y":40.7912,"x":-73.6688},{"n":"Evansville","c":"United States","y":37.9881,"x":-87.5341},{"n":"Cotia","c":"Brazil","y":-23.6039,"x":-46.9189},{"n":"Pali","c":"India","y":25.7725,"x":73.3233},{"n":"Noginsk","c":"Russia","y":64.4833,"x":91.2333},{"n":"Kropyvnytskyi","c":"Ukraine","y":48.5103,"x":32.2667},{"n":"Czestochowa","c":"Poland","y":50.8096,"x":19.1222},{"n":"Rondonopolis","c":"Brazil","y":-16.4708,"x":-54.6358},{"n":"Guantanamo","c":"Cuba","y":20.1383,"x":-75.2061},{"n":"Krefeld","c":"Germany","y":51.3333,"x":6.5667},{"n":"Tanza","c":"Philippines","y":14.3944,"x":120.8531},{"n":"Marilao","c":"Philippines","y":14.7581,"x":120.9481},{"n":"Taito","c":"Japan","y":35.7126,"x":139.78},{"n":"Kolpino","c":"Russia","y":59.73,"x":30.65},{"n":"Burgas","c":"Bulgaria","y":42.5,"x":27.4667},{"n":"Puerto Vallarta","c":"Mexico","y":20.6667,"x":-105.2667},{"n":"Avondale","c":"United States","y":33.3858,"x":-112.3236},{"n":"Nyala","c":"Sudan","y":12.05,"x":24.8833},{"n":"Brownsville","c":"United States","y":25.998,"x":-97.4565},{"n":"Dasoguz","c":"Turkmenistan","y":41.8167,"x":59.9831},{"n":"Turkistan","c":"Kazakhstan","y":43.3,"x":68.2436},{"n":"Probolinggo","c":"Indonesia","y":-7.75,"x":113.2167},{"n":"Jacarei","c":"Brazil","y":-23.305,"x":-45.9658},{"n":"Gusau","c":"Nigeria","y":12.1704,"x":6.66},{"n":"Buenavista","c":"Mexico","y":19.6083,"x":-99.1694},{"n":"Quetzaltenango","c":"Guatemala","y":14.8333,"x":-91.5167},{"n":"Tarrasa","c":"Spain","y":41.5611,"x":2.0081},{"n":"Araraquara","c":"Brazil","y":-21.7939,"x":-48.1758},{"n":"Angarsk","c":"Russia","y":52.5667,"x":103.9167},{"n":"Sousse","c":"Tunisia","y":35.8333,"x":10.6333},{"n":"Nagercoil","c":"India","y":8.17,"x":77.43},{"n":"Heroica Nogales","c":"Mexico","y":31.3186,"x":-110.9458},{"n":"Apapa","c":"Nigeria","y":6.4489,"x":3.3589},{"n":"Nyanza","c":"Rwanda","y":-2.3496,"x":29.74},{"n":"Itapevi","c":"Brazil","y":-23.5489,"x":-46.9342},{"n":"Bac Lieu","c":"Vietnam","y":9.2833,"x":105.7167},{"n":"Varamin","c":"Iran","y":35.2714,"x":51.6511},{"n":"Padangsidempuan","c":"Indonesia","y":1.3667,"x":99.2667},{"n":"Karnal","c":"India","y":29.6804,"x":76.97},{"n":"Mubi","c":"Nigeria","y":10.2686,"x":13.267},{"n":"Toamasina","c":"Madagascar","y":-18.1492,"x":49.4023},{"n":"Campeche","c":"Mexico","y":19.85,"x":-90.5306},{"n":"Korolev","c":"Russia","y":55.9167,"x":37.8167},{"n":"Dourados","c":"Brazil","y":-22.2208,"x":-54.8058},{"n":"Hunchun","c":"China","y":42.8679,"x":130.3585},{"n":"Tampere","c":"Finland","y":61.4981,"x":23.7608},{"n":"Minamiozuma","c":"Japan","y":36.2404,"x":137.97},{"n":"Blagoveshchensk","c":"Russia","y":50.2578,"x":127.5364},{"n":"Velikiy Novgorod","c":"Russia","y":58.521,"x":31.2758},{"n":"Longjin","c":"China","y":22.8711,"x":113.0684},{"n":"Ashdod","c":"Israel","y":31.7978,"x":34.6503},{"n":"Carlos Manuel de Cespedes","c":"Cuba","y":21.5767,"x":-78.2775},{"n":"Nigde","c":"Turkey","y":37.9667,"x":34.6792},{"n":"Chapeco","c":"Brazil","y":-27.0958,"x":-52.6178},{"n":"Sandton","c":"South Africa","y":-26.107,"x":28.0517},{"n":"Tanjore","c":"India","y":10.8,"x":79.15},{"n":"Staryy Oskol","c":"Russia","y":51.2981,"x":37.835},{"n":"Itajai","c":"Brazil","y":-26.9078,"x":-48.6619},{"n":"Puri","c":"India","y":19.8,"x":85.8167},{"n":"Cartago","c":"Costa Rica","y":9.8667,"x":-83.9167},{"n":"Ji'an Shi","c":"China","y":41.1231,"x":126.1815},{"n":"Soledad de Graciano Sanchez","c":"Mexico","y":22.1833,"x":-100.9333},{"n":"Presidente Prudente","c":"Brazil","y":-22.1258,"x":-51.3889},{"n":"Jose C. Paz","c":"Argentina","y":-34.5167,"x":-58.7667},{"n":"Ternopil","c":"Ukraine","y":49.5667,"x":25.6},{"n":"Rufisque","c":"Senegal","y":14.7167,"x":-17.2667},{"n":"Formosa","c":"Argentina","y":-26.1847,"x":-58.1758},{"n":"Sabadell","c":"Spain","y":41.5483,"x":2.1075},{"n":"Gueckedou","c":"Guinea","y":8.5667,"x":-10.1333},{"n":"Sambhal","c":"India","y":28.58,"x":78.55},{"n":"Polokwane","c":"South Africa","y":-23.9,"x":29.45},{"n":"Neyshabur","c":"Iran","y":36.22,"x":58.82},{"n":"Sidon","c":"Lebanon","y":33.5606,"x":35.3981},{"n":"Radom","c":"Poland","y":51.4036,"x":21.1567},{"n":"Lutsk","c":"Ukraine","y":50.7478,"x":25.3244},{"n":"Oviedo","c":"Spain","y":43.36,"x":-5.845},{"n":"Gulfport","c":"United States","y":30.4271,"x":-89.0703},{"n":"Saveh","c":"Iran","y":35.0211,"x":50.3564},{"n":"La Vega","c":"Dominican Republic","y":19.2242,"x":-70.5283},{"n":"Appleton","c":"United States","y":44.2779,"x":-88.3891},{"n":"Khomeyni Shahr","c":"Iran","y":32.7,"x":51.5211},{"n":"Juazeiro","c":"Brazil","y":-9.4139,"x":-40.5028},{"n":"Itabuna","c":"Brazil","y":-14.7858,"x":-39.28},{"n":"Al Khubar","c":"Saudi Arabia","y":26.3,"x":50.2167},{"n":"Islington","c":"United Kingdom","y":51.544,"x":-0.1027},{"n":"Cordoba","c":"Mexico","y":18.8942,"x":-96.9347},{"n":"Ciudad Acuna","c":"Mexico","y":29.3242,"x":-100.9317},{"n":"Tulua","c":"Colombia","y":4.0847,"x":-76.1986},{"n":"Mainz","c":"Germany","y":50,"x":8.2667},{"n":"Hortolandia","c":"Brazil","y":-22.8583,"x":-47.22},{"n":"Bitung","c":"Indonesia","y":1.4472,"x":125.1978},{"n":"Naihati","c":"India","y":22.9,"x":88.42},{"n":"Petrel","c":"Spain","y":38.4789,"x":-0.7967},{"n":"Damietta","c":"Egypt","y":31.4167,"x":31.8214},{"n":"Manta","c":"Ecuador","y":-0.95,"x":-80.7162},{"n":"Butembo","c":"Congo (Kinshasa)","y":0.1251,"x":29.299},{"n":"San Miguel","c":"El Salvador","y":13.4833,"x":-88.1833},{"n":"San Pedro de Macoris","c":"Dominican Republic","y":18.4572,"x":-69.3061},{"n":"Netanya","c":"Israel","y":32.3328,"x":34.86},{"n":"Bremerton","c":"United States","y":47.5436,"x":-122.7122},{"n":"Alor Setar","c":"Malaysia","y":6.1167,"x":100.3667},{"n":"Hickory","c":"United States","y":35.7425,"x":-81.323},{"n":"Luton","c":"United Kingdom","y":51.8783,"x":-0.4147},{"n":"Tacoma","c":"United States","y":47.2431,"x":-122.4531},{"n":"Laayoune","c":"Morocco","y":27.15,"x":-13.2},{"n":"Aberdeen","c":"United Kingdom","y":57.15,"x":-2.11},{"n":"Lubeck","c":"Germany","y":53.8697,"x":10.6864},{"n":"Denov","c":"Uzbekistan","y":38.2772,"x":67.8872},{"n":"Matrah","c":"Oman","y":23.6167,"x":58.5667},{"n":"Qostanay","c":"Kazakhstan","y":53.2144,"x":63.6246},{"n":"Banjarbaru","c":"Indonesia","y":-3.4667,"x":114.75},{"n":"Sa Dec","c":"Vietnam","y":10.3105,"x":105.7397},{"n":"Norwich","c":"United Kingdom","y":52.63,"x":1.297},{"n":"Gujiao","c":"China","y":37.9069,"x":112.17},{"n":"Cartagena","c":"Spain","y":37.6,"x":-0.9819},{"n":"Petropavl","c":"Kazakhstan","y":54.8622,"x":69.1408},{"n":"Marg`ilon","c":"Uzbekistan","y":40.4667,"x":71.7167},{"n":"Gangneung","c":"Korea, South","y":37.7556,"x":128.8961},{"n":"San Bernardino","c":"United States","y":34.1417,"x":-117.2946},{"n":"Cua","c":"Venezuela","y":10.1667,"x":-66.8833},{"n":"Meycauayan","c":"Philippines","y":14.7333,"x":120.95},{"n":"Vantaa","c":"Finland","y":60.3,"x":25.0333},{"n":"As Samawah","c":"Iraq","y":31.3167,"x":45.2833},{"n":"Ormoc","c":"Philippines","y":11.0167,"x":124.6167},{"n":"College Station","c":"United States","y":30.5852,"x":-96.296},{"n":"Golmud","c":"China","y":36.4028,"x":94.9042},{"n":"Kalamazoo","c":"United States","y":42.2749,"x":-85.5882},{"n":"Regina","c":"Canada","y":50.4547,"x":-104.6067},{"n":"Thousand Oaks","c":"United States","y":34.1914,"x":-118.8755},{"n":"La Victoria","c":"Venezuela","y":10.2278,"x":-67.3336},{"n":"Shimla","c":"India","y":31.1033,"x":77.1722},{"n":"Mohammedia","c":"Morocco","y":33.6833,"x":-7.3833},{"n":"Babruysk","c":"Belarus","y":53.15,"x":29.2333},{"n":"Roanoke","c":"United States","y":37.2785,"x":-79.958},{"n":"Osan","c":"Korea, South","y":37.145,"x":127.0694},{"n":"Geneva","c":"Switzerland","y":46.2,"x":6.15},{"n":"Fontana","c":"United States","y":34.0968,"x":-117.4599},{"n":"Sikasso","c":"Mali","y":11.3167,"x":-5.6667},{"n":"Alvorada","c":"Brazil","y":-29.99,"x":-51.0839},{"n":"Warnes","c":"Bolivia","y":-17.5103,"x":-63.1647},{"n":"Ciudad Madero","c":"Mexico","y":22.25,"x":-97.8333},{"n":"Oberhausen","c":"Germany","y":51.4699,"x":6.8514},{"n":"El Tigre","c":"Venezuela","y":8.8858,"x":-64.2611},{"n":"Jerez de la Frontera","c":"Spain","y":36.6817,"x":-6.1378},{"n":"Jalalabad","c":"Afghanistan","y":34.4303,"x":70.4528},{"n":"Moreno Valley","c":"United States","y":33.9244,"x":-117.2045},{"n":"Sidi Bel Abbes","c":"Algeria","y":35.2,"x":-0.6333},{"n":"Limbe","c":"Cameroon","y":4.0167,"x":9.2167},{"n":"Kure","c":"Japan","y":34.2492,"x":132.5658},{"n":"Tumaco","c":"Colombia","y":1.8067,"x":-78.7647},{"n":"Padova","c":"Italy","y":45.4064,"x":11.8778},{"n":"Pamplona","c":"Spain","y":42.8167,"x":-1.65},{"n":"Arroyo Naranjo","c":"Cuba","y":23.0436,"x":-82.3328},{"n":"Ploiesti","c":"Romania","y":44.9386,"x":26.0225},{"n":"Criciuma","c":"Brazil","y":-28.6775,"x":-49.3697},{"n":"Metepec","c":"Mexico","y":19.2511,"x":-99.6047},{"n":"Rio Grande","c":"Brazil","y":-32.035,"x":-52.0989},{"n":"Pskov","c":"Russia","y":57.8167,"x":28.3333},{"n":"Bila Tserkva","c":"Ukraine","y":49.7956,"x":30.1167},{"n":"Chungju","c":"Korea, South","y":36.9706,"x":127.9322},{"n":"Babylon","c":"United States","y":40.6924,"x":-73.3585},{"n":"Tunja","c":"Colombia","y":5.5403,"x":-73.3614},{"n":"Barrancabermeja","c":"Colombia","y":7.0675,"x":-73.8472},{"n":"Cachoeiro de Itapemirim","c":"Brazil","y":-20.8489,"x":-41.1128},{"n":"Santa Cruz","c":"Spain","y":28.4667,"x":-16.25},{"n":"San-Pedro","c":"Côte D’Ivoire","y":4.7704,"x":-6.64},{"n":"Bukit Mertajam","c":"Malaysia","y":5.3631,"x":100.4667},{"n":"Ijebu-Ode","c":"Nigeria","y":6.8204,"x":3.92},{"n":"Cork","c":"Ireland","y":51.9,"x":-8.4731},{"n":"Guarenas","c":"Venezuela","y":10.4739,"x":-66.5383},{"n":"Taisheng","c":"China","y":23.2938,"x":113.353},{"n":"Rostock","c":"Germany","y":54.0833,"x":12.1333},{"n":"Dongning","c":"China","y":44.0608,"x":131.1187},{"n":"Moratuwa","c":"Sri Lanka","y":6.7804,"x":79.88},{"n":"Burutu","c":"Nigeria","y":5.3533,"x":5.5083},{"n":"Ich'on","c":"Korea, South","y":37.2792,"x":127.4425},{"n":"Puerto Cabello","c":"Venezuela","y":10.4667,"x":-68.0167},{"n":"Beersheba","c":"Israel","y":31.2589,"x":34.7978},{"n":"Nasim Shahr","c":"Iran","y":35.5644,"x":51.1647},{"n":"North Port","c":"United States","y":27.0577,"x":-82.1975},{"n":"Almere","c":"Netherlands","y":52.3758,"x":5.2256},{"n":"Lubuklinggau","c":"Indonesia","y":-3.2967,"x":102.8617},{"n":"Qina","c":"Egypt","y":26.1667,"x":32.7167},{"n":"Mary","c":"Turkmenistan","y":37.6,"x":61.8333},{"n":"Fargo","c":"United States","y":46.8652,"x":-96.8292},{"n":"Huangyan","c":"China","y":28.65,"x":121.25},{"n":"Santa Clara","c":"Cuba","y":22.4067,"x":-79.9531},{"n":"Kharagpur","c":"India","y":22.3302,"x":87.3237},{"n":"Northcote","c":"New Zealand","y":-36.7913,"x":174.7758},{"n":"Waitakere","c":"New Zealand","y":-36.849,"x":174.543},{"n":"Monywa","c":"Myanmar","y":22.1083,"x":95.1358},{"n":"Dindigul","c":"India","y":10.35,"x":77.95},{"n":"Morogoro","c":"Tanzania","y":-6.8242,"x":37.6633},{"n":"Green Bay","c":"United States","y":44.515,"x":-87.9896},{"n":"Cidade de Nacala","c":"Mozambique","y":-14.55,"x":40.6833},{"n":"Talca","c":"Chile","y":-35.4266,"x":-71.6661},{"n":"Portoviejo","c":"Ecuador","y":-1.0544,"x":-80.4544},{"n":"Spring Valley","c":"United States","y":36.0987,"x":-115.2619},{"n":"Pingzhen","c":"Taiwan","y":24.9439,"x":121.2161},{"n":"Linz","c":"Austria","y":48.3,"x":14.2833},{"n":"Trieste","c":"Italy","y":45.6503,"x":13.7703},{"n":"Phan Thiet","c":"Vietnam","y":10.9375,"x":108.1583},{"n":"Kalemie","c":"Congo (Kinshasa)","y":-5.9147,"x":29.1939},{"n":"Biskra","c":"Algeria","y":34.85,"x":5.7333},{"n":"Kamirenjaku","c":"Japan","y":35.6833,"x":139.5594},{"n":"Ingraj Bazar","c":"India","y":25,"x":88.15},{"n":"Bani Suwayf","c":"Egypt","y":29.0667,"x":31.0833},{"n":"Ellore","c":"India","y":16.7,"x":81.1},{"n":"Leon","c":"Spain","y":42.6056,"x":-5.57},{"n":"Mytishchi","c":"Russia","y":55.9167,"x":37.7333},{"n":"Zanzibar","c":"Tanzania","y":-6.1667,"x":39.2},{"n":"Jiutai","c":"China","y":44.1447,"x":125.8443},{"n":"Qa'em Shahr","c":"Iran","y":36.4611,"x":52.8606},{"n":"Bolu","c":"Turkey","y":40.7333,"x":31.6},{"n":"Amarillo","c":"United States","y":35.1988,"x":-101.8311},{"n":"Ziguinchor","c":"Senegal","y":12.5833,"x":-16.2667},{"n":"Ternate","c":"Indonesia","y":0.7833,"x":127.3667},{"n":"Puqi","c":"China","y":29.7204,"x":113.88},{"n":"Bene Beraq","c":"Israel","y":32.0807,"x":34.8338},{"n":"Passo Fundo","c":"Brazil","y":-28.2628,"x":-52.4069},{"n":"La Ceiba","c":"Honduras","y":15.78,"x":-86.7878},{"n":"Yachiyo","c":"Japan","y":35.7225,"x":140.0997},{"n":"Coquimbo","c":"Chile","y":-29.9532,"x":-71.338},{"n":"Mandi Burewala","c":"Pakistan","y":30.15,"x":72.6833},{"n":"Marawi City","c":"Philippines","y":8,"x":124.3},{"n":"Erfurt","c":"Germany","y":50.9787,"x":11.0328},{"n":"Groningen","c":"Netherlands","y":53.2167,"x":6.5667},{"n":"Biysk","c":"Russia","y":52.5167,"x":85.1667},{"n":"Charleroi","c":"Belgium","y":50.4167,"x":4.4442},{"n":"La Romana","c":"Dominican Republic","y":18.43,"x":-68.97},{"n":"Mazabuka","c":"Zambia","y":-15.8667,"x":27.7667},{"n":"Poza Rica de Hidalgo","c":"Mexico","y":20.5333,"x":-97.45},{"n":"Torun","c":"Poland","y":53.0167,"x":18.6167},{"n":"Tanjungpinang","c":"Indonesia","y":0.9188,"x":104.4554},{"n":"Zhubei","c":"Taiwan","y":24.8333,"x":121},{"n":"Djougou","c":"Benin","y":9.7004,"x":1.68},{"n":"Luxor","c":"Egypt","y":25.6969,"x":32.6422},{"n":"Tarakan","c":"Indonesia","y":3.3,"x":117.6333},{"n":"Santa Barbara","c":"United States","y":34.4285,"x":-119.7202},{"n":"Gainesville","c":"United States","y":29.6804,"x":-82.3458},{"n":"Las Tunas","c":"Cuba","y":20.9667,"x":-76.95},{"n":"Al Khawr","c":"Qatar","y":25.69,"x":51.51},{"n":"Lyubertsy","c":"Russia","y":55.6814,"x":37.8939},{"n":"Matsue","c":"Japan","y":35.4681,"x":133.0486},{"n":"Sosnowiec","c":"Poland","y":50.3,"x":19.1667},{"n":"Arica","c":"Chile","y":-18.4784,"x":-70.3211},{"n":"Al Khums","c":"Libya","y":32.6604,"x":14.26},{"n":"Almeria","c":"Spain","y":36.8403,"x":-2.4681},{"n":"Huacho","c":"Peru","y":-11.1083,"x":-77.6083},{"n":"Debrecen","c":"Hungary","y":47.53,"x":21.6392},{"n":"Nandyal","c":"India","y":15.48,"x":78.48},{"n":"Cajamarca","c":"Peru","y":-7.1644,"x":-78.5106},{"n":"Huntington","c":"United States","y":40.8522,"x":-73.3824},{"n":"Croydon","c":"United Kingdom","y":51.3727,"x":-0.1099},{"n":"Lashkar Gah","c":"Afghanistan","y":31.5938,"x":64.3716},{"n":"Haldia","c":"India","y":22.0257,"x":88.0583},{"n":"San Pablo de las Salinas","c":"Mexico","y":19.6656,"x":-99.0917},{"n":"Mai'Adua","c":"Nigeria","y":13.1906,"x":8.2117},{"n":"Jacobabad","c":"Pakistan","y":28.2769,"x":68.4514},{"n":"Tokat","c":"Turkey","y":40.3097,"x":36.5542},{"n":"Qyzylorda","c":"Kazakhstan","y":44.8479,"x":65.4999},{"n":"Nema","c":"Mauritania","y":16.6171,"x":-7.25},{"n":"Olympia","c":"United States","y":47.0417,"x":-122.8959},{"n":"Gurgaon","c":"India","y":28.45,"x":77.02},{"n":"Guacara","c":"Venezuela","y":10.2261,"x":-67.877},{"n":"Liege","c":"Belgium","y":50.6397,"x":5.5706},{"n":"Oulu","c":"Finland","y":65.0142,"x":25.4719},{"n":"Frisco","c":"United States","y":33.1555,"x":-96.8215},{"n":"Isidro Casanova","c":"Argentina","y":-34.7,"x":-58.5833},{"n":"Maimanah","c":"Afghanistan","y":35.9302,"x":64.7701},{"n":"Yonkers","c":"United States","y":40.9466,"x":-73.8674},{"n":"Rio Claro","c":"Brazil","y":-22.4108,"x":-47.5608},{"n":"Norwich","c":"United States","y":41.5495,"x":-72.0882},{"n":"Az Zawiyah","c":"Libya","y":32.7604,"x":12.72},{"n":"Bulandshahr","c":"India","y":28.4104,"x":77.8484},{"n":"Kasama","c":"Zambia","y":-10.1996,"x":31.1799},{"n":"Puerto Cortes","c":"Honduras","y":15.8833,"x":-87.95},{"n":"Kouribga","c":"Morocco","y":32.88,"x":-6.9},{"n":"Lahad Datu","c":"Malaysia","y":5.03,"x":118.34},{"n":"Bojnurd","c":"Iran","y":37.4667,"x":57.3333},{"n":"Pagadian","c":"Philippines","y":7.8333,"x":123.4333},{"n":"Fuenlabrada","c":"Spain","y":40.2833,"x":-3.8},{"n":"Banja Luka","c":"Bosnia And Herzegovina","y":44.7667,"x":17.1833},{"n":"Huntington Beach","c":"United States","y":33.696,"x":-118.0025},{"n":"Baharampur","c":"India","y":24.1,"x":88.25},{"n":"Taranto","c":"Italy","y":40.4181,"x":17.2408},{"n":"Brescia","c":"Italy","y":45.5389,"x":10.2203},{"n":"Logrono","c":"Spain","y":42.465,"x":-2.4456},{"n":"Ashino","c":"Japan","y":42.975,"x":144.3747},{"n":"Martapura","c":"Indonesia","y":-3.4135,"x":114.8365},{"n":"Chakradharpur","c":"India","y":22.7,"x":85.63},{"n":"Deltona","c":"United States","y":28.905,"x":-81.2137},{"n":"Chilpancingo","c":"Mexico","y":17.55,"x":-99.5},{"n":"Naga City","c":"Philippines","y":13.6167,"x":123.1667},{"n":"Richmond","c":"Canada","y":49.1667,"x":-123.1333},{"n":"Holon","c":"Israel","y":32.0167,"x":34.7667},{"n":"Gemena","c":"Congo (Kinshasa)","y":3.25,"x":19.7667},{"n":"Tocuyito","c":"Venezuela","y":10.0889,"x":-68.0922},{"n":"Oradea","c":"Romania","y":47.0722,"x":21.9211},{"n":"Legazpi City","c":"Philippines","y":13.1333,"x":123.7333},{"n":"Hedong","c":"China","y":42.5404,"x":129.0039},{"n":"Madhyamgram","c":"India","y":22.7,"x":88.45},{"n":"Bhiwani","c":"India","y":28.7833,"x":76.1333},{"n":"Burhanpur","c":"India","y":21.3004,"x":76.13},{"n":"Higashi-Hiroshima","c":"Japan","y":34.4167,"x":132.7333},{"n":"Mbanza-Ngungu","c":"Congo (Kinshasa)","y":-5.2496,"x":14.86},{"n":"Huanuco","c":"Peru","y":-9.9294,"x":-76.2397},{"n":"Hino","c":"Japan","y":35.6714,"x":139.395},{"n":"Zipaquira","c":"Colombia","y":5.0247,"x":-74.0014},{"n":"Beni Mellal","c":"Morocco","y":32.3394,"x":-6.3608},{"n":"Prokopyevsk","c":"Russia","y":53.8833,"x":86.7167},{"n":"Rajin","c":"Korea, North","y":42.3444,"x":130.3844},{"n":"Ghandinagar","c":"India","y":23.22,"x":72.68},{"n":"Eldoret","c":"Kenya","y":0.5167,"x":35.2833},{"n":"Kusong","c":"Korea, North","y":39.9667,"x":125.1667},{"n":"Suhaj","c":"Egypt","y":26.5606,"x":31.6917},{"n":"Khammam","c":"India","y":17.25,"x":80.15},{"n":"Kirikkale","c":"Turkey","y":39.8417,"x":33.5139},{"n":"Parma","c":"Italy","y":44.8015,"x":10.328},{"n":"Suzuka","c":"Japan","y":34.8822,"x":136.5842},{"n":"Brikama","c":"Gambia, The","y":13.2804,"x":-16.6599},{"n":"Acarigua","c":"Venezuela","y":9.5597,"x":-69.2019},{"n":"Hugli","c":"India","y":22.9,"x":88.39},{"n":"Viransehir","c":"Turkey","y":37.2306,"x":39.7653},{"n":"San Luis Rio Colorado","c":"Mexico","y":32.4767,"x":-114.7625},{"n":"Iskandar","c":"Uzbekistan","y":41.5507,"x":69.6807},{"n":"Tempe","c":"United States","y":33.3881,"x":-111.9318},{"n":"Naka","c":"Japan","y":37.4504,"x":138.86},{"n":"Leganes","c":"Spain","y":40.3281,"x":-3.7644},{"n":"Kenema","c":"Sierra Leone","y":7.8833,"x":-11.1833},{"n":"La Serena","c":"Chile","y":-29.9027,"x":-71.252},{"n":"Overland Park","c":"United States","y":38.887,"x":-94.687},{"n":"Bandar-e Bushehr","c":"Iran","y":28.9667,"x":50.8333},{"n":"Prato","c":"Italy","y":43.8808,"x":11.0966},{"n":"Cholula de Rivadabia","c":"Mexico","y":19.0633,"x":-98.3064},{"n":"Anseong","c":"Korea, South","y":37.0078,"x":127.2797},{"n":"Yuzhno-Sakhalinsk","c":"Russia","y":46.95,"x":142.7333},{"n":"Richmond Hill","c":"Canada","y":43.8667,"x":-79.4333},{"n":"Dese","c":"Ethiopia","y":11.1333,"x":39.6333},{"n":"Gorontalo","c":"Indonesia","y":0.5411,"x":123.0594},{"n":"Grand Prairie","c":"United States","y":32.6872,"x":-97.0209},{"n":"Quelimane","c":"Mozambique","y":-17.8764,"x":36.8872},{"n":"Tebessa","c":"Algeria","y":35.4,"x":8.1167},{"n":"Kumagaya","c":"Japan","y":36.1472,"x":139.3886},{"n":"Al Jahra'","c":"Kuwait","y":29.3375,"x":47.6581},{"n":"Karaman","c":"Turkey","y":37.1833,"x":33.2167},{"n":"La Plata","c":"Argentina","y":-34.9333,"x":-57.95},{"n":"San Juan Sacatepequez","c":"Guatemala","y":14.7189,"x":-90.6442},{"n":"Cap-Haitien","c":"Haiti","y":19.75,"x":-72.2},{"n":"Oakville","c":"Canada","y":43.45,"x":-79.6833},{"n":"Sunrise Manor","c":"United States","y":36.1785,"x":-115.049},{"n":"Muar","c":"Malaysia","y":2.05,"x":102.56},{"n":"Godoy Cruz","c":"Argentina","y":-32.9167,"x":-68.8333},{"n":"Mus","c":"Turkey","y":38.7333,"x":41.4911},{"n":"Hyesan","c":"Korea, North","y":41.4,"x":128.1833},{"n":"Kielce","c":"Poland","y":50.8725,"x":20.6319},{"n":"Arapiraca","c":"Brazil","y":-9.7525,"x":-36.6611},{"n":"Valencia","c":"Philippines","y":7.9,"x":125.0833},{"n":"Aracatuba","c":"Brazil","y":-21.2089,"x":-50.4328},{"n":"Swindon","c":"United Kingdom","y":51.56,"x":-1.78},{"n":"Castanhal","c":"Brazil","y":-1.2969,"x":-47.9219},{"n":"Guanare","c":"Venezuela","y":9.0436,"x":-69.7489},{"n":"Waco","c":"United States","y":31.5598,"x":-97.1881},{"n":"Basildon","c":"United Kingdom","y":51.5761,"x":0.4886},{"n":"Madiun","c":"Indonesia","y":-7.63,"x":111.5231},{"n":"Valera","c":"Venezuela","y":9.3206,"x":-70.6078},{"n":"Mahbubnagar","c":"India","y":16.7333,"x":77.9833},{"n":"Pasuruan","c":"Indonesia","y":-7.6406,"x":112.9065},{"n":"Aydin","c":"Turkey","y":37.8481,"x":27.8453},{"n":"Shibin al Kawm","c":"Egypt","y":30.592,"x":30.9},{"n":"Armavir","c":"Russia","y":45,"x":41.1167},{"n":"Nova Friburgo","c":"Brazil","y":-22.2819,"x":-42.5308},{"n":"Donostia","c":"Spain","y":43.32,"x":-1.98},{"n":"Balakovo","c":"Russia","y":52.039,"x":47.7839},{"n":"Batu","c":"Indonesia","y":-7.8672,"x":112.5239},{"n":"Anjomachi","c":"Japan","y":34.9667,"x":137.0833},{"n":"Salinas","c":"United States","y":36.6884,"x":-121.6317},{"n":"Mwene-Ditu","c":"Congo (Kinshasa)","y":-7,"x":23.45},{"n":"Son Tay","c":"Vietnam","y":21.1382,"x":105.505},{"n":"Ferraz de Vasconcelos","c":"Brazil","y":-23.5411,"x":-46.3689},{"n":"Santa Barbara d'Oeste","c":"Brazil","y":-22.7539,"x":-47.4139},{"n":"Saddiqabad","c":"Pakistan","y":28.3006,"x":70.1302},{"n":"Rybinsk","c":"Russia","y":58.05,"x":38.8333},{"n":"Chongju","c":"Korea, North","y":39.65,"x":125.3333},{"n":"Hagen","c":"Germany","y":51.3594,"x":7.475},{"n":"Ngaoundere","c":"Cameroon","y":7.3214,"x":13.5839},{"n":"Potosi","c":"Bolivia","y":-19.5833,"x":-65.75},{"n":"San Carlos City","c":"Philippines","y":15.9281,"x":120.3489},{"n":"Pak Kret","c":"Thailand","y":13.9125,"x":100.4978},{"n":"Waterbury","c":"United States","y":41.5583,"x":-73.0361},{"n":"Donghua","c":"China","y":35.2175,"x":106.6545},{"n":"Parakou","c":"Benin","y":9.34,"x":2.62},{"n":"Mutare","c":"Zimbabwe","y":-18.9728,"x":32.6694},{"n":"Mataro","c":"Spain","y":41.5421,"x":2.4445},{"n":"Narsingdi","c":"Bangladesh","y":23.9,"x":90.7167},{"n":"Pinar del Rio","c":"Cuba","y":22.4122,"x":-83.6719},{"n":"Clarksville","c":"United States","y":36.5695,"x":-87.342},{"n":"Raiganj","c":"India","y":25.6167,"x":88.1167},{"n":"Tachikawa","c":"Japan","y":35.6939,"x":139.4194},{"n":"Prabumulih","c":"Indonesia","y":-3.4328,"x":104.2356},{"n":"Angra dos Reis","c":"Brazil","y":-23.0069,"x":-44.3178},{"n":"San Francisco de Macoris","c":"Dominican Republic","y":19.3,"x":-70.25},{"n":"Al Hasakah","c":"Syria","y":36.5117,"x":40.7422},{"n":"Turku","c":"Finland","y":60.4517,"x":22.27},{"n":"Guatire","c":"Venezuela","y":10.4717,"x":-66.5406},{"n":"Iquique","c":"Chile","y":-20.2141,"x":-70.1524},{"n":"Cedar Rapids","c":"United States","y":41.9665,"x":-91.6782},{"n":"Kofu","c":"Japan","y":35.6667,"x":138.5667},{"n":"San Diego","c":"Venezuela","y":10.2558,"x":-67.9539},{"n":"Gharyan","c":"Libya","y":32.1669,"x":13.0167},{"n":"Tottori","c":"Japan","y":35.5011,"x":134.235},{"n":"Bournemouth","c":"United Kingdom","y":50.72,"x":-1.88},{"n":"Chaedok","c":"Korea, North","y":40.6723,"x":129.2027},{"n":"Joetsu","c":"Japan","y":37.15,"x":138.2333},{"n":"Prizren","c":"Kosovo","y":42.2167,"x":20.7333},{"n":"Sioux Falls","c":"United States","y":43.5397,"x":-96.732},{"n":"Kairouan","c":"Tunisia","y":35.6833,"x":10.1},{"n":"Shendi","c":"Sudan","y":16.6805,"x":33.42},{"n":"Izuo","c":"Japan","y":34.4836,"x":135.4236},{"n":"Reims","c":"France","y":49.2628,"x":4.0347},{"n":"Modena","c":"Italy","y":44.6458,"x":10.9257},{"n":"Ed Damazin","c":"Sudan","y":11.7704,"x":34.35},{"n":"Khujand","c":"Tajikistan","y":40.2833,"x":69.6167},{"n":"El Jadid","c":"Morocco","y":33.2566,"x":-8.5025},{"n":"Dunhuang","c":"China","y":40.1411,"x":94.6616},{"n":"Mahesana","c":"India","y":23.6,"x":72.4},{"n":"Guri","c":"Korea, South","y":37.5947,"x":127.1428},{"n":"Jamaame","c":"Somalia","y":0.0722,"x":42.7506},{"n":"Panabo","c":"Philippines","y":7.3,"x":125.6833},{"n":"Breda","c":"Netherlands","y":51.5875,"x":4.775},{"n":"Adoni","c":"India","y":15.63,"x":77.28},{"n":"Semnan","c":"Iran","y":35.5833,"x":53.3833},{"n":"Temirtau","c":"Kazakhstan","y":50.0667,"x":72.9667},{"n":"Basel","c":"Switzerland","y":47.5606,"x":7.5906},{"n":"Yei","c":"South Sudan","y":4.0904,"x":30.68},{"n":"Ontario","c":"United States","y":34.0393,"x":-117.6064},{"n":"Luzhang","c":"China","y":25.8519,"x":98.8562},{"n":"Hagerstown","c":"United States","y":39.6401,"x":-77.7217},{"n":"Al Qamishli","c":"Syria","y":37.05,"x":41.2167},{"n":"Ibirite","c":"Brazil","y":-20.0219,"x":-44.0589},{"n":"Manzanillo","c":"Mexico","y":19.0522,"x":-104.3158},{"n":"Erie","c":"United States","y":42.1168,"x":-80.0733},{"n":"Teresopolis","c":"Brazil","y":-22.4119,"x":-42.9658},{"n":"Vancouver","c":"United States","y":45.6366,"x":-122.5967},{"n":"Nampa","c":"United States","y":43.5845,"x":-116.5631},{"n":"Fardis","c":"Iran","y":35.7247,"x":50.9883},{"n":"Fianarantsoa","c":"Madagascar","y":-21.4333,"x":47.0833},{"n":"Banjar","c":"Indonesia","y":-7.3667,"x":108.5333},{"n":"Severodvinsk","c":"Russia","y":64.5667,"x":39.85},{"n":"Rzeszow","c":"Poland","y":50.05,"x":22},{"n":"Siguiri","c":"Guinea","y":11.4189,"x":-9.1644},{"n":"Calbayog City","c":"Philippines","y":12.0667,"x":124.6},{"n":"Bhusaval","c":"India","y":21.02,"x":75.83},{"n":"Trondheim","c":"Norway","y":63.44,"x":10.4},{"n":"Aqtau","c":"Kazakhstan","y":43.65,"x":51.15},{"n":"Nis","c":"Serbia","y":43.3192,"x":21.8961},{"n":"Araguaina","c":"Brazil","y":-7.1908,"x":-48.2069},{"n":"Narashino","c":"Japan","y":35.6808,"x":140.0267},{"n":"Abakan","c":"Russia","y":53.7167,"x":91.4167},{"n":"Burlington","c":"Canada","y":43.3167,"x":-79.8},{"n":"Bahraigh","c":"India","y":27.6204,"x":81.6699},{"n":"Potsdam","c":"Germany","y":52.4,"x":13.0667},{"n":"Bo","c":"Sierra Leone","y":7.9564,"x":-11.74},{"n":"Worthing","c":"United Kingdom","y":50.8147,"x":-0.3714},{"n":"Pinrang","c":"Indonesia","y":-3.7857,"x":119.6522},{"n":"Guarapuava","c":"Brazil","y":-25.395,"x":-51.4578},{"n":"Spartanburg","c":"United States","y":34.9437,"x":-81.9257},{"n":"Braila","c":"Romania","y":45.2692,"x":27.9575},{"n":"Gastonia","c":"United States","y":35.2494,"x":-81.1853},{"n":"Amadora","c":"Portugal","y":38.75,"x":-9.2333},{"n":"Braga","c":"Portugal","y":41.5333,"x":-8.4167},{"n":"Fort Lauderdale","c":"United States","y":26.1412,"x":-80.1464},{"n":"Kabankalan","c":"Philippines","y":9.9833,"x":122.8167},{"n":"Reggio di Calabria","c":"Italy","y":38.1144,"x":15.65},{"n":"Tonk","c":"India","y":26.1505,"x":75.79},{"n":"Berazategui","c":"Argentina","y":-34.7679,"x":-58.2133},{"n":"Khowy","c":"Iran","y":38.5503,"x":44.9519},{"n":"Sirsa","c":"India","y":29.4904,"x":75.03},{"n":"Tangail","c":"Bangladesh","y":24.25,"x":89.92},{"n":"Jaunpur","c":"India","y":25.7333,"x":82.6833},{"n":"Dosquebradas","c":"Colombia","y":4.8361,"x":-75.6761},{"n":"Saarbrucken","c":"Germany","y":49.2333,"x":7},{"n":"Santo Tomas","c":"Philippines","y":14.0833,"x":121.1833},{"n":"Petropavlovsk-Kamchatskiy","c":"Russia","y":53.0167,"x":158.65},{"n":"Sittwe","c":"Myanmar","y":20.1444,"x":92.8969},{"n":"Epe","c":"Nigeria","y":6.5833,"x":4},{"n":"Phan Rang-Thap Cham","c":"Vietnam","y":11.5643,"x":108.9886},{"n":"Jaragua do Sul","c":"Brazil","y":-26.4858,"x":-49.0669},{"n":"Jima","c":"Ethiopia","y":7.6667,"x":36.8333},{"n":"Townsville","c":"Australia","y":-19.2564,"x":146.8183},{"n":"Lhokseumawe","c":"Indonesia","y":5.18,"x":97.1506},{"n":"Gliwice","c":"Poland","y":50.3011,"x":18.6498},{"n":"Funtua","c":"Nigeria","y":11.5204,"x":7.32},{"n":"Hinthada","c":"Myanmar","y":17.6483,"x":95.4679},{"n":"Turbo","c":"Colombia","y":8.0931,"x":-76.7283},{"n":"La Rioja","c":"Argentina","y":-29.4131,"x":-66.8558},{"n":"Canakkale","c":"Turkey","y":40.15,"x":26.4},{"n":"Madanapalle","c":"India","y":13.55,"x":78.5},{"n":"Palopo","c":"Indonesia","y":-3,"x":120.2},{"n":"Ayacucho","c":"Peru","y":-13.1631,"x":-74.2244},{"n":"Obuase","c":"Ghana","y":6.2,"x":-1.6833},{"n":"Alleppey","c":"India","y":9.5004,"x":76.37},{"n":"Ipswich","c":"United Kingdom","y":52.0594,"x":1.1556},{"n":"Boma","c":"Congo (Kinshasa)","y":-5.85,"x":13.05},{"n":"Tiaret","c":"Algeria","y":35.3667,"x":1.3167},{"n":"Edirne","c":"Turkey","y":41.6781,"x":26.5594},{"n":"Longjing","c":"China","y":42.77,"x":129.4197},{"n":"Split","c":"Croatia","y":43.51,"x":16.45},{"n":"Ilheus","c":"Brazil","y":-14.7889,"x":-39.0489},{"n":"Lorain","c":"United States","y":41.4409,"x":-82.184},{"n":"Barra Mansa","c":"Brazil","y":-22.5439,"x":-44.1708},{"n":"Klerksdorp","c":"South Africa","y":-26.8667,"x":26.6667},{"n":"Murfreesboro","c":"United States","y":35.8492,"x":-86.4119},{"n":"High Point","c":"United States","y":35.9907,"x":-79.9938},{"n":"Hamm","c":"Germany","y":51.6667,"x":7.8167},{"n":"Tarija","c":"Bolivia","y":-21.5317,"x":-64.7311},{"n":"Al `Arish","c":"Egypt","y":31.1249,"x":33.8006},{"n":"Sao Jose de Ribamar","c":"Brazil","y":-2.5619,"x":-44.0539},{"n":"Paita","c":"Peru","y":-5.0667,"x":-81.1},{"n":"Yopal","c":"Colombia","y":5.3306,"x":-72.3906},{"n":"Salatiga","c":"Indonesia","y":-7.3095,"x":110.4901},{"n":"Newport News","c":"United States","y":37.1051,"x":-76.5185},{"n":"Torbali","c":"Turkey","y":38.1619,"x":27.3583},{"n":"Langsa","c":"Indonesia","y":4.4667,"x":97.95},{"n":"Bade","c":"Taiwan","y":24.9575,"x":121.2989},{"n":"Bida","c":"Nigeria","y":9.0804,"x":6.01},{"n":"Salalah","c":"Oman","y":17.0197,"x":54.0897},{"n":"Santander","c":"Spain","y":43.4628,"x":-3.805},{"n":"Matosinhos","c":"Portugal","y":41.2077,"x":-8.6674},{"n":"Birjand","c":"Iran","y":32.8664,"x":59.2211},{"n":"Lin'an","c":"China","y":23.6236,"x":102.8097},{"n":"Chicoloapan","c":"Mexico","y":19.4167,"x":-98.9},{"n":"Vellore","c":"India","y":12.9204,"x":79.15},{"n":"Dam Dam","c":"India","y":22.62,"x":88.42},{"n":"Bejaia","c":"Algeria","y":36.7511,"x":5.0642},{"n":"Rancho Cucamonga","c":"United States","y":34.1248,"x":-117.5666},{"n":"Norilsk","c":"Russia","y":69.3333,"x":88.2167},{"n":"Baranavichy","c":"Belarus","y":53.1167,"x":25.9833},{"n":"Nossa Senhora do Socorro","c":"Brazil","y":-10.855,"x":-37.1258},{"n":"Hemet","c":"United States","y":33.7341,"x":-116.9969},{"n":"Yangmei","c":"Taiwan","y":24.9167,"x":121.15},{"n":"Ciudad Valles","c":"Mexico","y":21.9833,"x":-99.0167},{"n":"Kadugli","c":"Sudan","y":11.01,"x":29.7},{"n":"Les Cayes","c":"Haiti","y":18.2004,"x":-73.75},{"n":"Alcorcon","c":"Spain","y":40.35,"x":-3.8333},{"n":"Piraeus","c":"Greece","y":37.943,"x":23.6469},{"n":"Sunderland","c":"United Kingdom","y":54.9061,"x":-1.3811},{"n":"Linhares","c":"Brazil","y":-19.3987,"x":-40.0651},{"n":"Letpandan","c":"Myanmar","y":17.7866,"x":95.7507},{"n":"Zabrze","c":"Poland","y":50.3,"x":18.7833},{"n":"Almada","c":"Portugal","y":38.6803,"x":-9.1583},{"n":"Ilford","c":"United Kingdom","y":51.5588,"x":0.0855},{"n":"Plzen","c":"Czechia","y":49.7414,"x":13.3825},{"n":"Cuautla","c":"Mexico","y":18.8167,"x":-98.95},{"n":"Rio Verde","c":"Brazil","y":-17.7978,"x":-50.9278},{"n":"Santa Cruz","c":"United States","y":36.9789,"x":-122.0346},{"n":"Saint-Louis","c":"Senegal","y":16.0333,"x":-16.5},{"n":"Ait Melloul","c":"Morocco","y":30.3342,"x":-9.4972},{"n":"Toulon","c":"France","y":43.1258,"x":5.9306},{"n":"Ciudad del Carmen","c":"Mexico","y":18.6333,"x":-91.8333},{"n":"Danbury","c":"United States","y":41.4016,"x":-73.471},{"n":"Castellon de la Plana","c":"Spain","y":39.9831,"x":-0.0331},{"n":"Oeiras","c":"Portugal","y":38.697,"x":-9.3017},{"n":"Dagupan City","c":"Philippines","y":16.0333,"x":120.3333},{"n":"Catumbela","c":"Angola","y":-12.4167,"x":13.5333},{"n":"Eregli","c":"Turkey","y":41.2583,"x":31.425},{"n":"Oceanside","c":"United States","y":33.2247,"x":-117.3083},{"n":"Shibirghan","c":"Afghanistan","y":36.665,"x":65.752},{"n":"Chandannagar","c":"India","y":22.8667,"x":88.3833},{"n":"Harar","c":"Ethiopia","y":9.32,"x":42.15},{"n":"Middlesbrough","c":"United Kingdom","y":54.5767,"x":-1.2355},{"n":"Tyre","c":"Lebanon","y":33.2667,"x":35.2},{"n":"Koronadal","c":"Philippines","y":6.5,"x":124.85},{"n":"Olsztyn","c":"Poland","y":53.78,"x":20.4942},{"n":"Cuddalore","c":"India","y":11.75,"x":79.75},{"n":"Getafe","c":"Spain","y":40.3047,"x":-3.7311},{"n":"Maragheh","c":"Iran","y":37.3919,"x":46.2392},{"n":"Obiraki","c":"Japan","y":40.57,"x":140.47},{"n":"Tebingtinggi","c":"Indonesia","y":3.3283,"x":99.1625},{"n":"Comitan","c":"Mexico","y":16.2511,"x":-92.1342},{"n":"Takaoka","c":"Japan","y":42.6504,"x":141.55},{"n":"Sirjan","c":"Iran","y":29.47,"x":55.73},{"n":"Tanauan","c":"Philippines","y":14.0833,"x":121.15},{"n":"Menemen","c":"Turkey","y":38.6,"x":27.0667},{"n":"Malaybalay","c":"Philippines","y":8.1575,"x":125.1278},{"n":"Elk Grove","c":"United States","y":38.416,"x":-121.3842},{"n":"Syzran","c":"Russia","y":53.1667,"x":48.4667},{"n":"Carupano","c":"Venezuela","y":10.6722,"x":-63.2403},{"n":"Saint-Etienne","c":"France","y":45.4347,"x":4.3903},{"n":"Luziania","c":"Brazil","y":-16.2528,"x":-47.95},{"n":"Lagos de Moreno","c":"Mexico","y":21.3564,"x":-101.9292},{"n":"Albacete","c":"Spain","y":38.9956,"x":-1.8558},{"n":"Ludwigshafen","c":"Germany","y":49.4811,"x":8.4353},{"n":"Leon","c":"Nicaragua","y":12.4333,"x":-86.8833},{"n":"Chirala","c":"India","y":15.82,"x":80.35},{"n":"Titagarh","c":"India","y":22.74,"x":88.37},{"n":"Bielsko-Biala","c":"Poland","y":49.8225,"x":19.0444},{"n":"Beppucho","c":"Japan","y":42.9304,"x":143.17},{"n":"General Mariano Alvarez","c":"Philippines","y":14.3,"x":121},{"n":"Bytom","c":"Poland","y":50.347,"x":18.923},{"n":"Linjiang","c":"China","y":41.8082,"x":126.9137},{"n":"Ha Long","c":"Vietnam","y":20.9514,"x":107.0852},{"n":"Deo","c":"India","y":24.6561,"x":84.4356},{"n":"Tiantoujiao","c":"China","y":23.0236,"x":114.0927},{"n":"Pembroke Pines","c":"United States","y":26.0128,"x":-80.3382},{"n":"Tlemcen","c":"Algeria","y":34.8828,"x":-1.3167},{"n":"Hitachi","c":"Japan","y":36.6,"x":140.65},{"n":"Shahin Shahr","c":"Iran","y":32.8639,"x":51.5475},{"n":"Orekhovo-Borisovo Yuzhnoye","c":"Russia","y":55.6029,"x":37.7328},{"n":"Vallejo","c":"United States","y":38.1133,"x":-122.2358},{"n":"Bertoua","c":"Cameroon","y":4.5833,"x":13.6833},{"n":"Moca","c":"Dominican Republic","y":19.3833,"x":-70.5167},{"n":"Banyuwangi","c":"Indonesia","y":-8.195,"x":114.3696},{"n":"Mulheim","c":"Germany","y":51.4275,"x":6.8825},{"n":"Sacaba","c":"Bolivia","y":-17.4042,"x":-66.0408},{"n":"Carpina","c":"Brazil","y":-7.8508,"x":-35.2547},{"n":"Reggio Emilia","c":"Italy","y":44.7,"x":10.6333},{"n":"Banha","c":"Egypt","y":30.4628,"x":31.1797},{"n":"Barrie","c":"Canada","y":44.3711,"x":-79.6769},{"n":"Krasnogorsk","c":"Russia","y":55.8167,"x":37.3333},{"n":"Kaolack","c":"Senegal","y":14.152,"x":-16.0726},{"n":"Izumo","c":"Japan","y":35.3681,"x":132.755},{"n":"Burgos","c":"Spain","y":42.35,"x":-3.6822},{"n":"Niiza","c":"Japan","y":35.7933,"x":139.5653},{"n":"Guanajuato","c":"Mexico","y":21.0178,"x":-101.2567},{"n":"Francisco Morato","c":"Brazil","y":-23.2817,"x":-46.7425},{"n":"Garden Grove","c":"United States","y":33.7787,"x":-117.9601},{"n":"Volgodonsk","c":"Russia","y":47.5167,"x":42.15},{"n":"Bago","c":"Philippines","y":10.5388,"x":122.8384},{"n":"Toledo","c":"Philippines","y":10.3833,"x":123.65},{"n":"Kamensk-Ural'skiy","c":"Russia","y":56.4,"x":61.9333},{"n":"Enterprise","c":"United States","y":36.0164,"x":-115.2208},{"n":"Kohat","c":"Pakistan","y":33.5869,"x":71.4414},{"n":"Cuauhtemoc","c":"Mexico","y":28.405,"x":-106.8667},{"n":"Medford","c":"United States","y":42.3372,"x":-122.8537},{"n":"Loja","c":"Ecuador","y":-3.9906,"x":-79.205},{"n":"Hamilton","c":"New Zealand","y":-37.7833,"x":175.2833},{"n":"Ussuriysk","c":"Russia","y":43.8,"x":131.95},{"n":"Uvira","c":"Congo (Kinshasa)","y":-3.4044,"x":29.1379},{"n":"Portmore","c":"Jamaica","y":17.9667,"x":-76.8667},{"n":"Machilipatnam","c":"India","y":16.1667,"x":81.1333},{"n":"Bordj Bou Arreridj","c":"Algeria","y":36.0667,"x":4.7667},{"n":"Nukus","c":"Uzbekistan","y":42.4647,"x":59.6022},{"n":"Malayer","c":"Iran","y":34.2942,"x":48.82},{"n":"Timon","c":"Brazil","y":-5.0939,"x":-42.8369},{"n":"N'Zerekore","c":"Guinea","y":7.76,"x":-8.83},{"n":"Cary","c":"United States","y":35.782,"x":-78.8191},{"n":"Kluang","c":"Malaysia","y":2.0336,"x":103.3194},{"n":"Novocherkassk","c":"Russia","y":47.4222,"x":40.0939},{"n":"Metouia","c":"Tunisia","y":33.96,"x":10},{"n":"Nishio","c":"Japan","y":34.8667,"x":137.0667},{"n":"Marysville","c":"United States","y":48.0809,"x":-122.1561},{"n":"Digos","c":"Philippines","y":6.75,"x":125.35},{"n":"San Luis","c":"Argentina","y":-33.2994,"x":-66.3392},{"n":"Puerto Montt","c":"Chile","y":-41.4718,"x":-72.9396},{"n":"Corona","c":"United States","y":33.8616,"x":-117.5649},{"n":"Oldenburg","c":"Germany","y":53.1439,"x":8.2139},{"n":"Medinipur","c":"India","y":22.4333,"x":87.3333},{"n":"Fenglu","c":"China","y":24.6728,"x":102.9149},{"n":"Al Marj","c":"Libya","y":32.5005,"x":20.83},{"n":"Sosan","c":"Korea, South","y":36.7817,"x":126.4522},{"n":"Ocala","c":"United States","y":29.178,"x":-82.1511},{"n":"Uppsala","c":"Sweden","y":59.8498,"x":17.6389},{"n":"Gondomar","c":"Portugal","y":41.15,"x":-8.5333},{"n":"Santa Rita","c":"Venezuela","y":10.2003,"x":-67.5514},{"n":"San Juan","c":"Dominican Republic","y":18.81,"x":-71.23},{"n":"Jamalpur","c":"Bangladesh","y":24.9004,"x":89.95},{"n":"Pocos de Caldas","c":"Brazil","y":-21.7878,"x":-46.5608},{"n":"Fredericksburg","c":"United States","y":38.2992,"x":-77.4872},{"n":"Sobral","c":"Brazil","y":-3.6861,"x":-40.3497},{"n":"Baramula","c":"India","y":34.2,"x":74.34},{"n":"Roxas City","c":"Philippines","y":11.5833,"x":122.75},{"n":"Ambato","c":"Ecuador","y":-1.2417,"x":-78.6197},{"n":"Sorsogon","c":"Philippines","y":12.9667,"x":124},{"n":"Higuey","c":"Dominican Republic","y":18.6181,"x":-68.7111},{"n":"Tanjungbalai","c":"Indonesia","y":2.9667,"x":99.8},{"n":"Huich'on","c":"Korea, North","y":40.1711,"x":126.2758},{"n":"Mahabad","c":"Iran","y":36.765,"x":45.721},{"n":"Itapecerica da Serra","c":"Brazil","y":-23.7172,"x":-46.8494},{"n":"Sao Caetano do Sul","c":"Brazil","y":-23.6228,"x":-46.5508},{"n":"Basuo","c":"China","y":19.102,"x":108.6391},{"n":"Zlatoust","c":"Russia","y":55.1667,"x":59.6667},{"n":"Rustenburg","c":"South Africa","y":-25.6667,"x":27.2336},{"n":"Patra","c":"Greece","y":38.25,"x":21.7333},{"n":"Riohacha","c":"Colombia","y":11.5442,"x":-72.9069},{"n":"Catape","c":"Angola","y":-13.7667,"x":15.0833},{"n":"Nador","c":"Morocco","y":35.1667,"x":-2.9333},{"n":"Itu","c":"Brazil","y":-23.2642,"x":-47.2992},{"n":"Offa","c":"Nigeria","y":8.1491,"x":4.7207},{"n":"Fatehpur","c":"India","y":25.8804,"x":80.8},{"n":"Arar","c":"Saudi Arabia","y":30.9833,"x":41.0167},{"n":"Ha Tinh","c":"Vietnam","y":18.3431,"x":105.9058},{"n":"Kandy","c":"Sri Lanka","y":7.297,"x":80.6385},{"n":"Al Kufah","c":"Iraq","y":32.03,"x":44.4},{"n":"Kimberley","c":"South Africa","y":-28.7386,"x":24.7586},{"n":"Iwata","c":"Japan","y":34.7178,"x":137.8514},{"n":"Kismaayo","c":"Somalia","y":-0.3603,"x":42.5489},{"n":"Tenali","c":"India","y":16.243,"x":80.64},{"n":"Skikda","c":"Algeria","y":36.8667,"x":6.9},{"n":"Nantou","c":"Taiwan","y":23.9167,"x":120.6833},{"n":"Siirt","c":"Turkey","y":37.8417,"x":41.9458},{"n":"Kuytun","c":"China","y":44.4196,"x":84.9012},{"n":"Osnabruck","c":"Germany","y":52.2789,"x":8.0431},{"n":"Korfez","c":"Turkey","y":40.7706,"x":29.7661},{"n":"Perugia","c":"Italy","y":43.1121,"x":12.3888},{"n":"Udipi","c":"India","y":13.3322,"x":74.7461},{"n":"Oshawa","c":"Canada","y":43.9,"x":-78.85},{"n":"Klaipeda","c":"Lithuania","y":55.7075,"x":21.1428},{"n":"Leverkusen","c":"Germany","y":51.0333,"x":6.9833},{"n":"Idlib","c":"Syria","y":35.9333,"x":36.6333},{"n":"Bechar","c":"Algeria","y":31.6333,"x":-2.2},{"n":"Warrington","c":"United Kingdom","y":53.3917,"x":-2.5972},{"n":"Sitalpur","c":"India","y":27.63,"x":80.75},{"n":"Caxias","c":"Brazil","y":-4.8589,"x":-43.3558},{"n":"Cienfuegos","c":"Cuba","y":22.1456,"x":-80.4364},{"n":"Proddatur","c":"India","y":14.73,"x":78.55},{"n":"Conjeeveram","c":"India","y":12.8308,"x":79.7078},{"n":"Saqqez","c":"Iran","y":36.2497,"x":46.2733},{"n":"Zhanlicun","c":"China","y":23.2893,"x":116.2672},{"n":"Huddersfield","c":"United Kingdom","y":53.645,"x":-1.7798},{"n":"Fukang","c":"China","y":44.1523,"x":87.9793},{"n":"Slough","c":"United Kingdom","y":51.51,"x":-0.59},{"n":"Bhisho","c":"South Africa","y":-32.8494,"x":27.4381},{"n":"Chillan","c":"Chile","y":-36.6067,"x":-72.1033},{"n":"Abu Hulayfah","c":"Kuwait","y":29.3333,"x":48},{"n":"Odense","c":"Denmark","y":55.4004,"x":10.3833},{"n":"Metro","c":"Indonesia","y":-5.1167,"x":105.3},{"n":"Ramat Gan","c":"Israel","y":32.07,"x":34.8235},{"n":"Muridke","c":"Pakistan","y":31.802,"x":74.255},{"n":"Ipswich","c":"Australia","y":-27.6167,"x":152.7667},{"n":"Ruse","c":"Bulgaria","y":43.8445,"x":25.9539},{"n":"Myingyan","c":"Myanmar","y":21.4618,"x":95.3914},{"n":"Haarlem","c":"Netherlands","y":52.3803,"x":4.6406},{"n":"Tema","c":"Ghana","y":5.6667,"x":-0.0167},{"n":"Piedras Negras","c":"Mexico","y":28.7,"x":-100.5231},{"n":"Itapetininga","c":"Brazil","y":-23.5917,"x":-48.0531},{"n":"Pocheon","c":"Korea, South","y":37.8944,"x":127.1992},{"n":"Turgutlu","c":"Turkey","y":38.5,"x":27.7},{"n":"Navsari","c":"India","y":20.8504,"x":72.92},{"n":"Wau","c":"South Sudan","y":7.7,"x":27.9833},{"n":"Ube","c":"Japan","y":33.9517,"x":131.2467},{"n":"Golcuk","c":"Turkey","y":40.6667,"x":29.8333},{"n":"Muzaffargarh","c":"Pakistan","y":30.0703,"x":71.1933},{"n":"Kebili","c":"Tunisia","y":33.705,"x":8.965},{"n":"Jizzax","c":"Uzbekistan","y":40.1167,"x":67.85},{"n":"Atyrau","c":"Kazakhstan","y":47.1167,"x":51.8833},{"n":"Simao","c":"China","y":22.7807,"x":100.9782},{"n":"Mostar","c":"Bosnia And Herzegovina","y":43.3494,"x":17.8125},{"n":"El Geneina","c":"Sudan","y":13.45,"x":22.44},{"n":"Jinggang","c":"China","y":23.2723,"x":113.2182},{"n":"Bandar-e Mahshahr","c":"Iran","y":30.5589,"x":49.1981},{"n":"Manchester","c":"United States","y":42.9848,"x":-71.4447},{"n":"Anaco","c":"Venezuela","y":9.4333,"x":-64.4667},{"n":"Sullana","c":"Peru","y":-4.9039,"x":-80.6853},{"n":"Godhra","c":"India","y":22.7755,"x":73.6149},{"n":"Zemun","c":"Serbia","y":44.85,"x":20.4},{"n":"Jutiapa","c":"Guatemala","y":14.2828,"x":-89.8925},{"n":"Budaun","c":"India","y":28.03,"x":79.09},{"n":"Chittoor","c":"India","y":13.2,"x":79.1167},{"n":"San Martin Texmelucan de Labastida","c":"Mexico","y":19.2833,"x":-98.4333},{"n":"Andong","c":"Korea, South","y":36.5656,"x":128.725},{"n":"Ash Shatrah","c":"Iraq","y":31.4175,"x":46.1772},{"n":"Guadalajara","c":"Spain","y":40.6337,"x":-3.1674},{"n":"Rafsanjan","c":"Iran","y":30.4,"x":56},{"n":"Benoni","c":"South Africa","y":-26.1883,"x":28.3206},{"n":"Lubao","c":"Philippines","y":14.9333,"x":120.6},{"n":"Heidelberg","c":"Germany","y":49.4122,"x":8.71},{"n":"Al Ghardaqah","c":"Egypt","y":27.2578,"x":33.8117},{"n":"Salihli","c":"Turkey","y":38.4811,"x":28.1392},{"n":"Ndalatando","c":"Angola","y":-9.3,"x":14.9167},{"n":"Apeldoorn","c":"Netherlands","y":52.21,"x":5.97},{"n":"Elektrostal","c":"Russia","y":55.8,"x":38.45},{"n":"Jequie","c":"Brazil","y":-13.8578,"x":-40.0839},{"n":"Bontang","c":"Indonesia","y":0.1333,"x":117.5},{"n":"Dong Hoi","c":"Vietnam","y":17.4833,"x":106.6},{"n":"Krishnanagar","c":"India","y":23.4,"x":88.5},{"n":"Szeged","c":"Hungary","y":46.25,"x":20.1667},{"n":"Sherbrooke","c":"Canada","y":45.4,"x":-71.9},{"n":"Solingen","c":"Germany","y":51.1667,"x":7.0833},{"n":"Tacheng","c":"China","y":46.7468,"x":82.979},{"n":"Dhamar","c":"Yemen","y":14.55,"x":44.4017},{"n":"San Miguel","c":"Argentina","y":-34.5333,"x":-58.7167},{"n":"Jose Maria Ezeiza","c":"Argentina","y":-34.8333,"x":-58.5167},{"n":"Bayamon","c":"Puerto Rico","y":18.3793,"x":-66.1635},{"n":"Braganca Paulista","c":"Brazil","y":-22.9189,"x":-46.5425},{"n":"Ra's al Khaymah","c":"United Arab Emirates","y":25.7915,"x":55.9428},{"n":"Pindamonhangaba","c":"Brazil","y":-22.9239,"x":-45.4617},{"n":"Dijon","c":"France","y":47.3167,"x":5.0167},{"n":"Zhengding","c":"China","y":38.1522,"x":114.5771},{"n":"Giron","c":"Colombia","y":7.0731,"x":-73.1681},{"n":"Khost","c":"Afghanistan","y":33.3333,"x":69.9167},{"n":"Darmstadt","c":"Germany","y":49.8667,"x":8.65},{"n":"Saint-Marc","c":"Haiti","y":19.1167,"x":-72.7},{"n":"La Laguna","c":"Spain","y":28.4853,"x":-16.3167},{"n":"Arad","c":"Romania","y":46.1667,"x":21.3167},{"n":"Khanpur","c":"Pakistan","y":28.6471,"x":70.662},{"n":"Taunggyi","c":"Myanmar","y":20.7833,"x":96.9667},{"n":"Bingol","c":"Turkey","y":38.8861,"x":40.5017},{"n":"San Nicolas de los Arroyos","c":"Argentina","y":-33.3333,"x":-60.2167},{"n":"Huaycan","c":"Peru","y":-12.0139,"x":-76.825},{"n":"Bajos de Haina","c":"Dominican Republic","y":18.42,"x":-70.03},{"n":"Kramatorsk","c":"Ukraine","y":48.7208,"x":37.5556},{"n":"Livorno","c":"Italy","y":43.55,"x":10.3167},{"n":"Shahr-e Kord","c":"Iran","y":32.3256,"x":50.8644},{"n":"Talas","c":"Turkey","y":38.6833,"x":35.5667},{"n":"Ekibastuz","c":"Kazakhstan","y":51.7298,"x":75.3266},{"n":"Trece Martires City","c":"Philippines","y":14.2833,"x":120.8667},{"n":"Hat Yai","c":"Thailand","y":7.0167,"x":100.4667},{"n":"Chirchiq","c":"Uzbekistan","y":41.4667,"x":69.5833},{"n":"Catamarca","c":"Argentina","y":-28.4686,"x":-65.7792},{"n":"Jijiga","c":"Ethiopia","y":9.35,"x":42.8},{"n":"Champaign","c":"United States","y":40.1144,"x":-88.2735},{"n":"Alexandria","c":"United States","y":38.8185,"x":-77.0861},{"n":"George","c":"South Africa","y":-33.9667,"x":22.45},{"n":"Herne","c":"Germany","y":51.5426,"x":7.219},{"n":"Ravenna","c":"Italy","y":44.4178,"x":12.1994},{"n":"Higashimurayama","c":"Japan","y":35.7547,"x":139.4686},{"n":"Hayward","c":"United States","y":37.6328,"x":-122.0772},{"n":"Abaetetuba","c":"Brazil","y":-1.7178,"x":-48.8828},{"n":"Ogaki","c":"Japan","y":35.3594,"x":136.6128},{"n":"Saharsa","c":"India","y":25.88,"x":86.6},{"n":"Stara Zagora","c":"Bulgaria","y":42.4257,"x":25.6346},{"n":"Chau Doc","c":"Vietnam","y":10.7,"x":105.1167},{"n":"Guimaraes","c":"Portugal","y":41.445,"x":-8.2908},{"n":"Matsuzaka","c":"Japan","y":34.5781,"x":136.5275},{"n":"Haripur","c":"India","y":31.52,"x":75.98},{"n":"San Cristobal","c":"Mexico","y":16.7367,"x":-92.6383},{"n":"Rafael Castillo","c":"Argentina","y":-34.7167,"x":-58.6167},{"n":"Rio Cuarto","c":"Argentina","y":-33.123,"x":-64.3478},{"n":"Bonao","c":"Dominican Republic","y":18.9333,"x":-70.4},{"n":"Villeurbanne","c":"France","y":45.7667,"x":4.8803},{"n":"Villanueva","c":"Honduras","y":15.3167,"x":-88.0167},{"n":"Gojra","c":"Pakistan","y":31.15,"x":72.6833},{"n":"Teixeira de Freitas","c":"Brazil","y":-17.535,"x":-39.7419},{"n":"Lakewood","c":"United States","y":39.6977,"x":-105.1168},{"n":"Oxford","c":"United Kingdom","y":51.7519,"x":-1.2578},{"n":"Camarajibe","c":"Brazil","y":-8.0219,"x":-34.9808},{"n":"Fethiye","c":"Turkey","y":36.6206,"x":29.1142},{"n":"Uiwang","c":"Korea, South","y":37.3447,"x":126.9683},{"n":"Navojoa","c":"Mexico","y":27.0813,"x":-109.4461},{"n":"Calama","c":"Chile","y":-22.4624,"x":-68.9272},{"n":"Erzincan","c":"Turkey","y":39.7464,"x":39.4914},{"n":"Chaoshan","c":"China","y":23.0701,"x":113.8693},{"n":"Middelburg","c":"South Africa","y":-25.7684,"x":29.4783},{"n":"Lajes","c":"Brazil","y":-27.8158,"x":-50.3258},{"n":"Salzburg","c":"Austria","y":47.7972,"x":13.0477},{"n":"Mandi Bahauddin","c":"Pakistan","y":32.5861,"x":73.4917},{"n":"Zonguldak","c":"Turkey","y":41.4304,"x":31.78},{"n":"Isiro","c":"Congo (Kinshasa)","y":2.7833,"x":27.6167},{"n":"El Eulma","c":"Algeria","y":36.1528,"x":5.69},{"n":"Jiutepec","c":"Mexico","y":18.8833,"x":-99.1667},{"n":"Batumi","c":"Georgia","y":41.6458,"x":41.6417},{"n":"Pathankot","c":"India","y":32.2689,"x":75.6497},{"n":"Nazilli","c":"Turkey","y":37.9125,"x":28.3206},{"n":"Frederick","c":"United States","y":39.4336,"x":-77.4141},{"n":"Pitesti","c":"Romania","y":44.8667,"x":24.8833},{"n":"Chlef","c":"Algeria","y":36.1647,"x":1.3317},{"n":"Chetumal","c":"Mexico","y":18.5036,"x":-88.3053},{"n":"Angers","c":"France","y":47.4736,"x":-0.5542},{"n":"Hanam","c":"Korea, South","y":37.5392,"x":127.2147},{"n":"Matagalpa","c":"Nicaragua","y":12.9167,"x":-85.9167},{"n":"Vidisha","c":"India","y":23.5239,"x":77.8061},{"n":"Paranagua","c":"Brazil","y":-25.5208,"x":-48.5094},{"n":"Cam Pha","c":"Vietnam","y":21.0094,"x":107.2728},{"n":"Esmeraldas","c":"Ecuador","y":0.95,"x":-79.6667},{"n":"Kariya","c":"Japan","y":34.9893,"x":137.0021},{"n":"Lake Charles","c":"United States","y":30.2012,"x":-93.2122},{"n":"Odessa","c":"United States","y":31.8831,"x":-102.3406},{"n":"Mexico","c":"Philippines","y":15.0667,"x":120.7167},{"n":"Cagliari","c":"Italy","y":39.2167,"x":9.1167},{"n":"Zaanstad","c":"Netherlands","y":52.4697,"x":4.7767},{"n":"Hitachi-Naka","c":"Japan","y":36.3964,"x":140.5344},{"n":"Nalgonda","c":"India","y":17.05,"x":79.27},{"n":"Ordu","c":"Turkey","y":40.9833,"x":37.8833},{"n":"Tuscaloosa","c":"United States","y":33.2348,"x":-87.5267},{"n":"Horad Barysaw","c":"Belarus","y":54.226,"x":28.4922},{"n":"Souk Ahras","c":"Algeria","y":36.2864,"x":7.9511},{"n":"Neuss","c":"Germany","y":51.2003,"x":6.6939},{"n":"Rio das Ostras","c":"Brazil","y":-22.5269,"x":-41.945},{"n":"Miskolc","c":"Hungary","y":48.1,"x":20.7833},{"n":"Warner Robins","c":"United States","y":32.597,"x":-83.6529},{"n":"Bartin","c":"Turkey","y":41.6344,"x":32.3375},{"n":"Palmdale","c":"United States","y":34.5944,"x":-118.1057},{"n":"Melitopol","c":"Ukraine","y":46.8333,"x":35.3667},{"n":"Cadiz","c":"Philippines","y":10.95,"x":123.3},{"n":"Zango","c":"Nigeria","y":12.9333,"x":8.5333},{"n":"Concepcion","c":"Philippines","y":15.3249,"x":120.6554},{"n":"Hollywood","c":"United States","y":26.0294,"x":-80.1679},{"n":"Balurghat","c":"India","y":25.2167,"x":88.7667},{"n":"Midland","c":"United States","y":32.0249,"x":-102.1137},{"n":"Surigao","c":"Philippines","y":9.7833,"x":125.4833},{"n":"Dibrugarh","c":"India","y":27.4833,"x":95},{"n":"Mahajanga","c":"Madagascar","y":-15.67,"x":46.345},{"n":"Pikit","c":"Philippines","y":7.05,"x":124.6667},{"n":"Salavat","c":"Russia","y":53.3667,"x":55.9333},{"n":"Bandirma","c":"Turkey","y":40.3542,"x":27.9725},{"n":"Leesburg","c":"United States","y":28.7657,"x":-81.8996},{"n":"Tuguegarao","c":"Philippines","y":17.6167,"x":121.7167},{"n":"Gandajika","c":"Congo (Kinshasa)","y":-6.75,"x":23.9667},{"n":"Silao","c":"Mexico","y":20.9478,"x":-101.4281},{"n":"San Miguel","c":"Philippines","y":15.1458,"x":120.9783},{"n":"Regensburg","c":"Germany","y":49.0167,"x":12.0833},{"n":"Port Arthur","c":"United States","y":29.8554,"x":-93.9264},{"n":"York","c":"United Kingdom","y":53.9583,"x":-1.0803},{"n":"Palo Negro","c":"Venezuela","y":10.16,"x":-67.5582},{"n":"Almetyevsk","c":"Russia","y":54.9,"x":52.3},{"n":"Osorno","c":"Chile","y":-40.5739,"x":-73.1336},{"n":"Lucapa","c":"Angola","y":-8.4228,"x":20.7393},{"n":"Kafr ash Shaykh","c":"Egypt","y":31.1,"x":30.95},{"n":"Tama","c":"Japan","y":35.6333,"x":139.45},{"n":"Seogwipo","c":"Korea, South","y":33.2497,"x":126.56},{"n":"Tochigi","c":"Japan","y":36.3824,"x":139.7341},{"n":"Moanda","c":"Congo (Kinshasa)","y":-5.9229,"x":12.355},{"n":"Barreiras","c":"Brazil","y":-12.1528,"x":-44.99},{"n":"Tete","c":"Mozambique","y":-16.1579,"x":33.5898},{"n":"Mzuzu","c":"Malawi","y":-11.45,"x":34.0333},{"n":"Parnaiba","c":"Brazil","y":-2.905,"x":-41.7769},{"n":"Fyzabad","c":"India","y":26.7504,"x":82.17},{"n":"Harrow","c":"United Kingdom","y":51.5836,"x":-0.3464},{"n":"Poole","c":"United Kingdom","y":50.7167,"x":-1.9833},{"n":"Hoeryong","c":"Korea, North","y":42.4333,"x":129.75},{"n":"Kirsehir","c":"Turkey","y":39.145,"x":34.1608},{"n":"Muskegon","c":"United States","y":43.2281,"x":-86.2563},{"n":"Sievierodonetsk","c":"Ukraine","y":48.95,"x":38.4833},{"n":"Sinpo","c":"Korea, North","y":40.0833,"x":128.25},{"n":"Dutse","c":"Nigeria","y":11.8283,"x":9.3158},{"n":"Baliuag","c":"Philippines","y":14.95,"x":120.9},{"n":"Silchar","c":"India","y":24.7904,"x":92.79},{"n":"Macon","c":"United States","y":32.8065,"x":-83.6974},{"n":"Polomolok","c":"Philippines","y":6.2167,"x":125.0667},{"n":"Cairns","c":"Australia","y":-16.9303,"x":145.7703},{"n":"Yilan","c":"Taiwan","y":24.75,"x":121.75},{"n":"Papantla de Olarte","c":"Mexico","y":20.4478,"x":-97.32},{"n":"Dahuaishu","c":"China","y":36.2601,"x":111.6743},{"n":"Ciudad de Melilla","c":"Spain","y":35.2937,"x":-2.9383},{"n":"Shantipur","c":"India","y":23.25,"x":88.43},{"n":"Golmeh","c":"Iran","y":33.7793,"x":46.5967},{"n":"Peristeri","c":"Greece","y":38.0167,"x":23.6833},{"n":"Ueda","c":"Japan","y":36.4019,"x":138.2491},{"n":"Hindupur","c":"India","y":13.83,"x":77.49},{"n":"Sunnyvale","c":"United States","y":37.3836,"x":-122.0256},{"n":"Fengyicun","c":"China","y":23.6636,"x":116.6028},{"n":"Baubau","c":"Indonesia","y":-5.4667,"x":122.633},{"n":"Mudon","c":"Myanmar","y":16.2618,"x":97.7215},{"n":"Taza","c":"Morocco","y":34.2144,"x":-4.0088},{"n":"Settat","c":"Morocco","y":33.0023,"x":-7.6198},{"n":"Tulancingo","c":"Mexico","y":20.0833,"x":-98.3667},{"n":"Erode","c":"India","y":11.3408,"x":77.7172},{"n":"Midsayap","c":"Philippines","y":7.1917,"x":124.5333},{"n":"Gwangyang","c":"Korea, South","y":34.9403,"x":127.7017},{"n":"Tororo","c":"Uganda","y":0.6928,"x":34.1808},{"n":"Kukichuo","c":"Japan","y":36.0622,"x":139.6669},{"n":"Gonbad-e Kavus","c":"Iran","y":37.25,"x":55.1672},{"n":"Al Manaqil","c":"Sudan","y":14.2504,"x":32.98},{"n":"Miass","c":"Russia","y":55.05,"x":60.1},{"n":"Chinandega","c":"Nicaragua","y":12.6242,"x":-87.1297},{"n":"Nimes","c":"France","y":43.838,"x":4.361},{"n":"Saint Albans","c":"United Kingdom","y":51.755,"x":-0.336},{"n":"Nakhodka","c":"Russia","y":42.8167,"x":132.8833},{"n":"Quevedo","c":"Ecuador","y":-1.0333,"x":-79.45},{"n":"Bintulu","c":"Malaysia","y":3.17,"x":113.03},{"n":"Pomona","c":"United States","y":34.0585,"x":-117.7626},{"n":"Siem Reap","c":"Cambodia","y":13.3622,"x":103.8597},{"n":"Foggia","c":"Italy","y":41.4584,"x":15.5519},{"n":"Escondido","c":"United States","y":33.1347,"x":-117.0722},{"n":"Cao Lanh","c":"Vietnam","y":10.4603,"x":105.6331},{"n":"Riobamba","c":"Ecuador","y":-1.6743,"x":-78.6483},{"n":"Vryheid","c":"South Africa","y":-27.7694,"x":30.7914},{"n":"Benguela","c":"Angola","y":-12.55,"x":13.4167},{"n":"As Suwayhirah as Sahil","c":"Oman","y":24.362,"x":56.7344},{"n":"Paderborn","c":"Germany","y":51.7167,"x":8.7667},{"n":"Sayama","c":"Japan","y":35.8531,"x":139.4122},{"n":"Zamora","c":"Mexico","y":19.9833,"x":-102.2833},{"n":"Manzanillo","c":"Cuba","y":20.3397,"x":-77.1086},{"n":"Pasadena","c":"United States","y":29.6583,"x":-95.1499},{"n":"Badajoz","c":"Spain","y":38.8803,"x":-6.9753},{"n":"Talcahuano","c":"Chile","y":-36.7145,"x":-73.1141},{"n":"Patos de Minas","c":"Brazil","y":-18.5871,"x":-46.5149},{"n":"Copiapo","c":"Chile","y":-27.3665,"x":-70.3323},{"n":"M'Sila","c":"Algeria","y":35.7058,"x":4.5419},{"n":"Kragujevac","c":"Serbia","y":44.0142,"x":20.9394},{"n":"Pointe-a-Pitre","c":"Guadeloupe","y":16.2415,"x":-61.533},{"n":"Rimini","c":"Italy","y":44.0594,"x":12.5683},{"n":"Dundee","c":"United Kingdom","y":56.462,"x":-2.9707},{"n":"Ocumare del Tuy","c":"Venezuela","y":10.1136,"x":-66.7814},{"n":"Komaki","c":"Japan","y":35.2833,"x":136.9167},{"n":"Valdivia","c":"Chile","y":-39.8142,"x":-73.2459},{"n":"Gulu","c":"Uganda","y":2.7667,"x":32.3056},{"n":"Shimotoda","c":"Japan","y":35.8175,"x":139.6778},{"n":"Shahrud","c":"Iran","y":36.4086,"x":54.9733},{"n":"Kutaisi","c":"Georgia","y":42.25,"x":42.7},{"n":"Kashikishi","c":"Zambia","y":-9.3172,"x":28.7331},{"n":"Sumbawanga","c":"Tanzania","y":-7.9667,"x":31.6167},{"n":"Keren","c":"Eritrea","y":15.6804,"x":38.45},{"n":"Odivelas","c":"Portugal","y":38.8,"x":-9.1833},{"n":"Centro Habana","c":"Cuba","y":23.1333,"x":-82.3833},{"n":"New Bedford","c":"United States","y":41.6697,"x":-70.9428},{"n":"Jamuria","c":"India","y":23.7,"x":87.08},{"n":"Salamanca","c":"Spain","y":40.9667,"x":-5.6639},{"n":"Sariaya","c":"Philippines","y":13.9667,"x":121.5333},{"n":"Potchefstroom","c":"South Africa","y":-26.715,"x":27.1033},{"n":"Arnhem","c":"Netherlands","y":51.9833,"x":5.9167},{"n":"Concordia","c":"Argentina","y":-31.3922,"x":-58.0169},{"n":"Abbottabad","c":"Pakistan","y":34.15,"x":73.2167},{"n":"Delicias","c":"Mexico","y":28.1931,"x":-105.4717},{"n":"Mallawi","c":"Egypt","y":27.7306,"x":30.8425},{"n":"Agri","c":"Turkey","y":39.7225,"x":43.0544},{"n":"Amasya","c":"Turkey","y":40.65,"x":35.8333},{"n":"Lang Son","c":"Vietnam","y":21.8478,"x":106.7578},{"n":"Iruma","c":"Japan","y":35.8358,"x":139.3911},{"n":"Kastamonu","c":"Turkey","y":41.3833,"x":33.7833},{"n":"Marvdasht","c":"Iran","y":29.8742,"x":52.8025},{"n":"Marbella","c":"Spain","y":36.5167,"x":-4.8833},{"n":"Kanasin","c":"Mexico","y":20.9344,"x":-89.5578},{"n":"Chingola","c":"Zambia","y":-12.5447,"x":27.8708},{"n":"Dongsheng","c":"China","y":22.8869,"x":113.4563},{"n":"Fairfield","c":"United States","y":38.2592,"x":-122.0324},{"n":"Mostaganem","c":"Algeria","y":35.9333,"x":0.0903},{"n":"Habra","c":"India","y":22.83,"x":88.63},{"n":"Mauli","c":"India","y":30.7194,"x":76.7181},{"n":"Sibiu","c":"Romania","y":45.8,"x":24.15},{"n":"Naperville","c":"United States","y":41.7483,"x":-88.1657},{"n":"Quilpue","c":"Chile","y":-33.0498,"x":-71.4415},{"n":"Yonago","c":"Japan","y":35.4281,"x":133.3311},{"n":"Dolores Hidalgo Cuna de la Independencia Nacional","c":"Mexico","y":21.1516,"x":-100.9369},{"n":"Kopeysk","c":"Russia","y":55.1,"x":61.6167},{"n":"Luleburgaz","c":"Turkey","y":41.4056,"x":27.3569},{"n":"Al Hawiyah","c":"Saudi Arabia","y":21.4411,"x":40.4975},{"n":"Bellevue","c":"United States","y":47.5951,"x":-122.1535},{"n":"Binghamton","c":"United States","y":42.1014,"x":-75.9093},{"n":"Nchelenge","c":"Zambia","y":-9.3467,"x":28.7344},{"n":"Negombo","c":"Sri Lanka","y":7.2111,"x":79.8386},{"n":"Ambala","c":"India","y":30.3786,"x":76.7725},{"n":"Disuq","c":"Egypt","y":31.1308,"x":30.6479},{"n":"Turbat","c":"Pakistan","y":26.0031,"x":63.0544},{"n":"Mangghystau","c":"Kazakhstan","y":43.6905,"x":51.1417},{"n":"Malakal","c":"South Sudan","y":9.5333,"x":31.65},{"n":"Bacau","c":"Romania","y":46.5833,"x":26.9167},{"n":"Elkhart","c":"United States","y":41.6916,"x":-85.9628},{"n":"Topeka","c":"United States","y":39.0346,"x":-95.6955},{"n":"Mogi Guacu","c":"Brazil","y":-22.3719,"x":-46.9419},{"n":"Man","c":"Côte D’Ivoire","y":7.4004,"x":-7.55},{"n":"Joliet","c":"United States","y":41.5189,"x":-88.1499},{"n":"Pyatigorsk","c":"Russia","y":44.0333,"x":43.05},{"n":"Clermont-Ferrand","c":"France","y":45.7831,"x":3.0824},{"n":"Moshi","c":"Tanzania","y":-3.3349,"x":37.3404},{"n":"Bizerte","c":"Tunisia","y":37.2744,"x":9.8739},{"n":"Dar`a","c":"Syria","y":32.625,"x":36.105},{"n":"Rubtsovsk","c":"Russia","y":51.5167,"x":81.2},{"n":"Cam Ranh","c":"Vietnam","y":11.902,"x":109.2207},{"n":"Wamba","c":"Congo (Kinshasa)","y":2.1404,"x":27.99},{"n":"Franco da Rocha","c":"Brazil","y":-23.3286,"x":-46.7244},{"n":"Odintsovo","c":"Russia","y":55.6733,"x":37.2733},{"n":"Dadu","c":"Pakistan","y":26.7319,"x":67.775},{"n":"Sagay","c":"Philippines","y":10.9,"x":123.4167},{"n":"Balti","c":"Moldova","y":47.7617,"x":27.9289},{"n":"Misato","c":"Japan","y":35.8303,"x":139.8725},{"n":"Pleiku","c":"Vietnam","y":13.9715,"x":108.0147},{"n":"Araucaria","c":"Brazil","y":-25.5928,"x":-49.41},{"n":"San Juan","c":"Philippines","y":14.6,"x":121.0333},{"n":"Mejicanos","c":"El Salvador","y":13.7403,"x":-89.2131},{"n":"Colina","c":"Chile","y":-33.2,"x":-70.6833},{"n":"Kolomna","c":"Russia","y":55.0833,"x":38.7833},{"n":"Larisa","c":"Greece","y":39.6369,"x":22.4176},{"n":"Yima","c":"China","y":34.7473,"x":111.8609},{"n":"Santo Agostinho","c":"Brazil","y":-8.29,"x":-35.03},{"n":"Beaumont","c":"United States","y":30.0849,"x":-94.1451},{"n":"Sinop","c":"Brazil","y":-11.8639,"x":-55.5039},{"n":"Garcia","c":"Mexico","y":25.8167,"x":-100.5833},{"n":"Bani","c":"Dominican Republic","y":18.29,"x":-70.33},{"n":"Xintang","c":"China","y":22.7837,"x":113.1445},{"n":"Matanzas","c":"Cuba","y":23.0494,"x":-81.5736},{"n":"Ilagan","c":"Philippines","y":17.1333,"x":121.8833},{"n":"David","c":"Panama","y":8.4333,"x":-82.4333},{"n":"Le Mans","c":"France","y":48.0077,"x":0.1984},{"n":"San Justo","c":"Argentina","y":-34.6833,"x":-58.55},{"n":"Quchan","c":"Iran","y":37.1118,"x":58.5015},{"n":"Berezniki","c":"Russia","y":59.4167,"x":56.7833},{"n":"Porto Seguro","c":"Brazil","y":-16.45,"x":-39.065},{"n":"Shillong","c":"India","y":25.5744,"x":91.8789},{"n":"Durres","c":"Albania","y":41.3167,"x":19.45},{"n":"Yalova","c":"Turkey","y":40.6556,"x":29.275},{"n":"Huelva","c":"Spain","y":37.25,"x":-6.95},{"n":"Kusatsu","c":"Japan","y":35.0167,"x":135.9667},{"n":"Villa de Cura","c":"Venezuela","y":10.0386,"x":-67.4894},{"n":"Kakamigahara","c":"Japan","y":35.3989,"x":136.8486},{"n":"Paterson","c":"United States","y":40.9147,"x":-74.1624},{"n":"Merced","c":"United States","y":37.3057,"x":-120.4778},{"n":"Kolar","c":"India","y":13.1333,"x":78.1333},{"n":"Cape Coast","c":"Ghana","y":5.1,"x":-1.25},{"n":"Al Mukalla","c":"Yemen","y":14.5333,"x":49.1333},{"n":"Flores","c":"Guatemala","y":16.9333,"x":-89.8833},{"n":"Comayagua","c":"Honduras","y":14.46,"x":-87.65},{"n":"Dongxing","c":"China","y":21.5833,"x":108.05},{"n":"Barranca","c":"Peru","y":-10.7539,"x":-77.761},{"n":"Khasavyurt","c":"Russia","y":43.25,"x":46.5833},{"n":"Saguenay","c":"Canada","y":48.4167,"x":-71.0667},{"n":"Tuxtepec","c":"Mexico","y":18.1,"x":-96.1167},{"n":"Kumba","c":"Cameroon","y":4.6333,"x":9.45},{"n":"Barrechid","c":"Morocco","y":33.27,"x":-7.5872},{"n":"Bharatpur","c":"Nepal","y":27.6833,"x":84.4333},{"n":"Florencia","c":"Colombia","y":1.6142,"x":-75.6117},{"n":"Pueblo","c":"United States","y":38.2705,"x":-104.6112},{"n":"Coimbra","c":"Portugal","y":40.2111,"x":-8.4291},{"n":"Ajdabiya","c":"Libya","y":30.77,"x":20.22},{"n":"Tyler","c":"United States","y":32.3184,"x":-95.3062},{"n":"Ciego de Avila","c":"Cuba","y":21.8481,"x":-78.7631},{"n":"San Jose","c":"Philippines","y":12.3528,"x":121.0676},{"n":"Pecs","c":"Hungary","y":46.0708,"x":18.2331},{"n":"Ghazni","c":"Afghanistan","y":33.5492,"x":68.4233},{"n":"Blackpool","c":"United Kingdom","y":53.8142,"x":-3.0503},{"n":"Nawabganj","c":"Bangladesh","y":24.5804,"x":88.35},{"n":"Altay","c":"China","y":47.8666,"x":88.1166},{"n":"El Progreso","c":"Honduras","y":15.4,"x":-87.8},{"n":"Torrance","c":"United States","y":33.8346,"x":-118.3417},{"n":"Pemba","c":"Mozambique","y":-12.9667,"x":40.5167},{"n":"Tuxpam de Rodriguez Cano","c":"Mexico","y":20.95,"x":-97.4},{"n":"Jau","c":"Brazil","y":-22.2958,"x":-48.5578},{"n":"Touggourt","c":"Algeria","y":33.1,"x":6.0667},{"n":"Nevsehir","c":"Turkey","y":38.625,"x":34.7122},{"n":"Levis","c":"Canada","y":46.8,"x":-71.1833},{"n":"Bhimavaram","c":"India","y":16.5333,"x":81.5333},{"n":"Bilbays","c":"Egypt","y":30.4167,"x":31.5667},{"n":"Jinjiang","c":"China","y":19.7386,"x":110.0058},{"n":"Tottenham","c":"United Kingdom","y":51.588,"x":-0.072},{"n":"Aix-en-Provence","c":"France","y":43.5263,"x":5.4454},{"n":"Cizre","c":"Turkey","y":37.325,"x":42.1958},{"n":"Los Angeles","c":"Chile","y":-37.4707,"x":-72.3517},{"n":"Gisenyi","c":"Rwanda","y":-1.6928,"x":29.25},{"n":"Boca Chica","c":"Dominican Republic","y":18.4539,"x":-69.6064},{"n":"Yuma","c":"United States","y":32.5992,"x":-114.5488},{"n":"Telford","c":"United Kingdom","y":52.6766,"x":-2.4469},{"n":"Toledo","c":"Brazil","y":-24.7139,"x":-53.7428},{"n":"Lichinga","c":"Mozambique","y":-13.3,"x":35.2456},{"n":"Ozamiz City","c":"Philippines","y":8.15,"x":123.85},{"n":"Moundou","c":"Chad","y":8.5667,"x":16.0833},{"n":"Tetovo","c":"Macedonia","y":42.0103,"x":20.9714},{"n":"Nizip","c":"Turkey","y":37.0104,"x":37.7985},{"n":"Maykop","c":"Russia","y":44.6,"x":40.0833},{"n":"Bahawalnagar","c":"Pakistan","y":29.9944,"x":73.2536},{"n":"Fukayacho","c":"Japan","y":36.2,"x":139.2833},{"n":"Lausanne","c":"Switzerland","y":46.5333,"x":6.6333},{"n":"Kamalshahr","c":"Iran","y":35.8622,"x":50.8717},{"n":"Gweru","c":"Zimbabwe","y":-19.458,"x":29.82},{"n":"Kelowna","c":"Canada","y":49.8881,"x":-119.4956},{"n":"Metairie","c":"United States","y":29.9977,"x":-90.178},{"n":"Irakleio","c":"Greece","y":35.3403,"x":25.1344},{"n":"Mandsaur","c":"India","y":24.03,"x":75.08},{"n":"Rybnik","c":"Poland","y":50.0833,"x":18.5},{"n":"Nong'an","c":"China","y":44.419,"x":125.1702},{"n":"Inezgane","c":"Morocco","y":30.3658,"x":-9.5381},{"n":"Rize","c":"Turkey","y":41.0167,"x":40.5167},{"n":"Vlore","c":"Albania","y":40.45,"x":19.4833},{"n":"Jahrom","c":"Iran","y":28.5,"x":53.56},{"n":"Surprise","c":"United States","y":33.68,"x":-112.4524},{"n":"Colima","c":"Mexico","y":19.2433,"x":-103.7247},{"n":"Athens","c":"United States","y":33.9508,"x":-83.3689},{"n":"Roseville","c":"United States","y":38.7703,"x":-121.3196},{"n":"Thornton","c":"United States","y":39.9197,"x":-104.9438},{"n":"Khuzdar","c":"Pakistan","y":27.8,"x":66.6167},{"n":"Tepatitlan de Morelos","c":"Mexico","y":20.817,"x":-102.733},{"n":"Abbotsford","c":"Canada","y":49.05,"x":-122.3167},{"n":"Mati","c":"Philippines","y":6.95,"x":126.2333},{"n":"Valle de Santiago","c":"Mexico","y":20.3928,"x":-101.1969},{"n":"Ruda Slaska","c":"Poland","y":50.2628,"x":18.8536},{"n":"Miramar","c":"United States","y":25.9773,"x":-80.3351},{"n":"Batu Pahat","c":"Malaysia","y":1.85,"x":102.93},{"n":"Kovrov","c":"Russia","y":56.3606,"x":41.3197},{"n":"Teofilo Otoni","c":"Brazil","y":-17.8578,"x":-41.505},{"n":"Mesquite","c":"United States","y":32.7623,"x":-96.5889},{"n":"Kokubunji","c":"Japan","y":35.7108,"x":139.4622},{"n":"Shizhaobi","c":"China","y":23.921,"x":115.7774},{"n":"Kumbakonam","c":"India","y":10.9805,"x":79.4},{"n":"Kidapawan","c":"Philippines","y":7.0083,"x":125.0894},{"n":"Capas","c":"Philippines","y":15.3312,"x":120.5898},{"n":"Olathe","c":"United States","y":38.8832,"x":-94.8198},{"n":"Santa Maria","c":"United States","y":34.9334,"x":-120.4432},{"n":"Masaya","c":"Nicaragua","y":11.9667,"x":-86.1},{"n":"Medea","c":"Algeria","y":36.2675,"x":2.75},{"n":"Yaritagua","c":"Venezuela","y":10.08,"x":-69.1261},{"n":"Houma","c":"United States","y":29.5799,"x":-90.7058},{"n":"Samarra'","c":"Iraq","y":34.1959,"x":43.8857},{"n":"Fusagasuga","c":"Colombia","y":4.3372,"x":-74.3644},{"n":"Sale","c":"United Kingdom","y":53.424,"x":-2.322},{"n":"Al `Aqabah","c":"Jordan","y":29.5167,"x":35},{"n":"Torbat-e Heydariyeh","c":"Iran","y":35.2739,"x":59.2194},{"n":"Momostenango","c":"Guatemala","y":15.0444,"x":-91.4083},{"n":"Ituzaingo","c":"Argentina","y":-34.6582,"x":-58.6672},{"n":"Dawei","c":"Myanmar","y":14.0367,"x":98.1867},{"n":"Boulogne-Billancourt","c":"France","y":48.8352,"x":2.2409},{"n":"Zielona Gora","c":"Poland","y":51.9397,"x":15.505},{"n":"Kuwana","c":"Japan","y":35.0622,"x":136.6839},{"n":"Atbara","c":"Sudan","y":17.7167,"x":33.9833},{"n":"Tours","c":"France","y":47.2436,"x":0.6892},{"n":"Pakpattan","c":"Pakistan","y":30.35,"x":73.4},{"n":"Shizuishan","c":"China","y":39.2333,"x":106.769},{"n":"Chicacole","c":"India","y":18.3,"x":83.9},{"n":"Botucatu","c":"Brazil","y":-22.8858,"x":-48.445},{"n":"Dhahran","c":"Saudi Arabia","y":26.2667,"x":50.15},{"n":"Pabna","c":"Bangladesh","y":24.0004,"x":89.25},{"n":"Cameta","c":"Brazil","y":-2.2439,"x":-49.4958},{"n":"San Miguel de Allende","c":"Mexico","y":20.9142,"x":-100.7436},{"n":"Koga","c":"Japan","y":36.1833,"x":139.7},{"n":"Coquitlam","c":"Canada","y":49.2839,"x":-122.7919},{"n":"Carrollton","c":"United States","y":32.989,"x":-96.8999},{"n":"Tan An","c":"Vietnam","y":10.5322,"x":106.4042},{"n":"Grand Junction","c":"United States","y":39.0876,"x":-108.5673},{"n":"Ishizaki","c":"Japan","y":38.4281,"x":141.3061},{"n":"Kokshetau","c":"Kazakhstan","y":53.2824,"x":69.3969},{"n":"Zacatecas","c":"Mexico","y":22.7736,"x":-102.5736},{"n":"Barahona","c":"Dominican Republic","y":18.2079,"x":-71.0996},{"n":"Piranshahr","c":"Iran","y":36.6944,"x":45.1417},{"n":"Tiruvannamalai","c":"India","y":12.2604,"x":79.1},{"n":"Tarragona","c":"Spain","y":41.1187,"x":1.2453},{"n":"Amiens","c":"France","y":49.892,"x":2.299},{"n":"Umtata","c":"South Africa","y":-31.58,"x":28.79},{"n":"Orange","c":"United States","y":33.8038,"x":-117.8218},{"n":"Fullerton","c":"United States","y":33.8841,"x":-117.9279},{"n":"Sancti Spiritus","c":"Cuba","y":21.9339,"x":-79.4439},{"n":"Barbacena","c":"Brazil","y":-21.2258,"x":-43.7739},{"n":"Bat Yam","c":"Israel","y":32.0231,"x":34.7503},{"n":"Boca del Rio","c":"Mexico","y":19.1056,"x":-96.1078},{"n":"Zama","c":"Japan","y":35.4886,"x":139.4075},{"n":"Mojokerto","c":"Indonesia","y":-7.4722,"x":112.4336},{"n":"Darwin","c":"Australia","y":-12.4381,"x":130.8411},{"n":"Ingolstadt","c":"Germany","y":48.7636,"x":11.4261},{"n":"Mandya","c":"India","y":12.5242,"x":76.8958},{"n":"Boulogne-sur-Mer","c":"France","y":50.7264,"x":1.6147},{"n":"Greeley","c":"United States","y":40.4151,"x":-104.7706},{"n":"Ch'ungmu","c":"Korea, South","y":34.8458,"x":128.4236},{"n":"Al Khmissat","c":"Morocco","y":33.81,"x":-6.06},{"n":"Birganj","c":"Nepal","y":27,"x":84.8667},{"n":"Igdir","c":"Turkey","y":39.9167,"x":44.0333},{"n":"Palhoca","c":"Brazil","y":-27.6444,"x":-48.6678},{"n":"Lira","c":"Uganda","y":2.2489,"x":32.9},{"n":"Negage","c":"Angola","y":-7.7667,"x":15.2667},{"n":"Gunungsitoli","c":"Indonesia","y":1.1167,"x":97.5667},{"n":"Danao","c":"Philippines","y":10.5333,"x":123.9333},{"n":"Sabara","c":"Brazil","y":-19.8858,"x":-43.8069},{"n":"Yunxian Chengguanzhen","c":"China","y":32.8082,"x":110.8136},{"n":"Atibaia","c":"Brazil","y":-23.1172,"x":-46.5506},{"n":"Jyvaskyla","c":"Finland","y":62.2333,"x":25.7333},{"n":"Bankura","c":"India","y":23.25,"x":87.0667},{"n":"Vila Franca de Xira","c":"Portugal","y":38.95,"x":-8.9833},{"n":"Quillacollo","c":"Bolivia","y":-17.3975,"x":-66.2817},{"n":"Garanhuns","c":"Brazil","y":-8.8903,"x":-36.4928},{"n":"Santa Maria Texmelucan","c":"Mexico","y":19.2833,"x":-98.4333},{"n":"Livingstone","c":"Zambia","y":-17.85,"x":25.8667},{"n":"Toowoomba","c":"Australia","y":-27.5667,"x":151.95},{"n":"Bima","c":"Indonesia","y":-8.4667,"x":118.717},{"n":"Kisarazu","c":"Japan","y":35.3761,"x":139.9169},{"n":"Porto Amboim","c":"Angola","y":-10.7183,"x":13.75},{"n":"Kigoma","c":"Tanzania","y":-4.8833,"x":29.6333},{"n":"Maia","c":"Portugal","y":41.2333,"x":-8.6167},{"n":"Yaizu","c":"Japan","y":34.8667,"x":138.3167},{"n":"Encarnacion","c":"Paraguay","y":-27.3333,"x":-55.8667},{"n":"Carolina","c":"Puerto Rico","y":18.4054,"x":-65.9792},{"n":"Marivan","c":"Iran","y":35.5269,"x":46.1761},{"n":"Santa Tecla","c":"El Salvador","y":13.6742,"x":-89.2899},{"n":"Inazawa","c":"Japan","y":35.25,"x":136.7833},{"n":"Chech'on","c":"Korea, South","y":37.1361,"x":128.2119},{"n":"Jinotega","c":"Nicaragua","y":13.0833,"x":-86},{"n":"Tiraspol","c":"Moldova","y":46.85,"x":29.6333},{"n":"Apucarana","c":"Brazil","y":-23.5508,"x":-51.4608},{"n":"Pageralam","c":"Indonesia","y":-4.0217,"x":103.2522},{"n":"Tizi Ouzou","c":"Algeria","y":36.7169,"x":4.0497},{"n":"Giresun","c":"Turkey","y":40.9,"x":38.4167},{"n":"Termiz","c":"Uzbekistan","y":37.2242,"x":67.2783},{"n":"Zinacantepec","c":"Mexico","y":19.2833,"x":-99.7333},{"n":"Targu-Mures","c":"Romania","y":46.5497,"x":24.5597},{"n":"Las Cruces","c":"United States","y":32.3265,"x":-106.7892},{"n":"Salerno","c":"Italy","y":40.6806,"x":14.7597},{"n":"'s-Hertogenbosch","c":"Netherlands","y":51.6833,"x":5.3167},{"n":"Panama City","c":"United States","y":30.1995,"x":-85.6004},{"n":"Blitar","c":"Indonesia","y":-8.1,"x":112.15},{"n":"Harlingen","c":"United States","y":26.1917,"x":-97.6976},{"n":"Chiang Mai","c":"Thailand","y":18.7889,"x":98.9833},{"n":"Brighton","c":"United Kingdom","y":50.8429,"x":-0.1313},{"n":"Dos Hermanas","c":"Spain","y":37.2836,"x":-5.9222},{"n":"Tobruk","c":"Libya","y":32.0833,"x":23.95},{"n":"Tauranga","c":"New Zealand","y":-37.6858,"x":176.1667},{"n":"Pyay","c":"Myanmar","y":18.8165,"x":95.2114},{"n":"Ramapo","c":"United States","y":41.1404,"x":-74.1072},{"n":"Cartago","c":"Colombia","y":4.75,"x":-75.91},{"n":"Santiago","c":"Philippines","y":16.6833,"x":121.55},{"n":"May Pen","c":"Jamaica","y":17.95,"x":-77.25},{"n":"Urganch","c":"Uzbekistan","y":41.5345,"x":60.6249},{"n":"Zakhu","c":"Iraq","y":37.1436,"x":42.6819},{"n":"Dumaguete City","c":"Philippines","y":9.3103,"x":123.3081},{"n":"West Valley City","c":"United States","y":40.6889,"x":-112.0115},{"n":"Shuangcheng","c":"China","y":45.3503,"x":126.28},{"n":"Andimeshk","c":"Iran","y":32.45,"x":48.35},{"n":"Santa Rita","c":"Brazil","y":-7.1139,"x":-34.9778},{"n":"Ksar El Kebir","c":"Morocco","y":35,"x":-5.9},{"n":"Consolacion","c":"Philippines","y":10.4,"x":123.95},{"n":"Tabaco","c":"Philippines","y":13.35,"x":123.7333},{"n":"Nakhon Ratchasima","c":"Thailand","y":14.9736,"x":102.0831},{"n":"El Oued","c":"Algeria","y":33.3683,"x":6.8675},{"n":"Jazan","c":"Saudi Arabia","y":16.8892,"x":42.5611},{"n":"Ashqelon","c":"Israel","y":31.6658,"x":34.5664},{"n":"Laghouat","c":"Algeria","y":33.8,"x":2.865},{"n":"Moron","c":"Mongolia","y":49.6375,"x":100.1614},{"n":"Shahreza","c":"Iran","y":32.0089,"x":51.8667},{"n":"Zabol","c":"Iran","y":31.0308,"x":61.4972},{"n":"Nasugbu","c":"Philippines","y":14.0667,"x":120.6333},{"n":"Hampton","c":"United States","y":37.0551,"x":-76.363},{"n":"Araruama","c":"Brazil","y":-22.8728,"x":-42.3428},{"n":"Arayat","c":"Philippines","y":15.1493,"x":120.7692},{"n":"Calapan","c":"Philippines","y":13.3667,"x":121.2},{"n":"Trois-Rivieres","c":"Canada","y":46.35,"x":-72.55},{"n":"Urdaneta","c":"Philippines","y":15.9761,"x":120.5711},{"n":"Zhangmu Touwei","c":"China","y":22.9078,"x":114.0603},{"n":"Milagro","c":"Ecuador","y":-2.1347,"x":-79.5872},{"n":"Heroica Guaymas","c":"Mexico","y":27.9183,"x":-110.8989},{"n":"Minglanilla","c":"Philippines","y":10.245,"x":123.7964},{"n":"Apatzingan de la Constitucion","c":"Mexico","y":19.0886,"x":-102.3508},{"n":"Batticaloa","c":"Sri Lanka","y":7.717,"x":81.7},{"n":"Navoiy","c":"Uzbekistan","y":40.0833,"x":65.3833},{"n":"Rehovot","c":"Israel","y":31.8914,"x":34.8078},{"n":"Campo Largo","c":"Brazil","y":-25.4589,"x":-49.5278},{"n":"Idfu","c":"Egypt","y":24.9781,"x":32.8789},{"n":"Tando Allahyar","c":"Pakistan","y":25.4667,"x":68.7167},{"n":"Warren","c":"United States","y":42.4934,"x":-83.027},{"n":"Mauldin","c":"United States","y":34.7849,"x":-82.3005},{"n":"Bloomington","c":"United States","y":40.4757,"x":-88.9703},{"n":"Enfield","c":"United Kingdom","y":51.6522,"x":-0.0808},{"n":"Apopa","c":"El Salvador","y":13.8,"x":-89.1833},{"n":"Segou","c":"Mali","y":13.45,"x":-6.2667},{"n":"Coral Springs","c":"United States","y":26.2702,"x":-80.2591},{"n":"Innsbruck","c":"Austria","y":47.2683,"x":11.3933},{"n":"Ome","c":"Japan","y":35.7839,"x":139.2431},{"n":"Battambang","c":"Cambodia","y":13.1,"x":103.2},{"n":"Jijel","c":"Algeria","y":36.8206,"x":5.7667},{"n":"Hassan","c":"India","y":13.005,"x":76.1028},{"n":"Pitalito","c":"Colombia","y":1.8539,"x":-76.0514},{"n":"Round Rock","c":"United States","y":30.5254,"x":-97.666},{"n":"Abiko","c":"Japan","y":35.8642,"x":140.0282},{"n":"Yakima","c":"United States","y":46.5923,"x":-120.5496},{"n":"Khorramshahr","c":"Iran","y":30.4333,"x":48.1833},{"n":"Ouargla","c":"Algeria","y":31.95,"x":5.3167},{"n":"Tra Vinh","c":"Vietnam","y":9.9369,"x":106.3411},{"n":"Ninh Binh","c":"Vietnam","y":20.2539,"x":105.975},{"n":"San Carlos","c":"Philippines","y":10.4929,"x":123.4095},{"n":"Gyor","c":"Hungary","y":47.6842,"x":17.6344},{"n":"Odemis","c":"Turkey","y":38.2311,"x":27.9719},{"n":"Kamez","c":"Albania","y":41.3833,"x":19.7667},{"n":"Ferrara","c":"Italy","y":44.8353,"x":11.6199},{"n":"San Luis","c":"Guatemala","y":16.2,"x":-89.44},{"n":"Ibarra","c":"Ecuador","y":0.3628,"x":-78.13},{"n":"Sterling Heights","c":"United States","y":42.5809,"x":-83.0305},{"n":"Stavanger","c":"Norway","y":58.9701,"x":5.7333},{"n":"Yavatmal","c":"India","y":20.4,"x":78.1333},{"n":"Kent","c":"United States","y":47.3887,"x":-122.2129},{"n":"Karabuk","c":"Turkey","y":41.2,"x":32.6333},{"n":"High Wycombe","c":"United Kingdom","y":51.6287,"x":-0.7482},{"n":"Calabozo","c":"Venezuela","y":8.9219,"x":-67.4283},{"n":"Lae","c":"Papua New Guinea","y":-6.7303,"x":147.0008},{"n":"Pilibhit","c":"India","y":28.64,"x":79.81},{"n":"Guelph","c":"Canada","y":43.55,"x":-80.25},{"n":"Palghat","c":"India","y":10.7792,"x":76.6547},{"n":"Sogamoso","c":"Colombia","y":5.7158,"x":-72.9333},{"n":"Buea","c":"Cameroon","y":4.1667,"x":9.2333},{"n":"Nanqiaotou","c":"China","y":22.7135,"x":113.2803},{"n":"Ji-Parana","c":"Brazil","y":-10.8853,"x":-61.9517},{"n":"Rijeka","c":"Croatia","y":45.3272,"x":14.4411},{"n":"Santa Cruz do Sul","c":"Brazil","y":-29.7178,"x":-52.4258},{"n":"Spanish Town","c":"Jamaica","y":17.9961,"x":-76.9547},{"n":"Palakollu","c":"India","y":16.5333,"x":81.7333},{"n":"Dipolog","c":"Philippines","y":8.5667,"x":123.3333},{"n":"Narita","c":"Japan","y":35.7833,"x":140.3167},{"n":"Surat Thani","c":"Thailand","y":9.1397,"x":99.3306},{"n":"Relizane","c":"Algeria","y":35.7372,"x":0.5558},{"n":"Malasiqui","c":"Philippines","y":15.9167,"x":120.4167},{"n":"Cienaga","c":"Colombia","y":11.0104,"x":-74.25},{"n":"Parepare","c":"Indonesia","y":-4.0167,"x":119.6236},{"n":"Vasteras","c":"Sweden","y":59.6173,"x":16.5422},{"n":"Hagonoy","c":"Philippines","y":14.8333,"x":120.7333},{"n":"Torrejon de Ardoz","c":"Spain","y":40.4614,"x":-3.4978},{"n":"Burlington","c":"United States","y":36.0758,"x":-79.4686},{"n":"Nueva Concepcion","c":"Guatemala","y":14.1997,"x":-91.2997},{"n":"La Trinidad","c":"Philippines","y":16.4621,"x":120.5877},{"n":"Abohar","c":"India","y":30.1204,"x":74.29},{"n":"Tychy","c":"Poland","y":50.1667,"x":19},{"n":"Marand","c":"Iran","y":38.4167,"x":45.7667},{"n":"Quibdo","c":"Colombia","y":5.6923,"x":-76.6582},{"n":"Girardot","c":"Colombia","y":4.3036,"x":-74.8039},{"n":"Pouso Alegre","c":"Brazil","y":-22.2281,"x":-45.9336},{"n":"Kanchrapara","c":"India","y":22.97,"x":88.43},{"n":"Rustavi","c":"Georgia","y":41.5333,"x":45},{"n":"Bellingham","c":"United States","y":48.7543,"x":-122.4687},{"n":"Itapipoca","c":"Brazil","y":-3.4939,"x":-39.5789},{"n":"Onomichi","c":"Japan","y":34.4089,"x":133.205},{"n":"Kislovodsk","c":"Russia","y":43.91,"x":42.72},{"n":"Maranguape","c":"Brazil","y":-3.89,"x":-38.6858},{"n":"Kozan","c":"Turkey","y":37.4507,"x":35.8123},{"n":"Udon Thani","c":"Thailand","y":17.4253,"x":102.7902},{"n":"Jiroft","c":"Iran","y":28.6781,"x":57.7406},{"n":"Tabora","c":"Tanzania","y":-5.0167,"x":32.8},{"n":"Santa Clara","c":"United States","y":37.3645,"x":-121.968},{"n":"Vitoria de Santo Antao","c":"Brazil","y":-8.1264,"x":-35.3075},{"n":"Cayirova","c":"Turkey","y":40.8265,"x":29.3745},{"n":"Sannar","c":"Sudan","y":13.55,"x":33.6},{"n":"Lucheng","c":"China","y":30.05,"x":101.9667},{"n":"Racine","c":"United States","y":42.7274,"x":-87.8135},{"n":"Zhaozhou","c":"China","y":37.7527,"x":114.7775},{"n":"Saida","c":"Algeria","y":34.8303,"x":0.1517},{"n":"Esteli","c":"Nicaragua","y":13.0833,"x":-86.35},{"n":"Taldyqorghan","c":"Kazakhstan","y":45.0167,"x":78.3667},{"n":"Conselheiro Lafaiete","c":"Brazil","y":-20.66,"x":-43.7858},{"n":"Cambridge","c":"Canada","y":43.3972,"x":-80.3114},{"n":"Calabayan","c":"Philippines","y":16.7667,"x":121.7833},{"n":"Baidoa","c":"Somalia","y":3.1167,"x":43.65},{"n":"Jaramana","c":"Syria","y":33.4833,"x":36.35},{"n":"Furth","c":"Germany","y":49.4783,"x":10.9903},{"n":"Serpukhov","c":"Russia","y":54.9167,"x":37.4},{"n":"Bolton","c":"United Kingdom","y":53.578,"x":-2.429},{"n":"Tukuyu","c":"Tanzania","y":-9.2583,"x":33.6417},{"n":"Stamford","c":"United States","y":41.1035,"x":-73.5583},{"n":"Villa Alemana","c":"Chile","y":-33.0428,"x":-71.3744},{"n":"Chinguar","c":"Angola","y":-12.55,"x":16.3333},{"n":"Tariba","c":"Venezuela","y":7.8167,"x":-72.2167},{"n":"Wurzburg","c":"Germany","y":49.7944,"x":9.9294},{"n":"Songnim","c":"Korea, North","y":38.7333,"x":125.6333},{"n":"Mansa","c":"Zambia","y":-11.1822,"x":28.8833},{"n":"Elizabeth","c":"United States","y":40.6657,"x":-74.1912},{"n":"Opole","c":"Poland","y":50.6722,"x":17.9253},{"n":"Novocheboksarsk","c":"Russia","y":56.1167,"x":47.5},{"n":"Araras","c":"Brazil","y":-22.3569,"x":-47.3839},{"n":"Petapa","c":"Guatemala","y":14.4962,"x":-90.5525},{"n":"Romford","c":"United Kingdom","y":51.5768,"x":0.1801},{"n":"Mit Ghamr","c":"Egypt","y":30.7192,"x":31.2628},{"n":"Puno","c":"Peru","y":-15.8433,"x":-70.0236},{"n":"Jaranwala","c":"Pakistan","y":31.3342,"x":73.4194},{"n":"Salto","c":"Uruguay","y":-31.3883,"x":-57.9606},{"n":"Newport","c":"United Kingdom","y":51.5833,"x":-3},{"n":"Ahmadpur East","c":"Pakistan","y":29.1453,"x":71.2617},{"n":"Alagoinhas","c":"Brazil","y":-12.1356,"x":-38.4192},{"n":"Annecy","c":"France","y":45.916,"x":6.133},{"n":"Kamina","c":"Congo (Kinshasa)","y":-8.7351,"x":24.998},{"n":"Vihari","c":"Pakistan","y":30.0419,"x":72.3528},{"n":"Koforidua","c":"Ghana","y":6.1,"x":-0.2667},{"n":"Azua","c":"Dominican Republic","y":18.46,"x":-70.74},{"n":"Baigou","c":"China","y":39.1098,"x":116.0139},{"n":"Temperley","c":"Argentina","y":-34.7667,"x":-58.3833},{"n":"Drohobych","c":"Ukraine","y":49.35,"x":23.5},{"n":"Seto","c":"Japan","y":35.2167,"x":137.0833},{"n":"Bataysk","c":"Russia","y":47.1333,"x":39.75},{"n":"Whitby","c":"Canada","y":43.8833,"x":-78.9417},{"n":"Mariveles","c":"Philippines","y":14.4333,"x":120.4833},{"n":"Pinsk","c":"Belarus","y":52.1153,"x":26.1031},{"n":"Sakaka","c":"Saudi Arabia","y":30,"x":40.1333},{"n":"Tumen","c":"China","y":42.9627,"x":129.8413},{"n":"My Tho","c":"Vietnam","y":10.35,"x":106.35},{"n":"Hathras","c":"India","y":27.6,"x":78.05},{"n":"La Granja","c":"Chile","y":-33.5431,"x":-70.6319},{"n":"Divo","c":"Côte D’Ivoire","y":5.8372,"x":-5.3572},{"n":"Guasdualito","c":"Venezuela","y":7.2467,"x":-70.7292},{"n":"Domodedovo","c":"Russia","y":55.4333,"x":37.75},{"n":"Darnah","c":"Libya","y":32.7648,"x":22.6391},{"n":"Kadoma","c":"Japan","y":34.7333,"x":135.5833},{"n":"Salmas","c":"Iran","y":38.2,"x":44.7667},{"n":"Port Blair","c":"India","y":11.6667,"x":92.75},{"n":"Cubatao","c":"Brazil","y":-23.8953,"x":-46.4256},{"n":"Kaspiysk","c":"Russia","y":42.8833,"x":47.6333},{"n":"Anderlecht","c":"Belgium","y":50.8392,"x":4.3297},{"n":"Alipur Duar","c":"India","y":26.4837,"x":89.5667},{"n":"Neftekamsk","c":"Russia","y":56.0833,"x":54.25},{"n":"Daraga","c":"Philippines","y":13.1619,"x":123.6939},{"n":"Omiyacho","c":"Japan","y":35.2222,"x":138.6214},{"n":"Johnson City","c":"United States","y":36.3406,"x":-82.3803},{"n":"Orebro","c":"Sweden","y":59.2669,"x":15.1965},{"n":"Silay","c":"Philippines","y":10.8,"x":122.9667},{"n":"Bam","c":"Iran","y":29.1083,"x":58.3583},{"n":"Ulm","c":"Germany","y":48.3984,"x":9.9916},{"n":"Lafia","c":"Nigeria","y":8.4904,"x":8.52},{"n":"Monza","c":"Italy","y":45.5836,"x":9.2736},{"n":"Tay Ninh","c":"Vietnam","y":11.3131,"x":106.0963},{"n":"Santana de Parnaiba","c":"Brazil","y":-23.4439,"x":-46.9178},{"n":"Nefteyugansk","c":"Russia","y":61.1,"x":72.6},{"n":"Heilbronn","c":"Germany","y":49.1404,"x":9.218},{"n":"Pakokku","c":"Myanmar","y":21.332,"x":95.0866},{"n":"Payakumbuh","c":"Indonesia","y":-0.2244,"x":100.6325},{"n":"Duitama","c":"Colombia","y":5.8219,"x":-73.0297},{"n":"Angren","c":"Uzbekistan","y":41.0167,"x":70.1333},{"n":"Barcarena Nova","c":"Brazil","y":-1.5058,"x":-48.6258},{"n":"Basirhat","c":"India","y":22.6572,"x":88.8942},{"n":"Miramar","c":"Mexico","y":22.3375,"x":-97.8694},{"n":"Ixtlahuaca","c":"Mexico","y":19.5689,"x":-99.7669},{"n":"Latina","c":"Italy","y":41.4676,"x":12.9037},{"n":"Guarapari","c":"Brazil","y":-20.6578,"x":-40.5108},{"n":"Unye","c":"Turkey","y":41.1271,"x":37.2882},{"n":"Ramos Mejia","c":"Argentina","y":-34.65,"x":-58.5667},{"n":"Uruguaiana","c":"Brazil","y":-29.755,"x":-57.0878},{"n":"Navadwip","c":"India","y":23.4088,"x":88.3657},{"n":"Exeter","c":"United Kingdom","y":50.7167,"x":-3.5333},{"n":"Pforzheim","c":"Germany","y":48.895,"x":8.705},{"n":"Lynchburg","c":"United States","y":37.4003,"x":-79.1909},{"n":"Larache","c":"Morocco","y":35.1833,"x":-6.15},{"n":"Iizuka","c":"Japan","y":33.6458,"x":130.6914},{"n":"Guntakal","c":"India","y":15.17,"x":77.38},{"n":"Catabola","c":"Angola","y":-12.1167,"x":17.3},{"n":"Pangkalpinang","c":"Indonesia","y":-2.1,"x":106.1},{"n":"Simi Valley","c":"United States","y":34.2663,"x":-118.749},{"n":"Jolo","c":"Philippines","y":6.05,"x":121},{"n":"Aalborg","c":"Denmark","y":57.0337,"x":9.9166},{"n":"Ban Bang Pu Mai","c":"Thailand","y":13.5441,"x":100.6175},{"n":"Solihull","c":"United Kingdom","y":52.413,"x":-1.778},{"n":"Halisahar","c":"India","y":22.95,"x":88.42},{"n":"Magway","c":"Myanmar","y":20.15,"x":94.95},{"n":"Shashemene","c":"Ethiopia","y":7.2004,"x":38.59},{"n":"Rishra","c":"India","y":22.71,"x":88.35},{"n":"Malanje","c":"Angola","y":-9.5469,"x":16.3387},{"n":"Jizhou","c":"China","y":37.5455,"x":115.5663},{"n":"Magelang","c":"Indonesia","y":-7.4706,"x":110.2178},{"n":"Gashua","c":"Nigeria","y":12.8705,"x":11.04},{"n":"Shchelkovo","c":"Russia","y":55.9167,"x":38},{"n":"Kampong Cham","c":"Cambodia","y":12,"x":105.45},{"n":"Floridablanca","c":"Philippines","y":14.9333,"x":120.5},{"n":"Novomoskovsk","c":"Russia","y":54.0333,"x":38.2667},{"n":"Santa Lucia Cotzumalguapa","c":"Guatemala","y":14.3333,"x":-91.0167},{"n":"Talavera","c":"Philippines","y":15.5839,"x":120.9189},{"n":"Giugliano in Campania","c":"Italy","y":40.9319,"x":14.1956},{"n":"Kumbo","c":"Cameroon","y":6.2,"x":10.66},{"n":"Cagua","c":"Venezuela","y":10.1875,"x":-67.4611},{"n":"Jandira","c":"Brazil","y":-23.5278,"x":-46.9028},{"n":"Amatitlan","c":"Guatemala","y":14.4741,"x":-90.6247},{"n":"Gateshead","c":"United Kingdom","y":54.95,"x":-1.6},{"n":"Amherst","c":"United States","y":43.0117,"x":-78.7569},{"n":"Honcho","c":"Japan","y":35.7581,"x":139.5297},{"n":"Orizaba","c":"Mexico","y":18.85,"x":-97.1},{"n":"Ciudad de Atlixco","c":"Mexico","y":18.9,"x":-98.45},{"n":"Fort Smith","c":"United States","y":35.3493,"x":-94.3695},{"n":"Balneario de Camboriu","c":"Brazil","y":-26.9908,"x":-48.635},{"n":"Resende","c":"Brazil","y":-22.4689,"x":-44.4469},{"n":"Daitocho","c":"Japan","y":34.7119,"x":135.6233},{"n":"Arapongas","c":"Brazil","y":-23.4189,"x":-51.4239},{"n":"Polatli","c":"Turkey","y":39.5842,"x":32.1472},{"n":"Porlamar","c":"Venezuela","y":10.9556,"x":-63.8478},{"n":"Fugu","c":"China","y":39.0259,"x":111.0683},{"n":"Cadiz","c":"Spain","y":36.535,"x":-6.2975},{"n":"Kenosha","c":"United States","y":42.5864,"x":-87.8765},{"n":"Norman","c":"United States","y":35.2335,"x":-97.3471},{"n":"Gingoog","c":"Philippines","y":8.8167,"x":125.1},{"n":"Zhaxi","c":"China","y":27.844,"x":105.0451},{"n":"Gorzow Wielkopolski","c":"Poland","y":52.7333,"x":15.25},{"n":"Porac","c":"Philippines","y":15.0719,"x":120.5419},{"n":"Duma","c":"Syria","y":33.5722,"x":36.4019},{"n":"Wolfsburg","c":"Germany","y":52.4231,"x":10.7872},{"n":"Gexianzhuang","c":"China","y":37.0694,"x":115.6591},{"n":"South Lyon","c":"United States","y":42.4614,"x":-83.6526},{"n":"Maastricht","c":"Netherlands","y":50.8483,"x":5.6889},{"n":"Leeuwarden","c":"Netherlands","y":53.2,"x":5.7833},{"n":"Pervouralsk","c":"Russia","y":56.9167,"x":59.95},{"n":"Algeciras","c":"Spain","y":36.1275,"x":-5.4539},{"n":"New Mirpur","c":"Pakistan","y":33.1333,"x":73.75},{"n":"Noksan","c":"Korea, South","y":36.2039,"x":127.0847},{"n":"Boulder","c":"United States","y":40.0249,"x":-105.2523},{"n":"Bimbo","c":"Central African Republic","y":4.3313,"x":18.5163},{"n":"Baia Mare","c":"Romania","y":47.6597,"x":23.5819},{"n":"Savannakhet","c":"Laos","y":16.55,"x":104.75},{"n":"Al Hajar al Aswad","c":"Syria","y":33.4581,"x":36.3053},{"n":"Khrustalnyi","c":"Ukraine","y":48.1214,"x":38.9453},{"n":"Kadirli","c":"Turkey","y":37.3739,"x":36.0961},{"n":"Brits","c":"South Africa","y":-25.6167,"x":27.7667},{"n":"Cherkessk","c":"Russia","y":44.2222,"x":42.0575},{"n":"Indramayu","c":"Indonesia","y":-6.3356,"x":108.319},{"n":"Rudnyy","c":"Kazakhstan","y":52.9527,"x":63.13},{"n":"Bergamo","c":"Italy","y":45.695,"x":9.67},{"n":"Magangue","c":"Colombia","y":9.2467,"x":-74.7594},{"n":"Maicao","c":"Colombia","y":11.3778,"x":-72.2414},{"n":"Delgado","c":"El Salvador","y":13.7167,"x":-89.1667},{"n":"San Pedro Garza Garcia","c":"Mexico","y":25.6667,"x":-100.3},{"n":"Pleven","c":"Bulgaria","y":43.4132,"x":24.6169},{"n":"Derbent","c":"Russia","y":42.0692,"x":48.2958},{"n":"Preston","c":"United Kingdom","y":53.759,"x":-2.699},{"n":"Formosa","c":"Brazil","y":-15.5369,"x":-47.3339},{"n":"Kisii","c":"Kenya","y":-0.6698,"x":34.7675},{"n":"Villa de Alvarez","c":"Mexico","y":19.25,"x":-103.7333},{"n":"Pati","c":"Indonesia","y":-6.7415,"x":111.0347},{"n":"Longtian","c":"China","y":24.3512,"x":114.1293},{"n":"Munuf","c":"Egypt","y":30.4667,"x":30.9333},{"n":"Gagnoa","c":"Côte D’Ivoire","y":6.1333,"x":-5.9333},{"n":"Bocaue","c":"Philippines","y":14.8,"x":120.9333},{"n":"Abilene","c":"United States","y":32.4543,"x":-99.7384},{"n":"Punta Arenas","c":"Chile","y":-53.1627,"x":-70.9081},{"n":"Varginha","c":"Brazil","y":-21.5508,"x":-45.43},{"n":"Lehigh Acres","c":"United States","y":26.612,"x":-81.6388},{"n":"Dabrowa Gornicza","c":"Poland","y":50.3182,"x":19.2374},{"n":"Munch'on","c":"Korea, North","y":39.259,"x":127.356},{"n":"Khenifra","c":"Morocco","y":32.93,"x":-5.66},{"n":"Hoi An","c":"Vietnam","y":15.8777,"x":108.3327},{"n":"Alberton","c":"South Africa","y":-26.2672,"x":28.1219},{"n":"Lianhe","c":"China","y":47.1414,"x":129.2577},{"n":"Ise","c":"Japan","y":34.4833,"x":136.7167},{"n":"Jirja","c":"Egypt","y":26.3419,"x":31.8894},{"n":"Patnos","c":"Turkey","y":39.2358,"x":42.8686},{"n":"Sidi Bouzid","c":"Tunisia","y":35.0381,"x":9.4858},{"n":"Blackburn","c":"United Kingdom","y":53.748,"x":-2.482},{"n":"Barretos","c":"Brazil","y":-20.5569,"x":-48.5678},{"n":"Machiques","c":"Venezuela","y":10.0667,"x":-72.5667},{"n":"Ciudad Hidalgo","c":"Mexico","y":19.6923,"x":-100.5574},{"n":"San Fernando","c":"Venezuela","y":7.894,"x":-67.473},{"n":"Jalapa","c":"Guatemala","y":14.6379,"x":-89.9904},{"n":"Pescara","c":"Italy","y":42.4643,"x":14.2142},{"n":"Guelma","c":"Algeria","y":36.4619,"x":7.4258},{"n":"Behbahan","c":"Iran","y":30.5958,"x":50.2417},{"n":"Baidyabati","c":"India","y":22.79,"x":88.32},{"n":"Pearland","c":"United States","y":29.5585,"x":-95.3215},{"n":"Xiangcheng","c":"China","y":25.476,"x":100.5505},{"n":"Mufulira","c":"Zambia","y":-12.5546,"x":28.2604},{"n":"Maina","c":"Guam","y":13.4692,"x":144.7332},{"n":"Kotamobagu","c":"Indonesia","y":0.7333,"x":124.3167},{"n":"Dharmavaram","c":"India","y":14.4142,"x":77.715},{"n":"Edea","c":"Cameroon","y":3.8,"x":10.1333},{"n":"Setubal","c":"Portugal","y":38.5243,"x":-8.8926},{"n":"Montreuil","c":"France","y":48.8611,"x":2.4436},{"n":"Ciudad Ojeda","c":"Venezuela","y":10.2,"x":-71.3},{"n":"Bento Goncalves","c":"Brazil","y":-29.1708,"x":-51.5189},{"n":"Pedro Juan Caballero","c":"Paraguay","y":-22.5667,"x":-55.7167},{"n":"Fier","c":"Albania","y":40.7167,"x":19.55},{"n":"Orekhovo-Zuyevo","c":"Russia","y":55.8,"x":38.9667},{"n":"Kamalia","c":"Pakistan","y":30.7258,"x":72.6447},{"n":"Gyumri","c":"Armenia","y":40.7833,"x":43.8333},{"n":"Hoa Binh","c":"Vietnam","y":20.8175,"x":105.3375},{"n":"Kashiwara","c":"Japan","y":34.5094,"x":135.7925},{"n":"Perpignan","c":"France","y":42.6986,"x":2.8956},{"n":"Siracusa","c":"Italy","y":37.0692,"x":15.2875},{"n":"Dorud","c":"Iran","y":33.4933,"x":49.075},{"n":"Puerto Barrios","c":"Guatemala","y":15.73,"x":-88.6},{"n":"Ribeirao Pires","c":"Brazil","y":-23.7108,"x":-46.4128},{"n":"Port-de-Paix","c":"Haiti","y":19.95,"x":-72.8333},{"n":"Ondjiva","c":"Angola","y":-17.0667,"x":15.7333},{"n":"Wuling","c":"China","y":39.4421,"x":114.23},{"n":"Samandag","c":"Turkey","y":36.085,"x":35.9806},{"n":"Tsuruoka","c":"Japan","y":38.7217,"x":139.8217},{"n":"Shuixi","c":"China","y":22.5111,"x":113.3161},{"n":"Upington","c":"South Africa","y":-28.4572,"x":21.2425},{"n":"Walthamstow","c":"United Kingdom","y":51.59,"x":0},{"n":"Berkeley","c":"United States","y":37.8723,"x":-122.276},{"n":"Plock","c":"Poland","y":52.55,"x":19.7},{"n":"Poblacion","c":"Philippines","y":10.4167,"x":123.9667},{"n":"Richardson","c":"United States","y":32.9717,"x":-96.7093},{"n":"Dogubayazit","c":"Turkey","y":39.55,"x":44.0833},{"n":"Redding","c":"United States","y":40.5698,"x":-122.365},{"n":"Arvada","c":"United States","y":39.8321,"x":-105.1511},{"n":"East Los Angeles","c":"United States","y":34.0326,"x":-118.1691},{"n":"Valinhos","c":"Brazil","y":-22.9708,"x":-46.9958},{"n":"Itabira","c":"Brazil","y":-19.6189,"x":-43.2269},{"n":"Chilapa de Alvarez","c":"Mexico","y":17.5944,"x":-99.1778},{"n":"Cachoeirinha","c":"Brazil","y":-29.9508,"x":-51.0939},{"n":"St. George","c":"United States","y":37.077,"x":-113.577},{"n":"Kot Addu","c":"Pakistan","y":30.47,"x":70.9644},{"n":"Kallithea","c":"Greece","y":37.95,"x":23.7},{"n":"Gottingen","c":"Germany","y":51.5339,"x":9.9356},{"n":"Pakxe","c":"Laos","y":15.1167,"x":105.7833},{"n":"Billings","c":"United States","y":45.7891,"x":-108.5524},{"n":"Carcar","c":"Philippines","y":10.1167,"x":123.6333},{"n":"Santa Cruz","c":"Philippines","y":14.2833,"x":121.4167},{"n":"Guelmim","c":"Morocco","y":28.9833,"x":-10.0667},{"n":"Darjeeling","c":"India","y":27.0417,"x":88.2631},{"n":"Ebetsu","c":"Japan","y":43.1039,"x":141.5361},{"n":"Yuba City","c":"United States","y":39.1357,"x":-121.6381},{"n":"Mohammad Shahr","c":"Iran","y":35.7631,"x":50.9172},{"n":"Fujimino","c":"Japan","y":35.8794,"x":139.5197},{"n":"Sertaozinho","c":"Brazil","y":-21.1378,"x":-47.99},{"n":"Kuopio","c":"Finland","y":62.8925,"x":27.6783},{"n":"Poa","c":"Brazil","y":-23.5286,"x":-46.345},{"n":"Saint-Denis","c":"France","y":48.9356,"x":2.3539},{"n":"Ghardaia","c":"Algeria","y":32.4833,"x":3.6667},{"n":"Almirante Tamandare","c":"Brazil","y":-25.325,"x":-49.31},{"n":"San Carlos","c":"Venezuela","y":9.65,"x":-68.5833},{"n":"Ciudad Choluteca","c":"Honduras","y":13.3167,"x":-87.2167},{"n":"Varzea Paulista","c":"Brazil","y":-23.2108,"x":-46.8278},{"n":"Catanduva","c":"Brazil","y":-21.1378,"x":-48.9728},{"n":"Zahle","c":"Lebanon","y":33.8439,"x":35.9072},{"n":"Guagua","c":"Philippines","y":14.9667,"x":120.6333},{"n":"Gudivada","c":"India","y":16.43,"x":80.99},{"n":"Nazarabad","c":"Iran","y":35.9522,"x":50.6075},{"n":"Leominster","c":"United States","y":42.5209,"x":-71.7717},{"n":"Ajax","c":"Canada","y":43.8583,"x":-79.0364},{"n":"Lomas de Zamora","c":"Argentina","y":-34.7667,"x":-58.4},{"n":"Kingsport","c":"United States","y":36.5224,"x":-82.5453},{"n":"Butwal","c":"Nepal","y":27.7,"x":83.45},{"n":"Nouadhibou","c":"Mauritania","y":20.95,"x":-17.0333},{"n":"Xuqiaocun","c":"China","y":30.4355,"x":120.3645},{"n":"Duluth","c":"United States","y":46.7756,"x":-92.1392},{"n":"Nazran","c":"Russia","y":43.2167,"x":44.7667},{"n":"Elblag","c":"Poland","y":54.1667,"x":19.4},{"n":"Sopur","c":"India","y":34.3,"x":74.47},{"n":"Totonicapan","c":"Guatemala","y":14.9108,"x":-91.3606},{"n":"Paulo Afonso","c":"Brazil","y":-9.4078,"x":-38.2219},{"n":"Guaratingueta","c":"Brazil","y":-22.8167,"x":-45.2278},{"n":"Huaraz","c":"Peru","y":-9.5333,"x":-77.5333},{"n":"Guimba","c":"Philippines","y":15.6581,"x":120.7689},{"n":"Rock Hill","c":"United States","y":34.9416,"x":-81.0244},{"n":"Kasuga","c":"Japan","y":33.5328,"x":130.4703},{"n":"Gabes","c":"Tunisia","y":33.8814,"x":10.0983},{"n":"Gilroy","c":"United States","y":37.0047,"x":-121.5855},{"n":"Cheltenham","c":"United Kingdom","y":51.9,"x":-2.0667},{"n":"Cambridge","c":"United States","y":42.3759,"x":-71.1185},{"n":"Nevinnomyssk","c":"Russia","y":44.6333,"x":41.9333},{"n":"Bruges","c":"Belgium","y":51.2089,"x":3.2242},{"n":"Lahti","c":"Finland","y":60.9804,"x":25.655},{"n":"Reutov","c":"Russia","y":55.7667,"x":37.8667},{"n":"Bandundu","c":"Congo (Kinshasa)","y":-3.31,"x":17.38},{"n":"Igarassu","c":"Brazil","y":-7.8339,"x":-34.9058},{"n":"Trento","c":"Italy","y":46.0667,"x":11.1167},{"n":"Charallave","c":"Venezuela","y":10.2431,"x":-66.8622},{"n":"Yongqing","c":"China","y":39.2958,"x":116.4897},{"n":"Nowshera","c":"Pakistan","y":34.0153,"x":71.9747},{"n":"Dharan","c":"Nepal","y":26.8167,"x":87.2667},{"n":"Akishima","c":"Japan","y":35.7056,"x":139.3536},{"n":"Birigui","c":"Brazil","y":-21.2889,"x":-50.34},{"n":"Bottrop","c":"Germany","y":51.5232,"x":6.9253},{"n":"Berkane","c":"Morocco","y":34.9167,"x":-2.3167},{"n":"Konosu","c":"Japan","y":36.0687,"x":139.5168},{"n":"Sugar Land","c":"United States","y":29.5935,"x":-95.6357},{"n":"Glan","c":"Philippines","y":5.8167,"x":125.2},{"n":"Linkoping","c":"Sweden","y":58.4094,"x":15.6257},{"n":"Votorantim","c":"Brazil","y":-23.5469,"x":-47.4378},{"n":"Tanay","c":"Philippines","y":14.4972,"x":121.2864},{"n":"Karatepe","c":"Turkey","y":40.6883,"x":30.0144},{"n":"Forli","c":"Italy","y":44.2225,"x":12.0408},{"n":"Cuautitlan","c":"Mexico","y":19.6833,"x":-99.1833},{"n":"Ikoma","c":"Japan","y":34.6919,"x":135.7006},{"n":"Candelaria","c":"Philippines","y":13.9311,"x":121.4233},{"n":"Martinez de la Torre","c":"Mexico","y":20.0667,"x":-97.05},{"n":"Yulu","c":"China","y":23.5193,"x":116.4055},{"n":"Tecoman","c":"Mexico","y":18.9089,"x":-103.8747},{"n":"Giyon","c":"Ethiopia","y":8.5304,"x":37.97},{"n":"Texas City","c":"United States","y":29.4128,"x":-94.9658},{"n":"Bama","c":"Nigeria","y":11.5204,"x":13.69},{"n":"Bayawan","c":"Philippines","y":9.3667,"x":122.8},{"n":"Codo","c":"Brazil","y":-4.455,"x":-43.8858},{"n":"Iowa City","c":"United States","y":41.6559,"x":-91.5303},{"n":"Drammen","c":"Norway","y":59.7439,"x":10.2045},{"n":"Saginaw","c":"United States","y":43.4199,"x":-83.9501},{"n":"Kabwe","c":"Zambia","y":-14.4333,"x":28.45},{"n":"Malita","c":"Philippines","y":6.4,"x":125.6},{"n":"Facatativa","c":"Colombia","y":4.8147,"x":-74.3553},{"n":"Araguari","c":"Brazil","y":-18.6489,"x":-48.1869},{"n":"Nobeoka","c":"Japan","y":32.5822,"x":131.665},{"n":"Jalingo","c":"Nigeria","y":8.9004,"x":11.36},{"n":"Luanshya","c":"Zambia","y":-13.1333,"x":28.4},{"n":"Agadez","c":"Niger","y":16.9959,"x":7.9828},{"n":"Uzhhorod","c":"Ukraine","y":48.6239,"x":22.295},{"n":"Besancon","c":"France","y":47.24,"x":6.02},{"n":"Adilabad","c":"India","y":19.6667,"x":78.5333},{"n":"Obninsk","c":"Russia","y":55.1,"x":36.6167},{"n":"Uribia","c":"Colombia","y":11.7139,"x":-72.2658},{"n":"Piedecuesta","c":"Colombia","y":6.9886,"x":-73.0503},{"n":"Chico","c":"United States","y":39.7575,"x":-121.8152},{"n":"Angono","c":"Philippines","y":14.5234,"x":121.1536},{"n":"Huanren","c":"China","y":41.2671,"x":125.3529},{"n":"San Martin","c":"Argentina","y":-33.0806,"x":-68.4706},{"n":"Kapakli","c":"Turkey","y":41.3333,"x":27.9667},{"n":"Basingstoke","c":"United Kingdom","y":51.2667,"x":-1.0876},{"n":"Walbrzych","c":"Poland","y":50.7667,"x":16.2833},{"n":"Maidstone","c":"United Kingdom","y":51.272,"x":0.529},{"n":"Xai-Xai","c":"Mozambique","y":-25.05,"x":33.65},{"n":"Reutlingen","c":"Germany","y":48.4833,"x":9.2167},{"n":"Langley","c":"Canada","y":49.1044,"x":-122.5827},{"n":"Dover","c":"United States","y":39.161,"x":-75.5203},{"n":"Rosario","c":"Philippines","y":13.846,"x":121.206},{"n":"Temixco","c":"Mexico","y":18.85,"x":-99.2333},{"n":"Kindia","c":"Guinea","y":10.06,"x":-12.87},{"n":"Narasaraopet","c":"India","y":16.236,"x":80.054},{"n":"Nyiregyhaza","c":"Hungary","y":47.95,"x":21.7167},{"n":"Kyzyl","c":"Russia","y":51.7167,"x":94.45},{"n":"Machakos","c":"Kenya","y":-1.5167,"x":37.2667},{"n":"Belfort","c":"France","y":47.64,"x":6.85},{"n":"Nkongsamba","c":"Cameroon","y":4.95,"x":9.9167},{"n":"Uba","c":"Brazil","y":-21.12,"x":-42.9428},{"n":"Guadalajara de Buga","c":"Colombia","y":3.9036,"x":-76.2986},{"n":"Cassongue","c":"Angola","y":-11.8181,"x":14.9689},{"n":"Mendoza","c":"Argentina","y":-32.8833,"x":-68.8333},{"n":"Clearwater","c":"United States","y":27.9789,"x":-82.7622},{"n":"Tandil","c":"Argentina","y":-37.3167,"x":-59.1333},{"n":"Manpo","c":"Korea, North","y":41.157,"x":126.29},{"n":"Beppu","c":"Japan","y":33.2847,"x":131.4911},{"n":"Buzau","c":"Romania","y":45.1517,"x":26.8167},{"n":"Tatui","c":"Brazil","y":-23.3556,"x":-47.8569},{"n":"Naga","c":"Philippines","y":10.2167,"x":123.75},{"n":"Dimitrovgrad","c":"Russia","y":54.2333,"x":49.5833},{"n":"Port-Gentil","c":"Gabon","y":-0.7167,"x":8.7833},{"n":"Sassari","c":"Italy","y":40.7267,"x":8.5592},{"n":"Coeur d'Alene","c":"United States","y":47.7041,"x":-116.7935},{"n":"Bage","c":"Brazil","y":-31.3308,"x":-54.1069},{"n":"Chittaurgarh","c":"India","y":24.8894,"x":74.6239},{"n":"Seaside","c":"United States","y":36.6224,"x":-121.8191},{"n":"Helsingborg","c":"Sweden","y":56.0424,"x":12.721},{"n":"Coronel","c":"Chile","y":-37.0167,"x":-73.1333},{"n":"Independence","c":"United States","y":39.0871,"x":-94.3501},{"n":"Smithtown","c":"United States","y":40.8662,"x":-73.2164},{"n":"Argenteuil","c":"France","y":48.95,"x":2.25},{"n":"San Antonio Enchisi","c":"Mexico","y":19.7072,"x":-99.7867},{"n":"Boke","c":"Guinea","y":10.94,"x":-14.3},{"n":"West Jordan","c":"United States","y":40.6024,"x":-112.0008},{"n":"Phatthaya","c":"Thailand","y":12.9496,"x":100.893},{"n":"Khon Kaen","c":"Thailand","y":16.4297,"x":102.8297},{"n":"Ramenskoye","c":"Russia","y":55.5669,"x":38.2303},{"n":"Kilis","c":"Turkey","y":36.7167,"x":37.1167},{"n":"Shibuya","c":"Japan","y":35.6536,"x":139.7092},{"n":"Parral","c":"Mexico","y":26.9333,"x":-105.6667},{"n":"Qiaotou","c":"China","y":36.935,"x":101.6736},{"n":"Swabi","c":"Pakistan","y":34.1167,"x":72.4667},{"n":"Huejutla de Reyes","c":"Mexico","y":21.1333,"x":-98.4167},{"n":"Sabha","c":"Libya","y":27.0333,"x":14.4333},{"n":"Tahoua","c":"Niger","y":14.9,"x":5.2599},{"n":"Chelmsford","c":"United Kingdom","y":51.7361,"x":0.4798},{"n":"Shacheng","c":"China","y":40.4027,"x":115.5126},{"n":"Altamira","c":"Brazil","y":-3.2028,"x":-52.2058},{"n":"Doncaster","c":"United Kingdom","y":53.515,"x":-1.133},{"n":"Valle de La Pascua","c":"Venezuela","y":9.2033,"x":-66.0103},{"n":"Brandon","c":"United States","y":27.9367,"x":-82.3},{"n":"Nasushiobara","c":"Japan","y":36.9617,"x":140.0461},{"n":"Toliara","c":"Madagascar","y":-23.35,"x":43.6667},{"n":"Berdiansk","c":"Ukraine","y":46.7598,"x":36.7845},{"n":"Koencho","c":"Japan","y":43.8081,"x":143.8942},{"n":"El Monte","c":"United States","y":34.0739,"x":-118.0291},{"n":"Piraquara","c":"Brazil","y":-25.4419,"x":-49.0628},{"n":"Niihama","c":"Japan","y":33.9603,"x":133.2834},{"n":"North Charleston","c":"United States","y":32.9066,"x":-80.0722},{"n":"Carlsbad","c":"United States","y":33.1247,"x":-117.2837},{"n":"Bansbaria","c":"India","y":22.97,"x":88.4},{"n":"Puerto Madryn","c":"Argentina","y":-42.773,"x":-65.0366},{"n":"Tucurui","c":"Brazil","y":-3.7678,"x":-49.6728},{"n":"Sano","c":"Japan","y":36.3144,"x":139.5783},{"n":"Ariana","c":"Tunisia","y":36.8625,"x":10.1956},{"n":"Sloviansk","c":"Ukraine","y":48.87,"x":37.625},{"n":"Koblenz","c":"Germany","y":50.3597,"x":7.5978},{"n":"Oktyabr'skiy","c":"Russia","y":54.4833,"x":53.4833},{"n":"St. Cloud","c":"United States","y":45.5339,"x":-94.1718},{"n":"Salto","c":"Brazil","y":-23.2008,"x":-47.2869},{"n":"Hatsukaichi","c":"Japan","y":34.3486,"x":132.3317},{"n":"Chorzow","c":"Poland","y":50.3,"x":18.95},{"n":"Las Delicias","c":"Mexico","y":28.2,"x":-105.5},{"n":"Bijeljina","c":"Bosnia And Herzegovina","y":44.75,"x":19.2167},{"n":"Lilan","c":"China","y":23.8163,"x":108.8847},{"n":"Temecula","c":"United States","y":33.4928,"x":-117.1315},{"n":"Bremerhaven","c":"Germany","y":53.55,"x":8.5833},{"n":"Bet Shemesh","c":"Israel","y":31.7514,"x":34.9886},{"n":"Ciudad de la Costa","c":"Uruguay","y":-34.8167,"x":-55.95},{"n":"Clovis","c":"United States","y":36.8278,"x":-119.6831},{"n":"Bernal","c":"Argentina","y":-34.7,"x":-58.2833},{"n":"Kamagaya","c":"Japan","y":35.7769,"x":140.0008},{"n":"Valparai","c":"India","y":10.3204,"x":76.97},{"n":"Iringa","c":"Tanzania","y":-7.77,"x":35.69},{"n":"Magalang","c":"Philippines","y":15.2167,"x":120.6667},{"n":"Meridian","c":"United States","y":43.6112,"x":-116.3968},{"n":"Saanich","c":"Canada","y":48.484,"x":-123.381},{"n":"Asela","c":"Ethiopia","y":7.95,"x":39.1167},{"n":"Los Banos","c":"Philippines","y":14.1667,"x":121.2167},{"n":"Kankan","c":"Guinea","y":10.39,"x":-9.31},{"n":"Cuito","c":"Angola","y":-12.3833,"x":16.9333},{"n":"Kusadasi","c":"Turkey","y":37.8586,"x":27.2594},{"n":"Jounie","c":"Lebanon","y":33.9697,"x":35.6156},{"n":"Colchester","c":"United Kingdom","y":51.8917,"x":0.903},{"n":"Recklinghausen","c":"Germany","y":51.6167,"x":7.2},{"n":"Pul-e Khumri","c":"Afghanistan","y":35.95,"x":68.7},{"n":"Tawau","c":"Malaysia","y":4.2981,"x":117.8831},{"n":"Quilengues","c":"Angola","y":-14.0814,"x":14.0764},{"n":"San Francisco del Rincon","c":"Mexico","y":21.0228,"x":-101.86},{"n":"Curico","c":"Chile","y":-34.98,"x":-71.24},{"n":"The Woodlands","c":"United States","y":30.1738,"x":-95.5134},{"n":"Paarl","c":"South Africa","y":-33.7242,"x":18.9558},{"n":"Hofu","c":"Japan","y":34.05,"x":131.5667},{"n":"Hikone","c":"Japan","y":35.2744,"x":136.2597},{"n":"Itatiba","c":"Brazil","y":-23.0058,"x":-46.8389},{"n":"Caraguatatuba","c":"Brazil","y":-23.62,"x":-45.4128},{"n":"Bukittinggi","c":"Indonesia","y":-0.3097,"x":100.3753},{"n":"Wythenshawe","c":"United Kingdom","y":53.392,"x":-2.264},{"n":"Erlangen","c":"Germany","y":49.5964,"x":11.0044},{"n":"Jendouba","c":"Tunisia","y":36.5011,"x":8.7803},{"n":"Sa-ch'on","c":"Korea, South","y":35.2347,"x":128.3575},{"n":"Ponce","c":"Puerto Rico","y":18.012,"x":-66.6198},{"n":"Kipushi","c":"Congo (Kinshasa)","y":-11.76,"x":27.25},{"n":"Mazhang","c":"China","y":21.27,"x":110.3193},{"n":"Akcakale","c":"Turkey","y":36.7108,"x":38.9478},{"n":"Bergisch Gladbach","c":"Germany","y":50.9917,"x":7.1367},{"n":"City of Isabela","c":"Philippines","y":6.7,"x":121.9667},{"n":"Euriapolis","c":"Brazil","y":-16.3778,"x":-39.58},{"n":"Novyy Urengoy","c":"Russia","y":66.0847,"x":76.6789},{"n":"Montero","c":"Bolivia","y":-17.3333,"x":-63.3833},{"n":"Madrid","c":"Colombia","y":4.7306,"x":-74.2639},{"n":"Burdur","c":"Turkey","y":37.7167,"x":30.2833},{"n":"Westminster","c":"United States","y":39.8837,"x":-105.0624},{"n":"Acailandia","c":"Brazil","y":-4.9469,"x":-47.505},{"n":"Castelar","c":"Argentina","y":-34.65,"x":-58.65},{"n":"Sokode","c":"Togo","y":8.9833,"x":1.1333},{"n":"Jaen","c":"Spain","y":37.7667,"x":-3.7711},{"n":"Vicenza","c":"Italy","y":45.55,"x":11.55},{"n":"Costa Mesa","c":"United States","y":33.6667,"x":-117.9135},{"n":"Rotherham","c":"United Kingdom","y":53.43,"x":-1.357},{"n":"Hualien","c":"Taiwan","y":23.9722,"x":121.6064},{"n":"San Carlos de Bariloche","c":"Argentina","y":-41.15,"x":-71.3},{"n":"Naic","c":"Philippines","y":14.3167,"x":120.7667},{"n":"Otaru","c":"Japan","y":43.1833,"x":141},{"n":"Alphen aan den Rijn","c":"Netherlands","y":52.1333,"x":4.65},{"n":"Monroe","c":"United States","y":32.5183,"x":-92.0774},{"n":"Zwolle","c":"Netherlands","y":52.5125,"x":6.0944},{"n":"Higashiomi","c":"Japan","y":35.1128,"x":136.2078},{"n":"Utica","c":"United States","y":43.0961,"x":-75.226},{"n":"Santa Lucia","c":"Venezuela","y":10.2606,"x":-66.6639},{"n":"Carora","c":"Venezuela","y":10.1692,"x":-70.0783},{"n":"Khenchela","c":"Algeria","y":35.4167,"x":7.1333},{"n":"Iriga City","c":"Philippines","y":13.4167,"x":123.4167},{"n":"Champdani","c":"India","y":22.8,"x":88.37},{"n":"Umuarama","c":"Brazil","y":-23.7658,"x":-53.325},{"n":"Oshu","c":"Japan","y":39.1444,"x":141.1389},{"n":"Remscheid","c":"Germany","y":51.1802,"x":7.1872},{"n":"Habikino","c":"Japan","y":34.5578,"x":135.6061},{"n":"Kamyshin","c":"Russia","y":50.0833,"x":45.4},{"n":"Osmanabad","c":"India","y":18.1667,"x":76.05},{"n":"Esteban Echeverria","c":"Argentina","y":-34.8167,"x":-58.4667},{"n":"Dolgoprudnyy","c":"Russia","y":55.9333,"x":37.5},{"n":"Shkoder","c":"Albania","y":42.0667,"x":19.5},{"n":"Jena","c":"Germany","y":50.9272,"x":11.5864},{"n":"Mopti","c":"Mali","y":14.49,"x":-4.18},{"n":"Kars","c":"Turkey","y":40.6069,"x":43.0931},{"n":"Santana","c":"Brazil","y":-0.035,"x":-51.175},{"n":"Olmaliq","c":"Uzbekistan","y":40.85,"x":69.6},{"n":"Cavite City","c":"Philippines","y":14.4833,"x":120.9},{"n":"Bou Saada","c":"Algeria","y":35.2083,"x":4.1739},{"n":"Candaba","c":"Philippines","y":15.0933,"x":120.8283},{"n":"Tangjia","c":"China","y":22.3606,"x":113.5962},{"n":"Nikopol","c":"Ukraine","y":47.5772,"x":34.3575},{"n":"Ciudad Mante","c":"Mexico","y":22.7333,"x":-98.95},{"n":"Pompano Beach","c":"United States","y":26.2428,"x":-80.1312},{"n":"Laoag","c":"Philippines","y":18.1951,"x":120.5918},{"n":"Corumba","c":"Brazil","y":-19.0089,"x":-57.6528},{"n":"Zhukovskiy","c":"Russia","y":55.6011,"x":38.1161},{"n":"West Palm Beach","c":"United States","y":26.7468,"x":-80.1316},{"n":"Kristiansand","c":"Norway","y":58.1467,"x":7.9956},{"n":"Funchal","c":"Portugal","y":32.65,"x":-16.9167},{"n":"Colatina","c":"Brazil","y":-19.5389,"x":-40.6308},{"n":"Ligao","c":"Philippines","y":13.2167,"x":123.5167},{"n":"Kuqa","c":"China","y":41.7277,"x":82.9364},{"n":"Nsukka","c":"Nigeria","y":6.8567,"x":7.3958},{"n":"Escuintla","c":"Mexico","y":15.3194,"x":-92.6583},{"n":"Hounslow","c":"United Kingdom","y":51.4668,"x":-0.375},{"n":"Terni","c":"Italy","y":42.5667,"x":12.65},{"n":"Norzagaray","c":"Philippines","y":14.9167,"x":121.05},{"n":"Waterloo","c":"United States","y":42.492,"x":-92.3522},{"n":"Parintins","c":"Brazil","y":-2.6278,"x":-56.7358},{"n":"Trier","c":"Germany","y":49.7567,"x":6.6414},{"n":"Terrebonne","c":"Canada","y":45.7,"x":-73.6333},{"n":"Namur","c":"Belgium","y":50.4667,"x":4.8667},{"n":"Rochdale","c":"United Kingdom","y":53.6136,"x":-2.161},{"n":"Murom","c":"Russia","y":55.5725,"x":42.0514},{"n":"Bedford","c":"United Kingdom","y":52.135,"x":-0.47},{"n":"Tondabayashicho","c":"Japan","y":34.4992,"x":135.5972},{"n":"Everett","c":"United States","y":47.9525,"x":-122.1669},{"n":"Pingquan","c":"China","y":40.9937,"x":118.6735},{"n":"Manzini","c":"Swaziland","y":-26.4833,"x":31.3667},{"n":"El Centro","c":"United States","y":32.7867,"x":-115.5586},{"n":"Villa Mercedes","c":"Argentina","y":-33.6667,"x":-65.4667},{"n":"Winterthur","c":"Switzerland","y":47.4992,"x":8.7267},{"n":"Jawhar","c":"Somalia","y":2.7833,"x":45.5},{"n":"Tuzla","c":"Bosnia And Herzegovina","y":44.5381,"x":18.6761},{"n":"Tarnow","c":"Poland","y":50.0125,"x":20.9883},{"n":"Gafsa","c":"Tunisia","y":34.4167,"x":8.7833},{"n":"Santa Fe","c":"United States","y":35.6619,"x":-105.9819},{"n":"Khardah","c":"India","y":22.72,"x":88.38},{"n":"Gapan","c":"Philippines","y":15.3075,"x":120.9453},{"n":"Nguru","c":"Nigeria","y":12.8804,"x":10.45},{"n":"Bandar-e Anzali","c":"Iran","y":37.4667,"x":49.4667},{"n":"Khushab","c":"Pakistan","y":32.2917,"x":72.35},{"n":"Plaridel","c":"Philippines","y":14.8869,"x":120.8569},{"n":"Downey","c":"United States","y":33.9379,"x":-118.1312},{"n":"Spring Hill","c":"United States","y":28.4797,"x":-82.53},{"n":"Stockport","c":"United Kingdom","y":53.4083,"x":-2.1494},{"n":"Kecskemet","c":"Hungary","y":46.9074,"x":19.6917},{"n":"Catalao","c":"Brazil","y":-18.17,"x":-47.9419},{"n":"Lowell","c":"United States","y":42.6389,"x":-71.3217},{"n":"Sonsonate","c":"El Salvador","y":13.7167,"x":-89.7167},{"n":"Ahuachapan","c":"El Salvador","y":13.9214,"x":-89.845},{"n":"Fresnillo","c":"Mexico","y":23.175,"x":-102.8675},{"n":"Centennial","c":"United States","y":39.5926,"x":-104.8674},{"n":"Fasa","c":"Iran","y":28.9381,"x":53.6481},{"n":"As Salamiyah","c":"Syria","y":35.0111,"x":37.0531},{"n":"Yessentuki","c":"Russia","y":44.0431,"x":42.8644},{"n":"Elgin","c":"United States","y":42.0385,"x":-88.3229},{"n":"Tabuk","c":"Philippines","y":17.45,"x":121.4583},{"n":"Coronel Fabriciano","c":"Brazil","y":-19.5189,"x":-42.6289},{"n":"Kiffa","c":"Mauritania","y":16.6164,"x":-11.4044},{"n":"Santander de Quilichao","c":"Colombia","y":3.0083,"x":-76.4839},{"n":"Calumpit","c":"Philippines","y":14.9167,"x":120.7667},{"n":"Yenangyaung","c":"Myanmar","y":20.4583,"x":94.8732},{"n":"Ourinhos","c":"Brazil","y":-22.9789,"x":-49.8708},{"n":"Quibor","c":"Venezuela","y":9.9281,"x":-69.5778},{"n":"Iguala de la Independencia","c":"Mexico","y":18.35,"x":-99.5333},{"n":"Borazjan","c":"Iran","y":29.2667,"x":51.2158},{"n":"Socopo","c":"Venezuela","y":8.2322,"x":-70.8206},{"n":"Shinyanga","c":"Tanzania","y":-3.6619,"x":33.4231},{"n":"Ash Shaykh `Uthman","c":"Yemen","y":12.8866,"x":45.0279},{"n":"Genhe","c":"China","y":50.7833,"x":121.5167},{"n":"Montego Bay","c":"Jamaica","y":18.4667,"x":-77.9167},{"n":"Baneh","c":"Iran","y":35.9975,"x":45.8853},{"n":"Shirayamamachi","c":"Japan","y":36.5144,"x":136.5656},{"n":"Msaken","c":"Tunisia","y":35.7333,"x":10.5833},{"n":"Mascara","c":"Algeria","y":35.4,"x":0.1333},{"n":"Espejo","c":"Chile","y":-33.5333,"x":-70.7167},{"n":"Darlington","c":"United Kingdom","y":54.527,"x":-1.5526},{"n":"Broken Arrow","c":"United States","y":36.0365,"x":-95.7809},{"n":"Milton","c":"Canada","y":43.5083,"x":-79.8833},{"n":"Yoju","c":"Korea, South","y":37.2939,"x":127.6383},{"n":"Xishancun","c":"China","y":23.6014,"x":116.3257},{"n":"Bangaon","c":"India","y":23.07,"x":88.82},{"n":"Miami Gardens","c":"United States","y":25.9433,"x":-80.2426},{"n":"Pisco","c":"Peru","y":-13.71,"x":-76.2032},{"n":"Dera Ismail Khan","c":"Pakistan","y":31.8167,"x":70.9167},{"n":"Taitung","c":"Taiwan","y":22.7583,"x":121.1444},{"n":"Bend","c":"United States","y":44.0562,"x":-121.3087},{"n":"Sandacho","c":"Japan","y":34.8894,"x":135.2253},{"n":"Kandi","c":"Benin","y":11.1304,"x":2.94},{"n":"Aguachica","c":"Colombia","y":8.3067,"x":-73.6153},{"n":"Apalit","c":"Philippines","y":14.9496,"x":120.7587},{"n":"Baybay","c":"Philippines","y":10.6833,"x":124.8},{"n":"Labe","c":"Guinea","y":11.3167,"x":-12.2833},{"n":"Ariquemes","c":"Brazil","y":-9.9161,"x":-63.0408},{"n":"Jurupa Valley","c":"United States","y":34.001,"x":-117.4705},{"n":"Medenine","c":"Tunisia","y":33.3547,"x":10.5053},{"n":"Muriae","c":"Brazil","y":-21.1308,"x":-42.3658},{"n":"Taoyang","c":"China","y":35.3754,"x":103.8612},{"n":"Gualeguaychu","c":"Argentina","y":-33.0078,"x":-58.5111},{"n":"Kasserine","c":"Tunisia","y":35.1667,"x":8.8333},{"n":"Beja","c":"Tunisia","y":36.7256,"x":9.1817},{"n":"Caen","c":"France","y":49.18,"x":-0.37},{"n":"Botosani","c":"Romania","y":47.7486,"x":26.6694},{"n":"Sandy Springs","c":"United States","y":33.9366,"x":-84.3703},{"n":"Yongju","c":"Korea, South","y":36.8217,"x":128.6308},{"n":"Gresham","c":"United States","y":45.5023,"x":-122.4413},{"n":"Uitenhage","c":"South Africa","y":-33.75,"x":25.4},{"n":"Bukoba","c":"Tanzania","y":-1.3333,"x":31.8167},{"n":"Maxixe","c":"Mozambique","y":-23.8597,"x":35.3472},{"n":"Soubre","c":"Côte D’Ivoire","y":5.7836,"x":-6.5939},{"n":"Lewisville","c":"United States","y":33.0452,"x":-96.9823},{"n":"Ipiales","c":"Colombia","y":0.8289,"x":-77.6406},{"n":"Mineshita","c":"Japan","y":35.1186,"x":138.9186},{"n":"Hillsboro","c":"United States","y":45.5272,"x":-122.9361},{"n":"Soma","c":"Turkey","y":39.1833,"x":27.6056},{"n":"San Buenaventura","c":"United States","y":34.2741,"x":-119.2314},{"n":"Musoma","c":"Tanzania","y":-1.5069,"x":33.8042},{"n":"Novoshakhtinsk","c":"Russia","y":47.7667,"x":39.9167},{"n":"Libmanan","c":"Philippines","y":13.7,"x":123.0667},{"n":"Crawley","c":"United Kingdom","y":51.1092,"x":-0.1872},{"n":"Ferizaj","c":"Kosovo","y":42.3667,"x":21.1667},{"n":"Ikeda","c":"Japan","y":34.8167,"x":135.4333},{"n":"St. John's","c":"Canada","y":47.4817,"x":-52.7971},{"n":"Salford","c":"United Kingdom","y":53.483,"x":-2.2931},{"n":"Wembley","c":"United Kingdom","y":51.5528,"x":-0.2979},{"n":"Pottstown","c":"United States","y":40.2507,"x":-75.6444},{"n":"Adigrat","c":"Ethiopia","y":14.2804,"x":39.47},{"n":"Itauna","c":"Brazil","y":-20.075,"x":-44.5758},{"n":"Al Fqih Ben Calah","c":"Morocco","y":32.5,"x":-6.7},{"n":"Moncton","c":"Canada","y":46.1328,"x":-64.7714},{"n":"Tadpatri","c":"India","y":14.92,"x":78.02},{"n":"Huauchinango","c":"Mexico","y":20.1767,"x":-98.0528},{"n":"Yasuj","c":"Iran","y":30.6667,"x":51.5833},{"n":"Tipitapa","c":"Nicaragua","y":12.1973,"x":-86.0971},{"n":"Alto Hospicio","c":"Chile","y":-20.25,"x":-70.1167},{"n":"Jalpaiguri","c":"India","y":26.5167,"x":88.7333},{"n":"Dagenham","c":"United Kingdom","y":51.5397,"x":0.1422},{"n":"Mangaldan","c":"Philippines","y":16.07,"x":120.4025},{"n":"Birnin Kebbi","c":"Nigeria","y":12.4504,"x":4.1999},{"n":"Samana","c":"Dominican Republic","y":19.2053,"x":-69.3364},{"n":"Siauliai","c":"Lithuania","y":55.9281,"x":23.3167},{"n":"Seversk","c":"Russia","y":56.6,"x":84.85},{"n":"El Limon","c":"Venezuela","y":10.3059,"x":-67.6321},{"n":"Reus","c":"Spain","y":41.1549,"x":1.1087},{"n":"Inglewood","c":"United States","y":33.9566,"x":-118.3444},{"n":"Sarh","c":"Chad","y":9.15,"x":18.3833},{"n":"An Nuhud","c":"Sudan","y":12.6904,"x":28.42},{"n":"San Rafael","c":"Argentina","y":-34.6175,"x":-68.3356},{"n":"Koszalin","c":"Poland","y":54.1903,"x":16.1817},{"n":"Escuintla","c":"Guatemala","y":14.3004,"x":-90.78},{"n":"Tagbilaran City","c":"Philippines","y":9.65,"x":123.85},{"n":"Tajimi","c":"Japan","y":35.3328,"x":137.1322},{"n":"Thunder Bay","c":"Canada","y":48.3822,"x":-89.2461},{"n":"Pavlohrad","c":"Ukraine","y":48.52,"x":35.87},{"n":"Yevpatoriia","c":"Ukraine","y":45.2,"x":33.3583},{"n":"Douliu","c":"Taiwan","y":23.7075,"x":120.5439},{"n":"Emmen","c":"Netherlands","y":52.7833,"x":6.9},{"n":"Moortebeek","c":"Belgium","y":50.8547,"x":4.3386},{"n":"Chaman","c":"Pakistan","y":30.921,"x":66.4597},{"n":"Queenstown","c":"South Africa","y":-31.9,"x":26.8833},{"n":"Umm Qasr","c":"Iraq","y":30.0342,"x":47.9294},{"n":"Sliven","c":"Bulgaria","y":42.6781,"x":26.326},{"n":"Suriapet","c":"India","y":17.15,"x":79.6167},{"n":"Kogon Shahri","c":"Uzbekistan","y":39.7211,"x":64.5458},{"n":"Ban Mangkon","c":"Thailand","y":13.6138,"x":100.6104},{"n":"League City","c":"United States","y":29.4873,"x":-95.1087},{"n":"Dinalupihan","c":"Philippines","y":14.8833,"x":120.4667},{"n":"Kefar Sava","c":"Israel","y":32.1858,"x":34.9077},{"n":"Alchevsk","c":"Ukraine","y":48.4672,"x":38.7983},{"n":"Chichicastenango","c":"Guatemala","y":14.9442,"x":-91.1105},{"n":"Araxa","c":"Brazil","y":-19.5928,"x":-46.9408},{"n":"Gillingham","c":"United Kingdom","y":51.385,"x":0.55},{"n":"Roubaix","c":"France","y":50.6901,"x":3.1817},{"n":"Eau Claire","c":"United States","y":44.8199,"x":-91.4949},{"n":"Bolzano","c":"Italy","y":46.5,"x":11.35},{"n":"Cambe","c":"Brazil","y":-23.2758,"x":-51.2778},{"n":"Charsadda","c":"Pakistan","y":34.1453,"x":71.7308},{"n":"Erdenet","c":"Mongolia","y":49.0333,"x":104.0833},{"n":"Turlock","c":"United States","y":37.5053,"x":-120.8588},{"n":"Temple","c":"United States","y":31.1076,"x":-97.3894},{"n":"La Piedad","c":"Mexico","y":20.3333,"x":-102.0167},{"n":"Chongshan","c":"China","y":18.7787,"x":109.5117},{"n":"Himamaylan","c":"Philippines","y":10.1,"x":122.8667},{"n":"Mansfield","c":"United Kingdom","y":53.15,"x":-1.2},{"n":"Mmabatho","c":"South Africa","y":-25.85,"x":25.6333},{"n":"Ilebo","c":"Congo (Kinshasa)","y":-4.3311,"x":20.5864},{"n":"Taungoo","c":"Myanmar","y":18.9483,"x":96.4179},{"n":"Daet","c":"Philippines","y":14.1167,"x":122.95},{"n":"Mao","c":"Dominican Republic","y":19.5667,"x":-71.0833},{"n":"Dieppe","c":"Canada","y":46.0989,"x":-64.7242},{"n":"Arzamas","c":"Russia","y":55.3833,"x":43.8},{"n":"Moron","c":"Argentina","y":-34.65,"x":-58.6167},{"n":"Longjiang","c":"China","y":47.3404,"x":123.18},{"n":"San Felipe","c":"Mexico","y":21.4833,"x":-101.2167},{"n":"Songea","c":"Tanzania","y":-10.6833,"x":35.65},{"n":"Artem","c":"Russia","y":43.35,"x":132.1833},{"n":"Erechim","c":"Brazil","y":-27.6339,"x":-52.2739},{"n":"Noyabrsk","c":"Russia","y":63.2017,"x":75.4517},{"n":"Ilopango","c":"El Salvador","y":13.7,"x":-89.1167},{"n":"Nakhon Si Thammarat","c":"Thailand","y":8.4363,"x":99.963},{"n":"Petrzalka","c":"Slovakia","y":48.1333,"x":17.1167},{"n":"Tubarao","c":"Brazil","y":-28.4669,"x":-49.0069},{"n":"Chabahar","c":"Iran","y":25.2836,"x":60.6236},{"n":"Monastir","c":"Tunisia","y":35.778,"x":10.8262},{"n":"Raba","c":"Indonesia","y":-8.4614,"x":118.747},{"n":"Orsha","c":"Belarus","y":54.5092,"x":30.4258},{"n":"Patos","c":"Brazil","y":-7.0244,"x":-37.28},{"n":"La Banda","c":"Argentina","y":-27.7333,"x":-64.25},{"n":"Sioux City","c":"United States","y":42.4959,"x":-96.3901},{"n":"Kemalpasa","c":"Turkey","y":38.4261,"x":27.4172},{"n":"Salisbury","c":"United States","y":38.3756,"x":-75.5867},{"n":"Vinh Long","c":"Vietnam","y":10.255,"x":105.9753},{"n":"Passos","c":"Brazil","y":-20.7189,"x":-46.61},{"n":"Ballarat","c":"Australia","y":-37.55,"x":143.85},{"n":"Davie","c":"United States","y":26.0789,"x":-80.287},{"n":"Aihua","c":"China","y":24.4629,"x":100.135},{"n":"Achinsk","c":"Russia","y":56.2817,"x":90.5039},{"n":"Daly City","c":"United States","y":37.6862,"x":-122.4685},{"n":"Dunedin","c":"New Zealand","y":-45.8667,"x":170.5},{"n":"Contramaestre","c":"Cuba","y":20.3,"x":-76.2506},{"n":"Subotica","c":"Serbia","y":46.0983,"x":19.67},{"n":"Girona","c":"Spain","y":41.9833,"x":2.8167},{"n":"Nusaybin","c":"Turkey","y":37.0833,"x":41.2167},{"n":"Lo Barnechea","c":"Chile","y":-33.35,"x":-70.5167},{"n":"Paco do Lumiar","c":"Brazil","y":-2.5319,"x":-44.1078},{"n":"Trincomalee","c":"Sri Lanka","y":8.5667,"x":81.2333},{"n":"Mang La","c":"Vietnam","y":14.3838,"x":107.9833},{"n":"Nova Serrana","c":"Brazil","y":-19.8758,"x":-44.9839},{"n":"Akhmim","c":"Egypt","y":26.5642,"x":31.7461},{"n":"Azare","c":"Nigeria","y":11.6804,"x":10.19},{"n":"Brovary","c":"Ukraine","y":50.5114,"x":30.7903},{"n":"Itumbiara","c":"Brazil","y":-18.42,"x":-49.2178},{"n":"Yelets","c":"Russia","y":52.6167,"x":38.4667},{"n":"Pushkino","c":"Russia","y":56.0167,"x":37.85},{"n":"Tikrit","c":"Iraq","y":34.6,"x":43.6833},{"n":"Robat Karim","c":"Iran","y":35.4847,"x":51.0828},{"n":"Malacatan","c":"Guatemala","y":14.9121,"x":-92.0606},{"n":"Koutiala","c":"Mali","y":12.3833,"x":-5.4667},{"n":"Lerma","c":"Mexico","y":19.2847,"x":-99.5119},{"n":"Ciudad Rio Bravo","c":"Mexico","y":25.9861,"x":-98.0889},{"n":"Highlands Ranch","c":"United States","y":39.5419,"x":-104.9708},{"n":"Allen","c":"United States","y":33.1088,"x":-96.6735},{"n":"Tarim","c":"Yemen","y":16.05,"x":49},{"n":"Kroonstad","c":"South Africa","y":-27.6456,"x":27.2317},{"n":"Mazyr","c":"Belarus","y":52.05,"x":29.2333},{"n":"Kandhkot","c":"Pakistan","y":28.4,"x":69.3},{"n":"Toride","c":"Japan","y":35.9114,"x":140.0503},{"n":"Granada","c":"Nicaragua","y":11.93,"x":-85.9561},{"n":"Ituiutaba","c":"Brazil","y":-18.9689,"x":-49.465},{"n":"Kongolo","c":"Congo (Kinshasa)","y":-5.3795,"x":26.98},{"n":"Moers","c":"Germany","y":51.4592,"x":6.6197},{"n":"Liberec","c":"Czechia","y":50.77,"x":15.0584},{"n":"Yozgat","c":"Turkey","y":39.8208,"x":34.8083},{"n":"Novara","c":"Italy","y":45.45,"x":8.6167},{"n":"Subic","c":"Philippines","y":14.9,"x":120.2333},{"n":"Al Faw","c":"Iraq","y":29.98,"x":48.47},{"n":"West Covina","c":"United States","y":34.0555,"x":-117.9112},{"n":"Salzgitter","c":"Germany","y":52.1503,"x":10.3593},{"n":"Berdsk","c":"Russia","y":54.75,"x":83.1},{"n":"Sparks","c":"United States","y":39.5729,"x":-119.7157},{"n":"Waterloo","c":"Canada","y":43.4667,"x":-80.5167},{"n":"Lavras","c":"Brazil","y":-21.245,"x":-45},{"n":"Galle","c":"Sri Lanka","y":6.0395,"x":80.2194},{"n":"San Vicente de Baracaldo","c":"Spain","y":43.2972,"x":-2.9917},{"n":"Lingayen","c":"Philippines","y":16.0167,"x":120.2333},{"n":"Tadepallegudem","c":"India","y":16.8333,"x":81.5},{"n":"Zomba","c":"Malawi","y":-15.3833,"x":35.3333},{"n":"Dobrich","c":"Bulgaria","y":43.5667,"x":27.8333},{"n":"Sergiyev Posad","c":"Russia","y":56.3,"x":38.1333},{"n":"Konotop","c":"Ukraine","y":51.2369,"x":33.2027},{"n":"Wichita Falls","c":"United States","y":33.9072,"x":-98.5291},{"n":"Courbevoic","c":"France","y":48.8978,"x":2.2531},{"n":"Zihuatanejo","c":"Mexico","y":17.6444,"x":-101.5511},{"n":"Fugangcun","c":"China","y":23.5899,"x":116.5924},{"n":"Trindade","c":"Brazil","y":-16.6489,"x":-49.4889},{"n":"San Ildefonso","c":"Philippines","y":15.0789,"x":120.9419},{"n":"Bouskoura","c":"Morocco","y":33.4489,"x":-7.6486},{"n":"Inzai","c":"Japan","y":35.8322,"x":140.1458},{"n":"Khak-e `Ali","c":"Iran","y":36.1283,"x":50.1764},{"n":"Maumere","c":"Indonesia","y":-8.6189,"x":122.2123},{"n":"Samal","c":"Philippines","y":7.05,"x":125.7333},{"n":"San Mateo","c":"United States","y":37.5521,"x":-122.3122},{"n":"Villa Luzuriaga","c":"Argentina","y":-34.6667,"x":-58.5833},{"n":"Eastbourne","c":"United Kingdom","y":50.77,"x":0.28},{"n":"Worcester","c":"United Kingdom","y":52.192,"x":-2.22},{"n":"Caseros","c":"Argentina","y":-34.6167,"x":-58.5333},{"n":"Fyfield","c":"United Kingdom","y":51.739,"x":0.2722},{"n":"Quezon","c":"Philippines","y":7.7333,"x":125.1},{"n":"Ginowan","c":"Japan","y":26.2817,"x":127.7783},{"n":"Tula de Allende","c":"Mexico","y":20.05,"x":-99.35},{"n":"Catbalogan","c":"Philippines","y":11.7833,"x":124.8833},{"n":"Abengourou","c":"Côte D’Ivoire","y":6.7297,"x":-3.4964},{"n":"Lower Hutt","c":"New Zealand","y":-41.2167,"x":174.9167},{"n":"Delft","c":"Netherlands","y":52.0119,"x":4.3594},{"n":"Kamianets-Podilskyi","c":"Ukraine","y":48.6806,"x":26.5806},{"n":"Kalyani","c":"India","y":22.975,"x":88.4344},{"n":"Kilinochchi","c":"Sri Lanka","y":9.4004,"x":80.3999},{"n":"Saijo","c":"Japan","y":33.9196,"x":133.1812},{"n":"Piacenza","c":"Italy","y":45.05,"x":9.7},{"n":"EdDamer","c":"Sudan","y":17.59,"x":33.96},{"n":"Norwalk","c":"United States","y":33.9069,"x":-118.0829},{"n":"Santa Rosa","c":"Argentina","y":-36.6203,"x":-64.2906},{"n":"Isehara","c":"Japan","y":35.4028,"x":139.315},{"n":"Dolisie","c":"Congo (Brazzaville)","y":-4.1961,"x":12.6731},{"n":"Itaperuna","c":"Brazil","y":-21.205,"x":-41.8878},{"n":"Negapatam","c":"India","y":10.7667,"x":79.8333},{"n":"Pateros","c":"Philippines","y":14.5417,"x":121.0667},{"n":"Wigan","c":"United Kingdom","y":53.5448,"x":-2.6318},{"n":"Tourcoing","c":"France","y":50.7239,"x":3.1612},{"n":"Malungun","c":"Philippines","y":6.2667,"x":125.2833},{"n":"Siegen","c":"Germany","y":50.8756,"x":8.0167},{"n":"Dongguazhen","c":"China","y":25.079,"x":101.502},{"n":"Biak","c":"Indonesia","y":-1.1615,"x":136.0485},{"n":"Elista","c":"Russia","y":46.3167,"x":44.2667},{"n":"Yishi","c":"China","y":35.1379,"x":110.764},{"n":"Libertad","c":"Argentina","y":-34.6833,"x":-58.6833},{"n":"Mazatenango","c":"Guatemala","y":14.5333,"x":-91.5},{"n":"Rialto","c":"United States","y":34.1174,"x":-117.3894},{"n":"Breves","c":"Brazil","y":-1.6819,"x":-50.48},{"n":"Lida","c":"Belarus","y":53.8872,"x":25.3028},{"n":"Thika","c":"Kenya","y":-1.0396,"x":37.09},{"n":"Manteca","c":"United States","y":37.7927,"x":-121.2264},{"n":"Bumba","c":"Congo (Kinshasa)","y":2.19,"x":22.46},{"n":"Guiguinto","c":"Philippines","y":14.8333,"x":120.8833},{"n":"Bayugan","c":"Philippines","y":8.7143,"x":125.7481},{"n":"Burzaco","c":"Argentina","y":-34.8167,"x":-58.3667},{"n":"Sakado","c":"Japan","y":35.9572,"x":139.4031},{"n":"Sao Lourenco da Mata","c":"Brazil","y":-8.0019,"x":-35.0178},{"n":"Talara","c":"Peru","y":-4.5833,"x":-81.2667},{"n":"Messaad","c":"Algeria","y":34.1542,"x":3.4969},{"n":"Novokuybyshevsk","c":"Russia","y":53.1,"x":49.9167},{"n":"Yilong","c":"China","y":23.7081,"x":102.496},{"n":"Bergama","c":"Turkey","y":39.1228,"x":27.1783},{"n":"Naujan","c":"Philippines","y":13.3233,"x":121.3028},{"n":"Miryang","c":"Korea, South","y":35.4933,"x":128.7489},{"n":"Nyeri","c":"Kenya","y":-0.4167,"x":36.95},{"n":"Mengdingjie","c":"China","y":23.5517,"x":99.0653},{"n":"Satu Mare","c":"Romania","y":47.79,"x":22.89},{"n":"Houzhuang","c":"China","y":35.62,"x":111.21},{"n":"Hildesheim","c":"Germany","y":52.15,"x":9.95},{"n":"Nanterre","c":"France","y":48.8988,"x":2.1969},{"n":"Sangju","c":"Korea, South","y":36.4153,"x":128.1606},{"n":"Kirklareli","c":"Turkey","y":41.7347,"x":27.2253},{"n":"Hove","c":"United Kingdom","y":50.8352,"x":-0.1758},{"n":"Arden-Arcade","c":"United States","y":38.6034,"x":-121.381},{"n":"Bhadreswar","c":"India","y":22.82,"x":88.35},{"n":"Nikaia","c":"Greece","y":37.9667,"x":23.6333},{"n":"Hengnan","c":"China","y":22.534,"x":113.249},{"n":"Saint Helens","c":"United Kingdom","y":53.4541,"x":-2.7461},{"n":"El Cajon","c":"United States","y":32.8017,"x":-116.9605},{"n":"Bethal","c":"South Africa","y":-26.45,"x":29.45},{"n":"Mumias","c":"Kenya","y":0.3333,"x":34.4833},{"n":"Burbank","c":"United States","y":34.1879,"x":-118.3235},{"n":"Longmont","c":"United States","y":40.1686,"x":-105.1005},{"n":"Mayari","c":"Cuba","y":20.6592,"x":-75.6781},{"n":"Mositai","c":"China","y":45.5266,"x":119.6506},{"n":"Cawayan","c":"Philippines","y":9.9667,"x":122.6167},{"n":"Dhangadhi","c":"Nepal","y":28.6833,"x":80.6},{"n":"Kashmar","c":"Iran","y":35.2383,"x":58.4656},{"n":"Maramag","c":"Philippines","y":7.7667,"x":125},{"n":"San Felipe del Progreso","c":"Mexico","y":19.7125,"x":-99.9511},{"n":"Klagenfurt","c":"Austria","y":46.6167,"x":14.3},{"n":"Delta","c":"Canada","y":49.0847,"x":-123.0586},{"n":"Vilhena","c":"Brazil","y":-12.7406,"x":-60.1458},{"n":"Chilakalurupet","c":"India","y":16.0892,"x":80.1672},{"n":"Coatepec","c":"Mexico","y":19.4553,"x":-96.9586},{"n":"Sabratah","c":"Libya","y":32.7922,"x":12.4842},{"n":"Chishtian","c":"Pakistan","y":29.7958,"x":72.8578},{"n":"Boryeong","c":"Korea, South","y":36.3333,"x":126.6167},{"n":"Shushtar","c":"Iran","y":32.0436,"x":48.8569},{"n":"Jingping","c":"China","y":39.5189,"x":112.2837},{"n":"Santo Antonio de Jesus","c":"Brazil","y":-12.9692,"x":-39.2611},{"n":"Teluk Intan","c":"Malaysia","y":4.0333,"x":101.0167},{"n":"Hemel Hempstead","c":"United Kingdom","y":51.7526,"x":-0.4692},{"n":"Assis","c":"Brazil","y":-22.6619,"x":-50.4119},{"n":"Berisso","c":"Argentina","y":-34.8667,"x":-57.8667},{"n":"Tizayuca","c":"Mexico","y":19.8333,"x":-98.9833},{"n":"Renton","c":"United States","y":47.4784,"x":-122.1919},{"n":"Ancona","c":"Italy","y":43.6167,"x":13.5167},{"n":"Vitry-sur-Seine","c":"France","y":48.7875,"x":2.3928},{"n":"Chatham","c":"Canada","y":42.4229,"x":-82.1324},{"n":"`Ibri","c":"Oman","y":23.2254,"x":56.517},{"n":"Vista","c":"United States","y":33.1896,"x":-117.2386},{"n":"Zheleznogorsk","c":"Russia","y":52.3333,"x":35.3667},{"n":"Logan","c":"United States","y":41.74,"x":-111.8419},{"n":"Sungai Penuh","c":"Indonesia","y":-2.0636,"x":101.3961},{"n":"Prescott Valley","c":"United States","y":34.5983,"x":-112.3176},{"n":"Trinidad","c":"Bolivia","y":-14.8333,"x":-64.9},{"n":"Olomouc","c":"Czechia","y":49.5939,"x":17.2508},{"n":"Vacaville","c":"United States","y":38.359,"x":-121.968},{"n":"San Luis de la Paz","c":"Mexico","y":21.3,"x":-100.5167},{"n":"Ain Oussera","c":"Algeria","y":35.4489,"x":2.9044},{"n":"Itaituba","c":"Brazil","y":-4.2758,"x":-55.9839},{"n":"Wakefield","c":"United Kingdom","y":53.68,"x":-1.49},{"n":"Liancheng","c":"China","y":24.0515,"x":105.0573},{"n":"Kousseri","c":"Cameroon","y":12.0833,"x":15.0333},{"n":"Oued Zem","c":"Morocco","y":32.86,"x":-6.56},{"n":"Edinburg","c":"United States","y":26.3197,"x":-98.1596},{"n":"Weifen","c":"China","y":38.4633,"x":111.1203},{"n":"Gutersloh","c":"Germany","y":51.9,"x":8.3833},{"n":"Carmel","c":"United States","y":39.965,"x":-86.146},{"n":"Spokane Valley","c":"United States","y":47.6626,"x":-117.2346},{"n":"Oum el Bouaghi","c":"Algeria","y":35.8706,"x":7.115},{"n":"Watford","c":"United Kingdom","y":51.655,"x":-0.3957},{"n":"San Angelo","c":"United States","y":31.4424,"x":-100.4506},{"n":"Jilotepec","c":"Mexico","y":19.9519,"x":-99.5328},{"n":"Salihorsk","c":"Belarus","y":52.7842,"x":27.5425},{"n":"Barnsley","c":"United Kingdom","y":53.5537,"x":-1.4791},{"n":"Cottbus","c":"Germany","y":51.7606,"x":14.3342},{"n":"Bongao","c":"Philippines","y":5.0292,"x":119.7731},{"n":"Kpalime","c":"Togo","y":6.91,"x":0.6281},{"n":"Kaiserslautern","c":"Germany","y":49.4447,"x":7.7689},{"n":"Carmona","c":"Philippines","y":14.3167,"x":121.05},{"n":"Gangtok","c":"India","y":27.33,"x":88.62},{"n":"La Crosse","c":"United States","y":43.824,"x":-91.2268},{"n":"Ahar","c":"Iran","y":38.475,"x":47.0603},{"n":"Konan","c":"Japan","y":35.3333,"x":136.8667},{"n":"Diourbel","c":"Senegal","y":14.655,"x":-16.2314},{"n":"Bulan","c":"Philippines","y":12.6714,"x":123.875},{"n":"Masjed Soleyman","c":"Iran","y":31.9333,"x":49.3},{"n":"Mairipora","c":"Brazil","y":-23.3189,"x":-46.5869},{"n":"Torbat-e Jam","c":"Iran","y":35.2439,"x":60.6225},{"n":"Manolo Fortich","c":"Philippines","y":8.3697,"x":124.8644},{"n":"Edison","c":"United States","y":40.536,"x":-74.3697},{"n":"Idaho Falls","c":"United States","y":43.4872,"x":-112.0362},{"n":"Morales","c":"Guatemala","y":15.4725,"x":-88.8414},{"n":"Holland","c":"United States","y":42.7677,"x":-86.0985},{"n":"Red Deer","c":"Canada","y":52.2681,"x":-113.8111},{"n":"Charlottesville","c":"United States","y":38.0375,"x":-78.4855},{"n":"Shahrisabz","c":"Uzbekistan","y":39.05,"x":66.8333},{"n":"Longview","c":"United States","y":32.5193,"x":-94.7621},{"n":"Lincoln","c":"United Kingdom","y":53.2344,"x":-0.5386},{"n":"Navapolatsk","c":"Belarus","y":55.5333,"x":28.6667},{"n":"Woodbridge","c":"United States","y":40.5611,"x":-74.2943},{"n":"Bacabal","c":"Brazil","y":-4.225,"x":-44.78},{"n":"Tracy","c":"United States","y":37.7269,"x":-121.4522},{"n":"Kamloops","c":"Canada","y":50.6761,"x":-120.3408},{"n":"Nanxicun","c":"China","y":23.4976,"x":116.2435},{"n":"Ramnicu Valcea","c":"Romania","y":45.1047,"x":24.3756},{"n":"Pulilan","c":"Philippines","y":14.902,"x":120.849},{"n":"Kettering","c":"United Kingdom","y":52.3931,"x":-0.7229},{"n":"Viseu","c":"Portugal","y":40.6667,"x":-7.9167},{"n":"Bayeux","c":"Brazil","y":-7.1333,"x":-34.9333},{"n":"Kohima","c":"India","y":25.6667,"x":94.1194},{"n":"Mingacevir","c":"Azerbaijan","y":40.77,"x":47.0489},{"n":"Janakpur","c":"Nepal","y":26.7122,"x":85.9217},{"n":"Chipata","c":"Zambia","y":-13.6386,"x":32.6453},{"n":"Ciudad General Belgrano","c":"Argentina","y":-34.7261,"x":-58.5289},{"n":"Khanty-Mansiysk","c":"Russia","y":61,"x":69},{"n":"Creteil","c":"France","y":48.7911,"x":2.4628},{"n":"Maribor","c":"Slovenia","y":46.55,"x":15.6333},{"n":"Yashio","c":"Japan","y":35.8228,"x":139.8392},{"n":"Bismarck","c":"United States","y":46.8144,"x":-100.7694},{"n":"Herzliyya","c":"Israel","y":32.1556,"x":34.8422},{"n":"Yen Bai","c":"Vietnam","y":21.7,"x":104.8667},{"n":"San Fernando","c":"Spain","y":36.4667,"x":-6.2},{"n":"Shumen","c":"Bulgaria","y":43.27,"x":26.9244},{"n":"Orem","c":"United States","y":40.2983,"x":-111.6992},{"n":"Half Way Tree","c":"Jamaica","y":18.0106,"x":-76.7975},{"n":"Vi Thanh","c":"Vietnam","y":9.7833,"x":105.4708},{"n":"Tumbes","c":"Peru","y":-3.5667,"x":-80.45},{"n":"Malindi","c":"Kenya","y":-3.21,"x":40.1},{"n":"Szekesfehervar","c":"Hungary","y":47.2,"x":18.4167},{"n":"San Joaquin","c":"Chile","y":-33.5,"x":-70.6167},{"n":"Xirdalan","c":"Azerbaijan","y":40.4486,"x":49.7564},{"n":"Tenancingo","c":"Mexico","y":18.9608,"x":-99.5906},{"n":"Ponta Pora","c":"Brazil","y":-22.5361,"x":-55.7256},{"n":"Wangqing","c":"China","y":43.3126,"x":129.7572},{"n":"Sibolga","c":"Indonesia","y":1.7425,"x":98.7792},{"n":"Aubervilliers","c":"France","y":48.9131,"x":2.3831},{"n":"Balanga","c":"Philippines","y":14.6833,"x":120.5333},{"n":"Bunia","c":"Congo (Kinshasa)","y":1.5604,"x":30.24},{"n":"Arauca","c":"Colombia","y":7.0903,"x":-70.7617},{"n":"La Reina","c":"Chile","y":-33.45,"x":-70.55},{"n":"Sidi Slimane","c":"Morocco","y":34.26,"x":-5.93},{"n":"Peje","c":"Kosovo","y":42.65,"x":20.3},{"n":"Yishui","c":"China","y":35.7904,"x":118.62},{"n":"Fulham","c":"United Kingdom","y":51.4828,"x":-0.195},{"n":"Schwerin","c":"Germany","y":53.6333,"x":11.4167},{"n":"La Marsa","c":"Tunisia","y":36.8764,"x":10.3253},{"n":"San Francisco Solano","c":"Argentina","y":-34.7667,"x":-58.3167},{"n":"Zifta","c":"Egypt","y":30.7119,"x":31.2394},{"n":"Colombes","c":"France","y":48.9236,"x":2.2522},{"n":"Cankiri","c":"Turkey","y":40.6,"x":33.6167},{"n":"East Ham","c":"United Kingdom","y":51.5323,"x":0.0554},{"n":"Yotsukaido","c":"Japan","y":35.67,"x":140.1683},{"n":"Ceske Budejovice","c":"Czechia","y":48.9747,"x":14.4747},{"n":"Masbate","c":"Philippines","y":12.3667,"x":123.6167},{"n":"Kakamega","c":"Kenya","y":0.2833,"x":34.75},{"n":"Rio Gallegos","c":"Argentina","y":-51.6333,"x":-69.2333},{"n":"Tataouine","c":"Tunisia","y":32.9333,"x":10.45},{"n":"Fenggang","c":"China","y":23.6271,"x":116.5679},{"n":"Ludwigsburg","c":"Germany","y":48.8975,"x":9.1919},{"n":"Compton","c":"United States","y":33.893,"x":-118.2275},{"n":"Errachidia","c":"Morocco","y":31.9319,"x":-4.4244},{"n":"Esslingen","c":"Germany","y":48.7406,"x":9.3108},{"n":"Nisshin","c":"Japan","y":35.1333,"x":137.0333},{"n":"Al Bahah","c":"Saudi Arabia","y":20.0129,"x":41.4677},{"n":"Obu","c":"Japan","y":35.0167,"x":136.9667},{"n":"Sunrise","c":"United States","y":26.1547,"x":-80.2997},{"n":"Hartlepool","c":"United Kingdom","y":54.69,"x":-1.21},{"n":"Xiancun","c":"China","y":23.2374,"x":116.3152},{"n":"Naxcivan","c":"Azerbaijan","y":39.2092,"x":45.4122},{"n":"Gjakove","c":"Kosovo","y":42.3833,"x":20.4333},{"n":"Mtwara","c":"Tanzania","y":-10.2736,"x":40.1828},{"n":"Ealing","c":"United Kingdom","y":51.5175,"x":-0.2988},{"n":"Birkenhead","c":"United Kingdom","y":53.393,"x":-3.014},{"n":"Guercif","c":"Morocco","y":34.23,"x":-3.36},{"n":"Quincy","c":"United States","y":42.2516,"x":-71.0183},{"n":"Ben Arous","c":"Tunisia","y":36.7531,"x":10.2189},{"n":"Lynn","c":"United States","y":42.4779,"x":-70.9663},{"n":"Catarman","c":"Philippines","y":12.45,"x":124.65},{"n":"Monte Chingolo","c":"Argentina","y":-34.7333,"x":-58.35},{"n":"Drobeta-Turnu Severin","c":"Romania","y":44.6361,"x":22.6556},{"n":"Tultepec","c":"Mexico","y":19.685,"x":-99.1281},{"n":"Haskovo","c":"Bulgaria","y":41.9346,"x":25.5556},{"n":"Suceava","c":"Romania","y":47.6514,"x":26.2556},{"n":"Al Fujayrah","c":"United Arab Emirates","y":25.1308,"x":56.3347},{"n":"Tartu","c":"Estonia","y":58.38,"x":26.7225},{"n":"Ciudad Lazaro Cardenas","c":"Mexico","y":17.9561,"x":-102.1922},{"n":"Hradec Kralove","c":"Czechia","y":50.2092,"x":15.8319},{"n":"Sirnak","c":"Turkey","y":37.5164,"x":42.4611},{"n":"South Gate","c":"United States","y":33.9448,"x":-118.1926},{"n":"Tonacatepeque","c":"El Salvador","y":13.7817,"x":-89.12},{"n":"Miaoli","c":"Taiwan","y":24.57,"x":120.82},{"n":"Makeni","c":"Sierra Leone","y":8.8817,"x":-12.0442},{"n":"Nuneaton","c":"United Kingdom","y":52.523,"x":-1.468},{"n":"Itanhaem","c":"Brazil","y":-24.1831,"x":-46.7889},{"n":"Brixton","c":"United Kingdom","y":51.463,"x":-0.106},{"n":"Kirkland","c":"United States","y":47.6974,"x":-122.2054},{"n":"Usti nad Labem","c":"Czechia","y":50.6592,"x":14.0417},{"n":"Levallois-Perret","c":"France","y":48.895,"x":2.2872},{"n":"Brusque","c":"Brazil","y":-27.13,"x":-48.93},{"n":"Santiago de Compostela","c":"Spain","y":42.8778,"x":-8.5444},{"n":"Pardubice","c":"Czechia","y":50.0386,"x":15.7792},{"n":"Magadan","c":"Russia","y":59.5667,"x":150.8},{"n":"Tulcea","c":"Romania","y":45.1993,"x":28.7967},{"n":"Bender","c":"Moldova","y":46.8333,"x":29.4833},{"n":"Ben Guerir","c":"Morocco","y":32.23,"x":-7.95},{"n":"Panevezys","c":"Lithuania","y":55.725,"x":24.3639},{"n":"Jaffna","c":"Sri Lanka","y":9.6647,"x":80.0167},{"n":"Bromley","c":"United Kingdom","y":51.407,"x":0.021},{"n":"Queluz","c":"Portugal","y":38.7566,"x":-9.2545},{"n":"Bath","c":"United Kingdom","y":51.38,"x":-2.36},{"n":"Kargilik","c":"China","y":37.8822,"x":77.4162},{"n":"Pandi","c":"Philippines","y":14.8667,"x":120.95},{"n":"Oulad Teima","c":"Morocco","y":30.4,"x":-9.21},{"n":"Edmonton","c":"United Kingdom","y":51.6154,"x":-0.0708},{"n":"Lqoliaa","c":"Morocco","y":30.2942,"x":-9.4544},{"n":"Hayes","c":"United Kingdom","y":51.5127,"x":-0.4211},{"n":"Lobnya","c":"Russia","y":56.0167,"x":37.4833},{"n":"Francistown","c":"Botswana","y":-21.1736,"x":27.5125},{"n":"Aulnay-sous-Bois","c":"France","y":48.9386,"x":2.4906},{"n":"Jonkoping","c":"Sweden","y":57.7833,"x":14.1667},{"n":"Isulan","c":"Philippines","y":6.6333,"x":124.6},{"n":"Fuengirola","c":"Spain","y":36.5417,"x":-4.625},{"n":"Umea","c":"Sweden","y":63.8285,"x":20.2706},{"n":"Glyfada","c":"Greece","y":37.88,"x":23.7533},{"n":"Kitanagoya","c":"Japan","y":35.25,"x":136.8667},{"n":"Cadereyta Jimenez","c":"Mexico","y":25.6,"x":-100},{"n":"Babahoyo","c":"Ecuador","y":-1.8167,"x":-79.5167},{"n":"Remedios de Escalada","c":"Argentina","y":-34.7167,"x":-58.4},{"n":"Vanadzor","c":"Armenia","y":40.8128,"x":44.4883},{"n":"Germantown","c":"United States","y":39.1755,"x":-77.2643},{"n":"Higashiyamato","c":"Japan","y":35.7456,"x":139.4267},{"n":"Catanzaro","c":"Italy","y":38.91,"x":16.5875},{"n":"Tartus","c":"Syria","y":34.8833,"x":35.8833},{"n":"Valjevo","c":"Serbia","y":44.2667,"x":19.8833},{"n":"Santa Monica","c":"United States","y":34.0232,"x":-118.4813},{"n":"Poitiers","c":"France","y":46.58,"x":0.34},{"n":"Acayucan","c":"Mexico","y":17.9422,"x":-94.9103},{"n":"Nenjiang","c":"China","y":49.175,"x":125.219},{"n":"Gjilan","c":"Kosovo","y":42.47,"x":21.47},{"n":"Jalal-Abad","c":"Kyrgyzstan","y":40.9375,"x":72.9861},{"n":"Presov","c":"Slovakia","y":49,"x":21.2333},{"n":"Balkanabat","c":"Turkmenistan","y":39.5119,"x":54.365},{"n":"Mechelen","c":"Belgium","y":51.0281,"x":4.4803},{"n":"Mukacheve","c":"Ukraine","y":48.4414,"x":22.7136},{"n":"As Salt","c":"Jordan","y":32.0333,"x":35.7333},{"n":"Tangxing","c":"China","y":35.7261,"x":111.7108},{"n":"Volos","c":"Greece","y":39.3611,"x":22.9425},{"n":"Versailles","c":"France","y":48.8053,"x":2.135},{"n":"Viana do Castelo","c":"Portugal","y":41.7,"x":-8.8333},{"n":"Woolwich","c":"United Kingdom","y":51.488,"x":0.063},{"n":"Miami Beach","c":"United States","y":25.8171,"x":-80.1396},{"n":"San Leandro","c":"United States","y":37.7071,"x":-122.1601},{"n":"Sesto San Giovanni","c":"Italy","y":45.5333,"x":9.2333},{"n":"Ciudad de Ceuta","c":"Spain","y":35.8867,"x":-5.3},{"n":"Bracknell","c":"United Kingdom","y":51.416,"x":-0.749},{"n":"Podujeve","c":"Kosovo","y":42.9167,"x":21.2},{"n":"Apizaco","c":"Mexico","y":19.4167,"x":-98.1333},{"n":"San Baudilio de Llobregat","c":"Spain","y":41.3458,"x":2.0417},{"n":"Coronel Oviedo","c":"Paraguay","y":-25.45,"x":-56.44},{"n":"Tala","c":"Mexico","y":20.6525,"x":-103.7028},{"n":"Carrieres-sur-Seine","c":"France","y":48.9108,"x":2.2889},{"n":"Fuentes del Valle","c":"Mexico","y":19.6325,"x":-99.1386},{"n":"Ebolowa","c":"Cameroon","y":2.9,"x":11.15},{"n":"Torre del Greco","c":"Italy","y":40.7853,"x":14.3953},{"n":"San Juan de los Morros","c":"Venezuela","y":9.901,"x":-67.354},{"n":"Citrus Heights","c":"United States","y":38.6948,"x":-121.288},{"n":"State College","c":"United States","y":40.7909,"x":-77.8568},{"n":"Koudougou","c":"Burkina Faso","y":12.25,"x":-2.3667},{"n":"Darayya","c":"Syria","y":33.4589,"x":36.2372},{"n":"Lokossa","c":"Benin","y":6.615,"x":1.715},{"n":"Salina Cruz","c":"Mexico","y":16.1671,"x":-95.2},{"n":"Daxincun","c":"China","y":38.443,"x":106.309},{"n":"Concepcion","c":"Paraguay","y":-23.4025,"x":-57.4414},{"n":"Jalpa de Mendez","c":"Mexico","y":18.1764,"x":-93.0631},{"n":"Kawit","c":"Philippines","y":14.4333,"x":120.9},{"n":"Mardin","c":"Turkey","y":37.3167,"x":40.7378},{"n":"Mingxing","c":"China","y":37.4264,"x":112.5679},{"n":"Nakhon Sawan","c":"Thailand","y":15.7133,"x":100.1353},{"n":"Nacajuca","c":"Mexico","y":18.1692,"x":-93.0197},{"n":"Cardenas","c":"Mexico","y":17.983,"x":-93.367},{"n":"Loznica","c":"Serbia","y":44.5333,"x":19.2258},{"n":"Edgware","c":"United Kingdom","y":51.6185,"x":-0.2729},{"n":"Tucupita","c":"Venezuela","y":9.0575,"x":-62.0452},{"n":"Nabatiye","c":"Lebanon","y":33.3833,"x":35.45},{"n":"Ezpeleta","c":"Argentina","y":-34.7517,"x":-58.2344},{"n":"Owariasahi","c":"Japan","y":35.2167,"x":137.0333},{"n":"Toledo","c":"Spain","y":39.8567,"x":-4.0244},{"n":"Piatra Neamt","c":"Romania","y":46.9275,"x":26.3708},{"n":"Busto Arsizio","c":"Italy","y":45.612,"x":8.8518},{"n":"Ath Thawrah","c":"Syria","y":35.8344,"x":38.5464},{"n":"Hawthorne","c":"United States","y":33.9146,"x":-118.3476},{"n":"Avare","c":"Brazil","y":-23.0986,"x":-48.9258},{"n":"Maasin","c":"Philippines","y":10.1333,"x":124.85},{"n":"Kouvola","c":"Finland","y":60.8681,"x":26.7042},{"n":"Kuznetsk","c":"Russia","y":53.1167,"x":46.6},{"n":"El Bayadh","c":"Algeria","y":33.6831,"x":1.0192},{"n":"Ciudad Lerdo","c":"Mexico","y":25.55,"x":-103.5167},{"n":"Issy-les-Moulineaux","c":"France","y":48.8239,"x":2.27},{"n":"Como","c":"Italy","y":45.8103,"x":9.0861},{"n":"Pori","c":"Finland","y":61.4847,"x":21.7972},{"n":"Scunthorpe","c":"United Kingdom","y":53.5809,"x":-0.6502},{"n":"Yambol","c":"Bulgaria","y":42.4824,"x":26.5038},{"n":"Louga","c":"Senegal","y":15.6167,"x":-16.2167},{"n":"Manfalut","c":"Egypt","y":27.3128,"x":30.9703},{"n":"Whittier","c":"United States","y":33.9678,"x":-118.0188},{"n":"Clifton","c":"United States","y":40.8631,"x":-74.1575},{"n":"Puerto Maldonado","c":"Peru","y":-12.6,"x":-69.1833},{"n":"Hetauda","c":"Nepal","y":27.4167,"x":85.0333},{"n":"Tacambaro de Codallos","c":"Mexico","y":19.2356,"x":-101.4569},{"n":"Chaguanas","c":"Trinidad And Tobago","y":10.5144,"x":-61.4075},{"n":"Cunduacan","c":"Mexico","y":18.0667,"x":-93.1667},{"n":"Pazardzhik","c":"Bulgaria","y":42.1892,"x":24.3317},{"n":"Uman","c":"Ukraine","y":48.75,"x":30.2167},{"n":"Nazareth","c":"Israel","y":32.7021,"x":35.2978},{"n":"Ivanteyevka","c":"Russia","y":55.97,"x":37.92},{"n":"Nagaoka","c":"Japan","y":34.9267,"x":135.6956},{"n":"Osijek","c":"Croatia","y":45.5603,"x":18.6703},{"n":"Cozumel","c":"Mexico","y":20.5104,"x":-86.9493},{"n":"Cukai","c":"Malaysia","y":4.2332,"x":103.4479},{"n":"Mbarara","c":"Uganda","y":-0.5996,"x":30.65},{"n":"Lucerne","c":"Switzerland","y":47.0523,"x":8.3059},{"n":"Mitrovice","c":"Kosovo","y":42.8833,"x":20.8667},{"n":"Cabo San Lucas","c":"Mexico","y":22.8897,"x":-109.9156},{"n":"Champigny-sur-Marne","c":"France","y":48.8172,"x":2.5156},{"n":"Rivera","c":"Uruguay","y":-30.9025,"x":-55.5506},{"n":"Kunitachi","c":"Japan","y":35.6839,"x":139.4414},{"n":"Ouidah","c":"Benin","y":6.3604,"x":2.09},{"n":"Newmarket","c":"Canada","y":44.05,"x":-79.4667},{"n":"Bumahen","c":"Iran","y":35.7297,"x":51.8619},{"n":"Milpitas","c":"United States","y":37.4339,"x":-121.8921},{"n":"Pernik","c":"Bulgaria","y":42.6097,"x":23.0308},{"n":"Clichy","c":"France","y":48.9044,"x":2.3064},{"n":"Phuket","c":"Thailand","y":7.8881,"x":98.3975},{"n":"Ho","c":"Ghana","y":6.6114,"x":0.4703},{"n":"West Bromwich","c":"United Kingdom","y":52.519,"x":-1.995},{"n":"Le Bardo","c":"Tunisia","y":36.8092,"x":10.1406},{"n":"Alhambra","c":"United States","y":34.084,"x":-118.1355},{"n":"Zilina","c":"Slovakia","y":49.2167,"x":18.7333},{"n":"Esteio","c":"Brazil","y":-29.8608,"x":-51.1789},{"n":"Resita","c":"Romania","y":45.297,"x":21.8865},{"n":"Chatham","c":"United Kingdom","y":51.37,"x":0.52},{"n":"Rueil-Malmaison","c":"France","y":48.876,"x":2.181},{"n":"Casoria","c":"Italy","y":40.9,"x":14.3},{"n":"Antsiranana","c":"Madagascar","y":-12.2765,"x":49.3115},{"n":"Purmerend","c":"Netherlands","y":52.505,"x":4.9639},{"n":"Dudley","c":"United Kingdom","y":52.508,"x":-2.089},{"n":"Ban Talat Rangsit","c":"Thailand","y":13.987,"x":100.6095},{"n":"Lodwar","c":"Kenya","y":3.1167,"x":35.6},{"n":"Targu Jiu","c":"Romania","y":45.0342,"x":23.2747},{"n":"Chania","c":"Greece","y":35.5173,"x":24.0195},{"n":"Zacatlan","c":"Mexico","y":19.9319,"x":-97.96},{"n":"Upper Darby","c":"United States","y":39.949,"x":-75.2892},{"n":"Prosperidad","c":"Philippines","y":8.6057,"x":125.9153},{"n":"Abomey","c":"Benin","y":7.1853,"x":1.9914},{"n":"Mountain View","c":"United States","y":37.4,"x":-122.0796},{"n":"Blagoevgrad","c":"Bulgaria","y":42.0119,"x":23.0897},{"n":"Nabunturan","c":"Philippines","y":7.6078,"x":125.9664},{"n":"Elbasan","c":"Albania","y":41.1125,"x":20.0822},{"n":"Al Muharraq","c":"Bahrain","y":26.25,"x":50.6167},{"n":"White Rock","c":"Canada","y":49.025,"x":-122.8028},{"n":"Nea Ionia","c":"Greece","y":38.0333,"x":23.75},{"n":"Campo Formoso","c":"Brazil","y":-10.5089,"x":-40.3208},{"n":"Kayes","c":"Mali","y":14.45,"x":-11.4167},{"n":"Kalibo","c":"Philippines","y":11.7,"x":122.3667},{"n":"Sao Mateus","c":"Brazil","y":-18.7201,"x":-39.8589},{"n":"South Shields","c":"United Kingdom","y":54.995,"x":-1.43},{"n":"Paisley","c":"United Kingdom","y":55.8466,"x":-4.4236},{"n":"Weston-super-Mare","c":"United Kingdom","y":51.346,"x":-2.977},{"n":"Goiana","c":"Brazil","y":-7.5606,"x":-35.0025},{"n":"Bilecik","c":"Turkey","y":40.1431,"x":29.9792},{"n":"Juchitan de Zaragoza","c":"Mexico","y":16.4333,"x":-95.0194},{"n":"Buena Park","c":"United States","y":33.8572,"x":-118.0046},{"n":"Silver Spring","c":"United States","y":39.0028,"x":-77.0207},{"n":"Palmerston North","c":"New Zealand","y":-40.3549,"x":175.6095},{"n":"Daugavpils","c":"Latvia","y":55.8714,"x":26.5161},{"n":"Cinisello Balsamo","c":"Italy","y":45.55,"x":9.2167},{"n":"Huolu","c":"China","y":38.0874,"x":114.3159},{"n":"Saint-Maur-des-Fosses","c":"France","y":48.7994,"x":2.4997},{"n":"Hakkari","c":"Turkey","y":37.5744,"x":43.7408},{"n":"Somerville","c":"United States","y":42.3908,"x":-71.1013},{"n":"Chalandri","c":"Greece","y":38.0167,"x":23.8},{"n":"Bury","c":"United Kingdom","y":53.593,"x":-2.298},{"n":"Tres Lagoas","c":"Brazil","y":-20.7876,"x":-51.7034},{"n":"Gravesend","c":"United Kingdom","y":51.4415,"x":0.3685},{"n":"Deerfield Beach","c":"United States","y":26.305,"x":-80.1277},{"n":"Targoviste","c":"Romania","y":44.9244,"x":25.4572},{"n":"Rubi","c":"Spain","y":41.4933,"x":2.0325},{"n":"Galway","c":"Ireland","y":53.2729,"x":-9.0418},{"n":"Natitingou","c":"Benin","y":10.3204,"x":1.39},{"n":"Fnidq","c":"Morocco","y":35.85,"x":-5.35},{"n":"Paysandu","c":"Uruguay","y":-32.32,"x":-58.0756},{"n":"Cicero","c":"United States","y":41.8445,"x":-87.7593},{"n":"Atakpame","c":"Togo","y":7.53,"x":1.12},{"n":"Focsani","c":"Romania","y":45.6997,"x":27.1797},{"n":"Aviles","c":"Spain","y":43.5561,"x":-5.9083},{"n":"Drancy","c":"France","y":48.93,"x":2.45},{"n":"Iguatu","c":"Brazil","y":-6.3594,"x":-39.2986},{"n":"Alabel","c":"Philippines","y":6.1023,"x":125.2868},{"n":"Le Kram","c":"Tunisia","y":36.8333,"x":10.3167},{"n":"Zuwarah","c":"Libya","y":32.9333,"x":12.0833},{"n":"Shancheng","c":"China","y":34.7904,"x":116.08},{"n":"Sidi Qacem","c":"Morocco","y":34.21,"x":-5.7},{"n":"Chiquimula","c":"Guatemala","y":14.7833,"x":-89.5333},{"n":"Puerto Ayacucho","c":"Venezuela","y":5.6631,"x":-67.6264},{"n":"Lawrence","c":"United States","y":42.7003,"x":-71.1626},{"n":"Ouahigouya","c":"Burkina Faso","y":13.5833,"x":-2.4167},{"n":"Mahdia","c":"Tunisia","y":35.5047,"x":11.0622},{"n":"Nakhon Pathom","c":"Thailand","y":13.8194,"x":100.0581},{"n":"Lowestoft","c":"United Kingdom","y":52.48,"x":1.75},{"n":"Pau","c":"France","y":43.3,"x":-0.37},{"n":"Tejupilco","c":"Mexico","y":18.9058,"x":-100.1528},{"n":"Cheyenne","c":"United States","y":41.1351,"x":-104.79},{"n":"Ubon Ratchathani","c":"Thailand","y":15.2281,"x":104.8594},{"n":"Tustin","c":"United States","y":33.7309,"x":-117.8106},{"n":"Carlisle","c":"United Kingdom","y":54.891,"x":-2.944},{"n":"Lisala","c":"Congo (Kinshasa)","y":2.14,"x":21.51},{"n":"Szombathely","c":"Hungary","y":47.2333,"x":16.6333},{"n":"Banska Bystrica","c":"Slovakia","y":48.7353,"x":19.1453},{"n":"Pine Hills","c":"United States","y":28.5818,"x":-81.4693},{"n":"Ra`ananna","c":"Israel","y":32.1833,"x":34.8667},{"n":"Harrogate","c":"United Kingdom","y":53.9919,"x":-1.5378},{"n":"Aveiro","c":"Portugal","y":40.6389,"x":-8.6553},{"n":"Tambacounda","c":"Senegal","y":13.7689,"x":-13.6672},{"n":"Newcastle under Lyme","c":"United Kingdom","y":53.0109,"x":-2.2278},{"n":"New Rochelle","c":"United States","y":40.9305,"x":-73.7836},{"n":"Kensington","c":"United Kingdom","y":51.5,"x":-0.19},{"n":"La Rochelle","c":"France","y":46.1591,"x":-1.1517},{"n":"Aregua","c":"Paraguay","y":-25.3,"x":-57.4169},{"n":"Lebanon","c":"United States","y":40.3412,"x":-76.4227},{"n":"East Kilbride","c":"United Kingdom","y":55.7645,"x":-4.1771},{"n":"Wa","c":"Ghana","y":10.0667,"x":-2.5},{"n":"Nitra","c":"Slovakia","y":48.3147,"x":18.0875},{"n":"Lomas del Mirador","c":"Argentina","y":-34.6667,"x":-58.5297},{"n":"Lelystad","c":"Netherlands","y":52.5167,"x":5.4833},{"n":"Maghaghah","c":"Egypt","y":28.6483,"x":30.8422},{"n":"Mpanda","c":"Tanzania","y":-6.3436,"x":31.0694},{"n":"Gladbeck","c":"Germany","y":51.5713,"x":6.9827},{"n":"Sankt Gallen","c":"Switzerland","y":47.4233,"x":9.3772},{"n":"Cannes","c":"France","y":43.5513,"x":7.0128},{"n":"Alameda","c":"United States","y":37.767,"x":-122.2672},{"n":"Thornton Heath","c":"United Kingdom","y":51.4002,"x":-0.1086},{"n":"Watsonville","c":"United States","y":36.9206,"x":-121.7706},{"n":"Taluqan","c":"Afghanistan","y":36.7167,"x":69.5167},{"n":"Jinja","c":"Uganda","y":0.4431,"x":33.2128},{"n":"Davis","c":"United States","y":38.5552,"x":-121.7365},{"n":"Berberati","c":"Central African Republic","y":4.2667,"x":15.7833},{"n":"Esbjerg","c":"Denmark","y":55.467,"x":8.45},{"n":"Zrenjanin","c":"Serbia","y":45.3778,"x":20.3861},{"n":"San Felipe","c":"Venezuela","y":10.3353,"x":-68.7458},{"n":"Las Piedras","c":"Uruguay","y":-34.7167,"x":-56.2167},{"n":"Surt","c":"Libya","y":31.2,"x":16.6},{"n":"Tamazunchale","c":"Mexico","y":21.2667,"x":-98.7833},{"n":"Moulay Abdallah","c":"Morocco","y":33.1978,"x":-8.5883},{"n":"Pancevo","c":"Serbia","y":44.8739,"x":20.6519},{"n":"Abeche","c":"Chad","y":13.8331,"x":20.8347},{"n":"Balagtas","c":"Philippines","y":14.8145,"x":120.9085},{"n":"Palaio Faliro","c":"Greece","y":37.932,"x":23.7003},{"n":"Bellflower","c":"United States","y":33.888,"x":-118.1271},{"n":"Jacona de Plancarte","c":"Mexico","y":19.95,"x":-102.3167},{"n":"Ashford","c":"United Kingdom","y":51.1465,"x":0.8676},{"n":"Bokhtar","c":"Tajikistan","y":37.8364,"x":68.7803},{"n":"Chiryu","c":"Japan","y":35,"x":137.1167},{"n":"Nek'emte","c":"Ethiopia","y":9.0905,"x":36.53},{"n":"Calais","c":"France","y":50.9481,"x":1.8564},{"n":"Tamanrasset","c":"Algeria","y":22.785,"x":5.5228},{"n":"Ramla","c":"Israel","y":31.9318,"x":34.8736},{"n":"Montrouge","c":"France","y":48.8172,"x":2.3219},{"n":"Zadar","c":"Croatia","y":44.1167,"x":15.2167},{"n":"Southall","c":"United Kingdom","y":51.5121,"x":-0.3779},{"n":"Guamuchil","c":"Mexico","y":25.4639,"x":-108.0794},{"n":"Musashimurayama","c":"Japan","y":35.7547,"x":139.3875},{"n":"Quang Tri","c":"Vietnam","y":16.7504,"x":107.2},{"n":"Antibes","c":"France","y":43.5808,"x":7.1239},{"n":"Mineiros","c":"Brazil","y":-17.5689,"x":-52.5508},{"n":"Bistrita","c":"Romania","y":47.1333,"x":24.4833},{"n":"Tissemsilt","c":"Algeria","y":35.6072,"x":1.8106},{"n":"Joensuu","c":"Finland","y":62.6,"x":29.7639},{"n":"Bella Vista","c":"Argentina","y":-34.5333,"x":-58.6667},{"n":"Rugby","c":"United Kingdom","y":52.37,"x":-1.26},{"n":"Darhan","c":"Mongolia","y":49.4867,"x":105.9228},{"n":"Guasave","c":"Mexico","y":25.5744,"x":-108.4706},{"n":"Teyateyaneng","c":"Lesotho","y":-29.15,"x":27.7333},{"n":"Burton upon Trent","c":"United Kingdom","y":52.8019,"x":-1.6367},{"n":"Gouda","c":"Netherlands","y":52.0181,"x":4.7056},{"n":"Karlstad","c":"Sweden","y":59.3808,"x":13.5016},{"n":"Uxbridge","c":"United Kingdom","y":51.5404,"x":-0.4778},{"n":"Zacatecoluca","c":"El Salvador","y":13.5,"x":-88.8667},{"n":"Baldwin Park","c":"United States","y":34.0829,"x":-117.9721},{"n":"Zlin","c":"Czechia","y":49.2331,"x":17.6669},{"n":"Spijkenisse","c":"Netherlands","y":51.8333,"x":4.3167},{"n":"Rioverde","c":"Mexico","y":21.93,"x":-99.98},{"n":"Prey Veng","c":"Cambodia","y":11.484,"x":105.324},{"n":"Ipil","c":"Philippines","y":7.7833,"x":122.5833},{"n":"Inowroclaw","c":"Poland","y":52.7958,"x":18.2611},{"n":"Jinsha","c":"China","y":23.5329,"x":116.6165},{"n":"Crewe","c":"United Kingdom","y":53.099,"x":-2.44},{"n":"Matehuala","c":"Mexico","y":23.6528,"x":-100.6444},{"n":"Bitola","c":"Macedonia","y":41.0319,"x":21.3347},{"n":"San Andres","c":"Colombia","y":12.5847,"x":-81.7006},{"n":"Garissa","c":"Kenya","y":-0.4569,"x":39.6583},{"n":"Longkoucun","c":"China","y":23.5792,"x":116.7263},{"n":"Manokwari","c":"Indonesia","y":-0.8711,"x":134.0693},{"n":"Hekinan","c":"Japan","y":34.8833,"x":137},{"n":"Masvingo","c":"Zimbabwe","y":-20.0744,"x":30.8328},{"n":"Vincennes","c":"France","y":48.8478,"x":2.4392},{"n":"Yoshikawa","c":"Japan","y":35.8958,"x":139.8556},{"n":"Assab","c":"Eritrea","y":13.0078,"x":42.7411},{"n":"Gosport","c":"United Kingdom","y":50.7948,"x":-1.1243},{"n":"Wandsworth","c":"United Kingdom","y":51.455,"x":-0.192},{"n":"Cuscatancingo","c":"El Salvador","y":13.7333,"x":-89.1833},{"n":"Salima","c":"Malawi","y":-13.7829,"x":34.4333},{"n":"Nabeul","c":"Tunisia","y":36.4514,"x":10.7361},{"n":"Virac","c":"Philippines","y":13.5833,"x":124.2333},{"n":"Centreville","c":"United States","y":38.8391,"x":-77.4388},{"n":"Birobidzhan","c":"Russia","y":48.7833,"x":132.9333},{"n":"Tsurugashima","c":"Japan","y":35.9344,"x":139.3931},{"n":"Cabadbaran","c":"Philippines","y":9.1228,"x":125.5346},{"n":"Kirtipur","c":"Nepal","y":27.6667,"x":85.2833},{"n":"Irece","c":"Brazil","y":-11.3042,"x":-41.8558},{"n":"El Kef","c":"Tunisia","y":36.1667,"x":8.7},{"n":"Frontera","c":"Mexico","y":26.926,"x":-101.449},{"n":"Neuilly-sur-Seine","c":"France","y":48.8881,"x":2.2686},{"n":"Farah","c":"Afghanistan","y":32.3436,"x":62.1194},{"n":"Warzat","c":"Morocco","y":30.9167,"x":-6.9167},{"n":"Finchley","c":"United Kingdom","y":51.599,"x":-0.187},{"n":"Camden","c":"United States","y":39.9362,"x":-75.1073},{"n":"Galatsi","c":"Greece","y":38.0167,"x":23.75},{"n":"Evanston","c":"United States","y":42.0463,"x":-87.6942},{"n":"Noisy-le-Grand","c":"France","y":48.8478,"x":2.5528},{"n":"Skien","c":"Norway","y":59.2096,"x":9.609},{"n":"Caguas","c":"Puerto Rico","y":18.2319,"x":-66.0388},{"n":"Yawata-shimizui","c":"Japan","y":34.8756,"x":135.7078},{"n":"Debre Mark'os","c":"Ethiopia","y":10.34,"x":37.72},{"n":"Dabou","c":"Côte D’Ivoire","y":5.3256,"x":-4.3767},{"n":"Sa`dah","c":"Yemen","y":16.9358,"x":43.7644},{"n":"Feltham","c":"United Kingdom","y":51.4496,"x":-0.4089},{"n":"San Antonio","c":"Paraguay","y":-25.3797,"x":-57.6097},{"n":"Lappeenranta","c":"Finland","y":61.0583,"x":28.1861},{"n":"Thohoyandou","c":"South Africa","y":-22.95,"x":30.4833},{"n":"Castelldefels","c":"Spain","y":41.28,"x":1.9767},{"n":"Torremolinos","c":"Spain","y":36.6218,"x":-4.5003},{"n":"Chingford","c":"United Kingdom","y":51.631,"x":0.016},{"n":"New Britain","c":"United States","y":41.6758,"x":-72.7862},{"n":"Arba Minch'","c":"Ethiopia","y":6.04,"x":37.55},{"n":"Abancay","c":"Peru","y":-13.6333,"x":-72.8833},{"n":"Ivry-sur-Seine","c":"France","y":48.8078,"x":2.3747},{"n":"Toyoake","c":"Japan","y":35.0625,"x":137.0089},{"n":"Havirov","c":"Czechia","y":49.7778,"x":18.4228},{"n":"Veliko Tarnovo","c":"Bulgaria","y":43.0822,"x":25.6317},{"n":"Inverness","c":"United Kingdom","y":57.4781,"x":-4.2233},{"n":"Wilde","c":"Argentina","y":-34.7,"x":-58.3167},{"n":"Pawtucket","c":"United States","y":41.8744,"x":-71.3743},{"n":"Cacak","c":"Serbia","y":43.8914,"x":20.3497},{"n":"Karakax","c":"China","y":37.2714,"x":79.7267},{"n":"La Chorrera","c":"Panama","y":8.8792,"x":-79.7822},{"n":"Washington","c":"United Kingdom","y":54.9,"x":-1.52},{"n":"Lauderhill","c":"United States","y":26.1605,"x":-80.2242},{"n":"Balsas","c":"Brazil","y":-7.5325,"x":-46.0356},{"n":"Matara","c":"Sri Lanka","y":5.95,"x":80.5333},{"n":"Benalmadena","c":"Spain","y":36.6,"x":-4.5167},{"n":"Al Qusiyah","c":"Egypt","y":27.4403,"x":30.8183},{"n":"Zaandam","c":"Netherlands","y":52.4417,"x":4.8422},{"n":"Szolnok","c":"Hungary","y":47.1747,"x":20.1764},{"n":"Mamou","c":"Guinea","y":10.3736,"x":-12.0847},{"n":"Slatina","c":"Romania","y":44.4297,"x":24.3642},{"n":"Youssoufia","c":"Morocco","y":32.25,"x":-8.53},{"n":"Bitlis","c":"Turkey","y":38.4,"x":42.1167},{"n":"Ajaccio","c":"France","y":41.9267,"x":8.7369},{"n":"Maidenhead","c":"United Kingdom","y":51.5217,"x":-0.7177},{"n":"Kasese","c":"Uganda","y":0.23,"x":29.9883},{"n":"Phitsanulok","c":"Thailand","y":16.8158,"x":100.2636},{"n":"Hatogaya-honcho","c":"Japan","y":35.8267,"x":139.7412},{"n":"Misantla","c":"Mexico","y":19.9333,"x":-96.85},{"n":"Zinjibar","c":"Yemen","y":13.1283,"x":45.3803},{"n":"Courcouronnes","c":"France","y":48.6239,"x":2.4294},{"n":"New Westminster","c":"Canada","y":49.2069,"x":-122.9111},{"n":"Kumanovo","c":"Macedonia","y":42.1322,"x":21.7144},{"n":"Givatayim","c":"Israel","y":32.0697,"x":34.8117},{"n":"Valle Hermoso","c":"Mexico","y":25.6736,"x":-97.8144},{"n":"Jiquilpan de Juarez","c":"Mexico","y":19.9942,"x":-102.7172},{"n":"Cergy","c":"France","y":49.0361,"x":2.0631},{"n":"Capelle aan den IJssel","c":"Netherlands","y":51.9357,"x":4.5782},{"n":"Mindelo","c":"Cabo Verde","y":16.8914,"x":-24.988},{"n":"Chiang Rai","c":"Thailand","y":19.9094,"x":99.8275},{"n":"Ain Harrouda","c":"Morocco","y":33.6372,"x":-7.4483},{"n":"Aksum","c":"Ethiopia","y":14.1284,"x":38.7173},{"n":"Wimbledon","c":"United Kingdom","y":51.422,"x":-0.208},{"n":"Sunyani","c":"Ghana","y":7.336,"x":-2.336},{"n":"Viladecans","c":"Spain","y":41.3158,"x":2.0194},{"n":"Loughborough","c":"United Kingdom","y":52.7705,"x":-1.2046},{"n":"Abnub","c":"Egypt","y":27.2667,"x":31.15},{"n":"Colonia del Sol","c":"Mexico","y":22.9125,"x":-109.9208},{"n":"Venissieux","c":"France","y":45.6978,"x":4.8867},{"n":"Sagaing","c":"Myanmar","y":21.8822,"x":95.9786},{"n":"Gardez","c":"Afghanistan","y":33.5931,"x":69.2297},{"n":"Thakhek","c":"Laos","y":17.4,"x":104.8},{"n":"Nizwa","c":"Oman","y":22.9333,"x":57.5333},{"n":"Tynemouth","c":"United Kingdom","y":55.017,"x":-1.423},{"n":"Vushtrri","c":"Kosovo","y":42.8222,"x":20.9694},{"n":"Walsall","c":"United Kingdom","y":52.58,"x":-1.98},{"n":"Moquegua","c":"Peru","y":-17.2,"x":-70.9333},{"n":"Itapeva","c":"Brazil","y":-23.9822,"x":-48.8756},{"n":"Lynwood","c":"United States","y":33.924,"x":-118.2017},{"n":"Jinxing","c":"China","y":37.9869,"x":106.2027},{"n":"Rochester","c":"United Kingdom","y":51.375,"x":0.5},{"n":"Georgiyevsk","c":"Russia","y":44.15,"x":43.4667},{"n":"Passaic","c":"United States","y":40.8574,"x":-74.1282},{"n":"Valenca","c":"Brazil","y":-13.3703,"x":-39.0731},{"n":"Castellammare di Stabia","c":"Italy","y":40.7,"x":14.4833},{"n":"Huatusco","c":"Mexico","y":19.1489,"x":-96.9661},{"n":"Vratsa","c":"Bulgaria","y":43.2121,"x":23.5444},{"n":"L'Aquila","c":"Italy","y":42.354,"x":13.392},{"n":"Debre Birhan","c":"Ethiopia","y":9.6804,"x":39.53},{"n":"Borongan","c":"Philippines","y":11.6,"x":125.4333},{"n":"Putrajaya","c":"Malaysia","y":2.93,"x":101.69},{"n":"Liepaja","c":"Latvia","y":56.5083,"x":21.0111},{"n":"Acton","c":"United Kingdom","y":51.5135,"x":-0.2707},{"n":"Pantin","c":"France","y":48.8966,"x":2.4017},{"n":"Antony","c":"France","y":48.7539,"x":2.2975},{"n":"Bouira","c":"Algeria","y":36.3783,"x":3.8925},{"n":"Veenendaal","c":"Netherlands","y":52.025,"x":5.555},{"n":"Mitcham","c":"United Kingdom","y":51.4009,"x":-0.1517},{"n":"San Jose del Guaviare","c":"Colombia","y":2.5653,"x":-72.6386},{"n":"Ponta Delgada","c":"Portugal","y":37.74,"x":-25.67},{"n":"Gavle","c":"Sweden","y":60.667,"x":17.1666},{"n":"Wrecsam","c":"United Kingdom","y":53.046,"x":-2.993},{"n":"Villa Dominico","c":"Argentina","y":-34.6917,"x":-58.3333},{"n":"Kitamoto","c":"Japan","y":36.0269,"x":139.53},{"n":"Afragola","c":"Italy","y":40.9167,"x":14.3167},{"n":"Saki","c":"Azerbaijan","y":41.1919,"x":47.1706},{"n":"Zamosc","c":"Poland","y":50.7206,"x":23.2586},{"n":"Adrar","c":"Algeria","y":27.8742,"x":-0.2939},{"n":"Waterlooville","c":"United Kingdom","y":50.88,"x":-1.03},{"n":"Tomigusuku","c":"Japan","y":26.1772,"x":127.6811},{"n":"Buynaksk","c":"Russia","y":42.8167,"x":47.1167},{"n":"Hameenlinna","c":"Finland","y":61,"x":24.4414},{"n":"Guaynabo","c":"Puerto Rico","y":18.3839,"x":-66.1134},{"n":"Gaithersburg","c":"United States","y":39.1346,"x":-77.2132},{"n":"Union City","c":"United States","y":40.7674,"x":-74.0323},{"n":"Vyronas","c":"Greece","y":37.9556,"x":23.76},{"n":"Scarborough","c":"United Kingdom","y":54.2773,"x":-0.4017},{"n":"Cacador","c":"Brazil","y":-26.7753,"x":-51.015},{"n":"South San Francisco","c":"United States","y":37.6536,"x":-122.4197},{"n":"Timbauba","c":"Brazil","y":-7.5053,"x":-35.3183},{"n":"Curvelo","c":"Brazil","y":-18.7564,"x":-44.4308},{"n":"Manacapuru","c":"Brazil","y":-3.2997,"x":-60.6206},{"n":"Cabedelo","c":"Brazil","y":-6.9808,"x":-34.8339},{"n":"Tecate","c":"Mexico","y":32.5667,"x":-116.6331},{"n":"Lao Cai","c":"Vietnam","y":22.4194,"x":103.995},{"n":"Farnborough","c":"United Kingdom","y":51.29,"x":-0.75},{"n":"Vaasa","c":"Finland","y":63.1,"x":21.6167},{"n":"Molepolole","c":"Botswana","y":-24.4066,"x":25.4951},{"n":"Potenza","c":"Italy","y":40.6333,"x":15.8},{"n":"San Marcos","c":"El Salvador","y":13.6564,"x":-89.1803},{"n":"Dimbokro","c":"Côte D’Ivoire","y":6.6505,"x":-4.71},{"n":"Arrecife","c":"Spain","y":28.9625,"x":-13.5506},{"n":"El Prat de Llobregat","c":"Spain","y":41.3246,"x":2.0953},{"n":"Katwijk","c":"Netherlands","y":52.2008,"x":4.4153},{"n":"Valle de Bravo","c":"Mexico","y":19.1925,"x":-100.1306},{"n":"Mount Vernon","c":"United States","y":40.9136,"x":-73.8291},{"n":"Amozoc","c":"Mexico","y":19.0333,"x":-98.05},{"n":"Twickenham","c":"United Kingdom","y":51.449,"x":-0.337},{"n":"Stourbridge","c":"United Kingdom","y":52.4575,"x":-2.1479},{"n":"Fryazino","c":"Russia","y":55.95,"x":38.05},{"n":"Linares","c":"Mexico","y":24.8597,"x":-99.5679},{"n":"Streatham","c":"United Kingdom","y":51.4279,"x":-0.1235},{"n":"Barking","c":"United Kingdom","y":51.54,"x":0.08},{"n":"Epinay-sur-Seine","c":"France","y":48.9553,"x":2.3092},{"n":"Bolgatanga","c":"Ghana","y":10.7856,"x":-0.8514},{"n":"Sabinas","c":"Mexico","y":27.86,"x":-101.12},{"n":"Lechang","c":"China","y":35.6415,"x":111.4633},{"n":"Teoloyucan","c":"Mexico","y":19.7442,"x":-99.1811},{"n":"Sokhumi","c":"Georgia","y":43.0033,"x":41.0153},{"n":"Collado-Villalba","c":"Spain","y":40.6333,"x":-4.0083},{"n":"La Seyne-sur-Mer","c":"France","y":43.1,"x":5.883},{"n":"Agia Paraskevi","c":"Greece","y":38.0053,"x":23.8208},{"n":"Redondo Beach","c":"United States","y":33.8574,"x":-118.3766},{"n":"Kraljevo","c":"Serbia","y":43.7234,"x":20.687},{"n":"Tamarac","c":"United States","y":26.2056,"x":-80.2542},{"n":"Novi Pazar","c":"Serbia","y":43.15,"x":20.5167},{"n":"Bayburt","c":"Turkey","y":40.2546,"x":40.226},{"n":"M'diq","c":"Morocco","y":35.6857,"x":-5.3251},{"n":"Nalut","c":"Libya","y":31.8804,"x":10.97},{"n":"Granollers","c":"Spain","y":41.6083,"x":2.2889},{"n":"Zacapa","c":"Guatemala","y":14.9667,"x":-89.5333},{"n":"Tatabanya","c":"Hungary","y":47.5862,"x":18.3949},{"n":"Acambaro","c":"Mexico","y":20.0361,"x":-100.7314},{"n":"Troyes","c":"France","y":48.2997,"x":4.0792},{"n":"Prilep","c":"Macedonia","y":41.3464,"x":21.5542},{"n":"Trnava","c":"Slovakia","y":48.3777,"x":17.5862},{"n":"Los Polvorines","c":"Argentina","y":-34.5,"x":-58.7},{"n":"Kardzhali","c":"Bulgaria","y":41.64,"x":25.3708},{"n":"Goz-Beida","c":"Chad","y":12.2236,"x":21.4144},{"n":"San Marcos","c":"Guatemala","y":14.9653,"x":-91.7958},{"n":"Maisons-Alfort","c":"France","y":48.8058,"x":2.4378},{"n":"La Linea de la Concepcion","c":"Spain","y":36.1611,"x":-5.3486},{"n":"Masaka","c":"Uganda","y":-0.3296,"x":31.73},{"n":"Singida","c":"Tanzania","y":-4.8186,"x":34.7506},{"n":"Dewsbury","c":"United Kingdom","y":53.691,"x":-1.633},{"n":"Ioannina","c":"Greece","y":39.6636,"x":20.8522},{"n":"Florence-Graham","c":"United States","y":33.9682,"x":-118.2447},{"n":"Calarasi","c":"Romania","y":44.2,"x":27.3333},{"n":"Forest","c":"Belgium","y":50.8117,"x":4.3181},{"n":"Sarcelles","c":"France","y":48.9956,"x":2.3808},{"n":"Nieuwegein","c":"Netherlands","y":52.0314,"x":5.0919},{"n":"Altamira","c":"Mexico","y":22.3375,"x":-97.8694},{"n":"Widnes","c":"United Kingdom","y":53.363,"x":-2.728},{"n":"Schenectady","c":"United States","y":42.8025,"x":-73.9276},{"n":"Cortazar","c":"Mexico","y":20.483,"x":-100.933},{"n":"Rundu","c":"Namibia","y":-17.9167,"x":19.7667},{"n":"Portici","c":"Italy","y":40.8197,"x":14.3411},{"n":"Tago","c":"Japan","y":38.2939,"x":141.0044},{"n":"Songkhla","c":"Thailand","y":7.2061,"x":100.5967},{"n":"Solwezi","c":"Zambia","y":-12.1833,"x":26.4},{"n":"Villejuif","c":"France","y":48.7919,"x":2.3636},{"n":"Kitale","c":"Kenya","y":1.0167,"x":35},{"n":"As Suwayda'","c":"Syria","y":32.7,"x":36.5667},{"n":"Ouezzane","c":"Morocco","y":34.8,"x":-5.6},{"n":"Elk","c":"Poland","y":53.8167,"x":22.35},{"n":"Euclides da Cunha","c":"Brazil","y":-10.5078,"x":-39.0139},{"n":"Bayonne","c":"United States","y":40.6661,"x":-74.1141},{"n":"Faro","c":"Portugal","y":37.0161,"x":-7.935},{"n":"Faizabad","c":"Afghanistan","y":37.1298,"x":70.5792},{"n":"Sinop","c":"Turkey","y":42.0267,"x":35.1511},{"n":"Solola","c":"Guatemala","y":14.7667,"x":-91.1833},{"n":"Yoro","c":"Honduras","y":15.1333,"x":-87.1333},{"n":"Pruszkow","c":"Poland","y":52.1667,"x":20.8},{"n":"Cosamaloapan","c":"Mexico","y":18.3667,"x":-95.8},{"n":"East Orange","c":"United States","y":40.7651,"x":-74.2117},{"n":"Etterbeek","c":"Belgium","y":50.8361,"x":4.3861},{"n":"Nagari","c":"India","y":13.33,"x":79.58},{"n":"Inhambane","c":"Mozambique","y":-23.865,"x":35.3833},{"n":"Taunton","c":"United Kingdom","y":51.019,"x":-3.1},{"n":"Bangor","c":"United Kingdom","y":54.66,"x":-5.67},{"n":"Alba Iulia","c":"Romania","y":46.0764,"x":23.5728},{"n":"Pirapora","c":"Brazil","y":-17.345,"x":-44.9419},{"n":"Aylesbury","c":"United Kingdom","y":51.8168,"x":-0.8124},{"n":"Sombrerete","c":"Mexico","y":23.6333,"x":-103.6397},{"n":"Latacunga","c":"Ecuador","y":-0.9333,"x":-78.6167},{"n":"Manouba","c":"Tunisia","y":36.8,"x":10.1},{"n":"Le Blanc-Mesnil","c":"France","y":48.9387,"x":2.4614},{"n":"Gorno-Altaysk","c":"Russia","y":51.96,"x":85.96},{"n":"Braganca","c":"Brazil","y":-1.0536,"x":-46.7656},{"n":"Hasuda","c":"Japan","y":35.9942,"x":139.6622},{"n":"Sao Borja","c":"Brazil","y":-28.6606,"x":-56.0044},{"n":"Halesowen","c":"United Kingdom","y":52.4502,"x":-2.0509},{"n":"Marano di Napoli","c":"Italy","y":40.9,"x":14.1833},{"n":"Legnano","c":"Italy","y":45.5781,"x":8.9183},{"n":"Nkhotakota","c":"Malawi","y":-12.9163,"x":34.3},{"n":"Mukocho","c":"Japan","y":34.9486,"x":135.6983},{"n":"Kyustendil","c":"Bulgaria","y":42.2811,"x":22.6889},{"n":"Brentwood","c":"United States","y":40.7839,"x":-73.2522},{"n":"Rades","c":"Tunisia","y":36.7667,"x":10.2833},{"n":"Karakol","c":"Kyrgyzstan","y":42.5,"x":78.3833},{"n":"Tsushima","c":"Japan","y":35.1833,"x":136.7333},{"n":"Canela","c":"Brazil","y":-29.3562,"x":-50.8136},{"n":"Cherbourg","c":"France","y":49.6333,"x":-1.6},{"n":"Ruislip","c":"United Kingdom","y":51.576,"x":-0.433},{"n":"Bondy","c":"France","y":48.9022,"x":2.4828},{"n":"Anuradhapura","c":"Sri Lanka","y":8.335,"x":80.4108},{"n":"Gabrovo","c":"Bulgaria","y":42.8711,"x":25.315},{"n":"Kratie","c":"Cambodia","y":12.4881,"x":106.0188},{"n":"Assen","c":"Netherlands","y":52.9967,"x":6.5625},{"n":"Beledweyne","c":"Somalia","y":4.736,"x":45.204},{"n":"Royal Tunbridge Wells","c":"United Kingdom","y":51.132,"x":0.263},{"n":"Jette","c":"Belgium","y":50.8758,"x":4.3244},{"n":"Saint-Ouen","c":"France","y":48.9123,"x":2.3342},{"n":"Khartsyzk","c":"Ukraine","y":48.0333,"x":38.15},{"n":"Wallasey","c":"United Kingdom","y":53.4158,"x":-3.0233},{"n":"Barrow in Furness","c":"United Kingdom","y":54.1108,"x":-3.2261},{"n":"Stryi","c":"Ukraine","y":49.25,"x":23.85},{"n":"Sopron","c":"Hungary","y":47.6833,"x":16.5833},{"n":"North Miami","c":"United States","y":25.9007,"x":-80.1686},{"n":"Maldonado","c":"Uruguay","y":-34.91,"x":-54.96},{"n":"Skokie","c":"United States","y":42.0359,"x":-87.74},{"n":"Leskovac","c":"Serbia","y":42.9981,"x":21.9461},{"n":"Santa Rosa","c":"Brazil","y":-27.8708,"x":-54.4814},{"n":"Saraburi","c":"Thailand","y":14.5286,"x":100.9114},{"n":"Rayong","c":"Thailand","y":12.6742,"x":101.2789},{"n":"Ban Bang Kaeo","c":"Thailand","y":13.6371,"x":100.6636},{"n":"Kolda","c":"Senegal","y":12.8958,"x":-14.9408},{"n":"Santarem","c":"Portugal","y":39.2369,"x":-8.685},{"n":"Fontenay-sous-Bois","c":"France","y":48.8517,"x":2.4772},{"n":"Suresnes","c":"France","y":48.87,"x":2.22},{"n":"Fussa","c":"Japan","y":35.7386,"x":139.3267},{"n":"Napier","c":"New Zealand","y":-39.4833,"x":176.9167},{"n":"Chornomorsk","c":"Ukraine","y":46.3017,"x":30.6569},{"n":"Puerto Limon","c":"Costa Rica","y":10.0022,"x":-83.084},{"n":"Madang","c":"Papua New Guinea","y":-5.2248,"x":145.7853},{"n":"Lytkarino","c":"Russia","y":55.5833,"x":37.8833},{"n":"Rafael Calzada","c":"Argentina","y":-34.7833,"x":-58.3667},{"n":"Pico Rivera","c":"United States","y":33.9902,"x":-118.0888},{"n":"Kaposvar","c":"Hungary","y":46.3667,"x":17.7833},{"n":"Bayombong","c":"Philippines","y":16.4833,"x":121.15},{"n":"Montebello","c":"United States","y":34.0155,"x":-118.1108},{"n":"Bamyan","c":"Afghanistan","y":34.8167,"x":67.8167},{"n":"Ban Rangsit","c":"Thailand","y":14.0167,"x":100.75},{"n":"Portugalete","c":"Spain","y":43.3194,"x":-3.0194},{"n":"Rovaniemi","c":"Finland","y":66.5028,"x":25.7285},{"n":"Yala","c":"Thailand","y":6.5397,"x":101.2811},{"n":"Giurgiu","c":"Romania","y":43.9,"x":25.9667},{"n":"Chambery","c":"France","y":45.57,"x":5.9118},{"n":"Samut Sakhon","c":"Thailand","y":13.5486,"x":100.2775},{"n":"Bobigny","c":"France","y":48.9106,"x":2.4397},{"n":"Janauba","c":"Brazil","y":-15.8025,"x":-43.3089},{"n":"North Bergen","c":"United States","y":40.7938,"x":-74.0242},{"n":"Seinajoki","c":"Finland","y":62.7903,"x":22.8403},{"n":"The Hammocks","c":"United States","y":25.67,"x":-80.4483},{"n":"Ruhengeri","c":"Rwanda","y":-1.4944,"x":29.6417},{"n":"Suileng","c":"China","y":47.246,"x":127.106},{"n":"National City","c":"United States","y":32.6654,"x":-117.0983},{"n":"Benslimane","c":"Morocco","y":33.6122,"x":-7.1211},{"n":"Koja","c":"Japan","y":26.3344,"x":127.8057},{"n":"Coconut Creek","c":"United States","y":26.2803,"x":-80.1842},{"n":"Ben Tre","c":"Vietnam","y":10.2333,"x":106.3833},{"n":"Coyhaique","c":"Chile","y":-45.5712,"x":-72.0685},{"n":"Gaalkacyo","c":"Somalia","y":6.7697,"x":47.4308},{"n":"Hunedoara","c":"Romania","y":45.7697,"x":22.9203},{"n":"Limerick","c":"Ireland","y":52.6653,"x":-8.6238},{"n":"Longxing","c":"China","y":35.6091,"x":111.2304},{"n":"Trang","c":"Thailand","y":7.5561,"x":99.6114},{"n":"Teresa","c":"Philippines","y":14.5586,"x":121.2083},{"n":"Melo","c":"Uruguay","y":-32.3595,"x":-54.18},{"n":"Oyem","c":"Gabon","y":1.6,"x":11.5667},{"n":"Lokoja","c":"Nigeria","y":7.8004,"x":6.7399},{"n":"Juigalpa","c":"Nicaragua","y":12.0833,"x":-85.4},{"n":"Fountainebleau","c":"United States","y":25.7723,"x":-80.3458},{"n":"Vaxjo","c":"Sweden","y":56.8837,"x":14.8167},{"n":"La Habra","c":"United States","y":33.9278,"x":-117.9513},{"n":"Malden","c":"United States","y":42.4305,"x":-71.0576},{"n":"Banfora","c":"Burkina Faso","y":10.6308,"x":-4.7589},{"n":"San Pedro","c":"Mexico","y":25.7589,"x":-102.9844},{"n":"Lorient","c":"France","y":47.75,"x":-3.36},{"n":"Swidnica","c":"Poland","y":50.8438,"x":16.4886},{"n":"Sidi Bennour","c":"Morocco","y":32.655,"x":-8.4292},{"n":"South Whittier","c":"United States","y":33.9336,"x":-118.0311},{"n":"Zushi","c":"Japan","y":35.2948,"x":139.5781},{"n":"Temascalcingo","c":"Mexico","y":19.9147,"x":-100.0036},{"n":"Hereford","c":"United Kingdom","y":52.0565,"x":-2.716},{"n":"Mbanza Kongo","c":"Angola","y":-6.27,"x":14.24},{"n":"Veszprem","c":"Hungary","y":47.1,"x":17.9167},{"n":"Ellesmere Port","c":"United Kingdom","y":53.279,"x":-2.897},{"n":"Serrinha","c":"Brazil","y":-11.6642,"x":-39.0075},{"n":"Caridad","c":"Philippines","y":14.4828,"x":120.8958},{"n":"Evry","c":"France","y":48.6239,"x":2.4294},{"n":"Tezonapa","c":"Mexico","y":18.6058,"x":-96.6875},{"n":"Mislata","c":"Spain","y":39.475,"x":-0.4156},{"n":"Etchojoa","c":"Mexico","y":26.8667,"x":-109.65},{"n":"West Allis","c":"United States","y":43.0068,"x":-88.0296},{"n":"Uzice","c":"Serbia","y":43.85,"x":19.85},{"n":"Taylorsville","c":"United States","y":40.657,"x":-111.9493},{"n":"Itanagar","c":"India","y":27.1,"x":93.62},{"n":"Romita","c":"Mexico","y":20.8708,"x":-101.5169},{"n":"Antigua Guatemala","c":"Guatemala","y":14.5567,"x":-90.7337},{"n":"Suhareke","c":"Kosovo","y":42.38,"x":20.8219},{"n":"Klimovsk","c":"Russia","y":55.3667,"x":37.5333},{"n":"Bungoma","c":"Kenya","y":0.5666,"x":34.5666},{"n":"San Jose Iturbide","c":"Mexico","y":21,"x":-100.3833},{"n":"Monterey Park","c":"United States","y":34.0497,"x":-118.1326},{"n":"Merida","c":"Spain","y":38.9,"x":-6.3333},{"n":"Hod HaSharon","c":"Israel","y":32.15,"x":34.8833},{"n":"Puteaux","c":"France","y":48.885,"x":2.2389},{"n":"Rodos","c":"Greece","y":36.4412,"x":28.2225},{"n":"Formiga","c":"Brazil","y":-20.4644,"x":-45.4264},{"n":"Al Hoceima","c":"Morocco","y":35.2472,"x":-3.9322},{"n":"Actopan","c":"Mexico","y":20.267,"x":-98.933},{"n":"Samannud","c":"Egypt","y":30.9622,"x":31.2425},{"n":"Hamura","c":"Japan","y":35.7672,"x":139.3111},{"n":"Midalt","c":"Morocco","y":32.68,"x":-4.74},{"n":"Gardena","c":"United States","y":33.8944,"x":-118.3073},{"n":"Bekescsaba","c":"Hungary","y":46.6833,"x":21.0833},{"n":"Azrou","c":"Morocco","y":33.43,"x":-5.21},{"n":"Cupertino","c":"United States","y":37.3168,"x":-122.0465},{"n":"La Mesa","c":"United States","y":32.7703,"x":-117.0204},{"n":"Dzerzhinskiy","c":"Russia","y":55.6333,"x":37.85},{"n":"Artemisa","c":"Cuba","y":22.8136,"x":-82.7633},{"n":"San Buenaventura","c":"Mexico","y":19.2641,"x":-99.6746},{"n":"Brookline","c":"United States","y":42.3243,"x":-71.1408},{"n":"Kitgum","c":"Uganda","y":3.3004,"x":32.87},{"n":"Yevlax","c":"Azerbaijan","y":40.6172,"x":47.15},{"n":"Viedma","c":"Argentina","y":-40.8,"x":-63},{"n":"Cerro de Pasco","c":"Peru","y":-10.6864,"x":-76.2625},{"n":"Kabinda","c":"Congo (Kinshasa)","y":-6.1296,"x":24.48},{"n":"Braintree","c":"United Kingdom","y":51.878,"x":0.55},{"n":"Tacuarembo","c":"Uruguay","y":-31.71,"x":-55.98},{"n":"Clamart","c":"France","y":48.8014,"x":2.2628},{"n":"Liuhu","c":"China","y":35.5449,"x":106.6801},{"n":"Krusevac","c":"Serbia","y":43.5833,"x":21.3267},{"n":"Margate","c":"United States","y":26.2466,"x":-80.2119},{"n":"Qiryat Ata","c":"Israel","y":32.8,"x":35.1},{"n":"Aversa","c":"Italy","y":40.973,"x":14.2065},{"n":"Carson City","c":"United States","y":39.1512,"x":-119.7474},{"n":"Meaux","c":"France","y":48.9603,"x":2.8883},{"n":"Mandapeta","c":"India","y":16.87,"x":81.93},{"n":"Evora","c":"Portugal","y":38.5667,"x":-7.9},{"n":"Barlad","c":"Romania","y":46.2167,"x":27.6667},{"n":"Port Coquitlam","c":"Canada","y":49.2625,"x":-122.7811},{"n":"Rosh Ha`Ayin","c":"Israel","y":32.0833,"x":34.95},{"n":"Middletown","c":"United States","y":41.4459,"x":-74.4236},{"n":"Bondoukou","c":"Côte D’Ivoire","y":8.04,"x":-2.8},{"n":"San Fernando","c":"Trinidad And Tobago","y":10.2833,"x":-61.4667},{"n":"Chelles","c":"France","y":48.8833,"x":2.6},{"n":"Novohrad-Volynskyi","c":"Ukraine","y":50.5833,"x":27.6333},{"n":"Union","c":"United States","y":40.6953,"x":-74.2697},{"n":"Huamantla","c":"Mexico","y":19.3133,"x":-97.9228},{"n":"Sabaneta","c":"Colombia","y":6.1508,"x":-75.615},{"n":"Sartrouville","c":"France","y":48.9372,"x":2.1644},{"n":"Vidin","c":"Bulgaria","y":43.9887,"x":22.8741},{"n":"White Plains","c":"United States","y":41.022,"x":-73.7549},{"n":"Sevran","c":"France","y":48.9333,"x":2.5333},{"n":"Huehuetenango","c":"Guatemala","y":15.3147,"x":-91.4761},{"n":"Jefferson City","c":"United States","y":38.5676,"x":-92.1759},{"n":"Zalaegerszeg","c":"Hungary","y":46.8392,"x":16.8511},{"n":"Hendon","c":"United Kingdom","y":51.5837,"x":-0.2252},{"n":"Arcadia","c":"United States","y":34.1342,"x":-118.0373},{"n":"Hilden","c":"Germany","y":51.1714,"x":6.9394},{"n":"Slavonski Brod","c":"Croatia","y":45.1553,"x":18.0144},{"n":"Legionowo","c":"Poland","y":52.4015,"x":20.9266},{"n":"Magong","c":"Taiwan","y":23.5667,"x":119.5833},{"n":"Umm el Fahm","c":"Israel","y":32.5158,"x":35.1525},{"n":"Alfortville","c":"France","y":48.805,"x":2.4239},{"n":"Samut Prakan","c":"Thailand","y":13.6004,"x":100.5964},{"n":"Nuevo Casas Grandes","c":"Mexico","y":30.4167,"x":-107.9167},{"n":"Pavia","c":"Philippines","y":10.775,"x":122.5417},{"n":"Kidderminster","c":"United Kingdom","y":52.3885,"x":-2.249},{"n":"Lipjan","c":"Kosovo","y":42.53,"x":21.1386},{"n":"Zumpango","c":"Mexico","y":19.7969,"x":-99.0992},{"n":"Crosby","c":"United Kingdom","y":53.4872,"x":-3.0343},{"n":"Al Mafraq","c":"Jordan","y":32.2833,"x":36.2333},{"n":"Hamilton","c":"United Kingdom","y":55.777,"x":-4.039},{"n":"Altrincham","c":"United Kingdom","y":53.3838,"x":-2.3547},{"n":"Huntington Park","c":"United States","y":33.98,"x":-118.2167},{"n":"Mafeteng","c":"Lesotho","y":-29.8231,"x":27.2375},{"n":"Esplugas de Llobregat","c":"Spain","y":41.3767,"x":2.0858},{"n":"Chinhoyi","c":"Zimbabwe","y":-17.35,"x":30.2},{"n":"Gumushane","c":"Turkey","y":40.4597,"x":39.4778},{"n":"Pithapuram","c":"India","y":17.1167,"x":82.2667},{"n":"Belize City","c":"Belize","y":17.4986,"x":-88.1886},{"n":"Acatzingo","c":"Mexico","y":18.9817,"x":-97.7822},{"n":"Maun","c":"Botswana","y":-19.9833,"x":23.4167},{"n":"Barri","c":"United Kingdom","y":51.405,"x":-3.27},{"n":"Biel/Bienne","c":"Switzerland","y":47.1372,"x":7.2472},{"n":"Bac Giang","c":"Vietnam","y":21.2731,"x":106.1947},{"n":"Ushuaia","c":"Argentina","y":-54.8072,"x":-68.3044},{"n":"Dunfermline","c":"United Kingdom","y":56.0719,"x":-3.4393},{"n":"Royal Leamington Spa","c":"United Kingdom","y":52.292,"x":-1.537},{"n":"Zalau","c":"Romania","y":47.1911,"x":23.0572},{"n":"Sfantu-Gheorghe","c":"Romania","y":45.8636,"x":25.7875},{"n":"Mugla","c":"Turkey","y":37.2167,"x":28.3667},{"n":"Llanelli","c":"United Kingdom","y":51.684,"x":-4.163},{"n":"Tandag","c":"Philippines","y":9.0667,"x":126.1833},{"n":"Phra Nakhon Si Ayutthaya","c":"Thailand","y":14.3594,"x":100.5761},{"n":"Montesilvano","c":"Italy","y":42.5119,"x":14.1373},{"n":"Kranj","c":"Slovenia","y":46.2389,"x":14.3556},{"n":"Salama","c":"Guatemala","y":15.1052,"x":-90.316},{"n":"Zouerate","c":"Mauritania","y":22.7344,"x":-12.4725},{"n":"Mollet","c":"Spain","y":41.5356,"x":2.2107},{"n":"Trencin","c":"Slovakia","y":48.8942,"x":18.0406},{"n":"Rahovec","c":"Kosovo","y":42.3994,"x":20.6547},{"n":"Jelgava","c":"Latvia","y":56.6522,"x":23.7244},{"n":"Tamiami","c":"United States","y":25.7556,"x":-80.4016},{"n":"Vaslui","c":"Romania","y":46.6383,"x":27.7292},{"n":"Saint-Quentin","c":"France","y":49.8486,"x":3.2864},{"n":"Massy","c":"France","y":48.7309,"x":2.2713},{"n":"Kendale Lakes","c":"United States","y":25.7081,"x":-80.4078},{"n":"Castelo Branco","c":"Portugal","y":39.823,"x":-7.4931},{"n":"Rio Tinto","c":"Portugal","y":41.1833,"x":-8.5667},{"n":"San Giorgio a Cremano","c":"Italy","y":40.8333,"x":14.3333},{"n":"Vigan","c":"Philippines","y":17.5747,"x":120.3869},{"n":"Weymouth","c":"United Kingdom","y":50.613,"x":-2.457},{"n":"Santa Rosa de Copan","c":"Honduras","y":14.7667,"x":-88.7833},{"n":"Gallarate","c":"Italy","y":45.6649,"x":8.7914},{"n":"Halmstad","c":"Sweden","y":56.6754,"x":12.8587},{"n":"Corbeil-Essonnes","c":"France","y":48.6139,"x":2.482},{"n":"Ohrid","c":"Macedonia","y":41.1169,"x":20.8019},{"n":"Greenford","c":"United Kingdom","y":51.5299,"x":-0.3488},{"n":"Ponte Nova","c":"Brazil","y":-20.4164,"x":-42.9086},{"n":"Matamoros","c":"Mexico","y":25.533,"x":-103.25},{"n":"Guliston","c":"Uzbekistan","y":40.4833,"x":68.7833},{"n":"Rowley Regis","c":"United Kingdom","y":52.48,"x":-2.06},{"n":"Bootle","c":"United Kingdom","y":53.4457,"x":-2.9891},{"n":"Ibiza","c":"Spain","y":38.9089,"x":1.4328},{"n":"Francisco I. Madero","c":"Mexico","y":25.7753,"x":-103.2731},{"n":"New Brunswick","c":"United States","y":40.487,"x":-74.445},{"n":"Casalnuovo di Napoli","c":"Italy","y":40.9167,"x":14.35},{"n":"Lautoka","c":"Fiji","y":-17.6242,"x":177.4528},{"n":"Senhor do Bonfim","c":"Brazil","y":-10.4614,"x":-40.1894},{"n":"Ercolano","c":"Italy","y":40.8068,"x":14.3526},{"n":"M.A. Rasulzada","c":"Azerbaijan","y":40.4342,"x":49.8617},{"n":"Fountain Valley","c":"United States","y":33.7105,"x":-117.9514},{"n":"Whangarei","c":"New Zealand","y":-35.725,"x":174.3236},{"n":"Villagran","c":"Mexico","y":20.517,"x":-100.983},{"n":"Paignton","c":"United Kingdom","y":50.4353,"x":-3.5625},{"n":"Lampang","c":"Thailand","y":18.3,"x":99.5},{"n":"Lancaster","c":"United Kingdom","y":54.047,"x":-2.801},{"n":"Vranje","c":"Serbia","y":42.5542,"x":21.8972},{"n":"Abu Qir","c":"Egypt","y":31.3167,"x":30.0667},{"n":"Naval","c":"Philippines","y":11.5833,"x":124.45},{"n":"Ithaca","c":"United States","y":42.4442,"x":-76.5032},{"n":"Chiapa de Corzo","c":"Mexico","y":16.7083,"x":-93.0169},{"n":"Madinat Hamad","c":"Bahrain","y":26.1128,"x":50.5139},{"n":"Oak Lawn","c":"United States","y":41.7139,"x":-87.7528},{"n":"Boac","c":"Philippines","y":13.45,"x":121.8333},{"n":"Padangpanjang","c":"Indonesia","y":-0.45,"x":100.4167},{"n":"Mikkeli","c":"Finland","y":61.6875,"x":27.2736},{"n":"Malisheve","c":"Kosovo","y":42.4828,"x":20.7458},{"n":"Gutao","c":"China","y":37.1989,"x":112.1767},{"n":"Busia","c":"Uganda","y":0.4669,"x":34.09},{"n":"Morden","c":"United Kingdom","y":51.4015,"x":-0.1949},{"n":"Catford","c":"United Kingdom","y":51.4452,"x":-0.0207},{"n":"Folkestone","c":"United Kingdom","y":51.081,"x":1.166},{"n":"Berwyn","c":"United States","y":41.8433,"x":-87.7909},{"n":"Charikar","c":"Afghanistan","y":35.0183,"x":69.1679},{"n":"Aloha","c":"United States","y":45.492,"x":-122.8726},{"n":"Shiraoka","c":"Japan","y":36.0189,"x":139.6769},{"n":"Prachuap Khiri Khan","c":"Thailand","y":11.8067,"x":99.7956},{"n":"Irvington","c":"United States","y":40.7242,"x":-74.2318},{"n":"Korce","c":"Albania","y":40.6167,"x":20.7667},{"n":"Rosemead","c":"United States","y":34.0689,"x":-118.0823},{"n":"Tulcan","c":"Ecuador","y":0.8117,"x":-77.7186},{"n":"Rosny-sous-Bois","c":"France","y":48.8667,"x":2.4833},{"n":"Muban Saeng Bua Thong","c":"Thailand","y":13.9424,"x":100.3913},{"n":"Paramount","c":"United States","y":33.8976,"x":-118.1652},{"n":"Louangphabang","c":"Laos","y":19.8931,"x":102.1381},{"n":"Stratford","c":"United Kingdom","y":51.5423,"x":-0.0026},{"n":"Choisy-le-Roi","c":"France","y":48.763,"x":2.409},{"n":"Iganga","c":"Uganda","y":0.6092,"x":33.4686},{"n":"Cagnes-sur-Mer","c":"France","y":43.6644,"x":7.1489},{"n":"Sakon Nakhon","c":"Thailand","y":17.1564,"x":104.1456},{"n":"Sutton in Ashfield","c":"United Kingdom","y":53.125,"x":-1.261},{"n":"Pursat","c":"Cambodia","y":12.5337,"x":103.9167},{"n":"Bayonne","c":"France","y":43.49,"x":-1.48},{"n":"Macclesfield","c":"United Kingdom","y":53.2581,"x":-2.1274},{"n":"Eger","c":"Hungary","y":47.8989,"x":20.3747},{"n":"Nes Ziyyona","c":"Israel","y":31.9333,"x":34.8},{"n":"San Vicente","c":"El Salvador","y":13.6333,"x":-88.8},{"n":"Cologno Monzese","c":"Italy","y":45.5286,"x":9.2783},{"n":"Santiago Teyahualco","c":"Mexico","y":19.6667,"x":-99.1333},{"n":"Marondera","c":"Zimbabwe","y":-18.1833,"x":31.55},{"n":"Wellingborough","c":"United Kingdom","y":52.2939,"x":-0.6964},{"n":"Scafati","c":"Italy","y":40.7536,"x":14.5253},{"n":"Moskovskiy","c":"Russia","y":55.5991,"x":37.355},{"n":"Rho","c":"Italy","y":45.5333,"x":9.0333},{"n":"Gao","c":"Mali","y":16.2667,"x":-0.05},{"n":"Maha Sarakham","c":"Thailand","y":16.1772,"x":103.3008},{"n":"Revere","c":"United States","y":42.4192,"x":-71.0036},{"n":"Barra do Corda","c":"Brazil","y":-5.5031,"x":-45.2369},{"n":"Aspen Hill","c":"United States","y":39.0928,"x":-77.0823},{"n":"Kirkcaldy","c":"United Kingdom","y":56.1107,"x":-3.1674},{"n":"Helena","c":"United States","y":46.5965,"x":-112.0202},{"n":"Takeo","c":"Cambodia","y":10.9833,"x":104.7833},{"n":"Hrazdan","c":"Armenia","y":40.5,"x":44.7667},{"n":"Barnet","c":"United Kingdom","y":51.6444,"x":-0.1997},{"n":"Vejle","c":"Denmark","y":55.709,"x":9.535},{"n":"Noisy-le-Sec","c":"France","y":48.8894,"x":2.4503},{"n":"Santurce-Antiguo","c":"Spain","y":43.3303,"x":-3.0314},{"n":"Cumbernauld","c":"United Kingdom","y":55.945,"x":-3.994},{"n":"Valladolid","c":"Mexico","y":20.6894,"x":-88.2017},{"n":"West New York","c":"United States","y":40.7856,"x":-74.0093},{"n":"Mangochi","c":"Malawi","y":-14.4781,"x":35.2645},{"n":"Hoboken","c":"United States","y":40.7453,"x":-74.0279},{"n":"Mongu","c":"Zambia","y":-15.2796,"x":23.12},{"n":"Myrnohrad","c":"Ukraine","y":48.3022,"x":37.2614},{"n":"Iwakura","c":"Japan","y":35.2833,"x":136.8667},{"n":"Takahama","c":"Japan","y":34.9276,"x":136.9877},{"n":"Boujad","c":"Morocco","y":32.76,"x":-6.4},{"n":"Oak Park","c":"United States","y":41.8872,"x":-87.7899},{"n":"Batley","c":"United Kingdom","y":53.716,"x":-1.627},{"n":"Jinotepe","c":"Nicaragua","y":11.85,"x":-86.2},{"n":"Collegno","c":"Italy","y":45.0833,"x":7.5833},{"n":"Ain El Aouda","c":"Morocco","y":33.8111,"x":-6.7922},{"n":"Elmshorn","c":"Germany","y":53.7547,"x":9.6536},{"n":"Floriano","c":"Brazil","y":-6.7669,"x":-43.0225},{"n":"Bang Bua Thong","c":"Thailand","y":13.9099,"x":100.4263},{"n":"Suzukawa","c":"Japan","y":35.3731,"x":139.3842},{"n":"Lamia","c":"Greece","y":38.8972,"x":22.4311},{"n":"Chake Chake","c":"Tanzania","y":-5.2395,"x":39.77},{"n":"Vaulx-en-Velin","c":"France","y":45.7768,"x":4.9186},{"n":"Lankaran","c":"Azerbaijan","y":38.7536,"x":48.8511},{"n":"Vila Real","c":"Portugal","y":41.3002,"x":-7.7398},{"n":"Ocosingo","c":"Mexico","y":16.9072,"x":-92.0961},{"n":"Itamaraju","c":"Brazil","y":-17.0392,"x":-39.5311},{"n":"Pen-y-Bont ar Ogwr","c":"United Kingdom","y":51.5072,"x":-3.5784},{"n":"Ramos Arizpe","c":"Mexico","y":25.55,"x":-100.9667},{"n":"Teplice","c":"Czechia","y":50.6333,"x":13.8167},{"n":"Ratnapura","c":"Sri Lanka","y":6.693,"x":80.386},{"n":"Jihlava","c":"Czechia","y":49.4003,"x":15.5906},{"n":"Sombor","c":"Serbia","y":45.78,"x":19.12},{"n":"Levittown","c":"United States","y":40.7241,"x":-73.5125},{"n":"Bodo","c":"Norway","y":67.2833,"x":14.3833},{"n":"Vryburg","c":"South Africa","y":-26.95,"x":24.7333},{"n":"Eltham","c":"United Kingdom","y":51.451,"x":0.052},{"n":"Surbiton","c":"United Kingdom","y":51.394,"x":-0.307},{"n":"Perth Amboy","c":"United States","y":40.5203,"x":-74.2724},{"n":"Ashton","c":"United Kingdom","y":53.4897,"x":-2.0952},{"n":"Qasbat Tadla","c":"Morocco","y":32.6,"x":-6.26},{"n":"Tizimin","c":"Mexico","y":21.1425,"x":-88.1647},{"n":"Seguela","c":"Côte D’Ivoire","y":7.9611,"x":-6.6731},{"n":"Placentia","c":"United States","y":33.8807,"x":-117.8553},{"n":"Guozhen","c":"China","y":34.3686,"x":107.2075},{"n":"Stretford","c":"United Kingdom","y":53.4466,"x":-2.3086},{"n":"Evere","c":"Belgium","y":50.8719,"x":4.4033},{"n":"Sar-e Pul","c":"Afghanistan","y":36.2214,"x":65.9278},{"n":"Komotini","c":"Greece","y":41.1167,"x":25.4},{"n":"Camocim","c":"Brazil","y":-2.9022,"x":-40.8411},{"n":"Cuetzalan","c":"Mexico","y":20.0333,"x":-97.5167},{"n":"Loreto","c":"Mexico","y":22.2667,"x":-101.9833},{"n":"Larnaca","c":"Cyprus","y":34.9233,"x":33.6305},{"n":"Capanema","c":"Brazil","y":-1.1958,"x":-47.1808},{"n":"Gennevilliers","c":"France","y":48.9333,"x":2.3},{"n":"Bodupal","c":"India","y":17.4139,"x":78.5783},{"n":"Longchamps","c":"Argentina","y":-34.8596,"x":-58.387},{"n":"Alytus","c":"Lithuania","y":54.4014,"x":24.0492},{"n":"Sisophon","c":"Cambodia","y":13.5833,"x":102.9833},{"n":"Aliso Viejo","c":"United States","y":33.5792,"x":-117.7289},{"n":"Skenderaj","c":"Kosovo","y":42.7467,"x":20.7886},{"n":"Jarash","c":"Jordan","y":32.2723,"x":35.8914},{"n":"Harasta","c":"Syria","y":33.5586,"x":36.365},{"n":"Puttalam","c":"Sri Lanka","y":8.033,"x":79.826},{"n":"Iba","c":"Philippines","y":15.3333,"x":119.9833},{"n":"Welwyn Garden City","c":"United Kingdom","y":51.8062,"x":-0.1932},{"n":"Jurmala","c":"Latvia","y":56.968,"x":23.7704},{"n":"Bagneux","c":"France","y":48.7983,"x":2.3137},{"n":"Gbadolite","c":"Congo (Kinshasa)","y":4.275,"x":21},{"n":"Garges-les-Gonesse","c":"France","y":48.9728,"x":2.4008},{"n":"Livry-Gargan","c":"France","y":48.9192,"x":2.5361},{"n":"West Bridgford","c":"United Kingdom","y":52.932,"x":-1.127},{"n":"Trujillo","c":"Venezuela","y":9.3667,"x":-70.4331},{"n":"Azemmour","c":"Morocco","y":33.2833,"x":-8.3333},{"n":"Lissone","c":"Italy","y":45.6167,"x":9.25},{"n":"Country Club","c":"United States","y":25.9407,"x":-80.3102},{"n":"Goianesia","c":"Brazil","y":-15.3175,"x":-49.1175},{"n":"Yeovil","c":"United Kingdom","y":50.9452,"x":-2.637},{"n":"Beckenham","c":"United Kingdom","y":51.408,"x":-0.022},{"n":"Gracias","c":"Honduras","y":14.5833,"x":-88.5833},{"n":"Ma`an","c":"Jordan","y":30.192,"x":35.736},{"n":"Cojutepeque","c":"El Salvador","y":13.7167,"x":-88.9333},{"n":"Selibe Phikwe","c":"Botswana","y":-21.9667,"x":27.9167},{"n":"Villa Alsina","c":"Argentina","y":-34.6667,"x":-58.4167},{"n":"Plainfield","c":"United States","y":40.6154,"x":-74.4157},{"n":"Invercargill","c":"New Zealand","y":-46.429,"x":168.362},{"n":"Wheaton","c":"United States","y":39.0492,"x":-77.0572},{"n":"Campobasso","c":"Italy","y":41.561,"x":14.6684},{"n":"Tlalmanalco","c":"Mexico","y":19.2044,"x":-98.8025},{"n":"Moyobamba","c":"Peru","y":-6.0333,"x":-76.9667},{"n":"Al Kharjah","c":"Egypt","y":25.44,"x":30.55},{"n":"Kotelniki","c":"Russia","y":55.65,"x":37.8667},{"n":"Nichelino","c":"Italy","y":45,"x":7.65},{"n":"Al Balyana","c":"Egypt","y":26.2329,"x":31.9993},{"n":"Paderno Dugnano","c":"Italy","y":45.5667,"x":9.1667},{"n":"Meudon","c":"France","y":48.8123,"x":2.2382},{"n":"Zaranj","c":"Afghanistan","y":30.96,"x":61.86},{"n":"La Garenne-Colombes","c":"France","y":48.9056,"x":2.2445},{"n":"Odienne","c":"Côte D’Ivoire","y":9.5,"x":-7.5667},{"n":"Cheshunt","c":"United Kingdom","y":51.702,"x":-0.035},{"n":"Nausori","c":"Fiji","y":-18.0244,"x":178.5454},{"n":"North Bethesda","c":"United States","y":39.0393,"x":-77.1191},{"n":"Hagere Hiywet","c":"Ethiopia","y":8.9833,"x":37.85},{"n":"Cerritos","c":"United States","y":33.8677,"x":-118.0686},{"n":"Dosso","c":"Niger","y":13.05,"x":3.2},{"n":"Kangar","c":"Malaysia","y":6.4414,"x":100.1986},{"n":"Al Aaroui","c":"Morocco","y":35.0104,"x":-3.0073},{"n":"Figueras","c":"Spain","y":42.2667,"x":2.965},{"n":"Montana","c":"Bulgaria","y":43.4055,"x":23.2242},{"n":"Huancavelica","c":"Peru","y":-12.785,"x":-74.9714},{"n":"Perth","c":"United Kingdom","y":56.397,"x":-3.437},{"n":"Brumado","c":"Brazil","y":-14.2036,"x":-41.6653},{"n":"Dollard-des-Ormeaux","c":"Canada","y":45.4833,"x":-73.8167},{"n":"El`ad","c":"Israel","y":32.0523,"x":34.9512},{"n":"Couva","c":"Trinidad And Tobago","y":10.4167,"x":-61.45},{"n":"Lulea","c":"Sweden","y":65.5838,"x":22.1915},{"n":"Waterford","c":"Ireland","y":52.2583,"x":-7.119},{"n":"Bagnolet","c":"France","y":48.8692,"x":2.4181},{"n":"Ramat HaSharon","c":"Israel","y":32.1461,"x":34.8394},{"n":"Nelson","c":"New Zealand","y":-41.2931,"x":173.2381},{"n":"Wajir","c":"Kenya","y":1.75,"x":40.0667},{"n":"San Feliu de Llobregat","c":"Spain","y":41.3833,"x":2.0439},{"n":"Mairena del Aljarafe","c":"Spain","y":37.3333,"x":-6.0667},{"n":"Bloomfield","c":"United States","y":40.8098,"x":-74.1868},{"n":"San Isidro","c":"Argentina","y":-34.4667,"x":-58.5167},{"n":"Corroios","c":"Portugal","y":38.65,"x":-9.15},{"n":"Karlovy Vary","c":"Czechia","y":50.2306,"x":12.8725},{"n":"Jose Marmol","c":"Argentina","y":-34.7833,"x":-58.3667},{"n":"Ayr","c":"United Kingdom","y":55.458,"x":-4.629},{"n":"Banbury","c":"United Kingdom","y":52.061,"x":-1.336},{"n":"Wokingham","c":"United Kingdom","y":51.41,"x":-0.84},{"n":"Moroleon","c":"Mexico","y":20.1333,"x":-101.2},{"n":"Mantes-la-Jolie","c":"France","y":48.9908,"x":1.7172},{"n":"Cypress","c":"United States","y":33.8171,"x":-118.0386},{"n":"Hollister","c":"United States","y":36.8563,"x":-121.3981},{"n":"La Courneuve","c":"France","y":48.9322,"x":2.3967},{"n":"Inhumas","c":"Brazil","y":-16.3578,"x":-49.4961},{"n":"Rovenky","c":"Ukraine","y":48.0833,"x":39.3667},{"n":"Middelburg","c":"Netherlands","y":51.4997,"x":3.6136},{"n":"Asadabad","c":"Afghanistan","y":34.8742,"x":71.1528},{"n":"Tlapa de Comonfort","c":"Mexico","y":17.5461,"x":-98.5764},{"n":"Chatillon","c":"France","y":48.8,"x":2.29},{"n":"Birendranagar","c":"Nepal","y":28.6,"x":81.6333},{"n":"Krasnoznamensk","c":"Russia","y":55.6,"x":37.0333},{"n":"Ceres","c":"United States","y":37.5953,"x":-120.9625},{"n":"Nueva Loja","c":"Ecuador","y":0.0844,"x":-76.8911},{"n":"Puerto Escondido","c":"Mexico","y":15.8619,"x":-97.0672},{"n":"Noveleta","c":"Philippines","y":14.4333,"x":120.8833},{"n":"Bangued","c":"Philippines","y":17.5965,"x":120.6179},{"n":"Seregno","c":"Italy","y":45.65,"x":9.2},{"n":"Serowe","c":"Botswana","y":-22.3833,"x":26.7167},{"n":"Mandeville","c":"Jamaica","y":18.0417,"x":-77.5072},{"n":"Nong Khai","c":"Thailand","y":17.8842,"x":102.7467},{"n":"Salekhard","c":"Russia","y":66.5333,"x":66.6333},{"n":"Mercedes","c":"Uruguay","y":-33.25,"x":-58.0319},{"n":"University","c":"United States","y":28.0771,"x":-82.4335},{"n":"Antelope","c":"United States","y":38.7153,"x":-121.361},{"n":"Leiria","c":"Portugal","y":39.7444,"x":-8.8072},{"n":"Parras de la Fuente","c":"Mexico","y":25.4403,"x":-102.1792},{"n":"Emiliano Zapata","c":"Mexico","y":18.8667,"x":-99.15},{"n":"Bindura","c":"Zimbabwe","y":-17.3,"x":31.3333},{"n":"Gori","c":"Georgia","y":41.9817,"x":44.1124},{"n":"Bastia","c":"France","y":42.7008,"x":9.4503},{"n":"Isiolo","c":"Kenya","y":0.35,"x":37.5833},{"n":"La Mirada","c":"United States","y":33.9025,"x":-118.0093},{"n":"Inuma","c":"Japan","y":36,"x":139.6239},{"n":"Havant","c":"United Kingdom","y":50.85,"x":-0.98},{"n":"Chalon-sur-Saone","c":"France","y":46.7806,"x":4.8528},{"n":"Torre Annunziata","c":"Italy","y":40.7569,"x":14.4444},{"n":"Leribe","c":"Lesotho","y":-28.8734,"x":28.0416},{"n":"Nocera Inferiore","c":"Italy","y":40.75,"x":14.6333},{"n":"Kanash","c":"Russia","y":55.5167,"x":47.5},{"n":"Hinckley","c":"United Kingdom","y":52.5413,"x":-1.3725},{"n":"Njombe","c":"Tanzania","y":-9.3296,"x":34.77},{"n":"Melito di Napoli","c":"Italy","y":40.9167,"x":14.2333},{"n":"Erith","c":"United Kingdom","y":51.48,"x":0.1778},{"n":"Talence","c":"France","y":44.8,"x":-0.584},{"n":"New Amsterdam","c":"Guyana","y":6.25,"x":-57.5167},{"n":"Kerkrade","c":"Netherlands","y":50.8667,"x":6.0667},{"n":"North Highlands","c":"United States","y":38.6713,"x":-121.3721},{"n":"Karmiel","c":"Israel","y":32.9,"x":35.2833},{"n":"Morley","c":"United Kingdom","y":53.7492,"x":-1.6023},{"n":"Hajjah","c":"Yemen","y":15.695,"x":43.5975},{"n":"Empalme","c":"Mexico","y":27.9617,"x":-110.8125},{"n":"Kokkola","c":"Finland","y":63.8376,"x":23.132},{"n":"Florin","c":"United States","y":38.4832,"x":-121.4042},{"n":"Covina","c":"United States","y":34.0903,"x":-117.8817},{"n":"Bang Kruai","c":"Thailand","y":13.8042,"x":100.4755},{"n":"Tubod","c":"Philippines","y":8.05,"x":123.8},{"n":"Murzuq","c":"Libya","y":25.9136,"x":13.9336},{"n":"Ripollet","c":"Spain","y":41.4969,"x":2.1574},{"n":"San Adrian de Besos","c":"Spain","y":41.4305,"x":2.2183},{"n":"Caluire-et-Cuire","c":"France","y":45.7953,"x":4.8472},{"n":"Rosso","c":"Mauritania","y":16.5128,"x":-15.805},{"n":"Villa de Zaachila","c":"Mexico","y":16.9508,"x":-96.7492},{"n":"Naj` Hammadi","c":"Egypt","y":26.05,"x":32.25},{"n":"Charenton-le-Pont","c":"France","y":48.8265,"x":2.405},{"n":"Hammam-Lif","c":"Tunisia","y":36.7308,"x":10.3275},{"n":"Chitre","c":"Panama","y":7.9667,"x":-80.4333},{"n":"Salgueiro","c":"Brazil","y":-8.0742,"x":-39.1192},{"n":"Badulla","c":"Sri Lanka","y":6.9847,"x":81.0564},{"n":"Nagykanizsa","c":"Hungary","y":46.4558,"x":16.9975},{"n":"Malakoff","c":"France","y":48.8169,"x":2.2944},{"n":"Welling","c":"United Kingdom","y":51.4594,"x":0.1097},{"n":"Viti","c":"Kosovo","y":42.3167,"x":21.35},{"n":"Boosaaso","c":"Somalia","y":11.28,"x":49.18},{"n":"Izucar de Matamoros","c":"Mexico","y":18.6,"x":-98.4667},{"n":"Qiryat Ono","c":"Israel","y":32.0636,"x":34.8553},{"n":"Castleford","c":"United Kingdom","y":53.716,"x":-1.356},{"n":"Santiago","c":"Panama","y":8.1004,"x":-80.9833},{"n":"Fareham","c":"United Kingdom","y":50.85,"x":-1.18},{"n":"Le Cannet","c":"France","y":43.5769,"x":7.0194},{"n":"Kanye","c":"Botswana","y":-24.9833,"x":25.35},{"n":"Embu","c":"Kenya","y":-0.5333,"x":37.45},{"n":"Choma","c":"Zambia","y":-16.8095,"x":26.97},{"n":"Aweil","c":"South Sudan","y":8.7666,"x":27.4},{"n":"Ostersund","c":"Sweden","y":63.1775,"x":14.6414},{"n":"Merthyr Tudful","c":"United Kingdom","y":51.743,"x":-3.378},{"n":"Trollhattan","c":"Sweden","y":58.2671,"x":12.3},{"n":"Rye","c":"United States","y":41.0076,"x":-73.6872},{"n":"Valenciennes","c":"France","y":50.358,"x":3.5233},{"n":"Sibenik","c":"Croatia","y":43.7339,"x":15.8956},{"n":"Coatbridge","c":"United Kingdom","y":55.8625,"x":-4.0266},{"n":"Saint-Brieuc","c":"France","y":48.5136,"x":-2.7653},{"n":"Cobija","c":"Bolivia","y":-11.0183,"x":-68.7537},{"n":"Yuchengcun","c":"China","y":23.5613,"x":116.2715},{"n":"Urmston","c":"United Kingdom","y":53.4487,"x":-2.3747},{"n":"Farim","c":"Guinea-Bissau","y":12.4833,"x":-15.2167},{"n":"Daijiazhuang","c":"China","y":38.1345,"x":114.3906},{"n":"Slobozia","c":"Romania","y":44.5639,"x":27.3661},{"n":"Mafamude","c":"Portugal","y":41.1152,"x":-8.6036},{"n":"Mrirt","c":"Morocco","y":33.1667,"x":-5.5667},{"n":"Vilvoorde","c":"Belgium","y":50.9281,"x":4.4245},{"n":"Kingswood","c":"United Kingdom","y":51.46,"x":-2.505},{"n":"Jerada","c":"Morocco","y":34.31,"x":-2.16},{"n":"Hammam Sousse","c":"Tunisia","y":35.8589,"x":10.5939},{"n":"Rozzano","c":"Italy","y":45.3833,"x":9.15},{"n":"Gbarnga","c":"Liberia","y":7.0104,"x":-9.49},{"n":"Stains","c":"France","y":48.95,"x":2.3833},{"n":"Alexandria","c":"Romania","y":43.9686,"x":25.3333},{"n":"Madinat `Isa","c":"Bahrain","y":26.1736,"x":50.5478},{"n":"Igualada","c":"Spain","y":41.5814,"x":1.6208},{"n":"Thun","c":"Switzerland","y":46.759,"x":7.63},{"n":"Vanves","c":"France","y":48.8208,"x":2.2897},{"n":"Kingston upon Thames","c":"United Kingdom","y":51.4103,"x":-0.2995},{"n":"Buta","c":"Congo (Kinshasa)","y":2.82,"x":24.74},{"n":"Bron","c":"France","y":45.7394,"x":4.9139},{"n":"Targovishte","c":"Bulgaria","y":43.2414,"x":26.5719},{"n":"Nueva Gerona","c":"Cuba","y":21.8847,"x":-82.8011},{"n":"Tindouf","c":"Algeria","y":27.6753,"x":-8.1286},{"n":"Jaltipan de Morelos","c":"Mexico","y":17.9703,"x":-94.7144},{"n":"Bluefields","c":"Nicaragua","y":12.014,"x":-83.7645},{"n":"Strumica","c":"Macedonia","y":41.4375,"x":22.6431},{"n":"Liberia","c":"Costa Rica","y":10.6338,"x":-85.4333},{"n":"Bellinzona","c":"Switzerland","y":46.1956,"x":9.0238},{"n":"Pattani","c":"Thailand","y":6.8664,"x":101.2508},{"n":"Artigas","c":"Uruguay","y":-30.4667,"x":-56.4667},{"n":"Pinneberg","c":"Germany","y":53.6591,"x":9.8009},{"n":"Newbury","c":"United Kingdom","y":51.401,"x":-1.323},{"n":"Coyotepec","c":"Mexico","y":19.7756,"x":-99.2056},{"n":"Oakland Park","c":"United States","y":26.178,"x":-80.1528},{"n":"Donggangli","c":"China","y":39.9733,"x":119.6406},{"n":"Gagny","c":"France","y":48.8833,"x":2.5333},{"n":"Alcantarilla","c":"Spain","y":37.9722,"x":-1.2094},{"n":"Dunaujvaros","c":"Hungary","y":46.9833,"x":18.9167},{"n":"Sutton","c":"United Kingdom","y":51.3656,"x":-0.1963},{"n":"Melun","c":"France","y":48.5406,"x":2.66},{"n":"Bridgwater","c":"United Kingdom","y":51.128,"x":-2.993},{"n":"Kabale","c":"Uganda","y":-1.2496,"x":29.98},{"n":"Desio","c":"Italy","y":45.6167,"x":9.2167},{"n":"Swidnik","c":"Poland","y":51.2333,"x":22.7},{"n":"Altadena","c":"United States","y":34.1928,"x":-118.1345},{"n":"Qiryat Bialik","c":"Israel","y":32.8331,"x":35.0664},{"n":"Bishops Stortford","c":"United Kingdom","y":51.872,"x":0.1725},{"n":"Bois-Colombes","c":"France","y":48.9175,"x":2.2683},{"n":"Nogent-sur-Marne","c":"France","y":48.8375,"x":2.4833},{"n":"Lecherias","c":"Venezuela","y":10.1889,"x":-64.6951},{"n":"Arras","c":"France","y":50.292,"x":2.78},{"n":"Umm al Qaywayn","c":"United Arab Emirates","y":25.5653,"x":55.5533},{"n":"Reze","c":"France","y":47.1833,"x":-1.55},{"n":"Duncan","c":"Canada","y":48.7787,"x":-123.7079},{"n":"El Aioun","c":"Morocco","y":34.5853,"x":-2.5056},{"n":"Chimaltenango","c":"Guatemala","y":14.6622,"x":-90.8208},{"n":"Kirkby","c":"United Kingdom","y":53.4826,"x":-2.892},{"n":"Salisbury","c":"United Kingdom","y":51.074,"x":-1.7936},{"n":"Katsuren-haebaru","c":"Japan","y":26.1911,"x":127.7286},{"n":"Tarbes","c":"France","y":43.23,"x":0.07},{"n":"Boumerdes","c":"Algeria","y":36.7594,"x":3.4728},{"n":"North Lauderdale","c":"United States","y":26.2113,"x":-80.2209},{"n":"Leidschendam","c":"Netherlands","y":52.0833,"x":4.4},{"n":"Caerphilly","c":"United Kingdom","y":51.578,"x":-3.218},{"n":"Hackensack","c":"United States","y":40.889,"x":-74.0461},{"n":"Caloundra","c":"Australia","y":-26.7986,"x":153.1289},{"n":"Wattrelos","c":"France","y":50.7,"x":3.217},{"n":"Kampong Chhnang","c":"Cambodia","y":12.25,"x":104.6667},{"n":"Cleveland Heights","c":"United States","y":41.5112,"x":-81.5636},{"n":"Fort Portal","c":"Uganda","y":0.671,"x":30.275},{"n":"Ermezinde","c":"Portugal","y":41.2133,"x":-8.5472},{"n":"Veles","c":"Macedonia","y":41.7153,"x":21.7753},{"n":"Or Yehuda","c":"Israel","y":32.0333,"x":34.85},{"n":"Haedo","c":"Argentina","y":-34.65,"x":-58.6},{"n":"Paracho de Verduzco","c":"Mexico","y":19.65,"x":-102.0667},{"n":"Stip","c":"Macedonia","y":41.7358,"x":22.1914},{"n":"Drogheda","c":"Ireland","y":53.7139,"x":-6.3503},{"n":"Trujillo Alto","c":"Puerto Rico","y":18.3601,"x":-66.0103},{"n":"Kalmar","c":"Sweden","y":56.6694,"x":16.3218},{"n":"Playa Vicente","c":"Mexico","y":17.8333,"x":-95.8167},{"n":"Munro","c":"Argentina","y":-34.5333,"x":-58.5167},{"n":"Matale","c":"Sri Lanka","y":7.4667,"x":80.6167},{"n":"Uman","c":"Mexico","y":20.8833,"x":-89.75},{"n":"Grays","c":"United Kingdom","y":51.475,"x":0.33},{"n":"Abingdon","c":"United Kingdom","y":51.667,"x":-1.283},{"n":"Nanuque","c":"Brazil","y":-17.8392,"x":-40.3539},{"n":"San Diego de la Union","c":"Mexico","y":21.4656,"x":-100.8736},{"n":"Hodmezovasarhely","c":"Hungary","y":46.4303,"x":20.3189},{"n":"Ramsgate","c":"United Kingdom","y":51.336,"x":1.416},{"n":"Annandale","c":"United States","y":38.8324,"x":-77.196},{"n":"Rohnert Park","c":"United States","y":38.348,"x":-122.6964},{"n":"Zugdidi","c":"Georgia","y":42.5083,"x":41.8667},{"n":"Mityana","c":"Uganda","y":0.4004,"x":32.05},{"n":"Cacem","c":"Portugal","y":38.7704,"x":-9.3081},{"n":"Le Kremlin-Bicetre","c":"France","y":48.81,"x":2.3581},{"n":"Ilkeston","c":"United Kingdom","y":52.971,"x":-1.309},{"n":"Kapan","c":"Armenia","y":39.2011,"x":46.415},{"n":"Pomigliano d'Arco","c":"Italy","y":40.9167,"x":14.4},{"n":"Beverwijk","c":"Netherlands","y":52.4864,"x":4.6572},{"n":"Aldershot","c":"United Kingdom","y":51.248,"x":-0.758},{"n":"Cleethorpes","c":"United Kingdom","y":53.5533,"x":-0.0215},{"n":"Minas","c":"Uruguay","y":-34.3667,"x":-55.2333},{"n":"Mamburao","c":"Philippines","y":13.2233,"x":120.596},{"n":"Leighton Buzzard","c":"United Kingdom","y":51.9165,"x":-0.6617},{"n":"Alajuela","c":"Costa Rica","y":10.0167,"x":-84.2167},{"n":"North Miami Beach","c":"United States","y":25.9302,"x":-80.166},{"n":"Franceville","c":"Gabon","y":-1.6333,"x":13.5833},{"n":"Garbahaarrey","c":"Somalia","y":3.35,"x":42.2667},{"n":"Perote","c":"Mexico","y":19.562,"x":-97.242},{"n":"Annemasse","c":"France","y":46.1958,"x":6.2364},{"n":"Saronno","c":"Italy","y":45.6255,"x":9.037},{"n":"Whitney","c":"United States","y":36.1005,"x":-115.038},{"n":"Freeport","c":"United States","y":40.6515,"x":-73.585},{"n":"Juan Rodriguez Clara","c":"Mexico","y":18,"x":-95.4},{"n":"Dubrovnik","c":"Croatia","y":42.6403,"x":18.1083},{"n":"Blyth","c":"United Kingdom","y":55.126,"x":-1.514},{"n":"San Bruno","c":"United States","y":37.6254,"x":-122.4313},{"n":"Quinhamel","c":"Guinea-Bissau","y":11.8869,"x":-15.8556},{"n":"Franconville","c":"France","y":48.9889,"x":2.2314},{"n":"Hicksville","c":"United States","y":40.7637,"x":-73.5245},{"n":"Silistra","c":"Bulgaria","y":44.1186,"x":27.2603},{"n":"West Babylon","c":"United States","y":40.7112,"x":-73.3567},{"n":"Saint-Martin-d'Heres","c":"France","y":45.1672,"x":5.7653},{"n":"Guarda","c":"Portugal","y":40.5364,"x":-7.2683},{"n":"Si Sa Ket","c":"Thailand","y":15.1072,"x":104.3291},{"n":"Aldridge","c":"United Kingdom","y":52.606,"x":-1.9179},{"n":"Kampot","c":"Cambodia","y":10.6,"x":104.1667},{"n":"Fribourg","c":"Switzerland","y":46.8,"x":7.15},{"n":"Long Eaton","c":"United Kingdom","y":52.898,"x":-1.271},{"n":"La Barca","c":"Mexico","y":20.2903,"x":-102.5456},{"n":"Le Perreux-Sur-Marne","c":"France","y":48.8422,"x":2.5036},{"n":"Arnold","c":"United Kingdom","y":53.005,"x":-1.127},{"n":"Lovech","c":"Bulgaria","y":43.1342,"x":24.7172},{"n":"Miercurea-Ciuc","c":"Romania","y":46.361,"x":25.524},{"n":"Cachan","c":"France","y":48.7919,"x":2.3319},{"n":"Berat","c":"Albania","y":40.7049,"x":19.9497},{"n":"Small Heath","c":"United Kingdom","y":52.4629,"x":-1.8542},{"n":"Myrhorod","c":"Ukraine","y":49.964,"x":33.6124},{"n":"Ardahan","c":"Turkey","y":41.1167,"x":42.7},{"n":"Villafranca del Panades","c":"Spain","y":41.3447,"x":1.6994},{"n":"Dock Sur","c":"Argentina","y":-34.6417,"x":-58.3478},{"n":"Bambari","c":"Central African Republic","y":5.7667,"x":20.6833},{"n":"Blanes","c":"Spain","y":41.674,"x":2.7921},{"n":"Herne Bay","c":"United Kingdom","y":51.37,"x":1.13},{"n":"Aziylal","c":"Morocco","y":31.96,"x":-6.56},{"n":"Nakama","c":"Japan","y":33.8167,"x":130.709},{"n":"Cao Bang","c":"Vietnam","y":22.6731,"x":106.25},{"n":"San Jose","c":"Uruguay","y":-34.3333,"x":-56.7167},{"n":"Aberdare","c":"United Kingdom","y":51.713,"x":-3.445},{"n":"Douai","c":"France","y":50.3714,"x":3.08},{"n":"Daman","c":"India","y":20.417,"x":72.85},{"n":"Bell Gardens","c":"United States","y":33.9663,"x":-118.155},{"n":"Cesano Maderno","c":"Italy","y":45.6272,"x":9.1472},{"n":"Razgrad","c":"Bulgaria","y":43.5267,"x":26.5242},{"n":"Placilla de Penuelas","c":"Chile","y":-33.1156,"x":-71.5678},{"n":"Kahama","c":"Tanzania","y":-3.84,"x":32.6},{"n":"Amudalavalasa","c":"India","y":18.4167,"x":83.9},{"n":"Lindi","c":"Tanzania","y":-9.9969,"x":39.7144},{"n":"Savigny-sur-Orge","c":"France","y":48.6797,"x":2.3457},{"n":"Campbell","c":"United States","y":37.2802,"x":-121.9538},{"n":"Port Talbot","c":"United Kingdom","y":51.5906,"x":-3.7986},{"n":"Puntarenas","c":"Costa Rica","y":9.9764,"x":-84.8339},{"n":"Woonsocket","c":"United States","y":42.001,"x":-71.4993},{"n":"Biougra","c":"Morocco","y":30.2144,"x":-9.3708},{"n":"Xico","c":"Mexico","y":19.417,"x":-97},{"n":"Narathiwat","c":"Thailand","y":6.4264,"x":101.8231},{"n":"Mugnano di Napoli","c":"Italy","y":40.9094,"x":14.2098},{"n":"Sidi Yahia El Gharb","c":"Morocco","y":34.3058,"x":-6.3058},{"n":"Nueva Rosita","c":"Mexico","y":27.939,"x":-101.218},{"n":"Echirolles","c":"France","y":45.1436,"x":5.7183},{"n":"Ciampino","c":"Italy","y":41.8,"x":12.6},{"n":"La Paz","c":"Honduras","y":14.3169,"x":-87.6831},{"n":"Villa Adelina","c":"Argentina","y":-34.5175,"x":-58.5475},{"n":"Morshansk","c":"Russia","y":53.45,"x":41.8},{"n":"Arzano","c":"Italy","y":40.9153,"x":14.2681},{"n":"Palayan City","c":"Philippines","y":15.5333,"x":121.0833},{"n":"Lusambo","c":"Congo (Kinshasa)","y":-4.9696,"x":23.43},{"n":"Salvatierra","c":"Mexico","y":20.2156,"x":-100.8961},{"n":"Marcq-en-Baroeul","c":"France","y":50.6711,"x":3.0972},{"n":"Villarrica","c":"Paraguay","y":-25.75,"x":-56.4333},{"n":"Zacatelco","c":"Mexico","y":19.2167,"x":-98.2333},{"n":"Corsico","c":"Italy","y":45.4333,"x":9.1167},{"n":"Kozani","c":"Greece","y":40.3007,"x":21.789},{"n":"Vredenburg","c":"South Africa","y":-32.9,"x":17.9833},{"n":"Malbork","c":"Poland","y":54.0285,"x":19.0444},{"n":"Wilrijk","c":"Belgium","y":51.1667,"x":4.3833},{"n":"Panaji","c":"India","y":15.48,"x":73.83},{"n":"Greenacres","c":"United States","y":26.6272,"x":-80.1371},{"n":"Le Pre-Saint-Gervais","c":"France","y":48.885,"x":2.4039},{"n":"Hyde","c":"United Kingdom","y":53.4474,"x":-2.082},{"n":"Famagusta","c":"Cyprus","y":35.1167,"x":33.95},{"n":"Puerto Francisco de Orellana","c":"Ecuador","y":-0.4625,"x":-76.9842},{"n":"San Roque","c":"Philippines","y":14.48,"x":120.9011},{"n":"Ngozi","c":"Burundi","y":-2.9,"x":29.8167},{"n":"Burjasot","c":"Spain","y":39.5064,"x":-0.4067},{"n":"Miyoshidai","c":"Japan","y":35.8283,"x":139.5267},{"n":"Chartres","c":"France","y":48.456,"x":1.484},{"n":"Barreiros","c":"Brazil","y":-8.8183,"x":-35.1864},{"n":"Wilkes-Barre","c":"United States","y":41.2468,"x":-75.8759},{"n":"Fleet","c":"United Kingdom","y":51.2834,"x":-0.8456},{"n":"Samkir","c":"Azerbaijan","y":40.8564,"x":46.0172},{"n":"Villefranche-sur-Saone","c":"France","y":45.9833,"x":4.7167},{"n":"Parnu","c":"Estonia","y":58.3844,"x":24.4989},{"n":"Whitley Bay","c":"United Kingdom","y":55.0456,"x":-1.4443},{"n":"Dun Dealgan","c":"Ireland","y":54.009,"x":-6.4049},{"n":"Al Karnak","c":"Egypt","y":25.7184,"x":32.6581},{"n":"Sayula de Aleman","c":"Mexico","y":17.8833,"x":-94.95},{"n":"Bjelovar","c":"Croatia","y":45.8989,"x":16.8422},{"n":"Teaneck","c":"United States","y":40.89,"x":-74.0107},{"n":"Grugliasco","c":"Italy","y":45.0689,"x":7.5786},{"n":"Al Bayda'","c":"Yemen","y":13.979,"x":45.574},{"n":"Villepinte","c":"France","y":48.955,"x":2.541},{"n":"Ez Zahra","c":"Tunisia","y":36.7439,"x":10.3083},{"n":"Yambio","c":"South Sudan","y":4.5705,"x":28.4163},{"n":"Bouar","c":"Central African Republic","y":5.95,"x":15.6},{"n":"Beeston","c":"United Kingdom","y":52.927,"x":-1.215},{"n":"Ban Sai Ma Tai","c":"Thailand","y":13.8444,"x":100.4829},{"n":"Camberley","c":"United Kingdom","y":51.335,"x":-0.742},{"n":"Agualva","c":"Portugal","y":38.77,"x":-9.2988},{"n":"Poissy","c":"France","y":48.9294,"x":2.0456},{"n":"Mariano Escobedo","c":"Mexico","y":18.9167,"x":-97.1333},{"n":"Neuilly-sur-Marne","c":"France","y":48.8537,"x":2.549},{"n":"Kaya","c":"Burkina Faso","y":13.0833,"x":-1.0833},{"n":"Inongo","c":"Congo (Kinshasa)","y":-1.94,"x":18.28},{"n":"Kanie","c":"Japan","y":35.1322,"x":136.7869},{"n":"Sainte-Genevieve-des-Bois","c":"France","y":48.6369,"x":2.3403},{"n":"Montclair","c":"United States","y":34.0714,"x":-117.698},{"n":"Retalhuleu","c":"Guatemala","y":14.5333,"x":-91.6833},{"n":"Decan","c":"Kosovo","y":42.5333,"x":20.2833},{"n":"Dunstable","c":"United Kingdom","y":51.886,"x":-0.521},{"n":"Xacmaz","c":"Azerbaijan","y":41.4681,"x":48.8028},{"n":"Chachoengsao","c":"Thailand","y":13.6903,"x":101.0703},{"n":"Bletchley","c":"United Kingdom","y":51.994,"x":-0.732},{"n":"Baler","c":"Philippines","y":15.7583,"x":121.5625},{"n":"Denton","c":"United Kingdom","y":53.4554,"x":-2.1122},{"n":"Surin","c":"Thailand","y":14.8864,"x":103.4932},{"n":"San Gabriel","c":"United States","y":34.0948,"x":-118.099},{"n":"Koumra","c":"Chad","y":8.9,"x":17.55},{"n":"North Shields","c":"United Kingdom","y":55.0097,"x":-1.4448},{"n":"Hallandale Beach","c":"United States","y":25.9854,"x":-80.1423},{"n":"Massawa","c":"Eritrea","y":15.6,"x":39.4333},{"n":"Pont-y-pwl","c":"United Kingdom","y":51.703,"x":-3.041},{"n":"San Juan Despi","c":"Spain","y":41.3668,"x":2.057},{"n":"Kenton","c":"United Kingdom","y":51.5878,"x":-0.3086},{"n":"Santa Elena","c":"Ecuador","y":-2.2267,"x":-80.8583},{"n":"Pioltello","c":"Italy","y":45.5,"x":9.3333},{"n":"Keizer","c":"United States","y":45.0029,"x":-123.0241},{"n":"Mochudi","c":"Botswana","y":-24.4167,"x":26.15},{"n":"Vernier","c":"Switzerland","y":46.2,"x":6.1},{"n":"Chelsea","c":"United States","y":42.3959,"x":-71.0325},{"n":"Bridlington","c":"United Kingdom","y":54.0819,"x":-0.1923},{"n":"Sant'Antimo","c":"Italy","y":40.9422,"x":14.2348},{"n":"Sopot","c":"Poland","y":54.4419,"x":18.5478},{"n":"La Puente","c":"United States","y":34.0323,"x":-117.9533},{"n":"Celje","c":"Slovenia","y":46.2291,"x":15.2641},{"n":"Houilles","c":"France","y":48.9261,"x":2.1892},{"n":"Waipahu","c":"United States","y":21.3858,"x":-158.0103},{"n":"Conflans-Sainte-Honorine","c":"France","y":48.9992,"x":2.0983},{"n":"Florida","c":"Uruguay","y":-34.1,"x":-56.2167},{"n":"Pierrefitte-sur-Seine","c":"France","y":48.9656,"x":2.3614},{"n":"Istog","c":"Kosovo","y":42.7833,"x":20.4833},{"n":"Agcabadi","c":"Azerbaijan","y":40.0489,"x":47.4502},{"n":"Bollate","c":"Italy","y":45.55,"x":9.1167},{"n":"L'Hay-les-Roses","c":"France","y":48.78,"x":2.3374},{"n":"Annapolis","c":"United States","y":38.9706,"x":-76.5047},{"n":"Romblon","c":"Philippines","y":12.5789,"x":122.2747},{"n":"Culver City","c":"United States","y":34.0058,"x":-118.3968},{"n":"Walkden","c":"United Kingdom","y":53.5239,"x":-2.3991},{"n":"Mambajao","c":"Philippines","y":9.25,"x":124.7167},{"n":"Durazno","c":"Uruguay","y":-33.3833,"x":-56.5167},{"n":"Sao Francisco do Sul","c":"Brazil","y":-26.2433,"x":-48.6381},{"n":"Panuco","c":"Mexico","y":22.05,"x":-98.1833},{"n":"Nueva Italia de Ruiz","c":"Mexico","y":19.0194,"x":-102.1089},{"n":"Xam Nua","c":"Laos","y":20.4133,"x":104.048},{"n":"Tromso","c":"Norway","y":69.6546,"x":18.9637},{"n":"Januaria","c":"Brazil","y":-15.4886,"x":-44.36},{"n":"Koekelberg","c":"Belgium","y":50.8606,"x":4.3317},{"n":"Creil","c":"France","y":49.2583,"x":2.4833},{"n":"Northolt","c":"United Kingdom","y":51.547,"x":-0.362},{"n":"Dedougou","c":"Burkina Faso","y":12.4667,"x":-3.4667},{"n":"Frankfort","c":"United States","y":38.1924,"x":-84.8643},{"n":"Armavir","c":"Armenia","y":40.15,"x":44.04},{"n":"Ayutuxtepeque","c":"El Salvador","y":13.7357,"x":-89.2008},{"n":"Northglenn","c":"United States","y":39.9108,"x":-104.9783},{"n":"Kavadarci","c":"Macedonia","y":41.4328,"x":22.0117},{"n":"Vrilissia","c":"Greece","y":38.0391,"x":23.8378},{"n":"Miahuatlan de Porfirio Diaz","c":"Mexico","y":16.3283,"x":-96.5961},{"n":"Barda","c":"Azerbaijan","y":40.3831,"x":47.1186},{"n":"Ha Giang","c":"Vietnam","y":22.8233,"x":104.9836},{"n":"Chatenay-Malabry","c":"France","y":48.7653,"x":2.2781},{"n":"Tuyen Quang","c":"Vietnam","y":21.8281,"x":105.2156},{"n":"El Hajeb","c":"Morocco","y":33.6928,"x":-5.3711},{"n":"Karonga","c":"Malawi","y":-9.9329,"x":33.9333},{"n":"Palaiseau","c":"France","y":48.7145,"x":2.2457},{"n":"Fort Lee","c":"United States","y":40.8509,"x":-73.9712},{"n":"Casalecchio di Reno","c":"Italy","y":44.4833,"x":11.2833},{"n":"Highbury","c":"United Kingdom","y":51.552,"x":-0.097},{"n":"Zinacantan","c":"Mexico","y":16.7597,"x":-92.7222},{"n":"Premia de Mar","c":"Spain","y":41.492,"x":2.362},{"n":"Ewell","c":"United Kingdom","y":51.35,"x":-0.249},{"n":"Tunceli","c":"Turkey","y":39.1061,"x":39.5481},{"n":"Les Lilas","c":"France","y":48.88,"x":2.42},{"n":"Lake Worth","c":"United States","y":26.6196,"x":-80.0591},{"n":"Wisbech","c":"United Kingdom","y":52.664,"x":0.16},{"n":"Bossangoa","c":"Central African Republic","y":6.4833,"x":17.45},{"n":"Kline","c":"Kosovo","y":42.6217,"x":20.5778},{"n":"Tit Mellil","c":"Morocco","y":33.5581,"x":-7.4858},{"n":"Riacho de Santana","c":"Brazil","y":-13.6089,"x":-42.9389},{"n":"Bucha","c":"Ukraine","y":50.5464,"x":30.235},{"n":"Chorley","c":"United Kingdom","y":53.653,"x":-2.632},{"n":"Zaio","c":"Morocco","y":34.9396,"x":-2.7334},{"n":"Athis-Mons","c":"France","y":48.7074,"x":2.3889},{"n":"Kendall West","c":"United States","y":25.7065,"x":-80.4388},{"n":"Falkirk","c":"United Kingdom","y":56.0011,"x":-3.7835},{"n":"Jacarezinho","c":"Brazil","y":-23.1606,"x":-49.9694},{"n":"Zeghanghane","c":"Morocco","y":35.1575,"x":-3.0017},{"n":"Hanwell","c":"United Kingdom","y":51.5189,"x":-0.3376},{"n":"Jimenez","c":"Mexico","y":27.13,"x":-104.9067},{"n":"Tuxpan","c":"Mexico","y":21.8667,"x":-105.45},{"n":"Choybalsan","c":"Mongolia","y":48.0706,"x":114.5228},{"n":"Am-Timan","c":"Chad","y":11.0333,"x":20.2833},{"n":"Tenkodogo","c":"Burkina Faso","y":11.7833,"x":-0.3667},{"n":"La Presa","c":"United States","y":32.711,"x":-117.0027},{"n":"Massama","c":"Portugal","y":38.7568,"x":-9.2748},{"n":"Brugherio","c":"Italy","y":45.5508,"x":9.3011},{"n":"Macuspana","c":"Mexico","y":17.7667,"x":-92.6},{"n":"Stanton","c":"United States","y":33.8002,"x":-117.9935},{"n":"Shangzhuangcun","c":"China","y":23.5226,"x":116.7134},{"n":"Brzeg","c":"Poland","y":50.8667,"x":17.4833},{"n":"Redcar","c":"United Kingdom","y":54.618,"x":-1.069},{"n":"Kikinda","c":"Serbia","y":45.8244,"x":20.4592},{"n":"Tomatlan","c":"Mexico","y":19.9333,"x":-105.2333},{"n":"East Meadow","c":"United States","y":40.7197,"x":-73.5604},{"n":"Paphos","c":"Cyprus","y":34.7761,"x":32.4265},{"n":"Limbiate","c":"Italy","y":45.5972,"x":9.13},{"n":"Ali Sabieh","c":"Djibouti","y":11.1558,"x":42.7125},{"n":"Mission Bend","c":"United States","y":29.6948,"x":-95.6657},{"n":"Adjumani","c":"Uganda","y":3.3614,"x":31.8097},{"n":"Gisborne","c":"New Zealand","y":-38.6625,"x":178.0178},{"n":"Spalding","c":"United Kingdom","y":52.7858,"x":-0.1529},{"n":"Mediouna","c":"Morocco","y":33.45,"x":-7.51},{"n":"Dori","c":"Burkina Faso","y":14.05,"x":0.05},{"n":"Yihezhuang","c":"China","y":39.1373,"x":116.0744},{"n":"Capitao Poco","c":"Brazil","y":-1.7464,"x":-47.0594},{"n":"Esch-sur-Alzette","c":"Luxembourg","y":49.4969,"x":5.9806},{"n":"Frattamaggiore","c":"Italy","y":40.9417,"x":14.2722},{"n":"Le Plessis-Robinson","c":"France","y":48.7811,"x":2.2633},{"n":"Egypt Lake-Leto","c":"United States","y":28.0177,"x":-82.5062},{"n":"Escuinapa","c":"Mexico","y":22.9822,"x":-105.7031},{"n":"Kajaani","c":"Finland","y":64.225,"x":27.7333},{"n":"Salto del Guaira","c":"Paraguay","y":-24.02,"x":-54.34},{"n":"Samrong","c":"Thailand","y":13.6421,"x":100.6039},{"n":"Segrate","c":"Italy","y":45.49,"x":9.2953},{"n":"Villeneuve-Saint-Georges","c":"France","y":48.7325,"x":2.4497},{"n":"Richmond West","c":"United States","y":25.6105,"x":-80.4297},{"n":"Schaffhausen","c":"Switzerland","y":47.6965,"x":8.6339},{"n":"Valley Stream","c":"United States","y":40.6647,"x":-73.7044},{"n":"Hanover Park","c":"United States","y":41.9819,"x":-88.1447},{"n":"Tozeur","c":"Tunisia","y":33.9197,"x":8.1336},{"n":"Villemomble","c":"France","y":48.8833,"x":2.5},{"n":"Hitchin","c":"United Kingdom","y":51.947,"x":-0.283},{"n":"Nanchital de Lazaro Cardenas del Rio","c":"Mexico","y":18.0667,"x":-94.4167},{"n":"`Ataq","c":"Yemen","y":14.55,"x":46.8},{"n":"Strood","c":"United Kingdom","y":51.393,"x":0.478},{"n":"Soteapan","c":"Mexico","y":18.2333,"x":-94.8667},{"n":"Santa Maria Atzompa","c":"Mexico","y":17.0794,"x":-96.7869},{"n":"South Miami Heights","c":"United States","y":25.5886,"x":-80.3862},{"n":"Prijepolje","c":"Serbia","y":43.5439,"x":19.6514},{"n":"Al Qunaytirah","c":"Syria","y":33.1256,"x":35.8239},{"n":"Chaiyaphum","c":"Thailand","y":15.8056,"x":102.0311},{"n":"Salt","c":"Spain","y":41.9761,"x":2.7881},{"n":"Riccione Marina","c":"Italy","y":44,"x":12.65},{"n":"Swords","c":"Ireland","y":53.4597,"x":-6.2181},{"n":"Aventura","c":"United States","y":25.9565,"x":-80.1372},{"n":"Park Ridge","c":"United States","y":42.0125,"x":-87.8436},{"n":"Thonon-les-Bains","c":"France","y":46.3627,"x":6.475},{"n":"Tenosique","c":"Mexico","y":17.4756,"x":-91.4225},{"n":"Cernusco sul Naviglio","c":"Italy","y":45.5167,"x":9.3333},{"n":"Putla Villa de Guerrero","c":"Mexico","y":17.0321,"x":-97.9293},{"n":"Saint-Mande","c":"France","y":48.8422,"x":2.4186},{"n":"Falun","c":"Sweden","y":60.613,"x":15.647},{"n":"Letchworth","c":"United Kingdom","y":51.978,"x":-0.23},{"n":"Santa Isabel","c":"Mexico","y":32.6314,"x":-115.5756},{"n":"Ratchaburi","c":"Thailand","y":13.5367,"x":99.8169},{"n":"Wigston Magna","c":"United Kingdom","y":52.5812,"x":-1.093},{"n":"Bezons","c":"France","y":48.9261,"x":2.2178},{"n":"Clichy-sous-Bois","c":"France","y":48.9102,"x":2.5532},{"n":"Pinner","c":"United Kingdom","y":51.5932,"x":-0.3894},{"n":"Karlskrona","c":"Sweden","y":56.1611,"x":15.5881},{"n":"Ticul","c":"Mexico","y":20.3953,"x":-89.5339},{"n":"Angri","c":"Italy","y":40.7431,"x":14.5694},{"n":"Calpulalpan","c":"Mexico","y":19.5869,"x":-98.5683},{"n":"Ebebiyin","c":"Equatorial Guinea","y":2.15,"x":11.3167},{"n":"Trowbridge","c":"United Kingdom","y":51.32,"x":-2.21},{"n":"Czeladz","c":"Poland","y":50.3333,"x":19.0833},{"n":"Rayleigh","c":"United Kingdom","y":51.5864,"x":0.6049},{"n":"Roanne","c":"France","y":46.0367,"x":4.0689},{"n":"West Hollywood","c":"United States","y":34.0882,"x":-118.3718},{"n":"Earley","c":"United Kingdom","y":51.433,"x":-0.933},{"n":"Paso de Ovejas","c":"Mexico","y":19.285,"x":-96.44},{"n":"Agen","c":"France","y":44.2049,"x":0.6212},{"n":"Bicester","c":"United Kingdom","y":51.9,"x":-1.15},{"n":"Abasolo","c":"Mexico","y":20.4511,"x":-101.5289},{"n":"Paso del Macho","c":"Mexico","y":18.9667,"x":-96.7167},{"n":"Jordan","c":"Philippines","y":10.6,"x":122.6},{"n":"Goba","c":"Ethiopia","y":7.01,"x":39.97},{"n":"Goycay","c":"Azerbaijan","y":40.6553,"x":47.7389},{"n":"Richfield","c":"United States","y":44.8762,"x":-93.2833},{"n":"Rutherglen","c":"United Kingdom","y":55.8286,"x":-4.2139},{"n":"Campo Maior","c":"Brazil","y":-4.8278,"x":-42.1686},{"n":"Kearns","c":"United States","y":40.652,"x":-112.0093},{"n":"Lincoln Park","c":"United States","y":42.2432,"x":-83.1811},{"n":"Chur","c":"Switzerland","y":46.8521,"x":9.5297},{"n":"Yehud","c":"Israel","y":32.0333,"x":34.8833},{"n":"Ryde","c":"United Kingdom","y":50.7271,"x":-1.1618},{"n":"Amecameca de Juarez","c":"Mexico","y":19.1238,"x":-98.7665},{"n":"Schiltigheim","c":"France","y":48.6078,"x":7.75},{"n":"Lichfield","c":"United Kingdom","y":52.6835,"x":-1.8265},{"n":"Chatou","c":"France","y":48.8897,"x":2.1573},{"n":"Ecclesfield","c":"United Kingdom","y":53.4429,"x":-1.4698},{"n":"Ometepec","c":"Mexico","y":16.6833,"x":-98.4167},{"n":"Lauderdale Lakes","c":"United States","y":26.1682,"x":-80.2017},{"n":"Belleville","c":"United States","y":40.795,"x":-74.1616},{"n":"Pontypridd","c":"United Kingdom","y":51.602,"x":-3.342},{"n":"Krong Kep","c":"Cambodia","y":10.4828,"x":104.3167},{"n":"Viry-Chatillon","c":"France","y":48.6713,"x":2.375},{"n":"Kornwestheim","c":"Germany","y":48.8597,"x":9.185},{"n":"Minamishiro","c":"Japan","y":36.0225,"x":139.7228},{"n":"Prestwich","c":"United Kingdom","y":53.5333,"x":-2.2833},{"n":"Kamenice","c":"Kosovo","y":42.5839,"x":21.575},{"n":"Ermont","c":"France","y":48.9922,"x":2.2603},{"n":"Viborg","c":"Denmark","y":56.4333,"x":9.4},{"n":"San Juan Evangelista","c":"Mexico","y":17.8833,"x":-95.1333},{"n":"Gostivar","c":"Macedonia","y":41.8,"x":20.9167},{"n":"Chirivella","c":"Spain","y":39.4656,"x":-0.4267},{"n":"Watertown Town","c":"United States","y":42.37,"x":-71.1774},{"n":"Beja","c":"Portugal","y":38.0333,"x":-7.8833},{"n":"Foothill Farms","c":"United States","y":38.6867,"x":-121.3475},{"n":"Vrsac","c":"Serbia","y":45.1206,"x":21.2986},{"n":"Paranaiba","c":"Brazil","y":-19.6772,"x":-51.1908},{"n":"Maassluis","c":"Netherlands","y":51.9189,"x":4.2567},{"n":"Romainville","c":"France","y":48.884,"x":2.435},{"n":"Elmont","c":"United States","y":40.7033,"x":-73.7078},{"n":"Brighouse","c":"United Kingdom","y":53.707,"x":-1.794},{"n":"Temple City","c":"United States","y":34.1021,"x":-118.0579},{"n":"Farnworth","c":"United Kingdom","y":53.5452,"x":-2.3999},{"n":"Villaricca","c":"Italy","y":40.9167,"x":14.2},{"n":"La Asuncion","c":"Venezuela","y":11.0333,"x":-63.8833},{"n":"Cradock","c":"South Africa","y":-32.1833,"x":25.6167},{"n":"Stroud","c":"United Kingdom","y":51.744,"x":-2.215},{"n":"Darwen","c":"United Kingdom","y":53.698,"x":-2.461},{"n":"Chuhuiv","c":"Ukraine","y":49.8353,"x":36.6756},{"n":"Fresnes","c":"France","y":48.755,"x":2.3221},{"n":"Montigny-le-Bretonneux","c":"France","y":48.7711,"x":2.0333},{"n":"Ixtapan de la Sal","c":"Mexico","y":18.8333,"x":-99.6833},{"n":"Aosta","c":"Italy","y":45.7372,"x":7.3206},{"n":"Tancitaro","c":"Mexico","y":19.3378,"x":-102.363},{"n":"Ganshoren","c":"Belgium","y":50.8703,"x":4.3078},{"n":"Dover","c":"United Kingdom","y":51.1295,"x":1.3089},{"n":"Timbuktu","c":"Mali","y":16.7733,"x":-2.9994},{"n":"Chillum","c":"United States","y":38.9667,"x":-76.979},{"n":"Bexleyheath","c":"United Kingdom","y":51.459,"x":0.138},{"n":"Les Mureaux","c":"France","y":48.9875,"x":1.9172},{"n":"Byumba","c":"Rwanda","y":-1.5794,"x":30.0694},{"n":"Bell","c":"United States","y":33.9801,"x":-118.1798},{"n":"Taibao","c":"Taiwan","y":23.45,"x":120.3333},{"n":"Roi Et","c":"Thailand","y":16.0533,"x":103.6513},{"n":"Villanueva","c":"Mexico","y":22.3536,"x":-102.8831},{"n":"Talas","c":"Kyrgyzstan","y":42.5184,"x":72.2429},{"n":"Champoton","c":"Mexico","y":19.35,"x":-90.7167},{"n":"Nelson","c":"United Kingdom","y":53.8346,"x":-2.218},{"n":"Braganca","c":"Portugal","y":41.8,"x":-6.75},{"n":"Phatthalung","c":"Thailand","y":7.6178,"x":100.0778},{"n":"Neuchatel","c":"Switzerland","y":46.9903,"x":6.9306},{"n":"Huyton","c":"United Kingdom","y":53.41,"x":-2.843},{"n":"Sestao","c":"Spain","y":43.3108,"x":-3.0056},{"n":"Santa Cruz del Quiche","c":"Guatemala","y":15.05,"x":-91.25},{"n":"Westmont","c":"United States","y":33.9417,"x":-118.3018},{"n":"Luebo","c":"Congo (Kinshasa)","y":-5.3495,"x":21.41},{"n":"Bria","c":"Central African Republic","y":6.5369,"x":21.9919},{"n":"San Donato Milanese","c":"Italy","y":45.4167,"x":9.2667},{"n":"Nea Filadelfeia","c":"Greece","y":38.035,"x":23.7381},{"n":"Manhattan Beach","c":"United States","y":33.8895,"x":-118.3972},{"n":"Pontoise","c":"France","y":49.0516,"x":2.1017},{"n":"Vigneux-sur-Seine","c":"France","y":48.7001,"x":2.417},{"n":"Artvin","c":"Turkey","y":41.1822,"x":41.8194},{"n":"Maidan Shahr","c":"Afghanistan","y":34.3972,"x":68.8697},{"n":"Giv`at Shemu'el","c":"Israel","y":32.0781,"x":34.8489},{"n":"Bussum","c":"Netherlands","y":52.2733,"x":5.1611},{"n":"Catemaco","c":"Mexico","y":18.4167,"x":-95.1167},{"n":"Villiers-sur-Marne","c":"France","y":48.8275,"x":2.5447},{"n":"Marijampole","c":"Lithuania","y":54.5567,"x":23.3544},{"n":"San Pedro de Ycuamandiyu","c":"Paraguay","y":-24.1,"x":-57.0833},{"n":"Dikhil","c":"Djibouti","y":11.1086,"x":42.3667},{"n":"Ocotal","c":"Nicaragua","y":13.6333,"x":-86.4833},{"n":"Trappes","c":"France","y":48.7775,"x":2.0025},{"n":"Santa Maria Capua Vetere","c":"Italy","y":41.0833,"x":14.25},{"n":"Englewood","c":"United States","y":39.6468,"x":-104.9942},{"n":"Mechraa Bel Ksiri","c":"Morocco","y":34.5787,"x":-5.963},{"n":"Kampong Thom","c":"Cambodia","y":12.7111,"x":104.8886},{"n":"San Salvador El Seco","c":"Mexico","y":19.1333,"x":-97.65},{"n":"Dragash","c":"Kosovo","y":42.0611,"x":20.6528},{"n":"Naryn","c":"Kyrgyzstan","y":41.4333,"x":76},{"n":"Beidaying","c":"China","y":39.9686,"x":119.5515},{"n":"Lahij","c":"Yemen","y":13.05,"x":44.8833},{"n":"Buenaventura Lakes","c":"United States","y":28.3349,"x":-81.3539},{"n":"Oildale","c":"United States","y":35.4249,"x":-119.0279},{"n":"Pompeu","c":"Brazil","y":-19.2239,"x":-44.935},{"n":"Ciudad Sabinas Hidalgo","c":"Mexico","y":26.5,"x":-100.1833},{"n":"Fontenay-aux-Roses","c":"France","y":48.7893,"x":2.2888},{"n":"Kalasin","c":"Thailand","y":16.4333,"x":103.5},{"n":"Saint Neots","c":"United Kingdom","y":52.228,"x":-0.27},{"n":"Villa Celina","c":"Argentina","y":-34.7006,"x":-58.4825},{"n":"Grigny","c":"France","y":48.6562,"x":2.3849},{"n":"Jacmel","c":"Haiti","y":18.235,"x":-72.537},{"n":"Swakopmund","c":"Namibia","y":-22.6667,"x":14.5333},{"n":"Barra do Bugres","c":"Brazil","y":-15.0725,"x":-57.1811},{"n":"Azogues","c":"Ecuador","y":-2.7333,"x":-78.8333},{"n":"Huatabampo","c":"Mexico","y":26.8304,"x":-109.63},{"n":"Gentilly","c":"France","y":48.8133,"x":2.3444},{"n":"Escarcega","c":"Mexico","y":18.6067,"x":-90.7344},{"n":"Norristown","c":"United States","y":40.1224,"x":-75.3398},{"n":"Montgomery Village","c":"United States","y":39.1783,"x":-77.1957},{"n":"Swadlincote","c":"United Kingdom","y":52.774,"x":-1.557},{"n":"Wishaw","c":"United Kingdom","y":55.7739,"x":-3.9189},{"n":"Deal","c":"United Kingdom","y":51.2226,"x":1.4006},{"n":"Cananea","c":"Mexico","y":30.9819,"x":-110.3006},{"n":"Homa Bay","c":"Kenya","y":-0.5167,"x":34.45},{"n":"Aldaya","c":"Spain","y":39.4639,"x":-0.4628},{"n":"Le Chesnay","c":"France","y":48.8203,"x":2.1303},{"n":"Bor","c":"Serbia","y":44.1303,"x":22.1036},{"n":"Busia","c":"Kenya","y":0.4608,"x":34.1108},{"n":"University City","c":"United States","y":38.6657,"x":-90.3315},{"n":"Borehamwood","c":"United Kingdom","y":51.6578,"x":-0.2723},{"n":"Fushe Kosove","c":"Kosovo","y":42.63,"x":21.12},{"n":"Midvale","c":"United States","y":40.6148,"x":-111.8928},{"n":"Lens","c":"France","y":50.4322,"x":2.8333},{"n":"Uttaradit","c":"Thailand","y":17.6256,"x":100.0942},{"n":"Golden Glades","c":"United States","y":25.9129,"x":-80.2013},{"n":"Nykoping","c":"Sweden","y":58.7582,"x":17.0185},{"n":"Kakata","c":"Liberia","y":6.53,"x":-10.3517},{"n":"Bresso","c":"Italy","y":45.5333,"x":9.1833},{"n":"Ventspils","c":"Latvia","y":57.3897,"x":21.5644},{"n":"Chester","c":"United States","y":39.8456,"x":-75.3718},{"n":"Kampong Speu","c":"Cambodia","y":11.452,"x":104.519},{"n":"Zhaoyu","c":"China","y":37.3512,"x":112.3193},{"n":"Fada Ngourma","c":"Burkina Faso","y":12.05,"x":0.3667},{"n":"Saint-Cloud","c":"France","y":48.84,"x":2.22},{"n":"Barros Blancos","c":"Uruguay","y":-34.7542,"x":-56.0042},{"n":"Salgotarjan","c":"Hungary","y":48.0853,"x":19.7867},{"n":"Foster City","c":"United States","y":37.5553,"x":-122.2659},{"n":"San Giuseppe Vesuviano","c":"Italy","y":40.8333,"x":14.5},{"n":"Pontefract","c":"United Kingdom","y":53.691,"x":-1.312},{"n":"Beverly Hills","c":"United States","y":34.0786,"x":-118.4021},{"n":"Ciudad Sahagun","c":"Mexico","y":19.7714,"x":-98.5803},{"n":"Sidi Smai'il","c":"Morocco","y":32.8167,"x":-8.5},{"n":"Willenhall","c":"United Kingdom","y":52.5798,"x":-2.0605},{"n":"Chumphon","c":"Thailand","y":10.4939,"x":99.18},{"n":"Masindi","c":"Uganda","y":1.6744,"x":31.715},{"n":"Thiais","c":"France","y":48.765,"x":2.3923},{"n":"Glendale Heights","c":"United States","y":41.9196,"x":-88.0785},{"n":"Bilwi","c":"Nicaragua","y":14.05,"x":-83.3833},{"n":"Hendrik-Ido-Ambacht","c":"Netherlands","y":51.85,"x":4.63},{"n":"Fair Oaks","c":"United States","y":38.8653,"x":-77.3586},{"n":"Kacanik","c":"Kosovo","y":42.2467,"x":21.2553},{"n":"Longton","c":"United Kingdom","y":52.9877,"x":-2.1327},{"n":"Plympton","c":"United Kingdom","y":50.386,"x":-4.051},{"n":"Sisak","c":"Croatia","y":45.4872,"x":16.3761},{"n":"Birkirkara","c":"Malta","y":35.9,"x":14.4667},{"n":"Koh Kong","c":"Cambodia","y":11.6167,"x":102.9833},{"n":"Paiporta","c":"Spain","y":39.4278,"x":-0.4183},{"n":"Kyrenia","c":"Cyprus","y":35.3403,"x":33.3192},{"n":"Goussainville","c":"France","y":49.0325,"x":2.4747},{"n":"Juticalpa","c":"Honduras","y":14.6664,"x":-86.2186},{"n":"Bromsgrove","c":"United Kingdom","y":52.3353,"x":-2.0579},{"n":"Mukdahan","c":"Thailand","y":16.5431,"x":104.7228},{"n":"Adrogue","c":"Argentina","y":-34.8,"x":-58.3833},{"n":"Vandoeuvre-les-Nancy","c":"France","y":48.6567,"x":6.1683},{"n":"Lievin","c":"France","y":50.4228,"x":2.7786},{"n":"Bulwell","c":"United Kingdom","y":53.001,"x":-1.197},{"n":"Perigueux","c":"France","y":45.1929,"x":0.7217},{"n":"Rincon de Romos","c":"Mexico","y":22.2333,"x":-102.3167},{"n":"Kericho","c":"Kenya","y":-0.3692,"x":35.2839},{"n":"Eastchester","c":"United States","y":40.9536,"x":-73.8134},{"n":"Pilar","c":"Paraguay","y":-26.8569,"x":-58.3039},{"n":"Dagestanskiye Ogni","c":"Russia","y":42.1167,"x":48.2},{"n":"Kokhma","c":"Russia","y":56.9333,"x":41.0833},{"n":"Reddish","c":"United Kingdom","y":53.4383,"x":-2.1613},{"n":"West Little River","c":"United States","y":25.857,"x":-80.2367},{"n":"Fair Lawn","c":"United States","y":40.9359,"x":-74.1177},{"n":"Sint-Joost-ten-Node","c":"Belgium","y":50.8508,"x":4.3692},{"n":"Zumpango del Rio","c":"Mexico","y":17.65,"x":-99.5},{"n":"Durango","c":"Spain","y":43.1689,"x":-2.63},{"n":"Aci Catena","c":"Italy","y":37.6,"x":15.15},{"n":"Huntington Station","c":"United States","y":40.8446,"x":-73.405},{"n":"Sotteville-les-Rouen","c":"France","y":49.4092,"x":1.09},{"n":"Chkalov","c":"Tajikistan","y":40.2386,"x":69.6967},{"n":"Un'goofaaru","c":"Maldives","y":5.6681,"x":73.0302},{"n":"Harper","c":"Liberia","y":4.3754,"x":-7.717},{"n":"Santiago Sacatepequez","c":"Guatemala","y":14.653,"x":-90.6524},{"n":"Cramlington","c":"United Kingdom","y":55.082,"x":-1.585},{"n":"Krimpen aan den IJssel","c":"Netherlands","y":51.92,"x":4.6},{"n":"Ris-Orangis","c":"France","y":48.6537,"x":2.4161},{"n":"Ban Bang Krang","c":"Thailand","y":13.8442,"x":100.4612},{"n":"San Andres de la Barca","c":"Spain","y":41.4478,"x":1.9769},{"n":"North Providence","c":"United States","y":41.8616,"x":-71.4575},{"n":"Mazeikiai","c":"Lithuania","y":56.3111,"x":22.3361},{"n":"Savigny-le-Temple","c":"France","y":48.5841,"x":2.5832},{"n":"Soledad de Doblado","c":"Mexico","y":19.0447,"x":-96.4233},{"n":"Kendal","c":"United Kingdom","y":54.326,"x":-2.745},{"n":"Leticia","c":"Colombia","y":-4.215,"x":-69.9411},{"n":"Cote-Saint-Luc","c":"Canada","y":45.4687,"x":-73.6673},{"n":"Perry Barr","c":"United Kingdom","y":52.5249,"x":-1.9042},{"n":"Mandera","c":"Kenya","y":3.9167,"x":41.8333},{"n":"Lawndale","c":"United States","y":33.8884,"x":-118.3531},{"n":"Yverdon-les-Bains","c":"Switzerland","y":46.7785,"x":6.6408},{"n":"Oullins","c":"France","y":45.715,"x":4.8083},{"n":"Bou Arfa","c":"Morocco","y":32.531,"x":-1.9631},{"n":"Kitui","c":"Kenya","y":-1.3667,"x":38.0167},{"n":"Mount Lebanon","c":"United States","y":40.3752,"x":-80.0493},{"n":"Otumba","c":"Mexico","y":19.6969,"x":-98.7547},{"n":"Bangassou","c":"Central African Republic","y":4.737,"x":22.819},{"n":"Cambuslang","c":"United Kingdom","y":55.819,"x":-4.1671},{"n":"Chachapoyas","c":"Peru","y":-6.2167,"x":-77.85},{"n":"Darlaston","c":"United Kingdom","y":52.5708,"x":-2.0457},{"n":"Baranain","c":"Spain","y":42.8,"x":-1.6667},{"n":"West Ham","c":"United Kingdom","y":51.5347,"x":0.0077},{"n":"Sannois","c":"France","y":48.9722,"x":2.2578},{"n":"Aix-les-Bains","c":"France","y":45.6885,"x":5.9153},{"n":"Les Pavillons-sous-Bois","c":"France","y":48.9,"x":2.5},{"n":"College Park","c":"United States","y":38.996,"x":-76.9337},{"n":"Arfoud","c":"Morocco","y":31.4361,"x":-4.2328},{"n":"Rumbek","c":"South Sudan","y":6.8,"x":29.6833},{"n":"Szekszard","c":"Hungary","y":46.3558,"x":18.7039},{"n":"Rillieux-la-Pape","c":"France","y":45.8214,"x":4.8983},{"n":"Boende","c":"Congo (Kinshasa)","y":-0.2196,"x":20.86},{"n":"Alamo","c":"Mexico","y":20.9167,"x":-97.675},{"n":"Lambersart","c":"France","y":50.65,"x":3.025},{"n":"Eastpointe","c":"United States","y":42.4657,"x":-82.9461},{"n":"Franklin Square","c":"United States","y":40.7002,"x":-73.6775},{"n":"Yerres","c":"France","y":48.7171,"x":2.4881},{"n":"Uniondale","c":"United States","y":40.7176,"x":-73.5947},{"n":"Juneau","c":"United States","y":58.4546,"x":-134.1739},{"n":"Ulundi","c":"South Africa","y":-28.335,"x":31.4161},{"n":"Molde","c":"Norway","y":62.7333,"x":7.1833},{"n":"Zug","c":"Switzerland","y":47.1681,"x":8.5169},{"n":"Kaita","c":"Japan","y":34.3722,"x":132.5361},{"n":"San Juan","c":"Costa Rica","y":9.9609,"x":-84.0731},{"n":"Cuitzeo del Porvenir","c":"Mexico","y":19.9686,"x":-101.1394},{"n":"Demnat","c":"Morocco","y":31.7311,"x":-7.0361},{"n":"Navolato","c":"Mexico","y":24.7656,"x":-107.7019},{"n":"Bourg-la-Reine","c":"France","y":48.7796,"x":2.3151},{"n":"Jeremie","c":"Haiti","y":18.6339,"x":-74.1184},{"n":"Rawson","c":"Argentina","y":-43.3,"x":-65.1},{"n":"Garfield","c":"United States","y":40.8791,"x":-74.1085},{"n":"El Salto","c":"Mexico","y":23.7823,"x":-105.3585},{"n":"Gizycko","c":"Poland","y":54.04,"x":21.7589},{"n":"Shumerlya","c":"Russia","y":55.5,"x":46.4167},{"n":"Montfermeil","c":"France","y":48.9,"x":2.5667},{"n":"Shariff Aguak","c":"Philippines","y":6.8647,"x":124.4417},{"n":"Clifton","c":"United Kingdom","y":52.904,"x":-1.177},{"n":"Babati","c":"Tanzania","y":-4.2117,"x":35.7475},{"n":"Wood Green","c":"United Kingdom","y":51.5981,"x":-0.1149},{"n":"Chon Buri","c":"Thailand","y":13.3611,"x":100.985},{"n":"Frome","c":"United Kingdom","y":51.2279,"x":-2.3215},{"n":"Smolyan","c":"Bulgaria","y":41.5753,"x":24.7128},{"n":"Begles","c":"France","y":44.8086,"x":-0.5478},{"n":"Pallisa","c":"Uganda","y":1.145,"x":33.7094},{"n":"Dieppe","c":"France","y":49.92,"x":1.08},{"n":"Villiers-le-Bel","c":"France","y":49.0094,"x":2.3911},{"n":"Ipu","c":"Brazil","y":-4.3196,"x":-40.7201},{"n":"Parkville","c":"United States","y":39.3832,"x":-76.5519},{"n":"Zaqatala","c":"Azerbaijan","y":41.6336,"x":46.6433},{"n":"Miami Lakes","c":"United States","y":25.9125,"x":-80.3214},{"n":"San Fernando","c":"Mexico","y":24.8504,"x":-98.16},{"n":"Imisli","c":"Azerbaijan","y":39.8697,"x":48.06},{"n":"Newton Abbot","c":"United Kingdom","y":50.529,"x":-3.61},{"n":"Pefki","c":"Greece","y":38.0667,"x":23.8},{"n":"Contla","c":"Mexico","y":19.3333,"x":-98.1667},{"n":"Hertford","c":"United Kingdom","y":51.795,"x":-0.078},{"n":"Brevnov","c":"Czechia","y":50.0833,"x":14.3579},{"n":"Villeneuve-la-Garenne","c":"France","y":48.9372,"x":2.3278},{"n":"Saint-Laurent-du-Var","c":"France","y":43.668,"x":7.188},{"n":"Blackrock","c":"Ireland","y":53.3015,"x":-6.1778},{"n":"Limeil-Brevannes","c":"France","y":48.7464,"x":2.4883},{"n":"Ban Bang Khu Wat","c":"Thailand","y":13.9576,"x":100.4902},{"n":"Pando","c":"Uruguay","y":-34.7167,"x":-55.9583},{"n":"Ridley","c":"United States","y":39.8854,"x":-75.328},{"n":"Menton","c":"France","y":43.775,"x":7.5},{"n":"Wete","c":"Tanzania","y":-5.0567,"x":39.7281},{"n":"Mytilini","c":"Greece","y":39.1114,"x":26.5621},{"n":"Udomlya","c":"Russia","y":57.8833,"x":35.0167},{"n":"Arendal","c":"Norway","y":58.4617,"x":8.7721},{"n":"Nebbi","c":"Uganda","y":2.4758,"x":31.1025},{"n":"Ashington","c":"United Kingdom","y":55.181,"x":-1.568},{"n":"Cuilapa","c":"Guatemala","y":14.2783,"x":-90.2992},{"n":"Desnogorsk","c":"Russia","y":54.1531,"x":33.2903},{"n":"Martorell","c":"Spain","y":41.4744,"x":1.9305},{"n":"Lomme","c":"France","y":50.6455,"x":2.9876},{"n":"Diffa","c":"Niger","y":13.3171,"x":12.6089},{"n":"San Pablo","c":"United States","y":37.9628,"x":-122.3425},{"n":"Rhyl","c":"United Kingdom","y":53.321,"x":-3.48},{"n":"Ungheni","c":"Moldova","y":47.2042,"x":27.7958},{"n":"Guyancourt","c":"France","y":48.7714,"x":2.0739},{"n":"Burlingame","c":"United States","y":37.586,"x":-122.3669},{"n":"Tripoli","c":"Greece","y":37.5083,"x":22.375},{"n":"Cakovec","c":"Croatia","y":46.3833,"x":16.4333},{"n":"Sonzacate","c":"El Salvador","y":13.7342,"x":-89.7147},{"n":"Soissons","c":"France","y":49.3817,"x":3.3236},{"n":"Masnou","c":"Spain","y":41.4817,"x":2.3178},{"n":"Arcueil","c":"France","y":48.8075,"x":2.3361},{"n":"Longbridge","c":"United Kingdom","y":52.395,"x":-1.979},{"n":"Bregenz","c":"Austria","y":47.505,"x":9.7492},{"n":"Rainham","c":"United Kingdom","y":51.36,"x":0.61},{"n":"Pljevlja","c":"Montenegro","y":43.3566,"x":19.3502},{"n":"Catarroja","c":"Spain","y":39.4028,"x":-0.4044},{"n":"Eaubonne","c":"France","y":48.9922,"x":2.2806},{"n":"Lobatse","c":"Botswana","y":-25.2167,"x":25.6667},{"n":"Megrine","c":"Tunisia","y":36.7687,"x":10.2332},{"n":"Cabarroguis","c":"Philippines","y":16.5833,"x":121.5},{"n":"Yate","c":"United Kingdom","y":51.5402,"x":-2.411},{"n":"Melton Mowbray","c":"United Kingdom","y":52.7661,"x":-0.886},{"n":"Krabi","c":"Thailand","y":8.0592,"x":98.9189},{"n":"Xalisco","c":"Mexico","y":21.4481,"x":-104.9},{"n":"Carouge","c":"Switzerland","y":46.1817,"x":6.1404},{"n":"Avellaneda","c":"Argentina","y":-34.6625,"x":-58.3678},{"n":"Ain Taoujdat","c":"Morocco","y":33.9333,"x":-5.2167},{"n":"Ninomiya","c":"Japan","y":35.3014,"x":139.2558},{"n":"Asosa","c":"Ethiopia","y":10.067,"x":34.5333},{"n":"Tomares","c":"Spain","y":37.3764,"x":-6.0458},{"n":"Nova Cruz","c":"Brazil","y":-6.4696,"x":-35.44},{"n":"Boscombe","c":"United Kingdom","y":50.725,"x":-1.84},{"n":"Ketrzyn","c":"Poland","y":54.0833,"x":21.3833},{"n":"City of Orange","c":"United States","y":40.7682,"x":-74.2348},{"n":"Qiman al `Arus","c":"Egypt","y":29.3005,"x":31.1683},{"n":"Salyan","c":"Azerbaijan","y":39.5968,"x":48.9837},{"n":"Barnstaple","c":"United Kingdom","y":51.08,"x":-4.06},{"n":"Bearsden","c":"United Kingdom","y":55.9192,"x":-4.3332},{"n":"Heredia","c":"Costa Rica","y":9.9985,"x":-84.1169},{"n":"Boscoreale","c":"Italy","y":40.775,"x":14.475},{"n":"Chichester","c":"United Kingdom","y":50.8365,"x":-0.7792},{"n":"Newton Mearns","c":"United Kingdom","y":55.7716,"x":-4.3347},{"n":"Jaynagar-Majilpur","c":"India","y":22.1772,"x":88.4258},{"n":"Geldrop","c":"Netherlands","y":51.4222,"x":5.5578},{"n":"Sterling","c":"United States","y":39.0052,"x":-77.405},{"n":"Jamay","c":"Mexico","y":20.2944,"x":-102.7097},{"n":"Long Branch","c":"United States","y":40.2965,"x":-73.9915},{"n":"Santa Paula","c":"United States","y":34.3521,"x":-119.0698},{"n":"Banqiao","c":"Taiwan","y":25.0143,"x":121.4672},{"n":"Mount Hagen","c":"Papua New Guinea","y":-5.8667,"x":144.2167},{"n":"Chatan","c":"Japan","y":26.32,"x":127.7639},{"n":"San Carlos","c":"United States","y":37.4982,"x":-122.268},{"n":"Garbagnate Milanese","c":"Italy","y":45.5771,"x":9.0814},{"n":"Vicente Lopez","c":"Argentina","y":-34.5333,"x":-58.475},{"n":"Bilston","c":"United Kingdom","y":52.566,"x":-2.0728},{"n":"Mutsamudu","c":"Comoros","y":-12.1675,"x":44.3939},{"n":"Cahul","c":"Moldova","y":45.9075,"x":28.1944},{"n":"Heemstede","c":"Netherlands","y":52.3528,"x":4.62},{"n":"Los Reyes de Juarez","c":"Mexico","y":18.9267,"x":-97.7983},{"n":"Didcot","c":"United Kingdom","y":51.606,"x":-1.241},{"n":"Ojinaga","c":"Mexico","y":29.5644,"x":-104.4164},{"n":"Shotley Bridge","c":"United Kingdom","y":54.87,"x":-1.86},{"n":"Stepney","c":"United Kingdom","y":51.5152,"x":-0.0462},{"n":"Dubendorf","c":"Switzerland","y":47.3981,"x":8.6194},{"n":"Billericay","c":"United Kingdom","y":51.628,"x":0.4184},{"n":"Trujillo","c":"Honduras","y":15.9167,"x":-86},{"n":"Moyale","c":"Kenya","y":3.527,"x":39.056},{"n":"La Union","c":"El Salvador","y":13.3369,"x":-87.8439},{"n":"Treinta y Tres","c":"Uruguay","y":-33.2308,"x":-54.3822},{"n":"Stung Treng","c":"Cambodia","y":13.5167,"x":105.9667},{"n":"Bournville","c":"United Kingdom","y":52.4299,"x":-1.9355},{"n":"Rahway","c":"United States","y":40.6077,"x":-74.2807},{"n":"Tahla","c":"Morocco","y":34.0476,"x":-4.4289},{"n":"Camas","c":"Spain","y":37.402,"x":-6.0332},{"n":"Armilla","c":"Spain","y":37.15,"x":-3.6167},{"n":"Dietikon","c":"Switzerland","y":47.4056,"x":8.4039},{"n":"Otjiwarongo","c":"Namibia","y":-20.4642,"x":16.6528},{"n":"Bay Shore","c":"United States","y":40.7317,"x":-73.2505},{"n":"Leyton","c":"United Kingdom","y":51.5606,"x":-0.0155},{"n":"Tralee","c":"Ireland","y":52.2675,"x":-9.6962},{"n":"Newton Aycliffe","c":"United Kingdom","y":54.62,"x":-1.58},{"n":"Westchester","c":"United States","y":25.7474,"x":-80.3358},{"n":"Kaisariani","c":"Greece","y":37.9633,"x":23.7653},{"n":"Walton upon Thames","c":"United Kingdom","y":51.3868,"x":-0.4133},{"n":"Eastleigh","c":"United Kingdom","y":50.9667,"x":-1.35},{"n":"Agdas","c":"Azerbaijan","y":40.65,"x":47.4833},{"n":"Doba","c":"Chad","y":8.65,"x":16.85},{"n":"Suisun City","c":"United States","y":38.2473,"x":-122.009},{"n":"Arapoti","c":"Brazil","y":-24.1578,"x":-49.8269},{"n":"Chiavari","c":"Italy","y":44.3164,"x":9.3237},{"n":"Cheadle Hulme","c":"United Kingdom","y":53.3761,"x":-2.1897},{"n":"Cardito","c":"Italy","y":40.9362,"x":14.2993},{"n":"West Falls Church","c":"United States","y":38.8648,"x":-77.1878},{"n":"Nuwara Eliya","c":"Sri Lanka","y":6.9667,"x":80.7667},{"n":"Katima Mulilo","c":"Namibia","y":-17.5039,"x":24.275},{"n":"Golden Gate","c":"United States","y":26.1844,"x":-81.7031},{"n":"Hindley","c":"United Kingdom","y":53.5355,"x":-2.5658},{"n":"Mortsel","c":"Belgium","y":51.1703,"x":4.4567},{"n":"Villeparisis","c":"France","y":48.9503,"x":2.6025},{"n":"Haverhill","c":"United Kingdom","y":52.08,"x":0.44},{"n":"Bac Kan","c":"Vietnam","y":22.1514,"x":105.8377},{"n":"Backa Palanka","c":"Serbia","y":45.2506,"x":19.3886},{"n":"Brunoy","c":"France","y":48.6979,"x":2.5044},{"n":"Nogales","c":"Mexico","y":18.8167,"x":-97.1667},{"n":"Chalatenango","c":"El Salvador","y":14.0413,"x":-88.9397},{"n":"Venustiano Carranza","c":"Mexico","y":20.1158,"x":-102.6542},{"n":"Northfield","c":"United Kingdom","y":52.408,"x":-1.963},{"n":"Burntwood","c":"United Kingdom","y":52.6831,"x":-1.92},{"n":"Westhoughton","c":"United Kingdom","y":53.549,"x":-2.529},{"n":"Sevres","c":"France","y":48.8239,"x":2.2117},{"n":"Linden","c":"Guyana","y":6,"x":-58.3},{"n":"Rocha","c":"Uruguay","y":-34.4833,"x":-54.35},{"n":"Ixhuatlancillo","c":"Mexico","y":18.9,"x":-97.15},{"n":"Estoril","c":"Portugal","y":38.7057,"x":-9.3977},{"n":"Santa Barbara","c":"Honduras","y":14.9167,"x":-88.2333},{"n":"Khorugh","c":"Tajikistan","y":37.4917,"x":71.5575},{"n":"Bussy-Saint-Georges","c":"France","y":48.8422,"x":2.6983},{"n":"Colonia del Sacramento","c":"Uruguay","y":-34.4714,"x":-57.8442},{"n":"Hillerod","c":"Denmark","y":55.9333,"x":12.3167},{"n":"Kamphaeng Phet","c":"Thailand","y":16.4811,"x":99.5222},{"n":"Tulum","c":"Mexico","y":20.2119,"x":-87.4658},{"n":"Saint-Gratien","c":"France","y":48.9719,"x":2.2828},{"n":"East Palo Alto","c":"United States","y":37.4671,"x":-122.1352},{"n":"Cenon","c":"France","y":44.8578,"x":-0.5317},{"n":"Leiderdorp","c":"Netherlands","y":52.1617,"x":4.5283},{"n":"Camaligan","c":"Philippines","y":13.625,"x":123.1569},{"n":"Paracuaro","c":"Mexico","y":19.1464,"x":-102.2194},{"n":"Qualiano","c":"Italy","y":40.9167,"x":14.15},{"n":"Saint-Sebastien-sur-Loire","c":"France","y":47.2081,"x":-1.5014},{"n":"Sai Mai","c":"Thailand","y":13.8882,"x":100.462},{"n":"Port Chester","c":"United States","y":41.0052,"x":-73.668},{"n":"Samut Songkhram","c":"Thailand","y":13.4097,"x":100.0017},{"n":"Miahuatlan","c":"Mexico","y":18.5667,"x":-97.4333},{"n":"Sucy-en-Brie","c":"France","y":48.7697,"x":2.5228},{"n":"Leigh-on-Sea","c":"United Kingdom","y":51.5425,"x":0.6535},{"n":"Penonome","c":"Panama","y":8.51,"x":-80.36},{"n":"Taverny","c":"France","y":49.0264,"x":2.2275},{"n":"Qaha","c":"Egypt","y":30.2833,"x":31.2},{"n":"Clydebank","c":"United Kingdom","y":55.8997,"x":-4.4006},{"n":"La Madeleine","c":"France","y":50.6558,"x":3.071},{"n":"Hunucma","c":"Mexico","y":21.0153,"x":-89.8744},{"n":"Armentieres","c":"France","y":50.6881,"x":2.8811},{"n":"Buri Ram","c":"Thailand","y":14.9942,"x":103.1022},{"n":"Manga","c":"Burkina Faso","y":11.6667,"x":-1.0667},{"n":"Olgiy","c":"Mongolia","y":48.9656,"x":89.9632},{"n":"Vallauris","c":"France","y":43.5805,"x":7.0538},{"n":"Dollis Hill","c":"United Kingdom","y":51.5641,"x":-0.2341},{"n":"Wellington","c":"United Kingdom","y":52.7001,"x":-2.5157},{"n":"Mendefera","c":"Eritrea","y":14.8833,"x":38.8167},{"n":"Consett","c":"United Kingdom","y":54.85,"x":-1.83},{"n":"Champs-Sur-Marne","c":"France","y":48.8529,"x":2.6027},{"n":"Droylsden","c":"United Kingdom","y":53.4828,"x":-2.1582},{"n":"Rafael Delgado","c":"Mexico","y":18.8167,"x":-97.0667},{"n":"Nutley","c":"United States","y":40.8192,"x":-74.1571},{"n":"Blenheim","c":"New Zealand","y":-41.5167,"x":173.95},{"n":"Giussano","c":"Italy","y":45.7,"x":9.2167},{"n":"Shamokin","c":"United States","y":40.7883,"x":-76.555},{"n":"Tapiales","c":"Argentina","y":-34.7058,"x":-58.5047},{"n":"Kocani","c":"Macedonia","y":41.9167,"x":22.4125},{"n":"Vichy","c":"France","y":46.1278,"x":3.4267},{"n":"Rezekne","c":"Latvia","y":56.5067,"x":27.3308},{"n":"Elancourt","c":"France","y":48.7847,"x":1.9589},{"n":"Oegstgeest","c":"Netherlands","y":52.1667,"x":4.4667},{"n":"Mitu","c":"Colombia","y":1.2503,"x":-70.235},{"n":"Balham","c":"United Kingdom","y":51.4434,"x":-0.1525},{"n":"Le Bouscat","c":"France","y":44.8651,"x":-0.5996},{"n":"Harborne","c":"United Kingdom","y":52.46,"x":-1.95},{"n":"Shenley Brook End","c":"United Kingdom","y":52.009,"x":-0.789},{"n":"Bloxwich","c":"United Kingdom","y":52.614,"x":-2.004},{"n":"Alencon","c":"France","y":48.4306,"x":0.0931},{"n":"Zawyat ech Cheikh","c":"Morocco","y":32.6541,"x":-5.9214},{"n":"Caxito","c":"Angola","y":-8.6467,"x":13.6642},{"n":"Upminster","c":"United Kingdom","y":51.5557,"x":0.2512},{"n":"Vevey","c":"Switzerland","y":46.4667,"x":6.85},{"n":"Zaouiet Sousse","c":"Tunisia","y":35.7887,"x":10.6274},{"n":"Tixtla de Guerrero","c":"Mexico","y":17.5667,"x":-99.4},{"n":"Winchester","c":"United States","y":36.1368,"x":-115.1299},{"n":"Popondetta","c":"Papua New Guinea","y":-8.7656,"x":148.2347},{"n":"Deuil-la-Barre","c":"France","y":48.9767,"x":2.3272},{"n":"Ouesso","c":"Congo (Brazzaville)","y":1.6167,"x":16.05},{"n":"Littleover","c":"United Kingdom","y":52.906,"x":-1.505},{"n":"Fleetwood","c":"United Kingdom","y":53.923,"x":-3.015},{"n":"Highgate","c":"United Kingdom","y":51.5716,"x":-0.1448},{"n":"Market Harborough","c":"United Kingdom","y":52.4775,"x":-0.9206},{"n":"Missour","c":"Morocco","y":33.05,"x":-3.9908},{"n":"Aldama","c":"Mexico","y":28.8386,"x":-105.9111},{"n":"Altepexi","c":"Mexico","y":18.3676,"x":-97.3004},{"n":"Mons-en-Baroeul","c":"France","y":50.6369,"x":3.1103},{"n":"Losino-Petrovskiy","c":"Russia","y":55.8667,"x":38.2},{"n":"Oadby","c":"United Kingdom","y":52.5987,"x":-1.0763},{"n":"Hamar","c":"Norway","y":60.7944,"x":11.0678},{"n":"Le Grand-Quevilly","c":"France","y":49.4072,"x":1.0531},{"n":"Melrose","c":"United States","y":42.4556,"x":-71.059},{"n":"Itambe","c":"Brazil","y":-15.245,"x":-40.6239},{"n":"Ocatlan","c":"Mexico","y":19.3167,"x":-98.2283},{"n":"Joinville-le-Pont","c":"France","y":48.8214,"x":2.4728},{"n":"Renens","c":"Switzerland","y":46.5353,"x":6.5897},{"n":"Erdington","c":"United Kingdom","y":52.5236,"x":-1.8378},{"n":"Drexel Hill","c":"United States","y":39.9495,"x":-75.3039},{"n":"Muggio","c":"Italy","y":45.6,"x":9.2333},{"n":"Ban Bang Phun","c":"Thailand","y":13.9968,"x":100.5891},{"n":"Bongor","c":"Chad","y":10.2806,"x":15.3722},{"n":"Saint-Nicolas","c":"Belgium","y":50.6333,"x":5.5333},{"n":"Mongo","c":"Chad","y":12.1837,"x":18.7},{"n":"Penarth","c":"United Kingdom","y":51.43,"x":-3.17},{"n":"Acomb","c":"United Kingdom","y":53.955,"x":-1.126},{"n":"Dunleary","c":"Ireland","y":53.3,"x":-6.14},{"n":"Koulikoro","c":"Mali","y":12.8833,"x":-7.55},{"n":"Koper","c":"Slovenia","y":45.5475,"x":13.7307},{"n":"Alboraya","c":"Spain","y":39.5,"x":-0.3522},{"n":"Isla Vista","c":"United States","y":34.4144,"x":-119.8581},{"n":"Don Bosco","c":"Argentina","y":-34.7,"x":-58.2833},{"n":"Tantoyuca","c":"Mexico","y":21.35,"x":-98.2333},{"n":"Portishead","c":"United Kingdom","y":51.484,"x":-2.7626},{"n":"Kicevo","c":"Macedonia","y":41.5142,"x":20.9631},{"n":"Velenje","c":"Slovenia","y":46.3667,"x":15.1167},{"n":"Biarritz","c":"France","y":43.48,"x":-1.56},{"n":"Rehoboth","c":"Namibia","y":-23.3167,"x":17.0833},{"n":"Mililani Town","c":"United States","y":21.4465,"x":-158.0147},{"n":"Bethune","c":"France","y":50.5303,"x":2.6408},{"n":"Ciudad Altamirano","c":"Mexico","y":18.3583,"x":-100.6667},{"n":"Caversham","c":"United Kingdom","y":51.467,"x":-0.973},{"n":"Kings Norton","c":"United Kingdom","y":52.4072,"x":-1.9272},{"n":"Imperial Beach","c":"United States","y":32.5689,"x":-117.1184},{"n":"Magdalena de Kino","c":"Mexico","y":30.6167,"x":-111.05},{"n":"Al Ghayzah","c":"Yemen","y":16.2394,"x":52.1638},{"n":"Seriate","c":"Italy","y":45.6847,"x":9.7178},{"n":"Shtime","c":"Kosovo","y":42.4333,"x":21.0333},{"n":"Orly","c":"France","y":48.7439,"x":2.3928},{"n":"Hackney","c":"United Kingdom","y":51.5414,"x":-0.0266},{"n":"Bishopbriggs","c":"United Kingdom","y":55.9046,"x":-4.225},{"n":"Piastow","c":"Poland","y":52.1833,"x":20.85},{"n":"Bergenfield","c":"United States","y":40.9236,"x":-73.9983},{"n":"Nova Milanese","c":"Italy","y":45.5833,"x":9.2},{"n":"Thornaby on Tees","c":"United Kingdom","y":54.5556,"x":-1.3049},{"n":"Ladera Ranch","c":"United States","y":33.5491,"x":-117.6416},{"n":"Neuilly-Plaisance","c":"France","y":48.8619,"x":2.5064},{"n":"Stalybridge","c":"United Kingdom","y":53.4834,"x":-2.04},{"n":"Cerro Azul","c":"Mexico","y":21.2,"x":-97.7331},{"n":"Pompei","c":"Italy","y":40.75,"x":14.5},{"n":"Kingswinford","c":"United Kingdom","y":52.4981,"x":-2.1657},{"n":"San Juan de Aznalfarache","c":"Spain","y":37.3667,"x":-6.0167},{"n":"Easton","c":"United States","y":40.6858,"x":-75.2209},{"n":"Priboj","c":"Serbia","y":43.5816,"x":19.5273},{"n":"Xoxocotla","c":"Mexico","y":18.685,"x":-99.2439},{"n":"Maisons-Laffitte","c":"France","y":48.9469,"x":2.1456},{"n":"Siquijor","c":"Philippines","y":9.1833,"x":123.55},{"n":"Indiana","c":"United States","y":40.622,"x":-79.1552},{"n":"Farnley","c":"United Kingdom","y":53.7876,"x":-1.6159},{"n":"Sensuntepeque","c":"El Salvador","y":13.8667,"x":-88.6333},{"n":"Le Petit-Quevilly","c":"France","y":49.4311,"x":1.0539},{"n":"Sliema","c":"Malta","y":35.9122,"x":14.5042},{"n":"Cormeilles-en-Parisis","c":"France","y":48.9739,"x":2.2014},{"n":"Siliana","c":"Tunisia","y":36.0819,"x":9.3747},{"n":"Catio","c":"Guinea-Bissau","y":11.2833,"x":-15.25},{"n":"Reisterstown","c":"United States","y":39.4552,"x":-76.8144},{"n":"Chapala","c":"Mexico","y":20.2933,"x":-103.1897},{"n":"Weingarten","c":"Germany","y":47.8078,"x":9.6417},{"n":"Maywood","c":"United States","y":33.9885,"x":-118.1877},{"n":"Belmont","c":"United States","y":37.5154,"x":-122.2955},{"n":"Alfreton","c":"United Kingdom","y":53.097,"x":-1.38},{"n":"Montigny-les-Cormeilles","c":"France","y":48.9944,"x":2.1958},{"n":"Atlatlahucan","c":"Mexico","y":18.935,"x":-98.9},{"n":"San Juan de Alicante","c":"Spain","y":38.4014,"x":-0.4367},{"n":"Elgin","c":"United Kingdom","y":57.65,"x":-3.315},{"n":"Koscian","c":"Poland","y":52.0833,"x":16.65},{"n":"Nola","c":"Central African Republic","y":3.5337,"x":16.0666},{"n":"Kiryas Joel","c":"United States","y":41.3406,"x":-74.166},{"n":"Lemon Grove","c":"United States","y":32.7331,"x":-117.0344},{"n":"Lindenhurst","c":"United States","y":40.6858,"x":-73.371},{"n":"Carlos A. Carrillo","c":"Mexico","y":18.3667,"x":-95.75},{"n":"Meoqui","c":"Mexico","y":28.2722,"x":-105.4819},{"n":"Hirriyat Raznah","c":"Egypt","y":30.6028,"x":31.5372},{"n":"Maracena","c":"Spain","y":37.2,"x":-3.6333},{"n":"Felixstowe","c":"United Kingdom","y":51.9639,"x":1.3515},{"n":"Cheran","c":"Mexico","y":19.6833,"x":-101.95},{"n":"Ocampo","c":"Mexico","y":21.65,"x":-101.5},{"n":"Lormont","c":"France","y":44.8792,"x":-0.5217},{"n":"Bayanhongor","c":"Mongolia","y":46.1944,"x":100.7181},{"n":"West Whittier-Los Nietos","c":"United States","y":33.9759,"x":-118.0689},{"n":"Leisure City","c":"United States","y":25.4937,"x":-80.4369},{"n":"Moyo","c":"Uganda","y":3.6504,"x":31.72},{"n":"Camborne","c":"United Kingdom","y":50.213,"x":-5.3},{"n":"Seveso","c":"Italy","y":45.6474,"x":9.1387},{"n":"University Park","c":"United States","y":25.7469,"x":-80.3684},{"n":"Voinjama","c":"Liberia","y":8.4167,"x":-9.75},{"n":"Cazones de Herrera","c":"Mexico","y":20.7,"x":-97.3},{"n":"Nakhon Phanom","c":"Thailand","y":17.4069,"x":104.7808},{"n":"Atherton","c":"United Kingdom","y":53.523,"x":-2.495},{"n":"Meyrin","c":"Switzerland","y":46.2322,"x":6.0791},{"n":"Utena","c":"Lithuania","y":55.5,"x":25.6028},{"n":"Stanmore","c":"United Kingdom","y":51.618,"x":-0.314},{"n":"Jonava","c":"Lithuania","y":55.0722,"x":24.2806},{"n":"Suphan Buri","c":"Thailand","y":14.4675,"x":100.1169},{"n":"Failsworth","c":"United Kingdom","y":53.5102,"x":-2.1575},{"n":"Dongola","c":"Sudan","y":19.1666,"x":30.4833},{"n":"Mendi","c":"Papua New Guinea","y":-6.1478,"x":143.6572},{"n":"Chaville","c":"France","y":48.8086,"x":2.1886},{"n":"Ennis","c":"Ireland","y":52.8463,"x":-8.9807},{"n":"Ulaangom","c":"Mongolia","y":49.9833,"x":92.0667},{"n":"Torcy","c":"France","y":48.8502,"x":2.6508},{"n":"San Juan de Vilasar","c":"Spain","y":41.5053,"x":2.3928},{"n":"Meda","c":"Italy","y":45.6667,"x":9.1667},{"n":"Whitefield","c":"United Kingdom","y":53.5521,"x":-2.2992},{"n":"Castilleja de la Cuesta","c":"Spain","y":37.3833,"x":-6.05},{"n":"Belper","c":"United Kingdom","y":53.029,"x":-1.475},{"n":"Oxkutzkab","c":"Mexico","y":20.3028,"x":-89.4183},{"n":"Rodez","c":"France","y":44.3506,"x":2.575},{"n":"Texistepec","c":"Mexico","y":17.9,"x":-94.8167},{"n":"Soledad","c":"United States","y":36.4432,"x":-121.3426},{"n":"Gjirokaster","c":"Albania","y":40.0758,"x":20.1389},{"n":"Malinalco","c":"Mexico","y":18.9483,"x":-99.4947},{"n":"Rivas","c":"Nicaragua","y":11.4333,"x":-85.8333},{"n":"Cliffside Park","c":"United States","y":40.8221,"x":-73.988},{"n":"Bang Sao Thong","c":"Thailand","y":13.5812,"x":100.7957},{"n":"Svay Rieng","c":"Cambodia","y":11.0878,"x":105.7994},{"n":"Bajina Basta","c":"Serbia","y":43.9731,"x":19.5597},{"n":"Heroica Ciudad de Tlaxiaco","c":"Mexico","y":17.2077,"x":-97.6798},{"n":"Clevedon","c":"United Kingdom","y":51.438,"x":-2.854},{"n":"Sainte-Therese","c":"Canada","y":45.6333,"x":-73.85},{"n":"Hovd","c":"Mongolia","y":48.0167,"x":91.5667},{"n":"Castanos","c":"Mexico","y":26.7833,"x":-101.4167},{"n":"Calilabad","c":"Azerbaijan","y":39.2042,"x":48.4958},{"n":"Litherland","c":"United Kingdom","y":53.4727,"x":-2.999},{"n":"Chandlers Ford","c":"United Kingdom","y":50.984,"x":-1.3792},{"n":"Amnat Charoen","c":"Thailand","y":15.8758,"x":104.6223},{"n":"Fontaine","c":"France","y":45.1939,"x":5.6856},{"n":"Montgeron","c":"France","y":48.7039,"x":2.4605},{"n":"Mit Nama","c":"Egypt","y":30.1453,"x":31.2343},{"n":"Penwortham","c":"United Kingdom","y":53.74,"x":-2.72},{"n":"Szczytno","c":"Poland","y":53.5628,"x":20.9853},{"n":"El Tarf","c":"Algeria","y":36.7669,"x":8.3136},{"n":"Huntingdon","c":"United Kingdom","y":52.3364,"x":-0.1717},{"n":"Atoyac de Alvarez","c":"Mexico","y":17.2,"x":-100.4333},{"n":"Nar'yan-Mar","c":"Russia","y":67.6378,"x":53.0067},{"n":"Croix","c":"France","y":50.6781,"x":3.1508},{"n":"Kidsgrove","c":"United Kingdom","y":53.0874,"x":-2.2478},{"n":"Onex","c":"Switzerland","y":46.1833,"x":6.1},{"n":"San Juan Zitlaltepec","c":"Mexico","y":19.7167,"x":-99.05},{"n":"Cloverleaf","c":"United States","y":29.7882,"x":-95.1724},{"n":"Zwedru","c":"Liberia","y":6.0704,"x":-8.13},{"n":"Decatur","c":"United States","y":33.7711,"x":-84.2968},{"n":"Tipasa","c":"Algeria","y":36.5942,"x":2.443},{"n":"Ottobrunn","c":"Germany","y":48.0667,"x":11.6667},{"n":"Kafr Shukr","c":"Egypt","y":30.547,"x":31.2673},{"n":"Ewa Gentry","c":"United States","y":21.3344,"x":-158.0262},{"n":"Laurel","c":"United States","y":39.095,"x":-76.8622},{"n":"Guiseley","c":"United Kingdom","y":53.875,"x":-1.706},{"n":"Fray Bentos","c":"Uruguay","y":-33.1333,"x":-58.3},{"n":"Morsang-sur-Orge","c":"France","y":48.6618,"x":2.3461},{"n":"Northwood","c":"United Kingdom","y":51.601,"x":-0.4176},{"n":"San Lorenzo","c":"United States","y":37.6737,"x":-122.1349},{"n":"San Giovanni la Punta","c":"Italy","y":37.5833,"x":15.1},{"n":"Longjumeau","c":"France","y":48.6943,"x":2.2958},{"n":"Visby","c":"Sweden","y":57.629,"x":18.3071},{"n":"Swinton","c":"United Kingdom","y":53.5122,"x":-2.3412},{"n":"El Cerrito","c":"United States","y":37.9197,"x":-122.3025},{"n":"Montmorency","c":"France","y":48.9906,"x":2.3228},{"n":"At Tafilah","c":"Jordan","y":30.8375,"x":35.6042},{"n":"Eysines","c":"France","y":44.8853,"x":-0.65},{"n":"Penistone","c":"United Kingdom","y":53.525,"x":-1.629},{"n":"Loos","c":"France","y":50.6128,"x":3.0144},{"n":"Kerkyra","c":"Greece","y":39.6239,"x":19.9214},{"n":"Holborn","c":"United Kingdom","y":51.5172,"x":-0.1182},{"n":"Ossett","c":"United Kingdom","y":53.68,"x":-1.58},{"n":"Dronfield","c":"United Kingdom","y":53.3024,"x":-1.4664},{"n":"Coral Terrace","c":"United States","y":25.7464,"x":-80.3049},{"n":"Sidi Lmokhtar","c":"Morocco","y":31.57,"x":-9.01},{"n":"Puyo","c":"Ecuador","y":-1.483,"x":-77.987},{"n":"Friern Barnet","c":"United Kingdom","y":51.6126,"x":-0.1584},{"n":"Kafr Qasim","c":"Israel","y":32.1142,"x":34.9772},{"n":"South Pasadena","c":"United States","y":34.1103,"x":-118.1573},{"n":"Villabate","c":"Italy","y":38.0833,"x":13.45},{"n":"Kenilworth","c":"United Kingdom","y":52.341,"x":-1.566},{"n":"Lambarene","c":"Gabon","y":-0.6883,"x":10.2319},{"n":"Maesteg","c":"United Kingdom","y":51.61,"x":-3.65},{"n":"Sainte-Foy-les-Lyon","c":"France","y":45.73,"x":4.8},{"n":"Ekeren","c":"Belgium","y":51.2772,"x":4.4178},{"n":"South Bradenton","c":"United States","y":27.4612,"x":-82.5821},{"n":"Mohale's Hoek","c":"Lesotho","y":-30.159,"x":27.48},{"n":"Palm Springs","c":"United States","y":26.6349,"x":-80.0968},{"n":"Vukovar","c":"Croatia","y":45.35,"x":19.0033},{"n":"Wewak","c":"Papua New Guinea","y":-3.55,"x":143.6333},{"n":"Tassin-la-Demi-Lune","c":"France","y":45.764,"x":4.78},{"n":"Sheldon","c":"United Kingdom","y":52.45,"x":-1.7666},{"n":"Levittown","c":"Puerto Rico","y":18.4454,"x":-66.1759},{"n":"Haci Zeynalabdin","c":"Azerbaijan","y":40.6242,"x":49.5575},{"n":"Herouville-Saint-Clair","c":"France","y":49.2044,"x":-0.3253},{"n":"Montigny-les-Metz","c":"France","y":49.1006,"x":6.1539},{"n":"Santiago Ixcuintla","c":"Mexico","y":21.811,"x":-105.2079},{"n":"Sceaux","c":"France","y":48.7786,"x":2.2906},{"n":"Normanton","c":"United Kingdom","y":53.697,"x":-1.416},{"n":"Kaga Bandoro","c":"Central African Republic","y":7.0006,"x":19.1808},{"n":"Benetuser","c":"Spain","y":39.425,"x":-0.3961},{"n":"Tbeng Meanchey","c":"Cambodia","y":13.8167,"x":104.9667},{"n":"Portalegre","c":"Portugal","y":39.3167,"x":-7.4167},{"n":"Bispham","c":"United Kingdom","y":53.852,"x":-3.041},{"n":"Chocaman","c":"Mexico","y":19.0167,"x":-97.0333},{"n":"Terrytown","c":"United States","y":29.9014,"x":-90.0279},{"n":"Novo Mesto","c":"Slovenia","y":45.7981,"x":15.1628},{"n":"Cusano Milanino","c":"Italy","y":45.55,"x":9.1833},{"n":"Tlacolula de Matamoros","c":"Mexico","y":16.9542,"x":-96.4792},{"n":"Krathum Baen","c":"Thailand","y":13.6519,"x":100.2572},{"n":"Riverbank","c":"United States","y":37.7268,"x":-120.9402},{"n":"Stratton Saint Margaret","c":"United Kingdom","y":51.586,"x":-1.762},{"n":"March","c":"United Kingdom","y":52.551,"x":0.088},{"n":"Maplewood","c":"United States","y":40.733,"x":-74.2711},{"n":"Tequixquiac","c":"Mexico","y":19.9097,"x":-99.1417},{"n":"Le Plessis-Trevise","c":"France","y":48.8111,"x":2.5717},{"n":"Le Mee-sur-Seine","c":"France","y":48.5333,"x":2.6289},{"n":"Baldwin","c":"United States","y":40.6634,"x":-73.6104},{"n":"Bontoc","c":"Philippines","y":17.0872,"x":120.9756},{"n":"Melrose Park","c":"United States","y":41.9029,"x":-87.8642},{"n":"Suhbaatar","c":"Mongolia","y":50.2364,"x":106.2064},{"n":"Palm Tree","c":"United States","y":41.3411,"x":-74.1667},{"n":"Reyes Acozac","c":"Mexico","y":19.7667,"x":-98.9833},{"n":"Baalbek","c":"Lebanon","y":34.0061,"x":36.2086},{"n":"Palmers Green","c":"United Kingdom","y":51.6178,"x":-0.1092},{"n":"Degollado","c":"Mexico","y":20.4667,"x":-102.15},{"n":"Hornsey","c":"United Kingdom","y":51.587,"x":-0.118},{"n":"Herndon","c":"United States","y":38.9699,"x":-77.3867},{"n":"Juvisy-sur-Orge","c":"France","y":48.6883,"x":2.3775},{"n":"Falmouth","c":"United Kingdom","y":50.15,"x":-5.07},{"n":"Royton","c":"United Kingdom","y":53.566,"x":-2.121},{"n":"Kasamatsucho","c":"Japan","y":35.3672,"x":136.7633},{"n":"Kanmaki","c":"Japan","y":34.5628,"x":135.7167},{"n":"General Emilio Aguinaldo","c":"Philippines","y":14.1833,"x":120.8},{"n":"Velizy-Villacoublay","c":"France","y":48.7834,"x":2.1834},{"n":"Chevilly-Larue","c":"France","y":48.7664,"x":2.3533},{"n":"Chiconcuac","c":"Mexico","y":19.55,"x":-98.9},{"n":"Falagueira","c":"Portugal","y":38.759,"x":-9.2199},{"n":"Sharunah","c":"Egypt","y":28.594,"x":30.8516},{"n":"Rockville Centre","c":"United States","y":40.6644,"x":-73.6383},{"n":"Linslade","c":"United Kingdom","y":51.9243,"x":-0.6774},{"n":"La Celle-Saint-Cloud","c":"France","y":48.8411,"x":2.1344},{"n":"Lop Buri","c":"Thailand","y":14.8,"x":100.6269},{"n":"Suitland","c":"United States","y":38.8492,"x":-76.9225},{"n":"Newquay","c":"United Kingdom","y":50.412,"x":-5.0757},{"n":"Gan Yavne","c":"Israel","y":31.7886,"x":34.7053},{"n":"Cormano","c":"Italy","y":45.55,"x":9.1667},{"n":"Plumstead","c":"United Kingdom","y":51.49,"x":0.09},{"n":"Watauga","c":"United States","y":32.8718,"x":-97.2515},{"n":"Cotija de la Paz","c":"Mexico","y":19.81,"x":-102.7047},{"n":"Carlow","c":"Ireland","y":52.8306,"x":-6.9317},{"n":"Saint-Pol-sur-Mer","c":"France","y":51.0314,"x":2.3439},{"n":"Sao Joao da Madeira","c":"Portugal","y":40.9,"x":-8.5},{"n":"Ashland","c":"United States","y":37.6942,"x":-122.1159},{"n":"Fatick","c":"Senegal","y":14.3167,"x":-16.4167},{"n":"Garches","c":"France","y":48.8456,"x":2.1869},{"n":"Chesham","c":"United Kingdom","y":51.712,"x":-0.612},{"n":"Woodlawn","c":"United States","y":38.7332,"x":-77.1149},{"n":"Lodi","c":"United States","y":40.8784,"x":-74.0814},{"n":"Villa Sarmiento","c":"Argentina","y":-34.6333,"x":-58.5667},{"n":"San Fernando","c":"United States","y":34.2886,"x":-118.4363},{"n":"Chanthaburi","c":"Thailand","y":12.6086,"x":102.1039},{"n":"Xingangli","c":"China","y":39.9101,"x":119.5468},{"n":"Peekskill","c":"United States","y":41.2883,"x":-73.9227},{"n":"Mill Creek East","c":"United States","y":47.836,"x":-122.1877},{"n":"Dongta","c":"China","y":38.0824,"x":106.339},{"n":"Tysons","c":"United States","y":38.9215,"x":-77.2273},{"n":"Frattaminore","c":"Italy","y":40.9556,"x":14.2708},{"n":"Valmiera","c":"Latvia","y":57.5381,"x":25.4231},{"n":"Newton in Makerfield","c":"United Kingdom","y":53.45,"x":-2.633},{"n":"Bailey's Crossroads","c":"United States","y":38.8477,"x":-77.1305},{"n":"Vrbas","c":"Serbia","y":45.5697,"x":19.6378},{"n":"Grumo Nevano","c":"Italy","y":40.9333,"x":14.2667},{"n":"Neath","c":"United Kingdom","y":51.66,"x":-3.81},{"n":"Huskvarna","c":"Sweden","y":57.7919,"x":14.2756},{"n":"Atar","c":"Mauritania","y":20.5167,"x":-13.05},{"n":"Motul","c":"Mexico","y":21.1667,"x":-89.4667},{"n":"Elmwood Park","c":"United States","y":41.9225,"x":-87.8163},{"n":"Oak Ridge","c":"United States","y":28.4727,"x":-81.4169},{"n":"Renfrew","c":"United Kingdom","y":55.8791,"x":-4.3868},{"n":"Dammarie-le-Lys","c":"France","y":48.5177,"x":2.6402},{"n":"Senago","c":"Italy","y":45.5833,"x":9.1333},{"n":"Qalansuwa","c":"Israel","y":32.285,"x":34.9811},{"n":"Horwich","c":"United Kingdom","y":53.592,"x":-2.54},{"n":"Hellemmes-Lille","c":"France","y":50.6283,"x":3.11},{"n":"Owando","c":"Congo (Brazzaville)","y":-0.4833,"x":15.9},{"n":"Cottingham","c":"United Kingdom","y":53.7822,"x":-0.4136},{"n":"Southgate","c":"United Kingdom","y":51.6316,"x":-0.1265},{"n":"Guaranda","c":"Ecuador","y":-1.6056,"x":-79.0031},{"n":"Villeneuve-le-Roi","c":"France","y":48.7333,"x":2.4167},{"n":"Le Bourget","c":"France","y":48.9344,"x":2.4244},{"n":"Kibaha","c":"Tanzania","y":-6.7586,"x":38.9289},{"n":"Mantes-la-Ville","c":"France","y":48.975,"x":1.7117},{"n":"Saint-Maurice","c":"France","y":48.8183,"x":2.4347},{"n":"Bani Murr","c":"Egypt","y":27.2272,"x":31.1944},{"n":"Chilly-Mazarin","c":"France","y":48.7025,"x":2.3125},{"n":"Tewkesbury","c":"United Kingdom","y":51.99,"x":-2.16},{"n":"Satun","c":"Thailand","y":6.6147,"x":100.0681},{"n":"Saint-Michel-sur-Orge","c":"France","y":48.6325,"x":2.3028},{"n":"Phetchaburi","c":"Thailand","y":13.1119,"x":99.9458},{"n":"Valinda","c":"United States","y":34.0401,"x":-117.93},{"n":"Novate Milanese","c":"Italy","y":45.5333,"x":9.1333},{"n":"Kudrovo","c":"Russia","y":59.9086,"x":30.5136},{"n":"North Lynnwood","c":"United States","y":47.8533,"x":-122.2762},{"n":"Rosemont","c":"United States","y":38.5477,"x":-121.3553},{"n":"Southbourne","c":"United Kingdom","y":50.722,"x":-1.798},{"n":"Peterlee","c":"United Kingdom","y":54.76,"x":-1.33},{"n":"Kirkstall","c":"United Kingdom","y":53.816,"x":-1.602},{"n":"Penzance","c":"United Kingdom","y":50.119,"x":-5.537},{"n":"Cudahy","c":"United States","y":33.9631,"x":-118.183},{"n":"Copiague","c":"United States","y":40.6728,"x":-73.3932},{"n":"Shoreham-by-Sea","c":"United Kingdom","y":50.834,"x":-0.273},{"n":"Winter Gardens","c":"United States","y":32.8376,"x":-116.9268},{"n":"Yonabaru","c":"Japan","y":26.1994,"x":127.7547},{"n":"Seaham","c":"United Kingdom","y":54.84,"x":-1.34},{"n":"Allschwil","c":"Switzerland","y":47.5508,"x":7.5358},{"n":"Alfafar","c":"Spain","y":39.4222,"x":-0.3906},{"n":"Nkhata Bay","c":"Malawi","y":-11.6333,"x":34.3},{"n":"Hialeah Gardens","c":"United States","y":25.8878,"x":-80.3569},{"n":"Wasquehal","c":"France","y":50.6694,"x":3.1308},{"n":"Sukhodilsk","c":"Ukraine","y":48.35,"x":39.7167},{"n":"Coudekerque-Branche","c":"France","y":51.0253,"x":2.3917},{"n":"Carteret","c":"United States","y":40.5848,"x":-74.2284},{"n":"Opfikon","c":"Switzerland","y":47.4331,"x":8.5719},{"n":"Tena","c":"Ecuador","y":-0.989,"x":-77.8159},{"n":"West Puente Valley","c":"United States","y":34.0512,"x":-117.9681},{"n":"Peto","c":"Mexico","y":20.1256,"x":-88.9214},{"n":"Biddulph","c":"United Kingdom","y":53.12,"x":-2.17},{"n":"Killingworth","c":"United Kingdom","y":55.0318,"x":-1.5557},{"n":"Naas","c":"Ireland","y":53.2158,"x":-6.6669},{"n":"Sacavem","c":"Portugal","y":38.7944,"x":-9.1053},{"n":"Caterham","c":"United Kingdom","y":51.2803,"x":-0.0816},{"n":"Nyon","c":"Switzerland","y":46.382,"x":6.2389},{"n":"Acheres","c":"France","y":48.9602,"x":2.0684},{"n":"Ciudad Miguel Aleman","c":"Mexico","y":26.4003,"x":-99.0253},{"n":"Bellshill","c":"United Kingdom","y":55.8165,"x":-4.0262},{"n":"Mosta","c":"Malta","y":35.9,"x":14.4333},{"n":"Worcester Park","c":"United Kingdom","y":51.3752,"x":-0.239},{"n":"Davyhulme","c":"United Kingdom","y":53.4559,"x":-2.3683},{"n":"Fleury-les-Aubrais","c":"France","y":47.9512,"x":1.8745},{"n":"Grobenzell","c":"Germany","y":48.2,"x":11.3667},{"n":"Hidalgotitlan","c":"Mexico","y":17.7833,"x":-94.6333},{"n":"Sunbat","c":"Egypt","y":30.8057,"x":31.207},{"n":"Ronchin","c":"France","y":50.6047,"x":3.0878},{"n":"Monsey","c":"United States","y":41.1181,"x":-74.0681},{"n":"Ogre","c":"Latvia","y":56.8169,"x":24.6047},{"n":"Kilkenny","c":"Ireland","y":52.6477,"x":-7.2561},{"n":"Alloa","c":"United Kingdom","y":56.116,"x":-3.793},{"n":"Aarau","c":"Switzerland","y":47.3923,"x":8.0446},{"n":"West Rancho Dominguez","c":"United States","y":33.9057,"x":-118.2682},{"n":"Blue Island","c":"United States","y":41.6578,"x":-87.6812},{"n":"Lamu","c":"Kenya","y":-2.2686,"x":40.9003},{"n":"Bilasuvar","c":"Azerbaijan","y":39.4481,"x":48.5428},{"n":"Kayanza","c":"Burundi","y":-2.9221,"x":29.6293},{"n":"Monserrato","c":"Italy","y":39.2568,"x":9.1387},{"n":"Zaragoza","c":"Mexico","y":19.7728,"x":-97.5567},{"n":"Soisy-sous-Montmorency","c":"France","y":48.9878,"x":2.2997},{"n":"Trentola","c":"Italy","y":40.9762,"x":14.1773},{"n":"Sibiti","c":"Congo (Brazzaville)","y":-3.6833,"x":13.35},{"n":"Willowbrook","c":"United States","y":33.9199,"x":-118.2362},{"n":"Llandudno","c":"United Kingdom","y":53.325,"x":-3.826},{"n":"Saint-Cyr-l'Ecole","c":"France","y":48.8003,"x":2.0625},{"n":"Zimatlan de Alvarez","c":"Mexico","y":16.8667,"x":-96.7833},{"n":"Savanna-la-Mar","c":"Jamaica","y":18.2167,"x":-78.1333},{"n":"Madingou","c":"Congo (Brazzaville)","y":-4.1536,"x":13.55},{"n":"Bathgate","c":"United Kingdom","y":55.9024,"x":-3.6431},{"n":"Mzimba","c":"Malawi","y":-11.9,"x":33.6},{"n":"Sibut","c":"Central African Republic","y":5.7378,"x":19.0867},{"n":"Nogent-sur-Oise","c":"France","y":49.2756,"x":2.4683},{"n":"Rothwell","c":"United Kingdom","y":53.7485,"x":-1.478},{"n":"Goodmayes","c":"United Kingdom","y":51.5584,"x":0.1119},{"n":"Kedainiai","c":"Lithuania","y":55.2833,"x":23.9667},{"n":"Ives Estates","c":"United States","y":25.9632,"x":-80.183},{"n":"Uliastay","c":"Mongolia","y":47.7417,"x":96.8444},{"n":"Burnham-on-Sea","c":"United Kingdom","y":51.2376,"x":-2.9935},{"n":"Ahfir","c":"Morocco","y":34.9514,"x":-2.1025},{"n":"Jekabpils","c":"Latvia","y":56.4975,"x":25.8664},{"n":"Modling","c":"Austria","y":48.0856,"x":16.2831},{"n":"Ischia","c":"Italy","y":40.75,"x":13.95},{"n":"Quedgeley","c":"United Kingdom","y":51.825,"x":-2.28},{"n":"Kayunga","c":"Uganda","y":0.7025,"x":32.8886},{"n":"Dukinfield","c":"United Kingdom","y":53.4739,"x":-2.0828},{"n":"Mulanje","c":"Malawi","y":-16.0316,"x":35.5},{"n":"Landover","c":"United States","y":38.9241,"x":-76.8875},{"n":"Mecayapan","c":"Mexico","y":18.2167,"x":-94.8333},{"n":"Prestatyn","c":"United Kingdom","y":53.331,"x":-3.405},{"n":"Bafata","c":"Guinea-Bissau","y":12.1719,"x":-14.6575},{"n":"Dingle","c":"United Kingdom","y":53.3774,"x":-2.9613},{"n":"Phichit","c":"Thailand","y":16.4431,"x":100.3467},{"n":"Saint Paul's Bay","c":"Malta","y":35.9483,"x":14.4017},{"n":"Montereau-faut-Yonne","c":"France","y":48.3853,"x":2.9508},{"n":"Mouila","c":"Gabon","y":-1.8667,"x":11.055},{"n":"The Crossings","c":"United States","y":25.6708,"x":-80.4018},{"n":"Tepatlaxco","c":"Mexico","y":19.0667,"x":-97.9667},{"n":"Saint-Fons","c":"France","y":45.7086,"x":4.8533},{"n":"Loei","c":"Thailand","y":17.4853,"x":101.7307},{"n":"Millbrae","c":"United States","y":37.5994,"x":-122.4023},{"n":"East Barnet","c":"United Kingdom","y":51.643,"x":-0.163},{"n":"Oulad Fraj","c":"Morocco","y":32.9667,"x":-8.2333},{"n":"Molesey","c":"United Kingdom","y":51.401,"x":-0.363},{"n":"Mbaiki","c":"Central African Republic","y":3.8833,"x":18},{"n":"Soroca","c":"Moldova","y":48.1558,"x":28.2975},{"n":"Arese","c":"Italy","y":45.5531,"x":9.0775},{"n":"Fgura","c":"Malta","y":35.8703,"x":14.5133},{"n":"Nsanje","c":"Malawi","y":-16.9167,"x":35.2667},{"n":"Cercola","c":"Italy","y":40.8667,"x":14.35},{"n":"Lingolsheim","c":"France","y":48.5575,"x":7.6831},{"n":"Connahs Quay","c":"United Kingdom","y":53.2179,"x":-3.0573},{"n":"Truro","c":"United Kingdom","y":50.26,"x":-5.051},{"n":"Sao Filipe","c":"Cabo Verde","y":14.8951,"x":-24.5004},{"n":"Fengdeng","c":"China","y":38.5515,"x":106.2465},{"n":"Phetchabun","c":"Thailand","y":16.4169,"x":101.1533},{"n":"Sant'Antonio Abate","c":"Italy","y":40.7333,"x":14.55},{"n":"Liversedge","c":"United Kingdom","y":53.7067,"x":-1.69},{"n":"Bella Union","c":"Uruguay","y":-30.26,"x":-57.5992},{"n":"Cran-Gevrier","c":"France","y":45.9036,"x":6.1039},{"n":"Caacupe","c":"Paraguay","y":-25.387,"x":-57.14},{"n":"Antrim","c":"United Kingdom","y":54.7173,"x":-6.2055},{"n":"Faches-Thumesnil","c":"France","y":50.5989,"x":3.0736},{"n":"Fortin de las Flores","c":"Mexico","y":18.9,"x":-97},{"n":"West Carson","c":"United States","y":33.8229,"x":-118.2931},{"n":"Mocoa","c":"Colombia","y":1.1492,"x":-76.6464},{"n":"Telsiai","c":"Lithuania","y":55.9833,"x":22.25},{"n":"Assebroek","c":"Belgium","y":51.1964,"x":3.2536},{"n":"Linlithgow","c":"United Kingdom","y":55.9791,"x":-3.6105},{"n":"Keynsham","c":"United Kingdom","y":51.4135,"x":-2.4968},{"n":"Lealman","c":"United States","y":27.8197,"x":-82.6847},{"n":"Kegalle","c":"Sri Lanka","y":7.2531,"x":80.3453},{"n":"Eragny","c":"France","y":49.0172,"x":2.0914},{"n":"Ghat","c":"Libya","y":24.95,"x":10.3167},{"n":"Hayesville","c":"United States","y":44.9794,"x":-122.9739},{"n":"Bry-sur-Marne","c":"France","y":48.8411,"x":2.5222},{"n":"Moreton","c":"United Kingdom","y":53.401,"x":-3.111},{"n":"Hillside","c":"United States","y":40.6961,"x":-74.2286},{"n":"Bedlington","c":"United Kingdom","y":55.133,"x":-1.583},{"n":"Reinach","c":"Switzerland","y":47.4936,"x":7.5908},{"n":"Al Karak","c":"Jordan","y":31.1833,"x":35.7},{"n":"Jasmine Estates","c":"United States","y":28.293,"x":-82.6907},{"n":"Saint-Lambert","c":"Canada","y":45.5,"x":-73.5167},{"n":"Woodhouse","c":"United Kingdom","y":53.358,"x":-1.373},{"n":"Aldo Bonzi","c":"Argentina","y":-34.7083,"x":-58.5181},{"n":"Westbury","c":"United Kingdom","y":51.26,"x":-2.191},{"n":"Hadleigh","c":"United Kingdom","y":51.5535,"x":0.6095},{"n":"Kitagata","c":"Japan","y":35.4369,"x":136.6861},{"n":"Moulins","c":"France","y":46.5647,"x":3.3325},{"n":"Goroka","c":"Papua New Guinea","y":-6.0833,"x":145.3833},{"n":"Lennox","c":"United States","y":33.938,"x":-118.3586},{"n":"Kew Green","c":"United Kingdom","y":51.5308,"x":-0.2248},{"n":"Roselle","c":"United States","y":40.6527,"x":-74.2599},{"n":"Sunny Isles Beach","c":"United States","y":25.9385,"x":-80.1246},{"n":"Massapequa","c":"United States","y":40.6676,"x":-73.4706},{"n":"Chamalieres","c":"France","y":45.7736,"x":3.0669},{"n":"Calne","c":"United Kingdom","y":51.438,"x":-2.005},{"n":"Carmelo","c":"Uruguay","y":-33.9999,"x":-58.2847},{"n":"Acatlan de Osorio","c":"Mexico","y":18.2086,"x":-98.0575},{"n":"Mont-Saint-Aignan","c":"France","y":49.4625,"x":1.0872},{"n":"Calella","c":"Spain","y":41.6169,"x":2.6642},{"n":"North Bay Shore","c":"United States","y":40.7601,"x":-73.2618},{"n":"Nantwich","c":"United Kingdom","y":53.067,"x":-2.522},{"n":"Kapolei","c":"United States","y":21.3403,"x":-158.0665},{"n":"Alajuelita","c":"Costa Rica","y":9.9035,"x":-84.0996},{"n":"Nong Bua Lamphu","c":"Thailand","y":17.2042,"x":102.4444},{"n":"Ashtarak","c":"Armenia","y":40.3,"x":44.4},{"n":"Abbots Langley","c":"United Kingdom","y":51.701,"x":-0.416},{"n":"Obiliq","c":"Kosovo","y":42.69,"x":21.0778},{"n":"Hamtramck","c":"United States","y":42.3954,"x":-83.056},{"n":"Chennevieres-sur-Marne","c":"France","y":48.7983,"x":2.5339},{"n":"Hampton","c":"United Kingdom","y":51.422,"x":-0.367},{"n":"Le Pecq","c":"France","y":48.8967,"x":2.1061},{"n":"Taurage","c":"Lithuania","y":55.2514,"x":22.2903},{"n":"Haciqabul","c":"Azerbaijan","y":40.0375,"x":48.935},{"n":"Ayutla de los Libres","c":"Mexico","y":16.9,"x":-99.2167},{"n":"Schlieren","c":"Switzerland","y":47.3989,"x":8.4497},{"n":"McNair","c":"United States","y":38.9513,"x":-77.4116},{"n":"Johnstone","c":"United Kingdom","y":55.8346,"x":-4.5027},{"n":"Bozoum","c":"Central African Republic","y":6.3172,"x":16.3783},{"n":"Mchinji","c":"Malawi","y":-13.8167,"x":32.9},{"n":"Pully","c":"Switzerland","y":46.5167,"x":6.6667},{"n":"Patcham","c":"United Kingdom","y":50.864,"x":-0.15},{"n":"Dawlish","c":"United Kingdom","y":50.581,"x":-3.466},{"n":"Artashat","c":"Armenia","y":39.9539,"x":44.5506},{"n":"Virovitica","c":"Croatia","y":45.8333,"x":17.3833},{"n":"Tatahuicapan","c":"Mexico","y":18.25,"x":-94.7667},{"n":"San Francisco","c":"El Salvador","y":13.7,"x":-88.1},{"n":"Mickleover","c":"United Kingdom","y":52.901,"x":-1.552},{"n":"Redhill","c":"United Kingdom","y":51.2393,"x":-0.1726},{"n":"Vaureal","c":"France","y":49.03,"x":2.0214},{"n":"Maralal","c":"Kenya","y":1.1,"x":36.7},{"n":"Mountlake Terrace","c":"United States","y":47.7921,"x":-122.3076},{"n":"Hebburn","c":"United Kingdom","y":54.9718,"x":-1.5128},{"n":"Bonneuil-sur-Marne","c":"France","y":48.7742,"x":2.4875},{"n":"Caiaponia","c":"Brazil","y":-16.9569,"x":-51.81},{"n":"North Plainfield","c":"United States","y":40.6209,"x":-74.4386},{"n":"Le Raincy","c":"France","y":48.8992,"x":2.5231},{"n":"Ukmerge","c":"Lithuania","y":55.2667,"x":24.75},{"n":"Santa Lucia","c":"Uruguay","y":-34.4525,"x":-56.3964},{"n":"Obock","c":"Djibouti","y":11.9667,"x":43.2833},{"n":"Orhei","c":"Moldova","y":47.3831,"x":28.8231},{"n":"Bovisio Masciago","c":"Italy","y":45.6167,"x":9.15},{"n":"Adliswil","c":"Switzerland","y":47.3122,"x":8.5256},{"n":"La Esperanza","c":"Honduras","y":14.3,"x":-88.1833},{"n":"Luena","c":"Angola","y":-11.79,"x":19.9},{"n":"Viroflay","c":"France","y":48.8,"x":2.1722},{"n":"Boom","c":"Belgium","y":51.0875,"x":4.3667},{"n":"Sant Just Desvern","c":"Spain","y":41.3833,"x":2.075},{"n":"Bischheim","c":"France","y":48.6139,"x":7.7519},{"n":"Thalwil","c":"Switzerland","y":47.2953,"x":8.5647},{"n":"Horsforth","c":"United Kingdom","y":53.8341,"x":-1.6429},{"n":"Sweetwater","c":"United States","y":25.7786,"x":-80.376},{"n":"El Astillero","c":"Spain","y":43.4017,"x":-3.8194},{"n":"Hednesford","c":"United Kingdom","y":52.7115,"x":-2.0006},{"n":"Guayama","c":"Puerto Rico","y":17.9744,"x":-66.1104},{"n":"Pajapan","c":"Mexico","y":18.2667,"x":-94.6833},{"n":"Malgrat de Mar","c":"Spain","y":41.6456,"x":2.7428},{"n":"Wolfratshausen","c":"Germany","y":47.9133,"x":11.4278},{"n":"Impfondo","c":"Congo (Brazzaville)","y":1.6333,"x":18.0667},{"n":"Quba","c":"Azerbaijan","y":41.3653,"x":48.5264},{"n":"Moston","c":"United Kingdom","y":53.5156,"x":-2.1848},{"n":"Staines-upon-Thames","c":"United Kingdom","y":51.433,"x":-0.517},{"n":"Gavarr","c":"Armenia","y":40.3667,"x":45.1333},{"n":"Dolores","c":"Uruguay","y":-33.5333,"x":-58.2167},{"n":"Tadaoka-higashi","c":"Japan","y":34.4869,"x":135.4011},{"n":"Tecpan de Galeana","c":"Mexico","y":17.25,"x":-100.6833},{"n":"Ecully","c":"France","y":45.7744,"x":4.7775},{"n":"Chemax","c":"Mexico","y":20.655,"x":-87.9372},{"n":"El Rosario","c":"Mexico","y":22.9922,"x":-105.8572},{"n":"Wibsey","c":"United Kingdom","y":53.7672,"x":-1.7728},{"n":"Canelones","c":"Uruguay","y":-34.5228,"x":-56.2778},{"n":"North Bellmore","c":"United States","y":40.6904,"x":-73.539},{"n":"Palisades Park","c":"United States","y":40.8472,"x":-73.9967},{"n":"Aci Castello","c":"Italy","y":37.55,"x":15.15},{"n":"Ismayilli","c":"Azerbaijan","y":40.7839,"x":48.1439},{"n":"Ati","c":"Chad","y":13.2139,"x":18.3403},{"n":"El Dorado","c":"Mexico","y":24.3228,"x":-107.363},{"n":"Nan","c":"Thailand","y":18.7893,"x":100.7766},{"n":"Cowley","c":"United Kingdom","y":51.733,"x":-1.215},{"n":"Cuprija","c":"Serbia","y":43.9231,"x":21.3686},{"n":"Palau","c":"Mexico","y":27.9167,"x":-101.4167},{"n":"Porthcawl","c":"United Kingdom","y":51.48,"x":-3.69},{"n":"New Brighton","c":"United Kingdom","y":53.432,"x":-3.049},{"n":"Vimodrone","c":"Italy","y":45.5139,"x":9.2844},{"n":"Bingley","c":"United Kingdom","y":53.8509,"x":-1.838},{"n":"Yasothon","c":"Thailand","y":15.7883,"x":104.1506},{"n":"South El Monte","c":"United States","y":34.0493,"x":-118.0484},{"n":"Belgrave","c":"United Kingdom","y":52.6566,"x":-1.1262},{"n":"Ijevan","c":"Armenia","y":40.8756,"x":45.1492},{"n":"Baguley","c":"United Kingdom","y":53.399,"x":-2.276},{"n":"Warminster","c":"United Kingdom","y":51.205,"x":-2.181},{"n":"Beinasco","c":"Italy","y":45.0228,"x":7.5878},{"n":"Ostermundigen","c":"Switzerland","y":46.9553,"x":7.4833},{"n":"Zaghouan","c":"Tunisia","y":36.4028,"x":10.1433},{"n":"West Derby","c":"United Kingdom","y":53.4338,"x":-2.907},{"n":"Haslingden","c":"United Kingdom","y":53.705,"x":-2.328},{"n":"Les Clayes-sous-Bois","c":"France","y":48.8206,"x":1.9836},{"n":"Bubanza","c":"Burundi","y":-3.0833,"x":29.4},{"n":"Columbia Heights","c":"United States","y":45.0484,"x":-93.2472},{"n":"Sunbury","c":"United Kingdom","y":51.423,"x":-0.424},{"n":"Stoke Gifford","c":"United Kingdom","y":51.517,"x":-2.548},{"n":"Nailsea","c":"United Kingdom","y":51.43,"x":-2.76},{"n":"Cleckheaton","c":"United Kingdom","y":53.725,"x":-1.719},{"n":"Somoto","c":"Nicaragua","y":13.4833,"x":-86.5833},{"n":"Senta","c":"Serbia","y":45.9314,"x":20.09},{"n":"Shirley","c":"United Kingdom","y":51.3813,"x":-0.0543},{"n":"Leagrave","c":"United Kingdom","y":51.903,"x":-0.466},{"n":"Lomita","c":"United States","y":33.7933,"x":-118.3175},{"n":"Cosham","c":"United Kingdom","y":50.8424,"x":-1.066},{"n":"Enfield Lock","c":"United Kingdom","y":51.6686,"x":-0.026},{"n":"Bayshore Gardens","c":"United States","y":27.4345,"x":-82.5794},{"n":"Agsu","c":"Azerbaijan","y":40.5708,"x":48.3928},{"n":"Agstafa","c":"Azerbaijan","y":41.1167,"x":45.45},{"n":"Bani Hasan ash Shuruq","c":"Egypt","y":27.9314,"x":30.8753},{"n":"Harwich","c":"United Kingdom","y":51.934,"x":1.266},{"n":"Saffron Walden","c":"United Kingdom","y":52.022,"x":0.243},{"n":"Basford","c":"United Kingdom","y":52.978,"x":-1.169},{"n":"Maurepas","c":"France","y":48.7628,"x":1.9456},{"n":"Comrat","c":"Moldova","y":46.3003,"x":28.6572},{"n":"Guastatoya","c":"Guatemala","y":14.8539,"x":-90.0686},{"n":"Kirkland","c":"Canada","y":45.45,"x":-73.8667},{"n":"Qormi","c":"Malta","y":35.8794,"x":14.4722},{"n":"Arvayheer","c":"Mongolia","y":46.2639,"x":102.775},{"n":"Tyldesley","c":"United Kingdom","y":53.5166,"x":-2.4667},{"n":"Sligo","c":"Ireland","y":54.2667,"x":-8.4833},{"n":"Harrison","c":"United States","y":40.7431,"x":-74.1531},{"n":"Cattolica","c":"Italy","y":43.9584,"x":12.7386},{"n":"Hilsea","c":"United Kingdom","y":50.83,"x":-1.07},{"n":"West Chester","c":"United States","y":39.9601,"x":-75.6058},{"n":"Hakha","c":"Myanmar","y":22.65,"x":93.6167},{"n":"Mubende","c":"Uganda","y":0.5904,"x":31.37},{"n":"Ulcinj","c":"Montenegro","y":41.9236,"x":19.2056},{"n":"Tidjikja","c":"Mauritania","y":18.55,"x":-11.4166},{"n":"South San Jose Hills","c":"United States","y":34.0123,"x":-117.9041},{"n":"Kralingse Veer","c":"Netherlands","y":51.9249,"x":4.5071},{"n":"Floirac","c":"France","y":44.8364,"x":-0.5258},{"n":"Stone","c":"United Kingdom","y":52.9,"x":-2.15},{"n":"Morges","c":"Switzerland","y":46.5094,"x":6.4986},{"n":"The Mumbles","c":"United Kingdom","y":51.573,"x":-3.9992},{"n":"Westmount","c":"Canada","y":45.4833,"x":-73.6},{"n":"Kotsyubyns'ke","c":"Ukraine","y":50.4883,"x":30.3331},{"n":"Fazakerley","c":"United Kingdom","y":53.4676,"x":-2.9408},{"n":"Maldon","c":"United Kingdom","y":51.7318,"x":0.6758},{"n":"Saynshand","c":"Mongolia","y":44.8917,"x":110.1367},{"n":"Wombwell","c":"United Kingdom","y":53.516,"x":-1.4},{"n":"Eldama Ravine","c":"Kenya","y":0.0504,"x":35.72},{"n":"West Hempstead","c":"United States","y":40.6959,"x":-73.6507},{"n":"Tilbury","c":"United Kingdom","y":51.4606,"x":0.3582},{"n":"Ciudad de Huitzuco","c":"Mexico","y":18.3,"x":-99.35},{"n":"La Cruz","c":"Mexico","y":23.9214,"x":-106.8919},{"n":"Tlaxcala","c":"Mexico","y":19.3191,"x":-98.1998},{"n":"Larkhall","c":"United Kingdom","y":55.737,"x":-3.972},{"n":"Wondelgem","c":"Belgium","y":51.0889,"x":3.7131},{"n":"Tecuala","c":"Mexico","y":22.4004,"x":-105.46},{"n":"Inirida","c":"Colombia","y":3.8708,"x":-67.9211},{"n":"Biyahmu","c":"Egypt","y":29.3696,"x":30.8538},{"n":"Ribeira Grande","c":"Cabo Verde","y":17.1833,"x":-25.0667},{"n":"Norwood","c":"United States","y":39.1605,"x":-84.4535},{"n":"Ciudad Guadalupe Victoria","c":"Mexico","y":24.4497,"x":-104.1225},{"n":"Kavieng","c":"Papua New Guinea","y":-2.5667,"x":150.8},{"n":"Franconia","c":"United States","y":38.7682,"x":-77.1587},{"n":"Clayton","c":"United Kingdom","y":53.782,"x":-1.8135},{"n":"La Crescenta-Montrose","c":"United States","y":34.2322,"x":-118.2353},{"n":"Telavi","c":"Georgia","y":41.9167,"x":45.4833},{"n":"Faranah","c":"Guinea","y":10.0404,"x":-10.75},{"n":"Phra Pradaeng","c":"Thailand","y":13.659,"x":100.5329},{"n":"Milton","c":"United Kingdom","y":53.05,"x":-2.142},{"n":"Santa Catarina Juquila","c":"Mexico","y":16.2364,"x":-97.2919},{"n":"Kidbrooke","c":"United Kingdom","y":51.465,"x":0.033},{"n":"Shipley","c":"United Kingdom","y":53.833,"x":-1.777},{"n":"Lezhe","c":"Albania","y":41.7805,"x":19.6434},{"n":"Lons-le-Saunier","c":"France","y":46.6744,"x":5.5539},{"n":"Santiago Tulantepec","c":"Mexico","y":20.0397,"x":-98.3575},{"n":"Central Falls","c":"United States","y":41.89,"x":-71.3934},{"n":"Whickham","c":"United Kingdom","y":54.9456,"x":-1.6726},{"n":"Rodolfo Sanchez Taboada","c":"Mexico","y":31.7958,"x":-116.5911},{"n":"Kapsabet","c":"Kenya","y":0.2,"x":35.1},{"n":"Deysbrook","c":"United Kingdom","y":53.429,"x":-2.934},{"n":"Langley Park","c":"United States","y":38.9897,"x":-76.9808},{"n":"Mont-Royal","c":"Canada","y":45.5161,"x":-73.6431},{"n":"Schofield Barracks","c":"United States","y":21.4936,"x":-158.0617},{"n":"Barton upon Irwell","c":"United Kingdom","y":53.476,"x":-2.36},{"n":"Solothurn","c":"Switzerland","y":47.2081,"x":7.5375},{"n":"Lynbrook","c":"United States","y":40.6579,"x":-73.6742},{"n":"Lagawe","c":"Philippines","y":16.8167,"x":121.1},{"n":"Lai","c":"Chad","y":9.4,"x":16.3},{"n":"Bonnyrigg","c":"United Kingdom","y":55.8747,"x":-3.1031},{"n":"Budva","c":"Montenegro","y":42.2847,"x":18.8453},{"n":"Son La","c":"Vietnam","y":21.327,"x":103.9141},{"n":"Arnouville-les-Gonesse","c":"France","y":48.9872,"x":2.4167},{"n":"Tchibanga","c":"Gabon","y":-2.9331,"x":10.9831},{"n":"Ban Rawai","c":"Thailand","y":7.7707,"x":98.3185},{"n":"Al Madamud","c":"Egypt","y":25.7333,"x":32.7125},{"n":"Canovellas","c":"Spain","y":41.6176,"x":2.2814},{"n":"Macas","c":"Ecuador","y":-2.3,"x":-78.1167},{"n":"Partick","c":"United Kingdom","y":55.8699,"x":-4.3125},{"n":"Netherton","c":"United Kingdom","y":52.4908,"x":-2.0835},{"n":"Hermosa Beach","c":"United States","y":33.8654,"x":-118.3966},{"n":"Tillaberi","c":"Niger","y":14.212,"x":1.4531},{"n":"Seacroft","c":"United Kingdom","y":53.8222,"x":-1.4599},{"n":"Tepoztlan","c":"Mexico","y":18.9853,"x":-99.0997},{"n":"Brusciano","c":"Italy","y":40.9224,"x":14.4239},{"n":"Attapu","c":"Laos","y":14.8,"x":106.8333},{"n":"Noisiel","c":"France","y":48.8547,"x":2.6289},{"n":"Morristown","c":"United States","y":40.7966,"x":-74.4772},{"n":"Baildon","c":"United Kingdom","y":53.851,"x":-1.763},{"n":"Sherrelwood","c":"United States","y":39.839,"x":-105.0014},{"n":"Mineola","c":"United States","y":40.7469,"x":-73.6392},{"n":"Sant'Arpino","c":"Italy","y":40.9575,"x":14.2492},{"n":"Harrow Weald","c":"United Kingdom","y":51.604,"x":-0.339},{"n":"Evergreen Park","c":"United States","y":41.7213,"x":-87.7013},{"n":"Addlestone","c":"United Kingdom","y":51.3695,"x":-0.4901},{"n":"Saint-Jean-de-la-Ruelle","c":"France","y":47.9131,"x":1.8733},{"n":"Pemberton","c":"United Kingdom","y":53.536,"x":-2.6738},{"n":"Baabda","c":"Lebanon","y":33.8333,"x":35.5333},{"n":"Bububu","c":"Tanzania","y":-6.1658,"x":39.1992},{"n":"West Wickham","c":"United Kingdom","y":51.3765,"x":-0.0193},{"n":"Binningen","c":"Switzerland","y":47.5333,"x":7.5667},{"n":"Apaxco de Ocampo","c":"Mexico","y":19.9733,"x":-99.17},{"n":"Le Vesinet","c":"France","y":48.8939,"x":2.1322},{"n":"Mao","c":"Chad","y":14.1194,"x":15.3133},{"n":"Saltash","c":"United Kingdom","y":50.408,"x":-4.212},{"n":"Montmagny","c":"France","y":48.9736,"x":2.3458},{"n":"Grajales","c":"Mexico","y":19.25,"x":-97.7833},{"n":"Dzuunmod","c":"Mongolia","y":47.7069,"x":106.9494},{"n":"Bellaire","c":"United States","y":29.704,"x":-95.4622},{"n":"Keetmanshoop","c":"Namibia","y":-26.5833,"x":18.1333},{"n":"Paraguari","c":"Paraguay","y":-25.62,"x":-57.16},{"n":"Hendaye","c":"France","y":43.3586,"x":-1.7744},{"n":"Hazel Grove","c":"United Kingdom","y":53.375,"x":-2.111},{"n":"Northenden","c":"United Kingdom","y":53.4075,"x":-2.2583},{"n":"Hinche","c":"Haiti","y":19.143,"x":-72.004},{"n":"Hun","c":"Libya","y":29.1167,"x":15.9333},{"n":"Kimbe","c":"Papua New Guinea","y":-5.55,"x":150.143},{"n":"Saint-Leu-la-Foret","c":"France","y":49.0169,"x":2.2464},{"n":"Dong Ha","c":"Vietnam","y":16.8056,"x":107.0906},{"n":"Pureparo de Echaiz","c":"Mexico","y":19.9,"x":-102},{"n":"Visaginas","c":"Lithuania","y":55.6,"x":26.4333},{"n":"Marly-le-Roi","c":"France","y":48.8669,"x":2.0942},{"n":"Albal","c":"Spain","y":39.3972,"x":-0.4156},{"n":"Mansa Konko","c":"Gambia, The","y":13.3773,"x":-15.6786},{"n":"Bou Djeniba","c":"Morocco","y":32.9,"x":-6.7833},{"n":"Harnosand","c":"Sweden","y":62.6323,"x":17.9379},{"n":"Tlaltetela","c":"Mexico","y":19.3167,"x":-96.9},{"n":"Prestwick","c":"United Kingdom","y":55.4956,"x":-4.6142},{"n":"Point Pleasant","c":"United States","y":40.0772,"x":-74.0702},{"n":"Masamagrell","c":"Spain","y":39.5703,"x":-0.33},{"n":"Pakwach","c":"Uganda","y":2.45,"x":31.5},{"n":"La Crucecita","c":"Mexico","y":15.7753,"x":-96.1425},{"n":"Rwamagana","c":"Rwanda","y":-1.9525,"x":30.4378},{"n":"Hostomel","c":"Ukraine","y":50.5692,"x":30.2653},{"n":"Buckley","c":"United Kingdom","y":53.172,"x":-3.086},{"n":"Rock Ferry","c":"United Kingdom","y":53.373,"x":-3.008},{"n":"Ahmadli","c":"Azerbaijan","y":40.3839,"x":49.9475},{"n":"Banstead","c":"United Kingdom","y":51.322,"x":-0.204},{"n":"Juchique de Ferrer","c":"Mexico","y":19.8333,"x":-96.7},{"n":"Siyazan","c":"Azerbaijan","y":41.0783,"x":49.1061},{"n":"Hythe","c":"United Kingdom","y":51.0716,"x":1.084},{"n":"Bellwood","c":"United States","y":41.8829,"x":-87.8762},{"n":"Vicente Guerrero","c":"Mexico","y":23.75,"x":-103.9833},{"n":"North Valley Stream","c":"United States","y":40.684,"x":-73.7077},{"n":"Ptuj","c":"Slovenia","y":46.4186,"x":15.8714},{"n":"Leposaviq","c":"Kosovo","y":43.1,"x":20.8},{"n":"Goulmima","c":"Morocco","y":31.6944,"x":-4.9592},{"n":"Sabirabad","c":"Azerbaijan","y":40.0053,"x":48.4719},{"n":"Clitheroe","c":"United Kingdom","y":53.8711,"x":-2.3916},{"n":"Seabrook","c":"United States","y":38.9802,"x":-76.8502},{"n":"Bromborough","c":"United Kingdom","y":53.336,"x":-2.978},{"n":"Avenel","c":"United States","y":40.5839,"x":-74.272},{"n":"Sudley","c":"United States","y":38.7878,"x":-77.4961},{"n":"Jouy-le-Moutier","c":"France","y":49.0108,"x":2.0386},{"n":"Tarrafal","c":"Cabo Verde","y":15.2787,"x":-23.7516},{"n":"Tsetserleg","c":"Mongolia","y":47.4769,"x":101.4503},{"n":"Casandrino","c":"Italy","y":40.9333,"x":14.25},{"n":"Winthrop","c":"United States","y":42.3751,"x":-70.9847},{"n":"Cerritos","c":"Mexico","y":22.4275,"x":-100.2783},{"n":"Carrieres-sous-Poissy","c":"France","y":48.9478,"x":2.0386},{"n":"North Massapequa","c":"United States","y":40.7031,"x":-73.4678},{"n":"Lognes","c":"France","y":48.8361,"x":2.6278},{"n":"Straseni","c":"Moldova","y":47.1414,"x":28.6103},{"n":"Mesa Geitonia","c":"Cyprus","y":34.7024,"x":33.0453},{"n":"Tinguindin","c":"Mexico","y":19.7333,"x":-102.483},{"n":"Oteapan","c":"Mexico","y":18,"x":-94.6667},{"n":"Beausoleil","c":"France","y":43.7419,"x":7.4236},{"n":"Pedreiras","c":"Brazil","y":-4.5696,"x":-44.67},{"n":"Huixcolotla","c":"Mexico","y":18.9219,"x":-97.7708},{"n":"Izamal","c":"Mexico","y":20.9314,"x":-89.0178},{"n":"Ermua","c":"Spain","y":43.1875,"x":-2.5008},{"n":"Bryn Mawr-Skyway","c":"United States","y":47.4949,"x":-122.2411},{"n":"Melksham","c":"United Kingdom","y":51.371,"x":-2.138},{"n":"Yiewsley","c":"United Kingdom","y":51.513,"x":-0.471},{"n":"Coquimatlan","c":"Mexico","y":19.2038,"x":-103.8086},{"n":"North Amityville","c":"United States","y":40.7005,"x":-73.4118},{"n":"Carugate","c":"Italy","y":45.55,"x":9.3333},{"n":"Bidston","c":"United Kingdom","y":53.402,"x":-3.078},{"n":"Forfar","c":"United Kingdom","y":56.6442,"x":-2.8884},{"n":"Zabbar","c":"Malta","y":35.8772,"x":14.5381},{"n":"Brookfield","c":"United States","y":41.8245,"x":-87.847},{"n":"Rutherford","c":"United States","y":40.8203,"x":-74.1057},{"n":"Bartica","c":"Guyana","y":6.4104,"x":-58.63},{"n":"Bebington","c":"United Kingdom","y":53.35,"x":-3.003},{"n":"Wallisellen","c":"Switzerland","y":47.4122,"x":8.5922},{"n":"Merrifield","c":"United States","y":38.8731,"x":-77.2426},{"n":"Arenys de Mar","c":"Spain","y":41.5819,"x":2.5503},{"n":"Madera","c":"Mexico","y":29.19,"x":-108.1414},{"n":"Idylwood","c":"United States","y":38.8896,"x":-77.2055},{"n":"Richmond","c":"New Zealand","y":-41.3333,"x":173.1833},{"n":"Kedougou","c":"Senegal","y":12.5556,"x":-12.1807},{"n":"Hyattsville","c":"United States","y":38.9612,"x":-76.9548},{"n":"Pendlebury","c":"United Kingdom","y":53.5075,"x":-2.3154},{"n":"Filadelfia","c":"Paraguay","y":-22.3333,"x":-60.0167},{"n":"Dedza","c":"Malawi","y":-14.3667,"x":34.3333},{"n":"Gornalwood","c":"United Kingdom","y":52.523,"x":-2.124},{"n":"Llantrisant","c":"United Kingdom","y":51.5423,"x":-3.3785},{"n":"Iselin","c":"United States","y":40.5702,"x":-74.317},{"n":"Sing Buri","c":"Thailand","y":14.8911,"x":100.4031},{"n":"Salaspils","c":"Latvia","y":56.8614,"x":24.35},{"n":"Hessle","c":"United Kingdom","y":53.7239,"x":-0.4319},{"n":"Royston","c":"United Kingdom","y":52.0471,"x":-0.0202},{"n":"La Llagosta","c":"Spain","y":41.5156,"x":2.1928},{"n":"Prachin Buri","c":"Thailand","y":14.0567,"x":101.3739},{"n":"Montargis","c":"France","y":47.9969,"x":2.7325},{"n":"Amblecote","c":"United Kingdom","y":52.46,"x":-2.16},{"n":"Saint Budeaux","c":"United Kingdom","y":50.4033,"x":-4.1856},{"n":"Sainte-Marthe-sur-le-Lac","c":"Canada","y":45.53,"x":-73.93},{"n":"Vynnyky","c":"Ukraine","y":49.8156,"x":24.1297},{"n":"Tunapuna","c":"Trinidad And Tobago","y":10.6333,"x":-61.3833},{"n":"Prilly","c":"Switzerland","y":46.5333,"x":6.6},{"n":"Selby","c":"United Kingdom","y":53.7818,"x":-1.0703},{"n":"Viljandi","c":"Estonia","y":58.3633,"x":25.5956},{"n":"Orange Walk","c":"Belize","y":18.075,"x":-88.5583},{"n":"Torit","c":"South Sudan","y":4.4167,"x":32.5667},{"n":"Bois-d'Arcy","c":"France","y":48.8014,"x":2.0317},{"n":"Saatli","c":"Azerbaijan","y":39.9311,"x":48.3697},{"n":"Luce","c":"France","y":48.4383,"x":1.465},{"n":"Stapleford","c":"United Kingdom","y":52.929,"x":-1.274},{"n":"Mountain House","c":"United States","y":37.774,"x":-121.5452},{"n":"Akhaltsikhe","c":"Georgia","y":41.6389,"x":42.9861},{"n":"Sa Kaeo","c":"Thailand","y":13.8206,"x":102.0589},{"n":"Churriana de la Vega","c":"Spain","y":37.15,"x":-3.65},{"n":"Gines","c":"Spain","y":37.3875,"x":-6.0781},{"n":"Bourne","c":"United Kingdom","y":52.7684,"x":-0.3775},{"n":"Burke Centre","c":"United States","y":38.7903,"x":-77.2999},{"n":"Eppelheim","c":"Germany","y":49.4011,"x":8.6297},{"n":"Sidlice","c":"Poland","y":54.3471,"x":18.6171},{"n":"Thonex","c":"Switzerland","y":46.2,"x":6.2167},{"n":"West Drayton","c":"United Kingdom","y":51.5043,"x":-0.4646},{"n":"Perivale","c":"United Kingdom","y":51.5383,"x":-0.3192},{"n":"Khasab","c":"Oman","y":26.1833,"x":56.25},{"n":"Sidi Zouine","c":"Morocco","y":31.6706,"x":-8.3456},{"n":"Guerrero Negro","c":"Mexico","y":27.9589,"x":-114.0561},{"n":"Kidlington","c":"United Kingdom","y":51.823,"x":-1.291},{"n":"Cizur Mayor","c":"Spain","y":42.7867,"x":-1.6908},{"n":"Santa Rosalia","c":"Mexico","y":27.3389,"x":-112.2669},{"n":"Valparaiso","c":"Mexico","y":22.7667,"x":-103.5667},{"n":"Rosyth","c":"United Kingdom","y":56.0339,"x":-3.4323},{"n":"Ban Houayxay","c":"Laos","y":20.2833,"x":100.4167},{"n":"Kukes","c":"Albania","y":42.0758,"x":20.4231},{"n":"Takoma Park","c":"United States","y":38.981,"x":-77.0028},{"n":"Puerto Ayora","c":"Ecuador","y":-0.7444,"x":-90.3139},{"n":"Brierley Hill","c":"United Kingdom","y":52.4795,"x":-2.1245},{"n":"Little Hulton","c":"United Kingdom","y":53.53,"x":-2.418},{"n":"Marlow","c":"United Kingdom","y":51.57,"x":-0.78},{"n":"Enghien-les-Bains","c":"France","y":48.9697,"x":2.3081},{"n":"Cedar Mill","c":"United States","y":45.5355,"x":-122.8006},{"n":"Esquimalt","c":"Canada","y":48.4306,"x":-123.4147},{"n":"Greenfield","c":"United States","y":36.3232,"x":-121.2451},{"n":"Valenton","c":"France","y":48.745,"x":2.4672},{"n":"Tak","c":"Thailand","y":16.8711,"x":99.125},{"n":"Eilendorf","c":"Germany","y":50.7794,"x":6.1625},{"n":"Lys-les-Lannoy","c":"France","y":50.6714,"x":3.2144},{"n":"Fuzuli","c":"Azerbaijan","y":39.6003,"x":47.1431},{"n":"Phayao","c":"Thailand","y":19.1652,"x":99.9036},{"n":"Haubourdin","c":"France","y":50.6092,"x":2.9869},{"n":"Caerfyrddin","c":"United Kingdom","y":51.856,"x":-4.316},{"n":"Deux-Montagnes","c":"Canada","y":45.5333,"x":-73.8833},{"n":"Mehtar Lam","c":"Afghanistan","y":34.65,"x":70.1833},{"n":"Villa Union","c":"Mexico","y":23.1883,"x":-106.2158},{"n":"Pinewood","c":"United States","y":25.8697,"x":-80.2174},{"n":"Chitipa","c":"Malawi","y":-9.7019,"x":33.27},{"n":"Huitzilan","c":"Mexico","y":19.9667,"x":-97.6833},{"n":"Canet de Mar","c":"Spain","y":41.5911,"x":2.5828},{"n":"Kingstowne","c":"United States","y":38.7625,"x":-77.1445},{"n":"Dumont","c":"United States","y":40.9452,"x":-73.9923},{"n":"Gobabis","c":"Namibia","y":-22.45,"x":18.9667},{"n":"Country Walk","c":"United States","y":25.6331,"x":-80.4353},{"n":"Longwy","c":"France","y":49.5197,"x":5.7606},{"n":"Manassas Park","c":"United States","y":38.7719,"x":-77.445},{"n":"Rossington","c":"United Kingdom","y":53.4759,"x":-1.0613},{"n":"Woodmere","c":"United States","y":40.6374,"x":-73.7219},{"n":"Stanley","c":"United Kingdom","y":53.7145,"x":-1.476},{"n":"Lowton","c":"United Kingdom","y":53.471,"x":-2.569},{"n":"South Houston","c":"United States","y":29.6611,"x":-95.2285},{"n":"Ringwood","c":"United Kingdom","y":50.85,"x":-1.78},{"n":"Sudbury","c":"United Kingdom","y":51.5537,"x":-0.3199},{"n":"Ilkley","c":"United Kingdom","y":53.925,"x":-1.822},{"n":"Guachochi","c":"Mexico","y":26.8194,"x":-107.07},{"n":"Kamuli","c":"Uganda","y":0.9472,"x":33.1197},{"n":"Juan Aldama","c":"Mexico","y":24.291,"x":-103.394},{"n":"Ovenden","c":"United Kingdom","y":53.7432,"x":-1.8779},{"n":"Childwall","c":"United Kingdom","y":53.395,"x":-2.881},{"n":"Ezequiel Montes","c":"Mexico","y":20.6667,"x":-99.8833},{"n":"Saint-Brice-sous-Foret","c":"France","y":48.9986,"x":2.3569},{"n":"Verwood","c":"United Kingdom","y":50.8815,"x":-1.8785},{"n":"Balancan","c":"Mexico","y":17.8,"x":-91.53},{"n":"Rijnsburg","c":"Netherlands","y":52.1897,"x":4.4408},{"n":"Iheddadene","c":"Morocco","y":35.15,"x":-2.9667},{"n":"Whitby","c":"United Kingdom","y":54.4858,"x":-0.6206},{"n":"Hetton le Hole","c":"United Kingdom","y":54.8208,"x":-1.4488},{"n":"Marsabit","c":"Kenya","y":2.3333,"x":37.9833},{"n":"Egg Buckland","c":"United Kingdom","y":50.4006,"x":-4.1136},{"n":"Illizi","c":"Algeria","y":26.508,"x":8.4829},{"n":"Avon","c":"France","y":48.4089,"x":2.725},{"n":"Trstenik","c":"Serbia","y":43.6186,"x":20.9972},{"n":"Hawick","c":"United Kingdom","y":55.422,"x":-2.787},{"n":"Wanstead","c":"United Kingdom","y":51.5778,"x":0.0286},{"n":"Newport Pagnell","c":"United Kingdom","y":52.087,"x":-0.722},{"n":"Rive-de-Gier","c":"France","y":45.5294,"x":4.6169},{"n":"Udelnaya","c":"Russia","y":55.6333,"x":38.0333},{"n":"Tilehurst","c":"United Kingdom","y":51.4579,"x":-1.0406},{"n":"Massapequa Park","c":"United States","y":40.6817,"x":-73.4496},{"n":"Wahiawa","c":"United States","y":21.5005,"x":-158.0198},{"n":"Ma'rib","c":"Yemen","y":15.4228,"x":45.3375},{"n":"Lansdale","c":"United States","y":40.2417,"x":-75.2812},{"n":"Makokou","c":"Gabon","y":0.5667,"x":12.8667},{"n":"Wattignies","c":"France","y":50.585,"x":3.0431},{"n":"Saint-Andre","c":"France","y":50.6603,"x":3.0439},{"n":"Hybla Valley","c":"United States","y":38.7485,"x":-77.0822},{"n":"Shenley Church End","c":"United Kingdom","y":52.022,"x":-0.788},{"n":"Neubiberg","c":"Germany","y":48.0833,"x":11.6833},{"n":"Montesson","c":"France","y":48.9086,"x":2.1494},{"n":"Calkini","c":"Mexico","y":20.3667,"x":-90.05},{"n":"Rozenburg","c":"Netherlands","y":51.9058,"x":4.2486},{"n":"Chaddesden","c":"United Kingdom","y":52.9301,"x":-1.4383},{"n":"San Ignacio","c":"Belize","y":17.1588,"x":-89.0696},{"n":"Marupe","c":"Latvia","y":56.9008,"x":24.0478},{"n":"East Cleveland","c":"United States","y":41.5318,"x":-81.5795},{"n":"Arbon","c":"Switzerland","y":47.5167,"x":9.4333},{"n":"Anzin","c":"France","y":50.3714,"x":3.5044},{"n":"Glassmanor","c":"United States","y":38.8181,"x":-76.9836},{"n":"Cachoeira Alta","c":"Brazil","y":-18.7628,"x":-50.9419},{"n":"Smethwick","c":"United Kingdom","y":52.4928,"x":-1.9682},{"n":"Roosevelt","c":"United States","y":40.6797,"x":-73.5837},{"n":"Mosgiel","c":"New Zealand","y":-45.875,"x":170.348},{"n":"Coseley","c":"United Kingdom","y":52.55,"x":-2.083},{"n":"Brackley","c":"United Kingdom","y":52.032,"x":-1.147},{"n":"Tempoal de Sanchez","c":"Mexico","y":21.5167,"x":-98.3833},{"n":"Villasanta","c":"Italy","y":45.6053,"x":9.3033},{"n":"Live Oak","c":"United States","y":36.986,"x":-121.9804},{"n":"Armthorpe","c":"United Kingdom","y":53.5352,"x":-1.0522},{"n":"Birqash","c":"Egypt","y":30.1692,"x":31.0417},{"n":"Astara","c":"Azerbaijan","y":38.44,"x":48.875},{"n":"Phrae","c":"Thailand","y":18.1436,"x":100.1417},{"n":"Milngavie","c":"United Kingdom","y":55.9421,"x":-4.3137},{"n":"Zvecan","c":"Kosovo","y":42.9,"x":20.8333},{"n":"Plunge","c":"Lithuania","y":55.9167,"x":21.85},{"n":"Puerto Carreno","c":"Colombia","y":6.1889,"x":-67.4858},{"n":"Bodmin","c":"United Kingdom","y":50.466,"x":-4.718},{"n":"Ntungamo","c":"Uganda","y":-0.8794,"x":30.2642},{"n":"Clayton","c":"United States","y":38.6444,"x":-90.3302},{"n":"L'Ancienne-Lorette","c":"Canada","y":46.8,"x":-71.35},{"n":"Redruth","c":"United Kingdom","y":50.233,"x":-5.224},{"n":"Walsall Wood","c":"United Kingdom","y":52.6277,"x":-1.9301},{"n":"San Nicolas de los Ranchos","c":"Mexico","y":19.0667,"x":-98.4833},{"n":"Tukums","c":"Latvia","y":56.9669,"x":23.1531},{"n":"Mollerusa","c":"Spain","y":41.6317,"x":0.8961},{"n":"Ramonville-Saint-Agne","c":"France","y":43.5461,"x":1.4756},{"n":"Hollinwood","c":"United Kingdom","y":53.5183,"x":-2.144},{"n":"Whakatane","c":"New Zealand","y":-37.964,"x":176.984},{"n":"Struga","c":"Macedonia","y":41.1775,"x":20.6789},{"n":"Streetly","c":"United Kingdom","y":52.577,"x":-1.884},{"n":"Fraserburgh","c":"United Kingdom","y":57.693,"x":-2.005},{"n":"Glenmont","c":"United States","y":39.0698,"x":-77.0467},{"n":"Bull Run","c":"United States","y":38.7802,"x":-77.5204},{"n":"Elesbao Veloso","c":"Brazil","y":-6.2019,"x":-42.14},{"n":"Pathum Thani","c":"Thailand","y":13.9841,"x":100.5512},{"n":"Conisbrough","c":"United Kingdom","y":53.479,"x":-1.227},{"n":"Thorpe Saint Andrew","c":"United Kingdom","y":52.6354,"x":1.3431},{"n":"Kretinga","c":"Lithuania","y":55.8758,"x":21.2508},{"n":"Bostonia","c":"United States","y":32.8189,"x":-116.9479},{"n":"Artesia","c":"United States","y":33.8676,"x":-118.0806},{"n":"Yauco","c":"Puerto Rico","y":18.0344,"x":-66.8615},{"n":"Tabernes Blanques","c":"Spain","y":39.5064,"x":-0.3626},{"n":"Blunsdon Saint Andrew","c":"United Kingdom","y":51.61,"x":-1.79},{"n":"Herceg Novi","c":"Montenegro","y":42.4531,"x":18.5375},{"n":"Evington","c":"United Kingdom","y":52.621,"x":-1.072},{"n":"South Orange Village","c":"United States","y":40.7491,"x":-74.2602},{"n":"Chojnow","c":"Poland","y":51.2667,"x":15.9333},{"n":"Broughty Ferry","c":"United Kingdom","y":56.4672,"x":-2.8699},{"n":"Milford Haven","c":"United Kingdom","y":51.7142,"x":-5.0427},{"n":"Bredbury","c":"United Kingdom","y":53.42,"x":-2.113},{"n":"New Milford","c":"United States","y":40.9337,"x":-74.0196},{"n":"Ogijares","c":"Spain","y":37.1167,"x":-3.6},{"n":"Ojus","c":"United States","y":25.9563,"x":-80.1606},{"n":"East Riverdale","c":"United States","y":38.96,"x":-76.9108},{"n":"Castellanza","c":"Italy","y":45.6167,"x":8.9},{"n":"Mongat","c":"Spain","y":41.4667,"x":2.279},{"n":"Hall in Tirol","c":"Austria","y":47.2833,"x":11.5},{"n":"Four Corners","c":"United States","y":44.9291,"x":-122.9731},{"n":"Hillcrest Heights","c":"United States","y":38.8373,"x":-76.9641},{"n":"Rosu","c":"Romania","y":44.4509,"x":26.0083},{"n":"Little Lever","c":"United Kingdom","y":53.563,"x":-2.369},{"n":"Rakvere","c":"Estonia","y":59.3506,"x":26.3611},{"n":"Adelphi","c":"United States","y":39.0017,"x":-76.9649},{"n":"Moussoro","c":"Chad","y":13.6333,"x":16.4833},{"n":"Hazel Park","c":"United States","y":42.4619,"x":-83.0977},{"n":"Ranong","c":"Thailand","y":9.9619,"x":98.6389},{"n":"Mouvaux","c":"France","y":50.7033,"x":3.1406},{"n":"Stanford","c":"United States","y":37.4252,"x":-122.1674},{"n":"Baranzate","c":"Italy","y":45.5167,"x":9.1},{"n":"Nakhon Nayok","c":"Thailand","y":14.2031,"x":101.215},{"n":"Thatto Heath","c":"United Kingdom","y":53.4352,"x":-2.7481},{"n":"Mahikeng","c":"South Africa","y":-25.8653,"x":25.6442},{"n":"Solaro","c":"Italy","y":45.615,"x":9.0839},{"n":"Oulad Hamdane","c":"Morocco","y":32.3412,"x":-6.3725},{"n":"Radovis","c":"Macedonia","y":41.6381,"x":22.4644},{"n":"Naama","c":"Algeria","y":33.2678,"x":-0.3111},{"n":"East San Gabriel","c":"United States","y":34.1198,"x":-118.0807},{"n":"Morangis","c":"France","y":48.7064,"x":2.3347},{"n":"Sedgley","c":"United Kingdom","y":52.54,"x":-2.123},{"n":"Santa Cruz Amilpas","c":"Mexico","y":17.0667,"x":-96.6833},{"n":"Minehead","c":"United Kingdom","y":51.2038,"x":-3.4738},{"n":"Xaignabouli","c":"Laos","y":19.2576,"x":101.7103},{"n":"Koulamoutou","c":"Gabon","y":-1.1333,"x":12.4833},{"n":"Vincent","c":"United States","y":34.0982,"x":-117.9238},{"n":"Varedo","c":"Italy","y":45.6,"x":9.1667},{"n":"Villa Hayes","c":"Paraguay","y":-25.09,"x":-57.53},{"n":"San Miguel Xoxtla","c":"Mexico","y":19.1833,"x":-98.3},{"n":"Wollaston","c":"United Kingdom","y":52.4619,"x":-2.1663},{"n":"Backa Topola","c":"Serbia","y":45.8089,"x":19.635},{"n":"Broadwater","c":"United Kingdom","y":50.8282,"x":-0.3742},{"n":"Monte di Procida","c":"Italy","y":40.8,"x":14.05},{"n":"Mexicaltzingo","c":"Mexico","y":19.2092,"x":-99.5858},{"n":"Kinkala","c":"Congo (Brazzaville)","y":-4.35,"x":14.76},{"n":"Buckingham","c":"United Kingdom","y":51.995,"x":-0.986},{"n":"Castle Bromwich","c":"United Kingdom","y":52.505,"x":-1.7856},{"n":"Aylestone","c":"United Kingdom","y":52.604,"x":-1.154},{"n":"Cherryland","c":"United States","y":37.6792,"x":-122.1038},{"n":"Chard","c":"United Kingdom","y":50.8728,"x":-2.9587},{"n":"Fleury-Merogis","c":"France","y":48.6294,"x":2.3614},{"n":"Spitalfields","c":"United Kingdom","y":51.5166,"x":-0.075},{"n":"Bryn","c":"United Kingdom","y":53.499,"x":-2.657},{"n":"Causeni","c":"Moldova","y":46.6442,"x":29.4139},{"n":"Sutton on Hull","c":"United Kingdom","y":53.7806,"x":-0.3047},{"n":"Persan","c":"France","y":49.1533,"x":2.2711},{"n":"Fontenay-le-Fleury","c":"France","y":48.8136,"x":2.0486},{"n":"Midsomer Norton","c":"United Kingdom","y":51.2842,"x":-2.4817},{"n":"Auray","c":"France","y":47.6678,"x":-2.9825},{"n":"Silute","c":"Lithuania","y":55.35,"x":21.4833},{"n":"Angel R. Cabada","c":"Mexico","y":18.5969,"x":-95.4453},{"n":"Southwick","c":"United Kingdom","y":50.836,"x":-0.239},{"n":"Bijelo Polje","c":"Montenegro","y":43.0292,"x":19.7456},{"n":"Anadyr","c":"Russia","y":64.7333,"x":177.5167},{"n":"Longbenton","c":"United Kingdom","y":55,"x":-1.57},{"n":"Walnut Park","c":"United States","y":33.9683,"x":-118.222},{"n":"Pelsall","c":"United Kingdom","y":52.631,"x":-1.972},{"n":"Maliana","c":"Timor-Leste","y":-8.9917,"x":125.2197},{"n":"Ascension","c":"Mexico","y":31.0928,"x":-107.9964},{"n":"Floral Park","c":"United States","y":40.7226,"x":-73.7029},{"n":"White Center","c":"United States","y":47.5086,"x":-122.348},{"n":"Sukhothai","c":"Thailand","y":17.0142,"x":99.8219},{"n":"Parkway","c":"United States","y":38.4993,"x":-121.452},{"n":"Altay","c":"Mongolia","y":46.3728,"x":96.2572},{"n":"Asperg","c":"Germany","y":48.9064,"x":9.1414},{"n":"Thornbury","c":"United Kingdom","y":51.6094,"x":-2.5249},{"n":"East Rancho Dominguez","c":"United States","y":33.895,"x":-118.1956},{"n":"South River","c":"United States","y":40.4455,"x":-74.3784},{"n":"Peshkopi","c":"Albania","y":41.6831,"x":20.4289},{"n":"Gevgelija","c":"Macedonia","y":41.1392,"x":22.5025},{"n":"Eggertsville","c":"United States","y":42.9665,"x":-78.8065},{"n":"Allestree","c":"United Kingdom","y":52.9519,"x":-1.4856},{"n":"Epinay-sous-Senart","c":"France","y":48.6931,"x":2.5158},{"n":"Lye","c":"United Kingdom","y":52.459,"x":-2.116},{"n":"Brownhills","c":"United Kingdom","y":52.647,"x":-1.933},{"n":"North Arlington","c":"United States","y":40.7875,"x":-74.1273},{"n":"Stranraer","c":"United Kingdom","y":54.902,"x":-5.027},{"n":"McFarland","c":"United States","y":35.6781,"x":-119.2414},{"n":"Palmetto Estates","c":"United States","y":25.6211,"x":-80.3616},{"n":"Uthai Thani","c":"Thailand","y":15.38,"x":100.025},{"n":"Fenton","c":"United Kingdom","y":52.9977,"x":-2.1578},{"n":"Ainaro","c":"Timor-Leste","y":-8.9833,"x":125.5},{"n":"Parlier","c":"United States","y":36.6087,"x":-119.5434},{"n":"Vaires-sur-Marne","c":"France","y":48.8742,"x":2.6381},{"n":"Edinet","c":"Moldova","y":48.1681,"x":27.305},{"n":"Sedavi","c":"Spain","y":39.4271,"x":-0.3849},{"n":"West University Place","c":"United States","y":29.7157,"x":-95.4321},{"n":"Palanga","c":"Lithuania","y":55.9167,"x":21.0639},{"n":"Knutsford","c":"United Kingdom","y":53.3025,"x":-2.3708},{"n":"Chepstow","c":"United Kingdom","y":51.642,"x":-2.675},{"n":"Kiboga","c":"Uganda","y":0.9161,"x":31.7742},{"n":"Seiada","c":"Tunisia","y":35.67,"x":10.9},{"n":"Chilwell","c":"United Kingdom","y":52.916,"x":-1.235},{"n":"Corsham","c":"United Kingdom","y":51.43,"x":-2.19},{"n":"Voisins-le-Bretonneux","c":"France","y":48.7583,"x":2.0508},{"n":"Arpajon","c":"France","y":48.5903,"x":2.2478},{"n":"Sonoita","c":"Mexico","y":31.8614,"x":-112.8544},{"n":"Kurdamir","c":"Azerbaijan","y":40.3383,"x":48.1608},{"n":"La Palma","c":"United States","y":33.8504,"x":-118.0406},{"n":"Avocado Heights","c":"United States","y":34.0381,"x":-118.0026},{"n":"La Tour-de-Peilz","c":"Switzerland","y":46.45,"x":6.8667},{"n":"Pacific Grove","c":"United States","y":36.6192,"x":-121.9255},{"n":"Asbury Park","c":"United States","y":40.2226,"x":-74.0119},{"n":"Kamnik","c":"Slovenia","y":46.225,"x":14.6097},{"n":"Goygol","c":"Azerbaijan","y":40.5905,"x":46.3239},{"n":"Billere","c":"France","y":43.3025,"x":-0.3972},{"n":"Hamworthy","c":"United Kingdom","y":50.7207,"x":-2.0109},{"n":"Saint-Max","c":"France","y":48.7011,"x":6.2067},{"n":"Bellmore","c":"United States","y":40.6569,"x":-73.5285},{"n":"Berkley","c":"United States","y":42.4986,"x":-83.1853},{"n":"Anenecuilco","c":"Mexico","y":18.7781,"x":-98.9861},{"n":"Westbury","c":"United States","y":40.7599,"x":-73.5891},{"n":"La Grange","c":"United States","y":41.8072,"x":-87.8741},{"n":"Santa Maria Jalapa del Marques","c":"Mexico","y":16.4401,"x":-95.4434},{"n":"Devizes","c":"United Kingdom","y":51.353,"x":-1.994},{"n":"Radviliskis","c":"Lithuania","y":55.8,"x":23.55},{"n":"Wilkinsburg","c":"United States","y":40.4442,"x":-79.8733},{"n":"El Fuerte","c":"Mexico","y":26.4214,"x":-108.62},{"n":"Fords","c":"United States","y":40.5415,"x":-74.3124},{"n":"Zubin Potok","c":"Kosovo","y":42.9167,"x":20.6833},{"n":"Isla Mujeres","c":"Mexico","y":21.2084,"x":-86.7115},{"n":"South Farmingdale","c":"United States","y":40.7175,"x":-73.4471},{"n":"La Magdalena Chichicaspa","c":"Mexico","y":19.4181,"x":-99.3228},{"n":"Calvizzano","c":"Italy","y":40.9,"x":14.1833},{"n":"Campbelltown","c":"Australia","y":-34.0733,"x":150.8261},{"n":"Liestal","c":"Switzerland","y":47.4839,"x":7.735},{"n":"Chene-Bougeries","c":"Switzerland","y":46.1833,"x":6.1833},{"n":"Wordsley","c":"United Kingdom","y":52.483,"x":-2.15},{"n":"Tarxien","c":"Malta","y":35.8667,"x":14.5131},{"n":"Snaresbrook","c":"United Kingdom","y":51.587,"x":0.0146},{"n":"Santa Maria Huazolotitlan","c":"Mexico","y":16.3014,"x":-97.9125},{"n":"Paro","c":"Bhutan","y":27.4333,"x":89.4167},{"n":"Broughton Astley","c":"United Kingdom","y":52.5278,"x":-1.2275},{"n":"Montevrain","c":"France","y":48.8753,"x":2.7456},{"n":"Ecublens","c":"Switzerland","y":46.5276,"x":6.5605},{"n":"Phongsali","c":"Laos","y":21.6836,"x":102.1053},{"n":"Lambeth","c":"United Kingdom","y":51.4903,"x":-0.1193},{"n":"Cuencame de Ceniceros","c":"Mexico","y":24.8667,"x":-103.7},{"n":"Quthing","c":"Lesotho","y":-30.4001,"x":27.7002},{"n":"West Park","c":"United States","y":25.984,"x":-80.1923},{"n":"Kidal","c":"Mali","y":18.4333,"x":1.4},{"n":"Wallingford","c":"United Kingdom","y":51.599,"x":-1.125},{"n":"Timperley","c":"United Kingdom","y":53.387,"x":-2.328},{"n":"Parkstone","c":"United Kingdom","y":50.71,"x":-1.95},{"n":"San Isidro Buen Suceso","c":"Mexico","y":19.1528,"x":-98.1069},{"n":"North New Hyde Park","c":"United States","y":40.746,"x":-73.6876},{"n":"Sandridge","c":"United Kingdom","y":51.7808,"x":-0.3038},{"n":"Gwanda","c":"Zimbabwe","y":-20.945,"x":29.025},{"n":"Olton","c":"United Kingdom","y":52.4377,"x":-1.8058},{"n":"Seaford","c":"United States","y":40.6678,"x":-73.4922},{"n":"Masalli","c":"Azerbaijan","y":39.0183,"x":48.6669},{"n":"Kenmore","c":"United States","y":42.9646,"x":-78.8713},{"n":"Fayroz Koh","c":"Afghanistan","y":34.5225,"x":65.2517},{"n":"Leopold","c":"Australia","y":-38.1892,"x":144.4644},{"n":"Baucau","c":"Timor-Leste","y":-8.4667,"x":126.45},{"n":"Saucillo","c":"Mexico","y":28.0333,"x":-105.2833},{"n":"Ocean Pointe","c":"United States","y":21.3145,"x":-158.0289},{"n":"Canegrate","c":"Italy","y":45.5667,"x":8.9333},{"n":"Woolton","c":"United Kingdom","y":53.374,"x":-2.865},{"n":"Le Grand-Saconnex","c":"Switzerland","y":46.2333,"x":6.1167},{"n":"Newport","c":"United States","y":39.0855,"x":-84.4868},{"n":"Cesis","c":"Latvia","y":57.3131,"x":25.2747},{"n":"Killamarsh","c":"United Kingdom","y":53.3205,"x":-1.3116},{"n":"Prescot","c":"United Kingdom","y":53.422,"x":-2.814},{"n":"Ozurgeti","c":"Georgia","y":41.9269,"x":42.0006},{"n":"Jesenice","c":"Slovenia","y":46.4366,"x":14.0602},{"n":"Huntington","c":"United Kingdom","y":53.9926,"x":-1.043},{"n":"Dzitbalche","c":"Mexico","y":20.3167,"x":-90.05},{"n":"Huetor Vega","c":"Spain","y":37.15,"x":-3.5667},{"n":"New Cassel","c":"United States","y":40.76,"x":-73.5649},{"n":"Caldicot","c":"United Kingdom","y":51.591,"x":-2.7492},{"n":"Tadjourah","c":"Djibouti","y":11.7833,"x":42.8833},{"n":"Abergavenny","c":"United Kingdom","y":51.824,"x":-3.0167},{"n":"Eisenstadt","c":"Austria","y":47.8456,"x":16.5189},{"n":"Libertad","c":"Uruguay","y":-34.6333,"x":-56.6192},{"n":"El Menzel","c":"Morocco","y":33.8389,"x":-4.5458},{"n":"Chiautla de Tapia","c":"Mexico","y":18.3,"x":-98.6039},{"n":"San Pedro Jicayan","c":"Mexico","y":16.4167,"x":-97.9833},{"n":"Rorschach","c":"Switzerland","y":47.4786,"x":9.4936},{"n":"Lykovrysi","c":"Greece","y":38.0667,"x":23.7833},{"n":"Lemon Hill","c":"United States","y":38.5172,"x":-121.4573},{"n":"Kemp Mill","c":"United States","y":39.0412,"x":-77.0215},{"n":"Saint-Andre-les-Vergers","c":"France","y":48.2797,"x":4.0539},{"n":"Ondorhaan","c":"Mongolia","y":47.3167,"x":110.65},{"n":"Sironko","c":"Uganda","y":1.2294,"x":34.2481},{"n":"Debar","c":"Macedonia","y":41.525,"x":20.5272},{"n":"Hwlffordd","c":"United Kingdom","y":51.8,"x":-4.97},{"n":"Pierre","c":"United States","y":44.3748,"x":-100.3205},{"n":"Abertillery","c":"United Kingdom","y":51.73,"x":-3.13},{"n":"Biassono","c":"Italy","y":45.6306,"x":9.2744},{"n":"Hoyland Nether","c":"United Kingdom","y":53.4985,"x":-1.4406},{"n":"Bargoed","c":"United Kingdom","y":51.69,"x":-3.24},{"n":"Falls Church","c":"United States","y":38.8847,"x":-77.1751},{"n":"Weehawken","c":"United States","y":40.7676,"x":-74.0167},{"n":"Luganville","c":"Vanuatu","y":-15.5126,"x":167.1766},{"n":"Kriva Palanka","c":"Macedonia","y":42.2017,"x":22.3317},{"n":"Berriozar","c":"Spain","y":42.8361,"x":-1.6714},{"n":"Forecariah","c":"Guinea","y":9.43,"x":-13.098},{"n":"Jaltenango","c":"Mexico","y":15.8725,"x":-92.725},{"n":"Pincourt","c":"Canada","y":45.3833,"x":-73.9833},{"n":"Tierra Colorada","c":"Mexico","y":17.1656,"x":-99.5264},{"n":"Stiring-Wendel","c":"France","y":49.2,"x":6.9292},{"n":"Malvinas Argentinas","c":"Argentina","y":-31.3697,"x":-64.0531},{"n":"Basse Santa Su","c":"Gambia, The","y":13.31,"x":-14.223},{"n":"Ar Rommani","c":"Morocco","y":33.5333,"x":-6.6},{"n":"Baruun-Urt","c":"Mongolia","y":46.6806,"x":113.2792},{"n":"Haddon","c":"United States","y":39.9063,"x":-75.0625},{"n":"Carnoustie","c":"United Kingdom","y":56.5005,"x":-2.7147},{"n":"Port Antonio","c":"Jamaica","y":18.1667,"x":-76.45},{"n":"Ewa Beach","c":"United States","y":21.3181,"x":-158.0073},{"n":"Rayon","c":"Mexico","y":19.1481,"x":-99.58},{"n":"Gabu","c":"Guinea-Bissau","y":12.2833,"x":-14.2167},{"n":"Schwyz","c":"Switzerland","y":47.0211,"x":8.6536},{"n":"Ashby de la Zouch","c":"United Kingdom","y":52.746,"x":-1.476},{"n":"Tonyrefail","c":"United Kingdom","y":51.584,"x":-3.4306},{"n":"Halawa","c":"United States","y":21.3753,"x":-157.9185},{"n":"Sigulda","c":"Latvia","y":57.1539,"x":24.8544},{"n":"Wath upon Dearne","c":"United Kingdom","y":53.5022,"x":-1.3402},{"n":"Hoenheim","c":"France","y":48.6242,"x":7.7547},{"n":"Alsager","c":"United Kingdom","y":53.0961,"x":-2.3048},{"n":"Birsfelden","c":"Switzerland","y":47.5531,"x":7.6231},{"n":"Marsaskala","c":"Malta","y":35.8625,"x":14.5675},{"n":"North Fair Oaks","c":"United States","y":37.4754,"x":-122.2035},{"n":"Bacalar","c":"Mexico","y":18.6769,"x":-88.3953},{"n":"Muna","c":"Mexico","y":20.48,"x":-89.72},{"n":"Hambantota","c":"Sri Lanka","y":6.1241,"x":81.1185},{"n":"Cayey","c":"Puerto Rico","y":18.115,"x":-66.163},{"n":"Haydock","c":"United Kingdom","y":53.4678,"x":-2.6609},{"n":"Neftcala","c":"Azerbaijan","y":39.3791,"x":49.2486},{"n":"Laaouama","c":"Morocco","y":35.7167,"x":-5.8},{"n":"Cudworth","c":"United Kingdom","y":53.5784,"x":-1.4149},{"n":"Zefyri","c":"Greece","y":38.0667,"x":23.7167},{"n":"Qusar","c":"Azerbaijan","y":41.4219,"x":48.4214},{"n":"Villars-sur-Glane","c":"Switzerland","y":46.7833,"x":7.1167},{"n":"San Pedro Ixcatlan","c":"Mexico","y":18.15,"x":-96.5},{"n":"Brislington","c":"United Kingdom","y":51.4316,"x":-2.5439},{"n":"Oulad Ayyad","c":"Morocco","y":32.3333,"x":-6.3833},{"n":"Shoeburyness","c":"United Kingdom","y":51.5316,"x":0.7978},{"n":"Coalcoman de Vazquez Pallares","c":"Mexico","y":18.7771,"x":-103.1596},{"n":"Nuevo Progreso","c":"Mexico","y":26.0561,"x":-97.9522},{"n":"Stone Ridge","c":"United States","y":38.9295,"x":-77.5553},{"n":"Fairview","c":"United States","y":40.8182,"x":-74.0022},{"n":"Porto Esperidiao","c":"Brazil","y":-15.8528,"x":-58.46},{"n":"Halstead","c":"United Kingdom","y":51.9451,"x":0.6411},{"n":"Hawaiian Gardens","c":"United States","y":33.8303,"x":-118.0728},{"n":"Norridge","c":"United States","y":41.9637,"x":-87.8231},{"n":"Wealdstone","c":"United Kingdom","y":51.5957,"x":-0.3352},{"n":"Oakham","c":"United Kingdom","y":52.6705,"x":-0.7333},{"n":"Hatch End","c":"United Kingdom","y":51.601,"x":-0.3743},{"n":"Lemington","c":"United Kingdom","y":54.972,"x":-1.723},{"n":"Street","c":"United Kingdom","y":51.1235,"x":-2.7381},{"n":"Coacoatzintla","c":"Mexico","y":19.65,"x":-96.9333},{"n":"Cowes","c":"United Kingdom","y":50.7595,"x":-1.3002},{"n":"Willowick","c":"United States","y":41.6343,"x":-81.468},{"n":"Kronshagen","c":"Germany","y":54.3333,"x":10.0833},{"n":"Sjenica","c":"Serbia","y":43.2667,"x":20},{"n":"Ville-d'Avray","c":"France","y":48.8261,"x":2.1933},{"n":"Raynes Park","c":"United Kingdom","y":51.4033,"x":-0.2321},{"n":"Burslem","c":"United Kingdom","y":53.0426,"x":-2.1879},{"n":"Waimalu","c":"United States","y":21.3913,"x":-157.9345},{"n":"Chinsali","c":"Zambia","y":-10.5496,"x":32.06},{"n":"Ryhope","c":"United Kingdom","y":54.8679,"x":-1.3698},{"n":"Chichihualco","c":"Mexico","y":17.655,"x":-99.674},{"n":"Bishops Cleeve","c":"United Kingdom","y":51.947,"x":-2.061},{"n":"Helston","c":"United Kingdom","y":50.1,"x":-5.27},{"n":"Ponte San Pietro","c":"Italy","y":45.6978,"x":9.5881},{"n":"Cetinje","c":"Montenegro","y":42.3933,"x":18.9219},{"n":"Talant","c":"France","y":47.3364,"x":5.0056},{"n":"Kisoro","c":"Uganda","y":-1.3539,"x":29.6983},{"n":"San Gregorio di Catania","c":"Italy","y":37.5667,"x":15.1167},{"n":"Franklin Park","c":"United States","y":40.4439,"x":-74.5432},{"n":"Olympia Heights","c":"United States","y":25.7241,"x":-80.339},{"n":"Nacaome","c":"Honduras","y":13.5333,"x":-87.4833},{"n":"Kuressaare","c":"Estonia","y":58.2533,"x":22.4861},{"n":"Altamirano","c":"Mexico","y":16.7361,"x":-92.0389},{"n":"Chicago Ridge","c":"United States","y":41.7034,"x":-87.7795},{"n":"Kippax","c":"United Kingdom","y":53.7669,"x":-1.3705},{"n":"Bishopstoke","c":"United Kingdom","y":50.9679,"x":-1.3278},{"n":"Canatlan","c":"Mexico","y":24.52,"x":-104.78},{"n":"Collingswood","c":"United States","y":39.916,"x":-75.0759},{"n":"Negele","c":"Ethiopia","y":5.3166,"x":39.5833},{"n":"Risca","c":"United Kingdom","y":51.608,"x":-3.091},{"n":"Glascote","c":"United Kingdom","y":52.6245,"x":-1.668},{"n":"Cheam","c":"United Kingdom","y":51.36,"x":-0.21},{"n":"Plav","c":"Montenegro","y":42.5956,"x":19.945},{"n":"Saint Ann's Bay","c":"Jamaica","y":18.435,"x":-77.2017},{"n":"Sveti Nikole","c":"Macedonia","y":41.865,"x":21.9425},{"n":"Whitefish Bay","c":"United States","y":43.1132,"x":-87.9004},{"n":"Deville-les-Rouen","c":"France","y":49.4697,"x":1.0497},{"n":"Bexley","c":"United States","y":39.965,"x":-82.9343},{"n":"San Patricio","c":"Mexico","y":19.2,"x":-104.6833},{"n":"Harper Woods","c":"United States","y":42.439,"x":-82.9292},{"n":"Bar","c":"Montenegro","y":42.1,"x":19.1},{"n":"Las Veredas","c":"Mexico","y":23.15,"x":-109.7},{"n":"Gonzalez","c":"Mexico","y":22.8281,"x":-98.4306},{"n":"Naifaru","c":"Maldives","y":5.4442,"x":73.3662},{"n":"Princeton Meadows","c":"United States","y":40.3332,"x":-74.5628},{"n":"Highland Park","c":"United States","y":40.5006,"x":-74.4283},{"n":"Tovuz","c":"Azerbaijan","y":40.9864,"x":45.6275},{"n":"Forest Park","c":"United States","y":41.8683,"x":-87.8157},{"n":"Ang Thong","c":"Thailand","y":14.5926,"x":100.4574},{"n":"Henley on Thames","c":"United Kingdom","y":51.536,"x":-0.898},{"n":"Shterpce","c":"Kosovo","y":42.2333,"x":21.0167},{"n":"Epinay-sur-Orge","c":"France","y":48.6739,"x":2.3272},{"n":"Aberaman","c":"United Kingdom","y":51.7,"x":-3.4333},{"n":"Mit Damsis","c":"Egypt","y":30.8267,"x":31.2226},{"n":"Torpoint","c":"United Kingdom","y":50.376,"x":-4.205},{"n":"Hirnyk","c":"Ukraine","y":48.05,"x":37.3667},{"n":"Roselle Park","c":"United States","y":40.6653,"x":-74.2666},{"n":"San Luis de La Loma","c":"Mexico","y":17.2714,"x":-100.8911},{"n":"Imsida","c":"Malta","y":35.8986,"x":14.4839},{"n":"Akil","c":"Mexico","y":20.2656,"x":-89.3478},{"n":"Craponne","c":"France","y":45.7453,"x":4.7233},{"n":"Tavistock","c":"United Kingdom","y":50.545,"x":-4.15},{"n":"Dugny","c":"France","y":48.9536,"x":2.4164},{"n":"Cupar","c":"United Kingdom","y":56.32,"x":-3.01},{"n":"Marton","c":"United Kingdom","y":54.5406,"x":-1.2124},{"n":"Capodrise","c":"Italy","y":41.05,"x":14.3},{"n":"Beaumont","c":"France","y":45.7517,"x":3.0831},{"n":"San Carlos","c":"Nicaragua","y":11.2,"x":-84.8333},{"n":"Stanwell","c":"United Kingdom","y":51.457,"x":-0.4715},{"n":"Nazaret","c":"Spain","y":39.4481,"x":-0.3335},{"n":"Grover Beach","c":"United States","y":35.1204,"x":-120.6199},{"n":"Ormesson-sur-Marne","c":"France","y":48.7858,"x":2.5383},{"n":"Brierfield","c":"United Kingdom","y":53.824,"x":-2.235},{"n":"Chanteloup-les-Vignes","c":"France","y":48.9783,"x":2.0308},{"n":"Chatteris","c":"United Kingdom","y":52.456,"x":0.055},{"n":"Ifield","c":"United Kingdom","y":51.1234,"x":-0.2073},{"n":"Buckhurst Hill","c":"United Kingdom","y":51.632,"x":0.036},{"n":"Santa Ana","c":"Costa Rica","y":9.932,"x":-84.176},{"n":"Nuevo Ideal","c":"Mexico","y":24.8875,"x":-105.0728},{"n":"Maromme","c":"France","y":49.4819,"x":1.0419},{"n":"Faya","c":"Chad","y":17.93,"x":19.1031},{"n":"Eaton Socon","c":"United Kingdom","y":52.22,"x":-0.29},{"n":"Domzale","c":"Slovenia","y":46.1333,"x":14.6},{"n":"Negotino","c":"Macedonia","y":41.4839,"x":22.0892},{"n":"Gzira","c":"Malta","y":35.905,"x":14.4939},{"n":"Horsell","c":"United Kingdom","y":51.3286,"x":-0.5617},{"n":"Whitchurch","c":"United Kingdom","y":52.969,"x":-2.682},{"n":"Platon Sanchez","c":"Mexico","y":21.2833,"x":-98.3667},{"n":"Edgewater","c":"United States","y":40.8237,"x":-73.974},{"n":"Corinda","c":"Australia","y":-27.4833,"x":153.1},{"n":"Kumi","c":"Uganda","y":1.4608,"x":33.9361},{"n":"Stocksbridge","c":"United Kingdom","y":53.478,"x":-1.588},{"n":"Swieqi","c":"Malta","y":35.9208,"x":14.48},{"n":"Meliana","c":"Spain","y":39.5272,"x":-0.3492},{"n":"Kilsyth","c":"United Kingdom","y":55.98,"x":-4.06},{"n":"Drochia","c":"Moldova","y":48.0308,"x":27.8126},{"n":"Tlacotalpan","c":"Mexico","y":18.6167,"x":-95.6667},{"n":"Montigny-en-Gohelle","c":"France","y":50.4278,"x":2.9297},{"n":"Delemont","c":"Switzerland","y":47.3653,"x":7.3472},{"n":"Mannedorf","c":"Switzerland","y":47.2553,"x":8.6917},{"n":"Nieuw Nickerie","c":"Suriname","y":5.9261,"x":-56.9731},{"n":"Mwanza","c":"Malawi","y":-15.6167,"x":34.5167},{"n":"San Juanito","c":"Mexico","y":27.97,"x":-107.6003},{"n":"Barnoldswick","c":"United Kingdom","y":53.9147,"x":-2.1895},{"n":"Mariental","c":"Namibia","y":-24.6333,"x":17.9667},{"n":"Tixkokob","c":"Mexico","y":21.0022,"x":-89.3936},{"n":"Santa Ana","c":"Mexico","y":30.5406,"x":-111.1205},{"n":"Magugpo Poblacion","c":"Philippines","y":7.3821,"x":125.8017},{"n":"Acanceh","c":"Mexico","y":20.8133,"x":-89.4524},{"n":"La Grange Park","c":"United States","y":41.8308,"x":-87.8723},{"n":"Shorewood","c":"United States","y":43.0914,"x":-87.8864},{"n":"Jarville-la-Malgrange","c":"France","y":48.6694,"x":6.2061},{"n":"Flixton","c":"United Kingdom","y":53.447,"x":-2.391},{"n":"Bocas del Toro","c":"Panama","y":9.3333,"x":-82.25},{"n":"Tetela del Volcan","c":"Mexico","y":18.8931,"x":-98.7297},{"n":"Steinbach am Taunus","c":"Germany","y":50.1678,"x":8.5719},{"n":"Handsworth","c":"United Kingdom","y":53.37,"x":-1.4},{"n":"Nova Gorica","c":"Slovenia","y":45.9667,"x":13.65},{"n":"Coatesville","c":"United States","y":39.9849,"x":-75.8199},{"n":"Zejtun","c":"Malta","y":35.8556,"x":14.5333},{"n":"Kibuye","c":"Rwanda","y":-2.0594,"x":29.3481},{"n":"Pajacuaran","c":"Mexico","y":20.1178,"x":-102.5667},{"n":"Hellesdon","c":"United Kingdom","y":52.6485,"x":1.2509},{"n":"Shepton Mallet","c":"United Kingdom","y":51.193,"x":-2.546},{"n":"La Huacana","c":"Mexico","y":18.9625,"x":-101.8069},{"n":"Crosne","c":"France","y":48.7147,"x":2.4611},{"n":"Gaillard","c":"France","y":46.185,"x":6.2075},{"n":"Inverurie","c":"United Kingdom","y":57.28,"x":-2.38},{"n":"Steinkjer","c":"Norway","y":64.0147,"x":11.4942},{"n":"Sugarland Run","c":"United States","y":39.0309,"x":-77.3762},{"n":"Psychiko","c":"Greece","y":38.018,"x":23.7804},{"n":"New Carrollton","c":"United States","y":38.9654,"x":-76.8773},{"n":"San Ignacio Cohuirimpo","c":"Mexico","y":27.05,"x":-109.4167},{"n":"Procida","c":"Italy","y":40.7667,"x":14.0333},{"n":"Caudebec-les-Elbeuf","c":"France","y":49.2808,"x":1.0211},{"n":"Valga","c":"Estonia","y":57.7769,"x":26.0311},{"n":"Ialoveni","c":"Moldova","y":46.9431,"x":28.7778},{"n":"Ridgefield Park","c":"United States","y":40.8543,"x":-74.0201},{"n":"Obo","c":"Central African Republic","y":5.4,"x":26.5},{"n":"Daru","c":"Papua New Guinea","y":-9.0833,"x":143.2},{"n":"Lamphun","c":"Thailand","y":18.5865,"x":99.0121},{"n":"Cuatro Cienegas de Carranza","c":"Mexico","y":26.9861,"x":-102.0664},{"n":"Ziniare","c":"Burkina Faso","y":12.5833,"x":-1.3},{"n":"Key Biscayne","c":"United States","y":25.6908,"x":-80.1653},{"n":"Federal Heights","c":"United States","y":39.8651,"x":-105.0154},{"n":"Cornelius","c":"United States","y":45.519,"x":-123.0514},{"n":"Kingston","c":"United States","y":41.2652,"x":-75.8875},{"n":"Ardmore","c":"United States","y":40.0033,"x":-75.2947},{"n":"Tacotalpa","c":"Mexico","y":17.5931,"x":-92.8258},{"n":"University Heights","c":"United States","y":41.4948,"x":-81.5348},{"n":"Pierre-Benite","c":"France","y":45.7036,"x":4.8242},{"n":"Candelaria","c":"Mexico","y":18.1844,"x":-91.0461},{"n":"Chai Nat","c":"Thailand","y":15.1872,"x":100.1283},{"n":"Rokiskis","c":"Lithuania","y":55.9616,"x":25.5807},{"n":"Wilton Manors","c":"United States","y":26.1593,"x":-80.1395},{"n":"Valadares","c":"Portugal","y":41.0997,"x":-8.6403},{"n":"Lagamar","c":"Brazil","y":-18.1778,"x":-46.8078},{"n":"At Tur","c":"Egypt","y":28.2333,"x":33.6167},{"n":"Blackwood","c":"United Kingdom","y":51.67,"x":-3.19},{"n":"Oroquieta","c":"Philippines","y":8.4859,"x":123.8048},{"n":"Santa Venera","c":"Malta","y":35.8903,"x":14.4778},{"n":"Exhall","c":"United Kingdom","y":52.47,"x":-1.48},{"n":"Manati","c":"Puerto Rico","y":18.4283,"x":-66.4823},{"n":"Tartar","c":"Azerbaijan","y":40.3353,"x":46.9303},{"n":"Clarkston","c":"United States","y":33.8117,"x":-84.2404},{"n":"Caernarfon","c":"United Kingdom","y":53.14,"x":-4.27},{"n":"Shildon","c":"United Kingdom","y":54.63,"x":-1.65},{"n":"Tlahualilo de Zaragoza","c":"Mexico","y":26.1167,"x":-103.45},{"n":"Tinqueux","c":"France","y":49.25,"x":3.9908},{"n":"Hincesti","c":"Moldova","y":46.8258,"x":28.5936},{"n":"Nairn","c":"United Kingdom","y":57.586,"x":-3.869},{"n":"Attard","c":"Malta","y":35.9,"x":14.45},{"n":"Ermoupoli","c":"Greece","y":37.4504,"x":24.9333},{"n":"Lantana","c":"United States","y":26.5834,"x":-80.0564},{"n":"Ahuacatlan","c":"Mexico","y":21.0536,"x":-104.4869},{"n":"Roby","c":"United Kingdom","y":53.413,"x":-2.852},{"n":"Ntcheu","c":"Malawi","y":-14.8167,"x":34.6333},{"n":"Singerei","c":"Moldova","y":47.6406,"x":28.1419},{"n":"Nueva Palmira","c":"Uruguay","y":-33.87,"x":-58.408},{"n":"L'Ile-Saint-Denis","c":"France","y":48.9358,"x":2.3397},{"n":"Broadstone","c":"United Kingdom","y":50.7605,"x":-1.995},{"n":"Avranches","c":"France","y":48.6844,"x":-1.3569},{"n":"San Marzano sul Sarno","c":"Italy","y":40.7697,"x":14.5947},{"n":"Murska Sobota","c":"Slovenia","y":46.6586,"x":16.1619},{"n":"Pelham","c":"United States","y":40.9,"x":-73.8064},{"n":"Cherry Creek","c":"United States","y":39.6094,"x":-104.8645},{"n":"Bradford-on-Avon","c":"United Kingdom","y":51.347,"x":-2.251},{"n":"Worsley","c":"United Kingdom","y":53.5093,"x":-2.3845},{"n":"Rio Grande","c":"Puerto Rico","y":18.3789,"x":-65.8388},{"n":"Chapeltown","c":"United Kingdom","y":53.462,"x":-1.466},{"n":"Marquette-les-Lille","c":"France","y":50.6758,"x":3.0661},{"n":"San Sebastiano al Vesuvio","c":"Italy","y":40.8333,"x":14.3667},{"n":"Ciudad Tula","c":"Mexico","y":23,"x":-99.72},{"n":"Bulgan","c":"Mongolia","y":48.8103,"x":103.5408},{"n":"Fosses","c":"France","y":49.0981,"x":2.5067},{"n":"Mariehamn","c":"Finland","y":60.0986,"x":19.9444},{"n":"Taraclia","c":"Moldova","y":45.9,"x":28.6689},{"n":"Warfield","c":"United Kingdom","y":51.442,"x":-0.737},{"n":"Zamora","c":"Ecuador","y":-4.0692,"x":-78.9567},{"n":"Chavannes-pres-Renens","c":"Switzerland","y":46.5282,"x":6.5762},{"n":"Croissy-sur-Seine","c":"France","y":48.8778,"x":2.1422},{"n":"Utley","c":"United Kingdom","y":53.88,"x":-1.91},{"n":"Voru","c":"Estonia","y":57.8486,"x":26.9928},{"n":"Minnehaha","c":"United States","y":45.6577,"x":-122.6204},{"n":"Beylaqan","c":"Azerbaijan","y":39.7692,"x":47.6156},{"n":"Cesa","c":"Italy","y":40.9667,"x":14.2333},{"n":"Patchogue","c":"United States","y":40.7621,"x":-73.0185},{"n":"Oak Hills","c":"United States","y":45.5403,"x":-122.8413},{"n":"Allington","c":"United Kingdom","y":51.2903,"x":0.5019},{"n":"Igny","c":"France","y":48.7422,"x":2.2261},{"n":"Cuapiaxtla de Madero","c":"Mexico","y":18.9167,"x":-97.8167},{"n":"Heybridge","c":"United Kingdom","y":51.7417,"x":0.6897},{"n":"Qufadah","c":"Egypt","y":28.5812,"x":30.7554},{"n":"Tlalixtac de Cabrera","c":"Mexico","y":17.0667,"x":-96.65},{"n":"Neuville-les-Dieppe","c":"France","y":49.9267,"x":1.1014},{"n":"Qalat","c":"Afghanistan","y":32.1061,"x":66.9069},{"n":"Batken","c":"Kyrgyzstan","y":40.0625,"x":70.8194},{"n":"Ayapango","c":"Mexico","y":19.1264,"x":-98.8028},{"n":"Sallaumines","c":"France","y":50.4197,"x":2.8622},{"n":"North Merrick","c":"United States","y":40.6871,"x":-73.5615},{"n":"Eybens","c":"France","y":45.1486,"x":5.7503},{"n":"Home Gardens","c":"United States","y":33.8784,"x":-117.5116},{"n":"Falesti","c":"Moldova","y":47.5736,"x":27.7092},{"n":"Xicotencatl","c":"Mexico","y":22.9958,"x":-98.9447},{"n":"Assomada","c":"Cabo Verde","y":15.0949,"x":-23.6654},{"n":"Druskininkai","c":"Lithuania","y":54.0206,"x":23.9725},{"n":"Tottington","c":"United Kingdom","y":53.613,"x":-2.339},{"n":"Izola","c":"Slovenia","y":45.5395,"x":13.6604},{"n":"Floresti","c":"Moldova","y":47.8933,"x":28.3014},{"n":"Emeryville","c":"United States","y":37.8382,"x":-122.2932},{"n":"Cimislia","c":"Moldova","y":46.52,"x":28.7842},{"n":"Choix","c":"Mexico","y":26.7061,"x":-108.3219},{"n":"Dinnington","c":"United Kingdom","y":53.3667,"x":-1.2},{"n":"Tzucacab","c":"Mexico","y":20.0708,"x":-89.0506},{"n":"Anahuac","c":"Mexico","y":28.48,"x":-106.7442},{"n":"Portico di Caserta","c":"Italy","y":41.05,"x":14.2833},{"n":"Barwell","c":"United Kingdom","y":52.5682,"x":-1.3462},{"n":"Khunays","c":"Tunisia","y":35.7122,"x":10.8167},{"n":"San Gregorio Atzompa","c":"Mexico","y":19.0224,"x":-98.3445},{"n":"Tekit","c":"Mexico","y":20.5322,"x":-89.3314},{"n":"Mpigi","c":"Uganda","y":0.225,"x":32.3136},{"n":"Greenhill","c":"United Kingdom","y":51.36,"x":1.103},{"n":"Robertsport","c":"Liberia","y":6.7533,"x":-11.3686},{"n":"Dundo","c":"Angola","y":-7.38,"x":20.83},{"n":"Massagno","c":"Switzerland","y":46.0167,"x":8.95},{"n":"Hasbrouck Heights","c":"United States","y":40.8618,"x":-74.0741},{"n":"Larbert","c":"United Kingdom","y":56.0229,"x":-3.826},{"n":"Bougival","c":"France","y":48.865,"x":2.1394},{"n":"Clayton le Moors","c":"United Kingdom","y":53.775,"x":-2.384},{"n":"Dowlais","c":"United Kingdom","y":51.7585,"x":-3.3416},{"n":"Red Bank","c":"United States","y":40.3481,"x":-74.0672},{"n":"Ferney-Voltaire","c":"France","y":46.2558,"x":6.1081},{"n":"Saint Peters","c":"United Kingdom","y":51.3651,"x":1.4191},{"n":"Amatlan de los Reyes","c":"Mexico","y":18.8457,"x":-96.9149},{"n":"Rabat","c":"Malta","y":35.8826,"x":14.3978},{"n":"Lydney","c":"United Kingdom","y":51.7286,"x":-2.5285},{"n":"South Miami","c":"United States","y":25.7079,"x":-80.2952},{"n":"Llantwit Major","c":"United Kingdom","y":51.4062,"x":-3.475},{"n":"Widnau","c":"Switzerland","y":47.3997,"x":9.6333},{"n":"Rosario","c":"Uruguay","y":-34.3139,"x":-57.3525},{"n":"Gedling","c":"United Kingdom","y":52.975,"x":-1.081},{"n":"Da Nang","c":"Vietnam","y":16.0748,"x":108.224},{"n":"San Jose el Viejo","c":"Mexico","y":23.1226,"x":-109.712},{"n":"Bures-sur-Yvette","c":"France","y":48.6967,"x":2.1614},{"n":"Zurrieq","c":"Malta","y":35.8292,"x":14.4744},{"n":"Clawson","c":"United States","y":42.5367,"x":-83.1504},{"n":"Berane","c":"Montenegro","y":42.8473,"x":19.8694},{"n":"Launceston","c":"United Kingdom","y":50.635,"x":-4.354},{"n":"Newman","c":"United States","y":37.3157,"x":-121.0211},{"n":"Naranja","c":"United States","y":25.5164,"x":-80.4221},{"n":"Birtley","c":"United Kingdom","y":54.9,"x":-1.577},{"n":"Tiptree","c":"United Kingdom","y":51.81,"x":0.75},{"n":"Ndele","c":"Central African Republic","y":8.4091,"x":20.653},{"n":"Woodbridge","c":"United Kingdom","y":52.094,"x":1.318},{"n":"View Park-Windsor Hills","c":"United States","y":33.9955,"x":-118.3484},{"n":"Fort Liberte","c":"Haiti","y":19.6656,"x":-71.8448},{"n":"Skofja Loka","c":"Slovenia","y":46.1655,"x":14.3064},{"n":"Boxley","c":"United Kingdom","y":51.3024,"x":0.5429},{"n":"North Wantagh","c":"United States","y":40.6983,"x":-73.5086},{"n":"Bol","c":"Chad","y":13.4586,"x":14.7147},{"n":"Epalinges","c":"Switzerland","y":46.55,"x":6.6667},{"n":"Kilchberg","c":"Switzerland","y":47.3247,"x":8.5492},{"n":"Coahuitlan","c":"Mexico","y":20.2667,"x":-97.7167},{"n":"Sidney","c":"Canada","y":48.6506,"x":-123.3986},{"n":"Bothell East","c":"United States","y":47.8064,"x":-122.1845},{"n":"Bihorel","c":"France","y":49.4547,"x":1.1167},{"n":"Elektrenai","c":"Lithuania","y":54.7886,"x":24.6612},{"n":"Le Plessis-Bouchard","c":"France","y":49.0028,"x":2.2367},{"n":"Higuera de Zaragoza","c":"Mexico","y":25.95,"x":-109.2833},{"n":"Thornhill","c":"United Kingdom","y":53.6622,"x":-1.6124},{"n":"Alotau","c":"Papua New Guinea","y":-10.3167,"x":150.4333},{"n":"Brandon","c":"United Kingdom","y":52.4474,"x":0.6242},{"n":"Rafael Lucio","c":"Mexico","y":19.5922,"x":-96.9819},{"n":"Mountain Ash","c":"United Kingdom","y":51.6814,"x":-3.3792},{"n":"Shanhur","c":"Egypt","y":25.8604,"x":32.7779},{"n":"Casapulla","c":"Italy","y":41.0667,"x":14.2833},{"n":"Alum Rock","c":"United States","y":37.3695,"x":-121.8241},{"n":"Beauchamp","c":"France","y":49.0139,"x":2.19},{"n":"Delcevo","c":"Macedonia","y":41.9661,"x":22.7747},{"n":"Le Portel","c":"France","y":50.7067,"x":1.5733},{"n":"Saron","c":"South Africa","y":-33.181,"x":19.01},{"n":"La Junta","c":"Mexico","y":28.4778,"x":-107.3317},{"n":"Westwood Lakes","c":"United States","y":25.7237,"x":-80.3717},{"n":"Yeadon","c":"United States","y":39.9325,"x":-75.2527},{"n":"Wallington","c":"United States","y":40.8535,"x":-74.1069},{"n":"Sanniquellie","c":"Liberia","y":7.371,"x":-8.685},{"n":"Cam","c":"United Kingdom","y":51.7,"x":-2.3667},{"n":"Vaucresson","c":"France","y":48.8425,"x":2.1528},{"n":"Waipio","c":"United States","y":21.4143,"x":-157.9965},{"n":"Qax","c":"Azerbaijan","y":41.4194,"x":46.9181},{"n":"Groslay","c":"France","y":48.9867,"x":2.3444},{"n":"Maili","c":"United States","y":21.4134,"x":-158.1702},{"n":"Sandiacre","c":"United Kingdom","y":52.923,"x":-1.291},{"n":"River Edge","c":"United States","y":40.9268,"x":-74.0387},{"n":"Yuscaran","c":"Honduras","y":13.9433,"x":-86.8667},{"n":"Halacho","c":"Mexico","y":20.4764,"x":-90.0819},{"n":"Signal Hill","c":"United States","y":33.8029,"x":-118.1681},{"n":"Hadibu","c":"Yemen","y":12.6519,"x":54.0239},{"n":"Weissenthurm","c":"Germany","y":50.4144,"x":7.4606},{"n":"Leven","c":"United Kingdom","y":56.195,"x":-2.9942},{"n":"Concordia","c":"Mexico","y":23.2883,"x":-106.0675},{"n":"Bonhill","c":"United Kingdom","y":55.983,"x":-4.567},{"n":"Nidau","c":"Switzerland","y":47.1256,"x":7.2403},{"n":"Leavesden Green","c":"United Kingdom","y":51.6967,"x":-0.3991},{"n":"Kirkwall","c":"United Kingdom","y":58.981,"x":-2.96},{"n":"Sant'Agnello","c":"Italy","y":40.6294,"x":14.3996},{"n":"Glastonbury","c":"United Kingdom","y":51.1485,"x":-2.714},{"n":"Mahadipur","c":"India","y":24.8566,"x":88.1248},{"n":"Dunbar","c":"United Kingdom","y":56.0027,"x":-2.5169},{"n":"Narborough","c":"United Kingdom","y":52.5727,"x":-1.2023},{"n":"Bolton upon Dearne","c":"United Kingdom","y":53.5197,"x":-1.3148},{"n":"Zacapoaxtla","c":"Mexico","y":19.8833,"x":-97.5833},{"n":"Torre Boldone","c":"Italy","y":45.7167,"x":9.7},{"n":"Ambilly","c":"France","y":46.195,"x":6.2242},{"n":"Cullercoats","c":"United Kingdom","y":55.033,"x":-1.433},{"n":"Yarm","c":"United Kingdom","y":54.505,"x":-1.348},{"n":"Evian-les-Bains","c":"France","y":46.4006,"x":6.59},{"n":"Vanimo","c":"Papua New Guinea","y":-2.6817,"x":141.3014},{"n":"Heer","c":"Netherlands","y":50.8406,"x":5.7269},{"n":"Stopsley","c":"United Kingdom","y":51.899,"x":-0.396},{"n":"Rye","c":"United Kingdom","y":50.95,"x":0.73},{"n":"Perenchies","c":"France","y":50.6681,"x":2.9725},{"n":"Reinosa","c":"Spain","y":43.0019,"x":-4.1378},{"n":"Billy-Montigny","c":"France","y":50.4181,"x":2.9119},{"n":"Lekeitio","c":"Spain","y":43.3622,"x":-2.4961},{"n":"Magas","c":"Russia","y":43.1667,"x":44.8167},{"n":"Westgate on Sea","c":"United Kingdom","y":51.3814,"x":1.3381},{"n":"Piedmont","c":"United States","y":37.8226,"x":-122.23},{"n":"Great Burstead","c":"United Kingdom","y":51.604,"x":0.445},{"n":"Rossmoor","c":"United States","y":33.7886,"x":-118.0803},{"n":"Guttenberg","c":"United States","y":40.7927,"x":-74.0048},{"n":"Dobroesti","c":"Romania","y":44.451,"x":26.1833},{"n":"Summit","c":"United States","y":41.7877,"x":-87.8146},{"n":"Rezina","c":"Moldova","y":47.7492,"x":28.9622},{"n":"Loikaw","c":"Myanmar","y":19.6742,"x":97.2092},{"n":"Newbold","c":"United Kingdom","y":53.2519,"x":-1.4461},{"n":"Ablon-sur-Seine","c":"France","y":48.7256,"x":2.4211},{"n":"Orange Cove","c":"United States","y":36.6211,"x":-119.3188},{"n":"San Juan Ixcaquixtla","c":"Mexico","y":18.45,"x":-97.8167},{"n":"Montmelo","c":"Spain","y":41.5547,"x":2.25},{"n":"Sundon","c":"United Kingdom","y":51.92,"x":-0.47},{"n":"Tataltepec de Valdes","c":"Mexico","y":16.3064,"x":-97.5461},{"n":"Woodchurch","c":"United Kingdom","y":53.375,"x":-3.084},{"n":"Coamo","c":"Puerto Rico","y":18.0765,"x":-66.3638},{"n":"Biltine","c":"Chad","y":14.5333,"x":20.9167},{"n":"Tepeojuma","c":"Mexico","y":18.7167,"x":-98.45},{"n":"Suffern","c":"United States","y":41.1138,"x":-74.1421},{"n":"Anenii Noi","c":"Moldova","y":46.8817,"x":29.2308},{"n":"Gournay-sur-Marne","c":"France","y":48.8597,"x":2.5764},{"n":"Karuzi","c":"Burundi","y":-3.1,"x":30.163},{"n":"Bedwas","c":"United Kingdom","y":51.5926,"x":-3.2061},{"n":"Stonehouse","c":"United Kingdom","y":51.7478,"x":-2.2838},{"n":"Bramley","c":"United Kingdom","y":53.4253,"x":-1.2648},{"n":"Cocorit","c":"Mexico","y":27.5833,"x":-109.9667},{"n":"Cross Gates","c":"United Kingdom","y":53.8063,"x":-1.4506},{"n":"Calarasi","c":"Moldova","y":47.2544,"x":28.3081},{"n":"Meythet","c":"France","y":45.9153,"x":6.0928},{"n":"Vinica","c":"Macedonia","y":41.8828,"x":22.5092},{"n":"Aucamville","c":"France","y":43.6686,"x":1.4306},{"n":"Ain Lehjer","c":"Morocco","y":34.5949,"x":-2.372},{"n":"Pyle","c":"United Kingdom","y":51.5291,"x":-3.6953},{"n":"Probistip","c":"Macedonia","y":41.9936,"x":22.1767},{"n":"Ahumada","c":"Mexico","y":30.6186,"x":-106.5122},{"n":"La Riviera","c":"United States","y":38.5683,"x":-121.3544},{"n":"Stainforth","c":"United Kingdom","y":53.5958,"x":-1.0253},{"n":"Beni Bou Yafroun","c":"Morocco","y":35.1536,"x":-2.9861},{"n":"Bucksburn","c":"United Kingdom","y":57.177,"x":-2.175},{"n":"West Auckland","c":"United Kingdom","y":54.6318,"x":-1.721},{"n":"Marlborough","c":"United Kingdom","y":51.42,"x":-1.73},{"n":"Birzebbuga","c":"Malta","y":35.8267,"x":14.5278},{"n":"Little Ferry","c":"United States","y":40.8463,"x":-74.0388},{"n":"Gowerton","c":"United Kingdom","y":51.648,"x":-4.043},{"n":"Daskasan","c":"Azerbaijan","y":40.5181,"x":46.0828},{"n":"Shifnal","c":"United Kingdom","y":52.665,"x":-2.373},{"n":"Gracanice","c":"Kosovo","y":42.6,"x":21.2},{"n":"Bela Crkva","c":"Serbia","y":44.8975,"x":21.4172},{"n":"Darby","c":"United States","y":39.921,"x":-75.2611},{"n":"Oban","c":"United Kingdom","y":56.412,"x":-5.472},{"n":"Kavaratti","c":"India","y":10.5626,"x":72.6369},{"n":"Northbrook","c":"United States","y":39.2467,"x":-84.5796},{"n":"El Higo","c":"Mexico","y":21.7667,"x":-98.45},{"n":"Johvi","c":"Estonia","y":59.3575,"x":27.4122},{"n":"Latchford","c":"United Kingdom","y":53.3796,"x":-2.5645},{"n":"Lansdowne","c":"United States","y":39.9408,"x":-75.276},{"n":"Harworth","c":"United Kingdom","y":53.417,"x":-1.075},{"n":"North Lindenhurst","c":"United States","y":40.7072,"x":-73.3859},{"n":"Guadalupe Yancuictlalpan","c":"Mexico","y":19.1831,"x":-99.4583},{"n":"Al Mahwit","c":"Yemen","y":15.4694,"x":43.5453},{"n":"Sainte-Adresse","c":"France","y":49.5064,"x":0.0833},{"n":"Ada","c":"Serbia","y":45.8014,"x":20.1222},{"n":"Greenville","c":"Liberia","y":5.0111,"x":-9.0388},{"n":"Kantunilkin","c":"Mexico","y":21.1,"x":-87.4833},{"n":"Molochnoye","c":"Russia","y":59.2914,"x":39.6683},{"n":"Monifieth","c":"United Kingdom","y":56.481,"x":-2.82},{"n":"Ayotoxco de Guerrero","c":"Mexico","y":20.1,"x":-97.4},{"n":"Kirundo","c":"Burundi","y":-2.5833,"x":30.1},{"n":"Lincoln Village","c":"United States","y":39.9532,"x":-83.1314},{"n":"Haapsalu","c":"Estonia","y":58.9469,"x":23.5369},{"n":"Gorleston-on-Sea","c":"United Kingdom","y":52.5757,"x":1.7235},{"n":"Penryn","c":"United Kingdom","y":50.169,"x":-5.107},{"n":"Mellieha","c":"Malta","y":35.95,"x":14.3667},{"n":"Trat","c":"Thailand","y":12.2417,"x":102.5125},{"n":"Richmond Heights","c":"United States","y":25.6347,"x":-80.372},{"n":"Sarnen","c":"Switzerland","y":46.8969,"x":8.2469},{"n":"Rocafort","c":"Spain","y":39.5306,"x":-0.41},{"n":"Ondarroa","c":"Spain","y":43.3219,"x":-2.4194},{"n":"Phangnga","c":"Thailand","y":8.4644,"x":98.5317},{"n":"Jacinto City","c":"United States","y":29.7663,"x":-95.241},{"n":"Boussy-Saint-Antoine","c":"France","y":48.6908,"x":2.5325},{"n":"Church","c":"United Kingdom","y":53.755,"x":-2.386},{"n":"Anstey","c":"United Kingdom","y":52.6715,"x":-1.1955},{"n":"Siparia","c":"Trinidad And Tobago","y":10.1333,"x":-61.5},{"n":"Ordubad","c":"Azerbaijan","y":38.9047,"x":46.0231},{"n":"Lascano","c":"Uruguay","y":-33.6731,"x":-54.2078},{"n":"Wickersley","c":"United Kingdom","y":53.4199,"x":-1.2792},{"n":"Olaine","c":"Latvia","y":56.7844,"x":23.9369},{"n":"Oulad Ben Sebbah","c":"Morocco","y":33.2692,"x":-7.2678},{"n":"Cromer","c":"United Kingdom","y":52.931,"x":1.302},{"n":"East Whittier","c":"United States","y":33.9244,"x":-117.9887},{"n":"Butha-Buthe","c":"Lesotho","y":-28.7833,"x":28.2333},{"n":"Mariglianella","c":"Italy","y":40.9167,"x":14.4333},{"n":"Naftalan","c":"Azerbaijan","y":40.5058,"x":46.8192},{"n":"Altdorf","c":"Switzerland","y":46.8806,"x":8.6394},{"n":"Wistaston","c":"United Kingdom","y":53.0821,"x":-2.4747},{"n":"Carbon-Blanc","c":"France","y":44.8947,"x":-0.5064},{"n":"Boulder Hill","c":"United States","y":41.7112,"x":-88.3353},{"n":"La Verriere","c":"France","y":48.7586,"x":1.9622},{"n":"Cramond","c":"United Kingdom","y":55.9797,"x":-3.3007},{"n":"Roatan","c":"Honduras","y":16.33,"x":-86.519},{"n":"Lake Stickney","c":"United States","y":47.8709,"x":-122.2596},{"n":"Great Neck","c":"United States","y":40.8028,"x":-73.7332},{"n":"Almacera","c":"Spain","y":39.5117,"x":-0.3561},{"n":"West Haverstraw","c":"United States","y":41.2063,"x":-73.9883},{"n":"Bound Brook","c":"United States","y":40.5676,"x":-74.5383},{"n":"Birao","c":"Central African Republic","y":10.2837,"x":22.7833},{"n":"Kirkham","c":"United Kingdom","y":53.782,"x":-2.87},{"n":"La Ville-du-Bois","c":"France","y":48.6606,"x":2.2692},{"n":"Birzai","c":"Lithuania","y":56.2,"x":24.75},{"n":"Puebla de Farnals","c":"Spain","y":39.5643,"x":-0.2834},{"n":"Buctzotz","c":"Mexico","y":21.2017,"x":-88.7928},{"n":"Radlett","c":"United Kingdom","y":51.685,"x":-0.318},{"n":"Citrus","c":"United States","y":34.1161,"x":-117.889},{"n":"Nisporeni","c":"Moldova","y":47.0814,"x":28.1783},{"n":"Kuldiga","c":"Latvia","y":56.9672,"x":21.97},{"n":"Fontaines-sur-Saone","c":"France","y":45.8358,"x":4.845},{"n":"Vrnjacka Banja","c":"Serbia","y":43.6167,"x":20.9},{"n":"Recale","c":"Italy","y":41.05,"x":14.3},{"n":"Godmanchester","c":"United Kingdom","y":52.3176,"x":-0.1725},{"n":"Clowne","c":"United Kingdom","y":53.276,"x":-1.263},{"n":"Mojkovac","c":"Montenegro","y":42.96,"x":19.58},{"n":"Villemoisson-sur-Orge","c":"France","y":48.6653,"x":2.3308},{"n":"Hamrun","c":"Malta","y":35.8861,"x":14.4894},{"n":"Muyinga","c":"Burundi","y":-2.85,"x":30.3333},{"n":"Warrenpoint","c":"United Kingdom","y":54.0991,"x":-6.249},{"n":"Coppull","c":"United Kingdom","y":53.62,"x":-2.661},{"n":"Crieff","c":"United Kingdom","y":56.3757,"x":-3.8426},{"n":"San Francisco del Mar","c":"Mexico","y":16.3394,"x":-94.515},{"n":"Tarin Kot","c":"Afghanistan","y":32.6333,"x":65.8667},{"n":"Laghdir","c":"Morocco","y":35.7333,"x":-5.8833},{"n":"Charter Oak","c":"United States","y":34.1025,"x":-117.8564},{"n":"Bahia Kino","c":"Mexico","y":28.9833,"x":-111.9333},{"n":"Hucknall under Huthwaite","c":"United Kingdom","y":53.125,"x":-1.301},{"n":"Altar","c":"Mexico","y":30.7136,"x":-111.8353},{"n":"Capitola","c":"United States","y":36.9772,"x":-121.9538},{"n":"Castillos","c":"Uruguay","y":-34.1989,"x":-53.8575},{"n":"Kanjiza","c":"Serbia","y":46.0667,"x":20.05},{"n":"Del Aire","c":"United States","y":33.9168,"x":-118.3693},{"n":"Tamazulapam Villa del Progreso","c":"Mexico","y":17.675,"x":-97.5714},{"n":"Rovellasca","c":"Italy","y":45.6667,"x":9.05},{"n":"Frampton Cotterell","c":"United Kingdom","y":51.54,"x":-2.48},{"n":"La Mulatiere","c":"France","y":45.7281,"x":4.8122},{"n":"Timberlane","c":"United States","y":29.8781,"x":-90.0303},{"n":"Montlhery","c":"France","y":48.6386,"x":2.2722},{"n":"Whetstone","c":"United Kingdom","y":52.5724,"x":-1.1799},{"n":"Thrapston","c":"United Kingdom","y":52.397,"x":-0.538},{"n":"Watervliet","c":"United States","y":42.7243,"x":-73.7068},{"n":"Inwood","c":"United States","y":40.6218,"x":-73.7507},{"n":"White City","c":"United States","y":42.4316,"x":-122.8322},{"n":"Bauska","c":"Latvia","y":56.4067,"x":24.1875},{"n":"Celestun","c":"Mexico","y":20.8583,"x":-90.4},{"n":"Huiloapan","c":"Mexico","y":18.8167,"x":-97.15},{"n":"Marina del Rey","c":"United States","y":33.9765,"x":-118.4486},{"n":"Hopelchen","c":"Mexico","y":19.7444,"x":-89.8453},{"n":"Stonegate","c":"United States","y":39.5356,"x":-104.8033},{"n":"Duntocher","c":"United Kingdom","y":55.924,"x":-4.417},{"n":"West Perrine","c":"United States","y":25.6061,"x":-80.3639},{"n":"Aintree","c":"United Kingdom","y":53.4793,"x":-2.9373},{"n":"Talange","c":"France","y":49.2367,"x":6.1744},{"n":"East Rockaway","c":"United States","y":40.6432,"x":-73.6672},{"n":"New Hyde Park","c":"United States","y":40.7324,"x":-73.6858},{"n":"Nueva Ocotepeque","c":"Honduras","y":14.4333,"x":-89.1833},{"n":"Brookdale","c":"United States","y":40.8348,"x":-74.1798},{"n":"Westgate","c":"United States","y":26.6994,"x":-80.0989},{"n":"Cimitile","c":"Italy","y":40.9333,"x":14.5333},{"n":"Huningue","c":"France","y":47.5914,"x":7.5831},{"n":"Partington","c":"United Kingdom","y":53.42,"x":-2.43},{"n":"Jurbarkas","c":"Lithuania","y":55.0778,"x":22.7756},{"n":"Novoberde","c":"Kosovo","y":42.6,"x":21.4333},{"n":"Pajaros","c":"Puerto Rico","y":18.3609,"x":-66.2184},{"n":"Makamba","c":"Burundi","y":-4.1333,"x":29.8},{"n":"West Athens","c":"United States","y":33.9235,"x":-118.3033},{"n":"Saldus","c":"Latvia","y":56.6667,"x":22.4936},{"n":"Oudorp","c":"Netherlands","y":52.6331,"x":4.7736},{"n":"Highbridge","c":"United Kingdom","y":51.2189,"x":-2.973},{"n":"Pembroke","c":"United Kingdom","y":51.676,"x":-4.9158},{"n":"Senglea","c":"Malta","y":35.8878,"x":14.5169},{"n":"Tshabong","c":"Botswana","y":-26.02,"x":22.4056},{"n":"Thames Ditton","c":"United Kingdom","y":51.389,"x":-0.331},{"n":"Brechin","c":"United Kingdom","y":56.7299,"x":-2.6553},{"n":"Djambala","c":"Congo (Brazzaville)","y":-2.55,"x":14.75},{"n":"Oberengstringen","c":"Switzerland","y":47.4103,"x":8.4633},{"n":"Pieta","c":"Malta","y":35.8833,"x":14.4833},{"n":"Postojna","c":"Slovenia","y":45.7743,"x":14.2153},{"n":"Aiea","c":"United States","y":21.3865,"x":-157.9232},{"n":"Keansburg","c":"United States","y":40.4471,"x":-74.1316},{"n":"Llantwit Fardre","c":"United Kingdom","y":51.5578,"x":-3.3341},{"n":"Barrowford","c":"United Kingdom","y":53.851,"x":-2.221},{"n":"Pedra Badejo","c":"Cabo Verde","y":15.1375,"x":-23.5333},{"n":"Littleborough","c":"United Kingdom","y":53.644,"x":-2.098},{"n":"Sherburn in Elmet","c":"United Kingdom","y":53.7973,"x":-1.2331},{"n":"Kundiawa","c":"Papua New Guinea","y":-6.023,"x":144.96},{"n":"Dinas Powys","c":"United Kingdom","y":51.4331,"x":-3.2134},{"n":"Ikeja","c":"Nigeria","y":6.5965,"x":3.3421},{"n":"Barlassina","c":"Italy","y":45.65,"x":9.1333},{"n":"Withernsea","c":"United Kingdom","y":53.7285,"x":0.0382},{"n":"Wadsley","c":"United Kingdom","y":53.41,"x":-1.52},{"n":"Wardle","c":"United Kingdom","y":53.647,"x":-2.132},{"n":"Dancu","c":"Romania","y":47.153,"x":27.6619},{"n":"Teaoraereke","c":"Kiribati","y":1.3333,"x":173},{"n":"Bois-des-Filion","c":"Canada","y":45.6667,"x":-73.75},{"n":"Vilkaviskis","c":"Lithuania","y":54.6667,"x":23.0333},{"n":"Sathonay-Camp","c":"France","y":45.8247,"x":4.8744},{"n":"Ojo Caliente","c":"Mexico","y":21.8772,"x":-102.6756},{"n":"Govan","c":"United Kingdom","y":55.8615,"x":-4.3083},{"n":"Rozaje","c":"Montenegro","y":42.8442,"x":20.1679},{"n":"Roda del Ter","c":"Spain","y":41.9801,"x":2.3091},{"n":"Carnate","c":"Italy","y":45.6506,"x":9.3785},{"n":"Hani i Elezit","c":"Kosovo","y":42.1475,"x":21.2992},{"n":"Bladensburg","c":"United States","y":38.9424,"x":-76.9263},{"n":"Thyolo","c":"Malawi","y":-16.0667,"x":35.1333},{"n":"Vrhnika","c":"Slovenia","y":45.9622,"x":14.2936},{"n":"Temascal","c":"Mexico","y":18.2394,"x":-96.4031},{"n":"Kirriemuir","c":"United Kingdom","y":56.6692,"x":-3.0051},{"n":"Porth","c":"United Kingdom","y":51.6138,"x":-3.4095},{"n":"Tettenhall","c":"United Kingdom","y":52.5983,"x":-2.168},{"n":"Le Port-Marly","c":"France","y":48.8792,"x":2.1097},{"n":"Harlescott","c":"United Kingdom","y":52.7365,"x":-2.7226},{"n":"Riscani","c":"Moldova","y":47.9561,"x":27.5536},{"n":"Long Ditton","c":"United Kingdom","y":51.385,"x":-0.321},{"n":"Sawston","c":"United Kingdom","y":52.1247,"x":0.1731},{"n":"Twyford","c":"United Kingdom","y":51.477,"x":-0.867},{"n":"Wood-Ridge","c":"United States","y":40.8507,"x":-74.0878},{"n":"Isola delle Femmine","c":"Italy","y":38.2,"x":13.25},{"n":"Ashbourne","c":"United Kingdom","y":53.016,"x":-1.731},{"n":"Las Tablas","c":"Panama","y":7.7667,"x":-80.2833},{"n":"Cockenzie","c":"United Kingdom","y":55.969,"x":-2.962},{"n":"Kasane","c":"Botswana","y":-17.7983,"x":25.1536},{"n":"Katakwi","c":"Uganda","y":1.8911,"x":33.9661},{"n":"Locharbriggs","c":"United Kingdom","y":55.1,"x":-3.5833},{"n":"Neulussheim","c":"Germany","y":49.2933,"x":8.5219},{"n":"Alcester","c":"United Kingdom","y":52.215,"x":-1.876},{"n":"Kasakh","c":"Armenia","y":40.2342,"x":44.4525},{"n":"Evinayong","c":"Equatorial Guinea","y":1.45,"x":10.5667},{"n":"Zabalj","c":"Serbia","y":45.3667,"x":20.0667},{"n":"Woodlyn","c":"United States","y":39.8774,"x":-75.3445},{"n":"South Amboy","c":"United States","y":40.4852,"x":-74.2831},{"n":"Sabana Grande","c":"Puerto Rico","y":18.0821,"x":-66.9673},{"n":"Dursley","c":"United Kingdom","y":51.6811,"x":-2.3543},{"n":"Stepps","c":"United Kingdom","y":55.8908,"x":-4.1522},{"n":"Lunca Cetatuii","c":"Romania","y":47.0931,"x":27.5662},{"n":"Lerwick","c":"United Kingdom","y":60.155,"x":-1.145},{"n":"Gorle","c":"Italy","y":45.7039,"x":9.7192},{"n":"Sauce","c":"Uruguay","y":-34.6469,"x":-56.0628},{"n":"Grosuplje","c":"Slovenia","y":45.9551,"x":14.6562},{"n":"Stans","c":"Switzerland","y":46.9594,"x":8.3667},{"n":"Saltburn-by-the-Sea","c":"United Kingdom","y":54.5828,"x":-0.9732},{"n":"Billinge","c":"United Kingdom","y":53.4932,"x":-2.7129},{"n":"San Pedro Amuzgos","c":"Mexico","y":16.65,"x":-98.1},{"n":"Dangriga","c":"Belize","y":16.9667,"x":-88.2167},{"n":"Bennebroek","c":"Netherlands","y":52.3214,"x":4.5967},{"n":"Beuvrages","c":"France","y":50.3858,"x":3.5056},{"n":"Guingamp","c":"France","y":48.5625,"x":-3.1511},{"n":"Broughton","c":"United Kingdom","y":53.5638,"x":-0.5465},{"n":"Ewo","c":"Congo (Brazzaville)","y":-0.8667,"x":14.8167},{"n":"Filey","c":"United Kingdom","y":54.2101,"x":-0.2893},{"n":"Manatuto","c":"Timor-Leste","y":-8.5167,"x":126.0167},{"n":"Odzaci","c":"Serbia","y":45.5167,"x":19.2667},{"n":"Leisure World","c":"United States","y":39.1023,"x":-77.0691},{"n":"Cove","c":"United Kingdom","y":51.2965,"x":-0.7939},{"n":"North Kensington","c":"United States","y":39.0392,"x":-77.0723},{"n":"Leonia","c":"United States","y":40.8638,"x":-73.9899},{"n":"Gizo","c":"Solomon Islands","y":-8.1,"x":156.85},{"n":"Stansted Mountfitchet","c":"United Kingdom","y":51.898,"x":0.198},{"n":"Farmingdale","c":"United States","y":40.7328,"x":-73.4465},{"n":"Grenay","c":"France","y":50.4522,"x":2.7431},{"n":"Plainedge","c":"United States","y":40.724,"x":-73.477},{"n":"Stony Brook University","c":"United States","y":40.9099,"x":-73.1213},{"n":"Bottmingen","c":"Switzerland","y":47.5236,"x":7.5697},{"n":"Lexden","c":"United Kingdom","y":51.8833,"x":0.8667},{"n":"Sremski Karlovci","c":"Serbia","y":45.2,"x":19.9333},{"n":"Folsom","c":"United States","y":39.8924,"x":-75.3287},{"n":"Temozon","c":"Mexico","y":20.8042,"x":-88.2028},{"n":"Gleno","c":"Timor-Leste","y":-8.7239,"x":125.4361},{"n":"Sauchie","c":"United Kingdom","y":56.1296,"x":-3.7767},{"n":"Budleigh Salterton","c":"United Kingdom","y":50.6284,"x":-3.3205},{"n":"Long Ashton","c":"United Kingdom","y":51.43,"x":-2.65},{"n":"Mokhotlong","c":"Lesotho","y":-29.2885,"x":29.0656},{"n":"Talsi","c":"Latvia","y":57.2447,"x":22.5889},{"n":"Cheddar","c":"United Kingdom","y":51.279,"x":-2.778},{"n":"Pontardawe","c":"United Kingdom","y":51.722,"x":-3.851},{"n":"Dayr al Jarnus","c":"Egypt","y":28.61,"x":30.7067},{"n":"Corozal","c":"Belize","y":18.4,"x":-88.4},{"n":"Dore","c":"United Kingdom","y":53.3268,"x":-1.5345},{"n":"North Petherton","c":"United Kingdom","y":51.091,"x":-3.013},{"n":"Egham","c":"United Kingdom","y":51.429,"x":-0.548},{"n":"Collingdale","c":"United States","y":39.9151,"x":-75.2776},{"n":"Siggiewi","c":"Malta","y":35.8542,"x":14.4383},{"n":"Pontardulais","c":"United Kingdom","y":51.71,"x":-4.04},{"n":"Joniskis","c":"Lithuania","y":56.2433,"x":23.6179},{"n":"Eichwalde","c":"Germany","y":52.3667,"x":13.6167},{"n":"Frimley","c":"United Kingdom","y":51.3143,"x":-0.7387},{"n":"Leona Vicario","c":"Mexico","y":20.9922,"x":-87.2028},{"n":"West Miami","c":"United States","y":25.7578,"x":-80.2969},{"n":"New Square","c":"United States","y":41.141,"x":-74.0294},{"n":"Dobele","c":"Latvia","y":56.6258,"x":23.2811},{"n":"Basco","c":"Philippines","y":20.45,"x":121.9667},{"n":"Sidi Bou Said","c":"Tunisia","y":36.8698,"x":10.341},{"n":"Glodeni","c":"Moldova","y":47.7708,"x":27.5144},{"n":"Karnaukhivka","c":"Ukraine","y":48.4698,"x":34.7376},{"n":"Seven Corners","c":"United States","y":38.8658,"x":-77.1445},{"n":"Kocevje","c":"Slovenia","y":45.643,"x":14.8594},{"n":"Becal","c":"Mexico","y":20.4414,"x":-90.0275},{"n":"Great Wakering","c":"United Kingdom","y":51.5516,"x":0.8165},{"n":"Greenbriar","c":"United States","y":38.8717,"x":-77.397},{"n":"Paide","c":"Estonia","y":58.8833,"x":25.5667},{"n":"Coral Hills","c":"United States","y":38.8709,"x":-76.9234},{"n":"Santo Domingo Este","c":"Dominican Republic","y":18.4855,"x":-69.8734},{"n":"Griffithstown","c":"United Kingdom","y":51.6853,"x":-3.0284},{"n":"Aleg","c":"Mauritania","y":17.058,"x":-13.909},{"n":"Lerik","c":"Azerbaijan","y":38.7753,"x":48.4153},{"n":"Littlemore","c":"United Kingdom","y":51.72,"x":-1.227},{"n":"Swissvale","c":"United States","y":40.4207,"x":-79.8858},{"n":"Audubon","c":"United States","y":39.8906,"x":-75.0722},{"n":"Heage","c":"United Kingdom","y":53.05,"x":-1.447},{"n":"Joeuf","c":"France","y":49.2297,"x":6.0089},{"n":"Handforth","c":"United Kingdom","y":53.35,"x":-2.216},{"n":"Galleywood","c":"United Kingdom","y":51.697,"x":0.474},{"n":"Albiate","c":"Italy","y":45.6667,"x":9.25},{"n":"Harleston","c":"United Kingdom","y":52.4024,"x":1.2996},{"n":"Rolle","c":"Switzerland","y":46.4575,"x":6.3317},{"n":"Xochitlan Todos Santos","c":"Mexico","y":18.7007,"x":-97.7766},{"n":"San Antonino Castillo Velasco","c":"Mexico","y":16.8031,"x":-96.6839},{"n":"Basarabeasca","c":"Moldova","y":46.3333,"x":28.9667},{"n":"Zardab","c":"Azerbaijan","y":40.2111,"x":47.7108},{"n":"Tadcaster","c":"United Kingdom","y":53.8852,"x":-1.262},{"n":"Anyksciai","c":"Lithuania","y":55.5344,"x":25.1072},{"n":"Great Meols","c":"United Kingdom","y":53.4014,"x":-3.1553},{"n":"Varena","c":"Lithuania","y":54.2111,"x":24.5722},{"n":"Malverne","c":"United States","y":40.6746,"x":-73.6721},{"n":"Prienai","c":"Lithuania","y":54.6333,"x":23.9417},{"n":"Krsko","c":"Slovenia","y":45.959,"x":15.4922},{"n":"Amble","c":"United Kingdom","y":55.3306,"x":-1.5783},{"n":"Wotton-under-Edge","c":"United Kingdom","y":51.638,"x":-2.349},{"n":"Alme","c":"Italy","y":45.7369,"x":9.6153},{"n":"August","c":"United States","y":37.9797,"x":-121.2625},{"n":"IJsselmonde","c":"Netherlands","y":51.9,"x":4.55},{"n":"Paulton","c":"United Kingdom","y":51.3069,"x":-2.5027},{"n":"Stotfold","c":"United Kingdom","y":52.018,"x":-0.228},{"n":"Palavas-les-Flots","c":"France","y":43.5294,"x":3.9306},{"n":"Balloch","c":"United Kingdom","y":56.002,"x":-4.58},{"n":"Esbly","c":"France","y":48.9031,"x":2.8125},{"n":"Brokopondo","c":"Suriname","y":5.0404,"x":-55.02},{"n":"Midway City","c":"United States","y":33.7451,"x":-117.9849},{"n":"Hoylake","c":"United Kingdom","y":53.39,"x":-3.18},{"n":"Bogota","c":"United States","y":40.875,"x":-74.0293},{"n":"Garden City Park","c":"United States","y":40.7436,"x":-73.6639},{"n":"Grandview Heights","c":"United States","y":39.9793,"x":-83.0408},{"n":"Harwood Heights","c":"United States","y":41.9663,"x":-87.8057},{"n":"Puerto San Carlos","c":"Mexico","y":24.7894,"x":-112.1083},{"n":"Soro","c":"Denmark","y":55.433,"x":11.5667},{"n":"Haledon","c":"United States","y":40.9363,"x":-74.1887},{"n":"Dormont","c":"United States","y":40.3941,"x":-80.0377},{"n":"Arlesey","c":"United Kingdom","y":52.007,"x":-0.2654},{"n":"Alondra Park","c":"United States","y":33.8885,"x":-118.335},{"n":"Wincanton","c":"United Kingdom","y":51.0559,"x":-2.4102},{"n":"Tayoltita","c":"Mexico","y":24.0833,"x":-105.9333},{"n":"Tetbury","c":"United Kingdom","y":51.636,"x":-2.158},{"n":"Balakan","c":"Azerbaijan","y":41.7233,"x":46.3919},{"n":"Slovenska Bistrica","c":"Slovenia","y":46.3941,"x":15.5707},{"n":"Teabo","c":"Mexico","y":20.3997,"x":-89.2844},{"n":"Ormesby","c":"United Kingdom","y":54.5492,"x":-1.1817},{"n":"Hengoed","c":"United Kingdom","y":51.65,"x":-3.23},{"n":"Pont-de-Cheruy","c":"France","y":45.7506,"x":5.1731},{"n":"Cheviot","c":"United States","y":39.1577,"x":-84.6139},{"n":"Brynmawr","c":"United Kingdom","y":51.796,"x":-3.183},{"n":"Greymouth","c":"New Zealand","y":-42.4667,"x":171.2},{"n":"Broadview Park","c":"United States","y":26.0979,"x":-80.2088},{"n":"Magor","c":"United Kingdom","y":51.5798,"x":-2.8312},{"n":"Beocin","c":"Serbia","y":45.1922,"x":19.7203},{"n":"South San Gabriel","c":"United States","y":34.0489,"x":-118.0961},{"n":"Qobustan","c":"Azerbaijan","y":40.5333,"x":48.9333},{"n":"Soroti","c":"Uganda","y":1.6833,"x":33.6167},{"n":"Piste","c":"Mexico","y":20.6981,"x":-88.5886},{"n":"Preverenges","c":"Switzerland","y":46.5167,"x":6.5333},{"n":"Mount Rainier","c":"United States","y":38.9423,"x":-76.9645},{"n":"Algodones","c":"Mexico","y":32.7153,"x":-114.7289},{"n":"Port Maria","c":"Jamaica","y":18.3703,"x":-76.8903},{"n":"Guadalupe y Calvo","c":"Mexico","y":26.095,"x":-106.9644},{"n":"Nangan","c":"Taiwan","y":26.1598,"x":119.9432},{"n":"Malmesbury","c":"United Kingdom","y":51.584,"x":-2.098},{"n":"North Bay Village","c":"United States","y":25.8487,"x":-80.1535},{"n":"Conshohocken","c":"United States","y":40.0772,"x":-75.3035},{"n":"Newent","c":"United Kingdom","y":51.9302,"x":-2.4048},{"n":"Cospicua","c":"Malta","y":35.8822,"x":14.5222},{"n":"Calderitas","c":"Mexico","y":18.5544,"x":-88.2583},{"n":"Gerlafingen","c":"Switzerland","y":47.1722,"x":7.5739},{"n":"Panindicuaro","c":"Mexico","y":19.9828,"x":-101.7606},{"n":"Mtskheta","c":"Georgia","y":41.85,"x":44.7167},{"n":"Sokobanja","c":"Serbia","y":43.6394,"x":21.8694},{"n":"Polmont","c":"United Kingdom","y":55.9908,"x":-3.7064},{"n":"Paloma Creek South","c":"United States","y":33.21,"x":-96.9327},{"n":"Eygelshoven","c":"Netherlands","y":50.8925,"x":6.0592},{"n":"Panaba","c":"Mexico","y":21.2964,"x":-88.2706},{"n":"Elderslie","c":"United Kingdom","y":55.8306,"x":-4.4842},{"n":"Caldwell","c":"United States","y":40.839,"x":-74.2776},{"n":"Litija","c":"Slovenia","y":46.0565,"x":14.8303},{"n":"Temple Hills","c":"United States","y":38.8106,"x":-76.9495},{"n":"San Juan Bautista","c":"Paraguay","y":-26.68,"x":-57.15},{"n":"Falmouth","c":"Jamaica","y":18.4936,"x":-77.6558},{"n":"Mahmud-e Raqi","c":"Afghanistan","y":35.0167,"x":69.3333},{"n":"Drogenbos","c":"Belgium","y":50.7833,"x":4.3167},{"n":"Koboko","c":"Uganda","y":3.4136,"x":30.9599},{"n":"Glenside","c":"United States","y":40.1032,"x":-75.1517},{"n":"Bentiu","c":"South Sudan","y":9.25,"x":29.8},{"n":"Cajar","c":"Spain","y":37.1333,"x":-3.5667},{"n":"Wilson","c":"United States","y":40.6844,"x":-75.2407},{"n":"Palo Alto","c":"Mexico","y":21.9167,"x":-101.9667},{"n":"Rio Bravo","c":"United States","y":27.3648,"x":-99.482},{"n":"Soledad Etla","c":"Mexico","y":17.1667,"x":-96.8167},{"n":"Luba","c":"Equatorial Guinea","y":3.45,"x":8.55},{"n":"Sheriff Hill","c":"United Kingdom","y":54.939,"x":-1.586},{"n":"Guadalupe","c":"United States","y":34.9608,"x":-120.5735},{"n":"Pinchbeck","c":"United Kingdom","y":52.8147,"x":-0.1605},{"n":"Chickerell","c":"United Kingdom","y":50.624,"x":-2.5047},{"n":"Boyes Hot Springs","c":"United States","y":38.3126,"x":-122.4888},{"n":"Champagne-au-Mont-d'Or","c":"France","y":45.7947,"x":4.7908},{"n":"Aracinovo","c":"Macedonia","y":42.0264,"x":21.5617},{"n":"Yardimli","c":"Azerbaijan","y":38.9206,"x":48.2372},{"n":"Greifensee","c":"Switzerland","y":47.3661,"x":8.6786},{"n":"Fanwood","c":"United States","y":40.6417,"x":-74.3857},{"n":"Hoogkerk","c":"Netherlands","y":53.2167,"x":6.5},{"n":"Holtville","c":"United States","y":32.813,"x":-115.378},{"n":"Yeghegnadzor","c":"Armenia","y":39.7667,"x":45.35},{"n":"Radstock","c":"United Kingdom","y":51.293,"x":-2.448},{"n":"East Franklin","c":"United States","y":40.4933,"x":-74.4711},{"n":"Baldwin Harbor","c":"United States","y":40.6296,"x":-73.6025},{"n":"Arafat","c":"Mauritania","y":18.0583,"x":-15.9621},{"n":"Angostura","c":"Mexico","y":25.3653,"x":-108.1622},{"n":"Brezice","c":"Slovenia","y":45.9044,"x":15.5925},{"n":"Juncos","c":"Puerto Rico","y":18.2264,"x":-65.9163},{"n":"Calumet Park","c":"United States","y":41.665,"x":-87.6578},{"n":"Luquillo","c":"Puerto Rico","y":18.3735,"x":-65.7218},{"n":"Glen Ridge","c":"United States","y":40.8041,"x":-74.2043},{"n":"Waterbeach","c":"United Kingdom","y":52.2664,"x":0.1908},{"n":"Sen Monorom","c":"Cambodia","y":12.45,"x":107.2},{"n":"Brotton","c":"United Kingdom","y":54.568,"x":-0.937},{"n":"Nombre de Dios","c":"Mexico","y":23.85,"x":-104.2333},{"n":"Balzan","c":"Malta","y":35.8975,"x":14.4533},{"n":"Kelme","c":"Lithuania","y":55.6333,"x":22.9333},{"n":"Gurabo","c":"Puerto Rico","y":18.2529,"x":-65.9786},{"n":"Leova","c":"Moldova","y":46.4786,"x":28.2553},{"n":"Hatboro","c":"United States","y":40.1775,"x":-75.1054},{"n":"Ludza","c":"Latvia","y":56.5439,"x":27.7211},{"n":"Tala","c":"Uruguay","y":-34.3436,"x":-55.7617},{"n":"Esperanza","c":"Mexico","y":27.58,"x":-109.9298},{"n":"Ravne na Koroskem","c":"Slovenia","y":46.5437,"x":14.9642},{"n":"Goranboy","c":"Azerbaijan","y":40.61,"x":46.7872},{"n":"Waikele","c":"United States","y":21.4025,"x":-158.0058},{"n":"Hillcrest","c":"United States","y":41.1298,"x":-74.035},{"n":"Park City","c":"United States","y":42.3522,"x":-87.8915},{"n":"Oguz","c":"Azerbaijan","y":41.0714,"x":47.4653},{"n":"Ta' Xbiex","c":"Malta","y":35.8992,"x":14.4981},{"n":"Brayton","c":"United Kingdom","y":53.7682,"x":-1.0907},{"n":"Briceni","c":"Moldova","y":48.3628,"x":27.085},{"n":"Mongomo","c":"Equatorial Guinea","y":1.6287,"x":11.3168},{"n":"Ruyigi","c":"Burundi","y":-3.4667,"x":30.25},{"n":"Montpelier","c":"United States","y":44.2658,"x":-72.5717},{"n":"Monaghan","c":"Ireland","y":54.2479,"x":-6.9708},{"n":"Ikskile","c":"Latvia","y":56.8367,"x":24.4964},{"n":"Sky Lake","c":"United States","y":28.4611,"x":-81.3912},{"n":"Frontera Corozal","c":"Mexico","y":16.8211,"x":-90.8903},{"n":"Cwmbach","c":"United Kingdom","y":51.7072,"x":-3.4128},{"n":"Sabana Seca","c":"Puerto Rico","y":18.4273,"x":-66.1809},{"n":"Kraslava","c":"Latvia","y":55.8956,"x":27.1644},{"n":"Slovenj Gradec","c":"Slovenia","y":46.5093,"x":15.079},{"n":"Mobaye","c":"Central African Republic","y":4.3167,"x":21.1833},{"n":"X-Can","c":"Mexico","y":20.8583,"x":-87.6681},{"n":"Williston Park","c":"United States","y":40.7587,"x":-73.6465},{"n":"Marsa","c":"Malta","y":35.8833,"x":14.4947},{"n":"Telenesti","c":"Moldova","y":47.4997,"x":28.3656},{"n":"Hola","c":"Kenya","y":-1.5,"x":40.03},{"n":"Adazi","c":"Latvia","y":57.0769,"x":24.3236},{"n":"Naujoji Akmene","c":"Lithuania","y":56.325,"x":22.8833},{"n":"Chicxulub Puerto","c":"Mexico","y":21.2939,"x":-89.6083},{"n":"Dunellen","c":"United States","y":40.5903,"x":-74.4656},{"n":"Stompwijk","c":"Netherlands","y":52.0944,"x":4.4697},{"n":"Lapovo","c":"Serbia","y":44.1842,"x":21.0973},{"n":"Glenolden","c":"United States","y":39.8996,"x":-75.292},{"n":"Nyack","c":"United States","y":41.0919,"x":-73.9143},{"n":"Hampstead","c":"Canada","y":45.4833,"x":-73.6333},{"n":"Aizkraukle","c":"Latvia","y":56.6008,"x":25.255},{"n":"Donduseni","c":"Moldova","y":48.2244,"x":27.5853},{"n":"San Lorenzo","c":"Puerto Rico","y":18.1894,"x":-65.9674},{"n":"Nakasongola","c":"Uganda","y":1.3089,"x":32.4564},{"n":"Ajdovscina","c":"Slovenia","y":45.8884,"x":13.9052},{"n":"Souderton","c":"United States","y":40.311,"x":-75.3224},{"n":"Yabucoa","c":"Puerto Rico","y":18.0469,"x":-65.8792},{"n":"Ridley Park","c":"United States","y":39.8785,"x":-75.3251},{"n":"Livani","c":"Latvia","y":56.3539,"x":26.1761},{"n":"San Isidro","c":"Puerto Rico","y":18.3919,"x":-65.8853},{"n":"Great Neck Plaza","c":"United States","y":40.7869,"x":-73.7261},{"n":"Berovo","c":"Macedonia","y":41.7078,"x":22.8564},{"n":"Trindade","c":"Sao Tome And Principe","y":0.3,"x":6.6667},{"n":"Orland Hills","c":"United States","y":41.5905,"x":-87.8413},{"n":"Gulbene","c":"Latvia","y":57.175,"x":26.7564},{"n":"Kratovo","c":"Macedonia","y":42.0783,"x":22.175},{"n":"Stratford","c":"New Zealand","y":-39.341,"x":174.284},{"n":"Limbazi","c":"Latvia","y":57.5147,"x":24.7131},{"n":"Luqa","c":"Malta","y":35.8597,"x":14.4892},{"n":"Mahibadhoo","c":"Maldives","y":3.7571,"x":72.9689},{"n":"Twin Rivers","c":"United States","y":40.263,"x":-74.4917},{"n":"Las Piedras","c":"Puerto Rico","y":18.1784,"x":-65.8708},{"n":"Backi Petrovac","c":"Serbia","y":45.3564,"x":19.5883},{"n":"Madona","c":"Latvia","y":56.8542,"x":26.22},{"n":"Hewlett","c":"United States","y":40.6422,"x":-73.6942},{"n":"Criuleni","c":"Moldova","y":47.2167,"x":29.1614},{"n":"Eydhafushi","c":"Maldives","y":5.1038,"x":73.0699},{"n":"South Valley Stream","c":"United States","y":40.6557,"x":-73.7186},{"n":"Diekirch","c":"Luxembourg","y":49.8678,"x":6.1558},{"n":"Sopiste","c":"Macedonia","y":41.95,"x":21.4333},{"n":"Salcininkai","c":"Lithuania","y":54.3111,"x":25.3806},{"n":"Clifton Heights","c":"United States","y":39.9301,"x":-75.2958},{"n":"Lauderdale-by-the-Sea","c":"United States","y":26.199,"x":-80.0972},{"n":"Notre Dame","c":"United States","y":41.7014,"x":-86.2378},{"n":"Opuwo","c":"Namibia","y":-18.0607,"x":13.84},{"n":"Cedarhurst","c":"United States","y":40.6252,"x":-73.7278},{"n":"Folcroft","c":"United States","y":39.8891,"x":-75.277},{"n":"Manorhaven","c":"United States","y":40.8399,"x":-73.7127},{"n":"Puerto Real","c":"Puerto Rico","y":18.0762,"x":-67.1861},{"n":"Ewa Villages","c":"United States","y":21.3418,"x":-158.039},{"n":"South Monrovia Island","c":"United States","y":34.1234,"x":-117.9958},{"n":"Contra Costa Centre","c":"United States","y":37.9261,"x":-122.054},{"n":"Bogovinje","c":"Macedonia","y":41.9233,"x":20.9133},{"n":"Tuckahoe","c":"United States","y":40.953,"x":-73.823},{"n":"Aluksne","c":"Latvia","y":57.4239,"x":27.0503},{"n":"Mae Hong Son","c":"Thailand","y":19.3011,"x":97.97},{"n":"Puerto Baquerizo Moreno","c":"Ecuador","y":-0.9025,"x":-89.6092},{"n":"Castroville","c":"United States","y":36.765,"x":-121.7535},{"n":"West View","c":"United States","y":40.5182,"x":-80.0333},{"n":"Naples Manor","c":"United States","y":26.0892,"x":-81.7254},{"n":"Bogatic","c":"Serbia","y":44.8375,"x":19.4806},{"n":"Prospect Park","c":"United States","y":39.8858,"x":-75.3074},{"n":"Ambler","c":"United States","y":40.1564,"x":-75.2215},{"n":"Forest Glen","c":"United States","y":39.0191,"x":-77.0445},{"n":"Bronxville","c":"United States","y":40.9394,"x":-73.8263},{"n":"Kingston Estates","c":"United States","y":39.9188,"x":-74.9898},{"n":"Pasvalys","c":"Lithuania","y":56.0611,"x":24.4028},{"n":"Sal Rei","c":"Cabo Verde","y":16.176,"x":-22.9171},{"n":"Jogeva","c":"Estonia","y":58.7461,"x":26.3956},{"n":"Cabrayil","c":"Azerbaijan","y":39.4,"x":47.0261},{"n":"Ghanzi","c":"Botswana","y":-21.7,"x":21.65},{"n":"Polva","c":"Estonia","y":58.0536,"x":27.0556},{"n":"Vittoriosa","c":"Malta","y":35.8881,"x":14.5225},{"n":"Ciudad Guzman","c":"Mexico","y":19.7,"x":-103.4667},{"n":"Cameron Park","c":"United States","y":25.9705,"x":-97.4775},{"n":"Saranap","c":"United States","y":37.8878,"x":-122.076},{"n":"Schaan","c":"Liechtenstein","y":47.1667,"x":9.5167},{"n":"Espargos","c":"Cabo Verde","y":16.7546,"x":-22.9453},{"n":"Kennett Square","c":"United States","y":39.8438,"x":-75.7113},{"n":"Junik","c":"Kosovo","y":42.4761,"x":20.2775},{"n":"Preili","c":"Latvia","y":56.2942,"x":26.7247},{"n":"Siteki","c":"Swaziland","y":-26.45,"x":31.95},{"n":"Viqueque","c":"Timor-Leste","y":-8.85,"x":126.3667},{"n":"Lucea","c":"Jamaica","y":18.4509,"x":-78.1736},{"n":"Rapla","c":"Estonia","y":58.9944,"x":24.8011},{"n":"West Loch Estate","c":"United States","y":21.3617,"x":-158.0246},{"n":"Lakeview","c":"United States","y":40.6775,"x":-73.6493},{"n":"Binghamton University","c":"United States","y":42.0893,"x":-75.9684},{"n":"Glarus","c":"Switzerland","y":47.0333,"x":9.0667},{"n":"Rutana","c":"Burundi","y":-3.9236,"x":30.0061},{"n":"Fruitridge Pocket","c":"United States","y":38.5326,"x":-121.4558},{"n":"Bac","c":"Serbia","y":45.3886,"x":19.2353},{"n":"Larchmont","c":"United States","y":40.9258,"x":-73.7529},{"n":"Bogdanci","c":"Macedonia","y":41.2031,"x":22.5728},{"n":"Arroyo","c":"Puerto Rico","y":17.9706,"x":-66.0609},{"n":"Pleasure Point","c":"United States","y":36.9618,"x":-121.9715},{"n":"Zarasai","c":"Lithuania","y":55.7306,"x":26.2472},{"n":"Sezana","c":"Slovenia","y":45.7,"x":13.85},{"n":"Zagorje","c":"Slovenia","y":46.1342,"x":14.9942},{"n":"District Heights","c":"United States","y":38.8588,"x":-76.8885},{"n":"Naval Academy","c":"United States","y":38.9859,"x":-76.488},{"n":"Muramvya","c":"Burundi","y":-3.25,"x":29.6},{"n":"Lielvarde","c":"Latvia","y":56.7175,"x":24.8106},{"n":"Studenicani","c":"Macedonia","y":41.9158,"x":21.5306},{"n":"Ghaxaq","c":"Malta","y":35.8483,"x":14.5172},{"n":"Penn Wynne","c":"United States","y":39.9867,"x":-75.2715},{"n":"Echternach","c":"Luxembourg","y":49.8117,"x":6.4217},{"n":"Kupiskis","c":"Lithuania","y":55.8333,"x":24.9667},{"n":"Crnomelj","c":"Slovenia","y":45.5711,"x":15.1889},{"n":"Appenzell","c":"Switzerland","y":47.3306,"x":9.4086},{"n":"Idrija","c":"Slovenia","y":46.0025,"x":14.0275},{"n":"Jamesburg","c":"United States","y":40.3494,"x":-74.44},{"n":"Ranillug","c":"Kosovo","y":42.492,"x":21.559},{"n":"Mayflower Village","c":"United States","y":34.116,"x":-118.0096},{"n":"Elsmere","c":"United States","y":39.7385,"x":-75.5946},{"n":"Lija","c":"Malta","y":35.9014,"x":14.4472},{"n":"Prevalje","c":"Slovenia","y":46.5469,"x":14.9208},{"n":"McKees Rocks","c":"United States","y":40.4688,"x":-80.063},{"n":"Balvi","c":"Latvia","y":57.1292,"x":27.2667},{"n":"Charlemagne","c":"Canada","y":45.7167,"x":-73.4833},{"n":"Outapi","c":"Namibia","y":-17.5028,"x":14.9856},{"n":"Cidra","c":"Puerto Rico","y":18.1775,"x":-66.1582},{"n":"Lorengau","c":"Papua New Guinea","y":-2.0208,"x":147.2667},{"n":"Hrastnik","c":"Slovenia","y":46.1461,"x":15.0814},{"n":"Plymouth","c":"United States","y":41.2404,"x":-75.9505},{"n":"Bay Harbor Islands","c":"United States","y":25.8878,"x":-80.1335},{"n":"Tevragh Zeina","c":"Mauritania","y":18.0989,"x":-15.9885},{"n":"Iecava","c":"Latvia","y":56.6,"x":24.2},{"n":"Mamushe","c":"Kosovo","y":42.3167,"x":20.7167},{"n":"Fulin","c":"China","y":29.3489,"x":102.6767},{"n":"Mount Carmel","c":"United States","y":40.7959,"x":-76.4121},{"n":"South Tucson","c":"United States","y":32.1955,"x":-110.9692},{"n":"Lewisburg","c":"United States","y":40.9642,"x":-76.8901},{"n":"Gospic","c":"Croatia","y":44.5469,"x":15.3744},{"n":"Sisimiut","c":"Greenland","y":66.9389,"x":-53.6722},{"n":"Cacheu","c":"Guinea-Bissau","y":12.278,"x":-16.165},{"n":"Sharon Hill","c":"United States","y":39.9075,"x":-75.2678},{"n":"Media","c":"United States","y":39.9198,"x":-75.3888},{"n":"New Brighton","c":"United States","y":40.7355,"x":-80.3091},{"n":"Kerema","c":"Papua New Guinea","y":-7.927,"x":145.838},{"n":"Surfside","c":"United States","y":25.8787,"x":-80.125},{"n":"Rochelle Park","c":"United States","y":40.9069,"x":-74.0791},{"n":"Partesh","c":"Kosovo","y":42.4019,"x":21.4336},{"n":"Salavan","c":"Laos","y":15.7167,"x":106.4167},{"n":"Deer Park","c":"United States","y":39.2039,"x":-84.3977},{"n":"Kazlu Ruda","c":"Lithuania","y":54.7492,"x":23.4865},{"n":"Qubadli","c":"Azerbaijan","y":39.3439,"x":46.5797},{"n":"Krusevo","c":"Macedonia","y":41.37,"x":21.2483},{"n":"Belmar","c":"United States","y":40.1798,"x":-74.0255},{"n":"Caazapa","c":"Paraguay","y":-26.2,"x":-56.38},{"n":"Shaw Heights","c":"United States","y":39.8566,"x":-105.039},{"n":"Palm Springs North","c":"United States","y":25.9351,"x":-80.3339},{"n":"Moletai","c":"Lithuania","y":55.2333,"x":25.4167},{"n":"Thaba-Tseka","c":"Lesotho","y":-29.5333,"x":28.6},{"n":"Waipio Acres","c":"United States","y":21.4689,"x":-158.0173},{"n":"Qal`ah-ye Now","c":"Afghanistan","y":34.99,"x":63.12},{"n":"South Highpoint","c":"United States","y":27.9086,"x":-82.7162},{"n":"Xaghra","c":"Malta","y":36.0503,"x":14.2675},{"n":"Friendship Heights Village","c":"United States","y":38.9633,"x":-77.09},{"n":"Kaser","c":"United States","y":41.1214,"x":-74.0686},{"n":"Anasco","c":"Puerto Rico","y":18.286,"x":-67.1411},{"n":"L'Epiphanie","c":"Canada","y":45.85,"x":-73.4833},{"n":"Kalangala","c":"Uganda","y":-0.3089,"x":32.225},{"n":"Pale","c":"Equatorial Guinea","y":-1.4043,"x":5.6322},{"n":"Kensington","c":"United States","y":37.9084,"x":-122.2805},{"n":"Shillington","c":"United States","y":40.3029,"x":-75.967},{"n":"Ros Comain","c":"Ireland","y":53.6333,"x":-8.1833},{"n":"Albina","c":"Suriname","y":5.5,"x":-54.05},{"n":"Wangdue Phodrang","c":"Bhutan","y":27.4333,"x":89.9167},{"n":"Santa Isabel","c":"Puerto Rico","y":17.9687,"x":-66.4049},{"n":"Pembroke","c":"Malta","y":35.9264,"x":14.4808},{"n":"Albertson","c":"United States","y":40.7715,"x":-73.6482},{"n":"Highwood","c":"United States","y":42.206,"x":-87.8128},{"n":"Kekava","c":"Latvia","y":56.8266,"x":24.23},{"n":"Cutler","c":"United States","y":36.5263,"x":-119.2884},{"n":"Naguabo","c":"Puerto Rico","y":18.2116,"x":-65.737},{"n":"Slovenske Konjice","c":"Slovenia","y":46.3362,"x":15.421},{"n":"Twin Lakes","c":"United States","y":36.9646,"x":-121.9896},{"n":"Kanifing","c":"Gambia, The","y":13.45,"x":-16.6667},{"n":"Broadmoor","c":"United States","y":37.6914,"x":-122.4811},{"n":"Liquica","c":"Timor-Leste","y":-8.5935,"x":125.3273},{"n":"Smiltene","c":"Latvia","y":57.4242,"x":25.9064},{"n":"Bret Harte","c":"United States","y":37.6021,"x":-121.0045},{"n":"Penuelas","c":"Puerto Rico","y":18.0595,"x":-66.7206},{"n":"Turtle Creek","c":"United States","y":40.4085,"x":-79.8214},{"n":"Nadur","c":"Malta","y":36.0381,"x":14.295},{"n":"Carle Place","c":"United States","y":40.75,"x":-73.6122},{"n":"Gadabay","c":"Azerbaijan","y":40.5656,"x":45.8161},{"n":"Kenneth City","c":"United States","y":27.8155,"x":-82.7162},{"n":"Tara Hills","c":"United States","y":37.9939,"x":-122.3188},{"n":"Skuodas","c":"Lithuania","y":56.2667,"x":21.5333},{"n":"Ilulissat","c":"Greenland","y":69.2167,"x":-51.1},{"n":"Montreal-Ouest","c":"Canada","y":45.4536,"x":-73.6472},{"n":"Vrapciste","c":"Macedonia","y":41.8337,"x":20.8851},{"n":"Salinas","c":"Puerto Rico","y":17.9779,"x":-66.2961},{"n":"Zalec","c":"Slovenia","y":46.2516,"x":15.1674},{"n":"Mechanicville","c":"United States","y":42.9037,"x":-73.6895},{"n":"Punta Gorda","c":"Belize","y":16.1,"x":-88.8},{"n":"Punakha","c":"Bhutan","y":27.6167,"x":89.8667},{"n":"Sakiai","c":"Lithuania","y":54.9556,"x":23.0444},{"n":"Samtse","c":"Bhutan","y":26.8667,"x":89.1},{"n":"Aibak","c":"Afghanistan","y":36.2534,"x":68.0394},{"n":"Bled","c":"Slovenia","y":46.3667,"x":14.1167},{"n":"Mauren","c":"Liechtenstein","y":47.2197,"x":9.5428},{"n":"Iklin","c":"Malta","y":35.9042,"x":14.4544},{"n":"Sentjur","c":"Slovenia","y":46.2225,"x":15.3973},{"n":"Floriana","c":"Malta","y":35.8933,"x":14.5058},{"n":"Kiambu","c":"Kenya","y":-1.1714,"x":36.8356},{"n":"Nieuw Amsterdam","c":"Suriname","y":5.91,"x":-55.07},{"n":"Carnikava","c":"Latvia","y":57.1333,"x":24.2833},{"n":"Bolama","c":"Guinea-Bissau","y":11.5776,"x":-15.4742},{"n":"Eschen","c":"Liechtenstein","y":47.2,"x":9.5167},{"n":"Irig","c":"Serbia","y":45.1011,"x":19.8583},{"n":"Puerto Lempira","c":"Honduras","y":15.2653,"x":-83.7744},{"n":"Klaksvik","c":"Faroe Islands","y":62.2375,"x":-6.539},{"n":"Kuala Belait","c":"Brunei","y":4.5828,"x":114.1918},{"n":"Bururi","c":"Burundi","y":-3.9333,"x":29.6167},{"n":"Ta Khmau","c":"Cambodia","y":11.4833,"x":104.95},{"n":"Coka","c":"Serbia","y":45.9389,"x":20.1394},{"n":"Kalkara","c":"Malta","y":35.8892,"x":14.5294},{"n":"Hung Yen","c":"Vietnam","y":20.6464,"x":106.0511},{"n":"Silale","c":"Lithuania","y":55.4917,"x":22.1778},{"n":"Pakruojis","c":"Lithuania","y":55.9809,"x":23.8551},{"n":"Bradford","c":"United Kingdom","y":53.8,"x":-1.75},{"n":"Imqabba","c":"Malta","y":35.8442,"x":14.4669},{"n":"Bueng Kan","c":"Thailand","y":18.3669,"x":103.6552},{"n":"Sevnica","c":"Slovenia","y":46.0092,"x":15.3039},{"n":"San Gwann","c":"Malta","y":35.9056,"x":14.4761},{"n":"Valka","c":"Latvia","y":57.7753,"x":26.0214},{"n":"Remich","c":"Luxembourg","y":49.5444,"x":6.3667},{"n":"Rumphi","c":"Malawi","y":-11.0153,"x":33.7722},{"n":"Dravograd","c":"Slovenia","y":46.59,"x":15.018},{"n":"Valandovo","c":"Macedonia","y":41.3169,"x":22.5611},{"n":"Susa","c":"Azerbaijan","y":39.75,"x":46.75},{"n":"Trakai","c":"Lithuania","y":54.6333,"x":24.9333},{"n":"Radlje ob Dravi","c":"Slovenia","y":46.6149,"x":15.2226},{"n":"Sempeter pri Gorici","c":"Slovenia","y":45.9283,"x":13.6378},{"n":"Black River","c":"Jamaica","y":18.0264,"x":-77.8487},{"n":"Tecax","c":"Mexico","y":20.2019,"x":-89.2881},{"n":"Ilirska Bistrica","c":"Slovenia","y":45.5651,"x":14.2493},{"n":"Ozolnieki","c":"Latvia","y":56.6908,"x":23.7881},{"n":"Gudja","c":"Malta","y":35.8483,"x":14.5025},{"n":"Cerknica","c":"Slovenia","y":45.7964,"x":14.3581},{"n":"Marsaxlokk","c":"Malta","y":35.8417,"x":14.5447},{"n":"Lasko","c":"Slovenia","y":46.1563,"x":15.2386},{"n":"Ruse","c":"Slovenia","y":46.5383,"x":15.5153},{"n":"Zelino","c":"Macedonia","y":41.9794,"x":21.0619},{"n":"Dingli","c":"Malta","y":35.8603,"x":14.3814},{"n":"Calheta de Sao Miguel","c":"Cabo Verde","y":15.1875,"x":-23.5917},{"n":"Bensonville","c":"Liberia","y":6.4456,"x":-10.6097},{"n":"Kirkop","c":"Malta","y":35.8419,"x":14.485},{"n":"Grevenmacher","c":"Luxembourg","y":49.6747,"x":6.4419},{"n":"Tearce","c":"Macedonia","y":42.0775,"x":21.0519},{"n":"Gharghur","c":"Malta","y":35.9241,"x":14.4534},{"n":"Ziri","c":"Slovenia","y":46.046,"x":14.1083},{"n":"Gornja Radgona","c":"Slovenia","y":46.681,"x":15.9883},{"n":"San Giljan","c":"Malta","y":35.9184,"x":14.4898},{"n":"Svencionys","c":"Lithuania","y":55.1333,"x":26.1556},{"n":"Aizpute","c":"Latvia","y":56.7211,"x":21.6017},{"n":"Wabag","c":"Papua New Guinea","y":-5.4833,"x":143.7},{"n":"Xewkija","c":"Malta","y":36.0331,"x":14.2583},{"n":"Trebnje","c":"Slovenia","y":45.9104,"x":15.0086},{"n":"Agdam","c":"Azerbaijan","y":39.9833,"x":46.9167},{"n":"Kardla","c":"Estonia","y":58.9944,"x":22.75},{"n":"Bugiri","c":"Uganda","y":0.5714,"x":33.7417},{"n":"Kaberamaido","c":"Uganda","y":1.7389,"x":33.1594},{"n":"Piran","c":"Slovenia","y":45.5271,"x":13.5685},{"n":"Kalvarija","c":"Lithuania","y":54.4147,"x":23.2281},{"n":"Makedonski Brod","c":"Macedonia","y":41.5133,"x":21.2153},{"n":"Janjanbureh","c":"Gambia, The","y":13.551,"x":-14.767},{"n":"Cankuzo","c":"Burundi","y":-3.2194,"x":30.5528},{"n":"Pinki","c":"Latvia","y":56.9444,"x":23.9108},{"n":"Moroto","c":"Uganda","y":2.5403,"x":34.64},{"n":"Gambela","c":"Ethiopia","y":8.25,"x":34.5833},{"n":"Baldone","c":"Latvia","y":56.7425,"x":24.3908},{"n":"Massenya","c":"Chad","y":11.4028,"x":16.17},{"n":"Imgarr","c":"Malta","y":35.9197,"x":14.3664},{"n":"Lazdijai","c":"Lithuania","y":54.2319,"x":23.517},{"n":"Ankaran","c":"Slovenia","y":45.5793,"x":13.7379},{"n":"Grobina","c":"Latvia","y":56.5375,"x":21.1675},{"n":"Thinadhoo","c":"Maldives","y":0.5303,"x":72.9967},{"n":"Imtarfa","c":"Malta","y":35.8908,"x":14.3969},{"n":"Funadhoo","c":"Maldives","y":6.1509,"x":73.2901},{"n":"Cantemir","c":"Moldova","y":46.2781,"x":28.2008},{"n":"Xghajra","c":"Malta","y":35.8864,"x":14.5472},{"n":"Alibunar","c":"Serbia","y":45.0808,"x":20.9658},{"n":"Demir Kapija","c":"Macedonia","y":41.4114,"x":22.2422},{"n":"Kandava","c":"Latvia","y":57.0364,"x":22.7761},{"n":"Aasiaat","c":"Greenland","y":68.7097,"x":-52.8694},{"n":"Qrendi","c":"Malta","y":35.8342,"x":14.4589},{"n":"Lenart v Slovenskih Goricah","c":"Slovenia","y":46.5755,"x":15.8306},{"n":"Ulbroka","c":"Latvia","y":56.9408,"x":24.2861},{"n":"Mezica","c":"Slovenia","y":46.5206,"x":14.8536},{"n":"Groningen","c":"Suriname","y":5.797,"x":-55.481},{"n":"Pehcevo","c":"Macedonia","y":41.7592,"x":22.8906},{"n":"Metlika","c":"Slovenia","y":45.6472,"x":15.3142},{"n":"Qaqortoq","c":"Greenland","y":60.7167,"x":-46.0333},{"n":"Saulkrasti","c":"Latvia","y":57.2636,"x":24.4164},{"n":"Louang Namtha","c":"Laos","y":20.95,"x":101.4167},{"n":"Ghajnsielem","c":"Malta","y":36.0269,"x":14.2903},{"n":"Kaabong","c":"Uganda","y":3.5204,"x":34.12},{"n":"Kulhudhuffushi","c":"Maldives","y":6.6223,"x":73.0702},{"n":"Rietavas","c":"Lithuania","y":55.725,"x":21.9278},{"n":"Mullingar","c":"Ireland","y":53.5333,"x":-7.35},{"n":"Porto Ingles","c":"Cabo Verde","y":15.1375,"x":-23.2083},{"n":"Cambridge","c":"United Kingdom","y":52.2053,"x":0.1192},{"n":"Borovnica","c":"Slovenia","y":45.918,"x":14.3642},{"n":"Safi","c":"Malta","y":35.8333,"x":14.485},{"n":"Lethem","c":"Guyana","y":3.3833,"x":-59.8},{"n":"Dhihdhoo","c":"Maldives","y":6.8874,"x":73.114},{"n":"Balaka","c":"Malawi","y":-14.9889,"x":34.9591},{"n":"Mabaruma","c":"Guyana","y":8.2,"x":-59.7833},{"n":"Mandalgovi","c":"Mongolia","y":45.7667,"x":106.2708},{"n":"Lendava","c":"Slovenia","y":46.5662,"x":16.4499},{"n":"Vojnik","c":"Slovenia","y":46.2931,"x":15.3028},{"n":"Brvenica","c":"Macedonia","y":41.9667,"x":20.9833},{"n":"Kudahuvadhoo","c":"Maldives","y":2.6717,"x":72.8936},{"n":"Plavinas","c":"Latvia","y":56.6161,"x":25.7217},{"n":"Kapchorwa","c":"Uganda","y":1.3965,"x":34.4509},{"n":"Sao Domingos","c":"Cabo Verde","y":15.025,"x":-23.5625},{"n":"Arima","c":"Trinidad And Tobago","y":10.6374,"x":-61.2823},{"n":"Novo Selo","c":"Macedonia","y":41.4128,"x":22.88},{"n":"Rasdhoo","c":"Maldives","y":4.2631,"x":72.9919},{"n":"Kerewan","c":"Gambia, The","y":13.494,"x":-16.095},{"n":"Broceni","c":"Latvia","y":56.6833,"x":22.5664},{"n":"Petrovec","c":"Macedonia","y":41.9333,"x":21.6167},{"n":"Kolonia","c":"Micronesia, Federated States Of","y":6.9639,"x":158.2081},{"n":"Vilani","c":"Latvia","y":56.5528,"x":26.9253},{"n":"Vevcani","c":"Macedonia","y":41.2403,"x":20.5931},{"n":"Al Wakrah","c":"Qatar","y":25.18,"x":51.61},{"n":"Tallaght","c":"Ireland","y":53.2878,"x":-6.3411},{"n":"Lipkovo","c":"Macedonia","y":42.1553,"x":21.5875},{"n":"Barclayville","c":"Liberia","y":4.8,"x":-8.1667},{"n":"Rujiena","c":"Latvia","y":57.8969,"x":25.3261},{"n":"Triesenberg","c":"Liechtenstein","y":47.1167,"x":9.5333},{"n":"Sannat","c":"Malta","y":36.0244,"x":14.2458},{"n":"Qala","c":"Malta","y":36.0353,"x":14.3103},{"n":"Kllokot","c":"Kosovo","y":42.3667,"x":21.3833},{"n":"Cestos City","c":"Liberia","y":5.4697,"x":-9.5817},{"n":"Tofol","c":"Micronesia, Federated States Of","y":5.3258,"x":163.0086},{"n":"Bundibugyo","c":"Uganda","y":0.7085,"x":30.0634},{"n":"Demir Hisar","c":"Macedonia","y":41.2208,"x":21.2031},{"n":"Ruggell","c":"Liechtenstein","y":47.245,"x":9.5332},{"n":"Salacgriva","c":"Latvia","y":57.7494,"x":24.3586},{"n":"Plasnica","c":"Macedonia","y":41.4667,"x":21.1167},{"n":"Koknese","c":"Latvia","y":56.65,"x":25.4333},{"n":"Rosoman","c":"Macedonia","y":41.5161,"x":21.9497},{"n":"Garoowe","c":"Somalia","y":8.4,"x":48.4833},{"n":"Mogila","c":"Macedonia","y":41.1083,"x":21.3786},{"n":"Fuerte Olimpo","c":"Paraguay","y":-21.0696,"x":-57.9},{"n":"Beltinci","c":"Slovenia","y":46.6053,"x":16.2406},{"n":"Skriveri","c":"Latvia","y":56.6467,"x":25.1222},{"n":"Krivogastani","c":"Macedonia","y":41.3358,"x":21.3331},{"n":"Banlung","c":"Cambodia","y":13.7394,"x":106.9873},{"n":"Phu Ly","c":"Vietnam","y":20.5453,"x":105.9122},{"n":"Nida","c":"Lithuania","y":55.304,"x":21.0053},{"n":"Wicklow","c":"Ireland","y":52.9779,"x":-6.033},{"n":"Zrnovci","c":"Macedonia","y":41.8542,"x":22.4442},{"n":"Birstonas","c":"Lithuania","y":54.6056,"x":24.0292},{"n":"Naklo","c":"Slovenia","y":46.2749,"x":14.3176},{"n":"Kercem","c":"Malta","y":36.0406,"x":14.2297},{"n":"Lacin","c":"Azerbaijan","y":39.6408,"x":46.5469},{"n":"Thulusdhoo","c":"Maldives","y":4.3742,"x":73.6517},{"n":"Clonmel","c":"Ireland","y":52.355,"x":-7.7039},{"n":"Wexford","c":"Ireland","y":52.3342,"x":-6.4575},{"n":"Auce","c":"Latvia","y":56.4611,"x":22.8942},{"n":"Vasilevo","c":"Macedonia","y":41.4758,"x":22.6417},{"n":"Gradsko","c":"Macedonia","y":41.5775,"x":21.9428},{"n":"Marka","c":"Somalia","y":1.7156,"x":44.7703},{"n":"Priekuli","c":"Latvia","y":57.3142,"x":25.3597},{"n":"Viligili","c":"Maldives","y":0.7539,"x":73.4353},{"n":"Cidade Velha","c":"Cabo Verde","y":14.9167,"x":-23.6042},{"n":"Ilukste","c":"Latvia","y":55.9781,"x":26.2967},{"n":"Roja","c":"Latvia","y":57.5031,"x":22.8106},{"n":"Chiradzulu","c":"Malawi","y":-15.7167,"x":35.2},{"n":"Victoria","c":"Malta","y":36.0444,"x":14.2397},{"n":"Bariadi","c":"Tanzania","y":-2.8,"x":33.9833},{"n":"Kegums","c":"Latvia","y":56.7444,"x":24.7214},{"n":"Onverwacht","c":"Suriname","y":5.6,"x":-55.2},{"n":"Same","c":"Timor-Leste","y":-9,"x":125.65},{"n":"Hoima","c":"Uganda","y":1.4356,"x":31.3436},{"n":"Geita","c":"Tanzania","y":-2.8714,"x":32.2294},{"n":"Garkalne","c":"Latvia","y":57.0458,"x":24.4186},{"n":"Vipava","c":"Slovenia","y":45.8463,"x":13.9622},{"n":"Vecumnieki","c":"Latvia","y":56.6064,"x":24.5222},{"n":"Incukalns","c":"Latvia","y":57.0964,"x":24.6875},{"n":"Ambrolauri","c":"Georgia","y":42.5194,"x":43.15},{"n":"Radece","c":"Slovenia","y":46.0659,"x":15.1729},{"n":"Kabarnet","c":"Kenya","y":0.4919,"x":35.743},{"n":"Jagodina","c":"Serbia","y":43.975,"x":21.2564},{"n":"Mukono","c":"Uganda","y":0.3533,"x":32.7553},{"n":"Ormoz","c":"Slovenia","y":46.4071,"x":16.1505},{"n":"Vuzenica","c":"Slovenia","y":46.5992,"x":15.1669},{"n":"Munxar","c":"Malta","y":36.0303,"x":14.2353},{"n":"Migori","c":"Kenya","y":-1.0634,"x":34.4731},{"n":"Zabljak","c":"Montenegro","y":43.1583,"x":19.1303},{"n":"Gamprin","c":"Liechtenstein","y":47.2199,"x":9.5099},{"n":"Karsava","c":"Latvia","y":56.7867,"x":27.6739},{"n":"Kerugoya","c":"Kenya","y":-0.4989,"x":37.2803},{"n":"Yumbe","c":"Uganda","y":3.4651,"x":31.2469},{"n":"Fontana","c":"Malta","y":36.0375,"x":14.2361},{"n":"Skrunda","c":"Latvia","y":56.6756,"x":22.0164},{"n":"Dagda","c":"Latvia","y":56.0947,"x":27.5369},{"n":"Paola","c":"Malta","y":35.8731,"x":14.4989},{"n":"Sihanoukville","c":"Cambodia","y":10.6333,"x":103.5},{"n":"Buchanan","c":"Liberia","y":5.8833,"x":-10.05},{"n":"Gharb","c":"Malta","y":36.0611,"x":14.2092},{"n":"Odranci","c":"Slovenia","y":46.5833,"x":16.2833},{"n":"Priekule","c":"Latvia","y":56.4472,"x":21.5933},{"n":"La Palma","c":"Panama","y":8.3982,"x":-78.1402},{"n":"Hithadhoo","c":"Maldives","y":-0.6,"x":73.0833},{"n":"Bosilovo","c":"Macedonia","y":41.4406,"x":22.7278},{"n":"Malpils","c":"Latvia","y":57.01,"x":24.9581},{"n":"Vinh Yen","c":"Vietnam","y":21.31,"x":105.5967},{"n":"Dar Naim","c":"Mauritania","y":18.0973,"x":-15.9327},{"n":"Jaunjelgava","c":"Latvia","y":56.6175,"x":25.0814},{"n":"Iten","c":"Kenya","y":0.6703,"x":35.5081},{"n":"Veymandoo","c":"Maldives","y":2.1878,"x":73.095},{"n":"Sentjernej","c":"Slovenia","y":45.8389,"x":15.3362},{"n":"Phalombe","c":"Malawi","y":-15.8,"x":35.65},{"n":"Varaklani","c":"Latvia","y":56.6078,"x":26.755},{"n":"Nyamira","c":"Kenya","y":-0.5633,"x":34.9358},{"n":"Ergli","c":"Latvia","y":56.8975,"x":25.6375},{"n":"Machinga","c":"Malawi","y":-14.9667,"x":35.5167},{"n":"Totness","c":"Suriname","y":5.8904,"x":-56.32},{"n":"Longford","c":"Ireland","y":53.727,"x":-7.7998},{"n":"Ropazi","c":"Latvia","y":56.9718,"x":24.6318},{"n":"Auki","c":"Solomon Islands","y":-8.7678,"x":160.6978},{"n":"Trim","c":"Ireland","y":53.555,"x":-6.7917},{"n":"Felidhoo","c":"Maldives","y":3.4718,"x":73.547},{"n":"Aioun","c":"Mauritania","y":16.6667,"x":-9.6167},{"n":"Xuddur","c":"Somalia","y":4.12,"x":43.8878},{"n":"Kasaali","c":"Uganda","y":-0.6167,"x":31.55},{"n":"Sabac","c":"Serbia","y":44.7558,"x":19.6939},{"n":"Bovec","c":"Slovenia","y":46.3378,"x":13.5522},{"n":"Nilandhoo","c":"Maldives","y":3.0567,"x":72.89},{"n":"Kirakira","c":"Solomon Islands","y":-10.4544,"x":161.9205},{"n":"Vainode","c":"Latvia","y":56.4185,"x":21.8523},{"n":"Carrick on Shannon","c":"Ireland","y":53.9469,"x":-8.09},{"n":"Viesite","c":"Latvia","y":56.3453,"x":25.5569},{"n":"Staro Nagoricane","c":"Macedonia","y":42.2,"x":21.83},{"n":"Lubana","c":"Latvia","y":56.9017,"x":26.7228},{"n":"Foammulah","c":"Maldives","y":-0.3,"x":73.4256},{"n":"Bu'aale","c":"Somalia","y":1.0833,"x":42.5833},{"n":"Tullamore","c":"Ireland","y":53.2667,"x":-7.5},{"n":"Fomboni","c":"Comoros","y":-12.2822,"x":43.7419},{"n":"Rankovce","c":"Macedonia","y":42.1817,"x":22.1228},{"n":"Kurunegala","c":"Sri Lanka","y":7.4833,"x":80.3667},{"n":"Xocali","c":"Azerbaijan","y":39.9111,"x":46.7892},{"n":"Oshakati","c":"Namibia","y":-17.8,"x":15.6833},{"n":"Murang'a","c":"Kenya","y":-0.721,"x":37.1526},{"n":"Novaci","c":"Macedonia","y":41.0419,"x":21.4561},{"n":"Dundaga","c":"Latvia","y":57.5167,"x":22.35},{"n":"Schellenberg","c":"Liechtenstein","y":47.2283,"x":9.5395},{"n":"Bududa","c":"Uganda","y":1.0112,"x":34.3311},{"n":"Zebbug","c":"Malta","y":35.8719,"x":14.4411},{"n":"Santo Antonio","c":"Sao Tome And Principe","y":1.6806,"x":7.4394},{"n":"Konce","c":"Macedonia","y":41.4958,"x":22.3825},{"n":"Mersrags","c":"Latvia","y":57.3333,"x":23.125},{"n":"Sotik Post","c":"Kenya","y":-0.7813,"x":35.3416},{"n":"Oblesevo","c":"Macedonia","y":41.8833,"x":22.3339},{"n":"Jegunovce","c":"Macedonia","y":42.0731,"x":21.1231},{"n":"Vreed-en-Hoop","c":"Guyana","y":6.8,"x":-58.1833},{"n":"Zilupe","c":"Latvia","y":56.3856,"x":28.1225},{"n":"Escaldes-Engordany","c":"Andorra","y":42.5085,"x":1.5385},{"n":"Gornji Milanovac","c":"Serbia","y":44.0212,"x":20.456},{"n":"Tam Ky","c":"Vietnam","y":15.5667,"x":108.4833},{"n":"Cesvaine","c":"Latvia","y":56.9683,"x":26.3067},{"n":"Radovljica","c":"Slovenia","y":46.3444,"x":14.1744},{"n":"Rauna","c":"Latvia","y":57.3319,"x":25.6097},{"n":"Vilaka","c":"Latvia","y":57.1842,"x":27.6722},{"n":"Weno","c":"Micronesia, Federated States Of","y":7.45,"x":151.85},{"n":"Taro","c":"Solomon Islands","y":-6.7111,"x":156.3972},{"n":"Oranjestad","c":"Netherlands","y":17.4833,"x":-62.9833},{"n":"Belcista","c":"Macedonia","y":41.3028,"x":20.8303},{"n":"Naxxar","c":"Malta","y":35.9136,"x":14.4436},{"n":"Trbovlje","c":"Slovenia","y":46.155,"x":15.0533},{"n":"Ragana","c":"Latvia","y":57.1797,"x":24.7033},{"n":"Muli","c":"Maldives","y":2.9217,"x":73.5811},{"n":"Ar Rayyan","c":"Qatar","y":25.2919,"x":51.4244},{"n":"Wakiso","c":"Uganda","y":0.4044,"x":32.4594},{"n":"Mazsalaca","c":"Latvia","y":57.8667,"x":25.05},{"n":"Ivancna Gorica","c":"Slovenia","y":45.9383,"x":14.8044},{"n":"Rogaska Slatina","c":"Slovenia","y":46.2375,"x":15.6397},{"n":"Lyantonde","c":"Uganda","y":-0.4031,"x":31.1572},{"n":"Aloja","c":"Latvia","y":57.7669,"x":24.8828},{"n":"Ain Temouchent","c":"Algeria","y":35.3044,"x":-1.14},{"n":"Serravalle","c":"San Marino","y":43.9683,"x":12.4811},{"n":"Kobarid","c":"Slovenia","y":46.2471,"x":13.5796},{"n":"`Amran","c":"Yemen","y":15.6594,"x":43.9439},{"n":"Halba","c":"Lebanon","y":34.5428,"x":36.0797},{"n":"Andrijevica","c":"Montenegro","y":42.7339,"x":19.7919},{"n":"Nenagh","c":"Ireland","y":52.8619,"x":-8.1967},{"n":"Ligatne","c":"Latvia","y":57.2336,"x":25.0397},{"n":"Akniste","c":"Latvia","y":56.1622,"x":25.7411},{"n":"Nereta","c":"Latvia","y":56.2044,"x":25.3078},{"n":"Chikwawa","c":"Malawi","y":-16.035,"x":34.801},{"n":"Strenci","c":"Latvia","y":57.6272,"x":25.685},{"n":"Kasungu","c":"Malawi","y":-13.0364,"x":33.4822},{"n":"Labuan","c":"Malaysia","y":5.2803,"x":115.2475},{"n":"Lata","c":"Solomon Islands","y":-10.738,"x":165.8567},{"n":"Nica","c":"Latvia","y":56.3458,"x":21.0644},{"n":"Pozega","c":"Serbia","y":43.85,"x":20.05},{"n":"Lozovo","c":"Macedonia","y":41.7817,"x":21.9025},{"n":"Koceni","c":"Latvia","y":57.5214,"x":25.3381},{"n":"Picos","c":"Cabo Verde","y":15.0833,"x":-23.65},{"n":"San Lawrenz","c":"Malta","y":36.055,"x":14.2042},{"n":"An Cabhan","c":"Ireland","y":53.9908,"x":-7.3606},{"n":"Dolneni","c":"Macedonia","y":41.4264,"x":21.4536},{"n":"Fonadhoo","c":"Maldives","y":1.8342,"x":73.5031},{"n":"Zirovnica","c":"Slovenia","y":46.4047,"x":14.14},{"n":"Manadhoo","c":"Maldives","y":5.7669,"x":73.4136},{"n":"Ponta do Sol","c":"Cabo Verde","y":17.2014,"x":-25.0917},{"n":"Krupanj","c":"Serbia","y":44.3656,"x":19.3619},{"n":"Lebane","c":"Serbia","y":42.9167,"x":21.7333},{"n":"Store","c":"Slovenia","y":46.2208,"x":15.3139},{"n":"Jaunpiebalga","c":"Latvia","y":57.1797,"x":26.0544},{"n":"Siaya","c":"Kenya","y":0.0607,"x":34.2881},{"n":"Rostusa","c":"Macedonia","y":41.61,"x":20.6},{"n":"Cerklje na Gorenjskem","c":"Slovenia","y":46.2542,"x":14.4886},{"n":"Isale","c":"Burundi","y":-3.3444,"x":29.4833},{"n":"Sostanj","c":"Slovenia","y":46.38,"x":15.0486},{"n":"Dien Bien Phu","c":"Vietnam","y":21.3833,"x":103.0169},{"n":"P'yongsong","c":"Korea, North","y":39.2464,"x":125.8719},{"n":"Pavilosta","c":"Latvia","y":56.8878,"x":21.1842},{"n":"Centar Zupa","c":"Macedonia","y":41.4775,"x":20.5578},{"n":"Aglona","c":"Latvia","y":56.1233,"x":27.0167},{"n":"Scarborough","c":"Trinidad And Tobago","y":11.1811,"x":-60.7333},{"n":"Diego Martin","c":"Trinidad And Tobago","y":10.7167,"x":-61.5667},{"n":"Vladicin Han","c":"Serbia","y":42.7,"x":22.0667},{"n":"Ape","c":"Latvia","y":57.5392,"x":26.6928},{"n":"Jaunpils","c":"Latvia","y":56.7314,"x":23.0125},{"n":"Knjazevac","c":"Serbia","y":43.5,"x":22.4333},{"n":"Ljubovija","c":"Serbia","y":44.1869,"x":19.3728},{"n":"Smederevska Palanka","c":"Serbia","y":44.3655,"x":20.9587},{"n":"Zelenikovo","c":"Macedonia","y":41.8867,"x":21.5869},{"n":"Cucer-Sandevo","c":"Macedonia","y":42.0975,"x":21.3877},{"n":"Imdina","c":"Malta","y":35.8858,"x":14.4031},{"n":"Mahonda","c":"Tanzania","y":-5.9897,"x":39.2519},{"n":"Eenhana","c":"Namibia","y":-17.4667,"x":16.3333},{"n":"Mali Zvornik","c":"Serbia","y":44.3992,"x":19.1214},{"n":"Point Fortin","c":"Trinidad And Tobago","y":10.1741,"x":-61.6841},{"n":"Kostanjevica na Krki","c":"Slovenia","y":45.8463,"x":15.4249},{"n":"Port Laoise","c":"Ireland","y":53.0309,"x":-7.3008},{"n":"Surdulica","c":"Serbia","y":42.695,"x":22.1672},{"n":"Pozarevac","c":"Serbia","y":44.62,"x":21.1897},{"n":"Sirvintos","c":"Lithuania","y":55.047,"x":24.942},{"n":"Mayuge","c":"Uganda","y":0.4578,"x":33.4806},{"n":"Varazdin","c":"Croatia","y":46.3,"x":16.3333},{"n":"Zajecar","c":"Serbia","y":43.9042,"x":22.2847},{"n":"Lakatoro","c":"Vanuatu","y":-16.1069,"x":167.4208},{"n":"Dowa","c":"Malawi","y":-13.6532,"x":33.9385},{"n":"Hvalba","c":"Faroe Islands","y":61.6,"x":-6.9556},{"n":"Castlebar","c":"Ireland","y":53.85,"x":-9.3},{"n":"Ain Defla","c":"Algeria","y":36.2583,"x":1.9583},{"n":"Riebini","c":"Latvia","y":56.3394,"x":26.7975},{"n":"Madaba","c":"Jordan","y":31.7167,"x":35.8},{"n":"Selibaby","c":"Mauritania","y":15.167,"x":-12.1833},{"n":"Asaba","c":"Nigeria","y":6.1833,"x":6.75},{"n":"Prebold","c":"Slovenia","y":46.2369,"x":15.0925},{"n":"Tulagi","c":"Solomon Islands","y":-9.1031,"x":160.1506},{"n":"Pilsrundale","c":"Latvia","y":56.42,"x":24.0097},{"n":"Miklavz na Dravskem Polju","c":"Slovenia","y":46.5058,"x":15.6972},{"n":"Aranguez","c":"Trinidad And Tobago","y":10.6472,"x":-61.4461},{"n":"Alsunga","c":"Latvia","y":56.9803,"x":21.5667},{"n":"Karbinci","c":"Macedonia","y":41.8167,"x":22.2375},{"n":"Bangar","c":"Brunei","y":4.7086,"x":115.0739},{"n":"Mozirje","c":"Slovenia","y":46.3394,"x":14.9633},{"n":"Rumonge","c":"Burundi","y":-3.9736,"x":29.4386},{"n":"Paracin","c":"Serbia","y":43.8667,"x":21.4167},{"n":"Naukseni","c":"Latvia","y":57.8836,"x":25.4528},{"n":"Bulambuli","c":"Uganda","y":1.1667,"x":34.3833},{"n":"Borgo Maggiore","c":"San Marino","y":43.9408,"x":12.4475},{"n":"Maracha","c":"Uganda","y":3.2704,"x":30.9553},{"n":"Luwero","c":"Uganda","y":0.8492,"x":32.4731},{"n":"Kapenguria","c":"Kenya","y":1.2389,"x":35.1119},{"n":"Smarde","c":"Latvia","y":56.955,"x":23.3381},{"n":"Polzela","c":"Slovenia","y":46.2833,"x":15.0667},{"n":"The Bottom","c":"Netherlands","y":17.6261,"x":-63.2492},{"n":"Yenagoa","c":"Nigeria","y":4.9267,"x":6.2676},{"n":"Namayingo","c":"Uganda","y":0.2398,"x":33.8849},{"n":"Lucani","c":"Serbia","y":43.8667,"x":20.1333},{"n":"Suong","c":"Cambodia","y":11.9167,"x":105.65},{"n":"Ghasri","c":"Malta","y":36.0578,"x":14.2264},{"n":"Gllogovc","c":"Kosovo","y":42.5872,"x":20.8206},{"n":"Smederevo","c":"Serbia","y":44.6633,"x":20.9289},{"n":"Dong Xoai","c":"Vietnam","y":11.5349,"x":106.8832},{"n":"Mila","c":"Algeria","y":36.4481,"x":6.2622},{"n":"Al Buraymi","c":"Oman","y":24.2558,"x":55.8025},{"n":"Da Lat","c":"Vietnam","y":11.9359,"x":108.4429},{"n":"Luuka Town","c":"Uganda","y":0.7008,"x":33.3002},{"n":"Kabugao","c":"Philippines","y":18.0231,"x":121.184},{"n":"Planken","c":"Liechtenstein","y":47.1801,"x":9.5599},{"n":"Spodnje Hoce","c":"Slovenia","y":46.5,"x":15.65},{"n":"Selnica ob Dravi","c":"Slovenia","y":46.55,"x":15.495},{"n":"Aleksinac","c":"Serbia","y":43.5383,"x":21.7047},{"n":"Despotovac","c":"Serbia","y":44.0833,"x":21.4333},{"n":"Jincheng","c":"Taiwan","y":24.4167,"x":118.3167},{"n":"Smartno","c":"Slovenia","y":46.0444,"x":14.8442},{"n":"Cibitoke","c":"Burundi","y":-2.8869,"x":29.1248},{"n":"Medvode","c":"Slovenia","y":46.1333,"x":14.4333},{"n":"Kibuku","c":"Uganda","y":1.0433,"x":33.7975},{"n":"Bupoto","c":"Uganda","y":0.9061,"x":34.3578},{"n":"Lai Chau","c":"Vietnam","y":22.3991,"x":103.4393},{"n":"Neno","c":"Malawi","y":-15.3981,"x":34.6534},{"n":"Moravce","c":"Slovenia","y":46.1369,"x":14.745},{"n":"Apac","c":"Uganda","y":1.9845,"x":32.534},{"n":"Rucava","c":"Latvia","y":56.1592,"x":21.1619},{"n":"Kladovo","c":"Serbia","y":44.6039,"x":22.6072},{"n":"Skopun","c":"Faroe Islands","y":61.9125,"x":-6.8719},{"n":"Kanal","c":"Slovenia","y":46.0886,"x":13.6397},{"n":"Rugaji","c":"Latvia","y":56.9994,"x":27.1269},{"n":"Sankt Polten","c":"Austria","y":48.1982,"x":15.6431},{"n":"Gornji Petrovci","c":"Slovenia","y":46.8053,"x":16.2225},{"n":"Nazarje","c":"Slovenia","y":46.3176,"x":14.9467},{"n":"Menges","c":"Slovenia","y":46.1669,"x":14.575},{"n":"Zrece","c":"Slovenia","y":46.3833,"x":15.3667},{"n":"Preddvor","c":"Slovenia","y":46.3025,"x":14.4231},{"n":"Rubirizi","c":"Uganda","y":-0.2989,"x":30.1336},{"n":"Vwawa","c":"Tanzania","y":-9.1081,"x":32.9347},{"n":"Pirot","c":"Serbia","y":43.1519,"x":22.585},{"n":"Domagnano","c":"San Marino","y":43.9492,"x":12.4686},{"n":"Vecpiebalga","c":"Latvia","y":57.0619,"x":25.8108},{"n":"Busesa","c":"Uganda","y":0.6263,"x":33.6003},{"n":"Poljcane","c":"Slovenia","y":46.3119,"x":15.5792},{"n":"Vlasotince","c":"Serbia","y":42.9667,"x":22.1333},{"n":"Koani","c":"Tanzania","y":-6.1333,"x":39.2833},{"n":"Dhuusamarreeb","c":"Somalia","y":5.5375,"x":46.3875},{"n":"Smarje","c":"Slovenia","y":46.2272,"x":15.5192},{"n":"Murmuiza","c":"Latvia","y":57.4731,"x":25.4917},{"n":"Komenda","c":"Slovenia","y":46.2038,"x":14.5407},{"n":"Baltinava","c":"Latvia","y":56.9447,"x":27.6447},{"n":"Fada","c":"Chad","y":17.1833,"x":21.5833},{"n":"Skofljica","c":"Slovenia","y":45.9833,"x":14.5767},{"n":"Crna Trava","c":"Serbia","y":42.8101,"x":22.299},{"n":"Brezovica","c":"Slovenia","y":46.0333,"x":14.4},{"n":"Buala","c":"Solomon Islands","y":-8.1448,"x":159.5905},{"n":"Buikwe","c":"Uganda","y":0.3375,"x":33.0106},{"n":"Kagadi","c":"Uganda","y":0.9378,"x":30.8089},{"n":"Burtnieki","c":"Latvia","y":57.6947,"x":25.275},{"n":"Muta","c":"Slovenia","y":46.6114,"x":15.1661},{"n":"Radenci","c":"Slovenia","y":46.6472,"x":16.0442},{"n":"Hvannasund","c":"Faroe Islands","y":62.2833,"x":-6.5167},{"n":"Log","c":"Slovenia","y":46.0167,"x":14.3667},{"n":"Colonia","c":"Micronesia, Federated States Of","y":9.5144,"x":138.1292},{"n":"Tisina","c":"Slovenia","y":46.6556,"x":16.0933},{"n":"Spodnji Duplek","c":"Slovenia","y":46.5031,"x":15.7453},{"n":"Bushenyi","c":"Uganda","y":-0.5853,"x":30.2114},{"n":"Liegi","c":"Latvia","y":56.5828,"x":21.3331},{"n":"Acquaviva","c":"San Marino","y":43.9453,"x":12.4183},{"n":"Kon Tum","c":"Vietnam","y":14.3436,"x":107.9789},{"n":"Ash Shihaniyah","c":"Qatar","y":25.3722,"x":51.2047},{"n":"Kaliro","c":"Uganda","y":0.8949,"x":33.5048},{"n":"Ljutomer","c":"Slovenia","y":46.5208,"x":16.1975},{"n":"Prokuplje","c":"Serbia","y":43.2339,"x":21.5861},{"n":"Batocina","c":"Serbia","y":44.15,"x":21.0833},{"n":"Afega","c":"Samoa","y":-13.7973,"x":-171.8531},{"n":"Umm Salal `Ali","c":"Qatar","y":25.4697,"x":51.3975},{"n":"Aileu","c":"Timor-Leste","y":-8.7281,"x":125.5664},{"n":"Oplotnica","c":"Slovenia","y":46.3878,"x":15.4467},{"n":"Fiorentino","c":"San Marino","y":43.9092,"x":12.4581},{"n":"Butebo","c":"Uganda","y":1.1942,"x":33.9222},{"n":"Akjoujt","c":"Mauritania","y":19.747,"x":-14.391},{"n":"Namutumba","c":"Uganda","y":0.8363,"x":33.6858},{"n":"Debe","c":"Trinidad And Tobago","y":10.2,"x":-61.45},{"n":"Stalbe","c":"Latvia","y":57.3711,"x":25.0322},{"n":"Star Dojran","c":"Macedonia","y":41.1865,"x":22.7203},{"n":"Miragoane","c":"Haiti","y":18.4411,"x":-73.0883},{"n":"Lukovica","c":"Slovenia","y":46.1667,"x":14.7},{"n":"Dogbo","c":"Benin","y":6.8167,"x":1.7833},{"n":"Abakaliki","c":"Nigeria","y":6.3249,"x":8.1137},{"n":"Manafwa","c":"Uganda","y":0.9784,"x":34.3743},{"n":"Dimitrovgrad","c":"Serbia","y":43.0167,"x":22.7833},{"n":"Tervete","c":"Latvia","y":56.4497,"x":23.3594},{"n":"Sencur","c":"Slovenia","y":46.2456,"x":14.4197},{"n":"Ibanda","c":"Uganda","y":-0.1539,"x":30.5319},{"n":"Mirna","c":"Slovenia","y":45.9553,"x":15.0619},{"n":"Race","c":"Slovenia","y":46.4519,"x":15.6814},{"n":"Wote","c":"Kenya","y":-1.7808,"x":37.6288},{"n":"Mwatate","c":"Kenya","y":-3.505,"x":38.3772},{"n":"Vitanje","c":"Slovenia","y":46.3817,"x":15.2958},{"n":"Doljevac","c":"Serbia","y":43.1968,"x":21.8334},{"n":"Rukungiri","c":"Uganda","y":-0.8411,"x":29.9419},{"n":"Lifford","c":"Ireland","y":54.8356,"x":-7.4779},{"n":"Isangel","c":"Vanuatu","y":-19.5417,"x":169.2817},{"n":"Koprivnica","c":"Croatia","y":46.15,"x":16.8167},{"n":"Toftir","c":"Faroe Islands","y":62.0978,"x":-6.7369},{"n":"Gombe","c":"Uganda","y":0.1818,"x":32.1158},{"n":"Montegiardino","c":"San Marino","y":43.9092,"x":12.4833},{"n":"Kyenjojo","c":"Uganda","y":0.6328,"x":30.6214},{"n":"Porkeri","c":"Faroe Islands","y":61.4814,"x":-6.7458},{"n":"`Ajlun","c":"Jordan","y":32.3325,"x":35.7517},{"n":"Velika Plana","c":"Serbia","y":44.3333,"x":21.0833},{"n":"Az Za`ayin","c":"Qatar","y":25.5669,"x":51.4847},{"n":"Al Jabin","c":"Yemen","y":14.704,"x":43.599},{"n":"Mitoma","c":"Uganda","y":-0.6842,"x":30.07},{"n":"Kalungu","c":"Uganda","y":-0.1667,"x":31.7569},{"n":"Svilajnac","c":"Serbia","y":44.2167,"x":21.2},{"n":"Ad Dali`","c":"Yemen","y":13.6957,"x":44.7314},{"n":"Santa Lucija","c":"Malta","y":36.0431,"x":14.2172},{"n":"Majsperk","c":"Slovenia","y":46.3517,"x":15.7336},{"n":"Bukomansimbi","c":"Uganda","y":-0.1578,"x":31.6042},{"n":"Svrljig","c":"Serbia","y":43.4167,"x":22.1167},{"n":"Horjul","c":"Slovenia","y":46.0236,"x":14.2992},{"n":"Luce","c":"Slovenia","y":46.3561,"x":14.7467},{"n":"Spodnja Hajdina","c":"Slovenia","y":46.4089,"x":15.8469},{"n":"Nelspruit","c":"South Africa","y":-25.4745,"x":30.9703},{"n":"Sid","c":"Serbia","y":45.1283,"x":19.2264},{"n":"Negotin","c":"Serbia","y":44.2167,"x":22.5167},{"n":"Kajiado","c":"Kenya","y":-1.85,"x":36.7833},{"n":"Vodice","c":"Slovenia","y":46.2,"x":14.5},{"n":"Rubanda","c":"Uganda","y":-1.1883,"x":29.8461},{"n":"Waitangi","c":"New Zealand","y":-43.951,"x":-176.561},{"n":"Dapaong","c":"Togo","y":10.8623,"x":0.2076},{"n":"Pivka","c":"Slovenia","y":45.6794,"x":14.1967},{"n":"Braslovce","c":"Slovenia","y":46.2897,"x":15.0389},{"n":"Butaleja","c":"Uganda","y":0.9166,"x":33.9563},{"n":"Sakete","c":"Benin","y":6.7362,"x":2.6587},{"n":"Tivat","c":"Montenegro","y":42.43,"x":18.7},{"n":"Lovrenc na Pohorju","c":"Slovenia","y":46.5406,"x":15.3931},{"n":"Crna na Koroskem","c":"Slovenia","y":46.4667,"x":14.85},{"n":"Pesnica","c":"Slovenia","y":46.6069,"x":15.6767},{"n":"Serere","c":"Uganda","y":1.518,"x":33.4589},{"n":"Amuria","c":"Uganda","y":2.0036,"x":33.6511},{"n":"Kenge","c":"Congo (Kinshasa)","y":-4.8296,"x":16.8999},{"n":"Nsiika","c":"Uganda","y":-0.3831,"x":30.465},{"n":"Bojnik","c":"Serbia","y":43.0142,"x":21.718},{"n":"Kibiito","c":"Uganda","y":0.4772,"x":30.1925},{"n":"Kibingo","c":"Uganda","y":-0.626,"x":30.4359},{"n":"Capellen","c":"Luxembourg","y":49.6444,"x":5.9897},{"n":"Bukedea","c":"Uganda","y":1.3169,"x":34.0506},{"n":"Dobrna","c":"Slovenia","y":46.3375,"x":15.2264},{"n":"Samraong","c":"Cambodia","y":14.1817,"x":103.5176},{"n":"Ntara","c":"Uganda","y":0.0044,"x":30.3658},{"n":"Wiltz","c":"Luxembourg","y":49.9689,"x":5.9319},{"n":"Binyin","c":"Uganda","y":1.4167,"x":34.5333},{"n":"Sentilj","c":"Slovenia","y":46.6817,"x":15.6481},{"n":"Kaedi","c":"Mauritania","y":16.1503,"x":-13.5037},{"n":"Sari","c":"Iran","y":36.5633,"x":53.0601},{"n":"Vransko","c":"Slovenia","y":46.2439,"x":14.9514},{"n":"Sentrupert","c":"Slovenia","y":45.9778,"x":15.0956},{"n":"Mparo","c":"Uganda","y":-1.1647,"x":30.0378},{"n":"Bistrica ob Sotli","c":"Slovenia","y":46.0569,"x":15.6625},{"n":"Kinoni","c":"Uganda","y":-0.6583,"x":30.4581},{"n":"Ol Kalou","c":"Kenya","y":-0.2643,"x":36.3788},{"n":"Logatec","c":"Slovenia","y":45.9144,"x":14.2258},{"n":"Kole","c":"Uganda","y":2.4002,"x":32.8003},{"n":"Trzic","c":"Slovenia","y":46.3667,"x":14.3167},{"n":"Bohinjska Bistrica","c":"Slovenia","y":46.2769,"x":13.955},{"n":"Zombo","c":"Uganda","y":2.5135,"x":30.9091},{"n":"Narok","c":"Kenya","y":-1.0833,"x":35.8667},{"n":"Rakai","c":"Uganda","y":-0.72,"x":31.4839},{"n":"Encamp","c":"Andorra","y":42.5167,"x":1.5667},{"n":"Lwengo","c":"Uganda","y":-0.4161,"x":31.4081},{"n":"Trzin","c":"Slovenia","y":46.1333,"x":14.5667},{"n":"Recica","c":"Slovenia","y":46.3167,"x":14.9167},{"n":"Heydarabad","c":"Azerbaijan","y":39.7229,"x":44.8485},{"n":"Gorisnica","c":"Slovenia","y":46.4147,"x":16.0139},{"n":"Bukwo","c":"Uganda","y":1.3,"x":34.75},{"n":"Omuthiya","c":"Namibia","y":-18.3592,"x":16.5795},{"n":"Volcja Draga","c":"Slovenia","y":45.9069,"x":13.6775},{"n":"Kasanda","c":"Uganda","y":0.5567,"x":31.8022},{"n":"Loja","c":"Latvia","y":57.1528,"x":24.6444},{"n":"Dokolo","c":"Uganda","y":1.9167,"x":33.172},{"n":"Dornava","c":"Slovenia","y":46.4367,"x":15.9536},{"n":"Leulumoega","c":"Samoa","y":-13.823,"x":-171.9613},{"n":"Topola","c":"Serbia","y":44.2525,"x":20.6761},{"n":"Balzers","c":"Liechtenstein","y":47.0667,"x":9.5025},{"n":"Kamwenge","c":"Uganda","y":0.2111,"x":30.4208},{"n":"Zelezniki","c":"Slovenia","y":46.2333,"x":14.1667},{"n":"Ngora","c":"Uganda","y":1.4314,"x":33.7772},{"n":"Kara","c":"Togo","y":9.5511,"x":1.1861},{"n":"Dol","c":"Slovenia","y":46.0886,"x":14.6008},{"n":"Ig","c":"Slovenia","y":45.9603,"x":14.5289},{"n":"Techiman","c":"Ghana","y":7.5905,"x":-1.9395},{"n":"Guadalupe","c":"Sao Tome And Principe","y":0.3792,"x":6.6375},{"n":"Alebtong","c":"Uganda","y":2.2447,"x":33.2547},{"n":"Brcko","c":"Bosnia And Herzegovina","y":44.8783,"x":18.8092},{"n":"Gorenja Vas","c":"Slovenia","y":46.1072,"x":14.1481},{"n":"Pante Macassar","c":"Timor-Leste","y":-9.2,"x":124.3833},{"n":"Cerkno","c":"Slovenia","y":46.1256,"x":13.9817},{"n":"Suai","c":"Timor-Leste","y":-9.3129,"x":125.2565},{"n":"Lospalos","c":"Timor-Leste","y":-8.5167,"x":127.0333},{"n":"Stari Trg","c":"Slovenia","y":45.7128,"x":14.4694},{"n":"Chiesanuova","c":"San Marino","y":43.9061,"x":12.4214},{"n":"Sveti Jurij","c":"Slovenia","y":46.5695,"x":16.0235},{"n":"Pombas","c":"Cabo Verde","y":17.1503,"x":-25.0201},{"n":"Videm","c":"Slovenia","y":45.85,"x":14.6942},{"n":"Kanungu","c":"Uganda","y":-0.9575,"x":29.7897},{"n":"Ljubno","c":"Slovenia","y":46.3456,"x":14.835},{"n":"Straza","c":"Slovenia","y":45.78,"x":15.0728},{"n":"Kanoni","c":"Uganda","y":0.1772,"x":31.8811},{"n":"Kokopo","c":"Papua New Guinea","y":-4.35,"x":152.2736},{"n":"Sejong","c":"Korea, South","y":36.6092,"x":127.2919},{"n":"Ramotswa","c":"Botswana","y":-24.8667,"x":25.8167},{"n":"Mulifanua","c":"Samoa","y":-13.8318,"x":-172.036},{"n":"Smarjeske Toplice","c":"Slovenia","y":45.862,"x":15.2231},{"n":"Al `Aziziyah","c":"Libya","y":32.5319,"x":13.0175},{"n":"Kidricevo","c":"Slovenia","y":46.4036,"x":15.7911},{"n":"Semic","c":"Slovenia","y":45.6461,"x":15.1822},{"n":"Oyam","c":"Uganda","y":2.2141,"x":32.3703},{"n":"Pozega","c":"Croatia","y":45.3314,"x":17.6744},{"n":"Ilinden","c":"Macedonia","y":41.9945,"x":21.58},{"n":"Starse","c":"Slovenia","y":46.4658,"x":15.7672},{"n":"Dobrovo","c":"Slovenia","y":45.9964,"x":13.5264},{"n":"Turnisce","c":"Slovenia","y":46.6278,"x":16.3203},{"n":"Yamaguchi","c":"Japan","y":34.1782,"x":131.4735},{"n":"Gia Nghia","c":"Vietnam","y":12.0042,"x":107.6907},{"n":"Blace","c":"Serbia","y":43.2906,"x":21.2847},{"n":"La Massana","c":"Andorra","y":42.5434,"x":1.5148},{"n":"Tabor","c":"Slovenia","y":46.2361,"x":15.0183},{"n":"Saltangara","c":"Faroe Islands","y":62.1156,"x":-6.7206},{"n":"Krizevci","c":"Slovenia","y":46.5683,"x":16.1386},{"n":"Tutong","c":"Brunei","y":4.8067,"x":114.6592},{"n":"Sembabule","c":"Uganda","y":-0.0772,"x":31.4567},{"n":"Vianden","c":"Luxembourg","y":49.935,"x":6.2089},{"n":"Tsirang","c":"Bhutan","y":27.0219,"x":90.1229},{"n":"Kakumiro","c":"Uganda","y":0.7806,"x":31.3236},{"n":"Pailin","c":"Cambodia","y":12.8489,"x":102.6093},{"n":"Sveta Trojica v Slovenskih Goricah","c":"Slovenia","y":46.5767,"x":15.8769},{"n":"Nkurenkuru","c":"Namibia","y":-17.6167,"x":18.6},{"n":"Sveta Ana","c":"Slovenia","y":46.6492,"x":15.8442},{"n":"Tolmin","c":"Slovenia","y":46.1864,"x":13.7361},{"n":"Rabak","c":"Sudan","y":13.188,"x":32.7437},{"n":"Princes Town","c":"Trinidad And Tobago","y":10.2667,"x":-61.3833},{"n":"Triesen","c":"Liechtenstein","y":47.11,"x":9.5239},{"n":"Benedikt","c":"Slovenia","y":46.6086,"x":15.8883},{"n":"Cibla","c":"Latvia","y":56.55,"x":27.8839},{"n":"Sant Julia de Loria","c":"Andorra","y":42.4664,"x":1.4933},{"n":"Faetano","c":"San Marino","y":43.9261,"x":12.4981},{"n":"Buyende","c":"Uganda","y":1.1517,"x":33.155},{"n":"Joao Teves","c":"Cabo Verde","y":15.0669,"x":-23.5892},{"n":"Santana","c":"Sao Tome And Principe","y":0.26,"x":6.7414},{"n":"Kalaki","c":"Uganda","y":1.816,"x":33.337},{"n":"Vecvarkava","c":"Latvia","y":56.1983,"x":26.5083},{"n":"Kwale","c":"Kenya","y":-4.1737,"x":39.4521},{"n":"Isingiro","c":"Uganda","y":-0.8686,"x":30.8302},{"n":"Apatin","c":"Serbia","y":45.6667,"x":18.9833},{"n":"Kyegegwa","c":"Uganda","y":0.5022,"x":31.0414},{"n":"Sefwi Wiawso","c":"Ghana","y":6.2058,"x":-2.4894},{"n":"Mersch","c":"Luxembourg","y":49.7489,"x":6.1061},{"n":"Ucar","c":"Azerbaijan","y":40.5121,"x":47.6519},{"n":"Dolenjske Toplice","c":"Slovenia","y":45.7667,"x":15.0667},{"n":"Hongseong","c":"Korea, South","y":36.6009,"x":126.665},{"n":"Strendur","c":"Faroe Islands","y":62.1096,"x":-6.7617},{"n":"Tuzi","c":"Montenegro","y":42.3656,"x":19.3314},{"n":"Verzej","c":"Slovenia","y":46.5836,"x":16.1653},{"n":"Zgornja Kungota","c":"Slovenia","y":46.6392,"x":15.6156},{"n":"Muan","c":"Korea, South","y":34.9897,"x":126.4714},{"n":"Crensovci","c":"Slovenia","y":46.5744,"x":16.2906},{"n":"Mirna Pec","c":"Slovenia","y":45.8603,"x":15.0833},{"n":"Saratamata","c":"Vanuatu","y":-15.2869,"x":167.9906},{"n":"Kanchanaburi","c":"Thailand","y":14.0194,"x":99.5311},{"n":"Rumuruti","c":"Kenya","y":0.2725,"x":36.5381},{"n":"Arilje","c":"Serbia","y":43.7519,"x":20.0906},{"n":"Kovin","c":"Serbia","y":44.7475,"x":20.9761},{"n":"Butalangu","c":"Uganda","y":0.7011,"x":32.2481},{"n":"Boljevac","c":"Serbia","y":43.8247,"x":21.9519},{"n":"San Jose de las Lajas","c":"Cuba","y":22.9614,"x":-82.1511},{"n":"Markovci","c":"Slovenia","y":46.3833,"x":15.95},{"n":"Zuzemberk","c":"Slovenia","y":45.8339,"x":14.9292},{"n":"Phon-Hong","c":"Laos","y":18.4953,"x":102.4153},{"n":"Kosjeric","c":"Serbia","y":44,"x":19.9167},{"n":"Tvoroyri","c":"Faroe Islands","y":61.5544,"x":-6.8063},{"n":"Dobrova","c":"Slovenia","y":46.055,"x":14.4172},{"n":"Amolatar","c":"Uganda","y":1.6378,"x":32.8448},{"n":"Lelydorp","c":"Suriname","y":5.7,"x":-55.2333},{"n":"Velike Lasce","c":"Slovenia","y":45.8322,"x":14.6364},{"n":"Puconci","c":"Slovenia","y":46.7067,"x":16.1564},{"n":"Morant Bay","c":"Jamaica","y":17.8814,"x":-76.4092},{"n":"Skocjan","c":"Slovenia","y":45.9067,"x":15.2914},{"n":"Drabesi","c":"Latvia","y":57.2425,"x":25.2825},{"n":"Cicevac","c":"Serbia","y":43.7167,"x":21.45},{"n":"Mokronog","c":"Slovenia","y":45.9342,"x":15.1408},{"n":"Bakjagol","c":"Korea, South","y":36.043,"x":128.0484},{"n":"Plandiste","c":"Serbia","y":45.2269,"x":21.1217},{"n":"Kozina","c":"Slovenia","y":45.61,"x":13.9356},{"n":"Velika Polana","c":"Slovenia","y":46.5719,"x":16.3469},{"n":"Cankova","c":"Slovenia","y":46.7208,"x":16.0225},{"n":"Sredisce ob Dravi","c":"Slovenia","y":46.3942,"x":16.2681},{"n":"Lamwo","c":"Uganda","y":3.5297,"x":32.8016},{"n":"Bangolo","c":"Côte D’Ivoire","y":7.0123,"x":-7.4864},{"n":"Rogasovci","c":"Slovenia","y":46.8,"x":16.0333},{"n":"Qazax","c":"Azerbaijan","y":41.0925,"x":45.3656},{"n":"Varvarin","c":"Serbia","y":43.7167,"x":21.3667},{"n":"Razanj","c":"Serbia","y":43.6667,"x":21.55},{"n":"Ilam","c":"Iran","y":33.6374,"x":46.4227},{"n":"Mongar","c":"Bhutan","y":27.275,"x":91.24},{"n":"Godawari","c":"Nepal","y":28.8755,"x":80.5776},{"n":"Mionica","c":"Serbia","y":44.25,"x":20.0833},{"n":"Kurumul","c":"Papua New Guinea","y":-5.855,"x":144.6311},{"n":"Arandelovac","c":"Serbia","y":44.3042,"x":20.5561},{"n":"Kula","c":"Serbia","y":45.6109,"x":19.5274},{"n":"Nova Vas","c":"Slovenia","y":45.7717,"x":14.5058},{"n":"Apace","c":"Slovenia","y":46.6972,"x":15.9106},{"n":"Cerkvenjak","c":"Slovenia","y":46.5706,"x":15.9436},{"n":"Haa","c":"Bhutan","y":27.3685,"x":89.2918},{"n":"Krapina","c":"Croatia","y":46.1589,"x":15.8744},{"n":"Palenga","c":"Uganda","y":2.6131,"x":32.3369},{"n":"Singa","c":"Sudan","y":13.1483,"x":33.9311},{"n":"Novi Becej","c":"Serbia","y":45.6,"x":20.1167},{"n":"Becej","c":"Serbia","y":45.6167,"x":20.0333},{"n":"Kuzma","c":"Slovenia","y":46.8369,"x":16.0833},{"n":"Sarur","c":"Azerbaijan","y":39.5544,"x":44.9826},{"n":"Jursinci","c":"Slovenia","y":46.4847,"x":15.9714},{"n":"Port Loko","c":"Sierra Leone","y":8.7667,"x":-12.7833},{"n":"Gornji Grad","c":"Slovenia","y":46.2953,"x":14.8083},{"n":"Zitorada","c":"Serbia","y":43.1833,"x":21.7167},{"n":"Videm pri Ptuju","c":"Slovenia","y":46.3686,"x":15.9064},{"n":"Kotido","c":"Uganda","y":2.9806,"x":34.1331},{"n":"Titel","c":"Serbia","y":45.2,"x":20.3},{"n":"Pul-e `Alam","c":"Afghanistan","y":33.9953,"x":69.0227},{"n":"Cirkulane","c":"Slovenia","y":46.3453,"x":15.9952},{"n":"Ribnica","c":"Slovenia","y":45.7386,"x":14.7275},{"n":"Miren","c":"Slovenia","y":45.8956,"x":13.6075},{"n":"Sharan","c":"Afghanistan","y":33.1757,"x":68.7304},{"n":"Boorama","c":"Somalia","y":9.9361,"x":43.1828},{"n":"Tari","c":"Papua New Guinea","y":-5.8489,"x":142.9506},{"n":"Zavrc","c":"Slovenia","y":46.3917,"x":16.0497},{"n":"Cocieri","c":"Moldova","y":47.3,"x":29.1167},{"n":"Pader","c":"Uganda","y":3.05,"x":33.2167},{"n":"Merosina","c":"Serbia","y":43.2833,"x":21.7167},{"n":"Fuglafjordhur","c":"Faroe Islands","y":62.2448,"x":-6.815},{"n":"Famjin","c":"Faroe Islands","y":61.5264,"x":-6.8769},{"n":"Lufilufi","c":"Samoa","y":-13.8745,"x":-171.5986},{"n":"Podlehnik","c":"Slovenia","y":46.3353,"x":15.88},{"n":"Kotor","c":"Montenegro","y":42.4254,"x":18.7712},{"n":"Stara Pazova","c":"Serbia","y":44.9833,"x":20.1667},{"n":"Clervaux","c":"Luxembourg","y":50.0547,"x":6.0314},{"n":"Redange-sur-Attert","c":"Luxembourg","y":49.7656,"x":5.8908},{"n":"Goaso","c":"Ghana","y":6.8036,"x":-2.5172},{"n":"Dambai","c":"Ghana","y":8.0662,"x":0.1795},{"n":"Igreja","c":"Cabo Verde","y":15.0339,"x":-24.325},{"n":"Kaffrine","c":"Senegal","y":14.1016,"x":-15.5467},{"n":"Zgornje Gorje","c":"Slovenia","y":46.3833,"x":14.0833},{"n":"Tomaz pri Ormozu","c":"Slovenia","y":46.4842,"x":16.0836},{"n":"Sangre Grande","c":"Trinidad And Tobago","y":10.5667,"x":-61.1333},{"n":"Gaoua","c":"Burkina Faso","y":10.2992,"x":-3.2508},{"n":"Nhlangano","c":"Swaziland","y":-27.1167,"x":31.2},{"n":"Ordino","c":"Andorra","y":42.555,"x":1.5331},{"n":"Bosilegrad","c":"Serbia","y":42.5005,"x":22.4728},{"n":"Knic","c":"Serbia","y":43.9167,"x":20.7167},{"n":"Canillo","c":"Andorra","y":42.567,"x":1.5981},{"n":"Agago","c":"Uganda","y":2.8338,"x":33.3336},{"n":"Fort Wellington","c":"Guyana","y":6.3909,"x":-57.6038},{"n":"Vitomarci","c":"Slovenia","y":46.5275,"x":15.9394},{"n":"Nova Sintra","c":"Cabo Verde","y":14.8714,"x":-24.6956},{"n":"Suhar","c":"Oman","y":24.342,"x":56.7299},{"n":"Komen","c":"Slovenia","y":45.8153,"x":13.7483},{"n":"Secanj","c":"Serbia","y":45.3667,"x":20.7725},{"n":"Nalerigu","c":"Ghana","y":10.5273,"x":-0.3698},{"n":"Divaca","c":"Slovenia","y":45.6847,"x":13.9703},{"n":"Destrnik","c":"Slovenia","y":46.5006,"x":15.875},{"n":"Ocnita","c":"Moldova","y":48.3853,"x":27.4392},{"n":"Kozje","c":"Slovenia","y":46.075,"x":15.5603},{"n":"Nili","c":"Afghanistan","y":33.7218,"x":66.1302},{"n":"Bulisa","c":"Uganda","y":2.1178,"x":31.4116},{"n":"Phonsavan","c":"Laos","y":19.45,"x":103.2},{"n":"Amudat","c":"Uganda","y":1.95,"x":34.95},{"n":"Jurovski Dol","c":"Slovenia","y":46.6064,"x":15.7847},{"n":"Pagegiai","c":"Lithuania","y":55.1328,"x":21.8778},{"n":"Kovacica","c":"Serbia","y":45.1117,"x":20.6214},{"n":"Nabilatuk","c":"Uganda","y":2.0525,"x":34.5734},{"n":"Kralendijk","c":"Netherlands","y":12.1517,"x":-68.2761},{"n":"Pakxan","c":"Laos","y":18.3831,"x":103.6669},{"n":"Dobje","c":"Slovenia","y":46.1367,"x":15.4089},{"n":"Soldanesti","c":"Moldova","y":47.8161,"x":28.7972},{"n":"Samdrup Jongkhar","c":"Bhutan","y":26.8007,"x":91.5052},{"n":"Moravske-Toplice","c":"Slovenia","y":46.6875,"x":16.2256},{"n":"Podvelka","c":"Slovenia","y":46.5869,"x":15.3306},{"n":"Trnovska Vas","c":"Slovenia","y":46.5167,"x":15.9},{"n":"Sarpang","c":"Bhutan","y":26.8639,"x":90.2674},{"n":"Makole","c":"Slovenia","y":46.3172,"x":15.6672},{"n":"Grad","c":"Slovenia","y":46.8,"x":16.1},{"n":"Trashigang","c":"Bhutan","y":27.3333,"x":91.5528},{"n":"Qabala","c":"Azerbaijan","y":40.9825,"x":47.8491},{"n":"Neves","c":"Sao Tome And Principe","y":0.3586,"x":6.5525},{"n":"Medveda","c":"Serbia","y":42.8333,"x":21.5833},{"n":"Napak","c":"Uganda","y":2.2514,"x":34.2501},{"n":"Vagur","c":"Faroe Islands","y":61.4733,"x":-6.8175},{"n":"Pemagatshel","c":"Bhutan","y":27.038,"x":91.4031},{"n":"Cova Figueira","c":"Cabo Verde","y":14.8833,"x":-24.3},{"n":"Zitiste","c":"Serbia","y":45.485,"x":20.5497},{"n":"Sofifi","c":"Indonesia","y":0.7373,"x":127.5588},{"n":"Razkrizje","c":"Slovenia","y":46.5217,"x":16.2811},{"n":"Cajetina","c":"Serbia","y":43.75,"x":19.7167},{"n":"Rogatec","c":"Slovenia","y":46.2294,"x":15.7003},{"n":"Qacha's Nek","c":"Lesotho","y":-30.1153,"x":28.6894},{"n":"Sremska Mitrovica","c":"Serbia","y":44.9833,"x":19.6167},{"n":"Stefan Voda","c":"Moldova","y":46.5129,"x":29.6619},{"n":"Safotulafai","c":"Samoa","y":-13.6715,"x":-172.1777},{"n":"Ivanjica","c":"Serbia","y":43.5811,"x":20.2297},{"n":"Kuacjok","c":"South Sudan","y":8.31,"x":27.99},{"n":"Sedhiou","c":"Senegal","y":12.7081,"x":-15.5569},{"n":"Tubmanburg","c":"Liberia","y":6.8706,"x":-10.8211},{"n":"Indija","c":"Serbia","y":45.0492,"x":20.0792},{"n":"Zabari","c":"Serbia","y":44.3562,"x":21.2143},{"n":"Ed Daein","c":"Sudan","y":11.4672,"x":26.1317},{"n":"Osilnica","c":"Slovenia","y":45.5292,"x":14.6979},{"n":"Petrovac na Mlavi","c":"Serbia","y":44.3783,"x":21.4194},{"n":"Pazin","c":"Croatia","y":45.2392,"x":13.9386},{"n":"Savalou","c":"Benin","y":7.9281,"x":1.9756},{"n":"Mali Idos","c":"Serbia","y":45.7069,"x":19.6644},{"n":"Ub","c":"Serbia","y":44.45,"x":20.0667},{"n":"Raca","c":"Serbia","y":44.2333,"x":20.9833},{"n":"Srbobran","c":"Serbia","y":45.5522,"x":19.8017},{"n":"Ljig","c":"Serbia","y":44.2266,"x":20.2394},{"n":"Kiryandongo","c":"Uganda","y":1.8763,"x":32.0622},{"n":"Rekovac","c":"Serbia","y":43.8667,"x":21.1333},{"n":"Mamuju","c":"Indonesia","y":-2.6806,"x":118.8861},{"n":"Hargeysa","c":"Somalia","y":9.56,"x":44.065},{"n":"Kiruhura","c":"Uganda","y":-0.2356,"x":30.8725},{"n":"Leava","c":"Wallis And Futuna","y":-14.2933,"x":-178.1583},{"n":"Novi Knezevac","c":"Serbia","y":46.05,"x":20.1},{"n":"Djibloho","c":"Equatorial Guinea","y":1.5917,"x":10.8222},{"n":"Tsimasham","c":"Bhutan","y":27.0989,"x":89.536},{"n":"Lajkovac","c":"Serbia","y":44.3667,"x":20.1667},{"n":"Madinat ash Shamal","c":"Qatar","y":26.14,"x":51.22},{"n":"Bazarak","c":"Afghanistan","y":35.3129,"x":69.5152},{"n":"Aleksandrovac","c":"Serbia","y":43.4553,"x":21.0514},{"n":"Petnjica","c":"Montenegro","y":42.9089,"x":19.9644},{"n":"Sodrazica","c":"Slovenia","y":45.7611,"x":14.6356},{"n":"Samux","c":"Azerbaijan","y":40.7649,"x":46.4087},{"n":"Dobrovnik","c":"Slovenia","y":46.6514,"x":16.3525},{"n":"Pala","c":"Chad","y":9.3646,"x":14.9073},{"n":"Matam","c":"Senegal","y":15.6167,"x":-13.3333},{"n":"Abim","c":"Uganda","y":2.7017,"x":33.6761},{"n":"Dalandzadgad","c":"Mongolia","y":43.5708,"x":104.425},{"n":"Rio Claro","c":"Trinidad And Tobago","y":10.3059,"x":-61.1756},{"n":"Malo Crnice","c":"Serbia","y":44.5667,"x":21.2833},{"n":"Kursumlija","c":"Serbia","y":43.1408,"x":21.2678},{"n":"Ntoroko","c":"Uganda","y":1.0411,"x":30.4811},{"n":"Davaci","c":"Azerbaijan","y":41.2012,"x":48.9871},{"n":"Raska","c":"Serbia","y":43.2859,"x":20.6135},{"n":"Mislinja","c":"Slovenia","y":46.4411,"x":15.1956},{"n":"Golubac","c":"Serbia","y":44.65,"x":21.6333},{"n":"Nordhragota","c":"Faroe Islands","y":62.199,"x":-6.7432},{"n":"Pecinci","c":"Serbia","y":44.9089,"x":19.9664},{"n":"Qivraq","c":"Azerbaijan","y":39.3994,"x":45.1151},{"n":"Nova Crnja","c":"Serbia","y":45.6667,"x":20.6},{"n":"Podcetrtek","c":"Slovenia","y":46.1569,"x":15.5986},{"n":"Samamea","c":"Samoa","y":-13.9338,"x":-171.5312},{"n":"Xai","c":"Laos","y":20.6922,"x":101.9847},{"n":"Ar Rustaq","c":"Oman","y":23.3908,"x":57.4244},{"n":"Majdanpek","c":"Serbia","y":44.4167,"x":21.9333},{"n":"Danilovgrad","c":"Montenegro","y":42.61,"x":19.05},{"n":"Buka","c":"Papua New Guinea","y":-5.4219,"x":154.6728},{"n":"Makedonska Kamenica","c":"Macedonia","y":42.0208,"x":22.5876},{"n":"Satupa`itea","c":"Samoa","y":-13.7659,"x":-172.3269},{"n":"Otuke","c":"Uganda","y":2.5004,"x":33.5007},{"n":"Ruma","c":"Serbia","y":45.0031,"x":19.8289},{"n":"Asau","c":"Samoa","y":-13.5196,"x":-172.6378},{"n":"Hrib-Loski Potok","c":"Slovenia","y":45.7011,"x":14.5911},{"n":"Niksic","c":"Montenegro","y":42.78,"x":18.94},{"n":"Sur","c":"Oman","y":22.5667,"x":59.5289},{"n":"Safotu","c":"Samoa","y":-13.4513,"x":-172.4018},{"n":"Kalbacar","c":"Azerbaijan","y":40.1098,"x":46.0445},{"n":"Kobilje","c":"Slovenia","y":46.6847,"x":16.3978},{"n":"Vladimirci","c":"Serbia","y":44.6167,"x":19.7833},{"n":"Vailoa","c":"Samoa","y":-13.7555,"x":-172.307},{"n":"Kranjska Gora","c":"Slovenia","y":46.4839,"x":13.7894},{"n":"Amuru","c":"Uganda","y":2.8139,"x":31.9387},{"n":"Buabidi","c":"Panama","y":8.4746,"x":-81.6983},{"n":"Gusinje","c":"Montenegro","y":42.5619,"x":19.8339},{"n":"Ribeira Brava","c":"Cabo Verde","y":16.6158,"x":-24.2983},{"n":"Ibra'","c":"Oman","y":22.6906,"x":58.5334},{"n":"Zetale","c":"Slovenia","y":46.275,"x":15.7939},{"n":"Tutin","c":"Serbia","y":42.9875,"x":20.3256},{"n":"Resen","c":"Macedonia","y":41.0893,"x":21.0109},{"n":"Babusnica","c":"Serbia","y":43.068,"x":22.4115},{"n":"Xocavand","c":"Azerbaijan","y":39.795,"x":47.1117},{"n":"Sorvagur","c":"Faroe Islands","y":62.0717,"x":-7.3066},{"n":"Kaisiadorys","c":"Lithuania","y":54.8653,"x":24.4682},{"n":"Brus","c":"Serbia","y":43.3836,"x":21.0336},{"n":"Sahbuz","c":"Azerbaijan","y":39.4072,"x":45.5739},{"n":"Eidhi","c":"Faroe Islands","y":62.2995,"x":-7.0924},{"n":"Massakory","c":"Chad","y":13,"x":15.7333},{"n":"Salovci","c":"Slovenia","y":46.825,"x":16.2981},{"n":"Osecina","c":"Serbia","y":44.3667,"x":19.6},{"n":"Buba","c":"Guinea-Bissau","y":11.59,"x":-14.99},{"n":"Al Hazm","c":"Yemen","y":16.1641,"x":44.7769},{"n":"Nakapiripirit","c":"Uganda","y":1.9167,"x":34.7833},{"n":"Barentu","c":"Eritrea","y":15.1058,"x":37.5907},{"n":"Veliko Gradiste","c":"Serbia","y":44.75,"x":21.5167},{"n":"Pili","c":"Philippines","y":13.7177,"x":123.7448},{"n":"Burco","c":"Somalia","y":9.5221,"x":45.5336},{"n":"Kucevo","c":"Serbia","y":44.4833,"x":21.6667},{"n":"Koceljeva","c":"Serbia","y":44.4708,"x":19.807},{"n":"Oyrarbakki","c":"Faroe Islands","y":62.2079,"x":-6.9997},{"n":"Arta","c":"Djibouti","y":11.5264,"x":42.8519},{"n":"Temerin","c":"Serbia","y":45.4053,"x":19.8869},{"n":"Vestmanna","c":"Faroe Islands","y":62.1548,"x":-7.169},{"n":"Raseiniai","c":"Lithuania","y":55.3797,"x":23.1239},{"n":"Gadzin Han","c":"Serbia","y":43.2203,"x":22.0258},{"n":"Gaigirgordub","c":"Panama","y":9.55,"x":-78.9667},{"n":"Opovo","c":"Serbia","y":45.0522,"x":20.4303},{"n":"Kyankwanzi","c":"Uganda","y":1.1987,"x":31.8062},{"n":"Sao Joao dos Angolares","c":"Sao Tome And Principe","y":0.1342,"x":6.6494},{"n":"Ntchisi","c":"Malawi","y":-13.3753,"x":34.0036},{"n":"Xekong","c":"Laos","y":15.3503,"x":106.7286},{"n":"Trashi Yangtse","c":"Bhutan","y":27.6116,"x":91.498},{"n":"Sumba","c":"Faroe Islands","y":61.4055,"x":-6.709},{"n":"Kvivik","c":"Faroe Islands","y":62.1186,"x":-7.0737},{"n":"Solcava","c":"Slovenia","y":46.4194,"x":14.6936},{"n":"Kone","c":"New Caledonia","y":-21.0667,"x":164.8667},{"n":"Zalingei","c":"Sudan","y":12.9092,"x":23.4706},{"n":"Sandavagur","c":"Faroe Islands","y":62.0537,"x":-7.1498},{"n":"Hodos","c":"Slovenia","y":46.8233,"x":16.3342},{"n":"Hov","c":"Faroe Islands","y":61.5068,"x":-6.7599},{"n":"Sala","c":"Latvia","y":56.5047,"x":25.7618},{"n":"Nwoya","c":"Uganda","y":2.6342,"x":32.0011},{"n":"Saleaula","c":"Samoa","y":-13.4489,"x":-172.3352},{"n":"Zagubica","c":"Serbia","y":44.1979,"x":21.7902},{"n":"Trgoviste","c":"Serbia","y":42.3514,"x":22.0921},{"n":"Sola","c":"Vanuatu","y":-13.8761,"x":167.5517},{"n":"Semera","c":"Ethiopia","y":11.7956,"x":41.0086},{"n":"Ignalina","c":"Lithuania","y":55.3406,"x":26.1605},{"n":"Vidhareidhi","c":"Faroe Islands","y":62.36,"x":-6.5313},{"n":"Anew","c":"Turkmenistan","y":37.8875,"x":58.516},{"n":"Masunga","c":"Botswana","y":-20.6245,"x":27.4488},{"n":"Kostel","c":"Slovenia","y":45.5084,"x":14.9101},{"n":"Xizi","c":"Azerbaijan","y":40.9111,"x":49.0694},{"n":"Trongsa","c":"Bhutan","y":27.5168,"x":90.5},{"n":"Sandur","c":"Faroe Islands","y":61.8344,"x":-6.8171},{"n":"El Fula","c":"Sudan","y":11.712,"x":28.3462},{"n":"Zhemgang","c":"Bhutan","y":27.2169,"x":90.6579},{"n":"Porto Novo","c":"Cabo Verde","y":17.0208,"x":-25.0667},{"n":"Damongo","c":"Ghana","y":9.083,"x":-1.8188},{"n":"Tanjung Selor","c":"Indonesia","y":2.8375,"x":117.3653},{"n":"Tigoa","c":"Solomon Islands","y":-11.5531,"x":160.0647},{"n":"Lupane","c":"Zimbabwe","y":-18.9315,"x":27.807},{"n":"Parun","c":"Afghanistan","y":35.4206,"x":70.9226},{"n":"Kolasin","c":"Montenegro","y":42.825,"x":19.518},{"n":"Fish Town","c":"Liberia","y":5.1974,"x":-7.8758},{"n":"Bopolu","c":"Liberia","y":7.0667,"x":-10.4875},{"n":"Anouvong","c":"Laos","y":18.8989,"x":103.0919},{"n":"Loango","c":"Congo (Brazzaville)","y":-4.6519,"x":11.8125},{"n":"Laascaanood","c":"Somalia","y":8.4774,"x":47.3597},{"n":"Husavik","c":"Faroe Islands","y":61.8099,"x":-6.6813},{"n":"Georgetown","c":"Saint Helena, Ascension, And Tristan Da Cunha","y":-7.9286,"x":-14.4119},{"n":"Amdjarass","c":"Chad","y":16.0667,"x":22.8354},{"n":"Lhuentse","c":"Bhutan","y":27.6679,"x":91.1839},{"n":"Jakar","c":"Bhutan","y":27.5492,"x":90.7525},{"n":"Nova Varos","c":"Serbia","y":43.4667,"x":19.8203},{"n":"Ceerigaabo","c":"Somalia","y":10.6162,"x":47.3679},{"n":"Skalavik","c":"Faroe Islands","y":61.8314,"x":-6.6623},{"n":"Kunoy","c":"Faroe Islands","y":62.2917,"x":-6.6702},{"n":"Daga","c":"Bhutan","y":27.0753,"x":89.8769},{"n":"Bela Palanka","c":"Serbia","y":43.2178,"x":22.3067},{"n":"Kirkja","c":"Faroe Islands","y":62.3263,"x":-6.3238},{"n":"Sowa Town","c":"Botswana","y":-20.5636,"x":26.2244},{"n":"Zgornje Jezersko","c":"Slovenia","y":46.3833,"x":14.4667},{"n":"Savnik","c":"Montenegro","y":42.95,"x":19.1},{"n":"Skuvoy","c":"Faroe Islands","y":61.771,"x":-6.805},{"n":"Pluzine","c":"Montenegro","y":43.1528,"x":18.8394},{"n":"Choyr","c":"Mongolia","y":46.3611,"x":108.3611},{"n":"Edinburgh of the Seven Seas","c":"Saint Helena, Ascension, And Tristan Da Cunha","y":-37.0675,"x":-12.3105},{"n":"Awbari","c":"Libya","y":26.5833,"x":12.7667},{"n":"Gasa","c":"Bhutan","y":27.9067,"x":89.7304},{"n":"Idri","c":"Libya","y":27.4471,"x":13.0517},{"n":"Jwaneng","c":"Botswana","y":-24.6017,"x":24.7281},{"n":"Mahdia","c":"Guyana","y":5.2667,"x":-59.15},{"n":"Hayma'","c":"Oman","y":19.9333,"x":56.3167},{"n":"Union Choco","c":"Panama","y":8.0778,"x":-77.5583},{"n":"Bardai","c":"Chad","y":21.3547,"x":17.0016},{"n":"Al Kufrah","c":"Libya","y":24.1667,"x":23.2696},{"n":"We","c":"New Caledonia","y":-20.9,"x":167.2667},{"n":"Presevo","c":"Serbia","y":42.3067,"x":21.65},{"n":"Bujanovac","c":"Serbia","y":42.4667,"x":21.7667},{"n":"Kitamilo","c":"Uganda","y":0.2222,"x":33.2061},{"n":"Xiongzhou","c":"China","y":38.9786,"x":116.073},{"n":"Udine","c":"Italy","y":46.0667,"x":13.2333},{"n":"Kalisz","c":"Poland","y":51.757,"x":18.083},{"n":"Legnica","c":"Poland","y":51.2101,"x":16.1619},{"n":"Kani","c":"Japan","y":35.4258,"x":137.0611},{"n":"Debre Zeyit","c":"Ethiopia","y":8.75,"x":38.9833},{"n":"Xiegang","c":"China","y":22.961,"x":114.141},{"n":"Tiaong","c":"Philippines","y":13.95,"x":121.3167},{"n":"Chikusei","c":"Japan","y":36.3072,"x":139.9831},{"n":"Tayabas","c":"Philippines","y":14.0167,"x":121.5833},{"n":"Andria","c":"Italy","y":41.2317,"x":16.3083},{"n":"Roquetas de Mar","c":"Spain","y":36.7642,"x":-2.6147},{"n":"Arlit","c":"Niger","y":18.82,"x":7.33},{"n":"Fengning","c":"China","y":41.2013,"x":116.6433},{"n":"Deventer","c":"Netherlands","y":52.25,"x":6.2},{"n":"Urgut Shahri","c":"Uzbekistan","y":39.4007,"x":67.2607},{"n":"Boca Raton","c":"United States","y":26.3752,"x":-80.108},{"n":"Bendigo","c":"Australia","y":-36.75,"x":144.2667},{"n":"Arezzo","c":"Italy","y":43.4631,"x":11.8781},{"n":"Sindangan","c":"Philippines","y":8.2333,"x":123},{"n":"Leme","c":"Brazil","y":-22.1858,"x":-47.39},{"n":"Zelenodol'sk","c":"Russia","y":55.85,"x":48.5167},{"n":"Hasilpur","c":"Pakistan","y":29.6967,"x":72.5542},{"n":"Wloclawek","c":"Poland","y":52.65,"x":19.05},{"n":"Sakata","c":"Japan","y":38.9144,"x":139.8364},{"n":"Lee's Summit","c":"United States","y":38.9172,"x":-94.3816},{"n":"Tobolsk","c":"Russia","y":58.1953,"x":68.2581},{"n":"Rio Rancho","c":"United States","y":35.2872,"x":-106.6981},{"n":"South Fulton","c":"United States","y":33.6269,"x":-84.5802},{"n":"Chia","c":"Colombia","y":4.8633,"x":-74.0528},{"n":"Beaverton","c":"United States","y":45.4779,"x":-122.8168},{"n":"Sarapul","c":"Russia","y":56.4667,"x":53.8},{"n":"Taxco de Alarcon","c":"Mexico","y":18.5564,"x":-99.605},{"n":"Tacurong","c":"Philippines","y":6.6833,"x":124.6667},{"n":"Es Senia","c":"Algeria","y":35.6478,"x":-0.6239},{"n":"Kontagora","c":"Nigeria","y":10.4004,"x":5.4699},{"n":"Lugo","c":"Spain","y":43.0167,"x":-7.55},{"n":"Khambhat","c":"India","y":22.3131,"x":72.6194},{"n":"Zarate","c":"Argentina","y":-34.0833,"x":-59.0333},{"n":"Reyhanli","c":"Turkey","y":36.2692,"x":36.5672},{"n":"Sabaneta","c":"Dominican Republic","y":19.4833,"x":-71.35},{"n":"Saku","c":"Japan","y":36.2489,"x":138.4769},{"n":"Worcester","c":"South Africa","y":-33.645,"x":19.4436},{"n":"Votkinsk","c":"Russia","y":57.05,"x":54},{"n":"Paulinia","c":"Brazil","y":-22.7611,"x":-47.1542},{"n":"Iseyin","c":"Nigeria","y":7.9667,"x":3.6},{"n":"Colon","c":"El Salvador","y":13.7167,"x":-89.3667},{"n":"Oldham","c":"United Kingdom","y":53.5444,"x":-2.1169},{"n":"Attock Khurd","c":"Pakistan","y":33.7667,"x":72.3667},{"n":"Witten","c":"Germany","y":51.4333,"x":7.3333},{"n":"Hammamet","c":"Tunisia","y":36.4167,"x":10.6},{"n":"Serov","c":"Russia","y":59.6,"x":60.5667},{"n":"Las Rozas de Madrid","c":"Spain","y":40.4917,"x":-3.8733},{"n":"Bafra","c":"Turkey","y":41.5682,"x":35.9069},{"n":"Brantford","c":"Canada","y":43.1667,"x":-80.25},{"n":"Hanau","c":"Germany","y":50.1328,"x":8.9169},{"n":"El Seibo","c":"Dominican Republic","y":18.77,"x":-69.04},{"n":"Lysychansk","c":"Ukraine","y":48.9169,"x":38.4306},{"n":"Jamundi","c":"Colombia","y":3.2608,"x":-76.5394},{"n":"Cesena","c":"Italy","y":44.1333,"x":12.2333},{"n":"Itacoatiara","c":"Brazil","y":-3.1428,"x":-58.4439},{"n":"Calasiao","c":"Philippines","y":16.0167,"x":120.3667},{"n":"Ukhta","c":"Russia","y":63.5667,"x":53.7},{"n":"Tomohon","c":"Indonesia","y":1.3244,"x":124.8225},{"n":"Buin","c":"Chile","y":-33.7333,"x":-70.75},{"n":"Barra do Pirai","c":"Brazil","y":-22.47,"x":-43.8258},{"n":"Sutton Coldfield","c":"United Kingdom","y":52.563,"x":-1.822},{"n":"Iida","c":"Japan","y":35.5147,"x":137.8219},{"n":"Kazerun","c":"Iran","y":29.6167,"x":51.65},{"n":"San Tan Valley","c":"United States","y":33.1879,"x":-111.5472},{"n":"San Marcos","c":"United States","y":33.135,"x":-117.1744},{"n":"Wujiaqu","c":"China","y":44.2,"x":87.55},{"n":"Sandy","c":"United States","y":40.571,"x":-111.8505},{"n":"Vanderbijlpark","c":"South Africa","y":-26.6992,"x":27.8356},{"n":"Leninsk-Kuznetskiy","c":"Russia","y":54.65,"x":86.1667},{"n":"Kelo","c":"Chad","y":9.3171,"x":15.8},{"n":"Mezhdurechensk","c":"Russia","y":53.6864,"x":88.0703},{"n":"Caceres","c":"Spain","y":39.4833,"x":-6.3667},{"n":"Federal Way","c":"United States","y":47.3091,"x":-122.3358},{"n":"Dovzhansk","c":"Ukraine","y":48.0846,"x":39.6516},{"n":"Guihulngan","c":"Philippines","y":10.1167,"x":123.2667},{"n":"Kamisu","c":"Japan","y":35.89,"x":140.6647},{"n":"Longkeng","c":"China","y":24.0376,"x":112.0427},{"n":"Muzaffarabad","c":"Pakistan","y":34.37,"x":73.4711},{"n":"Carmen","c":"Philippines","y":7.2,"x":124.7833},{"n":"Greece","c":"United States","y":43.2461,"x":-77.6989},{"n":"Mandeville","c":"United States","y":30.3751,"x":-90.0904},{"n":"Mons","c":"Belgium","y":50.455,"x":3.952},{"n":"Jinbi","c":"China","y":25.7356,"x":101.3239},{"n":"Lecce","c":"Italy","y":40.352,"x":18.1691},{"n":"Lingtang","c":"China","y":23.6032,"x":113.074},{"n":"Xiluodu","c":"China","y":28.236,"x":103.6301},{"n":"Hesperia","c":"United States","y":34.3975,"x":-117.3147},{"n":"Emmiganur","c":"India","y":15.7333,"x":77.4833},{"n":"Brockton","c":"United States","y":42.0821,"x":-71.0242},{"n":"Pesaro","c":"Italy","y":43.9102,"x":12.9133},{"n":"Aliaga","c":"Turkey","y":38.7998,"x":26.972},{"n":"Campo Mourao","c":"Brazil","y":-24.0458,"x":-52.3828},{"n":"Boli","c":"China","y":45.7564,"x":130.5759},{"n":"Lorca","c":"Spain","y":37.6798,"x":-1.6944},{"n":"Yi Xian","c":"China","y":39.3444,"x":115.4954},{"n":"Guaiba","c":"Brazil","y":-30.1139,"x":-51.325},{"n":"Lopez","c":"Philippines","y":13.884,"x":122.2604},{"n":"Bogo","c":"Cameroon","y":10.7361,"x":14.6108},{"n":"Sarov","c":"Russia","y":54.9333,"x":43.3167},{"n":"M'lang","c":"Philippines","y":6.95,"x":124.8833},{"n":"Kulob","c":"Tajikistan","y":37.9119,"x":69.7808},{"n":"Rubio","c":"Venezuela","y":7.7,"x":-72.35},{"n":"Riverview","c":"United States","y":27.8227,"x":-82.3023},{"n":"Sultan Kudarat","c":"Philippines","y":7.2333,"x":124.25},{"n":"Fishers","c":"United States","y":39.9589,"x":-85.9661},{"n":"Mianwali","c":"Pakistan","y":32.5853,"x":71.5436},{"n":"San Rafael","c":"Philippines","y":14.95,"x":120.9667},{"n":"Jinshan","c":"China","y":25.1496,"x":102.0742},{"n":"Solikamsk","c":"Russia","y":59.6333,"x":56.7667},{"n":"Nahiyat al Karmah","c":"Iraq","y":33.3997,"x":43.9089},{"n":"Bowling Green","c":"United States","y":36.9719,"x":-86.4373},{"n":"La Spezia","c":"Italy","y":44.108,"x":9.8289},{"n":"Barletta","c":"Italy","y":41.3167,"x":16.2833},{"n":"Valongo","c":"Portugal","y":41.1833,"x":-8.5},{"n":"Avignon","c":"France","y":43.95,"x":4.8075},{"n":"Biu","c":"Nigeria","y":10.6204,"x":12.19},{"n":"Monkayo","c":"Philippines","y":7.8167,"x":126.05},{"n":"San Jose del Cabo","c":"Mexico","y":23.0614,"x":-109.7081},{"n":"Para de Minas","c":"Brazil","y":-19.86,"x":-44.6078},{"n":"Jaworzno","c":"Poland","y":50.2,"x":19.275},{"n":"San Cugat del Valles","c":"Spain","y":41.4735,"x":2.0852},{"n":"Bislig","c":"Philippines","y":8.1833,"x":126.35},{"n":"Kanuma","c":"Japan","y":36.5672,"x":139.745},{"n":"Gera","c":"Germany","y":50.8782,"x":12.0824},{"n":"Roswell","c":"United States","y":34.0391,"x":-84.3513},{"n":"Menifee","c":"United States","y":33.6909,"x":-117.1849},{"n":"Grudziadz","c":"Poland","y":53.4925,"x":18.7761},{"n":"Plantation","c":"United States","y":26.126,"x":-80.2617},{"n":"Escalante","c":"Philippines","y":10.8333,"x":123.5},{"n":"Gatchina","c":"Russia","y":59.5667,"x":30.1333},{"n":"Michurinsk","c":"Russia","y":52.8922,"x":40.4928},{"n":"Bayan Hot","c":"China","y":38.8556,"x":105.7001},{"n":"Alessandria","c":"Italy","y":44.9133,"x":8.62},{"n":"Santa Cruz Xoxocotlan","c":"Mexico","y":17.0264,"x":-96.7333},{"n":"Glazov","c":"Russia","y":58.1333,"x":52.65},{"n":"Portsmouth","c":"United States","y":36.8468,"x":-76.354},{"n":"Chino","c":"United States","y":33.9836,"x":-117.6654},{"n":"Marmaris","c":"Turkey","y":36.8564,"x":28.2711},{"n":"Cape Breton","c":"Canada","y":46.1389,"x":-60.1931},{"n":"Kwekwe","c":"Zimbabwe","y":-18.9167,"x":29.9833},{"n":"Azumino","c":"Japan","y":36.3039,"x":137.9056},{"n":"Wangjia","c":"China","y":30.6218,"x":120.7212},{"n":"Edmond","c":"United States","y":35.6689,"x":-97.4159},{"n":"Hanford","c":"United States","y":36.3274,"x":-119.6549},{"n":"Lemery","c":"Philippines","y":13.9167,"x":120.8833},{"n":"Dearborn","c":"United States","y":42.3127,"x":-83.2129},{"n":"Menderes","c":"Turkey","y":38.254,"x":27.134},{"n":"Paracatu","c":"Brazil","y":-17.2217,"x":-46.875},{"n":"Higashi-Matsuyama","c":"Japan","y":36.0422,"x":139.4},{"n":"Yunnanyi","c":"China","y":25.3916,"x":100.6846},{"n":"Voskresensk","c":"Russia","y":55.3167,"x":38.6833},{"n":"Epinal","c":"France","y":48.1744,"x":6.4512},{"n":"Mikhaylovsk","c":"Russia","y":45.1283,"x":42.0256},{"n":"Livonia","c":"United States","y":42.3972,"x":-83.3733},{"n":"Hadera","c":"Israel","y":32.45,"x":34.9167},{"n":"Paniqui","c":"Philippines","y":15.6667,"x":120.5833},{"n":"Trelew","c":"Argentina","y":-43.2533,"x":-65.3094},{"n":"Iserlohn","c":"Germany","y":51.3833,"x":7.6667},{"n":"Linquan","c":"China","y":37.9513,"x":110.9877},{"n":"Bafang","c":"Cameroon","y":5.1704,"x":10.18},{"n":"Caldas Novas","c":"Brazil","y":-17.7439,"x":-48.6258},{"n":"Teziutlan","c":"Mexico","y":19.8178,"x":-97.3667},{"n":"Vineland","c":"United States","y":39.4653,"x":-74.9981},{"n":"Florence","c":"United States","y":34.1781,"x":-79.7877},{"n":"Slidell","c":"United States","y":30.2881,"x":-89.7826},{"n":"Lawton","c":"United States","y":34.6176,"x":-98.4203},{"n":"Wukari","c":"Nigeria","y":7.8704,"x":9.78},{"n":"Bauan","c":"Philippines","y":13.7917,"x":121.0085},{"n":"Samalut","c":"Egypt","y":28.3,"x":30.7167},{"n":"Rafaela","c":"Argentina","y":-31.2667,"x":-61.4833},{"n":"Velikiye Luki","c":"Russia","y":56.35,"x":30.5167},{"n":"Hanamaki Onsen","c":"Japan","y":39.3886,"x":141.1167},{"n":"Missoula","c":"United States","y":46.875,"x":-114.0214},{"n":"Hastings","c":"United Kingdom","y":50.85,"x":0.57},{"n":"Kilosa","c":"Tanzania","y":-6.8396,"x":36.99},{"n":"Laiyuan","c":"China","y":39.3515,"x":114.6853},{"n":"Sorriso","c":"Brazil","y":-12.545,"x":-55.7108},{"n":"Auburn","c":"United States","y":32.6087,"x":-85.4899},{"n":"San Sebastian de los Reyes","c":"Spain","y":40.5469,"x":-3.6258},{"n":"Foumban","c":"Cameroon","y":5.7167,"x":10.9167},{"n":"Rayachoti","c":"India","y":14.05,"x":78.75},{"n":"Sampit","c":"Indonesia","y":-2.5329,"x":112.95},{"n":"Lethbridge","c":"Canada","y":49.6942,"x":-112.8328},{"n":"Caratinga","c":"Brazil","y":-19.79,"x":-42.1389},{"n":"Rapid City","c":"United States","y":44.0716,"x":-103.2204},{"n":"Yumbo","c":"Colombia","y":3.5778,"x":-76.4944},{"n":"Grahamstown","c":"South Africa","y":-33.2996,"x":26.52},{"n":"Kitakami","c":"Japan","y":39.2867,"x":141.1131},{"n":"Acajutla","c":"El Salvador","y":13.5928,"x":-89.8275},{"n":"Terre Haute","c":"United States","y":39.4654,"x":-87.3763},{"n":"Saint-Jean-sur-Richelieu","c":"Canada","y":45.3167,"x":-73.2667},{"n":"Vaciamadrid","c":"Spain","y":40.3394,"x":-3.5181},{"n":"Toms River","c":"United States","y":39.9895,"x":-74.1654},{"n":"Mosquera","c":"Colombia","y":4.7078,"x":-74.2328},{"n":"Suffolk","c":"United States","y":36.6953,"x":-76.6398},{"n":"Clarington","c":"Canada","y":43.935,"x":-78.6083},{"n":"Kendu Bay","c":"Kenya","y":-0.3596,"x":34.64},{"n":"Blacksburg","c":"United States","y":37.23,"x":-80.4279},{"n":"Modi`in Makkabbim Re`ut","c":"Israel","y":31.9339,"x":34.9856},{"n":"Duren","c":"Germany","y":50.8,"x":6.4833},{"n":"Pickering","c":"Canada","y":43.8354,"x":-79.089},{"n":"Flensburg","c":"Germany","y":54.7819,"x":9.4367},{"n":"Mount Pleasant","c":"United States","y":32.8538,"x":-79.8204},{"n":"Mogi Mirim","c":"Brazil","y":-22.4319,"x":-46.9578},{"n":"Weiyuan","c":"China","y":23.5025,"x":100.7075},{"n":"Balayan","c":"Philippines","y":13.9333,"x":120.7333},{"n":"Yao","c":"Chad","y":12.8508,"x":17.5608},{"n":"Penaflor","c":"Chile","y":-33.6167,"x":-70.9167},{"n":"Votuporanga","c":"Brazil","y":-20.4228,"x":-49.9728},{"n":"Cacapava","c":"Brazil","y":-23.1008,"x":-45.7069},{"n":"Carson","c":"United States","y":33.8374,"x":-118.2559},{"n":"Tubingen","c":"Germany","y":48.52,"x":9.0556},{"n":"Greenburgh","c":"United States","y":41.033,"x":-73.8413},{"n":"Sao Felix do Xingu","c":"Brazil","y":-6.645,"x":-51.995},{"n":"Jalalpur Jattan","c":"Pakistan","y":32.7667,"x":74.2167},{"n":"Caceres","c":"Brazil","y":-16.0711,"x":-57.6789},{"n":"Timoteo","c":"Brazil","y":-19.5828,"x":-42.6439},{"n":"Maladzyechna","c":"Belarus","y":54.3136,"x":26.8517},{"n":"Conroe","c":"United States","y":30.3239,"x":-95.4825},{"n":"Alafaya","c":"United States","y":28.5278,"x":-81.1865},{"n":"Chauk","c":"Myanmar","y":20.9085,"x":94.823},{"n":"Imizucho","c":"Japan","y":36.7125,"x":137.0994},{"n":"Itajuba","c":"Brazil","y":-22.4258,"x":-45.4528},{"n":"Livermore","c":"United States","y":37.6862,"x":-121.7608},{"n":"Playas de Rosarito","c":"Mexico","y":32.35,"x":-117.05},{"n":"Saquarema","c":"Brazil","y":-22.92,"x":-42.51},{"n":"Mestre","c":"Italy","y":45.4906,"x":12.2381},{"n":"Ad Dakhla","c":"Morocco","y":23.7141,"x":-15.9368},{"n":"Planaltina","c":"Brazil","y":-15.4528,"x":-47.6139},{"n":"Chililabombwe","c":"Zambia","y":-12.3667,"x":27.8333},{"n":"Palimbang","c":"Philippines","y":6.2167,"x":124.2},{"n":"Pisa","c":"Italy","y":43.7167,"x":10.4},{"n":"Fundacion","c":"Colombia","y":10.5172,"x":-74.1922},{"n":"Kavali","c":"India","y":14.9123,"x":79.9944},{"n":"Pistoia","c":"Italy","y":43.9333,"x":10.9167},{"n":"Sao Joao del Rei","c":"Brazil","y":-21.1358,"x":-44.2619},{"n":"Nanaimo","c":"Canada","y":49.1642,"x":-123.9364},{"n":"Ma`arrat an Nu`man","c":"Syria","y":35.6433,"x":36.6683},{"n":"Mancheral","c":"India","y":18.8679,"x":79.4639},{"n":"Chalchuapa","c":"El Salvador","y":13.9833,"x":-89.6833},{"n":"Southport","c":"United Kingdom","y":53.6475,"x":-3.0053},{"n":"Kansk","c":"Russia","y":56.2,"x":95.7},{"n":"Kiselevsk","c":"Russia","y":53.9833,"x":86.7},{"n":"Zwickau","c":"Germany","y":50.7189,"x":12.4961},{"n":"Hezuo","c":"China","y":34.9984,"x":102.91},{"n":"Alaminos","c":"Philippines","y":16.1553,"x":119.9808},{"n":"New Braunfels","c":"United States","y":29.6994,"x":-98.1148},{"n":"Ocana","c":"Colombia","y":8.2461,"x":-73.3553},{"n":"Mihara","c":"Japan","y":34.4581,"x":133.0039},{"n":"Oton","c":"Philippines","y":10.6931,"x":122.4736},{"n":"Luau","c":"Angola","y":-10.7,"x":22.2333},{"n":"Kadiri","c":"India","y":14.12,"x":78.17},{"n":"Norrkoping","c":"Sweden","y":58.5919,"x":16.1856},{"n":"Giessen","c":"Germany","y":50.5833,"x":8.6667},{"n":"Hosaina","c":"Ethiopia","y":7.5504,"x":37.85},{"n":"Lucca","c":"Italy","y":43.85,"x":10.5167},{"n":"Hilversum","c":"Netherlands","y":52.23,"x":5.18},{"n":"Santa Ines","c":"Brazil","y":-3.6669,"x":-45.38},{"n":"Serdar","c":"Turkmenistan","y":38.9764,"x":56.2758},{"n":"Cantaura","c":"Venezuela","y":9.3005,"x":-64.3564},{"n":"Kamensk-Shakhtinskiy","c":"Russia","y":48.3167,"x":40.2667},{"n":"Fall River","c":"United States","y":41.7137,"x":-71.1014},{"n":"Grimsby","c":"United Kingdom","y":53.5595,"x":-0.068},{"n":"Chosica","c":"Peru","y":-11.9361,"x":-76.6972},{"n":"Prijedor","c":"Bosnia And Herzegovina","y":44.9667,"x":16.7},{"n":"Kabacan","c":"Philippines","y":7.1167,"x":124.8167},{"n":"Dunkerque","c":"France","y":51.0383,"x":2.3775},{"n":"Parang","c":"Philippines","y":7.3744,"x":124.2686},{"n":"El Puerto de Santa Maria","c":"Spain","y":36.6,"x":-6.2167},{"n":"Gitarama","c":"Rwanda","y":-2.0696,"x":29.76},{"n":"Sao Joao da Boa Vista","c":"Brazil","y":-21.9689,"x":-46.7978},{"n":"Shwebo","c":"Myanmar","y":22.5783,"x":95.6929},{"n":"Candeias","c":"Brazil","y":-12.6678,"x":-38.5508},{"n":"Qiantangcun","c":"China","y":23.6742,"x":116.915},{"n":"Salaman","c":"Philippines","y":6.6333,"x":124.0667},{"n":"Halifax","c":"United Kingdom","y":53.725,"x":-1.863},{"n":"Paranavai","c":"Brazil","y":-23.0728,"x":-52.465},{"n":"Polangui","c":"Philippines","y":13.2922,"x":123.4856},{"n":"Bhakkar","c":"Pakistan","y":31.6333,"x":71.0667},{"n":"Dongchuan","c":"China","y":25.5086,"x":101.2356},{"n":"Heerlen","c":"Netherlands","y":50.8833,"x":5.9833},{"n":"Montelibano","c":"Colombia","y":7.9711,"x":-75.4181},{"n":"San Luis","c":"Cuba","y":20.1881,"x":-75.8486},{"n":"O'Fallon","c":"United States","y":38.785,"x":-90.7175},{"n":"Ootacamund","c":"India","y":11.4086,"x":76.6939},{"n":"Victorias","c":"Philippines","y":10.9,"x":123.0833},{"n":"La Grita","c":"Venezuela","y":8.1333,"x":-71.9833},{"n":"Sakiet ez Zit","c":"Tunisia","y":34.8,"x":10.77},{"n":"Launceston","c":"Australia","y":-41.4419,"x":147.145},{"n":"Newton","c":"United States","y":42.3316,"x":-71.2085},{"n":"Zhob","c":"Pakistan","y":31.3417,"x":69.4486},{"n":"Pingyuanjie","c":"China","y":23.7472,"x":103.7624},{"n":"Qal`at Bishah","c":"Saudi Arabia","y":20.0087,"x":42.5987},{"n":"Tacana","c":"Guatemala","y":15.2415,"x":-92.0684},{"n":"Maiquetia","c":"Venezuela","y":10.5958,"x":-66.9772},{"n":"Ratingen","c":"Germany","y":51.3,"x":6.85},{"n":"Gerona","c":"Philippines","y":15.6,"x":120.6},{"n":"Changting","c":"China","y":25.867,"x":116.3167},{"n":"Leshou","c":"China","y":38.1902,"x":116.1205},{"n":"Sinjar","c":"Iraq","y":36.3208,"x":41.8764},{"n":"Sudbury","c":"Canada","y":46.49,"x":-81.01},{"n":"Sao Goncalo do Amarante","c":"Brazil","y":-5.7928,"x":-35.3289},{"n":"Jatai","c":"Brazil","y":-17.8808,"x":-51.7139},{"n":"Wislane","c":"Morocco","y":30.2167,"x":-8.3833},{"n":"Buzuluk","c":"Russia","y":52.7667,"x":52.2667},{"n":"Cacoal","c":"Brazil","y":-11.4386,"x":-61.4472},{"n":"Muncie","c":"United States","y":40.1989,"x":-85.395},{"n":"Jaguey Grande","c":"Cuba","y":22.5292,"x":-81.1325},{"n":"Heshangtian","c":"China","y":23.3014,"x":115.657},{"n":"Santa Cruz do Capibaribe","c":"Brazil","y":-7.9573,"x":-36.2047},{"n":"Lunen","c":"Germany","y":51.6167,"x":7.5167},{"n":"Dipalpur","c":"Pakistan","y":30.6708,"x":73.6533},{"n":"Compostela","c":"Philippines","y":7.6667,"x":126.0833},{"n":"Ceylanpinar","c":"Turkey","y":36.9194,"x":39.905},{"n":"Pergamino","c":"Argentina","y":-33.8836,"x":-60.5669},{"n":"Anakapalle","c":"India","y":17.68,"x":83.02},{"n":"Fukuroi","c":"Japan","y":34.7503,"x":137.925},{"n":"Gurupi","c":"Brazil","y":-11.7289,"x":-49.0689},{"n":"Consolacion del Sur","c":"Cuba","y":22.5083,"x":-83.5172},{"n":"Koidu-Bulma","c":"Sierra Leone","y":8.4405,"x":-10.85},{"n":"Balamban","c":"Philippines","y":10.4667,"x":123.7833},{"n":"Hamilton","c":"United States","y":40.2046,"x":-74.6765},{"n":"Paredes","c":"Portugal","y":41.2,"x":-8.3333},{"n":"Brindisi","c":"Italy","y":40.6383,"x":17.9458},{"n":"Town 'n' Country","c":"United States","y":28.0108,"x":-82.576},{"n":"Mobara","c":"Japan","y":35.4283,"x":140.2881},{"n":"Tiflet","c":"Morocco","y":33.9,"x":-6.33},{"n":"Nova Lima","c":"Brazil","y":-19.9858,"x":-43.8469},{"n":"Heyunkeng","c":"China","y":23.9303,"x":112.9189},{"n":"Wulan","c":"China","y":36.5653,"x":104.6839},{"n":"Sao Cristovao","c":"Brazil","y":-11.015,"x":-37.2058},{"n":"Menglang","c":"China","y":22.5586,"x":99.9337},{"n":"Ad Diwem","c":"Sudan","y":13.9904,"x":32.3},{"n":"Fort Myers","c":"United States","y":26.6195,"x":-81.8303},{"n":"Qaracuxur","c":"Azerbaijan","y":40.3969,"x":49.9733},{"n":"Chiguayante","c":"Chile","y":-36.9167,"x":-73.0167},{"n":"Campana","c":"Argentina","y":-34.1667,"x":-58.9167},{"n":"Dingcheng","c":"China","y":19.6819,"x":110.3637},{"n":"Tuncheng","c":"China","y":19.3649,"x":110.0962},{"n":"Gubkin","c":"Russia","y":51.2833,"x":37.55},{"n":"Goodyear","c":"United States","y":33.2613,"x":-112.3622},{"n":"Yaofeng","c":"China","y":35.1395,"x":111.2174},{"n":"Aalst","c":"Belgium","y":50.9333,"x":4.0333},{"n":"Kattagan","c":"Uzbekistan","y":40.2,"x":64.9167},{"n":"Paraiso","c":"Mexico","y":18.3961,"x":-93.2128},{"n":"Gotenba","c":"Japan","y":35.3086,"x":138.935},{"n":"Novotroitsk","c":"Russia","y":51.2009,"x":58.2983},{"n":"Ducheng","c":"China","y":23.2445,"x":111.5342},{"n":"Kharian","c":"Pakistan","y":32.811,"x":73.865},{"n":"Keffi","c":"Nigeria","y":8.849,"x":7.8736},{"n":"Pariaman","c":"Indonesia","y":-0.6261,"x":100.1206},{"n":"Dalton","c":"United States","y":34.769,"x":-84.9712},{"n":"Santa Rosa Jauregui","c":"Mexico","y":20.7418,"x":-100.4473},{"n":"Ubatuba","c":"Brazil","y":-23.4339,"x":-45.0708},{"n":"San Antonio","c":"Chile","y":-33.5809,"x":-71.6132},{"n":"Clarkstown","c":"United States","y":41.1319,"x":-73.966},{"n":"Treviso","c":"Italy","y":45.6722,"x":12.2422},{"n":"Guasavito","c":"Mexico","y":25.5655,"x":-108.4718},{"n":"Pinamalayan","c":"Philippines","y":13,"x":121.4167},{"n":"Cheektowaga","c":"United States","y":42.9082,"x":-78.7466},{"n":"Shaoshanzhan","c":"China","y":27.91,"x":112.48},{"n":"Aroroy","c":"Philippines","y":12.5125,"x":123.3989},{"n":"Olavarria","c":"Argentina","y":-36.9,"x":-60.3333},{"n":"Konstanz","c":"Germany","y":47.6633,"x":9.1753},{"n":"Bryan","c":"United States","y":30.6657,"x":-96.3668},{"n":"Longchuan","c":"China","y":25.1945,"x":101.2759},{"n":"Zhezqazghan","c":"Kazakhstan","y":47.7833,"x":67.7},{"n":"Khowrasgan","c":"Iran","y":32.6536,"x":51.755},{"n":"Bugulma","c":"Russia","y":54.5333,"x":52.7833},{"n":"Shchekino","c":"Russia","y":54.0143,"x":37.5143},{"n":"Hinigaran","c":"Philippines","y":10.2667,"x":122.85},{"n":"Potiskum","c":"Nigeria","y":11.7104,"x":11.08},{"n":"Waukegan","c":"United States","y":42.3697,"x":-87.8716},{"n":"Pongotan","c":"Philippines","y":7.15,"x":125.95},{"n":"Longhua","c":"China","y":41.317,"x":117.7264},{"n":"Anderson","c":"United States","y":40.0891,"x":-85.6893},{"n":"Kitakoriyamacho","c":"Japan","y":34.6494,"x":135.7828},{"n":"Mijas","c":"Spain","y":36.6,"x":-4.6333},{"n":"Ushiku","c":"Japan","y":35.9833,"x":140.15},{"n":"North Vancouver","c":"Canada","y":49.3641,"x":-123.0066},{"n":"Redwood City","c":"United States","y":37.5026,"x":-122.2252},{"n":"Chiquinquira","c":"Colombia","y":5.6175,"x":-73.8164},{"n":"Guanambi","c":"Brazil","y":-14.2228,"x":-42.7808},{"n":"Torrevieja","c":"Spain","y":37.9778,"x":-0.6833},{"n":"Yeysk","c":"Russia","y":46.7106,"x":38.2778},{"n":"Sekimachi","c":"Japan","y":35.4958,"x":136.9178},{"n":"Hoover","c":"United States","y":33.3754,"x":-86.8064},{"n":"Cachoeira do Sul","c":"Brazil","y":-30.0394,"x":-52.8953},{"n":"Brossard","c":"Canada","y":45.4667,"x":-73.45},{"n":"Chita","c":"Japan","y":35,"x":136.8667},{"n":"Villingen-Schwenningen","c":"Germany","y":48.0603,"x":8.4586},{"n":"Sokcho","c":"Korea, South","y":38.2087,"x":128.5912},{"n":"Sao Bento do Sul","c":"Brazil","y":-26.25,"x":-49.3789},{"n":"Redencao","c":"Brazil","y":-8.0289,"x":-50.0308},{"n":"Chiclana de la Frontera","c":"Spain","y":36.4167,"x":-6.15},{"n":"Kineshma","c":"Russia","y":57.45,"x":42.15},{"n":"Lake Forest","c":"United States","y":33.6606,"x":-117.6712},{"n":"Camboriu","c":"Brazil","y":-27.025,"x":-48.6539},{"n":"Daanbantayan","c":"Philippines","y":11.3333,"x":124.0167},{"n":"Napa","c":"United States","y":38.2976,"x":-122.3011},{"n":"Derry","c":"United Kingdom","y":54.9917,"x":-7.3417},{"n":"Torrente","c":"Spain","y":39.4365,"x":-0.4679},{"n":"Sumenep","c":"Indonesia","y":-7.0049,"x":113.8496},{"n":"Luancheng","c":"China","y":37.8792,"x":114.6517},{"n":"Jelenia Gora","c":"Poland","y":50.9,"x":15.7333},{"n":"Walvisbaai","c":"Namibia","y":-22.9494,"x":14.5069},{"n":"Moriyama","c":"Japan","y":35.0589,"x":135.9944},{"n":"Junin","c":"Argentina","y":-34.5939,"x":-60.9464},{"n":"Stockton-on-Tees","c":"United Kingdom","y":54.57,"x":-1.32},{"n":"Korgas","c":"China","y":44.1256,"x":80.4144},{"n":"Repentigny","c":"Canada","y":45.7333,"x":-73.4667},{"n":"Largo","c":"United States","y":27.9088,"x":-82.7711},{"n":"Unai","c":"Brazil","y":-16.3578,"x":-46.9058},{"n":"Araripina","c":"Brazil","y":-7.55,"x":-40.5667},{"n":"Marl","c":"Germany","y":51.6667,"x":7.1167},{"n":"Gravata","c":"Brazil","y":-8.2008,"x":-35.565},{"n":"Jacobina","c":"Brazil","y":-11.1808,"x":-40.5178},{"n":"Aruja","c":"Brazil","y":-23.3967,"x":-46.3211},{"n":"Guider","c":"Cameroon","y":9.9342,"x":13.9486},{"n":"Nabua","c":"Philippines","y":13.4083,"x":123.375},{"n":"Surallah","c":"Philippines","y":6.3667,"x":124.7333},{"n":"Yokotemachi","c":"Japan","y":39.3106,"x":140.5533},{"n":"Sabanalarga","c":"Colombia","y":10.63,"x":-74.9236},{"n":"Johns Creek","c":"United States","y":34.0333,"x":-84.2027},{"n":"Tire","c":"Turkey","y":38.0833,"x":27.7333},{"n":"Newport Beach","c":"United States","y":33.6151,"x":-117.8669},{"n":"Dmitrov","c":"Russia","y":56.35,"x":37.5333},{"n":"Serra Talhada","c":"Brazil","y":-7.9858,"x":-38.2958},{"n":"Navegantes","c":"Brazil","y":-26.8989,"x":-48.6539},{"n":"Banga","c":"Philippines","y":6.3,"x":124.7833},{"n":"Mission","c":"United States","y":26.2041,"x":-98.3251},{"n":"Chigorodo","c":"Colombia","y":7.6697,"x":-76.6814},{"n":"El Milia","c":"Algeria","y":36.75,"x":6.2667},{"n":"Cerete","c":"Colombia","y":8.8867,"x":-75.7911},{"n":"El Ejido","c":"Spain","y":36.7831,"x":-2.8167},{"n":"Worms","c":"Germany","y":49.6319,"x":8.3653},{"n":"Makilala","c":"Philippines","y":6.9667,"x":125.0833},{"n":"Troy","c":"United States","y":42.5818,"x":-83.1457},{"n":"Madera","c":"United States","y":36.9631,"x":-120.0782},{"n":"Joplin","c":"United States","y":37.0758,"x":-94.5018},{"n":"San Fabian","c":"Philippines","y":16.15,"x":120.45},{"n":"Pontevedra","c":"Spain","y":42.4333,"x":-8.6333},{"n":"Cianorte","c":"Brazil","y":-23.6628,"x":-52.605},{"n":"Ijui","c":"Brazil","y":-28.3878,"x":-53.915},{"n":"Chino Hills","c":"United States","y":33.9508,"x":-117.7253},{"n":"Camiling","c":"Philippines","y":15.7,"x":120.4167},{"n":"Pinheiro","c":"Brazil","y":-2.5208,"x":-45.0828},{"n":"Sirsilla","c":"India","y":18.38,"x":78.83},{"n":"Arona","c":"Spain","y":28.0996,"x":-16.6809},{"n":"Chilliwack","c":"Canada","y":49.1577,"x":-121.9509},{"n":"Binmaley","c":"Philippines","y":16.0323,"x":120.269},{"n":"Yurga","c":"Russia","y":55.7333,"x":84.9},{"n":"Calabanga","c":"Philippines","y":13.7167,"x":123.2333},{"n":"Redditch","c":"United Kingdom","y":52.3069,"x":-1.9492},{"n":"Mian Channun","c":"Pakistan","y":30.4397,"x":72.3544},{"n":"Santa Barbara","c":"Philippines","y":16.0031,"x":120.4008},{"n":"Wutiancun","c":"China","y":23.1863,"x":116.4728},{"n":"Santana do Livramento","c":"Brazil","y":-30.8908,"x":-55.5328},{"n":"Tual","c":"Indonesia","y":-5.6385,"x":132.745},{"n":"Sao Sebastiao","c":"Brazil","y":-23.804,"x":-45.4051},{"n":"Sablayan","c":"Philippines","y":12.837,"x":120.7829},{"n":"Moju","c":"Brazil","y":-1.8839,"x":-48.7689},{"n":"Seropedica","c":"Brazil","y":-22.7439,"x":-43.7078},{"n":"Wuyi","c":"China","y":37.7965,"x":115.892},{"n":"Marsala","c":"Italy","y":37.7981,"x":12.4342},{"n":"Bhalwal","c":"Pakistan","y":32.2653,"x":72.9028},{"n":"Chaykovskiy","c":"Russia","y":56.7667,"x":54.1167},{"n":"Franklin","c":"United States","y":35.9216,"x":-86.8525},{"n":"Coari","c":"Brazil","y":-4.085,"x":-63.1408},{"n":"Velbert","c":"Germany","y":51.34,"x":7.0416},{"n":"Melbourne","c":"United States","y":28.1085,"x":-80.6627},{"n":"Pozzuoli","c":"Italy","y":40.8231,"x":14.1222},{"n":"Al Hayy","c":"Iraq","y":32.1742,"x":46.0433},{"n":"Port Huron","c":"United States","y":42.9822,"x":-82.4387},{"n":"Velez-Malaga","c":"Spain","y":36.7833,"x":-4.1},{"n":"Xiedian","c":"China","y":35.419,"x":110.8281},{"n":"Nakatsu","c":"Japan","y":33.5983,"x":131.1883},{"n":"Baggao","c":"Philippines","y":17.8894,"x":121.8709},{"n":"Solana","c":"Philippines","y":17.65,"x":121.6833},{"n":"Colonie","c":"United States","y":42.7396,"x":-73.7874},{"n":"Shirvan","c":"Iran","y":37.3967,"x":57.9294},{"n":"Kongjiazhuang","c":"China","y":40.7536,"x":114.7237},{"n":"Bhaktapur","c":"Nepal","y":27.6722,"x":85.4278},{"n":"Guinobatan","c":"Philippines","y":13.1833,"x":123.6},{"n":"Fredrikstad","c":"Norway","y":59.2167,"x":10.95},{"n":"Cruzeiro do Sul","c":"Brazil","y":-7.6308,"x":-72.67},{"n":"Dapitan","c":"Philippines","y":8.6549,"x":123.4243},{"n":"Omihachiman","c":"Japan","y":35.1283,"x":136.0981},{"n":"Muroran","c":"Japan","y":42.3172,"x":140.9881},{"n":"Calaca","c":"Philippines","y":13.9667,"x":120.8},{"n":"Kaneyama","c":"Japan","y":31.3833,"x":130.85},{"n":"Bolinao","c":"Philippines","y":16.3333,"x":119.8833},{"n":"Patrocinio","c":"Brazil","y":-18.9439,"x":-46.9928},{"n":"Minden","c":"Germany","y":52.2883,"x":8.9167},{"n":"Ita","c":"Paraguay","y":-25.4833,"x":-57.35},{"n":"Zephyrhills","c":"United States","y":28.2408,"x":-82.1796},{"n":"Tres Rios","c":"Brazil","y":-22.1169,"x":-43.2089},{"n":"Bekobod","c":"Uzbekistan","y":40.2258,"x":69.2292},{"n":"Maple Ridge","c":"Canada","y":49.2167,"x":-122.6},{"n":"La Louviere","c":"Belgium","y":50.4778,"x":4.1881},{"n":"Grosseto","c":"Italy","y":42.7722,"x":11.1089},{"n":"St. Augustine","c":"United States","y":29.8977,"x":-81.31},{"n":"Peterborough","c":"Canada","y":44.3,"x":-78.3167},{"n":"Funza","c":"Colombia","y":4.7175,"x":-74.2094},{"n":"Hengkou","c":"China","y":32.7378,"x":108.7695},{"n":"Pilar","c":"Argentina","y":-34.4588,"x":-58.9142},{"n":"Varese","c":"Italy","y":45.8167,"x":8.8333},{"n":"Caldas","c":"Colombia","y":6.0886,"x":-75.6361},{"n":"Science City of Munoz","c":"Philippines","y":15.7167,"x":120.9},{"n":"Macaiba","c":"Brazil","y":-5.8578,"x":-35.3539},{"n":"Ust'-Ilimsk","c":"Russia","y":58,"x":102.6667},{"n":"Flagstaff","c":"United States","y":35.1872,"x":-111.6195},{"n":"Presidencia Roque Saenz Pena","c":"Argentina","y":-26.7833,"x":-60.45},{"n":"Azov","c":"Russia","y":47.1,"x":39.4167},{"n":"Lujan","c":"Argentina","y":-34.5703,"x":-59.105},{"n":"Agboville","c":"Côte D’Ivoire","y":5.9333,"x":-4.2167},{"n":"Campo Limpo","c":"Brazil","y":-23.2064,"x":-46.7844},{"n":"Quixeramobim","c":"Brazil","y":-5.1989,"x":-39.2928},{"n":"Watampone","c":"Indonesia","y":-4.5328,"x":120.3334},{"n":"Pleasanton","c":"United States","y":37.6663,"x":-121.8805},{"n":"Xindian","c":"China","y":25.3172,"x":101.5446},{"n":"Calauan","c":"Philippines","y":14.15,"x":121.3167},{"n":"Shuibian","c":"China","y":24.1263,"x":112.7668},{"n":"Anapa","c":"Russia","y":44.8944,"x":37.3167},{"n":"Kimitsu","c":"Japan","y":35.3306,"x":139.9025},{"n":"Matao","c":"Brazil","y":-21.6033,"x":-48.3658},{"n":"Murcia","c":"Philippines","y":10.6,"x":123.0333},{"n":"Dessau-Rosslau","c":"Germany","y":51.8333,"x":12.2333},{"n":"General Roca","c":"Argentina","y":-39.0333,"x":-67.5833},{"n":"Atascocita","c":"United States","y":29.9777,"x":-95.1953},{"n":"Bani Mazar","c":"Egypt","y":28.5,"x":30.8},{"n":"Kentau","c":"Kazakhstan","y":43.5169,"x":68.5044},{"n":"Maco","c":"Philippines","y":7.3619,"x":125.8553},{"n":"Westland","c":"United States","y":42.3192,"x":-83.3805},{"n":"Cranston","c":"United States","y":41.7658,"x":-71.4857},{"n":"Gobernador Galvez","c":"Argentina","y":-33.0251,"x":-60.6337},{"n":"Kamareddipet","c":"India","y":18.3167,"x":78.35},{"n":"Athi River","c":"Kenya","y":-1.45,"x":36.9833},{"n":"Novouralsk","c":"Russia","y":57.25,"x":60.0833},{"n":"Shiji","c":"China","y":23.5607,"x":112.963},{"n":"Yanggao","c":"China","y":21.3298,"x":109.9177},{"n":"Indanan","c":"Philippines","y":6,"x":120.9667},{"n":"Springdale","c":"United States","y":36.1899,"x":-94.1574},{"n":"Taroudannt","c":"Morocco","y":30.4711,"x":-8.8778},{"n":"Sefrou","c":"Morocco","y":33.83,"x":-4.83},{"n":"Warwick","c":"United States","y":41.7062,"x":-71.4334},{"n":"Passi","c":"Philippines","y":11.1,"x":122.6333},{"n":"Los Patios","c":"Colombia","y":7.8342,"x":-72.505},{"n":"Tanjay","c":"Philippines","y":9.5167,"x":123.1583},{"n":"Polatsk","c":"Belarus","y":55.4833,"x":28.8},{"n":"Calatrava","c":"Philippines","y":10.6,"x":123.4833},{"n":"Meybod","c":"Iran","y":32.25,"x":54.0167},{"n":"Tepeji del Rio de Ocampo","c":"Mexico","y":19.9039,"x":-99.3414},{"n":"Akiruno","c":"Japan","y":35.7289,"x":139.2942},{"n":"Kilifi","c":"Kenya","y":-3.6333,"x":39.85},{"n":"Quixada","c":"Brazil","y":-4.9708,"x":-39.015},{"n":"Farmington Hills","c":"United States","y":42.486,"x":-83.3771},{"n":"Neumunster","c":"Germany","y":54.0714,"x":9.99},{"n":"Alfenas","c":"Brazil","y":-21.4289,"x":-45.9469},{"n":"Mackay","c":"Australia","y":-21.1411,"x":149.1861},{"n":"Norderstedt","c":"Germany","y":53.7064,"x":10.0103},{"n":"Necochea","c":"Argentina","y":-38.55,"x":-58.7333},{"n":"Paloncha","c":"India","y":17.5815,"x":80.6765},{"n":"Talipao","c":"Philippines","y":5.976,"x":121.1087},{"n":"Williamsburg","c":"United States","y":37.2692,"x":-76.7076},{"n":"Brooklyn Park","c":"United States","y":45.1112,"x":-93.3505},{"n":"Uvinza","c":"Tanzania","y":-5.1036,"x":30.3911},{"n":"Kottagudem","c":"India","y":17.55,"x":80.63},{"n":"Mbalmayo","c":"Cameroon","y":3.52,"x":11.5122},{"n":"Namsan","c":"Korea, North","y":42.2304,"x":129.2304},{"n":"Zarzis","c":"Tunisia","y":33.5,"x":11.1167},{"n":"Chapadinha","c":"Brazil","y":-3.7419,"x":-43.36},{"n":"Andahuaylas","c":"Peru","y":-13.6575,"x":-73.3833},{"n":"Hattiesburg","c":"United States","y":31.3074,"x":-89.317},{"n":"Tres Coracoes","c":"Brazil","y":-21.6947,"x":-45.2553},{"n":"Manresa","c":"Spain","y":41.7264,"x":1.8292},{"n":"Jamshoro","c":"Pakistan","y":25.4283,"x":68.2822},{"n":"Meiganga","c":"Cameroon","y":6.5172,"x":14.2947},{"n":"Tall `Afar","c":"Iraq","y":36.3792,"x":42.4497},{"n":"Balad","c":"Iraq","y":34.0147,"x":44.1456},{"n":"Vila do Conde","c":"Portugal","y":41.35,"x":-8.75},{"n":"Bantayan","c":"Philippines","y":11.2,"x":123.7333},{"n":"San Carlos del Zulia","c":"Venezuela","y":9,"x":-71.95},{"n":"Natori-shi","c":"Japan","y":38.1717,"x":140.8919},{"n":"Koktokay","c":"China","y":47.0004,"x":89.4666},{"n":"Capenda Camulemba","c":"Angola","y":-9.4233,"x":18.4328},{"n":"Fiumicino","c":"Italy","y":41.7667,"x":12.2333},{"n":"Patzcuaro","c":"Mexico","y":19.5164,"x":-101.6097},{"n":"Chester","c":"United Kingdom","y":53.19,"x":-2.89},{"n":"Mabai","c":"China","y":23.0188,"x":104.3929},{"n":"Ben Gardane","c":"Tunisia","y":33.1389,"x":11.2167},{"n":"Jinhe","c":"China","y":22.7815,"x":103.228},{"n":"Baracoa","c":"Cuba","y":20.3444,"x":-74.4956},{"n":"Telemaco Borba","c":"Brazil","y":-24.3239,"x":-50.6158},{"n":"Valdosta","c":"United States","y":30.8502,"x":-83.2788},{"n":"Yalta","c":"Ukraine","y":44.4994,"x":34.1553},{"n":"Cotui","c":"Dominican Republic","y":19.06,"x":-70.15},{"n":"Jiangna","c":"China","y":23.6128,"x":104.3433},{"n":"Cabiao","c":"Philippines","y":15.25,"x":120.85},{"n":"Manhuacu","c":"Brazil","y":-20.2581,"x":-42.0336},{"n":"Torres Vedras","c":"Portugal","y":39.0833,"x":-9.2667},{"n":"Gyoda","c":"Japan","y":36.1389,"x":139.4558},{"n":"Buckeye","c":"United States","y":33.4314,"x":-112.6429},{"n":"Georgetown","c":"United States","y":30.6668,"x":-97.6953},{"n":"Hanno","c":"Japan","y":35.8558,"x":139.3278},{"n":"Nagua","c":"Dominican Republic","y":19.38,"x":-69.85},{"n":"Pingyi","c":"China","y":35.5104,"x":117.62},{"n":"Yenakiieve","c":"Ukraine","y":48.2311,"x":38.2053},{"n":"Matalam","c":"Philippines","y":7.0833,"x":124.9},{"n":"Iwamizawa","c":"Japan","y":43.1961,"x":141.7758},{"n":"Kadoma","c":"Zimbabwe","y":-18.35,"x":29.9167},{"n":"Tanuku","c":"India","y":16.75,"x":81.7},{"n":"Cedar Park","c":"United States","y":30.5106,"x":-97.8196},{"n":"Klin","c":"Russia","y":56.3339,"x":36.7125},{"n":"Ozersk","c":"Russia","y":55.7556,"x":60.7028},{"n":"Villa Maria","c":"Argentina","y":-32.4103,"x":-63.2314},{"n":"The Villages","c":"United States","y":28.9021,"x":-81.9888},{"n":"Kokomo","c":"United States","y":40.464,"x":-86.1277},{"n":"Perris","c":"United States","y":33.7899,"x":-117.2233},{"n":"Echague","c":"Philippines","y":16.7,"x":121.65},{"n":"Huaral","c":"Peru","y":-11.5008,"x":-77.2091},{"n":"St. Joseph","c":"United States","y":39.7599,"x":-94.821},{"n":"Agua Prieta","c":"Mexico","y":31.3258,"x":-109.5489},{"n":"Pato Branco","c":"Brazil","y":-26.2289,"x":-52.6708},{"n":"Mooka","c":"Japan","y":36.4333,"x":140.0167},{"n":"Flower Mound","c":"United States","y":33.0344,"x":-97.1146},{"n":"Pharr","c":"United States","y":26.1685,"x":-98.1904},{"n":"Sahuayo de Morelos","c":"Mexico","y":20.0575,"x":-102.7239},{"n":"Francisco Beltrao","c":"Brazil","y":-26.0808,"x":-53.055},{"n":"Maizuru","c":"Japan","y":35.45,"x":135.3333},{"n":"Alton","c":"United States","y":38.9034,"x":-90.1523},{"n":"Mabinay","c":"Philippines","y":9.7333,"x":122.9167},{"n":"Bamberg","c":"Germany","y":49.8917,"x":10.8917},{"n":"Hengbei","c":"China","y":23.8787,"x":115.7309},{"n":"Loveland","c":"United States","y":40.4166,"x":-105.0623},{"n":"Bogo","c":"Philippines","y":11.0167,"x":124},{"n":"Subulussalam","c":"Indonesia","y":2.6422,"x":98.0042},{"n":"Delmenhorst","c":"Germany","y":53.0506,"x":8.6317},{"n":"Essaouira","c":"Morocco","y":31.513,"x":-9.7687},{"n":"El Carmen de Bolivar","c":"Colombia","y":9.7167,"x":-75.1167},{"n":"Tierralta","c":"Colombia","y":8.1728,"x":-76.0594},{"n":"Rockhampton","c":"Australia","y":-23.375,"x":150.5117},{"n":"Aligudarz","c":"Iran","y":33.4006,"x":49.6947},{"n":"Dondo","c":"Mozambique","y":-19.6167,"x":34.75},{"n":"Boynton Beach","c":"United States","y":26.5281,"x":-80.0811},{"n":"La Dorada","c":"Colombia","y":5.4538,"x":-74.6647},{"n":"Tela","c":"Honduras","y":15.7833,"x":-87.4667},{"n":"Picos","c":"Brazil","y":-7.0769,"x":-41.4669},{"n":"Vyborg","c":"Russia","y":60.7092,"x":28.7442},{"n":"Manbij","c":"Syria","y":36.5333,"x":37.95},{"n":"Dias d'Avila","c":"Brazil","y":-12.6128,"x":-38.2969},{"n":"Valdemoro","c":"Spain","y":40.1908,"x":-3.6742},{"n":"Usol'ye-Sibirskoye","c":"Russia","y":52.75,"x":103.65},{"n":"Jonesboro","c":"United States","y":35.8212,"x":-90.6791},{"n":"Pattoki","c":"Pakistan","y":31.0214,"x":73.8528},{"n":"San Antonio","c":"Philippines","y":15.3833,"x":120.8},{"n":"Kropotkin","c":"Russia","y":45.4333,"x":40.5667},{"n":"Temoaya","c":"Mexico","y":19.4686,"x":-99.5933},{"n":"Maitland","c":"Australia","y":-32.7167,"x":151.55},{"n":"Arjona","c":"Colombia","y":10.255,"x":-75.3447},{"n":"Chengbin","c":"China","y":19.9991,"x":110.3332},{"n":"Parma","c":"United States","y":41.3843,"x":-81.7286},{"n":"Bor","c":"Russia","y":56.3603,"x":44.0592},{"n":"Bodhan","c":"India","y":18.67,"x":77.9},{"n":"Chinautla","c":"Guatemala","y":14.7029,"x":-90.5},{"n":"Layton","c":"United States","y":41.0769,"x":-111.9621},{"n":"Balqash","c":"Kazakhstan","y":46.85,"x":75},{"n":"Villa Victoria","c":"Mexico","y":19.4333,"x":-100},{"n":"Elizabethtown","c":"United States","y":37.703,"x":-85.877},{"n":"Beziers","c":"France","y":43.3476,"x":3.219},{"n":"Texarkana","c":"United States","y":33.4487,"x":-94.0815},{"n":"Linkou","c":"China","y":45.2819,"x":130.2519},{"n":"Siaton","c":"Philippines","y":9.0667,"x":123.0333},{"n":"Aquiraz","c":"Brazil","y":-3.9008,"x":-38.3908},{"n":"Villa Canales","c":"Guatemala","y":14.4816,"x":-90.534},{"n":"Roosendaal","c":"Netherlands","y":51.5314,"x":4.4556},{"n":"Numan","c":"Nigeria","y":9.4669,"x":12.0328},{"n":"Ciudad de Huajuapam de Leon","c":"Mexico","y":17.8039,"x":-97.7758},{"n":"Viersen","c":"Germany","y":51.2556,"x":6.3917},{"n":"Bebedouro","c":"Brazil","y":-20.9494,"x":-48.4792},{"n":"Guildford","c":"United Kingdom","y":51.2365,"x":-0.5703},{"n":"Sint-Niklaas","c":"Belgium","y":51.1644,"x":4.1392},{"n":"Karur","c":"India","y":10.9504,"x":78.0833},{"n":"Armant","c":"Egypt","y":25.6167,"x":32.5333},{"n":"Alegrete","c":"Brazil","y":-29.7839,"x":-55.7911},{"n":"Bakhmut","c":"Ukraine","y":48.6044,"x":38.0067},{"n":"Bulacan","c":"Philippines","y":14.7928,"x":120.8789},{"n":"Marburg","c":"Germany","y":50.8167,"x":8.7667},{"n":"Buhi","c":"Philippines","y":13.4333,"x":123.5167},{"n":"Soke","c":"Turkey","y":37.7512,"x":27.4103},{"n":"Kankakee","c":"United States","y":41.1019,"x":-87.8643},{"n":"Funing","c":"China","y":39.8879,"x":119.2314},{"n":"Ende","c":"Indonesia","y":-8.8333,"x":121.65},{"n":"Porterville","c":"United States","y":36.0644,"x":-119.0338},{"n":"Harunabad","c":"Pakistan","y":29.61,"x":73.1361},{"n":"Gelendzhik","c":"Russia","y":44.5608,"x":38.0767},{"n":"Caninde","c":"Brazil","y":-4.3589,"x":-39.3119},{"n":"Chernogorsk","c":"Russia","y":53.8167,"x":91.2833},{"n":"Balkh","c":"Afghanistan","y":36.7581,"x":66.8989},{"n":"Baytown","c":"United States","y":29.7586,"x":-94.9669},{"n":"Upland","c":"United States","y":34.1178,"x":-117.6603},{"n":"Siedlce","c":"Poland","y":52.1833,"x":22.2833},{"n":"Nikko","c":"Japan","y":36.7198,"x":139.6982},{"n":"Gandia","c":"Spain","y":38.9667,"x":-0.1833},{"n":"Malapatan","c":"Philippines","y":5.9667,"x":125.2833},{"n":"Ryugasaki","c":"Japan","y":35.9167,"x":140.1833},{"n":"Al Musayyib","c":"Iraq","y":32.7786,"x":44.29},{"n":"Pyapon","c":"Myanmar","y":16.2853,"x":95.6786},{"n":"Caserta","c":"Italy","y":41.0667,"x":14.3333},{"n":"Mafra","c":"Portugal","y":38.9333,"x":-9.3333},{"n":"Camarillo","c":"United States","y":34.223,"x":-119.0322},{"n":"Sarqan","c":"Kazakhstan","y":45.4203,"x":79.9149},{"n":"Dschang","c":"Cameroon","y":5.45,"x":10.05},{"n":"Kahror Pakka","c":"Pakistan","y":29.6236,"x":71.9167},{"n":"Ait Ali","c":"Morocco","y":30.1739,"x":-9.4881},{"n":"Tuban","c":"Indonesia","y":-6.8995,"x":112.05},{"n":"Balashov","c":"Russia","y":51.55,"x":43.1667},{"n":"Wilhelmshaven","c":"Germany","y":53.5167,"x":8.1333},{"n":"Shostka","c":"Ukraine","y":51.8657,"x":33.4766},{"n":"Asti","c":"Italy","y":44.9,"x":8.2069},{"n":"Jablah","c":"Syria","y":35.3597,"x":35.9214},{"n":"E'erguna","c":"China","y":50.2411,"x":120.172},{"n":"Rheine","c":"Germany","y":52.2833,"x":7.4333},{"n":"Turbaco","c":"Colombia","y":10.3319,"x":-75.4142},{"n":"Fouchana","c":"Tunisia","y":36.6987,"x":10.1693},{"n":"Fancheng","c":"China","y":39.1891,"x":113.2729},{"n":"South Jordan","c":"United States","y":40.557,"x":-111.9782},{"n":"Palma Soriano","c":"Cuba","y":20.2139,"x":-75.9919},{"n":"Macabebe","c":"Philippines","y":14.9081,"x":120.7156},{"n":"Stakhanov","c":"Ukraine","y":48.5472,"x":38.6361},{"n":"Bais","c":"Philippines","y":9.5907,"x":123.1213},{"n":"Battle Creek","c":"United States","y":42.2986,"x":-85.2296},{"n":"Ibiuna","c":"Brazil","y":-23.6564,"x":-47.2225},{"n":"Jose Abad Santos","c":"Philippines","y":5.9167,"x":125.65},{"n":"Venado Tuerto","c":"Argentina","y":-33.75,"x":-61.9667},{"n":"Sangolqui","c":"Ecuador","y":-0.3344,"x":-78.4475},{"n":"Anzhero-Sudzhensk","c":"Russia","y":56.0833,"x":86.0333},{"n":"Kapalong","c":"Philippines","y":7.5854,"x":125.7052},{"n":"Santo Angelo","c":"Brazil","y":-28.2989,"x":-54.2628},{"n":"Houmt Souk","c":"Tunisia","y":33.8667,"x":10.85},{"n":"Livingston","c":"Guatemala","y":15.83,"x":-88.75},{"n":"Myslowice","c":"Poland","y":50.2333,"x":19.1333},{"n":"Daisen","c":"Japan","y":39.4531,"x":140.4756},{"n":"Berdychiv","c":"Ukraine","y":49.8919,"x":28.6},{"n":"Itapetinga","c":"Brazil","y":-15.2489,"x":-40.2478},{"n":"Lins","c":"Brazil","y":-21.6786,"x":-49.7425},{"n":"Espinal","c":"Colombia","y":4.1486,"x":-74.8819},{"n":"Lod","c":"Israel","y":31.95,"x":34.9},{"n":"Troisdorf","c":"Germany","y":50.8161,"x":7.1556},{"n":"Fukuchiyama","c":"Japan","y":35.2967,"x":135.1264},{"n":"Bauang","c":"Philippines","y":16.5333,"x":120.3333},{"n":"Piotrkow Trybunalski","c":"Poland","y":51.4,"x":19.6833},{"n":"Tailai","c":"China","y":46.3909,"x":123.4161},{"n":"San Ramon","c":"United States","y":37.7625,"x":-121.9365},{"n":"Toba Tek Singh","c":"Pakistan","y":30.9667,"x":72.4833},{"n":"Jabuticabal","c":"Brazil","y":-21.255,"x":-48.3219},{"n":"Santa Catalina","c":"Philippines","y":9.3331,"x":122.8658},{"n":"Rio Largo","c":"Brazil","y":-9.4778,"x":-35.8528},{"n":"Ovalle","c":"Chile","y":-30.6031,"x":-71.203},{"n":"Kengtung","c":"Myanmar","y":21.2914,"x":99.6039},{"n":"Xinglong","c":"China","y":40.4146,"x":117.493},{"n":"Lake Jackson","c":"United States","y":29.0516,"x":-95.4522},{"n":"Pototan","c":"Philippines","y":10.95,"x":122.6333},{"n":"Bethlehem","c":"United States","y":40.6266,"x":-75.3679},{"n":"Alcala de Guadaira","c":"Spain","y":37.3333,"x":-5.85},{"n":"Shadrinsk","c":"Russia","y":56.0833,"x":63.6333},{"n":"Bayreuth","c":"Germany","y":49.9481,"x":11.5783},{"n":"Zhongcheng","c":"China","y":28.591,"x":103.9396},{"n":"Puqiancun","c":"China","y":23.5723,"x":114.6122},{"n":"Wyoming","c":"United States","y":42.8909,"x":-85.7066},{"n":"Dubna","c":"Russia","y":56.75,"x":37.15},{"n":"Nakatsugawa","c":"Japan","y":35.4875,"x":137.5006},{"n":"Batarasa","c":"Philippines","y":8.6667,"x":117.6167},{"n":"Oshkosh","c":"United States","y":44.0228,"x":-88.5619},{"n":"Sapiranga","c":"Brazil","y":-29.6378,"x":-51.0069},{"n":"Bonab","c":"Iran","y":37.3403,"x":46.0561},{"n":"Hammond","c":"United States","y":41.6169,"x":-87.491},{"n":"Libon","c":"Philippines","y":13.3,"x":123.4333},{"n":"Tiznit","c":"Morocco","y":29.7,"x":-9.7269},{"n":"Waldorf","c":"United States","y":38.6085,"x":-76.9195},{"n":"Pagbilao","c":"Philippines","y":13.972,"x":121.687},{"n":"Missouri City","c":"United States","y":29.563,"x":-95.5365},{"n":"Luneburg","c":"Germany","y":53.2525,"x":10.4144},{"n":"Pasco","c":"United States","y":46.2506,"x":-119.1304},{"n":"Mangalagiri","c":"India","y":16.43,"x":80.55},{"n":"Kawartha Lakes","c":"Canada","y":44.35,"x":-78.75},{"n":"Bombo","c":"Uganda","y":0.5833,"x":32.5333},{"n":"Wheeling","c":"United States","y":40.0752,"x":-80.6951},{"n":"Brick","c":"United States","y":40.06,"x":-74.1099},{"n":"Acacias","c":"Colombia","y":3.9889,"x":-73.7647},{"n":"Kendall","c":"United States","y":25.6697,"x":-80.3556},{"n":"Itahari","c":"Nepal","y":26.6667,"x":87.2833},{"n":"Concordia","c":"Brazil","y":-27.2339,"x":-52.0278},{"n":"Robles","c":"Philippines","y":10.35,"x":123.0667},{"n":"Valle Alto","c":"Mexico","y":25.5667,"x":-100.25},{"n":"Standerton","c":"South Africa","y":-26.95,"x":29.25},{"n":"Tatebayashi","c":"Japan","y":36.245,"x":139.5422},{"n":"Idah","c":"Nigeria","y":7.1104,"x":6.7399},{"n":"Dorsten","c":"Germany","y":51.66,"x":6.9642},{"n":"Gela","c":"Italy","y":37.0667,"x":14.25},{"n":"Di An","c":"Vietnam","y":10.9039,"x":106.7679},{"n":"Rancho Cordova","c":"United States","y":38.574,"x":-121.2523},{"n":"Arcoverde","c":"Brazil","y":-8.4189,"x":-37.0539},{"n":"Gode","c":"Ethiopia","y":5.95,"x":43.45},{"n":"Palma","c":"Mozambique","y":-10.7833,"x":40.4833},{"n":"Tongye","c":"China","y":37.9679,"x":114.3782},{"n":"Lamitan","c":"Philippines","y":6.65,"x":122.1333},{"n":"Conway","c":"United States","y":35.0754,"x":-92.4694},{"n":"Wiwili","c":"Nicaragua","y":13.6167,"x":-85.8167},{"n":"Gary","c":"United States","y":41.5906,"x":-87.3472},{"n":"Bunbury","c":"Australia","y":-33.3333,"x":115.6333},{"n":"Pilar","c":"Philippines","y":12.9333,"x":123.6833},{"n":"Castrop-Rauxel","c":"Germany","y":51.55,"x":7.3167},{"n":"Altoona","c":"United States","y":40.5082,"x":-78.4007},{"n":"Samundri","c":"Pakistan","y":31.0639,"x":72.9611},{"n":"Arlington Heights","c":"United States","y":42.0955,"x":-87.9825},{"n":"Nizhyn","c":"Ukraine","y":51.05,"x":31.9},{"n":"San Francisco","c":"Philippines","y":8.505,"x":125.9771},{"n":"Piracununga","c":"Brazil","y":-21.9961,"x":-47.4258},{"n":"Burnley","c":"United Kingdom","y":53.789,"x":-2.248},{"n":"Copacabana","c":"Colombia","y":6.3486,"x":-75.5103},{"n":"San Juan Opico","c":"El Salvador","y":13.8833,"x":-89.35},{"n":"Grand-Bassam","c":"Côte D’Ivoire","y":5.2,"x":-3.7333},{"n":"Bolingbrook","c":"United States","y":41.6903,"x":-88.1019},{"n":"Rochester Hills","c":"United States","y":42.6645,"x":-83.1563},{"n":"Barili","c":"Philippines","y":10.1167,"x":123.5333},{"n":"Novoaltaysk","c":"Russia","y":53.4,"x":83.9333},{"n":"Framingham","c":"United States","y":42.3085,"x":-71.4368},{"n":"Detmold","c":"Germany","y":51.9378,"x":8.8833},{"n":"Palmeira dos Indios","c":"Brazil","y":-9.4069,"x":-36.6278},{"n":"Tatsunocho-tominaga","c":"Japan","y":34.8581,"x":134.5456},{"n":"Gumaca","c":"Philippines","y":13.921,"x":122.1002},{"n":"Cinar","c":"Turkey","y":37.7256,"x":40.4147},{"n":"Mineral'nyye Vody","c":"Russia","y":44.2008,"x":43.1125},{"n":"Kara-Balta","c":"Kyrgyzstan","y":42.8306,"x":73.8857},{"n":"Hilton Head Island","c":"United States","y":32.1896,"x":-80.7499},{"n":"Sundsvall","c":"Sweden","y":62.3902,"x":17.3067},{"n":"Ouro Preto","c":"Brazil","y":-20.3853,"x":-43.5036},{"n":"Yelabuga","c":"Russia","y":55.7667,"x":52.0333},{"n":"San Ramon de la Nueva Oran","c":"Argentina","y":-23.1361,"x":-64.3222},{"n":"Troitsk","c":"Russia","y":54.0833,"x":61.5667},{"n":"Konin","c":"Poland","y":52.2275,"x":18.2614},{"n":"Owensboro","c":"United States","y":37.7574,"x":-87.1173},{"n":"San Martin","c":"El Salvador","y":13.7417,"x":-89.0564},{"n":"Kairana","c":"India","y":29.4,"x":77.2},{"n":"Jaen","c":"Philippines","y":15.3333,"x":120.9},{"n":"Majadahonda","c":"Spain","y":40.4728,"x":-3.8722},{"n":"Riberalta","c":"Bolivia","y":-10.983,"x":-66.1},{"n":"Oriximina","c":"Brazil","y":-1.7658,"x":-55.8658},{"n":"Arnsberg","c":"Germany","y":51.3967,"x":8.0644},{"n":"Prince George","c":"Canada","y":53.9169,"x":-122.7494},{"n":"Kostiantynivka","c":"Ukraine","y":48.5333,"x":37.7167},{"n":"Ceara-Mirim","c":"Brazil","y":-5.6339,"x":-35.4258},{"n":"Ixmiquilpan","c":"Mexico","y":20.4861,"x":-99.2589},{"n":"Ubay","c":"Philippines","y":10.056,"x":124.4729},{"n":"Pavia","c":"Italy","y":45.1853,"x":9.155},{"n":"Yurihonjo","c":"Japan","y":39.3858,"x":140.0489},{"n":"Yegoryevsk","c":"Russia","y":55.3667,"x":39.0167},{"n":"Kasama","c":"Japan","y":36.345,"x":140.3042},{"n":"Lambunao","c":"Philippines","y":11.05,"x":122.4833},{"n":"Bawku","c":"Ghana","y":11.06,"x":-0.2422},{"n":"Ragusa","c":"Italy","y":36.925,"x":14.7306},{"n":"Chaigoubu","c":"China","y":40.6687,"x":114.4157},{"n":"Tagoloan","c":"Philippines","y":8.5333,"x":124.75},{"n":"Siuna","c":"Nicaragua","y":13.7333,"x":-84.7667},{"n":"Takestan","c":"Iran","y":36.0694,"x":49.6958},{"n":"Linares","c":"Chile","y":-35.8454,"x":-71.5979},{"n":"Shrewsbury","c":"United Kingdom","y":52.708,"x":-2.754},{"n":"Wausau","c":"United States","y":44.962,"x":-89.6459},{"n":"Quillota","c":"Chile","y":-32.8799,"x":-71.2474},{"n":"Ostrowiec Swietokrzyski","c":"Poland","y":50.9333,"x":21.4},{"n":"El Hamma","c":"Tunisia","y":33.8864,"x":9.7951},{"n":"Umingan","c":"Philippines","y":15.9,"x":120.8},{"n":"Molina de Segura","c":"Spain","y":38.0548,"x":-1.2131},{"n":"Anniston","c":"United States","y":33.6712,"x":-85.8136},{"n":"Brakpan","c":"South Africa","y":-26.2353,"x":28.37},{"n":"Zhuolu","c":"China","y":40.3741,"x":115.2087},{"n":"Mangatarem","c":"Philippines","y":15.7874,"x":120.2921},{"n":"Kirovo-Chepetsk","c":"Russia","y":58.55,"x":50.0167},{"n":"Apple Valley","c":"United States","y":34.5328,"x":-117.2104},{"n":"Ludenscheid","c":"Germany","y":51.2198,"x":7.6273},{"n":"Vinhedo","c":"Brazil","y":-23.03,"x":-46.975},{"n":"Landshut","c":"Germany","y":48.5397,"x":12.1508},{"n":"San Juan Chamelco","c":"Guatemala","y":15.4257,"x":-90.3263},{"n":"Shibukawa","c":"Japan","y":36.4833,"x":139},{"n":"Sault Ste. Marie","c":"Canada","y":46.5333,"x":-84.35},{"n":"Calauag","c":"Philippines","y":13.9575,"x":122.2875},{"n":"Nepalganj","c":"Nepal","y":28.05,"x":81.6167},{"n":"Mansfield","c":"United States","y":40.7656,"x":-82.5275},{"n":"Narra","c":"Philippines","y":9.2833,"x":118.4167},{"n":"Tatvan","c":"Turkey","y":38.5066,"x":42.2816},{"n":"Cuamba","c":"Mozambique","y":-14.82,"x":36.5486},{"n":"Farroupilha","c":"Brazil","y":-29.225,"x":-51.3478},{"n":"Tokar","c":"Sudan","y":18.4333,"x":37.7333},{"n":"Shakargarh","c":"Pakistan","y":32.2628,"x":75.1583},{"n":"Tan-Tan","c":"Morocco","y":28.4333,"x":-11.1},{"n":"Wenping","c":"China","y":27.193,"x":103.5461},{"n":"Chapayevsk","c":"Russia","y":52.9833,"x":49.7167},{"n":"Santa Rosa de Cabal","c":"Colombia","y":4.8672,"x":-75.6211},{"n":"Moa","c":"Cuba","y":20.6556,"x":-74.9417},{"n":"Otawara","c":"Japan","y":36.8667,"x":140.0167},{"n":"Cremona","c":"Italy","y":45.1333,"x":10.0333},{"n":"Itapira","c":"Brazil","y":-22.4361,"x":-46.8217},{"n":"Baghlan","c":"Afghanistan","y":36.1328,"x":68.7},{"n":"Kalamata","c":"Greece","y":37.0389,"x":22.1142},{"n":"Sambrial","c":"Pakistan","y":32.475,"x":74.3522},{"n":"Vsevolozhsk","c":"Russia","y":60.016,"x":30.6663},{"n":"Montepuez","c":"Mozambique","y":-13.1167,"x":39},{"n":"San Vicente del Caguan","c":"Colombia","y":2.1153,"x":-74.77},{"n":"Keshan","c":"China","y":48.0263,"x":125.866},{"n":"Belovo","c":"Russia","y":54.4167,"x":86.3},{"n":"Schaumburg","c":"United States","y":42.0307,"x":-88.0838},{"n":"Xiangjiaba","c":"China","y":28.6282,"x":104.4211},{"n":"Pocatello","c":"United States","y":42.8724,"x":-112.4646},{"n":"Pacatuba","c":"Brazil","y":-3.9839,"x":-38.62},{"n":"Crateus","c":"Brazil","y":-5.1778,"x":-40.6778},{"n":"Woodbury","c":"United States","y":44.9056,"x":-92.923},{"n":"Ede","c":"Netherlands","y":52.0436,"x":5.6667},{"n":"Aracati","c":"Brazil","y":-4.5619,"x":-37.77},{"n":"Argao","c":"Philippines","y":9.8833,"x":123.6},{"n":"Sotik","c":"Kenya","y":-0.6796,"x":35.12},{"n":"Southfield","c":"United States","y":42.4765,"x":-83.2605},{"n":"Yafran","c":"Libya","y":32.0628,"x":12.5267},{"n":"Ellicott City","c":"United States","y":39.2773,"x":-76.8344},{"n":"Paterna","c":"Spain","y":39.5028,"x":-0.4406},{"n":"Dale City","c":"United States","y":38.6473,"x":-77.3459},{"n":"Maple Grove","c":"United States","y":45.1089,"x":-93.4626},{"n":"Penafiel","c":"Portugal","y":41.2,"x":-8.2833},{"n":"Pittsburg","c":"United States","y":38.0182,"x":-121.8964},{"n":"Concepcion del Uruguay","c":"Argentina","y":-32.4833,"x":-58.2333},{"n":"Belo Jardim","c":"Brazil","y":-8.3358,"x":-36.4239},{"n":"Morgantown","c":"United States","y":39.638,"x":-79.9468},{"n":"Brandenburg","c":"Germany","y":52.4117,"x":12.5561},{"n":"Dothan","c":"United States","y":31.2335,"x":-85.4069},{"n":"Harrisonburg","c":"United States","y":38.4361,"x":-78.8735},{"n":"Wenatchee","c":"United States","y":47.4356,"x":-120.3283},{"n":"Goya","c":"Argentina","y":-29.1333,"x":-59.25},{"n":"Waukesha","c":"United States","y":43.0087,"x":-88.2464},{"n":"Rio do Sul","c":"Brazil","y":-27.2139,"x":-49.6428},{"n":"Benidorm","c":"Spain","y":38.5342,"x":-0.1314},{"n":"Tagaytay","c":"Philippines","y":14.1,"x":120.9333},{"n":"Bongabong","c":"Philippines","y":12.7167,"x":121.3667},{"n":"Ishioka","c":"Japan","y":36.1833,"x":140.2833},{"n":"Casa Nova","c":"Brazil","y":-9.1619,"x":-40.9708},{"n":"Colon","c":"Cuba","y":22.7225,"x":-80.9067},{"n":"Tibati","c":"Cameroon","y":6.4669,"x":12.6158},{"n":"Alicia","c":"Philippines","y":16.7787,"x":121.6972},{"n":"Coffs Harbour","c":"Australia","y":-30.3022,"x":153.1189},{"n":"Santa Isabel do Para","c":"Brazil","y":-1.2989,"x":-48.1608},{"n":"Redmond","c":"United States","y":47.6762,"x":-122.1169},{"n":"Kawm Umbu","c":"Egypt","y":24.4667,"x":32.95},{"n":"Bouafle","c":"Côte D’Ivoire","y":6.9903,"x":-5.7442},{"n":"Talakag","c":"Philippines","y":8.2336,"x":124.6003},{"n":"Florida","c":"Cuba","y":21.5294,"x":-78.2228},{"n":"Izmail","c":"Ukraine","y":45.35,"x":28.8333},{"n":"Bocholt","c":"Germany","y":51.8333,"x":6.6167},{"n":"Carpi","c":"Italy","y":44.7833,"x":10.885},{"n":"Aschaffenburg","c":"Germany","y":49.9757,"x":9.1478},{"n":"Lisburn","c":"United Kingdom","y":54.5167,"x":-6.0333},{"n":"Quartu Sant'Elena","c":"Italy","y":39.2291,"x":9.2649},{"n":"Sarnia","c":"Canada","y":42.9994,"x":-82.3089},{"n":"Keighley","c":"United Kingdom","y":53.867,"x":-1.911},{"n":"Wood Buffalo","c":"Canada","y":57.6042,"x":-111.3284},{"n":"Merignac","c":"France","y":44.8386,"x":-0.6436},{"n":"Sumter","c":"United States","y":33.9392,"x":-80.393},{"n":"Redlands","c":"United States","y":34.0511,"x":-117.1712},{"n":"Bapatla","c":"India","y":15.8889,"x":80.47},{"n":"Saint-Nazaire","c":"France","y":47.2806,"x":-2.2086},{"n":"Daphne","c":"United States","y":30.6286,"x":-87.8866},{"n":"Markapur","c":"India","y":15.735,"x":79.27},{"n":"Villa Tunari","c":"Bolivia","y":-16.9725,"x":-65.42},{"n":"Shujaabad","c":"Pakistan","y":29.8803,"x":71.295},{"n":"Catanauan","c":"Philippines","y":13.5917,"x":122.325},{"n":"Malaut","c":"India","y":30.19,"x":74.499},{"n":"Verkhnyaya Pyshma","c":"Russia","y":56.9667,"x":60.5833},{"n":"Placetas","c":"Cuba","y":22.3158,"x":-79.6556},{"n":"Gibara","c":"Cuba","y":21.1072,"x":-76.1367},{"n":"Yinying","c":"China","y":37.941,"x":113.5602},{"n":"Cabudare","c":"Venezuela","y":10.0331,"x":-69.2633},{"n":"Entebbe","c":"Uganda","y":0.05,"x":32.46},{"n":"Baiquan","c":"China","y":47.6018,"x":126.0819},{"n":"Weston","c":"United States","y":26.1006,"x":-80.4054},{"n":"Bundaberg","c":"Australia","y":-24.85,"x":152.35},{"n":"Corozal","c":"Colombia","y":9.3169,"x":-75.2933},{"n":"Indaial","c":"Brazil","y":-26.8978,"x":-49.2319},{"n":"St. Charles","c":"United States","y":38.7954,"x":-90.5157},{"n":"Djemmal","c":"Tunisia","y":35.64,"x":10.76},{"n":"Pan'an","c":"China","y":34.7575,"x":105.1135},{"n":"Gaspar","c":"Brazil","y":-26.9308,"x":-48.9589},{"n":"Cherry Hill","c":"United States","y":39.9034,"x":-74.9947},{"n":"Ritto","c":"Japan","y":35.0217,"x":135.9981},{"n":"Badvel","c":"India","y":14.75,"x":79.05},{"n":"Hujra Shah Muqim","c":"Pakistan","y":30.7408,"x":73.8219},{"n":"Chateauguay","c":"Canada","y":45.38,"x":-73.75},{"n":"Novomoskovsk","c":"Ukraine","y":48.6328,"x":35.2239},{"n":"Kladno","c":"Czechia","y":50.1431,"x":14.1053},{"n":"Zenica","c":"Bosnia And Herzegovina","y":44.2039,"x":17.9078},{"n":"Janesville","c":"United States","y":42.6855,"x":-89.0136},{"n":"Kabirwala","c":"Pakistan","y":30.4068,"x":71.8667},{"n":"Manaoag","c":"Philippines","y":16.0439,"x":120.4856},{"n":"Loule","c":"Portugal","y":37.144,"x":-8.0235},{"n":"Sherman","c":"United States","y":33.6274,"x":-96.6218},{"n":"Altamura","c":"Italy","y":40.8167,"x":16.55},{"n":"North Richland Hills","c":"United States","y":32.8605,"x":-97.218},{"n":"Chekhov","c":"Russia","y":55.1481,"x":37.4769},{"n":"Campo Bom","c":"Brazil","y":-29.6789,"x":-51.0528},{"n":"Reconquista","c":"Argentina","y":-29.1443,"x":-59.6438},{"n":"Bur Fu'ad","c":"Egypt","y":31.2314,"x":32.3253},{"n":"Sao Sebastiao do Paraiso","c":"Brazil","y":-20.9169,"x":-46.9908},{"n":"Kovel","c":"Ukraine","y":51.2167,"x":24.7167},{"n":"Broomfield","c":"United States","y":39.9541,"x":-105.0527},{"n":"Guzhou","c":"China","y":25.9452,"x":108.5238},{"n":"Zhanggu","c":"China","y":30.9504,"x":101.9167},{"n":"Tupi","c":"Philippines","y":6.3333,"x":124.95},{"n":"Imola","c":"Italy","y":44.3531,"x":11.7147},{"n":"Smila","c":"Ukraine","y":49.2167,"x":31.8667},{"n":"Sipalay","c":"Philippines","y":9.75,"x":122.4},{"n":"El Paso de Robles","c":"United States","y":35.6394,"x":-120.656},{"n":"Bristol","c":"United States","y":36.5572,"x":-82.2154},{"n":"Rosetta","c":"Egypt","y":31.4014,"x":30.4194},{"n":"Casas Adobes","c":"United States","y":32.3423,"x":-111.0114},{"n":"Walnut Creek","c":"United States","y":37.9024,"x":-122.0398},{"n":"Hato Mayor","c":"Dominican Republic","y":18.767,"x":-69.267},{"n":"Villa del Rosario","c":"Colombia","y":7.8353,"x":-72.4736},{"n":"Sosua","c":"Dominican Republic","y":19.7494,"x":-70.5172},{"n":"Colmar","c":"France","y":48.0817,"x":7.3556},{"n":"Phu Quoc","c":"Vietnam","y":10.2289,"x":103.9572},{"n":"Baras","c":"Philippines","y":14.5167,"x":121.2667},{"n":"Qo`ng`irot Shahri","c":"Uzbekistan","y":43.0758,"x":58.9067},{"n":"Az Zubaydiyah","c":"Iraq","y":32.7588,"x":45.1773},{"n":"Oshnaviyeh","c":"Iran","y":37.0397,"x":45.0983},{"n":"Jorhat","c":"India","y":26.75,"x":94.2167},{"n":"Pozorrubio","c":"Philippines","y":16.1167,"x":120.55},{"n":"Saldanha","c":"South Africa","y":-32.9978,"x":17.9456},{"n":"Fanzhuang","c":"China","y":37.7771,"x":114.962},{"n":"Shangchuankou","c":"China","y":36.3283,"x":102.8031},{"n":"Celle","c":"Germany","y":52.6256,"x":10.0825},{"n":"Kempten","c":"Germany","y":47.7333,"x":10.3167},{"n":"Isna","c":"Egypt","y":25.2933,"x":32.5564},{"n":"Qingquan","c":"China","y":38.7823,"x":101.0826},{"n":"Jarabacoa","c":"Dominican Republic","y":19.1197,"x":-70.6383},{"n":"Hasselt","c":"Belgium","y":50.9304,"x":5.3383},{"n":"Poinciana","c":"United States","y":28.1217,"x":-81.482},{"n":"Garzon","c":"Colombia","y":2.1961,"x":-75.6292},{"n":"Russas","c":"Brazil","y":-4.94,"x":-37.9758},{"n":"Glen Burnie","c":"United States","y":39.1559,"x":-76.6072},{"n":"Bula","c":"Philippines","y":13.4667,"x":123.2833},{"n":"San Juan de los Lagos","c":"Mexico","y":21.2458,"x":-102.3308},{"n":"Solok","c":"Indonesia","y":-0.7883,"x":100.6542},{"n":"Uwajima","c":"Japan","y":33.2233,"x":132.5606},{"n":"Massa","c":"Italy","y":44.0333,"x":10.1333},{"n":"Mansehra","c":"Pakistan","y":34.3333,"x":73.2},{"n":"Suwalki","c":"Poland","y":54.0833,"x":22.9333},{"n":"Bamban","c":"Philippines","y":15.65,"x":120.25},{"n":"Villanueva y Geltru","c":"Spain","y":41.2243,"x":1.7259},{"n":"Lehi","c":"United States","y":40.4136,"x":-111.8726},{"n":"Yitiaoshan","c":"China","y":37.1889,"x":104.0571},{"n":"Estancia","c":"Brazil","y":-11.2678,"x":-37.4378},{"n":"Dumangas","c":"Philippines","y":10.8333,"x":122.7167},{"n":"Paragominas","c":"Brazil","y":-2.9667,"x":-47.4833},{"n":"Sanlucar de Barrameda","c":"Spain","y":36.7667,"x":-6.35},{"n":"Gniezno","c":"Poland","y":52.5333,"x":17.6},{"n":"Saint-Jerome","c":"Canada","y":45.7833,"x":-74},{"n":"Bom Jesus da Lapa","c":"Brazil","y":-13.255,"x":-43.4178},{"n":"Homestead","c":"United States","y":25.4665,"x":-80.4472},{"n":"West Bend","c":"United States","y":43.4184,"x":-88.1824},{"n":"Escada","c":"Brazil","y":-8.3592,"x":-35.2236},{"n":"Bacacay","c":"Philippines","y":13.2925,"x":123.7917},{"n":"Delray Beach","c":"United States","y":26.455,"x":-80.0905},{"n":"Ongjang","c":"Korea, North","y":37.9371,"x":125.3571},{"n":"Sheboygan","c":"United States","y":43.7403,"x":-87.7316},{"n":"Chisec","c":"Guatemala","y":15.8125,"x":-90.3217},{"n":"Aqsu","c":"Kazakhstan","y":52.0333,"x":76.9167},{"n":"Planeta Rica","c":"Colombia","y":8.4089,"x":-75.5819},{"n":"Nova Kakhovka","c":"Ukraine","y":46.7667,"x":33.3667},{"n":"Korba","c":"Tunisia","y":36.5667,"x":10.8667},{"n":"Bafia","c":"Cameroon","y":4.7425,"x":11.2247},{"n":"Ko Samui","c":"Thailand","y":9.5157,"x":99.9436},{"n":"Lake Elsinore","c":"United States","y":33.6847,"x":-117.3344},{"n":"Infanta","c":"Philippines","y":14.7425,"x":121.6494},{"n":"Liuhe","c":"China","y":42.2669,"x":125.7404},{"n":"Fulda","c":"Germany","y":50.5528,"x":9.6775},{"n":"Kamsar","c":"Guinea","y":10.65,"x":-14.6167},{"n":"Huishi","c":"China","y":35.6918,"x":105.0531},{"n":"Daytona Beach","c":"United States","y":29.1994,"x":-81.0982},{"n":"Necocli","c":"Colombia","y":8.4258,"x":-76.7839},{"n":"Yanghe","c":"China","y":38.2727,"x":106.2496},{"n":"Minusinsk","c":"Russia","y":53.7,"x":91.6833},{"n":"Mocuba","c":"Mozambique","y":-16.8391,"x":36.9855},{"n":"Ararangua","c":"Brazil","y":-28.935,"x":-49.4858},{"n":"Cosenza","c":"Italy","y":39.3,"x":16.25},{"n":"Purisima de Bustos","c":"Mexico","y":21.0333,"x":-101.8667},{"n":"Los Lunas","c":"United States","y":34.8115,"x":-106.7803},{"n":"Sosnovyy Bor","c":"Russia","y":59.9,"x":29.1},{"n":"Dinslaken","c":"Germany","y":51.5667,"x":6.7333},{"n":"Chulucanas","c":"Peru","y":-5.1092,"x":-80.1625},{"n":"Aalen","c":"Germany","y":48.8372,"x":10.0936},{"n":"Say'un","c":"Yemen","y":15.943,"x":48.7873},{"n":"Sousa","c":"Brazil","y":-6.7608,"x":-38.2308},{"n":"Al Ahmadi","c":"Kuwait","y":29.0769,"x":48.0838},{"n":"Glogow","c":"Poland","y":51.6589,"x":16.0803},{"n":"Wum","c":"Cameroon","y":6.3833,"x":10.0667},{"n":"Lima","c":"United States","y":40.741,"x":-84.1121},{"n":"Mococa","c":"Brazil","y":-21.4678,"x":-47.0047},{"n":"Rocklin","c":"United States","y":38.8075,"x":-121.2488},{"n":"Carles","c":"Philippines","y":11.5667,"x":123.1333},{"n":"Kati","c":"Mali","y":12.7504,"x":-8.08},{"n":"Limay","c":"Philippines","y":14.5619,"x":120.5983},{"n":"Rogers","c":"United States","y":36.3172,"x":-94.1526},{"n":"Zapotlanejo","c":"Mexico","y":20.6228,"x":-103.0689},{"n":"Doboj","c":"Bosnia And Herzegovina","y":44.7333,"x":18.1333},{"n":"Hihya","c":"Egypt","y":30.6687,"x":31.5904},{"n":"Drummondville","c":"Canada","y":45.8833,"x":-72.4833},{"n":"Stafford","c":"United Kingdom","y":52.8066,"x":-2.1171},{"n":"Lippstadt","c":"Germany","y":51.6667,"x":8.35},{"n":"Castle Rock","c":"United States","y":39.3763,"x":-104.8535},{"n":"Otukpo","c":"Nigeria","y":7.1904,"x":8.13},{"n":"Matruh","c":"Egypt","y":31.3333,"x":27.2333},{"n":"Ash Shihr","c":"Yemen","y":14.7608,"x":49.6069},{"n":"Chengjiao Chengguanzhen","c":"China","y":34.4362,"x":104.0306},{"n":"Tuymazy","c":"Russia","y":54.6,"x":53.7},{"n":"Turkmenbasy","c":"Turkmenistan","y":40.023,"x":52.9697},{"n":"Lodja","c":"Congo (Kinshasa)","y":-3.49,"x":23.42},{"n":"Fernandopolis","c":"Brazil","y":-20.2839,"x":-50.2458},{"n":"Lala Musa","c":"Pakistan","y":32.7006,"x":73.9558},{"n":"Oas","c":"Philippines","y":13.2589,"x":123.4953},{"n":"Lala","c":"Philippines","y":7.9667,"x":123.75},{"n":"Conceicao do Coite","c":"Brazil","y":-11.5639,"x":-39.2828},{"n":"Xinhua","c":"China","y":23.6272,"x":105.62},{"n":"Hanover","c":"United States","y":39.8117,"x":-76.9835},{"n":"Bossier City","c":"United States","y":32.5227,"x":-93.6666},{"n":"Dubuque","c":"United States","y":42.5008,"x":-90.7067},{"n":"Przemysl","c":"Poland","y":49.7835,"x":22.7842},{"n":"Rockville","c":"United States","y":39.0834,"x":-77.1552},{"n":"Victoria","c":"United States","y":28.8285,"x":-96.985},{"n":"Siasi","c":"Philippines","y":5.5462,"x":120.8145},{"n":"Saratoga Springs","c":"United States","y":43.0674,"x":-73.7775},{"n":"Wanzhuang","c":"China","y":39.5683,"x":116.5941},{"n":"Erd","c":"Hungary","y":47.3833,"x":18.9167},{"n":"Miagao","c":"Philippines","y":10.6442,"x":122.2352},{"n":"Kstovo","c":"Russia","y":56.1517,"x":44.1956},{"n":"Viterbo","c":"Italy","y":42.4186,"x":12.1042},{"n":"Orani","c":"Philippines","y":14.8,"x":120.5333},{"n":"Dalaguete","c":"Philippines","y":9.7612,"x":123.5349},{"n":"Trapani","c":"Italy","y":38.0175,"x":12.515},{"n":"Tepotzotlan","c":"Mexico","y":19.7161,"x":-99.2236},{"n":"Tzaneen","c":"South Africa","y":-23.8333,"x":30.1667},{"n":"Ames","c":"United States","y":42.0259,"x":-93.6215},{"n":"Zanhuang","c":"China","y":37.659,"x":114.3775},{"n":"West Des Moines","c":"United States","y":41.5522,"x":-93.7805},{"n":"Comonfort","c":"Mexico","y":20.7167,"x":-100.7667},{"n":"Tumauini","c":"Philippines","y":17.2667,"x":121.8},{"n":"Ban Suan","c":"Thailand","y":13.3616,"x":100.9795},{"n":"Tinambac","c":"Philippines","y":13.8167,"x":123.3333},{"n":"Islahiye","c":"Turkey","y":37.0264,"x":36.6322},{"n":"Embu-Guacu","c":"Brazil","y":-23.8322,"x":-46.8114},{"n":"Bugallon","c":"Philippines","y":15.9167,"x":120.1833},{"n":"Sagunto","c":"Spain","y":39.6764,"x":-0.2733},{"n":"Yuquan","c":"China","y":40.4202,"x":114.0865},{"n":"Yorba Linda","c":"United States","y":33.889,"x":-117.7714},{"n":"Kashima","c":"Japan","y":35.9658,"x":140.645},{"n":"Santa Catarina Otzolotepec","c":"Mexico","y":18.5667,"x":-97.25},{"n":"Bergen op Zoom","c":"Netherlands","y":51.5,"x":4.3},{"n":"Binalbagan","c":"Philippines","y":10.2,"x":122.8667},{"n":"Manaure","c":"Colombia","y":11.775,"x":-72.4444},{"n":"Casper","c":"United States","y":42.842,"x":-106.3207},{"n":"Saint John","c":"Canada","y":45.2806,"x":-66.0761},{"n":"Lushar","c":"China","y":36.4971,"x":101.564},{"n":"Hashima","c":"Japan","y":35.3167,"x":136.7},{"n":"Soio","c":"Angola","y":-6.1333,"x":12.3667},{"n":"Balingasag","c":"Philippines","y":8.75,"x":124.7833},{"n":"Palatine","c":"United States","y":42.1181,"x":-88.043},{"n":"Corvallis","c":"United States","y":44.5697,"x":-123.278},{"n":"Herford","c":"Germany","y":52.1146,"x":8.6734},{"n":"Talibon","c":"Philippines","y":10.1167,"x":124.2833},{"n":"Camalig","c":"Philippines","y":13.15,"x":123.6},{"n":"Oktyabrskiy","c":"Russia","y":52.6636,"x":156.2387},{"n":"Ankeny","c":"United States","y":41.7285,"x":-93.6033},{"n":"Koratla","c":"India","y":18.82,"x":78.72},{"n":"Sa'ada","c":"Morocco","y":31.6258,"x":-8.1028},{"n":"San Pedro Sacatepequez","c":"Guatemala","y":14.9664,"x":-91.7775},{"n":"Rowlett","c":"United States","y":32.9157,"x":-96.5488},{"n":"Kissidougou","c":"Guinea","y":9.1905,"x":-10.12},{"n":"Guangping","c":"China","y":36.4791,"x":114.941},{"n":"Lakeville","c":"United States","y":44.6774,"x":-93.252},{"n":"Yachimata","c":"Japan","y":35.6658,"x":140.3183},{"n":"Caico","c":"Brazil","y":-6.4578,"x":-37.0978},{"n":"Tejen","c":"Turkmenistan","y":37.3786,"x":60.496},{"n":"Pelileo","c":"Ecuador","y":-1.3306,"x":-78.5428},{"n":"Don Carlos","c":"Philippines","y":7.6833,"x":125},{"n":"Cosmopolis","c":"Brazil","y":-22.6458,"x":-47.1961},{"n":"Moita","c":"Portugal","y":38.65,"x":-8.9833},{"n":"Alpharetta","c":"United States","y":34.0704,"x":-84.2739},{"n":"Rio Negro","c":"Brazil","y":-26.1,"x":-49.79},{"n":"Bagumbayan","c":"Philippines","y":6.5339,"x":124.5633},{"n":"Aflao","c":"Ghana","y":6.1188,"x":1.1946},{"n":"Vidnoye","c":"Russia","y":55.55,"x":37.7},{"n":"Guines","c":"Cuba","y":22.8475,"x":-82.0236},{"n":"Pigcawayan","c":"Philippines","y":7.2833,"x":124.4333},{"n":"DeKalb","c":"United States","y":41.9313,"x":-88.7482},{"n":"Pabianice","c":"Poland","y":51.6642,"x":19.35},{"n":"Petaluma","c":"United States","y":38.2423,"x":-122.6267},{"n":"Pulivendla","c":"India","y":14.4167,"x":78.2333},{"n":"Kerpen","c":"Germany","y":50.8719,"x":6.6961},{"n":"Hit","c":"Iraq","y":33.6417,"x":42.825},{"n":"San Pascual","c":"Philippines","y":13.8,"x":121.0333},{"n":"Las Heras","c":"Argentina","y":-32.825,"x":-68.8017},{"n":"Belogorsk","c":"Russia","y":50.9167,"x":128.4833},{"n":"Saiki","c":"Japan","y":32.9603,"x":131.8994},{"n":"Huinan","c":"China","y":42.6229,"x":126.2614},{"n":"Russelsheim","c":"Germany","y":49.995,"x":8.4119},{"n":"Pinamungahan","c":"Philippines","y":10.2667,"x":123.5833},{"n":"Ishim","c":"Russia","y":56.1167,"x":69.5},{"n":"Caledon","c":"Canada","y":43.8667,"x":-79.8667},{"n":"Gukovo","c":"Russia","y":48.05,"x":39.9333},{"n":"Indang","c":"Philippines","y":14.2,"x":120.8833},{"n":"P'yongsan","c":"Korea, North","y":38.3367,"x":126.3866},{"n":"Urla","c":"Turkey","y":38.3222,"x":26.7647},{"n":"Brookes Point","c":"Philippines","y":8.7833,"x":117.8333},{"n":"Kalush","c":"Ukraine","y":49.0442,"x":24.3597},{"n":"Stupino","c":"Russia","y":54.8869,"x":38.0772},{"n":"Huquan","c":"China","y":39.7603,"x":114.2834},{"n":"Laguna Niguel","c":"United States","y":33.5275,"x":-117.705},{"n":"Eagan","c":"United States","y":44.8169,"x":-93.1638},{"n":"Ferrol","c":"Spain","y":43.4844,"x":-8.2328},{"n":"Slavyansk-na-Kubani","c":"Russia","y":45.2586,"x":38.1247},{"n":"Ilo","c":"Peru","y":-17.6486,"x":-71.3306},{"n":"Kenner","c":"United States","y":30.0109,"x":-90.2549},{"n":"Itaberaba","c":"Brazil","y":-12.5278,"x":-40.3069},{"n":"Esperanza","c":"Philippines","y":6.7167,"x":124.5167},{"n":"Hermosa","c":"Philippines","y":14.8333,"x":120.5},{"n":"Kungur","c":"Russia","y":57.4333,"x":56.9333},{"n":"Lencois Paulista","c":"Brazil","y":-22.5986,"x":-48.8003},{"n":"Sodo","c":"Ethiopia","y":6.9,"x":37.75},{"n":"Obera","c":"Argentina","y":-27.4833,"x":-55.1333},{"n":"Uniao dos Palmares","c":"Brazil","y":-9.1628,"x":-36.0319},{"n":"Sindelfingen","c":"Germany","y":48.7133,"x":9.0028},{"n":"Bay City","c":"United States","y":43.5903,"x":-83.8886},{"n":"Most","c":"Czechia","y":50.5031,"x":13.6367},{"n":"Seraing","c":"Belgium","y":50.5986,"x":5.5122},{"n":"Venancio Aires","c":"Brazil","y":-29.6058,"x":-52.1919},{"n":"San Francisco El Alto","c":"Guatemala","y":14.95,"x":-91.45},{"n":"Xibang","c":"China","y":30.9412,"x":120.8872},{"n":"Lahat","c":"Indonesia","y":-3.8,"x":103.5333},{"n":"Armur","c":"India","y":18.79,"x":78.29},{"n":"Menzel Temime","c":"Tunisia","y":36.7833,"x":10.9833},{"n":"North Little Rock","c":"United States","y":34.7808,"x":-92.2371},{"n":"Sammamish","c":"United States","y":47.6017,"x":-122.0416},{"n":"Martil","c":"Morocco","y":35.61,"x":-5.27},{"n":"Santo Tome","c":"Argentina","y":-31.6667,"x":-60.7667},{"n":"Aparri","c":"Philippines","y":18.355,"x":121.6419},{"n":"Montenegro","c":"Brazil","y":-29.6889,"x":-51.4608},{"n":"Weimar","c":"Germany","y":50.9833,"x":11.3167},{"n":"Lupon","c":"Philippines","y":6.8981,"x":126.0096},{"n":"Shawnee","c":"United States","y":39.0158,"x":-94.8076},{"n":"Jupiter","c":"United States","y":26.9199,"x":-80.1128},{"n":"Old Bridge","c":"United States","y":40.4004,"x":-74.3126},{"n":"Ina","c":"Japan","y":35.8275,"x":137.9539},{"n":"Tupa","c":"Brazil","y":-21.935,"x":-50.5139},{"n":"Doral","c":"United States","y":25.8151,"x":-80.3565},{"n":"Pililla","c":"Philippines","y":14.4833,"x":121.3},{"n":"San Leonardo","c":"Philippines","y":15.3667,"x":120.9667},{"n":"Zarechnyy","c":"Russia","y":53.2,"x":45.1667},{"n":"Carbondale","c":"United States","y":37.7221,"x":-89.2238},{"n":"Daule","c":"Ecuador","y":-1.8667,"x":-79.9833},{"n":"Juventino Rosas","c":"Mexico","y":20.65,"x":-101},{"n":"Blaine","c":"United States","y":45.1696,"x":-93.2077},{"n":"Bordj Menaiel","c":"Algeria","y":36.7417,"x":3.7231},{"n":"St. Albert","c":"Canada","y":53.6303,"x":-113.6258},{"n":"Pavlovskiy Posad","c":"Russia","y":55.7833,"x":38.65},{"n":"Weirton","c":"United States","y":40.406,"x":-80.5671},{"n":"Plauen","c":"Germany","y":50.495,"x":12.1383},{"n":"Castillejos","c":"Philippines","y":14.9333,"x":120.2},{"n":"Tulare","c":"United States","y":36.1996,"x":-119.34},{"n":"Leszno","c":"Poland","y":51.8403,"x":16.5749},{"n":"Bourges","c":"France","y":47.0844,"x":2.3964},{"n":"Ico","c":"Brazil","y":-6.4008,"x":-38.8619},{"n":"Beloretsk","c":"Russia","y":53.9667,"x":58.4},{"n":"Jaisalmer","c":"India","y":26.9167,"x":70.9167},{"n":"Valence","c":"France","y":44.9333,"x":4.8917},{"n":"Boras","c":"Sweden","y":57.7304,"x":12.92},{"n":"Pessac","c":"France","y":44.8067,"x":-0.6311},{"n":"Ishimbay","c":"Russia","y":53.45,"x":56.0333},{"n":"Roxas","c":"Philippines","y":10.3333,"x":119.3333},{"n":"Korosten","c":"Ukraine","y":50.95,"x":28.65},{"n":"Wellington","c":"United States","y":26.6461,"x":-80.2699},{"n":"Pflugerville","c":"United States","y":30.452,"x":-97.6022},{"n":"Birnin Konni","c":"Niger","y":13.7904,"x":5.2599},{"n":"Palo Alto","c":"United States","y":37.3913,"x":-122.1468},{"n":"Cuyapo","c":"Philippines","y":15.7833,"x":120.6667},{"n":"Neuwied","c":"Germany","y":50.4286,"x":7.4614},{"n":"Zeist","c":"Netherlands","y":52.0833,"x":5.2333},{"n":"Torquay","c":"United Kingdom","y":50.47,"x":-3.53},{"n":"Bhairahawa","c":"Nepal","y":27.5,"x":83.45},{"n":"Halabjah","c":"Iraq","y":35.1833,"x":45.9833},{"n":"Chunian","c":"Pakistan","y":30.9639,"x":73.9803},{"n":"Mecheria","c":"Algeria","y":33.55,"x":-0.2833},{"n":"Marinilla","c":"Colombia","y":6.1744,"x":-75.3389},{"n":"Great Falls","c":"United States","y":47.5022,"x":-111.2995},{"n":"Esquipulas","c":"Guatemala","y":14.6167,"x":-89.2},{"n":"Sipocot","c":"Philippines","y":13.7667,"x":122.9833},{"n":"Dormagen","c":"Germany","y":51.0964,"x":6.84},{"n":"Caripito","c":"Venezuela","y":10.111,"x":-63.1048},{"n":"Michigan City","c":"United States","y":41.7099,"x":-86.8705},{"n":"Pokrovsk","c":"Ukraine","y":48.2833,"x":37.1833},{"n":"Santa Catarina Pinula","c":"Guatemala","y":14.5644,"x":-90.488},{"n":"Svyetlahorsk","c":"Belarus","y":52.6333,"x":29.7333},{"n":"Rosenheim","c":"Germany","y":47.8561,"x":12.1289},{"n":"Bucak","c":"Turkey","y":37.4592,"x":30.595},{"n":"Hornchurch","c":"United Kingdom","y":51.5565,"x":0.2128},{"n":"Donskoy","c":"Russia","y":53.9667,"x":38.3167},{"n":"Tadepalle","c":"India","y":16.4667,"x":80.6},{"n":"La Carlota","c":"Philippines","y":10.4167,"x":122.9167},{"n":"Agoo","c":"Philippines","y":16.322,"x":120.3647},{"n":"Eden Prairie","c":"United States","y":44.8488,"x":-93.4595},{"n":"Port Orange","c":"United States","y":29.1084,"x":-81.0137},{"n":"Neubrandenburg","c":"Germany","y":53.5569,"x":13.2608},{"n":"Dublin","c":"United States","y":37.7161,"x":-121.8963},{"n":"Gadwal","c":"India","y":16.23,"x":77.8},{"n":"Rafha","c":"Saudi Arabia","y":29.6202,"x":43.4948},{"n":"Grand Forks","c":"United States","y":47.9218,"x":-97.0886},{"n":"Santo Domingo Tehuantepec","c":"Mexico","y":16.3184,"x":-95.2478},{"n":"Binga","c":"Congo (Kinshasa)","y":2.3834,"x":20.42},{"n":"Alamada","c":"Philippines","y":7.3868,"x":124.5534},{"n":"Noblesville","c":"United States","y":40.0354,"x":-86.0042},{"n":"Chokwe","c":"Mozambique","y":-24.5333,"x":32.9833},{"n":"Jatani","c":"India","y":20.17,"x":85.7},{"n":"Cruz das Almas","c":"Brazil","y":-12.67,"x":-39.1019},{"n":"Rahat","c":"Israel","y":31.3925,"x":34.7544},{"n":"Rizal","c":"Philippines","y":15.6833,"x":121.1667},{"n":"Apaseo el Alto","c":"Mexico","y":20.45,"x":-100.6167},{"n":"Qinggang","c":"China","y":46.69,"x":126.1},{"n":"La Paz","c":"Philippines","y":15.4431,"x":120.7289},{"n":"San Felipe","c":"Chile","y":-32.7507,"x":-70.7251},{"n":"Vittoria","c":"Italy","y":36.95,"x":14.5333},{"n":"San Clemente","c":"United States","y":33.4498,"x":-117.6103},{"n":"Santiago Tianguistenco","c":"Mexico","y":19.1797,"x":-99.4706},{"n":"Carmichael","c":"United States","y":38.6337,"x":-121.323},{"n":"Lingshou","c":"China","y":38.3063,"x":114.3879},{"n":"Bongabon","c":"Philippines","y":15.6321,"x":121.1448},{"n":"Ouricuri","c":"Brazil","y":-7.8828,"x":-40.0819},{"n":"Irun","c":"Spain","y":43.3378,"x":-1.7888},{"n":"Pomezia","c":"Italy","y":41.6693,"x":12.5021},{"n":"Sittingbourne","c":"United Kingdom","y":51.34,"x":0.74},{"n":"Cienaga de Oro","c":"Colombia","y":8.875,"x":-75.6211},{"n":"Ghardimaou","c":"Tunisia","y":36.4503,"x":8.4397},{"n":"Crotone","c":"Italy","y":39.0833,"x":17.1167},{"n":"Sandefjord","c":"Norway","y":59.1288,"x":10.2197},{"n":"Victoria","c":"Philippines","y":15.5781,"x":120.6819},{"n":"Bamei","c":"China","y":24.2634,"x":105.0809},{"n":"Janiuay","c":"Philippines","y":10.95,"x":122.5},{"n":"Zvornik","c":"Bosnia And Herzegovina","y":44.3833,"x":19.1},{"n":"Aliaga","c":"Philippines","y":15.4988,"x":120.841},{"n":"Grevenbroich","c":"Germany","y":51.0883,"x":6.5875},{"n":"Asbest","c":"Russia","y":57,"x":61.4667},{"n":"Povoa de Varzim","c":"Portugal","y":41.3916,"x":-8.7571},{"n":"Penedo","c":"Brazil","y":-10.29,"x":-36.5858},{"n":"Bandar-e Genaveh","c":"Iran","y":29.5833,"x":50.5167},{"n":"Eastvale","c":"United States","y":33.9617,"x":-117.5802},{"n":"Tuburan","c":"Philippines","y":10.7333,"x":123.8333},{"n":"Nawa","c":"Syria","y":32.8833,"x":36.05},{"n":"Kangbao","c":"China","y":41.8513,"x":114.6091},{"n":"Benevides","c":"Brazil","y":-1.3608,"x":-48.245},{"n":"At Tall","c":"Syria","y":33.6103,"x":36.3106},{"n":"Chapel Hill","c":"United States","y":35.927,"x":-79.0391},{"n":"Tome-Acu","c":"Brazil","y":-2.4189,"x":-48.1519},{"n":"Rosales","c":"Philippines","y":15.8944,"x":120.6328},{"n":"Rocky Mount","c":"United States","y":35.9676,"x":-77.8048},{"n":"Lugano","c":"Switzerland","y":46.0103,"x":8.9625},{"n":"Haverhill","c":"United States","y":42.7838,"x":-71.0871},{"n":"Asahi","c":"Japan","y":35.7203,"x":140.6467},{"n":"Mauban","c":"Philippines","y":14.1911,"x":121.7308},{"n":"Mahdasht","c":"Iran","y":35.7283,"x":50.8133},{"n":"San Jose de Bocay","c":"Nicaragua","y":13.5333,"x":-85.5333},{"n":"Gaya","c":"Niger","y":11.8878,"x":3.4467},{"n":"Vigevano","c":"Italy","y":45.3167,"x":8.8667},{"n":"Klintsy","c":"Russia","y":52.7528,"x":32.2361},{"n":"Nagcarlan","c":"Philippines","y":14.1364,"x":121.4165},{"n":"Woking","c":"United Kingdom","y":51.3162,"x":-0.561},{"n":"Zarand","c":"Iran","y":30.8128,"x":56.5639},{"n":"Kurihara","c":"Japan","y":38.7303,"x":141.0214},{"n":"Beloit","c":"United States","y":42.523,"x":-89.0184},{"n":"Hilongos","c":"Philippines","y":10.3667,"x":124.75},{"n":"Quimper","c":"France","y":47.9967,"x":-4.0964},{"n":"Nankana Sahib","c":"Pakistan","y":31.4492,"x":73.7124},{"n":"Velika Gorica","c":"Croatia","y":45.7,"x":16.0667},{"n":"Gloucester","c":"United States","y":39.7924,"x":-75.0363},{"n":"Guiglo","c":"Côte D’Ivoire","y":6.5436,"x":-7.4933},{"n":"Atimonan","c":"Philippines","y":14.0036,"x":121.9199},{"n":"Chincha Alta","c":"Peru","y":-13.45,"x":-76.1333},{"n":"Palmares","c":"Brazil","y":-8.6828,"x":-35.5919},{"n":"Goa","c":"Philippines","y":13.7,"x":123.5},{"n":"Bay","c":"Philippines","y":14.1833,"x":121.2833},{"n":"San Juan de Sabinas","c":"Mexico","y":27.9167,"x":-101.3},{"n":"Wenxicun","c":"China","y":28.1565,"x":120.3824},{"n":"Budennovsk","c":"Russia","y":44.7833,"x":44.15},{"n":"Glens Falls","c":"United States","y":43.3109,"x":-73.6459},{"n":"Graaff-Reinet","c":"South Africa","y":-32.2522,"x":24.5406},{"n":"Ain Sefra","c":"Algeria","y":32.75,"x":-0.5833},{"n":"Saravia","c":"Philippines","y":10.8833,"x":122.9667},{"n":"Tigbauan","c":"Philippines","y":10.6747,"x":122.3776},{"n":"Herten","c":"Germany","y":51.6,"x":7.1333},{"n":"Granby","c":"Canada","y":45.4,"x":-72.7333},{"n":"Carrara","c":"Italy","y":44.0833,"x":10.1},{"n":"Shiroi","c":"Japan","y":35.7917,"x":140.0564},{"n":"Tangub","c":"Philippines","y":8.0667,"x":123.75},{"n":"Nago","c":"Japan","y":26.5917,"x":127.9775},{"n":"Roeselare","c":"Belgium","y":50.9447,"x":3.1233},{"n":"Chelm","c":"Poland","y":51.1333,"x":23.4833},{"n":"Santo Antonio do Descoberto","c":"Brazil","y":-15.94,"x":-48.255},{"n":"Lutayan","c":"Philippines","y":6.6,"x":124.85},{"n":"Medicine Hat","c":"Canada","y":50.0417,"x":-110.6775},{"n":"Fairbanks","c":"United States","y":64.8353,"x":-147.6534},{"n":"Volsk","c":"Russia","y":52.05,"x":47.3833},{"n":"Bethesda","c":"United States","y":38.9866,"x":-77.1188},{"n":"Rhondda","c":"United Kingdom","y":51.6159,"x":-3.4175},{"n":"Novaya Balakhna","c":"Russia","y":56.4943,"x":43.5944},{"n":"Grande Prairie","c":"Canada","y":55.1708,"x":-118.7947},{"n":"Villasis","c":"Philippines","y":15.9,"x":120.5833},{"n":"Oudtshoorn","c":"South Africa","y":-33.5833,"x":22.2},{"n":"Johnstown","c":"United States","y":40.3258,"x":-78.9193},{"n":"Bannu","c":"Pakistan","y":32.9889,"x":70.6056},{"n":"Kapatagan","c":"Philippines","y":7.9,"x":123.7667},{"n":"Lomza","c":"Poland","y":53.1833,"x":22.0833},{"n":"Puerto Asis","c":"Colombia","y":0.5006,"x":-76.4989},{"n":"Igarape-Miri","c":"Brazil","y":-1.975,"x":-48.96},{"n":"West Hartford","c":"United States","y":41.7669,"x":-72.7536},{"n":"Caldiran","c":"Turkey","y":39.1419,"x":43.9139},{"n":"Balboa Heights","c":"Panama","y":8.95,"x":-79.5667},{"n":"Kasongo","c":"Congo (Kinshasa)","y":-4.45,"x":26.66},{"n":"Dundalk","c":"United States","y":39.2703,"x":-76.4942},{"n":"Castro Valley","c":"United States","y":37.7091,"x":-122.0631},{"n":"Coon Rapids","c":"United States","y":45.1755,"x":-93.3095},{"n":"Elmira","c":"United States","y":42.0938,"x":-76.8097},{"n":"Palmela","c":"Portugal","y":38.5667,"x":-8.9},{"n":"Portel","c":"Brazil","y":-1.9358,"x":-50.8208},{"n":"Yurimaguas","c":"Peru","y":-5.9,"x":-76.0833},{"n":"Deva","c":"Romania","y":45.8719,"x":22.9117},{"n":"Mankato","c":"United States","y":44.1712,"x":-93.9773},{"n":"Nkawkaw","c":"Ghana","y":6.5505,"x":-0.78},{"n":"Mut","c":"Turkey","y":36.6458,"x":33.4375},{"n":"Cruz Alta","c":"Brazil","y":-28.6386,"x":-53.6064},{"n":"Rossosh","c":"Russia","y":50.1983,"x":39.5672},{"n":"Palin","c":"Guatemala","y":14.4039,"x":-90.6986},{"n":"Camaqua","c":"Brazil","y":-30.8528,"x":-51.8153},{"n":"Kolomyia","c":"Ukraine","y":48.5167,"x":25.0333},{"n":"Cajica","c":"Colombia","y":4.9167,"x":-74.025},{"n":"Margate","c":"United Kingdom","y":51.385,"x":1.3838},{"n":"Revda","c":"Russia","y":56.8,"x":59.9167},{"n":"Borisoglebsk","c":"Russia","y":51.3667,"x":42.0833},{"n":"Kotlas","c":"Russia","y":61.25,"x":46.65},{"n":"Encinitas","c":"United States","y":33.049,"x":-117.2613},{"n":"Montelimar","c":"France","y":44.5581,"x":4.7508},{"n":"Runcorn","c":"United Kingdom","y":53.341,"x":-2.729},{"n":"Zelenogorsk","c":"Russia","y":56.1,"x":94.5833},{"n":"Leander","c":"United States","y":30.5728,"x":-97.8618},{"n":"Shangtangcun","c":"China","y":21.5989,"x":111.5907},{"n":"Mobarakeh","c":"Iran","y":32.3464,"x":51.5044},{"n":"Greenwich","c":"United States","y":41.0665,"x":-73.6368},{"n":"Leninogorsk","c":"Russia","y":54.5989,"x":52.4423},{"n":"Wels","c":"Austria","y":48.15,"x":14.0167},{"n":"Parkersburg","c":"United States","y":39.2624,"x":-81.542},{"n":"Kayes","c":"Congo (Brazzaville)","y":-4.1806,"x":13.2889},{"n":"Tendo","c":"Japan","y":38.3622,"x":140.3783},{"n":"Villa Carlos Paz","c":"Argentina","y":-31.4,"x":-64.5167},{"n":"Waltham","c":"United States","y":42.3889,"x":-71.2423},{"n":"Isabela","c":"Philippines","y":10.2,"x":122.9833},{"n":"Menzel Bourguiba","c":"Tunisia","y":37.15,"x":9.7833},{"n":"Patikul","c":"Philippines","y":6.0667,"x":121.1},{"n":"Caltanissetta","c":"Italy","y":37.4915,"x":14.0624},{"n":"Tanjungpandan","c":"Indonesia","y":-2.75,"x":107.65},{"n":"Tefe","c":"Brazil","y":-3.3539,"x":-64.7108},{"n":"Riosucio","c":"Colombia","y":5.4208,"x":-75.7028},{"n":"Tarnowskie Gory","c":"Poland","y":50.4455,"x":18.8615},{"n":"Morecambe","c":"United Kingdom","y":54.073,"x":-2.87},{"n":"Boryspil","c":"Ukraine","y":50.35,"x":30.95},{"n":"Port Charlotte","c":"United States","y":26.9918,"x":-82.114},{"n":"Tuapse","c":"Russia","y":44.1,"x":39.0833},{"n":"Xinzhai","c":"China","y":26.88,"x":107.9767},{"n":"Palm Harbor","c":"United States","y":28.0847,"x":-82.7481},{"n":"Ocoyoacac","c":"Mexico","y":19.2739,"x":-99.4606},{"n":"Dajabon","c":"Dominican Republic","y":19.5667,"x":-71.71},{"n":"San Luis Obispo","c":"United States","y":35.2669,"x":-120.6691},{"n":"Figueira da Foz","c":"Portugal","y":40.1508,"x":-8.8618},{"n":"Senahu","c":"Guatemala","y":15.4164,"x":-89.8203},{"n":"Nahuala","c":"Guatemala","y":14.8429,"x":-91.317},{"n":"Meihua","c":"China","y":37.8862,"x":114.8204},{"n":"Benevento","c":"Italy","y":41.1256,"x":14.7811},{"n":"Bergheim","c":"Germany","y":50.9667,"x":6.65},{"n":"Sebring","c":"United States","y":27.477,"x":-81.453},{"n":"Chistopol","c":"Russia","y":55.3648,"x":50.6407},{"n":"Panzos","c":"Guatemala","y":15.3986,"x":-89.6408},{"n":"Itoman","c":"Japan","y":26.1181,"x":127.6872},{"n":"Puerto Penasco","c":"Mexico","y":31.3167,"x":-113.5369},{"n":"Council Bluffs","c":"United States","y":41.2369,"x":-95.8517},{"n":"Sao Gabriel","c":"Brazil","y":-30.3358,"x":-54.32},{"n":"Penapolis","c":"Brazil","y":-21.42,"x":-50.0778},{"n":"Itapecuru Mirim","c":"Brazil","y":-3.3928,"x":-44.3589},{"n":"Ipira","c":"Brazil","y":-12.1578,"x":-39.7369},{"n":"Naro-Fominsk","c":"Russia","y":55.3833,"x":36.7333},{"n":"Asker","c":"Norway","y":59.8331,"x":10.4392},{"n":"Viareggio","c":"Italy","y":43.8672,"x":10.2506},{"n":"Ferkessedougou","c":"Côte D’Ivoire","y":9.5928,"x":-5.1944},{"n":"Moore","c":"United States","y":35.3293,"x":-97.4758},{"n":"Zaraza","c":"Venezuela","y":9.3394,"x":-65.3167},{"n":"San Francisco","c":"Argentina","y":-31.4356,"x":-62.0714},{"n":"Casa Grande","c":"United States","y":32.9068,"x":-111.7624},{"n":"Lantapan","c":"Philippines","y":8.0005,"x":125.0235},{"n":"Monessen","c":"United States","y":40.1519,"x":-79.8828},{"n":"San Antonio del Tachira","c":"Venezuela","y":7.8145,"x":-72.4431},{"n":"Mielec","c":"Poland","y":50.2833,"x":21.4333},{"n":"Polevskoy","c":"Russia","y":56.45,"x":60.1833},{"n":"Plato","c":"Colombia","y":9.7925,"x":-74.7825},{"n":"Satbayev","c":"Kazakhstan","y":47.9,"x":67.5333},{"n":"Piripiri","c":"Brazil","y":-4.2728,"x":-41.7769},{"n":"Sarandi","c":"Argentina","y":-34.6833,"x":-58.3333},{"n":"Derik","c":"Turkey","y":37.3644,"x":40.2689},{"n":"Heroica Caborca","c":"Mexico","y":30.7167,"x":-112.15},{"n":"Opol","c":"Philippines","y":8.5167,"x":124.5667},{"n":"Ar Rastan","c":"Syria","y":34.9167,"x":36.7333},{"n":"Aisai","c":"Japan","y":35.15,"x":136.7333},{"n":"Santo Amaro","c":"Brazil","y":-12.5469,"x":-38.7119},{"n":"Tuao","c":"Philippines","y":17.7333,"x":121.45},{"n":"Carepa","c":"Colombia","y":7.7581,"x":-76.6553},{"n":"Lysva","c":"Russia","y":58.1004,"x":57.8043},{"n":"Viseu","c":"Brazil","y":-1.1969,"x":-46.14},{"n":"Trikala","c":"Greece","y":39.555,"x":21.7683},{"n":"Coroata","c":"Brazil","y":-4.13,"x":-44.1239},{"n":"Buenavista","c":"Philippines","y":8.9744,"x":125.409},{"n":"Friedrichshafen","c":"Germany","y":47.6542,"x":9.4792},{"n":"Schwabisch Gmund","c":"Germany","y":48.8,"x":9.8},{"n":"Rubizhne","c":"Ukraine","y":49.0167,"x":38.3667},{"n":"St. Thomas","c":"Canada","y":42.775,"x":-81.1833},{"n":"Aurora","c":"Philippines","y":13.35,"x":122.5167},{"n":"Sibay","c":"Russia","y":52.7,"x":58.65},{"n":"Sawahlunto","c":"Indonesia","y":-0.6828,"x":100.7783},{"n":"Laoang","c":"Philippines","y":12.5667,"x":125.0167},{"n":"Airdrie","c":"Canada","y":51.2917,"x":-114.0144},{"n":"Wanparti","c":"India","y":16.361,"x":78.0627},{"n":"Guapimirim","c":"Brazil","y":-22.5369,"x":-42.9819},{"n":"Iztapa","c":"Guatemala","y":13.9331,"x":-90.7075},{"n":"Uzunkopru","c":"Turkey","y":41.2669,"x":26.6875},{"n":"Cajazeiras","c":"Brazil","y":-6.89,"x":-38.5619},{"n":"Rome","c":"United States","y":34.2661,"x":-85.1862},{"n":"Garbsen","c":"Germany","y":52.4183,"x":9.5981},{"n":"Fano","c":"Italy","y":43.8435,"x":13.0198},{"n":"Millcreek","c":"United States","y":40.6892,"x":-111.8291},{"n":"Sanford","c":"United States","y":28.7893,"x":-81.276},{"n":"Slutsk","c":"Belarus","y":53.0167,"x":27.55},{"n":"Zamora","c":"Spain","y":41.5033,"x":-5.7556},{"n":"Carazinho","c":"Brazil","y":-28.2839,"x":-52.7864},{"n":"Vacaria","c":"Brazil","y":-28.5119,"x":-50.9339},{"n":"Hurth","c":"Germany","y":50.8775,"x":6.8761},{"n":"Mayaguez","c":"Puerto Rico","y":18.2003,"x":-67.1397},{"n":"Burnsville","c":"United States","y":44.7648,"x":-93.2795},{"n":"Acarau","c":"Brazil","y":-2.8858,"x":-40.12},{"n":"Montauban","c":"France","y":44.0181,"x":1.3558},{"n":"Kiamba","c":"Philippines","y":5.9833,"x":124.6167},{"n":"Candon","c":"Philippines","y":17.2,"x":120.45},{"n":"Halton Hills","c":"Canada","y":43.63,"x":-79.95},{"n":"Reston","c":"United States","y":38.9497,"x":-77.3461},{"n":"Barra do Garcas","c":"Brazil","y":-15.89,"x":-52.2569},{"n":"Idiofa","c":"Congo (Kinshasa)","y":-4.9596,"x":19.5986},{"n":"Sonbong","c":"Korea, North","y":42.3377,"x":130.4027},{"n":"Skhirate","c":"Morocco","y":33.85,"x":-7.03},{"n":"Nahariyya","c":"Israel","y":33.0036,"x":35.0925},{"n":"Acerra","c":"Italy","y":40.95,"x":14.3667},{"n":"Bezerros","c":"Brazil","y":-8.2333,"x":-35.75},{"n":"Yongyang","c":"China","y":27.1017,"x":106.7332},{"n":"Hamden","c":"United States","y":41.3961,"x":-72.9215},{"n":"Spring","c":"United States","y":30.0613,"x":-95.383},{"n":"Stralsund","c":"Germany","y":54.3092,"x":13.0819},{"n":"Gadsden","c":"United States","y":34.009,"x":-86.0156},{"n":"Chalkida","c":"Greece","y":38.4625,"x":23.595},{"n":"Taylor","c":"United States","y":42.226,"x":-83.2688},{"n":"Novi","c":"United States","y":42.4786,"x":-83.4893},{"n":"Marietta","c":"United States","y":33.9533,"x":-84.5422},{"n":"Villamaria","c":"Colombia","y":5.0456,"x":-75.5153},{"n":"Montemorelos","c":"Mexico","y":25.1872,"x":-99.8267},{"n":"Wesel","c":"Germany","y":51.6586,"x":6.6178},{"n":"Tartagal","c":"Argentina","y":-22.5,"x":-63.8333},{"n":"Bansalan","c":"Philippines","y":6.7833,"x":125.2167},{"n":"Shihe","c":"China","y":39.2739,"x":113.5516},{"n":"Hot Springs","c":"United States","y":34.4892,"x":-93.0501},{"n":"Dongcun","c":"China","y":38.28,"x":111.6751},{"n":"Belchatow","c":"Poland","y":51.3667,"x":19.3667},{"n":"Druzhkivka","c":"Ukraine","y":48.6203,"x":37.5278},{"n":"Soasio","c":"Indonesia","y":0.6964,"x":127.436},{"n":"Batatais","c":"Brazil","y":-20.8911,"x":-47.585},{"n":"Autlan de Navarro","c":"Mexico","y":19.7667,"x":-104.3667},{"n":"Calinog","c":"Philippines","y":11.1333,"x":122.5},{"n":"Savona","c":"Italy","y":44.308,"x":8.481},{"n":"Sibalom","c":"Philippines","y":10.7833,"x":122.0167},{"n":"Woodland","c":"United States","y":38.6712,"x":-121.75},{"n":"Kavala","c":"Greece","y":40.935,"x":24.415},{"n":"Matera","c":"Italy","y":40.6667,"x":16.6},{"n":"Greifswald","c":"Germany","y":54.0833,"x":13.3833},{"n":"Kumertau","c":"Russia","y":52.7667,"x":55.7833},{"n":"Rzhev","c":"Russia","y":56.2656,"x":34.3276},{"n":"Molfetta","c":"Italy","y":41.2,"x":16.6},{"n":"Ponnuru","c":"India","y":16.0667,"x":80.5667},{"n":"Yongbei","c":"China","y":26.6897,"x":100.7463},{"n":"Belladere","c":"Haiti","y":18.85,"x":-71.7833},{"n":"San Vicente del Raspeig","c":"Spain","y":38.3964,"x":-0.5253},{"n":"Mossel Bay","c":"South Africa","y":-34.1833,"x":22.1333},{"n":"Bensalem","c":"United States","y":40.1086,"x":-74.9431},{"n":"Olbia","c":"Italy","y":40.9167,"x":9.5},{"n":"Xo`jayli Shahri","c":"Uzbekistan","y":42.4047,"x":59.4517},{"n":"Offenburg","c":"Germany","y":48.4708,"x":7.9408},{"n":"Sayanogorsk","c":"Russia","y":53.1,"x":91.4},{"n":"Bor","c":"Turkey","y":37.8833,"x":34.5667},{"n":"Lakhdaria","c":"Algeria","y":36.6167,"x":3.5833},{"n":"Langenfeld","c":"Germany","y":51.1167,"x":6.95},{"n":"Commerce City","c":"United States","y":39.8642,"x":-104.8434},{"n":"Obando","c":"Philippines","y":14.7,"x":120.9167},{"n":"Belebey","c":"Russia","y":54.1,"x":54.1333},{"n":"Manhica","c":"Mozambique","y":-25.4,"x":32.8},{"n":"Cristalina","c":"Brazil","y":-16.7689,"x":-47.6139},{"n":"Labinsk","c":"Russia","y":44.6333,"x":40.7333},{"n":"Shimotsuke","c":"Japan","y":36.3872,"x":139.8422},{"n":"Lianzhuang","c":"China","y":37.1146,"x":115.7594},{"n":"South Hill","c":"United States","y":47.1203,"x":-122.2848},{"n":"Urus-Martan","c":"Russia","y":43.1224,"x":45.5366},{"n":"Tecpan Guatemala","c":"Guatemala","y":14.7667,"x":-91},{"n":"Suifenhe","c":"China","y":44.3998,"x":131.1478},{"n":"Kapchagay","c":"Kazakhstan","y":43.8833,"x":77.0833},{"n":"Vinukonda","c":"India","y":16.05,"x":79.75},{"n":"San Marcos","c":"Colombia","y":8.6622,"x":-75.1289},{"n":"Angat","c":"Philippines","y":14.9281,"x":121.0293},{"n":"Frutal","c":"Brazil","y":-20.025,"x":-48.9408},{"n":"Lagoa Santa","c":"Brazil","y":-19.6269,"x":-43.89},{"n":"Kribi","c":"Cameroon","y":2.95,"x":9.9167},{"n":"Chajari","c":"Argentina","y":-30.7667,"x":-57.9833},{"n":"Maues","c":"Brazil","y":-3.3836,"x":-57.7186},{"n":"Gubat","c":"Philippines","y":12.9167,"x":124.1167},{"n":"Limoeiro do Norte","c":"Brazil","y":-5.1458,"x":-38.0978},{"n":"Girardota","c":"Colombia","y":6.3769,"x":-75.4461},{"n":"Itogon","c":"Philippines","y":16.3667,"x":120.6833},{"n":"Solano","c":"Philippines","y":16.5239,"x":121.1919},{"n":"Porirua","c":"New Zealand","y":-41.1333,"x":174.85},{"n":"Jose Panganiban","c":"Philippines","y":14.3,"x":122.7},{"n":"Asenovgrad","c":"Bulgaria","y":42.0082,"x":24.8773},{"n":"Hardenberg","c":"Netherlands","y":52.5758,"x":6.6194},{"n":"Shuya","c":"Russia","y":56.85,"x":41.3667},{"n":"Jacunda","c":"Brazil","y":-4.4508,"x":-49.1158},{"n":"Huajiang","c":"China","y":25.6814,"x":105.656},{"n":"Comitancillo","c":"Guatemala","y":15.0906,"x":-91.7486},{"n":"Sibulan","c":"Philippines","y":9.35,"x":123.2833},{"n":"Uriangato","c":"Mexico","y":20.1333,"x":-101.1667},{"n":"Alcoy","c":"Spain","y":38.6983,"x":-0.4736},{"n":"Huehuetoca","c":"Mexico","y":19.8342,"x":-99.2033},{"n":"Bangor","c":"United States","y":44.8322,"x":-68.7906},{"n":"Lesosibirsk","c":"Russia","y":58.2333,"x":92.4833},{"n":"Zhoujiajing","c":"China","y":31.1116,"x":121.0518},{"n":"Joso","c":"Japan","y":36.0167,"x":139.9833},{"n":"Sao Miguel do Guama","c":"Brazil","y":-1.6269,"x":-47.4828},{"n":"Tezpur","c":"India","y":26.6338,"x":92.8},{"n":"Morong","c":"Philippines","y":14.5119,"x":121.2389},{"n":"Abuyog","c":"Philippines","y":10.7458,"x":125.0122},{"n":"Saint-Hyacinthe","c":"Canada","y":45.6167,"x":-72.95},{"n":"Narasapur","c":"India","y":16.4333,"x":81.6833},{"n":"Pasrur","c":"Pakistan","y":32.2681,"x":74.6675},{"n":"Niort","c":"France","y":46.3258,"x":-0.4606},{"n":"Agrigento","c":"Italy","y":37.3111,"x":13.5765},{"n":"Nordre Fale","c":"Norway","y":59.75,"x":10.8667},{"n":"Chibuto","c":"Mozambique","y":-24.6867,"x":33.5306},{"n":"Prokhladnyy","c":"Russia","y":43.7575,"x":44.0297},{"n":"Cambanugoy","c":"Philippines","y":7.5386,"x":125.7508},{"n":"Yara","c":"Cuba","y":20.2767,"x":-76.9469},{"n":"Esfarayen","c":"Iran","y":37.0764,"x":57.51},{"n":"Sayaxche","c":"Guatemala","y":16.5167,"x":-90.1833},{"n":"Moron","c":"Cuba","y":22.1108,"x":-78.6278},{"n":"Greenwood","c":"United States","y":39.6019,"x":-86.1073},{"n":"Los Andes","c":"Chile","y":-32.8337,"x":-70.5982},{"n":"Lucas do Rio Verde","c":"Brazil","y":-13.05,"x":-55.9108},{"n":"Paracale","c":"Philippines","y":14.2833,"x":122.7833},{"n":"Hua Hin","c":"Thailand","y":12.5686,"x":99.9578},{"n":"Bartlett","c":"United States","y":35.2337,"x":-89.8195},{"n":"Bradenton","c":"United States","y":27.49,"x":-82.5739},{"n":"Pontiac","c":"United States","y":42.6493,"x":-83.2878},{"n":"Staunton","c":"United States","y":38.1593,"x":-79.0611},{"n":"Neu-Ulm","c":"Germany","y":48.3833,"x":10},{"n":"Gannan","c":"China","y":47.9117,"x":123.4978},{"n":"Baao","c":"Philippines","y":13.4535,"x":123.3654},{"n":"El Cua","c":"Nicaragua","y":13.3679,"x":-85.6728},{"n":"Concepcion Tutuapa","c":"Guatemala","y":15.2833,"x":-91.7833},{"n":"Meriden","c":"United States","y":41.5367,"x":-72.7944},{"n":"Aleksandrov","c":"Russia","y":56.3936,"x":38.715},{"n":"Cachoeiras de Macacu","c":"Brazil","y":-22.4628,"x":-42.6528},{"n":"Clay","c":"United States","y":43.1809,"x":-76.1955},{"n":"Tahara","c":"Japan","y":34.6414,"x":137.1831},{"n":"Zengcun","c":"China","y":38.246,"x":114.7394},{"n":"Apex","c":"United States","y":35.7239,"x":-78.8728},{"n":"Unna","c":"Germany","y":51.5347,"x":7.6889},{"n":"Royal Oak","c":"United States","y":42.5084,"x":-83.1539},{"n":"Benton Harbor","c":"United States","y":42.1159,"x":-86.4488},{"n":"Chichibu","c":"Japan","y":35.9917,"x":139.0856},{"n":"Tianningcun","c":"China","y":30.8938,"x":120.8009},{"n":"Santa Maria Chiquimula","c":"Guatemala","y":15.0292,"x":-91.3294},{"n":"Kattaqo'rg'on Shahri","c":"Uzbekistan","y":39.8958,"x":66.2656},{"n":"Pamplona","c":"Colombia","y":7.3761,"x":-72.6483},{"n":"Florida","c":"Colombia","y":3.3217,"x":-76.2347},{"n":"Constanza","c":"Dominican Republic","y":18.91,"x":-70.75},{"n":"Metapan","c":"El Salvador","y":14.3333,"x":-89.45},{"n":"Faenza","c":"Italy","y":44.2856,"x":11.8833},{"n":"Bilhorod-Dnistrovskyi","c":"Ukraine","y":46.1833,"x":30.3333},{"n":"Lower Merion","c":"United States","y":40.0282,"x":-75.2807},{"n":"Xikeng","c":"China","y":24.0505,"x":116.8538},{"n":"Mamungan","c":"Philippines","y":8.1167,"x":124.2167},{"n":"Motril","c":"Spain","y":36.75,"x":-3.5167},{"n":"St. Clair Shores","c":"United States","y":42.4921,"x":-82.8957},{"n":"Juruti","c":"Brazil","y":-2.1519,"x":-56.0919},{"n":"Buique","c":"Brazil","y":-8.6233,"x":-37.1564},{"n":"Kelibia","c":"Tunisia","y":36.8475,"x":11.0939},{"n":"Cabatuan","c":"Philippines","y":10.8833,"x":122.4833},{"n":"Sandnes","c":"Norway","y":58.85,"x":5.7333},{"n":"Rass el Djebel","c":"Tunisia","y":37.215,"x":10.12},{"n":"Des Plaines","c":"United States","y":42.0345,"x":-87.9009},{"n":"Lac-Brome","c":"Canada","y":45.2167,"x":-72.5167},{"n":"Lewiston","c":"United States","y":44.0915,"x":-70.1681},{"n":"Jovellanos","c":"Cuba","y":22.8106,"x":-81.1981},{"n":"Timargara","c":"Pakistan","y":34.8281,"x":71.8408},{"n":"Mikhaylovka","c":"Russia","y":50.0667,"x":43.2333},{"n":"Boufarik","c":"Algeria","y":36.575,"x":2.9097},{"n":"Santo Domingo","c":"Philippines","y":15.5833,"x":120.8667},{"n":"Izberbash","c":"Russia","y":42.5667,"x":47.8667},{"n":"Sucun","c":"China","y":31.0554,"x":118.1057},{"n":"Bowie","c":"United States","y":38.9569,"x":-76.7409},{"n":"Cerignola","c":"Italy","y":41.2667,"x":15.9},{"n":"Kas","c":"Turkey","y":36.2018,"x":29.6377},{"n":"Tlaltenango de Sanchez Roman","c":"Mexico","y":21.7815,"x":-103.3059},{"n":"Avila","c":"Spain","y":40.65,"x":-4.6833},{"n":"Aketi","c":"Congo (Kinshasa)","y":2.7405,"x":23.78},{"n":"Qaskeleng","c":"Kazakhstan","y":43.1983,"x":76.6311},{"n":"Palompon","c":"Philippines","y":11.05,"x":124.3833},{"n":"Felgueiras","c":"Portugal","y":41.3667,"x":-8.2},{"n":"Tokoname","c":"Japan","y":34.8833,"x":136.8333},{"n":"Rotorua","c":"New Zealand","y":-38.1378,"x":176.2514},{"n":"Goppingen","c":"Germany","y":48.7025,"x":9.6528},{"n":"Lambayeque","c":"Peru","y":-6.7,"x":-79.9},{"n":"Iskitim","c":"Russia","y":54.6333,"x":83.3},{"n":"Guarabira","c":"Brazil","y":-6.855,"x":-35.49},{"n":"Sunshi","c":"China","y":38.7631,"x":116.4876},{"n":"San Pedro","c":"Argentina","y":-24.2196,"x":-64.87},{"n":"Moncada","c":"Philippines","y":15.7333,"x":120.5667},{"n":"Ma'erkang","c":"China","y":31.9046,"x":102.2167},{"n":"San Rafael","c":"United States","y":37.9905,"x":-122.5222},{"n":"Moncalieri","c":"Italy","y":45,"x":7.6833},{"n":"Acu","c":"Brazil","y":-5.5769,"x":-36.9089},{"n":"San Fernando","c":"Chile","y":-34.5839,"x":-70.9891},{"n":"Euskirchen","c":"Germany","y":50.6613,"x":6.7873},{"n":"Serres","c":"Greece","y":41.0833,"x":23.55},{"n":"Jiantang","c":"China","y":27.8205,"x":99.7043},{"n":"Ishikari","c":"Japan","y":43.1783,"x":141.3067},{"n":"Punta Alta","c":"Argentina","y":-38.88,"x":-62.075},{"n":"La Gomera","c":"Guatemala","y":14.0833,"x":-91.05},{"n":"Ragay","c":"Philippines","y":13.8183,"x":122.7923},{"n":"Kosai","c":"Japan","y":34.7186,"x":137.5317},{"n":"Nyagan","c":"Russia","y":62.1333,"x":65.3833},{"n":"Sirvan","c":"Azerbaijan","y":39.9319,"x":48.9203},{"n":"Barneveld","c":"Netherlands","y":52.1333,"x":5.5833},{"n":"Huaniu","c":"China","y":34.5658,"x":105.8215},{"n":"Hamburg","c":"United States","y":42.7394,"x":-78.8581},{"n":"Frankfurt (Oder)","c":"Germany","y":52.35,"x":14.55},{"n":"Masantol","c":"Philippines","y":14.9,"x":120.7167},{"n":"Richland","c":"United States","y":46.2824,"x":-119.2938},{"n":"Fredericton","c":"Canada","y":45.9636,"x":-66.6431},{"n":"Taal","c":"Philippines","y":13.8833,"x":120.9333},{"n":"Asingan","c":"Philippines","y":16.0023,"x":120.6695},{"n":"St. Peters","c":"United States","y":38.7824,"x":-90.6061},{"n":"Wesley Chapel","c":"United States","y":28.2106,"x":-82.3238},{"n":"Togane","c":"Japan","y":35.56,"x":140.3661},{"n":"Gengzhuangqiao","c":"China","y":37.4453,"x":114.9804},{"n":"Monte Alegre","c":"Brazil","y":-2.0078,"x":-54.0689},{"n":"Heerhugowaard","c":"Netherlands","y":52.668,"x":4.841},{"n":"San Remigio","c":"Philippines","y":11,"x":123.95},{"n":"Pula","c":"Croatia","y":44.8667,"x":13.8333},{"n":"Tikhvin","c":"Russia","y":59.6333,"x":33.5},{"n":"Castilla","c":"Philippines","y":12.9486,"x":123.8822},{"n":"Pradera","c":"Colombia","y":3.4189,"x":-76.2439},{"n":"Roermond","c":"Netherlands","y":51.1933,"x":5.9872},{"n":"Hendersonville","c":"United States","y":36.3063,"x":-86.5998},{"n":"Huntersville","c":"United States","y":35.4058,"x":-80.8727},{"n":"Mirassol","c":"Brazil","y":-20.8189,"x":-49.5208},{"n":"Southampton","c":"United States","y":40.8996,"x":-72.4937},{"n":"Xiezhou","c":"China","y":34.9124,"x":110.8517},{"n":"Santee","c":"United States","y":32.8554,"x":-116.9851},{"n":"Hameln","c":"Germany","y":52.1031,"x":9.36},{"n":"Wagga Wagga","c":"Australia","y":-35.1189,"x":147.3689},{"n":"Meleuz","c":"Russia","y":52.9647,"x":55.9328},{"n":"Livingston","c":"United Kingdom","y":55.8834,"x":-3.5157},{"n":"Allanmyo","c":"Myanmar","y":19.3783,"x":95.2279},{"n":"Malvar","c":"Philippines","y":14.0417,"x":121.1583},{"n":"Aleksin","c":"Russia","y":54.5,"x":37.0667},{"n":"Antonio Enes","c":"Mozambique","y":-16.2308,"x":39.9105},{"n":"Berezovskiy","c":"Russia","y":56.9,"x":60.8},{"n":"Ping'an","c":"China","y":36.502,"x":102.1082},{"n":"Beckley","c":"United States","y":37.7878,"x":-81.1841},{"n":"Samalkot","c":"India","y":17.0531,"x":82.1695},{"n":"Alexandroupoli","c":"Greece","y":40.85,"x":25.8667},{"n":"Titusville","c":"United States","y":28.5727,"x":-80.8193},{"n":"Cartersville","c":"United States","y":34.1639,"x":-84.8007},{"n":"Ypane","c":"Paraguay","y":-25.45,"x":-57.53},{"n":"Sidi Yahya Zaer","c":"Morocco","y":33.8261,"x":-6.9039},{"n":"Bedzin","c":"Poland","y":50.325,"x":19.1333},{"n":"Walla Walla","c":"United States","y":46.067,"x":-118.3366},{"n":"Orland Park","c":"United States","y":41.6074,"x":-87.8619},{"n":"Ciudad Cuauhtemoc","c":"Mexico","y":22.1833,"x":-97.8333},{"n":"Qianwu","c":"China","y":22.1635,"x":113.2217},{"n":"Tikhoretsk","c":"Russia","y":45.85,"x":40.1167},{"n":"Kothapet","c":"India","y":19.3333,"x":79.4833},{"n":"Towson","c":"United States","y":39.3944,"x":-76.619},{"n":"Orito","c":"Colombia","y":0.6661,"x":-76.8708},{"n":"Biala Podlaska","c":"Poland","y":52.0333,"x":23.1167},{"n":"Botolan","c":"Philippines","y":15.2896,"x":120.0245},{"n":"Qunghirot","c":"Uzbekistan","y":43.0704,"x":58.9},{"n":"Minokamo","c":"Japan","y":35.4333,"x":137.0167},{"n":"Weymouth","c":"United States","y":42.1984,"x":-70.9466},{"n":"Campo Alegre","c":"Brazil","y":-9.7819,"x":-36.3508},{"n":"Ibitinga","c":"Brazil","y":-21.7578,"x":-48.8289},{"n":"Macherla","c":"India","y":16.48,"x":79.43},{"n":"Pavlovo","c":"Russia","y":55.9619,"x":43.09},{"n":"Beauvais","c":"France","y":49.4303,"x":2.0952},{"n":"Jerez de Garcia Salinas","c":"Mexico","y":22.6481,"x":-102.9903},{"n":"Parker","c":"United States","y":39.5084,"x":-104.7753},{"n":"Linares","c":"Spain","y":38.0833,"x":-3.6333},{"n":"Palm Beach Gardens","c":"United States","y":26.8466,"x":-80.1679},{"n":"Ejmiatsin","c":"Armenia","y":40.1728,"x":44.2925},{"n":"Krasnotur'insk","c":"Russia","y":59.7733,"x":60.1853},{"n":"Bozeman","c":"United States","y":45.6832,"x":-111.0552},{"n":"Kandukur","c":"India","y":15.2165,"x":79.9042},{"n":"Diriamba","c":"Nicaragua","y":11.85,"x":-86.2333},{"n":"Beni Enzar","c":"Morocco","y":35.2569,"x":-2.9342},{"n":"Salsk","c":"Russia","y":46.4833,"x":41.5333},{"n":"Sicuani","c":"Peru","y":-14.2694,"x":-71.2261},{"n":"Kojske","c":"Kosovo","y":42.53,"x":21.1386},{"n":"New Plymouth","c":"New Zealand","y":-39.0578,"x":174.0742},{"n":"Ilog","c":"Philippines","y":10.0333,"x":122.7667},{"n":"East Stroudsburg","c":"United States","y":41.0023,"x":-75.1779},{"n":"Milagros","c":"Philippines","y":12.2333,"x":123.5},{"n":"Santiago Tuxtla","c":"Mexico","y":18.4654,"x":-95.3},{"n":"Nova Odessa","c":"Brazil","y":-22.7797,"x":-47.2962},{"n":"Taunton","c":"United States","y":41.9036,"x":-71.0943},{"n":"Istaravshan","c":"Tajikistan","y":39.9108,"x":69.0064},{"n":"Khlong Luang","c":"Thailand","y":14.0649,"x":100.6447},{"n":"Midwest City","c":"United States","y":35.463,"x":-97.3709},{"n":"Sankt Augustin","c":"Germany","y":50.77,"x":7.1867},{"n":"Stolberg","c":"Germany","y":50.7667,"x":6.2333},{"n":"Tivoli","c":"Italy","y":41.9667,"x":12.8},{"n":"Damghan","c":"Iran","y":36.1681,"x":54.3481},{"n":"Bobbili","c":"India","y":18.5667,"x":83.4167},{"n":"Irpin","c":"Ukraine","y":50.5167,"x":30.25},{"n":"Sattenapalle","c":"India","y":16.3962,"x":80.1497},{"n":"Krymsk","c":"Russia","y":44.9333,"x":38},{"n":"Andradina","c":"Brazil","y":-20.8958,"x":-51.3789},{"n":"Kudamatsu","c":"Japan","y":34.015,"x":131.8703},{"n":"San Jose de Ocoa","c":"Dominican Republic","y":18.55,"x":-70.5},{"n":"Goldsboro","c":"United States","y":35.3778,"x":-77.972},{"n":"Azzaba","c":"Algeria","y":36.7333,"x":7.1},{"n":"Tikapur","c":"Nepal","y":28.5,"x":81.1333},{"n":"Foligno","c":"Italy","y":42.9561,"x":12.7033},{"n":"Vargem Grande","c":"Brazil","y":-3.5428,"x":-43.9158},{"n":"Euless","c":"United States","y":32.8508,"x":-97.0799},{"n":"Talagante","c":"Chile","y":-33.6667,"x":-70.9333},{"n":"Shicun","c":"China","y":38.5383,"x":116.1096},{"n":"Gorlitz","c":"Germany","y":51.1528,"x":14.9872},{"n":"Pau d'Alho","c":"Brazil","y":-7.8969,"x":-35.18},{"n":"Pacos de Ferreira","c":"Portugal","y":41.2833,"x":-8.3833},{"n":"Eschweiler","c":"Germany","y":50.8167,"x":6.2833},{"n":"Vrindavan","c":"India","y":27.5806,"x":77.7006},{"n":"Ribnita","c":"Moldova","y":47.7664,"x":29.0006},{"n":"Alenquer","c":"Brazil","y":-1.9419,"x":-54.7378},{"n":"Langenhagen","c":"Germany","y":52.4394,"x":9.74},{"n":"Manfredonia","c":"Italy","y":41.6333,"x":15.9167},{"n":"Meerbusch","c":"Germany","y":51.2667,"x":6.6667},{"n":"General Pico","c":"Argentina","y":-35.6587,"x":-63.7577},{"n":"Irosin","c":"Philippines","y":12.7,"x":124.0333},{"n":"Matanao","c":"Philippines","y":6.75,"x":125.2333},{"n":"Shoreline","c":"United States","y":47.7564,"x":-122.3426},{"n":"Tres Pontas","c":"Brazil","y":-21.3669,"x":-45.5128},{"n":"Neryungri","c":"Russia","y":56.6583,"x":124.725},{"n":"Moreno","c":"Brazil","y":-8.1186,"x":-35.0922},{"n":"Puerto Boyaca","c":"Colombia","y":5.9761,"x":-74.5875},{"n":"Kananya","c":"Philippines","y":11.1833,"x":124.5667},{"n":"Jinoba-an","c":"Philippines","y":9.6018,"x":122.4668},{"n":"Calatagan","c":"Philippines","y":13.8322,"x":120.6322},{"n":"Chini","c":"China","y":23.3916,"x":113.0755},{"n":"Bagheria","c":"Italy","y":38.0833,"x":13.5},{"n":"Piscataway","c":"United States","y":40.5467,"x":-74.4636},{"n":"Brentwood","c":"United Kingdom","y":51.6204,"x":0.305},{"n":"Clacton-on-Sea","c":"United Kingdom","y":51.7918,"x":1.1457},{"n":"Orion","c":"Philippines","y":14.6206,"x":120.5817},{"n":"Acambay","c":"Mexico","y":19.9539,"x":-99.8431},{"n":"Lake Havasu City","c":"United States","y":34.5006,"x":-114.3113},{"n":"Cuneo","c":"Italy","y":44.3833,"x":7.55},{"n":"Waiblingen","c":"Germany","y":48.8303,"x":9.3169},{"n":"Santa Cruz Verapaz","c":"Guatemala","y":15.3736,"x":-90.4306},{"n":"Gattaran","c":"Philippines","y":18.0667,"x":121.65},{"n":"Taquaritinga","c":"Brazil","y":-21.4058,"x":-48.505},{"n":"Tulunan","c":"Philippines","y":6.8333,"x":124.8833},{"n":"Bertioga","c":"Brazil","y":-23.8539,"x":-46.1389},{"n":"Smyrna","c":"United States","y":33.8633,"x":-84.5168},{"n":"Tonsberg","c":"Norway","y":59.2981,"x":10.4236},{"n":"Quezaltepeque","c":"El Salvador","y":13.8312,"x":-89.2722},{"n":"Cui'erzhuang","c":"China","y":38.2897,"x":116.5472},{"n":"Opava","c":"Czechia","y":49.9381,"x":17.9044},{"n":"Nogata","c":"Japan","y":33.7439,"x":130.7297},{"n":"Taybad","c":"Iran","y":34.74,"x":60.7756},{"n":"Trani","c":"Italy","y":41.2667,"x":16.4167},{"n":"Bianyang","c":"China","y":25.6163,"x":106.6795},{"n":"Santa Ana","c":"Philippines","y":15.0939,"x":120.7681},{"n":"Cape Girardeau","c":"United States","y":37.3108,"x":-89.5597},{"n":"Bartolome Maso","c":"Cuba","y":20.1686,"x":-76.9428},{"n":"Amealco","c":"Mexico","y":20.1881,"x":-100.1439},{"n":"Uson","c":"Philippines","y":12.2253,"x":123.7834},{"n":"Hassa","c":"Turkey","y":36.8,"x":36.53},{"n":"Sao Francisco","c":"Brazil","y":-15.9489,"x":-44.8639},{"n":"Hohoe","c":"Ghana","y":7.149,"x":0.4746},{"n":"Belampalli","c":"India","y":19.0558,"x":79.4931},{"n":"Shali","c":"Russia","y":43.15,"x":45.9},{"n":"Araci","c":"Brazil","y":-11.3328,"x":-38.9669},{"n":"Oosterhout","c":"Netherlands","y":51.6431,"x":4.8569},{"n":"Xinqing","c":"China","y":48.2363,"x":129.5059},{"n":"Blainville","c":"Canada","y":45.67,"x":-73.88},{"n":"Gulariya","c":"Nepal","y":28.2331,"x":81.3331},{"n":"Registro","c":"Brazil","y":-24.4878,"x":-47.8439},{"n":"Baganga","c":"Philippines","y":7.5752,"x":126.5585},{"n":"Antratsyt","c":"Ukraine","y":48.1167,"x":39.0833},{"n":"Vranjak","c":"Kosovo","y":42.3994,"x":20.6547},{"n":"Irati","c":"Brazil","y":-25.4669,"x":-50.6508},{"n":"Winneba","c":"Ghana","y":5.35,"x":-0.6333},{"n":"Xanthi","c":"Greece","y":41.1333,"x":24.8833},{"n":"Los Amates","c":"Guatemala","y":15.2667,"x":-89.1},{"n":"Longmen","c":"China","y":35.6119,"x":110.5746},{"n":"Zarrin Shahr","c":"Iran","y":32.3894,"x":51.3764},{"n":"Lozova","c":"Ukraine","y":48.8892,"x":36.3161},{"n":"Bisceglie","c":"Italy","y":41.2409,"x":16.5021},{"n":"Khan Shaykhun","c":"Syria","y":35.4419,"x":36.6508},{"n":"Kazanlak","c":"Bulgaria","y":42.6167,"x":25.4},{"n":"Placer","c":"Philippines","y":11.8667,"x":123.9167},{"n":"Vorkuta","c":"Russia","y":67.5,"x":64.0333},{"n":"Medellin","c":"Philippines","y":11.1286,"x":123.9622},{"n":"Katerini","c":"Greece","y":40.2667,"x":22.5},{"n":"Frydek-Mistek","c":"Czechia","y":49.6881,"x":18.3536},{"n":"Parachinar","c":"Pakistan","y":33.8992,"x":70.1008},{"n":"Tigaon","c":"Philippines","y":13.6333,"x":123.5},{"n":"Bhimunipatnam","c":"India","y":17.8864,"x":83.4471},{"n":"Hyeres","c":"France","y":43.1199,"x":6.1316},{"n":"Canterbury","c":"United Kingdom","y":51.28,"x":1.08},{"n":"Boituva","c":"Brazil","y":-23.2833,"x":-47.6722},{"n":"Portimao","c":"Portugal","y":37.1333,"x":-8.5333},{"n":"Den Helder","c":"Netherlands","y":52.9583,"x":4.7589},{"n":"Volzhsk","c":"Russia","y":55.8667,"x":48.35},{"n":"Changling","c":"China","y":44.27,"x":123.99},{"n":"Wangguanzhuang","c":"China","y":37.0183,"x":115.5773},{"n":"Hidaka","c":"Japan","y":35.9078,"x":139.3392},{"n":"Toki","c":"Japan","y":35.3525,"x":137.1833},{"n":"Grants Pass","c":"United States","y":42.4333,"x":-123.3317},{"n":"Blue Springs","c":"United States","y":39.0124,"x":-94.2721},{"n":"Jaru","c":"Brazil","y":-10.4389,"x":-62.4664},{"n":"Xiva","c":"Uzbekistan","y":41.3783,"x":60.3639},{"n":"Gus'-Khrustal'nyy","c":"Russia","y":55.6167,"x":40.65},{"n":"Tucano","c":"Brazil","y":-10.9628,"x":-38.7869},{"n":"Martin","c":"Slovakia","y":49.0636,"x":18.9214},{"n":"Southaven","c":"United States","y":34.9514,"x":-89.9787},{"n":"Umm Ruwaba","c":"Sudan","y":12.9058,"x":31.2156},{"n":"Tinley Park","c":"United States","y":41.567,"x":-87.805},{"n":"Apatity","c":"Russia","y":67.5675,"x":33.3933},{"n":"Azul","c":"Argentina","y":-36.7833,"x":-59.85},{"n":"Taua","c":"Brazil","y":-6.0028,"x":-40.2928},{"n":"Diamond Bar","c":"United States","y":33.9991,"x":-117.8161},{"n":"Binalonan","c":"Philippines","y":16.05,"x":120.6},{"n":"Pittsfield","c":"United States","y":42.4517,"x":-73.2605},{"n":"Navirai","c":"Brazil","y":-23.065,"x":-54.1908},{"n":"Eagle Pass","c":"United States","y":28.7125,"x":-100.484},{"n":"Acara","c":"Brazil","y":-1.9608,"x":-48.1969},{"n":"Avellino","c":"Italy","y":40.9153,"x":14.7897},{"n":"Aran Bidgol","c":"Iran","y":34.0578,"x":51.4842},{"n":"Limoeiro","c":"Brazil","y":-7.875,"x":-35.45},{"n":"Monte Mor","c":"Brazil","y":-22.9467,"x":-47.315},{"n":"Jocotitlan","c":"Mexico","y":19.7072,"x":-99.7867},{"n":"Lenexa","c":"United States","y":38.9609,"x":-94.8018},{"n":"Lagonoy","c":"Philippines","y":13.7333,"x":123.5167},{"n":"Corby","c":"United Kingdom","y":52.4914,"x":-0.6965},{"n":"Hazleton","c":"United States","y":40.9504,"x":-75.9724},{"n":"Alangalang","c":"Philippines","y":11.2,"x":124.85},{"n":"El Banco","c":"Colombia","y":9.0008,"x":-73.9744},{"n":"Basey","c":"Philippines","y":11.2817,"x":125.0683},{"n":"Twin Falls","c":"United States","y":42.5645,"x":-114.4615},{"n":"Schweinfurt","c":"Germany","y":50.05,"x":10.2333},{"n":"Batac","c":"Philippines","y":18.0554,"x":120.5649},{"n":"Villarrica","c":"Chile","y":-39.2667,"x":-72.2167},{"n":"Baden-Baden","c":"Germany","y":48.7619,"x":8.2408},{"n":"Novato","c":"United States","y":38.092,"x":-122.5576},{"n":"Tigard","c":"United States","y":45.4237,"x":-122.7845},{"n":"Hoogeveen","c":"Netherlands","y":52.7167,"x":6.4667},{"n":"Jaguaquara","c":"Brazil","y":-13.5308,"x":-39.9708},{"n":"San Remo","c":"Italy","y":43.8175,"x":7.775},{"n":"Congonhas","c":"Brazil","y":-20.5,"x":-43.8578},{"n":"Abington","c":"United States","y":40.1108,"x":-75.1146},{"n":"Rolim de Moura","c":"Brazil","y":-11.7254,"x":-61.7778},{"n":"Aurora","c":"Canada","y":44,"x":-79.4667},{"n":"Bitonto","c":"Italy","y":41.1083,"x":16.6917},{"n":"Highland","c":"United States","y":34.1113,"x":-117.1654},{"n":"San Mariano","c":"Philippines","y":16.9833,"x":122.0167},{"n":"Dearborn Heights","c":"United States","y":42.3164,"x":-83.2769},{"n":"Puttur","c":"India","y":13.45,"x":79.55},{"n":"Manapla","c":"Philippines","y":10.958,"x":123.123},{"n":"Hattingen","c":"Germany","y":51.3992,"x":7.1858},{"n":"Bad Homburg","c":"Germany","y":50.2292,"x":8.6105},{"n":"Songlindian","c":"China","y":39.41,"x":115.9235},{"n":"Pombal","c":"Portugal","y":39.9162,"x":-8.6279},{"n":"Grapevine","c":"United States","y":32.9343,"x":-97.0744},{"n":"Hervey Bay","c":"Australia","y":-25.2853,"x":152.8728},{"n":"Sigaboy","c":"Philippines","y":6.65,"x":126.0667},{"n":"Amalapuram","c":"India","y":16.5833,"x":82.0167},{"n":"Chino","c":"Japan","y":35.9956,"x":138.1589},{"n":"Fond du Lac","c":"United States","y":43.7718,"x":-88.4396},{"n":"Hacienda Heights","c":"United States","y":33.997,"x":-117.9728},{"n":"Jasaan","c":"Philippines","y":8.65,"x":124.75},{"n":"Punganuru","c":"India","y":13.3667,"x":78.5833},{"n":"Nandod","c":"India","y":21.8704,"x":73.5026},{"n":"Qiryat Gat","c":"Israel","y":31.6061,"x":34.7717},{"n":"Tiquisate","c":"Guatemala","y":14.2833,"x":-91.3667},{"n":"Chicopee","c":"United States","y":42.1764,"x":-72.5719},{"n":"Funato","c":"Japan","y":34.2564,"x":135.3111},{"n":"Zhushan","c":"Taiwan","y":23.6889,"x":120.7289},{"n":"San Luis","c":"Philippines","y":15.04,"x":120.7919},{"n":"New Corella","c":"Philippines","y":7.5866,"x":125.8237},{"n":"San Gil","c":"Colombia","y":6.555,"x":-73.1336},{"n":"Narbonne","c":"France","y":43.1836,"x":3.0042},{"n":"Tequisquiapan","c":"Mexico","y":20.5206,"x":-99.8958},{"n":"Cathedral City","c":"United States","y":33.8363,"x":-116.4642},{"n":"Vannes","c":"France","y":47.6559,"x":-2.7603},{"n":"La Roche-sur-Yon","c":"France","y":46.6705,"x":-1.426},{"n":"Vicosa do Ceara","c":"Brazil","y":-3.5619,"x":-41.0919},{"n":"San Cristobal Verapaz","c":"Guatemala","y":15.365,"x":-90.4792},{"n":"Porto Ferreira","c":"Brazil","y":-21.8539,"x":-47.4789},{"n":"Huaishu","c":"China","y":38.0828,"x":115.0591},{"n":"Barreirinhas","c":"Brazil","y":-2.7469,"x":-42.8258},{"n":"Delano","c":"United States","y":35.767,"x":-119.2637},{"n":"Bentonville","c":"United States","y":36.3546,"x":-94.2306},{"n":"Stonecrest","c":"United States","y":33.6842,"x":-84.1372},{"n":"Sakurai","c":"Japan","y":34.5189,"x":135.8519},{"n":"Dandarah","c":"Egypt","y":26.1422,"x":32.6697},{"n":"Kettering","c":"United States","y":39.6957,"x":-84.1495},{"n":"Mali","c":"China","y":23.1277,"x":104.7029},{"n":"Canlaon","c":"Philippines","y":10.3833,"x":123.2},{"n":"Sarpsborg","c":"Norway","y":59.2839,"x":11.1096},{"n":"Colton","c":"United States","y":34.0538,"x":-117.3254},{"n":"Pulheim","c":"Germany","y":51,"x":6.8},{"n":"Annaka","c":"Japan","y":36.3264,"x":138.8872},{"n":"Ostroleka","c":"Poland","y":53.0833,"x":21.5667},{"n":"Xielu","c":"China","y":37.0359,"x":115.6922},{"n":"Monte Santo","c":"Brazil","y":-10.4378,"x":-39.3328},{"n":"Chota","c":"Peru","y":-6.5614,"x":-78.6486},{"n":"Naguilian","c":"Philippines","y":16.5333,"x":120.4},{"n":"Lingen","c":"Germany","y":52.5233,"x":7.3172},{"n":"Barotac Nuevo","c":"Philippines","y":10.9,"x":122.7},{"n":"Modica","c":"Italy","y":36.8672,"x":14.7614},{"n":"Teramo","c":"Italy","y":42.6589,"x":13.7039},{"n":"Cuenca","c":"Spain","y":40.0667,"x":-2.15},{"n":"Bad Salzuflen","c":"Germany","y":52.0875,"x":8.7506},{"n":"Mansalay","c":"Philippines","y":12.5204,"x":121.4385},{"n":"West Haven","c":"United States","y":41.2739,"x":-72.9672},{"n":"Cava de' Tirreni","c":"Italy","y":40.7008,"x":14.7056},{"n":"Dayin","c":"China","y":38.9358,"x":115.7102},{"n":"Sertolovo","c":"Russia","y":60.1417,"x":30.2119},{"n":"Chivilcoy","c":"Argentina","y":-34.9,"x":-60.0167},{"n":"Cholet","c":"France","y":47.06,"x":-0.8783},{"n":"Chenab Nagar","c":"Pakistan","y":31.75,"x":72.9167},{"n":"Canoinhas","c":"Brazil","y":-26.1769,"x":-50.39},{"n":"Sao Jose do Rio Pardo","c":"Brazil","y":-21.5958,"x":-46.8889},{"n":"Kotka","c":"Finland","y":60.4667,"x":26.9458},{"n":"Shidong","c":"China","y":23.6193,"x":112.0701},{"n":"Normal","c":"United States","y":40.5218,"x":-88.9881},{"n":"Palmaner","c":"India","y":13.2,"x":78.75},{"n":"Qingan","c":"China","y":46.8719,"x":127.5118},{"n":"Paombong","c":"Philippines","y":14.8311,"x":120.7892},{"n":"Itupeva","c":"Brazil","y":-23.1531,"x":-47.0578},{"n":"Siena","c":"Italy","y":43.3183,"x":11.3314},{"n":"Milford","c":"United States","y":41.2256,"x":-73.0616},{"n":"Tarma","c":"Peru","y":-11.4167,"x":-75.6833},{"n":"Jalor","c":"India","y":25.35,"x":72.6167},{"n":"Zarafshon Shahri","c":"Uzbekistan","y":41.5667,"x":64.2},{"n":"Valle del Guamuez","c":"Colombia","y":0.4253,"x":-76.9053},{"n":"Huesca","c":"Spain","y":42.1333,"x":-0.4167},{"n":"Campo Belo","c":"Brazil","y":-20.8969,"x":-45.2769},{"n":"Vikarabad","c":"India","y":17.33,"x":77.9},{"n":"Hashtpar","c":"Iran","y":37.7992,"x":48.9053},{"n":"Ixhuatlan de Madero","c":"Mexico","y":20.6833,"x":-98.0167},{"n":"Ruteng","c":"Indonesia","y":-8.6118,"x":120.4698},{"n":"Narva","c":"Estonia","y":59.3792,"x":28.2006},{"n":"Barra","c":"Brazil","y":-11.0889,"x":-43.1419},{"n":"Tokmok","c":"Kyrgyzstan","y":42.839,"x":75.291},{"n":"Vigia","c":"Brazil","y":-0.8578,"x":-48.1419},{"n":"Zhigulevsk","c":"Russia","y":53.4,"x":49.5},{"n":"Arroyo Grande","c":"United States","y":35.1241,"x":-120.5845},{"n":"Pinto","c":"Spain","y":40.25,"x":-3.7},{"n":"Kampen","c":"Netherlands","y":52.55,"x":5.9},{"n":"San Simon","c":"Philippines","y":14.998,"x":120.78},{"n":"Progreso","c":"Mexico","y":21.28,"x":-89.67},{"n":"Magsaysay","c":"Philippines","y":6.7667,"x":125.1833},{"n":"Minnetonka","c":"United States","y":44.9322,"x":-93.4598},{"n":"Jagtial","c":"India","y":18.8,"x":78.93},{"n":"Dholka","c":"India","y":22.72,"x":72.47},{"n":"Puerto Libertador","c":"Colombia","y":7.8881,"x":-75.6717},{"n":"Elda","c":"Spain","y":38.4789,"x":-0.7967},{"n":"Tajumulco","c":"Guatemala","y":15.0839,"x":-91.9233},{"n":"Wayne","c":"United States","y":40.9481,"x":-74.2453},{"n":"La Lima","c":"Honduras","y":15.433,"x":-87.917},{"n":"Liski","c":"Russia","y":50.9822,"x":39.4994},{"n":"Tuni","c":"India","y":17.35,"x":82.55},{"n":"Yucaipa","c":"United States","y":34.0336,"x":-117.0429},{"n":"Markala","c":"Mali","y":13.7021,"x":-6.0659},{"n":"Svobodnyy","c":"Russia","y":51.3833,"x":128.1333},{"n":"Jaggayyapeta","c":"India","y":16.892,"x":80.0976},{"n":"Salo","c":"Finland","y":60.3831,"x":23.1331},{"n":"Brunswick","c":"United States","y":31.145,"x":-81.474},{"n":"Bijar","c":"Iran","y":35.8741,"x":47.5937},{"n":"Williamsport","c":"United States","y":41.2398,"x":-77.0371},{"n":"Neiba","c":"Dominican Republic","y":18.49,"x":-71.42},{"n":"Malay","c":"Philippines","y":11.9,"x":121.9167},{"n":"Nordhorn","c":"Germany","y":52.4333,"x":7.0667},{"n":"Elyria","c":"United States","y":41.3761,"x":-82.1063},{"n":"Videira","c":"Brazil","y":-27.0078,"x":-51.1519},{"n":"Ibaan","c":"Philippines","y":13.8176,"x":121.133},{"n":"Mount Prospect","c":"United States","y":42.0641,"x":-87.9375},{"n":"Marco de Canavezes","c":"Portugal","y":41.1833,"x":-8.15},{"n":"Nebaj","c":"Guatemala","y":15.4083,"x":-91.1472},{"n":"Krasnokamsk","c":"Russia","y":58.0833,"x":55.75},{"n":"Upata","c":"Venezuela","y":8.0204,"x":-62.41},{"n":"Port Shepstone","c":"South Africa","y":-30.7411,"x":30.4547},{"n":"Upi","c":"Philippines","y":7.0289,"x":124.165},{"n":"Wetzlar","c":"Germany","y":50.5667,"x":8.5},{"n":"Enerhodar","c":"Ukraine","y":47.4989,"x":34.6558},{"n":"Velletri","c":"Italy","y":41.6667,"x":12.7833},{"n":"Pinellas Park","c":"United States","y":27.8589,"x":-82.7078},{"n":"Frechen","c":"Germany","y":50.9167,"x":6.8167},{"n":"Tiwi","c":"Philippines","y":13.4585,"x":123.6805},{"n":"Neustadt","c":"Germany","y":49.3443,"x":8.1952},{"n":"Encarnacion de Diaz","c":"Mexico","y":21.5167,"x":-102.2333},{"n":"Bambang","c":"Philippines","y":16.3825,"x":121.11},{"n":"Anzio","c":"Italy","y":41.4472,"x":12.6283},{"n":"Acireale","c":"Italy","y":37.6125,"x":15.1656},{"n":"Zhangjiazhuang","c":"China","y":38.1749,"x":114.737},{"n":"San Bartolome","c":"Spain","y":27.9254,"x":-15.5726},{"n":"Pijijiapan","c":"Mexico","y":15.6867,"x":-93.2092},{"n":"West Sacramento","c":"United States","y":38.5557,"x":-121.5504},{"n":"Gudermes","c":"Russia","y":43.35,"x":46.1},{"n":"Yangmei","c":"China","y":22.8728,"x":112.7802},{"n":"Apopka","c":"United States","y":28.7014,"x":-81.5304},{"n":"Olimpia","c":"Brazil","y":-20.7369,"x":-48.915},{"n":"Barbosa","c":"Colombia","y":6.4375,"x":-75.3306},{"n":"Pryluky","c":"Ukraine","y":50.6,"x":32.4},{"n":"Xincheng","c":"China","y":39.9883,"x":112.4673},{"n":"Itupiranga","c":"Brazil","y":-5.135,"x":-49.3269},{"n":"San Manuel","c":"Philippines","y":16.0656,"x":120.6667},{"n":"Lian","c":"Philippines","y":14.0333,"x":120.65},{"n":"Santo Estevao","c":"Brazil","y":-12.43,"x":-39.2508},{"n":"Porto Nacional","c":"Brazil","y":-10.7078,"x":-48.4169},{"n":"Yaozhuangcun","c":"China","y":30.9113,"x":120.9573},{"n":"Capivari","c":"Brazil","y":-22.995,"x":-47.5078},{"n":"Sao Bento do Una","c":"Brazil","y":-8.5228,"x":-36.4439},{"n":"Grand Island","c":"United States","y":40.9214,"x":-98.3584},{"n":"Guiuan","c":"Philippines","y":11.0333,"x":125.7333},{"n":"Akbou","c":"Algeria","y":36.4667,"x":4.5333},{"n":"Tame","c":"Colombia","y":6.4583,"x":-71.7447},{"n":"Palm Desert","c":"United States","y":33.7378,"x":-116.3695},{"n":"Cangucu","c":"Brazil","y":-31.395,"x":-52.6758},{"n":"Karlovac","c":"Croatia","y":45.4931,"x":15.5558},{"n":"Vyksa","c":"Russia","y":55.3194,"x":42.1731},{"n":"Mulanay","c":"Philippines","y":13.5222,"x":122.4042},{"n":"Pangantocan","c":"Philippines","y":7.8333,"x":124.8333},{"n":"Passau","c":"Germany","y":48.5667,"x":13.4667},{"n":"Leopoldina","c":"Brazil","y":-21.5319,"x":-42.6428},{"n":"Frejus","c":"France","y":43.433,"x":6.737},{"n":"Milford city","c":"United States","y":41.2256,"x":-73.0625},{"n":"San Severo","c":"Italy","y":41.6951,"x":15.3793},{"n":"Watertown","c":"United States","y":43.9734,"x":-75.9094},{"n":"Acopiara","c":"Brazil","y":-6.095,"x":-39.4528},{"n":"Sagua la Grande","c":"Cuba","y":22.8086,"x":-80.0711},{"n":"Little Elm","c":"United States","y":33.1856,"x":-96.929},{"n":"Pasaje","c":"Ecuador","y":-3.3269,"x":-79.8049},{"n":"Ramon","c":"Philippines","y":16.7833,"x":121.5333},{"n":"Chambersburg","c":"United States","y":39.9315,"x":-77.6556},{"n":"Peabody","c":"United States","y":42.5335,"x":-70.9724},{"n":"Wylie","c":"United States","y":33.0362,"x":-96.5161},{"n":"Manicore","c":"Brazil","y":-5.8089,"x":-61.3},{"n":"Beaufort","c":"United States","y":32.4597,"x":-80.7235},{"n":"Arsenyev","c":"Russia","y":44.1667,"x":133.2667},{"n":"Torrelavega","c":"Spain","y":43.3531,"x":-4.0458},{"n":"Mercedes","c":"Argentina","y":-34.65,"x":-59.4333},{"n":"Ahlen","c":"Germany","y":51.7633,"x":7.8911},{"n":"DeSoto","c":"United States","y":32.5992,"x":-96.8633},{"n":"Venkatagiri","c":"India","y":13.9667,"x":79.5833},{"n":"Sihor","c":"India","y":21.7,"x":71.97},{"n":"Burauen","c":"Philippines","y":10.9833,"x":124.9},{"n":"Lorica","c":"Colombia","y":9.2419,"x":-75.816},{"n":"Tomiya","c":"Japan","y":38.4,"x":140.8953},{"n":"Chone","c":"Ecuador","y":-0.6833,"x":-80.1},{"n":"Kobryn","c":"Belarus","y":52.2167,"x":24.3667},{"n":"Jangaon","c":"India","y":17.72,"x":79.18},{"n":"Poprad","c":"Slovakia","y":49.05,"x":20.3},{"n":"Mongagua","c":"Brazil","y":-24.0869,"x":-46.6289},{"n":"Edina","c":"United States","y":44.8914,"x":-93.3602},{"n":"Wolfenbuttel","c":"Germany","y":52.1622,"x":10.5369},{"n":"Krasnokamensk","c":"Russia","y":50.1,"x":118.0333},{"n":"Tutoia","c":"Brazil","y":-2.7619,"x":-42.2739},{"n":"Rondon do Para","c":"Brazil","y":-4.7758,"x":-48.0669},{"n":"Uniao da Vitoria","c":"Brazil","y":-26.23,"x":-51.0858},{"n":"San Jose Villa de Allende","c":"Mexico","y":19.3747,"x":-100.1475},{"n":"Minalabac","c":"Philippines","y":13.5667,"x":123.1833},{"n":"Minami-Soma","c":"Japan","y":37.6422,"x":140.9572},{"n":"Diffun","c":"Philippines","y":16.6,"x":121.4667},{"n":"Thongwa","c":"Myanmar","y":16.7547,"x":96.5193},{"n":"Viana","c":"Brazil","y":-3.22,"x":-45.0039},{"n":"Jaen","c":"Peru","y":-5.6992,"x":-78.8009},{"n":"Granja","c":"Brazil","y":-3.12,"x":-40.8258},{"n":"Alesund","c":"Norway","y":62.4723,"x":6.1549},{"n":"Huaiyang","c":"China","y":37.7701,"x":114.5312},{"n":"Pacora","c":"Panama","y":9.08,"x":-79.28},{"n":"Horishni Plavni","c":"Ukraine","y":49.0107,"x":33.6562},{"n":"An Nabk","c":"Syria","y":34.025,"x":36.7344},{"n":"Bato","c":"Philippines","y":13.3561,"x":123.3639},{"n":"Alfonso","c":"Philippines","y":14.1379,"x":120.8552},{"n":"Arles","c":"France","y":43.6767,"x":4.6278},{"n":"Mandamari","c":"India","y":18.9822,"x":79.4811},{"n":"Lacey","c":"United States","y":47.046,"x":-122.7934},{"n":"Tobias Barreto","c":"Brazil","y":-11.1839,"x":-37.9978},{"n":"Ajuy","c":"Philippines","y":11.1725,"x":123.0196},{"n":"Qabqa","c":"China","y":36.2814,"x":100.6131},{"n":"Caetite","c":"Brazil","y":-14.0689,"x":-42.475},{"n":"Summerville","c":"United States","y":33.0015,"x":-80.1799},{"n":"Itabirito","c":"Brazil","y":-20.2528,"x":-43.8008},{"n":"Prudentopolis","c":"Brazil","y":-25.2128,"x":-50.9778},{"n":"Vyazma","c":"Russia","y":55.2103,"x":34.285},{"n":"San Isidro","c":"Philippines","y":15.2667,"x":120.9},{"n":"Boa Viagem","c":"Brazil","y":-5.1278,"x":-39.7319},{"n":"Pordenone","c":"Italy","y":45.9626,"x":12.6563},{"n":"Parsippany-Troy Hills","c":"United States","y":40.8601,"x":-74.4238},{"n":"Roman","c":"Romania","y":46.93,"x":26.93},{"n":"Sape","c":"Brazil","y":-7.095,"x":-35.2328},{"n":"Ibbenburen","c":"Germany","y":52.2778,"x":7.7167},{"n":"Kleve","c":"Germany","y":51.79,"x":6.14},{"n":"Pontevedra","c":"Philippines","y":10.3667,"x":122.8833},{"n":"Obidos","c":"Brazil","y":-1.9178,"x":-55.5178},{"n":"Civitavecchia","c":"Italy","y":42.1,"x":11.8},{"n":"Welland","c":"Canada","y":42.9833,"x":-79.2333},{"n":"Jaguariuna","c":"Brazil","y":-22.68,"x":-46.99},{"n":"Guaxupe","c":"Brazil","y":-21.305,"x":-46.7128},{"n":"Novovolynsk","c":"Ukraine","y":50.7333,"x":24.1667},{"n":"Basankusu","c":"Congo (Kinshasa)","y":1.2222,"x":19.8028},{"n":"Villareal","c":"Spain","y":39.9378,"x":-0.1014},{"n":"Colmenar Viejo","c":"Spain","y":40.6589,"x":-3.7658},{"n":"Molave","c":"Philippines","y":8.0833,"x":123.4833},{"n":"Cruz del Eje","c":"Argentina","y":-30.7333,"x":-64.8},{"n":"Belorechensk","c":"Russia","y":44.7667,"x":39.8667},{"n":"Maricopa","c":"United States","y":33.0404,"x":-112.0006},{"n":"Stratford","c":"United States","y":41.207,"x":-73.1305},{"n":"San Joaquin","c":"Philippines","y":10.6,"x":122.0833},{"n":"Abdul Hakim","c":"Pakistan","y":30.5522,"x":72.1278},{"n":"Wangjiazhai","c":"China","y":26.6895,"x":104.8043},{"n":"Albu Kamal","c":"Syria","y":34.45,"x":40.9186},{"n":"San Onofre","c":"Colombia","y":9.7372,"x":-75.5256},{"n":"Porto Feliz","c":"Brazil","y":-23.215,"x":-47.5239},{"n":"Lompoc","c":"United States","y":34.6618,"x":-120.4714},{"n":"Timashevsk","c":"Russia","y":45.6167,"x":38.9333},{"n":"Eilat","c":"Israel","y":29.55,"x":34.95},{"n":"Metpalli","c":"India","y":18.8297,"x":78.5878},{"n":"Howell","c":"United States","y":40.1819,"x":-74.1977},{"n":"Caldas da Rainha","c":"Portugal","y":39.4069,"x":-9.1363},{"n":"Paraiso do Tocantins","c":"Brazil","y":-10.1758,"x":-48.8669},{"n":"Cogan","c":"Philippines","y":10.5833,"x":123.9667},{"n":"Bando","c":"Japan","y":36.0483,"x":139.8889},{"n":"Tagkawayan","c":"Philippines","y":13.9667,"x":122.5333},{"n":"Gwadar","c":"Pakistan","y":25.1264,"x":62.3225},{"n":"Battipaglia","c":"Italy","y":40.6167,"x":14.9833},{"n":"Pila","c":"Philippines","y":14.2333,"x":121.3667},{"n":"Kentwood","c":"United States","y":42.8852,"x":-85.5925},{"n":"Berriozabal","c":"Mexico","y":16.7993,"x":-93.2725},{"n":"Covilha","c":"Portugal","y":40.2833,"x":-7.5},{"n":"Coron","c":"Philippines","y":12,"x":120.2},{"n":"Lucban","c":"Philippines","y":14.1133,"x":121.5569},{"n":"Bad Kreuznach","c":"Germany","y":49.8469,"x":7.8669},{"n":"Shepparton","c":"Australia","y":-36.3833,"x":145.4},{"n":"Shimencun","c":"China","y":30.6263,"x":120.4409},{"n":"Dumanjog","c":"Philippines","y":10.05,"x":123.4833},{"n":"Karvina","c":"Czechia","y":49.8542,"x":18.5428},{"n":"Huazangsi","c":"China","y":36.9836,"x":103.1265},{"n":"Carigara","c":"Philippines","y":11.3,"x":124.6833},{"n":"Tsukubamirai","c":"Japan","y":35.9631,"x":140.0372},{"n":"Xanxere","c":"Brazil","y":-26.8769,"x":-52.4039},{"n":"Pola de Siero","c":"Spain","y":43.3833,"x":-5.65},{"n":"Solnechnogorsk","c":"Russia","y":56.1844,"x":36.995},{"n":"Caleta Olivia","c":"Argentina","y":-46.4333,"x":-67.5333},{"n":"Sierra Vista","c":"United States","y":31.563,"x":-110.3153},{"n":"Laguna","c":"Brazil","y":-28.4828,"x":-48.7808},{"n":"Woerden","c":"Netherlands","y":52.0858,"x":4.8833},{"n":"Mazara del Vallo","c":"Italy","y":37.6517,"x":12.5875},{"n":"Tulsipur","c":"Nepal","y":28.1278,"x":82.2956},{"n":"Trento","c":"Philippines","y":8.0459,"x":126.0614},{"n":"Chieti","c":"Italy","y":42.3511,"x":14.1674},{"n":"Rovigo","c":"Italy","y":45.0809,"x":11.794},{"n":"Guarne","c":"Colombia","y":6.2792,"x":-75.4419},{"n":"Speyer","c":"Germany","y":49.3194,"x":8.4311},{"n":"North Bay","c":"Canada","y":46.3,"x":-79.45},{"n":"Granadilla de Abona","c":"Spain","y":28.1167,"x":-16.5833},{"n":"Knysna","c":"South Africa","y":-34.0356,"x":23.0489},{"n":"Glendora","c":"United States","y":34.1449,"x":-117.8468},{"n":"Butare","c":"Rwanda","y":-2.6,"x":29.75},{"n":"El Talar de Pacheco","c":"Argentina","y":-34.4719,"x":-58.655},{"n":"Zhexiang","c":"China","y":24.2591,"x":98.2826},{"n":"Burien","c":"United States","y":47.4762,"x":-122.3394},{"n":"Grasse","c":"France","y":43.6667,"x":6.9167},{"n":"Scandicci","c":"Italy","y":43.7544,"x":11.1894},{"n":"Uzlovaya","c":"Russia","y":53.9791,"x":38.1601},{"n":"Ribeira do Pombal","c":"Brazil","y":-10.8339,"x":-38.5358},{"n":"Trairi","c":"Brazil","y":-3.2778,"x":-39.2689},{"n":"Arao","c":"Japan","y":32.9867,"x":130.4333},{"n":"Boblingen","c":"Germany","y":48.6833,"x":9},{"n":"Satte","c":"Japan","y":36.0781,"x":139.7258},{"n":"Tapas","c":"Philippines","y":11.2667,"x":122.5333},{"n":"Cuyotenango","c":"Guatemala","y":14.5421,"x":-91.5723},{"n":"Montijo","c":"Portugal","y":38.7049,"x":-8.9757},{"n":"Jaragua","c":"Brazil","y":-15.7569,"x":-49.3339},{"n":"Herriman","c":"United States","y":40.4899,"x":-112.0171},{"n":"Willich","c":"Germany","y":51.2631,"x":6.5492},{"n":"Severomorsk","c":"Russia","y":69.0692,"x":33.4167},{"n":"Tadmur","c":"Syria","y":34.56,"x":38.2672},{"n":"Misterbianco","c":"Italy","y":37.5183,"x":15.0069},{"n":"Farmington","c":"United States","y":36.7555,"x":-108.1823},{"n":"New Bern","c":"United States","y":35.0955,"x":-77.0723},{"n":"Humaita","c":"Brazil","y":-7.5061,"x":-63.0208},{"n":"Cheremkhovo","c":"Russia","y":53.15,"x":103.0667},{"n":"Gummersbach","c":"Germany","y":51.0333,"x":7.5667},{"n":"Hinesville","c":"United States","y":31.8247,"x":-81.6135},{"n":"Repalle","c":"India","y":16.02,"x":80.85},{"n":"Snezhinsk","c":"Russia","y":56.0833,"x":60.7333},{"n":"Ravensburg","c":"Germany","y":47.7831,"x":9.6114},{"n":"Hassan Abdal","c":"Pakistan","y":33.8195,"x":72.689},{"n":"Douyu","c":"China","y":37.9007,"x":114.5035},{"n":"Konibodom","c":"Tajikistan","y":40.2833,"x":70.4167},{"n":"Mercedes","c":"Philippines","y":14.1093,"x":123.0109},{"n":"Sakaidecho","c":"Japan","y":34.3164,"x":133.8606},{"n":"Zabid","c":"Yemen","y":14.2,"x":43.3167},{"n":"Fangcun","c":"China","y":37.9799,"x":114.549},{"n":"Goslar","c":"Germany","y":51.906,"x":10.4292},{"n":"Horsham","c":"United Kingdom","y":51.062,"x":-0.325},{"n":"Collierville","c":"United States","y":35.0471,"x":-89.6988},{"n":"Utrera","c":"Spain","y":37.183,"x":-5.767},{"n":"Campos do Jordao","c":"Brazil","y":-22.7394,"x":-45.5914},{"n":"Nazarovo","c":"Russia","y":56.0064,"x":90.3914},{"n":"West Lafayette","c":"United States","y":40.4432,"x":-86.9239},{"n":"Yuki","c":"Japan","y":36.3,"x":139.8833},{"n":"Florissant","c":"United States","y":38.7996,"x":-90.3269},{"n":"Laval","c":"France","y":48.0733,"x":-0.7689},{"n":"Hoffman Estates","c":"United States","y":42.0639,"x":-88.1468},{"n":"Mozhga","c":"Russia","y":56.45,"x":52.2167},{"n":"Kirishi","c":"Russia","y":59.45,"x":32.0167},{"n":"El Bagre","c":"Colombia","y":7.6047,"x":-74.8086},{"n":"Ye","c":"Myanmar","y":15.2533,"x":97.8679},{"n":"Queen Creek","c":"United States","y":33.2386,"x":-111.6343},{"n":"Kizlyar","c":"Russia","y":43.85,"x":46.7167},{"n":"Fafe","c":"Portugal","y":41.45,"x":-8.1667},{"n":"Bani Walid","c":"Libya","y":31.7455,"x":13.9835},{"n":"Kannapolis","c":"United States","y":35.4764,"x":-80.6403},{"n":"Pulawy","c":"Poland","y":51.4166,"x":21.9694},{"n":"Turtkul","c":"Uzbekistan","y":41.55,"x":61},{"n":"Beloeil","c":"Canada","y":45.5667,"x":-73.2},{"n":"Urbiztondo","c":"Philippines","y":15.8227,"x":120.3295},{"n":"Longwan","c":"China","y":38.9564,"x":116.1626},{"n":"Houten","c":"Netherlands","y":52.0261,"x":5.1728},{"n":"Mahalapye","c":"Botswana","y":-23.1041,"x":26.8142},{"n":"Cardona","c":"Philippines","y":14.4861,"x":121.2289},{"n":"Mweka","c":"Congo (Kinshasa)","y":-4.8519,"x":21.5594},{"n":"Belleville","c":"Canada","y":44.1667,"x":-77.3833},{"n":"Beruniy","c":"Uzbekistan","y":41.6833,"x":60.75},{"n":"Methuen Town","c":"United States","y":42.734,"x":-71.1889},{"n":"Santa Lucia del Camino","c":"Mexico","y":17.0667,"x":-96.6833},{"n":"Kulu","c":"Turkey","y":39.0901,"x":33.0807},{"n":"El Salvador","c":"Philippines","y":8.5667,"x":124.5167},{"n":"Yasu","c":"Japan","y":35.0675,"x":136.0258},{"n":"Baranoa","c":"Colombia","y":10.7956,"x":-74.9194},{"n":"Shakhtarsk","c":"Ukraine","y":48.0333,"x":38.4833},{"n":"La Calera","c":"Chile","y":-32.7833,"x":-71.2167},{"n":"Rastatt","c":"Germany","y":48.8572,"x":8.2031},{"n":"Sittard","c":"Netherlands","y":51,"x":5.8667},{"n":"Starogard Gdanski","c":"Poland","y":53.9667,"x":18.5333},{"n":"Sahuarita","c":"United States","y":31.9323,"x":-110.9654},{"n":"Lorrach","c":"Germany","y":47.6156,"x":7.6614},{"n":"Cataingan","c":"Philippines","y":12,"x":123.9833},{"n":"Bani","c":"Philippines","y":16.1869,"x":119.8592},{"n":"Tebourba","c":"Tunisia","y":36.8295,"x":9.8411},{"n":"Rincon de la Victoria","c":"Spain","y":36.7167,"x":-4.2833},{"n":"Qinhe","c":"China","y":36.5047,"x":112.3335},{"n":"Artur Nogueira","c":"Brazil","y":-22.5731,"x":-47.1725},{"n":"Traverse City","c":"United States","y":44.7547,"x":-85.6035},{"n":"Mirabel","c":"Canada","y":45.65,"x":-74.0833},{"n":"San Ignacio","c":"Paraguay","y":-26.8867,"x":-57.0283},{"n":"Severn","c":"United States","y":39.1355,"x":-76.6958},{"n":"Nova Venecia","c":"Brazil","y":-18.7108,"x":-40.4008},{"n":"Catalina Foothills","c":"United States","y":32.3041,"x":-110.8835},{"n":"Galveston","c":"United States","y":29.2487,"x":-94.891},{"n":"Pozi","c":"Taiwan","y":23.4611,"x":120.242},{"n":"Amora","c":"Portugal","y":38.6265,"x":-9.1189},{"n":"Cookeville","c":"United States","y":36.1484,"x":-85.5114},{"n":"Chinu","c":"Colombia","y":9.1097,"x":-75.3981},{"n":"Leith","c":"United Kingdom","y":55.98,"x":-3.17},{"n":"Peine","c":"Germany","y":52.3203,"x":10.2336},{"n":"Mishawaka","c":"United States","y":41.6736,"x":-86.1669},{"n":"Emden","c":"Germany","y":53.3669,"x":7.2061},{"n":"Ardea","c":"Italy","y":41.6167,"x":12.55},{"n":"Rowland Heights","c":"United States","y":33.9716,"x":-117.8911},{"n":"Kitaotao","c":"Philippines","y":7.6397,"x":125.0089},{"n":"Bullhead City","c":"United States","y":35.1205,"x":-114.546},{"n":"Irondequoit","c":"United States","y":43.2096,"x":-77.5705},{"n":"Stillwater","c":"United States","y":36.1316,"x":-97.074},{"n":"Cabagan","c":"Philippines","y":17.4333,"x":121.7667},{"n":"Tajura'","c":"Libya","y":32.8819,"x":13.34},{"n":"Macaubas","c":"Brazil","y":-13.0189,"x":-42.6989},{"n":"Rivoli","c":"Italy","y":45.0725,"x":7.5272},{"n":"Puerto Berrio","c":"Colombia","y":6.4906,"x":-74.4047},{"n":"East Hartford","c":"United States","y":41.7634,"x":-72.6152},{"n":"Bocaiuva","c":"Brazil","y":-17.1078,"x":-43.815},{"n":"Huanghuajie","c":"China","y":27.9951,"x":103.5516},{"n":"Forney","c":"United States","y":32.744,"x":-96.4529},{"n":"Nanjian","c":"China","y":25.053,"x":100.5231},{"n":"Xiazhai","c":"China","y":27.6909,"x":107.1837},{"n":"Sao Joaquim da Barra","c":"Brazil","y":-20.5808,"x":-47.855},{"n":"Leon","c":"Philippines","y":10.7808,"x":122.3894},{"n":"Erftstadt","c":"Germany","y":50.8167,"x":6.7667},{"n":"Estancia","c":"Philippines","y":11.45,"x":123.15},{"n":"Alta Floresta","c":"Brazil","y":-9.8758,"x":-56.0858},{"n":"Mantova","c":"Italy","y":45.1564,"x":10.7911},{"n":"Lindong","c":"China","y":43.9673,"x":119.357},{"n":"Vargem Grande Paulista","c":"Brazil","y":-23.6028,"x":-47.0258},{"n":"Borovichi","c":"Russia","y":58.4,"x":33.9167},{"n":"Itarare","c":"Brazil","y":-24.1125,"x":-49.3317},{"n":"Bhainsa","c":"India","y":19.1,"x":77.9667},{"n":"Roslavl","c":"Russia","y":53.9492,"x":32.8569},{"n":"Beni Yakhlef","c":"Morocco","y":33.6681,"x":-7.2514},{"n":"Gogrial","c":"South Sudan","y":8.5337,"x":28.1167},{"n":"Shankou","c":"China","y":24.5032,"x":116.4046},{"n":"Miyoshi","c":"Japan","y":34.8058,"x":132.8517},{"n":"Novovyatsk","c":"Russia","y":58.5083,"x":49.6994},{"n":"Sesto Fiorentino","c":"Italy","y":43.8333,"x":11.2},{"n":"Sardasht","c":"Iran","y":36.1553,"x":45.4789},{"n":"Buluan","c":"Philippines","y":6.7154,"x":124.7854},{"n":"Albi","c":"France","y":43.9289,"x":2.1464},{"n":"Zaragoza","c":"Philippines","y":15.4531,"x":120.7911},{"n":"Shawinigan","c":"Canada","y":46.5667,"x":-72.75},{"n":"Tepeapulco","c":"Mexico","y":19.7856,"x":-98.5517},{"n":"Donsol","c":"Philippines","y":12.9167,"x":123.6},{"n":"Kahemba","c":"Congo (Kinshasa)","y":-7.2829,"x":19},{"n":"Porvoo","c":"Finland","y":60.3931,"x":25.6639},{"n":"Abu Hamad","c":"Sudan","y":19.537,"x":33.326},{"n":"Chomutov","c":"Czechia","y":50.4628,"x":13.4111},{"n":"Nichinan","c":"Japan","y":31.6019,"x":131.3789},{"n":"Heidenheim","c":"Germany","y":48.6761,"x":10.1544},{"n":"Jiuzhou","c":"China","y":39.5054,"x":116.5642},{"n":"Azusa","c":"United States","y":34.1386,"x":-117.9124},{"n":"Upper Buchanan","c":"Liberia","y":5.9161,"x":-10.0525},{"n":"Nahuizalco","c":"El Salvador","y":13.7833,"x":-89.7333},{"n":"Barobo","c":"Philippines","y":8.55,"x":126.2},{"n":"Orangetown","c":"United States","y":41.0526,"x":-73.9475},{"n":"Buguruslan","c":"Russia","y":53.6167,"x":52.4167},{"n":"Xankandi","c":"Azerbaijan","y":39.8153,"x":46.7519},{"n":"Ibajay","c":"Philippines","y":11.8167,"x":122.1667},{"n":"Slonim","c":"Belarus","y":53.0833,"x":25.3167},{"n":"Ramhormoz","c":"Iran","y":31.2783,"x":49.6064},{"n":"Nettuno","c":"Italy","y":41.4667,"x":12.6667},{"n":"Ashburn","c":"United States","y":39.03,"x":-77.4711},{"n":"Bloomsburg","c":"United States","y":41.0027,"x":-76.4561},{"n":"Moss","c":"Norway","y":59.434,"x":10.6577},{"n":"Titay","c":"Philippines","y":7.8682,"x":122.5613},{"n":"Bergkamen","c":"Germany","y":51.6167,"x":7.6333},{"n":"Gualan","c":"Guatemala","y":15.1333,"x":-89.3667},{"n":"Morehead City","c":"United States","y":34.7308,"x":-76.7387},{"n":"Sesimbra","c":"Portugal","y":38.4437,"x":-9.0996},{"n":"Leonberg","c":"Germany","y":48.8014,"x":9.0131},{"n":"Suzaka","c":"Japan","y":36.6511,"x":138.3069},{"n":"IJmuiden","c":"Netherlands","y":52.4586,"x":4.6194},{"n":"Tomisato","c":"Japan","y":35.7267,"x":140.3431},{"n":"Ridder","c":"Kazakhstan","y":50.35,"x":83.5167},{"n":"Coral Gables","c":"United States","y":25.7037,"x":-80.2715},{"n":"Guacharachi","c":"Mexico","y":27.15,"x":-107.3167},{"n":"Ifakara","c":"Tanzania","y":-8.1296,"x":36.68},{"n":"Chioggia","c":"Italy","y":45.2189,"x":12.2785},{"n":"Enid","c":"United States","y":36.4061,"x":-97.8701},{"n":"Zyryanovsk","c":"Kazakhstan","y":49.7453,"x":84.2548},{"n":"Zongshizhuang","c":"China","y":37.8615,"x":115.0575},{"n":"Cimitarra","c":"Colombia","y":6.3133,"x":-73.95},{"n":"Berber","c":"Sudan","y":18.017,"x":33.9833},{"n":"Tokamachi","c":"Japan","y":37.1275,"x":138.7557},{"n":"Maria la Baja","c":"Colombia","y":9.9811,"x":-75.2986},{"n":"Liujiaxia","c":"China","y":35.9423,"x":103.3146},{"n":"Hikari","c":"Japan","y":33.9617,"x":131.9422},{"n":"Wofotang","c":"China","y":38.619,"x":116.2681},{"n":"Oroville","c":"United States","y":39.4999,"x":-121.5634},{"n":"Evreux","c":"France","y":49.02,"x":1.15},{"n":"Ozgon","c":"Kyrgyzstan","y":40.7667,"x":73.3},{"n":"Adeje","c":"Spain","y":28.1167,"x":-16.7167},{"n":"Okhtyrka","c":"Ukraine","y":50.3074,"x":34.9016},{"n":"Padre Garcia","c":"Philippines","y":13.8833,"x":121.2167},{"n":"Donglizhuang","c":"China","y":37.9351,"x":115.0838},{"n":"Bad Oeynhausen","c":"Germany","y":52.2,"x":8.8},{"n":"Villaguay","c":"Argentina","y":-31.85,"x":-59.0167},{"n":"Muhanga","c":"Rwanda","y":-2.0783,"x":29.7581},{"n":"Jiashizhuang","c":"China","y":37.8683,"x":114.9478},{"n":"Portage","c":"United States","y":42.2,"x":-85.5906},{"n":"Christchurch","c":"United Kingdom","y":50.73,"x":-1.78},{"n":"Nomimachi","c":"Japan","y":36.4375,"x":136.4961},{"n":"Albury","c":"Australia","y":-36.0806,"x":146.9158},{"n":"Minot","c":"United States","y":48.2375,"x":-101.2781},{"n":"Empoli","c":"Italy","y":43.7167,"x":10.95},{"n":"Samaniego","c":"Colombia","y":1.3364,"x":-77.5925},{"n":"Cwmbran","c":"United Kingdom","y":51.653,"x":-3.021},{"n":"Pasacao","c":"Philippines","y":13.5167,"x":123.05},{"n":"Changyon","c":"Korea, North","y":38.2517,"x":125.1021},{"n":"Dunwoody","c":"United States","y":33.9418,"x":-84.3122},{"n":"Ad Darwa","c":"Morocco","y":33.4167,"x":-7.5333},{"n":"Beberibe","c":"Brazil","y":-4.18,"x":-38.1308},{"n":"Poway","c":"United States","y":32.9871,"x":-117.0201},{"n":"Libertador General San Martin","c":"Argentina","y":-23.8,"x":-64.7833},{"n":"Haverford","c":"United States","y":39.9868,"x":-75.3164},{"n":"Monopoli","c":"Italy","y":40.95,"x":17.3},{"n":"Magpet","c":"Philippines","y":7.1167,"x":125.1167},{"n":"Agustin Codazzi","c":"Colombia","y":10.0367,"x":-73.2369},{"n":"Santa Rosa","c":"Ecuador","y":-3.4522,"x":-79.9617},{"n":"Prievidza","c":"Slovakia","y":48.7714,"x":18.6242},{"n":"Lecco","c":"Italy","y":45.85,"x":9.4},{"n":"San Jacinto","c":"United States","y":33.797,"x":-116.9916},{"n":"San Benedetto del Tronto","c":"Italy","y":42.9438,"x":13.8833},{"n":"Lesnoy","c":"Russia","y":58.6333,"x":59.7833},{"n":"Carmen de Viboral","c":"Colombia","y":6.0819,"x":-75.3342},{"n":"Freising","c":"Germany","y":48.4028,"x":11.7489},{"n":"Palencia","c":"Guatemala","y":14.6676,"x":-90.3575},{"n":"Starachowice","c":"Poland","y":51.05,"x":21.0667},{"n":"Kalamansig","c":"Philippines","y":6.5667,"x":124.05},{"n":"La Reja","c":"Argentina","y":-34.6394,"x":-58.8283},{"n":"Cuyahoga Falls","c":"United States","y":41.1641,"x":-81.5207},{"n":"Ascoli Piceno","c":"Italy","y":42.8547,"x":13.5753},{"n":"Lower Paxton","c":"United States","y":40.3183,"x":-76.7983},{"n":"Rheda-Wiedenbruck","c":"Germany","y":51.8417,"x":8.3},{"n":"Downers Grove","c":"United States","y":41.7949,"x":-88.017},{"n":"Jales","c":"Brazil","y":-20.2689,"x":-50.5458},{"n":"Libungan","c":"Philippines","y":7.25,"x":124.5167},{"n":"Bedford","c":"United States","y":32.8464,"x":-97.135},{"n":"Reedley","c":"United States","y":36.5987,"x":-119.4473},{"n":"Marana","c":"United States","y":32.4355,"x":-111.1558},{"n":"Kiblawan","c":"Philippines","y":6.6167,"x":125.2167},{"n":"Hamtic","c":"Philippines","y":10.7,"x":121.9833},{"n":"Al Mayadin","c":"Syria","y":35.0208,"x":40.4533},{"n":"Claveria","c":"Philippines","y":8.61,"x":124.8947},{"n":"Huaquillas","c":"Ecuador","y":-3.4803,"x":-80.2317},{"n":"Martina Franca","c":"Italy","y":40.7,"x":17.3333},{"n":"Murray","c":"United States","y":40.6498,"x":-111.8874},{"n":"Bornheim","c":"Germany","y":50.7592,"x":7.005},{"n":"Omitama","c":"Japan","y":36.2394,"x":140.3525},{"n":"Pascagoula","c":"United States","y":30.3665,"x":-88.5507},{"n":"Martigues","c":"France","y":43.4053,"x":5.0475},{"n":"Waingapu","c":"Indonesia","y":-9.6582,"x":120.253},{"n":"Brandon","c":"Canada","y":49.8483,"x":-99.95},{"n":"Batajnica","c":"Serbia","y":44.9022,"x":20.2814},{"n":"Bom Conselho","c":"Brazil","y":-9.17,"x":-36.68},{"n":"Sanare","c":"Venezuela","y":9.7822,"x":-69.7931},{"n":"El Jem","c":"Tunisia","y":35.3,"x":10.7167},{"n":"Dachau","c":"Germany","y":48.2603,"x":11.4342},{"n":"Suwa","c":"Japan","y":36.0392,"x":138.1142},{"n":"Ami","c":"Japan","y":36.0308,"x":140.215},{"n":"Jasdan","c":"India","y":22.03,"x":71.2},{"n":"Ladysmith","c":"South Africa","y":-28.5539,"x":29.7825},{"n":"Kozlu","c":"Turkey","y":41.4333,"x":31.75},{"n":"Minalin","c":"Philippines","y":14.9667,"x":120.6833},{"n":"Gronau","c":"Germany","y":52.2125,"x":7.0417},{"n":"Garmsar","c":"Iran","y":35.2167,"x":52.3333},{"n":"Settimo Torinese","c":"Italy","y":45.1333,"x":7.7667},{"n":"'Ain Azel","c":"Algeria","y":35.8433,"x":5.5219},{"n":"Wakema","c":"Myanmar","y":16.6133,"x":95.1829},{"n":"Port Macquarie","c":"Australia","y":-31.4333,"x":152.9},{"n":"Rimouski","c":"Canada","y":48.45,"x":-68.53},{"n":"St. Louis Park","c":"United States","y":44.9488,"x":-93.3649},{"n":"Cuxhaven","c":"Germany","y":53.8667,"x":8.7},{"n":"Angol","c":"Chile","y":-37.7988,"x":-72.7086},{"n":"San Narciso","c":"Philippines","y":13.5677,"x":122.5667},{"n":"Penablanca","c":"Philippines","y":17.6333,"x":121.7833},{"n":"Yarumal","c":"Colombia","y":6.9633,"x":-75.4172},{"n":"Namtu","c":"Myanmar","y":23.0837,"x":97.4},{"n":"Rio Grande City","c":"United States","y":26.3808,"x":-98.8215},{"n":"Matay","c":"Egypt","y":28.4167,"x":30.7833},{"n":"Draper","c":"United States","y":40.4957,"x":-111.8605},{"n":"Gava","c":"Spain","y":41.3072,"x":2.0039},{"n":"Rumia","c":"Poland","y":54.5667,"x":18.4},{"n":"Dongshan","c":"China","y":22.0628,"x":112.8292},{"n":"Harderwijk","c":"Netherlands","y":52.3506,"x":5.6172},{"n":"Sibonga","c":"Philippines","y":10.0333,"x":123.5667},{"n":"Corato","c":"Italy","y":41.15,"x":16.4},{"n":"Kolobrzeg","c":"Poland","y":54.1667,"x":15.5667},{"n":"Zutphen","c":"Netherlands","y":52.14,"x":6.195},{"n":"Sanmu","c":"Japan","y":35.6028,"x":140.4136},{"n":"Beveren","c":"Belgium","y":51.2,"x":4.25},{"n":"Kurganinsk","c":"Russia","y":44.8833,"x":40.6},{"n":"Alsdorf","c":"Germany","y":50.8744,"x":6.1615},{"n":"Straubing","c":"Germany","y":48.8772,"x":12.5758},{"n":"San Pedro Mixtepec","c":"Mexico","y":16,"x":-97.1169},{"n":"Paducah","c":"United States","y":37.0711,"x":-88.6436},{"n":"`Akko","c":"Israel","y":32.9261,"x":35.0839},{"n":"Baiao","c":"Brazil","y":-2.7908,"x":-49.6719},{"n":"Findlay","c":"United States","y":41.0467,"x":-83.6379},{"n":"Ishigaki","c":"Japan","y":24.3333,"x":124.15},{"n":"Dornbirn","c":"Austria","y":47.4167,"x":9.75},{"n":"Damavand","c":"Iran","y":35.7178,"x":52.065},{"n":"Bel Air South","c":"United States","y":39.5051,"x":-76.3197},{"n":"Bulungu","c":"Congo (Kinshasa)","y":-4.5496,"x":18.6},{"n":"Kyle","c":"United States","y":29.9937,"x":-97.8859},{"n":"Tarnobrzeg","c":"Poland","y":50.5833,"x":21.6833},{"n":"Longtoushan Jiezi","c":"China","y":27.1157,"x":103.3817},{"n":"Decin","c":"Czechia","y":50.7736,"x":14.1961},{"n":"Durham","c":"United Kingdom","y":54.7761,"x":-1.5733},{"n":"Xique-Xique","c":"Brazil","y":-10.8229,"x":-42.7281},{"n":"Campi Bisenzio","c":"Italy","y":43.8256,"x":11.1333},{"n":"Santa Catarina Ixtahuacan","c":"Guatemala","y":14.8,"x":-91.3667},{"n":"Rio Grande da Serra","c":"Brazil","y":-23.7439,"x":-46.3978},{"n":"Beypazari","c":"Turkey","y":40.1703,"x":31.9211},{"n":"Zhujiacun","c":"China","y":26.3164,"x":104.3893},{"n":"Pangkou","c":"China","y":38.6457,"x":115.9438},{"n":"Turda","c":"Romania","y":46.5667,"x":23.7833},{"n":"Ocoee","c":"United States","y":28.5787,"x":-81.5338},{"n":"Brianka","c":"Ukraine","y":48.5133,"x":38.6431},{"n":"Burleson","c":"United States","y":32.517,"x":-97.3343},{"n":"Mauriti","c":"Brazil","y":-7.3889,"x":-38.7739},{"n":"Kita","c":"Mali","y":13.0504,"x":-9.4833},{"n":"Finike","c":"Turkey","y":36.3,"x":30.15},{"n":"Donetsk","c":"Russia","y":48.3369,"x":39.9449},{"n":"Alta Gracia","c":"Argentina","y":-31.6667,"x":-64.4333},{"n":"Shimotsucho-kominami","c":"Japan","y":34.1556,"x":135.2092},{"n":"Farmers Branch","c":"United States","y":32.9272,"x":-96.8804},{"n":"Paterno","c":"Italy","y":37.5667,"x":14.9},{"n":"Semara","c":"Morocco","y":26.7333,"x":-11.6833},{"n":"East Lansing","c":"United States","y":42.748,"x":-84.4835},{"n":"Uniontown","c":"United States","y":39.8994,"x":-79.7244},{"n":"Yongping","c":"China","y":37.0103,"x":109.8243},{"n":"Kashira","c":"Russia","y":54.8333,"x":38.15},{"n":"Shelekhov","c":"Russia","y":52.2,"x":104.1},{"n":"Jeffersonville","c":"United States","y":38.3376,"x":-85.7026},{"n":"Winder","c":"United States","y":33.9917,"x":-83.7218},{"n":"Wauwatosa","c":"United States","y":43.0615,"x":-88.0347},{"n":"Asturias","c":"Philippines","y":10.5679,"x":123.7172},{"n":"Sison","c":"Philippines","y":16.1667,"x":120.5167},{"n":"Presidente Dutra","c":"Brazil","y":-5.29,"x":-44.49},{"n":"Vila Verde","c":"Portugal","y":41.65,"x":-8.4333},{"n":"Ena","c":"Japan","y":35.4494,"x":137.4128},{"n":"Mengmeng","c":"China","y":23.4718,"x":99.8336},{"n":"Ridderkerk","c":"Netherlands","y":51.8667,"x":4.6},{"n":"Skierniewice","c":"Poland","y":51.9528,"x":20.1417},{"n":"Littleton","c":"United States","y":39.5915,"x":-105.0188},{"n":"General Tinio","c":"Philippines","y":15.35,"x":121.05},{"n":"Amulung","c":"Philippines","y":17.8387,"x":121.7235},{"n":"Otradnyy","c":"Russia","y":53.3667,"x":51.35},{"n":"Aringay","c":"Philippines","y":16.3982,"x":120.3555},{"n":"Soest","c":"Germany","y":51.5711,"x":8.1092},{"n":"Tonami","c":"Japan","y":36.65,"x":136.9667},{"n":"Conceicao do Araguaia","c":"Brazil","y":-8.2578,"x":-49.265},{"n":"Cumberland","c":"United States","y":39.6515,"x":-78.7585},{"n":"Higashine","c":"Japan","y":38.4314,"x":140.3911},{"n":"Mapastepec","c":"Mexico","y":15.4198,"x":-92.9492},{"n":"Monte Carmelo","c":"Brazil","y":-18.725,"x":-47.4989},{"n":"San Francisco","c":"Guatemala","y":16.8017,"x":-89.9342},{"n":"Stade","c":"Germany","y":53.6008,"x":9.4764},{"n":"Diamantina","c":"Brazil","y":-18.2489,"x":-43.6},{"n":"Medias","c":"Romania","y":46.1639,"x":24.3508},{"n":"Cedar Hill","c":"United States","y":32.581,"x":-96.9591},{"n":"Santana do Ipanema","c":"Brazil","y":-9.3778,"x":-37.245},{"n":"Impasugong","c":"Philippines","y":8.3,"x":125},{"n":"Golpayegan","c":"Iran","y":33.4536,"x":50.2883},{"n":"Charleville-Mezieres","c":"France","y":49.7719,"x":4.7161},{"n":"Dila","c":"Ethiopia","y":6.4104,"x":38.31},{"n":"Rancho Santa Margarita","c":"United States","y":33.6318,"x":-117.5989},{"n":"Jiquilisco","c":"El Salvador","y":13.3167,"x":-88.5833},{"n":"Pakenham","c":"Australia","y":-38.0712,"x":145.4878},{"n":"Lousada","c":"Portugal","y":41.2833,"x":-8.2833},{"n":"Brive-la-Gaillarde","c":"France","y":45.1583,"x":1.5321},{"n":"Santa Ignacia","c":"Philippines","y":15.6167,"x":120.4333},{"n":"Masinloc","c":"Philippines","y":15.5333,"x":119.95},{"n":"Kuilsrivier","c":"South Africa","y":-34.0333,"x":18.7},{"n":"Yecun","c":"China","y":33.7663,"x":110.1305},{"n":"Cornelio Procopio","c":"Brazil","y":-23.1808,"x":-50.6469},{"n":"Atalaia","c":"Brazil","y":-9.5019,"x":-36.0228},{"n":"East Brunswick","c":"United States","y":40.4281,"x":-74.4179},{"n":"Luwuk","c":"Indonesia","y":-0.9396,"x":122.79},{"n":"Bantacan","c":"Philippines","y":7.5333,"x":126.1333},{"n":"Saint-Herblain","c":"France","y":47.2122,"x":-1.6497},{"n":"Tuba","c":"Philippines","y":16.3167,"x":120.55},{"n":"Penco","c":"Chile","y":-36.7333,"x":-72.9833},{"n":"Herzogenrath","c":"Germany","y":50.8667,"x":6.1},{"n":"Ribeirao","c":"Brazil","y":-8.5139,"x":-35.3778},{"n":"Caramoan","c":"Philippines","y":13.7707,"x":123.8631},{"n":"Vyshniy Volochek","c":"Russia","y":57.5913,"x":34.5645},{"n":"Saint-Priest","c":"France","y":45.6972,"x":4.9447},{"n":"Al Madrah Sama'il","c":"Oman","y":23.3032,"x":57.9782},{"n":"Al Majma`ah","c":"Saudi Arabia","y":25.9039,"x":45.3456},{"n":"Beavercreek","c":"United States","y":39.731,"x":-84.0624},{"n":"Joao Pinheiro","c":"Brazil","y":-17.7442,"x":-46.1739},{"n":"Dulag","c":"Philippines","y":10.9525,"x":125.0317},{"n":"Niagara Falls","c":"United States","y":43.0921,"x":-79.0147},{"n":"Hitachi-ota","c":"Japan","y":36.5383,"x":140.5311},{"n":"Snizhne","c":"Ukraine","y":48.0167,"x":38.7667},{"n":"Amahai","c":"Indonesia","y":-3.3281,"x":128.9405},{"n":"McLean","c":"United States","y":38.9436,"x":-77.1943},{"n":"Ipiau","c":"Brazil","y":-14.1369,"x":-39.7339},{"n":"Rieti","c":"Italy","y":42.4044,"x":12.8567},{"n":"President Roxas","c":"Philippines","y":7.1544,"x":125.0558},{"n":"`Amuda","c":"Syria","y":37.1042,"x":40.93},{"n":"Isabel","c":"Philippines","y":10.9333,"x":124.4333},{"n":"Dumingag","c":"Philippines","y":8.1667,"x":123.35},{"n":"San Lorenzo","c":"Argentina","y":-28.12,"x":-58.77},{"n":"Chaidari","c":"Greece","y":38.0167,"x":23.65},{"n":"East Providence","c":"United States","y":41.8065,"x":-71.3565},{"n":"Jitaicun","c":"China","y":36.3533,"x":115.3048},{"n":"Kafue","c":"Zambia","y":-15.78,"x":28.18},{"n":"Kutno","c":"Poland","y":52.2333,"x":19.3667},{"n":"Livny","c":"Russia","y":52.4253,"x":37.6083},{"n":"Azna","c":"Iran","y":33.4539,"x":49.455},{"n":"East Honolulu","c":"United States","y":21.2975,"x":-157.7211},{"n":"Chesterfield","c":"United States","y":38.6588,"x":-90.5804},{"n":"La Vega","c":"Colombia","y":2.0008,"x":-76.7778},{"n":"Capao Bonito","c":"Brazil","y":-24.0058,"x":-48.3494},{"n":"San Jose Pinula","c":"Guatemala","y":14.5446,"x":-90.4083},{"n":"Ban Plai Bua Phatthana","c":"Thailand","y":13.9032,"x":100.3989},{"n":"Santa Ana Chiautempan","c":"Mexico","y":19.3167,"x":-98.1833},{"n":"Lohja","c":"Finland","y":60.25,"x":24.0667},{"n":"San Andres de Sotavento","c":"Colombia","y":9.1453,"x":-75.5086},{"n":"Sanski Most","c":"Bosnia And Herzegovina","y":44.7667,"x":16.6667},{"n":"Chaparral","c":"Colombia","y":3.7236,"x":-75.4847},{"n":"Bothell","c":"United States","y":47.7735,"x":-122.2044},{"n":"Jobabo","c":"Cuba","y":20.9078,"x":-77.2831},{"n":"Villa Constitucion","c":"Argentina","y":-33.2333,"x":-60.3333},{"n":"Andes","c":"Colombia","y":5.6556,"x":-75.8803},{"n":"Saint-Malo","c":"France","y":48.6481,"x":-2.0075},{"n":"West Orange","c":"United States","y":40.7893,"x":-74.2627},{"n":"Ouled Moussa","c":"Algeria","y":36.6831,"x":3.3681},{"n":"Tangdukou","c":"China","y":26.9949,"x":111.2708},{"n":"Kingisepp","c":"Russia","y":59.3667,"x":28.6},{"n":"Talghar","c":"Kazakhstan","y":43.3,"x":77.2333},{"n":"Liulin","c":"China","y":36.557,"x":109.4731},{"n":"Fellbach","c":"Germany","y":48.8086,"x":9.2758},{"n":"Daxiang","c":"China","y":22.3775,"x":112.8008},{"n":"Yabrud","c":"Syria","y":33.9672,"x":36.6572},{"n":"Blois","c":"France","y":47.5939,"x":1.3281},{"n":"Tomioka","c":"Japan","y":36.26,"x":138.89},{"n":"Glenview","c":"United States","y":42.0825,"x":-87.8216},{"n":"Ban Bang Mae Nang","c":"Thailand","y":13.8815,"x":100.3759},{"n":"Yehe","c":"China","y":37.9416,"x":114.5928},{"n":"Tursunzoda","c":"Tajikistan","y":38.5108,"x":68.2303},{"n":"Ayapel","c":"Colombia","y":8.3125,"x":-75.145},{"n":"Oberursel","c":"Germany","y":50.2028,"x":8.5769},{"n":"Mentor","c":"United States","y":41.6895,"x":-81.3361},{"n":"Antalaha","c":"Madagascar","y":-14.8833,"x":50.2833},{"n":"Mabini","c":"Philippines","y":13.7167,"x":120.9},{"n":"Puertollano","c":"Spain","y":38.6833,"x":-4.1167},{"n":"Landau","c":"Germany","y":49.1994,"x":8.1231},{"n":"Keller","c":"United States","y":32.9337,"x":-97.2255},{"n":"Barras","c":"Brazil","y":-4.2469,"x":-42.2958},{"n":"Zarzal","c":"Colombia","y":4.3942,"x":-76.0703},{"n":"Douz","c":"Tunisia","y":33.4572,"x":9.0258},{"n":"Zarinsk","c":"Russia","y":53.7,"x":84.9167},{"n":"Huatan","c":"Taiwan","y":24.0316,"x":120.558},{"n":"Marhanets","c":"Ukraine","y":47.648,"x":34.6167},{"n":"Schwerte","c":"Germany","y":51.4458,"x":7.5653},{"n":"Poso","c":"Indonesia","y":-1.3896,"x":120.76},{"n":"Urrao","c":"Colombia","y":6.3156,"x":-76.1342},{"n":"Tres Arroyos","c":"Argentina","y":-38.3667,"x":-60.2667},{"n":"Aubagne","c":"France","y":43.2908,"x":5.5708},{"n":"Nysa","c":"Poland","y":50.4738,"x":17.3344},{"n":"Calimaya","c":"Mexico","y":19.1608,"x":-99.6172},{"n":"Ha Tien","c":"Vietnam","y":10.3833,"x":104.4833},{"n":"Neunkirchen","c":"Germany","y":49.3448,"x":7.1799},{"n":"Qiutouzhen","c":"China","y":37.9841,"x":114.6909},{"n":"Danville","c":"United States","y":40.1423,"x":-87.6114},{"n":"Noboribetsu","c":"Japan","y":42.4128,"x":141.1067},{"n":"Guajara-Mirim","c":"Brazil","y":-10.7828,"x":-65.3394},{"n":"Frosinone","c":"Italy","y":41.6333,"x":13.35},{"n":"Pio Duran","c":"Philippines","y":13.0333,"x":123.45},{"n":"Al Qusayr","c":"Syria","y":34.5089,"x":36.5797},{"n":"Norala","c":"Philippines","y":6.55,"x":124.6667},{"n":"Cubulco","c":"Guatemala","y":15.1083,"x":-90.6306},{"n":"Wangtan","c":"China","y":39.2836,"x":118.974},{"n":"Roldanillo","c":"Colombia","y":4.4136,"x":-76.1547},{"n":"Filderstadt","c":"Germany","y":48.6667,"x":9.2167},{"n":"Siocon","c":"Philippines","y":7.7,"x":122.1333},{"n":"Fastiv","c":"Ukraine","y":50.0747,"x":29.9181},{"n":"Nanzhuangzhen","c":"China","y":23.721,"x":102.8231},{"n":"Tocoa","c":"Honduras","y":15.6833,"x":-86},{"n":"Yashan","c":"China","y":22.4776,"x":112.7289},{"n":"Valencia","c":"Colombia","y":8.2592,"x":-76.1469},{"n":"Nakai","c":"Japan","y":33.5756,"x":133.6414},{"n":"Agrinio","c":"Greece","y":38.6167,"x":21.4},{"n":"Lukavac","c":"Bosnia And Herzegovina","y":44.5333,"x":18.5333},{"n":"Dongzhuosu","c":"China","y":38.0658,"x":115.1232},{"n":"Dulmen","c":"Germany","y":51.8308,"x":7.2783},{"n":"Shimeo","c":"Japan","y":33.5914,"x":130.4797},{"n":"Fangguan","c":"China","y":39.3237,"x":115.9856},{"n":"Lubny","c":"Ukraine","y":50.0186,"x":32.9869},{"n":"Tamagawa","c":"Japan","y":33.6317,"x":130.7997},{"n":"San Francisco de los Romo","c":"Mexico","y":22.0833,"x":-102.2667},{"n":"Jablonec nad Nisou","c":"Czechia","y":50.7278,"x":15.17},{"n":"Vercelli","c":"Italy","y":45.3167,"x":8.4167},{"n":"Mahayag","c":"Philippines","y":8.1333,"x":123.3833},{"n":"Elmhurst","c":"United States","y":41.8973,"x":-87.9432},{"n":"Carcassonne","c":"France","y":43.21,"x":2.35},{"n":"Sao Mateus do Sul","c":"Brazil","y":-25.8739,"x":-50.3828},{"n":"Niquelandia","c":"Brazil","y":-14.4739,"x":-48.46},{"n":"Hof","c":"Germany","y":50.3167,"x":11.9167},{"n":"Veldhoven","c":"Netherlands","y":51.4197,"x":5.3992},{"n":"Dauis","c":"Philippines","y":9.6167,"x":123.85},{"n":"Medianeira","c":"Brazil","y":-25.295,"x":-54.0939},{"n":"Cabreuva","c":"Brazil","y":-23.3075,"x":-47.1331},{"n":"New Philadelphia","c":"United States","y":40.486,"x":-81.4402},{"n":"Melle","c":"Germany","y":52.2031,"x":8.3361},{"n":"Santa Cruz do Rio Pardo","c":"Brazil","y":-22.8989,"x":-49.6328},{"n":"Perinton","c":"United States","y":43.0781,"x":-77.4283},{"n":"Terracina","c":"Italy","y":41.2833,"x":13.25},{"n":"Sandusky","c":"United States","y":41.4437,"x":-82.7149},{"n":"Puerto Villarroel","c":"Bolivia","y":-16.8667,"x":-64.7831},{"n":"Jocotepec","c":"Mexico","y":20.1667,"x":-103.2833},{"n":"Shimenzhai","c":"China","y":40.0892,"x":119.6019},{"n":"Eusebio","c":"Brazil","y":-3.89,"x":-38.4508},{"n":"Hyvinkaa","c":"Finland","y":60.6306,"x":24.8597},{"n":"El Dorado Hills","c":"United States","y":38.675,"x":-121.049},{"n":"Cornwall","c":"Canada","y":45.0275,"x":-74.74},{"n":"Puerto Tejada","c":"Colombia","y":3.23,"x":-76.4175},{"n":"Morrinhos","c":"Brazil","y":-17.7319,"x":-49.1008},{"n":"Salina","c":"United States","y":38.8137,"x":-97.6143},{"n":"Euclid","c":"United States","y":41.5904,"x":-81.5188},{"n":"Gryazi","c":"Russia","y":52.5,"x":39.9333},{"n":"Kingman","c":"United States","y":35.217,"x":-114.0105},{"n":"Augusto Correa","c":"Brazil","y":-1.0219,"x":-46.645},{"n":"Sena Madureira","c":"Brazil","y":-9.0658,"x":-68.6569},{"n":"Panay","c":"Philippines","y":11.55,"x":122.8},{"n":"Fray Bartolome de Las Casas","c":"Guatemala","y":15.8456,"x":-89.8658},{"n":"Dendermonde","c":"Belgium","y":51.0167,"x":4.1},{"n":"Sirinhaem","c":"Brazil","y":-8.5908,"x":-35.1158},{"n":"Albuera","c":"Philippines","y":10.9186,"x":124.6923},{"n":"Kilmarnock","c":"United Kingdom","y":55.6111,"x":-4.4957},{"n":"Ayungon","c":"Philippines","y":9.8584,"x":123.1468},{"n":"Berekum","c":"Ghana","y":7.4504,"x":-2.59},{"n":"Tibigan","c":"Philippines","y":9.95,"x":123.9667},{"n":"Chalons-en-Champagne","c":"France","y":48.9575,"x":4.365},{"n":"Rio Tercero","c":"Argentina","y":-32.1768,"x":-64.113},{"n":"Kurayoshi","c":"Japan","y":35.43,"x":133.8256},{"n":"Montecristi","c":"Ecuador","y":-1.05,"x":-80.6667},{"n":"Kasaoka","c":"Japan","y":34.5072,"x":133.5072},{"n":"Torzhok","c":"Russia","y":57.0333,"x":34.9667},{"n":"Zwijndrecht","c":"Netherlands","y":51.824,"x":4.6126},{"n":"Chichigalpa","c":"Nicaragua","y":12.5667,"x":-87.0333},{"n":"Gotha","c":"Germany","y":50.9489,"x":10.7183},{"n":"Capannori","c":"Italy","y":43.8756,"x":10.5736},{"n":"Tingo Maria","c":"Peru","y":-9.3015,"x":-76.0361},{"n":"Dumarao","c":"Philippines","y":11.2667,"x":122.6833},{"n":"Tallbisah","c":"Syria","y":34.8406,"x":36.7308},{"n":"Jammalamadugu","c":"India","y":14.85,"x":78.38},{"n":"Lodi","c":"Italy","y":45.3167,"x":9.5},{"n":"Ocampo","c":"Philippines","y":13.5594,"x":123.3761},{"n":"Santiago Atitlan","c":"Guatemala","y":14.6386,"x":-91.2299},{"n":"Santo Antonio da Platina","c":"Brazil","y":-23.295,"x":-50.0769},{"n":"Takashima","c":"Japan","y":35.3528,"x":136.0356},{"n":"Marino","c":"Italy","y":41.7667,"x":12.6667},{"n":"Bunde","c":"Germany","y":52.2,"x":8.6},{"n":"Weatherford","c":"United States","y":32.7536,"x":-97.7723},{"n":"Inabanga","c":"Philippines","y":10.0333,"x":124.0667},{"n":"Mairinque","c":"Brazil","y":-23.5464,"x":-47.1836},{"n":"Roseburg","c":"United States","y":43.2232,"x":-123.3518},{"n":"Biloxi","c":"United States","y":30.4422,"x":-88.9512},{"n":"Maragogipe","c":"Brazil","y":-12.7778,"x":-38.9189},{"n":"Wittenberg","c":"Germany","y":51.8671,"x":12.6484},{"n":"Roskilde","c":"Denmark","y":55.65,"x":12.0833},{"n":"Leavenworth","c":"United States","y":39.3239,"x":-94.924},{"n":"Megion","c":"Russia","y":61.0331,"x":76.1097},{"n":"Salon-de-Provence","c":"France","y":43.6406,"x":5.0972},{"n":"Bajil","c":"Yemen","y":15.0583,"x":43.285},{"n":"Manono","c":"Congo (Kinshasa)","y":-7.2947,"x":27.4545},{"n":"Xingji","c":"China","y":38.4682,"x":116.8918},{"n":"Hokota","c":"Japan","y":36.1586,"x":140.5164},{"n":"Pontal","c":"Brazil","y":-21.0225,"x":-48.0372},{"n":"Aksay","c":"Russia","y":47.2667,"x":39.8667},{"n":"Fort Pierce","c":"United States","y":27.4256,"x":-80.3431},{"n":"Shima","c":"Japan","y":34.3283,"x":136.8306},{"n":"Weinheim","c":"Germany","y":49.5561,"x":8.6697},{"n":"Livramento de Nossa Senhora","c":"Brazil","y":-13.6428,"x":-41.8408},{"n":"Barotac Viejo","c":"Philippines","y":11.05,"x":122.85},{"n":"Winter Garden","c":"United States","y":28.5421,"x":-81.5966},{"n":"Mlada Boleslav","c":"Czechia","y":50.4125,"x":14.9064},{"n":"Oro Valley","c":"United States","y":32.4208,"x":-110.9768},{"n":"Ourem","c":"Portugal","y":39.65,"x":-8.5833},{"n":"Santa Rosa del Sur","c":"Colombia","y":7.9633,"x":-74.0533},{"n":"Erkrath","c":"Germany","y":51.2239,"x":6.9147},{"n":"Freeport City","c":"Bahamas, The","y":26.52,"x":-78.66},{"n":"Iranduba","c":"Brazil","y":-3.285,"x":-60.1886},{"n":"Caiguantun","c":"China","y":26.3363,"x":105.9841},{"n":"Guaramirim","c":"Brazil","y":-26.4728,"x":-49.0028},{"n":"Wao","c":"Philippines","y":7.6404,"x":124.7257},{"n":"Morgan Hill","c":"United States","y":37.1326,"x":-121.6417},{"n":"Ciudad Constitucion","c":"Mexico","y":25.0322,"x":-111.6703},{"n":"Haymana","c":"Turkey","y":39.4311,"x":32.4956},{"n":"Potomac","c":"United States","y":39.0141,"x":-77.1943},{"n":"Pinehurst","c":"United States","y":35.1922,"x":-79.4684},{"n":"Chippenham","c":"United Kingdom","y":51.4585,"x":-2.1158},{"n":"Changchong","c":"China","y":26.3815,"x":107.1839},{"n":"Rodgau","c":"Germany","y":50.0256,"x":8.8841},{"n":"Winchester","c":"United Kingdom","y":51.0632,"x":-1.308},{"n":"Rockwall","c":"United States","y":32.9169,"x":-96.4377},{"n":"Mata de Sao Joao","c":"Brazil","y":-12.53,"x":-38.2989},{"n":"Dracena","c":"Brazil","y":-21.4825,"x":-51.5328},{"n":"Xisa","c":"China","y":23.4372,"x":104.6714},{"n":"Salvador","c":"Cuba","y":20.2094,"x":-75.2231},{"n":"Stouffville","c":"Canada","y":43.9667,"x":-79.25},{"n":"Dingle","c":"Philippines","y":11.05,"x":122.6667},{"n":"Cascina","c":"Italy","y":43.68,"x":10.5003},{"n":"Pontes e Lacerda","c":"Brazil","y":-15.2258,"x":-59.335},{"n":"Hokuto","c":"Japan","y":41.8242,"x":140.6528},{"n":"Katipunan","c":"Philippines","y":8.5134,"x":123.2847},{"n":"Coachella","c":"United States","y":33.6905,"x":-116.143},{"n":"Olhao","c":"Portugal","y":37.0278,"x":-7.8389},{"n":"Baijie","c":"China","y":26.047,"x":106.7418},{"n":"Jones","c":"Philippines","y":16.5583,"x":121.7},{"n":"Malinao","c":"Philippines","y":13.4,"x":123.7},{"n":"Salcedo","c":"Dominican Republic","y":19.383,"x":-70.4167},{"n":"Remedios","c":"Cuba","y":22.4922,"x":-79.5458},{"n":"Sao Bento","c":"Brazil","y":-2.6958,"x":-44.8208},{"n":"New Washington","c":"Philippines","y":11.65,"x":122.4333},{"n":"Rameswaram","c":"India","y":9.28,"x":79.3},{"n":"Albstadt","c":"Germany","y":48.2119,"x":9.0239},{"n":"Cuautepec de Hinojosa","c":"Mexico","y":20.15,"x":-98.4333},{"n":"Wake Forest","c":"United States","y":35.9629,"x":-78.5141},{"n":"Bruhl","c":"Germany","y":50.8333,"x":6.9},{"n":"Alcamo","c":"Italy","y":37.9667,"x":12.9667},{"n":"Saint-Germain-en-Laye","c":"France","y":48.8989,"x":2.0938},{"n":"San Pedro Ayampuc","c":"Guatemala","y":14.7785,"x":-90.4525},{"n":"Odiongan","c":"Philippines","y":12.4,"x":122},{"n":"Pearl City","c":"United States","y":21.4031,"x":-157.9566},{"n":"Beaufort West","c":"South Africa","y":-32.35,"x":22.5833},{"n":"Rada`","c":"Yemen","y":14.4295,"x":44.8341},{"n":"Aliwal North","c":"South Africa","y":-30.7,"x":26.7},{"n":"Wallsend","c":"United Kingdom","y":54.991,"x":-1.534},{"n":"Goianira","c":"Brazil","y":-16.4958,"x":-49.4258},{"n":"Cerquilho Velho","c":"Brazil","y":-23.165,"x":-47.7436},{"n":"San Pelayo","c":"Colombia","y":8.9578,"x":-75.8375},{"n":"Kamen'-na-Obi","c":"Russia","y":53.7919,"x":81.3486},{"n":"Tupelo","c":"United States","y":34.2692,"x":-88.7318},{"n":"San Pedro Perulapan","c":"El Salvador","y":13.7667,"x":-89.0333},{"n":"Nongzhangjie","c":"China","y":24.616,"x":97.8818},{"n":"Carnot","c":"Central African Republic","y":4.9333,"x":15.8667},{"n":"Chateauroux","c":"France","y":46.8103,"x":1.6911},{"n":"Uruara","c":"Brazil","y":-3.7178,"x":-53.7369},{"n":"Shazhou","c":"China","y":40.1376,"x":94.6638},{"n":"Birak","c":"Libya","y":27.5333,"x":14.2834},{"n":"Pinamar","c":"Argentina","y":-37.1,"x":-56.85},{"n":"Georgina","c":"Canada","y":44.3,"x":-79.4333},{"n":"South Brunswick","c":"United States","y":40.384,"x":-74.5256},{"n":"Guinayangan","c":"Philippines","y":13.9,"x":122.45},{"n":"Alcira","c":"Spain","y":39.15,"x":-0.435},{"n":"West Seneca","c":"United States","y":42.8374,"x":-78.7509},{"n":"Bingmei","c":"China","y":25.7408,"x":108.9023},{"n":"Svitlovodsk","c":"Ukraine","y":49.0833,"x":33.25},{"n":"Victoriaville","c":"Canada","y":46.05,"x":-71.9667},{"n":"Ruzayevka","c":"Russia","y":54.0667,"x":44.95},{"n":"Debica","c":"Poland","y":50.0515,"x":21.4114},{"n":"Biella","c":"Italy","y":45.5664,"x":8.0533},{"n":"Brejo Santo","c":"Brazil","y":-7.4928,"x":-38.985},{"n":"Gloria","c":"Philippines","y":12.9167,"x":121.4667},{"n":"Brejo da Madre de Deus","c":"Brazil","y":-8.1458,"x":-36.3708},{"n":"Bunawan","c":"Philippines","y":8.1781,"x":125.9935},{"n":"Attleboro","c":"United States","y":41.9311,"x":-71.295},{"n":"Tank","c":"Pakistan","y":32.2167,"x":70.3833},{"n":"Seabra","c":"Brazil","y":-12.4189,"x":-41.77},{"n":"Sogod","c":"Philippines","y":10.3833,"x":124.9833},{"n":"Sugito","c":"Japan","y":36.0256,"x":139.7367},{"n":"Pine Bluff","c":"United States","y":34.2116,"x":-92.0178},{"n":"Dimitrovgrad","c":"Bulgaria","y":42.0611,"x":25.5933},{"n":"Wiener Neustadt","c":"Austria","y":47.8167,"x":16.25},{"n":"Marion","c":"United States","y":40.5933,"x":-83.1237},{"n":"Afula","c":"Israel","y":32.6078,"x":35.2897},{"n":"Shangshan","c":"China","y":23.4792,"x":115.6918},{"n":"Hassi Messaoud","c":"Algeria","y":31.7,"x":6.0667},{"n":"Beiwanglizhen","c":"China","y":37.7604,"x":114.6373},{"n":"Evesham","c":"United States","y":39.8605,"x":-74.8947},{"n":"Liuquan","c":"China","y":39.3658,"x":116.3138},{"n":"Bruchsal","c":"Germany","y":49.1333,"x":8.6},{"n":"Yaopu","c":"China","y":26.1708,"x":105.848},{"n":"Grantham","c":"United Kingdom","y":52.918,"x":-0.638},{"n":"Xinguara","c":"Brazil","y":-7.095,"x":-49.9458},{"n":"Tres Valles","c":"Mexico","y":18.2367,"x":-96.1369},{"n":"Rabinal","c":"Guatemala","y":15.1083,"x":-90.5},{"n":"Buenos Aires","c":"Costa Rica","y":9.1497,"x":-83.3334},{"n":"Hilo","c":"United States","y":19.6886,"x":-155.0864},{"n":"Kimry","c":"Russia","y":56.8667,"x":37.35},{"n":"Sete","c":"France","y":43.4053,"x":3.6975},{"n":"Shahhat","c":"Libya","y":32.8167,"x":21.85},{"n":"Barra de Sao Francisco","c":"Brazil","y":-18.755,"x":-40.8908},{"n":"Shchuchinsk","c":"Kazakhstan","y":52.9333,"x":70.2},{"n":"Parma","c":"Russia","y":65.923,"x":57.403},{"n":"Sidcup","c":"United Kingdom","y":51.4263,"x":0.1024},{"n":"Senigallia","c":"Italy","y":43.7131,"x":13.2183},{"n":"Yatagan","c":"Turkey","y":37.3425,"x":28.1393},{"n":"Kaufbeuren","c":"Germany","y":47.88,"x":10.6225},{"n":"Medemblik","c":"Netherlands","y":52.7674,"x":5.1037},{"n":"Pederneiras","c":"Brazil","y":-22.3517,"x":-48.775},{"n":"Rasskazovo","c":"Russia","y":52.6667,"x":41.8833},{"n":"Currais Novos","c":"Brazil","y":-6.2608,"x":-36.515},{"n":"Lapa","c":"Brazil","y":-25.77,"x":-49.7158},{"n":"Nadym","c":"Russia","y":65.5333,"x":72.5167},{"n":"Marau","c":"Brazil","y":-28.4489,"x":-52.2},{"n":"Drama","c":"Greece","y":41.1514,"x":24.1392},{"n":"Vallenar","c":"Chile","y":-28.57,"x":-70.76},{"n":"Dunakeszi","c":"Hungary","y":47.6297,"x":19.1381},{"n":"Pemangkat","c":"Indonesia","y":1.1727,"x":108.9808},{"n":"Volkhov","c":"Russia","y":59.9167,"x":32.35},{"n":"Houbu","c":"China","y":36.437,"x":112.9794},{"n":"Lufkin","c":"United States","y":31.3217,"x":-94.7277},{"n":"Darcheh","c":"Iran","y":32.6153,"x":51.5556},{"n":"Zhovti Vody","c":"Ukraine","y":48.35,"x":33.5167},{"n":"Middleton","c":"United Kingdom","y":53.555,"x":-2.187},{"n":"Falkensee","c":"Germany","y":52.5583,"x":13.0917},{"n":"Paraguacu Paulista","c":"Brazil","y":-22.4197,"x":-50.5797},{"n":"Bexhill","c":"United Kingdom","y":50.8424,"x":0.4676},{"n":"Chusovoy","c":"Russia","y":58.2833,"x":57.8167},{"n":"Singhanakhon","c":"Thailand","y":7.2389,"x":100.5506},{"n":"Oranienburg","c":"Germany","y":52.7544,"x":13.2369},{"n":"Jisr ash Shughur","c":"Syria","y":35.8,"x":36.3167},{"n":"Manitowoc","c":"United States","y":44.0991,"x":-87.6811},{"n":"Nidadavole","c":"India","y":16.92,"x":81.67},{"n":"Maitum","c":"Philippines","y":6.0333,"x":124.4833},{"n":"Yaoquan","c":"China","y":34.5851,"x":105.7262},{"n":"Taketoyo","c":"Japan","y":34.85,"x":136.9167},{"n":"Lake Ridge","c":"United States","y":38.6843,"x":-77.3059},{"n":"Selma","c":"United States","y":36.5715,"x":-119.6143},{"n":"Manacor","c":"Spain","y":39.57,"x":3.2089},{"n":"Talagutong","c":"Philippines","y":6.2667,"x":125.6667},{"n":"Ban Pet","c":"Thailand","y":16.4379,"x":102.7645},{"n":"Strongsville","c":"United States","y":41.3128,"x":-81.8313},{"n":"Louveira","c":"Brazil","y":-23.0864,"x":-46.9506},{"n":"Seferhisar","c":"Turkey","y":38.1975,"x":26.8388},{"n":"Arboletes","c":"Colombia","y":8.8511,"x":-76.4272},{"n":"Garca","c":"Brazil","y":-22.2153,"x":-49.6511},{"n":"Uniao","c":"Brazil","y":-4.5858,"x":-42.8639},{"n":"Vernon","c":"Canada","y":50.267,"x":-119.272},{"n":"Wallingford","c":"United States","y":41.4587,"x":-72.8039},{"n":"Paraiba do Sul","c":"Brazil","y":-22.1619,"x":-43.2928},{"n":"Kaarst","c":"Germany","y":51.2278,"x":6.6273},{"n":"Tiberias","c":"Israel","y":32.7897,"x":35.5247},{"n":"Lal-lo","c":"Philippines","y":18.2,"x":121.6667},{"n":"Etten-Leur","c":"Netherlands","y":51.5706,"x":4.6356},{"n":"Vlissingen","c":"Netherlands","y":51.45,"x":3.5833},{"n":"Masuda","c":"Japan","y":34.675,"x":131.8428},{"n":"Les Sables-d'Olonne","c":"France","y":46.4972,"x":-1.7833},{"n":"Qingfengdian","c":"China","y":38.6084,"x":115.0568},{"n":"Changtoushang","c":"China","y":19.3441,"x":110.6096},{"n":"Webster","c":"United States","y":43.2294,"x":-77.4454},{"n":"Abovyan","c":"Armenia","y":40.2739,"x":44.6256},{"n":"Mamanguape","c":"Brazil","y":-6.8389,"x":-35.1258},{"n":"Petatlan","c":"Mexico","y":17.5383,"x":-101.2739},{"n":"Prostejov","c":"Czechia","y":49.4722,"x":17.1106},{"n":"Kabasalan","c":"Philippines","y":7.7968,"x":122.7627},{"n":"Bietigheim-Bissingen","c":"Germany","y":48.9667,"x":9.1333},{"n":"Bridgewater","c":"United States","y":40.5934,"x":-74.6076},{"n":"Memmingen","c":"Germany","y":47.9878,"x":10.1811},{"n":"San Juan y Martinez","c":"Cuba","y":22.2667,"x":-83.8333},{"n":"Riverton","c":"United States","y":40.5177,"x":-111.9635},{"n":"The Colony","c":"United States","y":33.0925,"x":-96.8977},{"n":"Simojovel de Allende","c":"Mexico","y":17.15,"x":-92.7167},{"n":"Neustadt am Rubenberge","c":"Germany","y":52.5055,"x":9.4636},{"n":"Bassano del Grappa","c":"Italy","y":45.7686,"x":11.7367},{"n":"Sao Jose de Mipibu","c":"Brazil","y":-6.075,"x":-35.2378},{"n":"Upper Hutt","c":"New Zealand","y":-41.1333,"x":175.05},{"n":"Urbandale","c":"United States","y":41.639,"x":-93.7813},{"n":"Narvacan","c":"Philippines","y":17.4175,"x":120.4753},{"n":"Tuodian","c":"China","y":24.6907,"x":101.6382},{"n":"Alcala","c":"Philippines","y":15.8468,"x":120.5218},{"n":"Lehrte","c":"Germany","y":52.3725,"x":9.9769},{"n":"Rheden","c":"Netherlands","y":52,"x":6.0167},{"n":"Volksrust","c":"South Africa","y":-27.3667,"x":29.8833},{"n":"Sao Benedito","c":"Brazil","y":-4.0489,"x":-40.865},{"n":"Lombard","c":"United States","y":41.8742,"x":-88.0157},{"n":"Prescott","c":"United States","y":34.585,"x":-112.4475},{"n":"Balimbing","c":"Philippines","y":5.0728,"x":119.8847},{"n":"Dikili","c":"Turkey","y":39.071,"x":26.8902},{"n":"Korogwe","c":"Tanzania","y":-5.1558,"x":38.4503},{"n":"Krasnodon","c":"Ukraine","y":48.3,"x":39.7333},{"n":"Hanerik","c":"China","y":37.2241,"x":79.7964},{"n":"Xin'ansuo","c":"China","y":23.3228,"x":103.4354},{"n":"Zevenaar","c":"Netherlands","y":51.9167,"x":6.0833},{"n":"Eureka","c":"United States","y":40.7942,"x":-124.1568},{"n":"Addanki","c":"India","y":15.811,"x":79.9738},{"n":"Panambi","c":"Brazil","y":-28.2928,"x":-53.5019},{"n":"Igarape","c":"Brazil","y":-20.07,"x":-44.3019},{"n":"Tuy","c":"Philippines","y":14.0167,"x":120.7333},{"n":"Catacamas","c":"Honduras","y":14.8,"x":-85.9},{"n":"Hagi","c":"Japan","y":34.4078,"x":131.3989},{"n":"Malabang","c":"Philippines","y":7.5903,"x":124.0703},{"n":"Kuybyshev","c":"Russia","y":55.4503,"x":78.3075},{"n":"Sayreville","c":"United States","y":40.4656,"x":-74.3237},{"n":"Alghero","c":"Italy","y":40.56,"x":8.315},{"n":"Saint-Eustache","c":"Canada","y":45.57,"x":-73.9},{"n":"Lupao","c":"Philippines","y":15.8793,"x":120.8983},{"n":"Otofuke","c":"Japan","y":42.9942,"x":143.1981},{"n":"Enfield","c":"United States","y":41.9839,"x":-72.5548},{"n":"Altamonte Springs","c":"United States","y":28.6615,"x":-81.3953},{"n":"Jinku","c":"China","y":23.0505,"x":112.515},{"n":"Yartsevo","c":"Russia","y":55.0667,"x":32.6833},{"n":"San Cristobal Totonicapan","c":"Guatemala","y":14.9197,"x":-91.44},{"n":"Del Rio","c":"United States","y":29.3708,"x":-100.88},{"n":"Voluntari","c":"Romania","y":44.4925,"x":26.1914},{"n":"Kastel Stari","c":"Croatia","y":43.5483,"x":16.3383},{"n":"Libona","c":"Philippines","y":8.3333,"x":124.7333},{"n":"Pantanal","c":"Dominican Republic","y":18.5103,"x":-68.3694},{"n":"Comendador","c":"Dominican Republic","y":18.876,"x":-71.707},{"n":"Xinjun","c":"China","y":28.7232,"x":120.019},{"n":"Mastaga","c":"Azerbaijan","y":40.5286,"x":50.0103},{"n":"Kamen","c":"Germany","y":51.5917,"x":7.6653},{"n":"Natanz","c":"Iran","y":33.5,"x":51.9},{"n":"Menghan","c":"China","y":21.8526,"x":100.9265},{"n":"Pinhal","c":"Brazil","y":-22.1908,"x":-46.7408},{"n":"Zongolica","c":"Mexico","y":18.6642,"x":-97.0011},{"n":"Tayug","c":"Philippines","y":16.0267,"x":120.7478},{"n":"Bountiful","c":"United States","y":40.8722,"x":-111.8647},{"n":"Jiaohe","c":"China","y":38.0228,"x":116.2845},{"n":"Himi","c":"Japan","y":36.85,"x":136.9833},{"n":"Gravina in Puglia","c":"Italy","y":40.8206,"x":16.4233},{"n":"Khutubi","c":"China","y":44.1874,"x":86.8946},{"n":"Desert Hot Springs","c":"United States","y":33.9551,"x":-116.543},{"n":"Nabire","c":"Indonesia","y":-3.3515,"x":135.5134},{"n":"Peachtree Corners","c":"United States","y":33.967,"x":-84.2319},{"n":"Montevista","c":"Philippines","y":7.7,"x":125.9833},{"n":"Villeta","c":"Colombia","y":5.0128,"x":-74.4731},{"n":"Mombaca","c":"Brazil","y":-5.7428,"x":-39.6278},{"n":"Santa Rita do Sapucai","c":"Brazil","y":-22.2519,"x":-45.7028},{"n":"Buguias","c":"Philippines","y":16.7167,"x":120.8333},{"n":"Haltom City","c":"United States","y":32.8176,"x":-97.2707},{"n":"Nandazhang","c":"China","y":38.1024,"x":114.7658},{"n":"Castro","c":"Brazil","y":-24.7893,"x":-50.0123},{"n":"Baniyas","c":"Syria","y":35.1822,"x":35.9403},{"n":"'Ain Arnat","c":"Algeria","y":36.1833,"x":5.3167},{"n":"Veruela","c":"Philippines","y":8.0698,"x":125.9554},{"n":"Ad Dir`iyah","c":"Saudi Arabia","y":24.7333,"x":46.5756},{"n":"Vinzons","c":"Philippines","y":14.1833,"x":122.9},{"n":"Roseller Lim","c":"Philippines","y":7.6568,"x":122.4701},{"n":"Southington","c":"United States","y":41.605,"x":-72.8802},{"n":"San al Hajar al Qibliyah","c":"Egypt","y":30.9769,"x":31.88},{"n":"Pagsanjan","c":"Philippines","y":14.2667,"x":121.45},{"n":"Worksop","c":"United Kingdom","y":53.3042,"x":-1.1244},{"n":"Ormond Beach","c":"United States","y":29.296,"x":-81.1003},{"n":"Banisilan","c":"Philippines","y":7.5,"x":124.7},{"n":"Sambava","c":"Madagascar","y":-14.2662,"x":50.1666},{"n":"Taniyama-chuo","c":"Japan","y":31.5211,"x":130.5176},{"n":"Takab","c":"Iran","y":36.4008,"x":47.1131},{"n":"Erkelenz","c":"Germany","y":51.08,"x":6.3156},{"n":"Zhangliangcun","c":"China","y":37.1256,"x":112.0664},{"n":"Salto de Pirapora","c":"Brazil","y":-23.6489,"x":-47.5728},{"n":"Paraty","c":"Brazil","y":-23.2194,"x":-44.7147},{"n":"Basoko","c":"Congo (Kinshasa)","y":1.2333,"x":23.6},{"n":"Cutler Bay","c":"United States","y":25.5765,"x":-80.3356},{"n":"Of","c":"Turkey","y":40.945,"x":40.2644},{"n":"Macenta","c":"Guinea","y":8.5504,"x":-9.48},{"n":"Shinshiro","c":"Japan","y":34.9,"x":137.5},{"n":"Chefchaouene","c":"Morocco","y":35.1714,"x":-5.2697},{"n":"Xihuachi","c":"China","y":35.8092,"x":108.0121},{"n":"Adrian","c":"United States","y":41.8994,"x":-84.0446},{"n":"Nuevo Mexico","c":"Mexico","y":20.75,"x":-103.433},{"n":"Lota","c":"Chile","y":-37.0944,"x":-73.1563},{"n":"Otwock","c":"Poland","y":52.1167,"x":21.2667},{"n":"Goose Creek","c":"United States","y":32.9925,"x":-80.0054},{"n":"Et Taiyiba","c":"Israel","y":32.2667,"x":35},{"n":"Moorhead","c":"United States","y":46.8673,"x":-96.7461},{"n":"Itaberai","c":"Brazil","y":-16.02,"x":-49.81},{"n":"Angouleme","c":"France","y":45.65,"x":0.16},{"n":"Westfield","c":"United States","y":40.0333,"x":-86.1532},{"n":"Santa Cruz","c":"Portugal","y":32.675,"x":-16.8309},{"n":"Cesme","c":"Turkey","y":38.32,"x":26.3053},{"n":"Ponte de Lima","c":"Portugal","y":41.7667,"x":-8.5833},{"n":"Musina","c":"South Africa","y":-22.3381,"x":30.0417},{"n":"Venray","c":"Netherlands","y":51.5258,"x":5.9747},{"n":"Birsk","c":"Russia","y":55.4167,"x":55.5333},{"n":"Noordwijk","c":"Netherlands","y":52.2333,"x":4.4333},{"n":"Quinte West","c":"Canada","y":44.1833,"x":-77.5667},{"n":"Wismar","c":"Germany","y":53.8925,"x":11.465},{"n":"Presidente Epitacio","c":"Brazil","y":-21.7633,"x":-52.1156},{"n":"Sao Lourenco do Sul","c":"Brazil","y":-31.365,"x":-51.9778},{"n":"Catende","c":"Brazil","y":-8.6669,"x":-35.7169},{"n":"Bahia Honda","c":"Cuba","y":22.9064,"x":-83.1639},{"n":"Istres","c":"France","y":43.5151,"x":4.9895},{"n":"Zhangcun","c":"China","y":38.1329,"x":114.9421},{"n":"Tamworth","c":"Australia","y":-31.0833,"x":150.9167},{"n":"Denia","c":"Spain","y":38.8444,"x":0.1111},{"n":"Pedro Celestino Negrete","c":"Mexico","y":24.726,"x":-102.984},{"n":"Heist-op-den-Berg","c":"Belgium","y":51.0758,"x":4.7286},{"n":"Makinohara","c":"Japan","y":34.74,"x":138.2247},{"n":"Zharkent","c":"Kazakhstan","y":44.1667,"x":80.0067},{"n":"Jaro","c":"Philippines","y":11.1833,"x":124.7833},{"n":"Sawakin","c":"Sudan","y":19.1,"x":37.3333},{"n":"Hueyapan de Ocampo","c":"Mexico","y":18.15,"x":-95.15},{"n":"Henrietta","c":"United States","y":43.0555,"x":-77.6413},{"n":"Tantangan","c":"Philippines","y":6.6167,"x":124.75},{"n":"Esperanza","c":"Argentina","y":-31.4167,"x":-60.9333},{"n":"Germering","c":"Germany","y":48.1333,"x":11.3667},{"n":"Kemer","c":"Turkey","y":36.6,"x":30.55},{"n":"Rantepao","c":"Indonesia","y":-2.969,"x":119.9},{"n":"Civitanova Marche","c":"Italy","y":43.3068,"x":13.7286},{"n":"Angadanan","c":"Philippines","y":16.7571,"x":121.7479},{"n":"Labrea","c":"Brazil","y":-7.2589,"x":-64.7978},{"n":"Bourg-en-Bresse","c":"France","y":46.2056,"x":5.2289},{"n":"Brea","c":"United States","y":33.9254,"x":-117.8656},{"n":"Nova Vicosa","c":"Brazil","y":-17.8919,"x":-39.3719},{"n":"Klamath Falls","c":"United States","y":42.2191,"x":-121.7754},{"n":"Al Wajh","c":"Saudi Arabia","y":26.2324,"x":36.4636},{"n":"King's Lynn","c":"United Kingdom","y":52.7543,"x":0.3976},{"n":"Siegburg","c":"Germany","y":50.8014,"x":7.2044},{"n":"San Lorenzo","c":"Honduras","y":13.3667,"x":-87.2667},{"n":"Cordon","c":"Philippines","y":16.6667,"x":121.45},{"n":"Ambatondrazaka","c":"Madagascar","y":-17.8329,"x":48.4167},{"n":"Aguazul","c":"Colombia","y":5.1689,"x":-72.5467},{"n":"Shuilou","c":"China","y":22.3352,"x":112.8018},{"n":"Veroia","c":"Greece","y":40.5203,"x":22.2019},{"n":"Billerica","c":"United States","y":42.5587,"x":-71.2673},{"n":"Nadi","c":"Fiji","y":-17.8,"x":177.4167},{"n":"Tiel","c":"Netherlands","y":51.8833,"x":5.4333},{"n":"Kobayashi","c":"Japan","y":31.9967,"x":130.9728},{"n":"Daram","c":"Philippines","y":11.6341,"x":124.7947},{"n":"Ciechanow","c":"Poland","y":52.8817,"x":20.6106},{"n":"Prerov","c":"Czechia","y":49.4556,"x":17.4511},{"n":"Nansan","c":"China","y":23.7784,"x":98.8253},{"n":"Visconde do Rio Branco","c":"Brazil","y":-21.0103,"x":-42.8406},{"n":"Cumaribo","c":"Colombia","y":4.4461,"x":-69.7956},{"n":"Kolchugino","c":"Russia","y":56.2992,"x":39.3831},{"n":"Whanganui","c":"New Zealand","y":-39.9333,"x":175.05},{"n":"Jesus Maria","c":"Mexico","y":21.9667,"x":-102.35},{"n":"Sao Gabriel da Cachoeira","c":"Brazil","y":-0.13,"x":-67.0889},{"n":"Lubao","c":"Congo (Kinshasa)","y":-5.3896,"x":25.75},{"n":"Bihac","c":"Bosnia And Herzegovina","y":44.8167,"x":15.8667},{"n":"Rosario","c":"Brazil","y":-2.9339,"x":-44.235},{"n":"Channelview","c":"United States","y":29.7914,"x":-95.1145},{"n":"Huizen","c":"Netherlands","y":52.2994,"x":5.2531},{"n":"Entre Rios","c":"Brazil","y":-11.9419,"x":-38.0839},{"n":"Yendi","c":"Ghana","y":9.4337,"x":-0.0167},{"n":"Poptun","c":"Guatemala","y":16.3222,"x":-89.4222},{"n":"Gualeguay","c":"Argentina","y":-33.15,"x":-59.3167},{"n":"Jatibonico","c":"Cuba","y":21.9464,"x":-79.1675},{"n":"Albano Laziale","c":"Italy","y":41.7333,"x":12.6667},{"n":"Dolores","c":"Philippines","y":12.05,"x":125.4833},{"n":"Nettetal","c":"Germany","y":51.3167,"x":6.2833},{"n":"Osinniki","c":"Russia","y":53.6167,"x":87.3333},{"n":"Sieradz","c":"Poland","y":51.6,"x":18.75},{"n":"Gifhorn","c":"Germany","y":52.4886,"x":10.5464},{"n":"Centralia","c":"United States","y":46.7226,"x":-122.9696},{"n":"Sidi Mohamed Lahmar","c":"Morocco","y":34.7167,"x":-6.2667},{"n":"Gallatin","c":"United States","y":36.3782,"x":-86.4696},{"n":"Atenco","c":"Mexico","y":19.5167,"x":-98.9167},{"n":"Miranda","c":"Colombia","y":3.2503,"x":-76.2286},{"n":"Tepalcatepec","c":"Mexico","y":19.1833,"x":-102.85},{"n":"Zvolen","c":"Slovakia","y":48.5831,"x":19.1331},{"n":"Samborondon","c":"Ecuador","y":-1.9611,"x":-79.7256},{"n":"Dreieich","c":"Germany","y":50.0189,"x":8.6961},{"n":"Shenjiatun","c":"China","y":40.7695,"x":114.8549},{"n":"Loufan","c":"China","y":38.0694,"x":111.7911},{"n":"Hulin","c":"China","y":45.7686,"x":132.9746},{"n":"Lucena","c":"Spain","y":37.4,"x":-4.4833},{"n":"Stevens Point","c":"United States","y":44.5241,"x":-89.5508},{"n":"Nurmijarvi","c":"Finland","y":60.4667,"x":24.8083},{"n":"Orlandia","c":"Brazil","y":-20.7203,"x":-47.8867},{"n":"Borken","c":"Germany","y":51.8439,"x":6.8583},{"n":"Burke","c":"United States","y":38.7773,"x":-77.2633},{"n":"Vawkavysk","c":"Belarus","y":53.1667,"x":24.4667},{"n":"Vera Cruz","c":"Brazil","y":-12.96,"x":-38.6089},{"n":"Manay","c":"Philippines","y":7.2167,"x":126.5333},{"n":"Obita","c":"Japan","y":32.8253,"x":129.875},{"n":"Amberg","c":"Germany","y":49.4444,"x":11.8483},{"n":"Eisenach","c":"Germany","y":50.9747,"x":10.3244},{"n":"Santa Quiteria","c":"Brazil","y":-4.3319,"x":-40.1569},{"n":"North Fort Myers","c":"United States","y":26.7243,"x":-81.8491},{"n":"Temsia","c":"Morocco","y":30.3633,"x":-9.4144},{"n":"Egg Harbor","c":"United States","y":39.3787,"x":-74.6102},{"n":"Fianga","c":"Chad","y":9.9153,"x":15.1375},{"n":"Hwange","c":"Zimbabwe","y":-18.3647,"x":26.5},{"n":"Sansanne-Mango","c":"Togo","y":10.3556,"x":0.4756},{"n":"Avezzano","c":"Italy","y":42.031,"x":13.4264},{"n":"Leigh","c":"United Kingdom","y":53.4975,"x":-2.515},{"n":"Santo Antonio de Padua","c":"Brazil","y":-21.5389,"x":-42.18},{"n":"Mariel","c":"Cuba","y":22.9936,"x":-82.7539},{"n":"Laatzen","c":"Germany","y":52.3077,"x":9.8133},{"n":"Kotabumi","c":"Indonesia","y":-4.8333,"x":104.9},{"n":"Bacnotan","c":"Philippines","y":16.7333,"x":120.3833},{"n":"Qiryat Yam","c":"Israel","y":32.8331,"x":35.0664},{"n":"Edmonds","c":"United States","y":47.8115,"x":-122.3533},{"n":"Charlottetown","c":"Canada","y":46.2403,"x":-63.1347},{"n":"Dusheng","c":"China","y":38.3804,"x":116.55},{"n":"Ban Na Pa","c":"Thailand","y":13.3956,"x":101.0232},{"n":"Mikolow","c":"Poland","y":50.171,"x":18.9041},{"n":"Apache Junction","c":"United States","y":33.3985,"x":-111.5351},{"n":"Bury Saint Edmunds","c":"United Kingdom","y":52.2474,"x":0.7183},{"n":"Oakley","c":"United States","y":37.9929,"x":-121.6951},{"n":"El Charco","c":"Colombia","y":2.4775,"x":-78.1111},{"n":"Rio Negrinho","c":"Brazil","y":-26.2539,"x":-49.5178},{"n":"Hutchinson","c":"United States","y":38.0671,"x":-97.9081},{"n":"Loreto","c":"Philippines","y":8.1856,"x":125.8538},{"n":"Shebekino","c":"Russia","y":50.4167,"x":36.9},{"n":"Santa Helena","c":"Brazil","y":-2.2308,"x":-45.3},{"n":"Tineghir","c":"Morocco","y":31.5147,"x":-5.5328},{"n":"Manjuyod","c":"Philippines","y":9.6833,"x":123.15},{"n":"Mascouche","c":"Canada","y":45.75,"x":-73.6},{"n":"Futtsu","c":"Japan","y":35.3042,"x":139.8569},{"n":"Dayr Mawas","c":"Egypt","y":27.6414,"x":30.8494},{"n":"Wangyuanqiao","c":"China","y":38.3849,"x":106.2664},{"n":"Cuihua","c":"China","y":27.7527,"x":103.8906},{"n":"West Vancouver","c":"Canada","y":49.3667,"x":-123.1667},{"n":"Capao da Canoa","c":"Brazil","y":-29.7608,"x":-50.03},{"n":"Toboso","c":"Philippines","y":10.7167,"x":123.5167},{"n":"Shepetivka","c":"Ukraine","y":50.1833,"x":27.0667},{"n":"Shu","c":"Kazakhstan","y":43.5953,"x":73.7448},{"n":"Alerce","c":"Chile","y":-41.3969,"x":-72.9037},{"n":"Tome","c":"Chile","y":-36.6171,"x":-72.9575},{"n":"Cortlandt","c":"United States","y":41.2553,"x":-73.9019},{"n":"Salaberry-de-Valleyfield","c":"Canada","y":45.25,"x":-74.13},{"n":"Balykchy","c":"Kyrgyzstan","y":42.4667,"x":76.1833},{"n":"Heinsberg","c":"Germany","y":51.0631,"x":6.0964},{"n":"Uden","c":"Netherlands","y":51.6667,"x":5.6167},{"n":"La Orotava","c":"Spain","y":28.3667,"x":-16.5167},{"n":"Sao Lourenco","c":"Brazil","y":-22.1158,"x":-45.0539},{"n":"Itapolis","c":"Brazil","y":-21.5958,"x":-48.8128},{"n":"Liantang","c":"China","y":22.9307,"x":111.7237},{"n":"Machang","c":"China","y":26.5477,"x":106.0375},{"n":"Lorenskog","c":"Norway","y":59.8989,"x":10.9642},{"n":"Linden","c":"United States","y":40.6251,"x":-74.2381},{"n":"Puyallup","c":"United States","y":47.1794,"x":-122.2902},{"n":"Santa Rita","c":"Philippines","y":14.9953,"x":120.6153},{"n":"Yangcunzai","c":"China","y":23.4338,"x":114.4664},{"n":"Qazyan","c":"Azerbaijan","y":39.2015,"x":46.415},{"n":"Rajgir","c":"India","y":25.03,"x":85.42},{"n":"Rouyn-Noranda","c":"Canada","y":48.2333,"x":-79.0167},{"n":"San Dona di Piave","c":"Italy","y":45.6298,"x":12.5641},{"n":"Koniz","c":"Switzerland","y":46.925,"x":7.4153},{"n":"Imperia","c":"Italy","y":43.8865,"x":8.0297},{"n":"Homburg","c":"Germany","y":49.3167,"x":7.3333},{"n":"Remanso","c":"Brazil","y":-9.6219,"x":-42.0808},{"n":"Beitbridge","c":"Zimbabwe","y":-22.2167,"x":30},{"n":"Ansbach","c":"Germany","y":49.3,"x":10.5833},{"n":"Gay","c":"Russia","y":51.4747,"x":58.4543},{"n":"Itabaianinha","c":"Brazil","y":-11.2739,"x":-37.79},{"n":"Macerata","c":"Italy","y":43.3003,"x":13.4533},{"n":"Dacun","c":"China","y":34.7201,"x":109.0549},{"n":"Urbana","c":"United States","y":40.1106,"x":-88.1972},{"n":"Aurich","c":"Germany","y":53.4714,"x":7.4836},{"n":"Qapshaghay","c":"Kazakhstan","y":43.8844,"x":77.0687},{"n":"Nordhausen","c":"Germany","y":51.505,"x":10.7911},{"n":"Sbiba","c":"Tunisia","y":35.5433,"x":9.0736},{"n":"Beverly","c":"United States","y":42.5681,"x":-70.8627},{"n":"Safonovo","c":"Russia","y":55.1,"x":33.25},{"n":"Villaba","c":"Philippines","y":11.2167,"x":124.4},{"n":"Montenegro","c":"Colombia","y":4.5653,"x":-75.7511},{"n":"Monterotondo","c":"Italy","y":42.05,"x":12.6167},{"n":"Amontada","c":"Brazil","y":-3.3608,"x":-39.8308},{"n":"Caceres","c":"Colombia","y":7.5794,"x":-75.3503},{"n":"Lingquan","c":"China","y":36.9985,"x":110.8417},{"n":"Lower Tungawan","c":"Philippines","y":7.6017,"x":122.4273},{"n":"Monchegorsk","c":"Russia","y":67.9394,"x":32.9156},{"n":"Santa Maria da Boa Vista","c":"Brazil","y":-8.8089,"x":-39.825},{"n":"Soran","c":"Kazakhstan","y":49.7908,"x":72.8374},{"n":"Coburg","c":"Germany","y":50.2585,"x":10.9579},{"n":"Statesboro","c":"United States","y":32.4376,"x":-81.775},{"n":"Poti","c":"Georgia","y":42.15,"x":41.6667},{"n":"Hobbs","c":"United States","y":32.7282,"x":-103.16},{"n":"Sarab","c":"Iran","y":37.9408,"x":47.5367},{"n":"Su-ngai Kolok","c":"Thailand","y":6.0297,"x":101.9668},{"n":"Barcellona-Pozzo di Gotto","c":"Italy","y":38.15,"x":15.2167},{"n":"Litian Gezhuang","c":"China","y":39.8151,"x":119.0219},{"n":"Korenovsk","c":"Russia","y":45.4667,"x":39.45},{"n":"Qiryat Mozqin","c":"Israel","y":32.8381,"x":35.0794},{"n":"McMinnville","c":"United States","y":45.211,"x":-123.1918},{"n":"Castres","c":"France","y":43.6,"x":2.25},{"n":"Zagora","c":"Morocco","y":30.3316,"x":-5.8376},{"n":"Labangan","c":"Philippines","y":7.8667,"x":123.5167},{"n":"Tuntum","c":"Brazil","y":-5.2578,"x":-44.6489},{"n":"Schertz","c":"United States","y":29.5649,"x":-98.2537},{"n":"Tequila","c":"Mexico","y":20.8794,"x":-103.8356},{"n":"Nasipit","c":"Philippines","y":8.9884,"x":125.3408},{"n":"Moatize","c":"Mozambique","y":-16.1167,"x":33.75},{"n":"Merano","c":"Italy","y":46.6689,"x":11.1639},{"n":"Shimotsuma","c":"Japan","y":36.1844,"x":139.9675},{"n":"Yinggen","c":"China","y":19.0372,"x":109.8283},{"n":"Matoupu","c":"China","y":38.3198,"x":114.7207},{"n":"Greenock","c":"United Kingdom","y":55.95,"x":-4.765},{"n":"Beigang","c":"Taiwan","y":23.5667,"x":120.3},{"n":"Ales","c":"France","y":44.1281,"x":4.0817},{"n":"Xinleitou","c":"China","y":37.9752,"x":115.2106},{"n":"Nurtingen","c":"Germany","y":48.6267,"x":9.3353},{"n":"Spassk-Dal'niy","c":"Russia","y":44.6,"x":132.8167},{"n":"Tadif","c":"Syria","y":36.348,"x":37.53},{"n":"Puerto del Rosario","c":"Spain","y":28.5,"x":-13.8667},{"n":"Tulun","c":"Russia","y":54.5667,"x":100.5667},{"n":"Uspantan","c":"Guatemala","y":15.3458,"x":-90.8694},{"n":"Rajaori","c":"India","y":33.38,"x":74.3},{"n":"Wunstorf","c":"Germany","y":52.4238,"x":9.4359},{"n":"Pedra Branca","c":"Brazil","y":-5.4539,"x":-39.7169},{"n":"Puerto Real","c":"Spain","y":36.5292,"x":-6.1919},{"n":"Seevetal","c":"Germany","y":53.3833,"x":10.0333},{"n":"Sassuolo","c":"Italy","y":44.5517,"x":10.7856},{"n":"Oliveira","c":"Brazil","y":-20.6958,"x":-44.8269},{"n":"Jardinopolis","c":"Brazil","y":-21.0178,"x":-47.7639},{"n":"Bayt al Faqih","c":"Yemen","y":14.5167,"x":43.3167},{"n":"San","c":"Mali","y":13.3004,"x":-4.9},{"n":"Oviedo","c":"United States","y":28.658,"x":-81.1872},{"n":"Nanbaishezhen","c":"China","y":37.7526,"x":114.8524},{"n":"Odenton","c":"United States","y":39.0661,"x":-76.6939},{"n":"Kwidzyn","c":"Poland","y":53.7358,"x":18.9308},{"n":"Chojnice","c":"Poland","y":53.6955,"x":17.557},{"n":"Satka","c":"Russia","y":55.05,"x":59.05},{"n":"Grove City","c":"United States","y":39.8659,"x":-83.0694},{"n":"Santa Maria da Vitoria","c":"Brazil","y":-13.3978,"x":-44.1978},{"n":"Sumisip","c":"Philippines","y":6.4167,"x":121.9833},{"n":"Porto de Moz","c":"Brazil","y":-1.7478,"x":-52.2378},{"n":"Nanbei","c":"Japan","y":35.3206,"x":139.1},{"n":"Schwabach","c":"Germany","y":49.3292,"x":11.0208},{"n":"Mozdok","c":"Russia","y":43.75,"x":44.65},{"n":"Timmins","c":"Canada","y":48.4667,"x":-81.3333},{"n":"Konigswinter","c":"Germany","y":50.6833,"x":7.1833},{"n":"Wentzville","c":"United States","y":38.8152,"x":-90.8667},{"n":"San Jacinto","c":"Philippines","y":16.0725,"x":120.4411},{"n":"Kalilangan","c":"Philippines","y":7.75,"x":124.75},{"n":"North Brunswick","c":"United States","y":40.4505,"x":-74.4798},{"n":"Myski","c":"Russia","y":53.7,"x":87.8167},{"n":"Santa Cruz de Los Taques","c":"Venezuela","y":11.8231,"x":-70.2535},{"n":"La Quinta","c":"United States","y":33.6536,"x":-116.2785},{"n":"Lobo","c":"Philippines","y":13.65,"x":121.25},{"n":"Strezhevoy","c":"Russia","y":60.7333,"x":77.5833},{"n":"Pueblo Nuevo","c":"Colombia","y":8.505,"x":-75.5075},{"n":"Podilsk","c":"Ukraine","y":47.7419,"x":29.535},{"n":"General Mamerto Natividad","c":"Philippines","y":15.6025,"x":121.0515},{"n":"Freiberg","c":"Germany","y":50.9119,"x":13.3428},{"n":"Panchimalco","c":"El Salvador","y":13.6094,"x":-89.1792},{"n":"Siay","c":"Philippines","y":7.7056,"x":122.8641},{"n":"Sarande","c":"Albania","y":39.8833,"x":20.0167},{"n":"Ust'-Kut","c":"Russia","y":56.8,"x":105.8333},{"n":"Swinoujscie","c":"Poland","y":53.9167,"x":14.25},{"n":"Yakacik","c":"Turkey","y":36.75,"x":36.2167},{"n":"Aguilar","c":"Philippines","y":15.8899,"x":120.2379},{"n":"Moises Padilla","c":"Philippines","y":10.2667,"x":123.0833},{"n":"Ihnasya al Madinah","c":"Egypt","y":29.0856,"x":30.9344},{"n":"Alhaurin de la Torre","c":"Spain","y":36.6667,"x":-4.55},{"n":"Lokeren","c":"Belgium","y":51.1,"x":3.9833},{"n":"Herstal","c":"Belgium","y":50.6644,"x":5.63},{"n":"Yuzawa","c":"Japan","y":39.1644,"x":140.4958},{"n":"El Nido","c":"Philippines","y":11.1956,"x":119.4075},{"n":"Cantu","c":"Italy","y":45.7333,"x":9.1333},{"n":"Nanmeng","c":"China","y":39.1773,"x":116.3751},{"n":"Weslaco","c":"United States","y":26.1648,"x":-97.9898},{"n":"Sorel-Tracy","c":"Canada","y":46.0333,"x":-73.1167},{"n":"Karabulak","c":"Russia","y":43.3,"x":44.9},{"n":"Tuchin","c":"Colombia","y":9.1858,"x":-75.5553},{"n":"President Quirino","c":"Philippines","y":6.7,"x":124.7333},{"n":"Ladispoli","c":"Italy","y":41.9544,"x":12.0742},{"n":"Labason","c":"Philippines","y":8.0667,"x":122.5167},{"n":"Naini Tal","c":"India","y":29.3919,"x":79.4542},{"n":"Yangtangxu","c":"China","y":21.6172,"x":110.0319},{"n":"Ayagoz","c":"Kazakhstan","y":47.9645,"x":80.4344},{"n":"Zanesville","c":"United States","y":39.9565,"x":-82.0132},{"n":"Newnan","c":"United States","y":33.3766,"x":-84.7761},{"n":"Kitaibaraki","c":"Japan","y":36.8019,"x":140.7511},{"n":"Almenara","c":"Brazil","y":-16.1833,"x":-40.7},{"n":"Shakopee","c":"United States","y":44.7744,"x":-93.4764},{"n":"Nowa Sol","c":"Poland","y":51.8,"x":15.7167},{"n":"Brighton","c":"United States","y":39.9716,"x":-104.7964},{"n":"Catonsville","c":"United States","y":39.2646,"x":-76.7424},{"n":"Wijchen","c":"Netherlands","y":51.8067,"x":5.7211},{"n":"Gaolincun","c":"China","y":39.0887,"x":115.6617},{"n":"Rancho Palos Verdes","c":"United States","y":33.7554,"x":-118.3637},{"n":"Kirchheim unter Teck","c":"Germany","y":48.6483,"x":9.4511},{"n":"Verkhnyaya Salda","c":"Russia","y":58.05,"x":60.55},{"n":"Thionville","c":"France","y":49.3589,"x":6.1692},{"n":"Baichigan","c":"China","y":39.5275,"x":115.8564},{"n":"Mableton","c":"United States","y":33.8132,"x":-84.5656},{"n":"Erzin","c":"Turkey","y":36.9539,"x":36.2022},{"n":"Andradas","c":"Brazil","y":-22.0678,"x":-46.5689},{"n":"Charqueadas","c":"Brazil","y":-29.955,"x":-51.625},{"n":"New Tecumseth","c":"Canada","y":44.0833,"x":-79.75},{"n":"Leinfelden-Echterdingen","c":"Germany","y":48.6928,"x":9.1428},{"n":"Santo Nino","c":"Philippines","y":6.4333,"x":124.6833},{"n":"Mount Laurel","c":"United States","y":39.9484,"x":-74.9047},{"n":"San Gregorio de Nigua","c":"Dominican Republic","y":18.38,"x":-70.08},{"n":"Coppell","c":"United States","y":32.9638,"x":-96.9905},{"n":"Mandaon","c":"Philippines","y":12.2259,"x":123.2842},{"n":"Culasi","c":"Philippines","y":11.4272,"x":122.056},{"n":"Sovetsk","c":"Russia","y":55.0833,"x":21.8833},{"n":"Linton Hall","c":"United States","y":38.7551,"x":-77.575},{"n":"Pananaw","c":"Philippines","y":5.9833,"x":121.25},{"n":"Antequera","c":"Spain","y":37.0183,"x":-4.5597},{"n":"Girau do Ponciano","c":"Brazil","y":-9.8839,"x":-36.8289},{"n":"Moline","c":"United States","y":41.4821,"x":-90.4921},{"n":"Matnog","c":"Philippines","y":12.5833,"x":124.0833},{"n":"Tanxia","c":"China","y":23.9475,"x":115.5361},{"n":"El Tocuyo","c":"Venezuela","y":9.7822,"x":-69.7931},{"n":"Aquidauana","c":"Brazil","y":-20.4711,"x":-55.7872},{"n":"Colinas","c":"Brazil","y":-6.0258,"x":-44.2489},{"n":"Tiegan","c":"China","y":38.1536,"x":115.3248},{"n":"Niquero","c":"Cuba","y":20.0472,"x":-77.5781},{"n":"Arauquita","c":"Colombia","y":7.0261,"x":-71.4272},{"n":"Penn Hills","c":"United States","y":40.4762,"x":-79.8255},{"n":"Chaves","c":"Portugal","y":41.7399,"x":-7.4707},{"n":"Hellevoetsluis","c":"Netherlands","y":51.8333,"x":4.1333},{"n":"Delaware","c":"United States","y":40.2866,"x":-83.0747},{"n":"Kovvur","c":"India","y":17.0167,"x":81.7333},{"n":"Gap","c":"France","y":44.5594,"x":6.0786},{"n":"Anyuan","c":"China","y":34.8839,"x":105.2758},{"n":"Yingzhou Linchang","c":"China","y":18.4199,"x":109.8553},{"n":"Banaybanay","c":"Philippines","y":6.9699,"x":126.0126},{"n":"Temryuk","c":"Russia","y":45.2667,"x":37.3833},{"n":"Guambog","c":"Philippines","y":7.3,"x":125.85},{"n":"Guaduas","c":"Colombia","y":5.0694,"x":-74.5981},{"n":"Carranglan","c":"Philippines","y":15.9667,"x":121.0667},{"n":"Jarvenpaa","c":"Finland","y":60.4722,"x":25.0889},{"n":"Vyshneve","c":"Ukraine","y":50.3833,"x":30.3667},{"n":"Basud","c":"Philippines","y":14.0667,"x":122.9667},{"n":"Bensheim","c":"Germany","y":49.6811,"x":8.6228},{"n":"Boleslawiec","c":"Poland","y":51.2667,"x":15.5667},{"n":"Shelton","c":"United States","y":41.306,"x":-73.1383},{"n":"Proper Bansud","c":"Philippines","y":12.8333,"x":121.3667},{"n":"Baft","c":"Iran","y":29.2331,"x":56.6022},{"n":"Marcianise","c":"Italy","y":41.0333,"x":14.3},{"n":"Jeremoabo","c":"Brazil","y":-10.0669,"x":-38.35},{"n":"Westerville","c":"United States","y":40.1241,"x":-82.9209},{"n":"Lemgo","c":"Germany","y":52.0277,"x":8.9043},{"n":"Ciudad Barrios","c":"El Salvador","y":13.7667,"x":-88.2667},{"n":"Mucuri","c":"Brazil","y":-18.0858,"x":-39.5508},{"n":"Manassas","c":"United States","y":38.7479,"x":-77.4839},{"n":"Eberswalde","c":"Germany","y":52.8331,"x":13.8331},{"n":"Ciudad Dario","c":"Nicaragua","y":12.7314,"x":-86.124},{"n":"Tonbridge","c":"United Kingdom","y":51.1987,"x":0.2764},{"n":"Salinopolis","c":"Brazil","y":-0.6136,"x":-47.3561},{"n":"Dois Vizinhos","c":"Brazil","y":-25.75,"x":-53.0569},{"n":"Pirmasens","c":"Germany","y":49.2,"x":7.6},{"n":"Kearny","c":"United States","y":40.7528,"x":-74.1202},{"n":"Chambas","c":"Cuba","y":22.1967,"x":-78.9133},{"n":"Ostfildern","c":"Germany","y":48.7228,"x":9.2631},{"n":"Maarssen","c":"Netherlands","y":52.1408,"x":5.0394},{"n":"Los Banos","c":"United States","y":37.063,"x":-120.8406},{"n":"Bagua Grande","c":"Peru","y":-5.7572,"x":-78.4453},{"n":"Pyt'-Yakh","c":"Russia","y":60.75,"x":72.7833},{"n":"El Tumbador","c":"Guatemala","y":14.8667,"x":-91.9333},{"n":"Santa Elena","c":"Philippines","y":14.2,"x":122.3833},{"n":"Novozybkov","c":"Russia","y":52.5333,"x":31.9333},{"n":"Osorio","c":"Brazil","y":-29.8869,"x":-50.27},{"n":"Compiegne","c":"France","y":49.4149,"x":2.8231},{"n":"Taicheng","c":"China","y":38.7206,"x":113.2437},{"n":"Kabuga","c":"Rwanda","y":-1.9765,"x":30.2247},{"n":"Inhambupe","c":"Brazil","y":-11.7839,"x":-38.3528},{"n":"Chebarkul","c":"Russia","y":54.9778,"x":60.37},{"n":"Romny","c":"Ukraine","y":50.7428,"x":33.4879},{"n":"Hempfield","c":"United States","y":40.2847,"x":-79.5841},{"n":"Spanish Fork","c":"United States","y":40.1101,"x":-111.6406},{"n":"Dronten","c":"Netherlands","y":52.5242,"x":5.7125},{"n":"Woodstock","c":"Canada","y":43.1306,"x":-80.7467},{"n":"Sao Miguel d'Oeste","c":"Brazil","y":-26.725,"x":-53.5178},{"n":"Mangaratiba","c":"Brazil","y":-22.96,"x":-44.0408},{"n":"Maluso","c":"Philippines","y":6.55,"x":121.8833},{"n":"Ilhavo","c":"Portugal","y":40.6,"x":-8.6667},{"n":"Ait Ourir","c":"Morocco","y":31.5644,"x":-7.6628},{"n":"Rio Real","c":"Brazil","y":-11.4833,"x":-37.9344},{"n":"Leyte","c":"Philippines","y":11.3667,"x":124.4833},{"n":"Uruacu","c":"Brazil","y":-14.525,"x":-49.1408},{"n":"Cuito Cuanavale","c":"Angola","y":-15.1639,"x":19.1731},{"n":"Maria Aurora","c":"Philippines","y":15.7967,"x":121.4737},{"n":"Colomiers","c":"France","y":43.6139,"x":1.3367},{"n":"Schwabisch Hall","c":"Germany","y":49.1122,"x":9.7375},{"n":"Abadan","c":"Turkmenistan","y":38.0517,"x":58.21},{"n":"Lugoj","c":"Romania","y":45.6861,"x":21.9006},{"n":"Zoumi","c":"Morocco","y":34.8032,"x":-5.3446},{"n":"Pereslavl'-Zalesskiy","c":"Russia","y":56.7381,"x":38.8562},{"n":"Petrich","c":"Bulgaria","y":41.3981,"x":23.2069},{"n":"Zhujiezhen","c":"China","y":23.746,"x":104.899},{"n":"Tomar","c":"Portugal","y":39.6,"x":-8.4167},{"n":"Cateel","c":"Philippines","y":7.7833,"x":126.45},{"n":"Weissenfels","c":"Germany","y":51.2,"x":11.9667},{"n":"Laouamra","c":"Morocco","y":35.0656,"x":-6.0939},{"n":"Pie de Pato","c":"Colombia","y":5.5153,"x":-76.9747},{"n":"Boucherville","c":"Canada","y":45.6,"x":-73.45},{"n":"Panitan","c":"Philippines","y":11.4667,"x":122.7667},{"n":"Yalutorovsk","c":"Russia","y":56.65,"x":66.3},{"n":"Brumadinho","c":"Brazil","y":-20.1428,"x":-44.2},{"n":"Arys","c":"Kazakhstan","y":42.4297,"x":68.8046},{"n":"Komono","c":"Japan","y":35.02,"x":136.5075},{"n":"Sciacca","c":"Italy","y":37.5092,"x":13.0889},{"n":"Vahdat","c":"Tajikistan","y":38.5531,"x":69.0197},{"n":"Channarayapatna","c":"India","y":12.9,"x":76.39},{"n":"Pottsville","c":"United States","y":40.6798,"x":-76.2092},{"n":"Corigliano Calabro","c":"Italy","y":39.6,"x":16.5167},{"n":"Simao Dias","c":"Brazil","y":-10.7378,"x":-37.8108},{"n":"Buxtehude","c":"Germany","y":53.4769,"x":9.7011},{"n":"La Union","c":"Colombia","y":4.5331,"x":-76.1006},{"n":"Bayindir","c":"Turkey","y":38.2192,"x":27.6481},{"n":"Pechora","c":"Russia","y":65.1442,"x":57.2197},{"n":"Altos","c":"Brazil","y":-5.0389,"x":-42.4608},{"n":"Heemskerk","c":"Netherlands","y":52.5108,"x":4.6728},{"n":"Curuca","c":"Brazil","y":-0.7339,"x":-47.855},{"n":"Bluefield","c":"United States","y":37.2608,"x":-81.2143},{"n":"Fitchburg","c":"United States","y":42.5912,"x":-71.8156},{"n":"Orange","c":"Australia","y":-33.2833,"x":149.1},{"n":"Rovereto","c":"Italy","y":45.8833,"x":11.0342},{"n":"Braine-l'Alleud","c":"Belgium","y":50.6806,"x":4.3717},{"n":"Iesi","c":"Italy","y":43.5228,"x":13.2439},{"n":"Huckelhoven","c":"Germany","y":51.0608,"x":6.2197},{"n":"Huaura","c":"Peru","y":-11.1,"x":-77.6},{"n":"San Fernando de Henares","c":"Spain","y":40.4256,"x":-3.5353},{"n":"Farnham","c":"United Kingdom","y":51.215,"x":-0.799},{"n":"Uray","c":"Russia","y":60.1333,"x":64.7833},{"n":"Maihar","c":"India","y":24.27,"x":80.75},{"n":"Halberstadt","c":"Germany","y":51.8958,"x":11.0467},{"n":"Cedar Falls","c":"United States","y":42.5195,"x":-92.4534},{"n":"Cumbal","c":"Colombia","y":0.9078,"x":-77.7908},{"n":"Yian","c":"China","y":47.8804,"x":125.3},{"n":"Maintal","c":"Germany","y":50.15,"x":8.8333},{"n":"Neumarkt","c":"Germany","y":49.2833,"x":11.4667},{"n":"Binh Long","c":"Vietnam","y":11.6504,"x":106.6},{"n":"Pyu","c":"Myanmar","y":18.4779,"x":96.4379},{"n":"Buffalo Grove","c":"United States","y":42.1673,"x":-87.9616},{"n":"Jamestown","c":"United States","y":42.0975,"x":-79.2366},{"n":"Asuncion Mita","c":"Guatemala","y":14.3333,"x":-89.7167},{"n":"Arcos","c":"Brazil","y":-20.2914,"x":-45.5397},{"n":"Hofheim","c":"Germany","y":50.0876,"x":8.4447},{"n":"Caraga","c":"Philippines","y":7.3333,"x":126.5667},{"n":"Sao Manuel","c":"Brazil","y":-22.7308,"x":-48.5708},{"n":"Aracataca","c":"Colombia","y":10.5911,"x":-74.185},{"n":"Clarksburg","c":"United States","y":39.2863,"x":-80.323},{"n":"Anglet","c":"France","y":43.485,"x":-1.5183},{"n":"Baksan","c":"Russia","y":43.6833,"x":43.5333},{"n":"Zainsk","c":"Russia","y":55.3,"x":52.0167},{"n":"Royal Palm Beach","c":"United States","y":26.7038,"x":-80.2241},{"n":"South Upi","c":"Philippines","y":6.8548,"x":124.1443},{"n":"Imbituba","c":"Brazil","y":-28.24,"x":-48.67},{"n":"Ozu","c":"Japan","y":33.5064,"x":132.5447},{"n":"Abucay","c":"Philippines","y":14.7222,"x":120.5354},{"n":"Freital","c":"Germany","y":51.0167,"x":13.65},{"n":"Tuquerres","c":"Colombia","y":1.0872,"x":-77.6189},{"n":"Lohne","c":"Germany","y":52.2,"x":8.7},{"n":"Jipijapa","c":"Ecuador","y":-1.3486,"x":-80.5786},{"n":"Al Qa`idah","c":"Yemen","y":13.7569,"x":44.1392},{"n":"Eboli","c":"Italy","y":40.6169,"x":15.0564},{"n":"Oswiecim","c":"Poland","y":50.0333,"x":19.2333},{"n":"Covington","c":"United States","y":39.0334,"x":-84.5166},{"n":"Junnar","c":"India","y":19.2,"x":73.88},{"n":"Schorndorf","c":"Germany","y":48.8,"x":9.5333},{"n":"Belaya Kalitva","c":"Russia","y":48.1667,"x":40.7833},{"n":"Coram","c":"United States","y":40.8813,"x":-73.0059},{"n":"Tiete","c":"Brazil","y":-23.1019,"x":-47.715},{"n":"Friendswood","c":"United States","y":29.5111,"x":-95.1979},{"n":"Arawa","c":"Papua New Guinea","y":-6.228,"x":155.566},{"n":"Aguas Belas","c":"Brazil","y":-9.1167,"x":-37.1167},{"n":"Povazska Bystrica","c":"Slovakia","y":49.1167,"x":18.45},{"n":"Boa Esperanca","c":"Brazil","y":-21.09,"x":-45.5658},{"n":"Itoigawa","c":"Japan","y":37.0333,"x":137.85},{"n":"Indian Trail","c":"United States","y":35.0698,"x":-80.6457},{"n":"Kasumigaura","c":"Japan","y":36.1519,"x":140.2372},{"n":"San Agustin Acasaguastlan","c":"Guatemala","y":14.95,"x":-89.9667},{"n":"Sejenane","c":"Tunisia","y":37.0564,"x":9.2382},{"n":"Woburn","c":"United States","y":42.4869,"x":-71.1543},{"n":"Camargo","c":"Mexico","y":27.667,"x":-105.167},{"n":"Medgidia","c":"Romania","y":44.2503,"x":28.2614},{"n":"Balabac","c":"Philippines","y":7.9833,"x":117.05},{"n":"Saraqib","c":"Syria","y":35.8644,"x":36.8058},{"n":"Santiago Nonualco","c":"El Salvador","y":13.5167,"x":-88.95},{"n":"Mtsensk","c":"Russia","y":53.2833,"x":36.5667},{"n":"Tutayev","c":"Russia","y":57.8833,"x":39.5333},{"n":"Tipton","c":"United Kingdom","y":52.5259,"x":-2.0751},{"n":"Longtang","c":"China","y":26.1984,"x":107.7946},{"n":"Ban Bang Khu Lat","c":"Thailand","y":13.9134,"x":100.369},{"n":"Villanueva","c":"Philippines","y":8.5833,"x":124.7833},{"n":"The Acreage","c":"United States","y":26.7741,"x":-80.2779},{"n":"Penjamo","c":"Mexico","y":20.4311,"x":-101.7222},{"n":"Bom Jardim","c":"Brazil","y":-7.7958,"x":-35.5869},{"n":"Tucuma","c":"Brazil","y":-6.7519,"x":-51.1539},{"n":"Oroqen Zizhiqi","c":"China","y":50.5667,"x":123.7167},{"n":"Hangu","c":"Pakistan","y":33.5281,"x":71.0572},{"n":"Liloy","c":"Philippines","y":8.1167,"x":122.6667},{"n":"Raub","c":"Malaysia","y":3.7931,"x":101.8569},{"n":"Holyoke","c":"United States","y":42.2125,"x":-72.6411},{"n":"Amursk","c":"Russia","y":50.2167,"x":136.9},{"n":"Nueva Valencia","c":"Philippines","y":10.5259,"x":122.5398},{"n":"Glenrothes","c":"United Kingdom","y":56.198,"x":-3.178},{"n":"Tucuran","c":"Philippines","y":7.85,"x":123.5833},{"n":"Maddaloni","c":"Italy","y":41.0333,"x":14.3833},{"n":"South Valley","c":"United States","y":35.0092,"x":-106.6819},{"n":"Altagracia de Orituco","c":"Venezuela","y":9.8504,"x":-66.38},{"n":"Draguignan","c":"France","y":43.5403,"x":6.4667},{"n":"Fondi","c":"Italy","y":41.35,"x":13.4167},{"n":"Santa Cruz","c":"Brazil","y":-6.2289,"x":-36.0228},{"n":"Payabon","c":"Philippines","y":9.7667,"x":123.1333},{"n":"Isfara","c":"Tajikistan","y":40.1167,"x":70.6333},{"n":"Llanera","c":"Philippines","y":15.6667,"x":121.0167},{"n":"Plasencia","c":"Spain","y":40.0275,"x":-6.0908},{"n":"Otavalo","c":"Ecuador","y":0.2333,"x":-78.2667},{"n":"Zhongbai","c":"China","y":26.7723,"x":107.8883},{"n":"Anda","c":"Philippines","y":16.2896,"x":119.9491},{"n":"Ettlingen","c":"Germany","y":48.9333,"x":8.4},{"n":"Alashankou","c":"China","y":45.1714,"x":82.5731},{"n":"Jiaozishan","c":"China","y":26.3342,"x":105.9324},{"n":"Tarauaca","c":"Brazil","y":-8.1608,"x":-70.7658},{"n":"Ouro Branco","c":"Brazil","y":-20.5208,"x":-43.6919},{"n":"Jayrud","c":"Syria","y":33.8072,"x":36.7403},{"n":"Bacolor","c":"Philippines","y":14.9984,"x":120.6526},{"n":"PortoAlexandre","c":"Angola","y":-15.8032,"x":11.8459},{"n":"Torrington","c":"United States","y":41.8349,"x":-73.1281},{"n":"Laurel","c":"Philippines","y":14.05,"x":120.9},{"n":"Cedar City","c":"United States","y":37.6834,"x":-113.0956},{"n":"Fasano","c":"Italy","y":40.8333,"x":17.3667},{"n":"Marlboro","c":"United States","y":40.3427,"x":-74.2567},{"n":"Halle","c":"Belgium","y":50.7361,"x":4.2372},{"n":"Hinatuan","c":"Philippines","y":8.3667,"x":126.3333},{"n":"Voghera","c":"Italy","y":44.9925,"x":9.0092},{"n":"Rauma","c":"Finland","y":61.1167,"x":21.5},{"n":"Volklingen","c":"Germany","y":49.25,"x":6.8333},{"n":"Villa de San Diego de Ubate","c":"Colombia","y":5.3072,"x":-73.8144},{"n":"Acevedo","c":"Colombia","y":1.8047,"x":-75.8897},{"n":"Xinlizhuang","c":"China","y":39.2832,"x":116.1727},{"n":"Curitibanos","c":"Brazil","y":-27.2828,"x":-50.5839},{"n":"Yecapixtla","c":"Mexico","y":18.8833,"x":-98.865},{"n":"Ecija","c":"Spain","y":37.5333,"x":-5.0833},{"n":"Mambusao","c":"Philippines","y":11.4333,"x":122.6},{"n":"Michalovce","c":"Slovakia","y":48.7575,"x":21.9183},{"n":"Esperantina","c":"Brazil","y":-3.9019,"x":-42.2339},{"n":"Lloret de Mar","c":"Spain","y":41.7,"x":2.8333},{"n":"Weibo","c":"China","y":38.029,"x":115.2174},{"n":"Ouro Preto d'Oeste","c":"Brazil","y":-10.7481,"x":-62.2158},{"n":"Matias Romero","c":"Mexico","y":16.8798,"x":-95.0391},{"n":"Wurselen","c":"Germany","y":50.8247,"x":6.1275},{"n":"Crystal Lake","c":"United States","y":42.2333,"x":-88.3351},{"n":"Calexico","c":"United States","y":32.6849,"x":-115.4944},{"n":"Lake Oswego","c":"United States","y":45.413,"x":-122.7003},{"n":"Varzea da Palma","c":"Brazil","y":-17.5978,"x":-44.7308},{"n":"Kurobeshin","c":"Japan","y":36.8667,"x":137.45},{"n":"Villamontes","c":"Bolivia","y":-21.2647,"x":-63.4586},{"n":"Apsheronsk","c":"Russia","y":44.4608,"x":39.7406},{"n":"Buchholz in der Nordheide","c":"Germany","y":53.3285,"x":9.8621},{"n":"Libano","c":"Colombia","y":4.9206,"x":-75.0611},{"n":"Dolores","c":"Guatemala","y":16.5142,"x":-89.4158},{"n":"Mibu","c":"Japan","y":36.4272,"x":139.8039},{"n":"Muskogee","c":"United States","y":35.7431,"x":-95.3568},{"n":"Bosconia","c":"Colombia","y":9.9761,"x":-73.8903},{"n":"Steyr","c":"Austria","y":48.05,"x":14.4167},{"n":"Balaoan","c":"Philippines","y":16.8167,"x":120.4},{"n":"Romeoville","c":"United States","y":41.6318,"x":-88.0996},{"n":"Plant City","c":"United States","y":28.014,"x":-82.1201},{"n":"Kibawe","c":"Philippines","y":7.5667,"x":124.9833},{"n":"Mettmann","c":"Germany","y":51.25,"x":6.9667},{"n":"Citta di Castello","c":"Italy","y":43.4574,"x":12.2403},{"n":"Santo Antonio","c":"Brazil","y":-29.8178,"x":-50.52},{"n":"Iturama","c":"Brazil","y":-19.7278,"x":-50.1958},{"n":"Rosario do Sul","c":"Brazil","y":-30.2578,"x":-54.9139},{"n":"Solan","c":"India","y":30.92,"x":77.12},{"n":"Novodvinsk","c":"Russia","y":64.4167,"x":40.8167},{"n":"Manalapan","c":"United States","y":40.28,"x":-74.3436},{"n":"Pagalungan","c":"Philippines","y":7.0592,"x":124.6987},{"n":"New Berlin","c":"United States","y":42.9726,"x":-88.1291},{"n":"Schio","c":"Italy","y":45.7111,"x":11.3556},{"n":"La Chaux-de-Fonds","c":"Switzerland","y":47.0996,"x":6.8296},{"n":"Sama","c":"Spain","y":43.3,"x":-5.6833},{"n":"Socorro","c":"Brazil","y":-22.5908,"x":-46.5289},{"n":"Modugno","c":"Italy","y":41.0833,"x":16.7833},{"n":"Naron","c":"Spain","y":43.55,"x":-8.15},{"n":"Araquari","c":"Brazil","y":-26.37,"x":-48.7219},{"n":"Tampakan","c":"Philippines","y":6.45,"x":124.9333},{"n":"Santa Eulalia del Rio","c":"Spain","y":38.9847,"x":1.5336},{"n":"Roy","c":"United States","y":41.1715,"x":-112.0485},{"n":"Security-Widefield","c":"United States","y":38.7489,"x":-104.7142},{"n":"Villa del Carbon","c":"Mexico","y":19.7272,"x":-99.5417},{"n":"Onesti","c":"Romania","y":46.25,"x":26.7667},{"n":"Takikawa","c":"Japan","y":43.5578,"x":141.9106},{"n":"Dupnitsa","c":"Bulgaria","y":42.265,"x":23.1185},{"n":"Marlborough","c":"United States","y":42.3494,"x":-71.5468},{"n":"Milton","c":"United States","y":34.1353,"x":-84.3138},{"n":"Stendal","c":"Germany","y":52.6,"x":11.85},{"n":"Novo Horizonte","c":"Brazil","y":-21.4678,"x":-49.2208},{"n":"Afua","c":"Brazil","y":-0.1569,"x":-50.3869},{"n":"Sanjiang","c":"China","y":24.7265,"x":112.2884},{"n":"San Giuliano Milanese","c":"Italy","y":45.4,"x":9.2833},{"n":"Hillsborough","c":"United States","y":40.4985,"x":-74.674},{"n":"Trofa","c":"Portugal","y":41.3374,"x":-8.5596},{"n":"Polanco","c":"Philippines","y":8.5333,"x":123.3667},{"n":"Tagudin","c":"Philippines","y":16.9333,"x":120.45},{"n":"Pokrov","c":"Ukraine","y":47.6632,"x":34.0811},{"n":"Yangfang","c":"China","y":40.5723,"x":115.0301},{"n":"Andover","c":"United Kingdom","y":51.208,"x":-1.48},{"n":"President Manuel Acuna Roxas","c":"Philippines","y":8.5196,"x":123.2277},{"n":"Borlange","c":"Sweden","y":60.4833,"x":15.4167},{"n":"Issaquah","c":"United States","y":47.544,"x":-122.0471},{"n":"San Juan del Cesar","c":"Colombia","y":10.7708,"x":-73.0031},{"n":"Benjamin Constant","c":"Brazil","y":-4.3755,"x":-70.0318},{"n":"Ahaus","c":"Germany","y":52.0794,"x":7.0134},{"n":"Presidente Venceslau","c":"Brazil","y":-21.8761,"x":-51.8439},{"n":"Niutuo","c":"China","y":39.2618,"x":116.3421},{"n":"Carini","c":"Italy","y":38.1333,"x":13.1833},{"n":"Ninove","c":"Belgium","y":50.8333,"x":4.0167},{"n":"Sayansk","c":"Russia","y":54.1167,"x":102.1667},{"n":"Essex","c":"United States","y":39.3024,"x":-76.4457},{"n":"Szigetszentmiklos","c":"Hungary","y":47.3453,"x":19.0483},{"n":"Parral","c":"Chile","y":-36.15,"x":-71.8333},{"n":"Vendrell","c":"Spain","y":41.2201,"x":1.5348},{"n":"Tlalixcoyan","c":"Mexico","y":18.8031,"x":-96.0611},{"n":"Tabogon","c":"Philippines","y":10.9333,"x":124.0333},{"n":"Eccles","c":"United Kingdom","y":53.4824,"x":-2.339},{"n":"Draa el Mizan","c":"Algeria","y":36.5333,"x":3.8333},{"n":"Apan","c":"Mexico","y":19.7,"x":-98.4333},{"n":"Socorro","c":"Philippines","y":13.0583,"x":121.4117},{"n":"Sao Francisco do Conde","c":"Brazil","y":-12.6278,"x":-38.68},{"n":"Lasam","c":"Philippines","y":18.0667,"x":121.6},{"n":"Bartlesville","c":"United States","y":36.7357,"x":-95.9453},{"n":"Borba","c":"Brazil","y":-4.3878,"x":-59.5939},{"n":"Niederkassel","c":"Germany","y":50.8167,"x":7.0333},{"n":"Taraza","c":"Colombia","y":7.5839,"x":-75.4003},{"n":"Northampton","c":"United States","y":40.2104,"x":-75.0014},{"n":"Higashimatsushima","c":"Japan","y":38.4264,"x":141.2106},{"n":"Volodymyr-Volynskyi","c":"Ukraine","y":50.8481,"x":24.3222},{"n":"Ilmenau","c":"Germany","y":50.6872,"x":10.9142},{"n":"Hatfield","c":"United Kingdom","y":51.762,"x":-0.228},{"n":"Bulalacao","c":"Philippines","y":12.3333,"x":121.35},{"n":"Streamwood","c":"United States","y":42.0209,"x":-88.1778},{"n":"Great Yarmouth","c":"United Kingdom","y":52.606,"x":1.729},{"n":"Sidi Bibi","c":"Morocco","y":30.2333,"x":-9.5333},{"n":"Neu Isenburg","c":"Germany","y":50.0558,"x":8.6971},{"n":"Yelizovo","c":"Russia","y":53.1833,"x":158.3833},{"n":"El Viejo","c":"Nicaragua","y":12.6667,"x":-87.1667},{"n":"Langen","c":"Germany","y":49.9893,"x":8.6803},{"n":"Carol Stream","c":"United States","y":41.9182,"x":-88.1308},{"n":"Sungandiancun","c":"China","y":36.2221,"x":115.3246},{"n":"Salinas","c":"Brazil","y":-16.1185,"x":-42.174},{"n":"Asheboro","c":"United States","y":35.7158,"x":-79.8129},{"n":"Kalispell","c":"United States","y":48.2156,"x":-114.3262},{"n":"Cayambe","c":"Ecuador","y":0.0439,"x":-78.1561},{"n":"Arecibo","c":"Puerto Rico","y":18.4491,"x":-66.7387},{"n":"Xiwanzi","c":"China","y":40.9717,"x":115.2737},{"n":"Baikonur","c":"Kazakhstan","y":45.63,"x":63.314},{"n":"Dwarka","c":"India","y":22.2403,"x":68.9686},{"n":"Changchunpu","c":"China","y":27.2388,"x":105.185},{"n":"Omagari","c":"Japan","y":39.4531,"x":140.4754},{"n":"Sao Mateus do Maranhao","c":"Brazil","y":-4.04,"x":-44.47},{"n":"Lynnwood","c":"United States","y":47.8284,"x":-122.3033},{"n":"Siguatepeque","c":"Honduras","y":14.6,"x":-87.8333},{"n":"Mooresville","c":"United States","y":35.5849,"x":-80.8265},{"n":"Monreale","c":"Italy","y":38.0817,"x":13.2889},{"n":"Kachkanar","c":"Russia","y":58.7,"x":59.4833},{"n":"Al Malikiyah","c":"Syria","y":37.1781,"x":42.1403},{"n":"Landgraaf","c":"Netherlands","y":50.9083,"x":6.0297},{"n":"Nuevitas","c":"Cuba","y":21.5403,"x":-77.2644},{"n":"Mobo","c":"Philippines","y":12.3333,"x":123.65},{"n":"Shijiazhuangnan","c":"China","y":37.9383,"x":114.4453},{"n":"San Dionisio","c":"Philippines","y":11.2711,"x":123.0948},{"n":"Joue-les-Tours","c":"France","y":47.3514,"x":0.6625},{"n":"Igarape-Acu","c":"Brazil","y":-1.1269,"x":-47.6178},{"n":"Crestview","c":"United States","y":30.748,"x":-86.5784},{"n":"Horizon West","c":"United States","y":28.4417,"x":-81.6145},{"n":"Toumodi","c":"Côte D’Ivoire","y":6.552,"x":-5.019},{"n":"Inashiki","c":"Japan","y":35.9567,"x":140.3239},{"n":"Kurchatov","c":"Russia","y":51.6667,"x":35.65},{"n":"Pirna","c":"Germany","y":50.9622,"x":13.9403},{"n":"Caivano","c":"Italy","y":40.95,"x":14.3},{"n":"Rtishchevo","c":"Russia","y":52.25,"x":43.7833},{"n":"Pala Oua","c":"Chad","y":9.35,"x":14.9667},{"n":"Clinton","c":"United States","y":38.7499,"x":-76.9063},{"n":"Ancud","c":"Chile","y":-41.8682,"x":-73.8287},{"n":"Moses Lake","c":"United States","y":47.128,"x":-119.2761},{"n":"Souma","c":"Algeria","y":36.5183,"x":2.9053},{"n":"Vasylkiv","c":"Ukraine","y":50.1775,"x":30.3217},{"n":"Dingras","c":"Philippines","y":18.1,"x":120.7},{"n":"Mira","c":"Italy","y":45.4375,"x":12.1329},{"n":"Umi","c":"Japan","y":33.5683,"x":130.51},{"n":"Gonzaga","c":"Philippines","y":18.2667,"x":122},{"n":"Hitachiomiya","c":"Japan","y":36.5517,"x":140.4119},{"n":"Tagbina","c":"Philippines","y":8.45,"x":126.1667},{"n":"Tshela","c":"Congo (Kinshasa)","y":-4.9696,"x":12.93},{"n":"Malalag","c":"Philippines","y":6.6,"x":125.4},{"n":"Dubno","c":"Ukraine","y":50.3931,"x":25.735},{"n":"Galeana","c":"Mexico","y":24.8333,"x":-100.0667},{"n":"New Castle","c":"United States","y":40.9956,"x":-80.3459},{"n":"Olive Branch","c":"United States","y":34.961,"x":-89.8469},{"n":"Bitterfeld","c":"Germany","y":51.6167,"x":12.3167},{"n":"Dom Pedrito","c":"Brazil","y":-30.9828,"x":-54.6728},{"n":"Bautzen","c":"Germany","y":51.1814,"x":14.4239},{"n":"Los Palacios y Villafranca","c":"Spain","y":37.1625,"x":-5.9242},{"n":"Sakuragawa","c":"Japan","y":36.3272,"x":140.0906},{"n":"La Libertad","c":"Philippines","y":10.0333,"x":123.2167},{"n":"Sun City","c":"United States","y":33.6165,"x":-112.2819},{"n":"Melchor Ocampo","c":"Mexico","y":19.7083,"x":-99.1444},{"n":"Mondragon","c":"Philippines","y":12.5167,"x":124.75},{"n":"Skelmersdale","c":"United Kingdom","y":53.55,"x":-2.776},{"n":"Furstenfeldbruck","c":"Germany","y":48.1778,"x":11.2556},{"n":"Balcarce","c":"Argentina","y":-37.8464,"x":-58.2556},{"n":"Mission","c":"Canada","y":49.1337,"x":-122.3112},{"n":"Pervomaisk","c":"Ukraine","y":48.6333,"x":38.5167},{"n":"Winslow","c":"United States","y":39.7027,"x":-74.9029},{"n":"Groton","c":"United States","y":41.3597,"x":-72.0293},{"n":"Bukama","c":"Congo (Kinshasa)","y":-9.2,"x":25.8333},{"n":"Agoncillo","c":"Philippines","y":13.9334,"x":120.9285},{"n":"Tuusula","c":"Finland","y":60.4028,"x":25.0292},{"n":"Promissao","c":"Brazil","y":-21.5369,"x":-49.8583},{"n":"Faraskur","c":"Egypt","y":31.3297,"x":31.7147},{"n":"Pedro II","c":"Brazil","y":-4.4338,"x":-41.4534},{"n":"Dabola","c":"Guinea","y":10.75,"x":-11.1167},{"n":"Gujo","c":"Japan","y":35.7486,"x":136.9644},{"n":"Cajibio","c":"Colombia","y":2.6233,"x":-76.5731},{"n":"Los Palacios","c":"Cuba","y":22.5822,"x":-83.2489},{"n":"Duncanville","c":"United States","y":32.646,"x":-96.9127},{"n":"Sao Fidelis","c":"Brazil","y":-21.6458,"x":-41.7469},{"n":"Kirkkonummi","c":"Finland","y":60.1167,"x":24.4167},{"n":"Dzhankoi","c":"Ukraine","y":45.7086,"x":34.3933},{"n":"Sibate","c":"Colombia","y":4.4908,"x":-74.2594},{"n":"Nove Zamky","c":"Slovakia","y":47.9831,"x":18.1728},{"n":"Mechelen-aan-de-Maas","c":"Belgium","y":50.9967,"x":5.7025},{"n":"Segovia","c":"Colombia","y":7.0781,"x":-74.7017},{"n":"Maayon","c":"Philippines","y":11.3833,"x":122.7833},{"n":"Alimodian","c":"Philippines","y":10.8196,"x":122.4322},{"n":"Amadeo","c":"Philippines","y":14.1728,"x":120.9277},{"n":"Siniloan","c":"Philippines","y":14.4167,"x":121.45},{"n":"La Union","c":"Guatemala","y":14.9667,"x":-89.2833},{"n":"Hurst","c":"United States","y":32.8353,"x":-97.1808},{"n":"Clermont","c":"United States","y":28.5402,"x":-81.7259},{"n":"Mariinsk","c":"Russia","y":56.2167,"x":87.75},{"n":"Bayan","c":"China","y":36.1148,"x":102.2476},{"n":"Guariba","c":"Brazil","y":-21.36,"x":-48.2283},{"n":"Malilipot","c":"Philippines","y":13.3167,"x":123.7333},{"n":"Vallehermoso","c":"Philippines","y":10.3333,"x":123.3167},{"n":"Krasnoufimsk","c":"Russia","y":56.6167,"x":57.7667},{"n":"Zary","c":"Poland","y":51.6333,"x":15.1333},{"n":"Xiaguanying","c":"China","y":35.9427,"x":104.1717},{"n":"Valladolid","c":"Philippines","y":10.4667,"x":122.8333},{"n":"Abinsk","c":"Russia","y":44.8667,"x":38.1667},{"n":"Dubbo","c":"Australia","y":-32.2569,"x":148.6011},{"n":"Daraw","c":"Egypt","y":24.4003,"x":32.9306},{"n":"San Felipe Orizatlan","c":"Mexico","y":21.1719,"x":-98.6064},{"n":"Lanyi","c":"China","y":38.7048,"x":111.5601},{"n":"Uryupinsk","c":"Russia","y":50.8,"x":42.0167},{"n":"Jaroslaw","c":"Poland","y":50.0162,"x":22.6778},{"n":"Monan","c":"China","y":38.2621,"x":115.9504},{"n":"Veghel","c":"Netherlands","y":51.6169,"x":5.5481},{"n":"Karditsa","c":"Greece","y":39.3647,"x":21.9219},{"n":"Khalkhal","c":"Iran","y":37.6189,"x":48.5258},{"n":"Pacifica","c":"United States","y":37.6112,"x":-122.4781},{"n":"Maddela","c":"Philippines","y":16.35,"x":121.7},{"n":"Alianca","c":"Brazil","y":-7.6028,"x":-35.2308},{"n":"Siyang","c":"China","y":27.2116,"x":108.7463},{"n":"Caibarien","c":"Cuba","y":22.5158,"x":-79.4722},{"n":"Konakovo","c":"Russia","y":56.7129,"x":36.7783},{"n":"Itiuba","c":"Brazil","y":-10.6908,"x":-39.8528},{"n":"Falavarjan","c":"Iran","y":32.5553,"x":51.5097},{"n":"Americo Brasiliense","c":"Brazil","y":-21.7361,"x":-48.1114},{"n":"Sassandra","c":"Côte D’Ivoire","y":4.9504,"x":-6.0833},{"n":"Varzea Alegre","c":"Brazil","y":-6.7889,"x":-39.2958},{"n":"Talacogon","c":"Philippines","y":8.4488,"x":125.7869},{"n":"Ventanas","c":"Ecuador","y":-1.45,"x":-79.47},{"n":"Hanumannagar","c":"Nepal","y":26.5394,"x":86.7483},{"n":"Taysan","c":"Philippines","y":13.7833,"x":121.2},{"n":"Land O' Lakes","c":"United States","y":28.2075,"x":-82.4476},{"n":"Venlo","c":"Netherlands","y":51.37,"x":6.1681},{"n":"Maimbung","c":"Philippines","y":5.9333,"x":121.0333},{"n":"San Jacinto de Buena Fe","c":"Ecuador","y":-0.8932,"x":-79.4907},{"n":"Bodoco","c":"Brazil","y":-7.7778,"x":-39.9408},{"n":"Yanqi","c":"China","y":42.0608,"x":86.5686},{"n":"Caltagirone","c":"Italy","y":37.2333,"x":14.5167},{"n":"Kaka","c":"Turkmenistan","y":37.3503,"x":59.6},{"n":"Ibara","c":"Japan","y":34.5978,"x":133.4639},{"n":"Eagle Mountain","c":"United States","y":40.3137,"x":-112.0114},{"n":"Usinsk","c":"Russia","y":65.9998,"x":57.5414},{"n":"Sharypovo","c":"Russia","y":55.525,"x":89.2},{"n":"Moncada","c":"Spain","y":41.4867,"x":2.1879},{"n":"Atamyrat","c":"Turkmenistan","y":37.8167,"x":65.2},{"n":"Alekseyevka","c":"Russia","y":50.6333,"x":38.6833},{"n":"Villagarcia de Arosa","c":"Spain","y":42.5977,"x":-8.7632},{"n":"Bol'shoy Kamen'","c":"Russia","y":43.1167,"x":132.35},{"n":"Ciudad Manuel Doblado","c":"Mexico","y":20.7303,"x":-101.9533},{"n":"Katsuragi","c":"Japan","y":34.4892,"x":135.7267},{"n":"Reynoldsburg","c":"United States","y":39.9587,"x":-82.7944},{"n":"Sabang","c":"Indonesia","y":5.8931,"x":95.32},{"n":"Pathanamthitta","c":"India","y":9.2647,"x":76.7872},{"n":"Krasnyy Sulin","c":"Russia","y":47.8833,"x":40.0667},{"n":"Lyudinovo","c":"Russia","y":53.8667,"x":34.4667},{"n":"Oxford","c":"United States","y":34.3627,"x":-89.5336},{"n":"Rosenberg","c":"United States","y":29.546,"x":-95.822},{"n":"Pitangueiras","c":"Brazil","y":-21.0094,"x":-48.2217},{"n":"Martinez","c":"United States","y":37.9985,"x":-122.116},{"n":"Zavolzhye","c":"Russia","y":56.6425,"x":43.3928},{"n":"Mapandan","c":"Philippines","y":16.0167,"x":120.45},{"n":"Balud","c":"Philippines","y":12.0369,"x":123.1935},{"n":"Rio Pardo","c":"Brazil","y":-29.99,"x":-52.3778},{"n":"Cerveteri","c":"Italy","y":42,"x":12.1},{"n":"Pleasant Grove","c":"United States","y":40.3716,"x":-111.7412},{"n":"Badian","c":"Philippines","y":9.8694,"x":123.3959},{"n":"Bonito","c":"Brazil","y":-8.47,"x":-35.7289},{"n":"Margosatubig","c":"Philippines","y":7.5783,"x":123.1659},{"n":"Dengtangcun","c":"China","y":23.6861,"x":116.5284},{"n":"Backnang","c":"Germany","y":48.9464,"x":9.4306},{"n":"Severna Park","c":"United States","y":39.087,"x":-76.5687},{"n":"Xinpo","c":"China","y":21.6645,"x":110.8911},{"n":"Teijlingen","c":"Netherlands","y":52.215,"x":4.5103},{"n":"Houghton le Spring","c":"United Kingdom","y":54.841,"x":-1.468},{"n":"Taounate","c":"Morocco","y":34.5358,"x":-4.64},{"n":"Izobil'nyy","c":"Russia","y":45.3667,"x":41.7167},{"n":"Huber Heights","c":"United States","y":39.8595,"x":-84.113},{"n":"Xinqiao","c":"China","y":39.2694,"x":116.0797},{"n":"Vaudreuil-Dorion","c":"Canada","y":45.4,"x":-74.0333},{"n":"Goes","c":"Netherlands","y":51.5,"x":3.8833},{"n":"Sampues","c":"Colombia","y":9.1847,"x":-75.3786},{"n":"Maroantsetra","c":"Madagascar","y":-15.4333,"x":49.7333},{"n":"Capelinha","c":"Brazil","y":-17.6908,"x":-42.5158},{"n":"Boryslav","c":"Ukraine","y":49.2881,"x":23.4267},{"n":"Geleen","c":"Netherlands","y":50.9667,"x":5.8333},{"n":"Yamen","c":"China","y":22.3017,"x":113.051},{"n":"Las Navas","c":"Philippines","y":12.34,"x":125.032},{"n":"Yuzhnouralsk","c":"Russia","y":54.45,"x":61.25},{"n":"Spoleto","c":"Italy","y":42.7333,"x":12.7333},{"n":"Yajalon","c":"Mexico","y":17.1852,"x":-92.3272},{"n":"Guira de Melena","c":"Cuba","y":22.8019,"x":-82.5047},{"n":"Aristobulo del Valle","c":"Argentina","y":-27.0952,"x":-54.897},{"n":"Mullaittivu","c":"Sri Lanka","y":9.2833,"x":80.8},{"n":"Formia","c":"Italy","y":41.2564,"x":13.6069},{"n":"Mixquiahuala de Juarez","c":"Mexico","y":20.2311,"x":-99.2131},{"n":"Menomonee Falls","c":"United States","y":43.1487,"x":-88.1227},{"n":"Hajin","c":"Syria","y":34.6894,"x":40.8308},{"n":"Bathurst","c":"Australia","y":-33.42,"x":149.5778},{"n":"Granbury","c":"United States","y":32.4484,"x":-97.7685},{"n":"Clarin","c":"Philippines","y":8.2,"x":123.85},{"n":"Waxahachie","c":"United States","y":32.4032,"x":-96.8444},{"n":"Kamp-Lintfort","c":"Germany","y":51.5,"x":6.5333},{"n":"Valrico","c":"United States","y":27.9193,"x":-82.2293},{"n":"Sighetu Marmatiei","c":"Romania","y":47.9309,"x":23.8947},{"n":"Argun","c":"Russia","y":43.3,"x":45.8667},{"n":"Constitucion","c":"Chile","y":-35.3333,"x":-72.4167},{"n":"Greven","c":"Germany","y":52.0917,"x":7.6083},{"n":"Kapiri Mposhi","c":"Zambia","y":-13.9696,"x":28.66},{"n":"Madridejos","c":"Philippines","y":11.2667,"x":123.7333},{"n":"Maragondon","c":"Philippines","y":14.2667,"x":120.7333},{"n":"Amarante do Maranhao","c":"Brazil","y":-5.5669,"x":-46.7419},{"n":"Santiago","c":"Mexico","y":25.4333,"x":-100.1333},{"n":"Sanchahe","c":"China","y":36.378,"x":106.0869},{"n":"Pentecoste","c":"Brazil","y":-3.7928,"x":-39.27},{"n":"Ceska Lipa","c":"Czechia","y":50.6856,"x":14.5377},{"n":"Marratxi","c":"Spain","y":39.6421,"x":2.7527},{"n":"Shakhtinsk","c":"Kazakhstan","y":49.71,"x":72.5872},{"n":"Papenburg","c":"Germany","y":53.0667,"x":7.4},{"n":"Akhtubinsk","c":"Russia","y":48.2833,"x":46.1667},{"n":"Amargosa","c":"Brazil","y":-13.03,"x":-39.605},{"n":"Cabugao","c":"Philippines","y":17.8,"x":120.45},{"n":"Ipueiras","c":"Brazil","y":-4.5419,"x":-40.7189},{"n":"Spisska Nova Ves","c":"Slovakia","y":48.95,"x":20.5667},{"n":"Dibulla","c":"Colombia","y":11.2725,"x":-73.3089},{"n":"Lluchmayor","c":"Spain","y":39.49,"x":2.8915},{"n":"Stirling","c":"United Kingdom","y":56.1166,"x":-3.9369},{"n":"Emirdag","c":"Turkey","y":39.0197,"x":31.15},{"n":"Guaraciaba do Norte","c":"Brazil","y":-4.1669,"x":-40.7478},{"n":"Al Qaryatayn","c":"Syria","y":34.2294,"x":37.2406},{"n":"Kasibu","c":"Philippines","y":16.3167,"x":121.2833},{"n":"Ma`arratmisrin","c":"Syria","y":36.0114,"x":36.6717},{"n":"Holly Springs","c":"United States","y":35.653,"x":-78.8397},{"n":"Malmesbury","c":"South Africa","y":-33.45,"x":18.7333},{"n":"Butler","c":"United States","y":40.8616,"x":-79.8962},{"n":"Mieres","c":"Spain","y":43.2508,"x":-5.7767},{"n":"Juanjui","c":"Peru","y":-7.1802,"x":-76.7265},{"n":"Pimenta Bueno","c":"Brazil","y":-11.6725,"x":-61.1936},{"n":"Dajiecun","c":"China","y":36.2965,"x":115.2071},{"n":"Geraldton","c":"Australia","y":-28.7744,"x":114.6089},{"n":"Pamplona","c":"Philippines","y":9.4667,"x":123.1167},{"n":"Lampa","c":"Chile","y":-33.2864,"x":-70.8729},{"n":"Albertville","c":"United States","y":34.2634,"x":-86.2107},{"n":"Aboisso","c":"Côte D’Ivoire","y":5.4667,"x":-3.2},{"n":"Haugesund","c":"Norway","y":59.4102,"x":5.2755},{"n":"Uchaly","c":"Russia","y":54.3167,"x":59.3833},{"n":"Tunduma","c":"Tanzania","y":-9.3,"x":32.7667},{"n":"Sunbury","c":"Australia","y":-37.5811,"x":144.7139},{"n":"London","c":"United States","y":37.1175,"x":-84.0767},{"n":"Reo","c":"Burkina Faso","y":12.3167,"x":-2.4667},{"n":"Wesseling","c":"Germany","y":50.8207,"x":6.9786},{"n":"Sao Goncalo dos Campos","c":"Brazil","y":-12.4328,"x":-38.9669},{"n":"Kahrizak","c":"Iran","y":35.5175,"x":51.3597},{"n":"Granadero Baigorria","c":"Argentina","y":-32.85,"x":-60.7},{"n":"Kalinkavichy","c":"Belarus","y":52.1333,"x":29.3333},{"n":"San Nicolas","c":"Philippines","y":18.1725,"x":120.5958},{"n":"Porteirinha","c":"Brazil","y":-15.7428,"x":-43.0278},{"n":"Ossining","c":"United States","y":41.1559,"x":-73.8565},{"n":"Chieri","c":"Italy","y":45.0131,"x":7.8228},{"n":"Igrejinha","c":"Brazil","y":-29.5739,"x":-50.79},{"n":"Nowra","c":"Australia","y":-34.8833,"x":150.6},{"n":"Cottage Grove","c":"United States","y":44.8161,"x":-92.9274},{"n":"Daiyue","c":"China","y":39.5204,"x":112.8168},{"n":"Kailua","c":"United States","y":21.392,"x":-157.7396},{"n":"Beckum","c":"Germany","y":51.7558,"x":8.0408},{"n":"Jelilyuzi","c":"China","y":43.9749,"x":81.5328},{"n":"Konigs Wusterhausen","c":"Germany","y":52.2917,"x":13.625},{"n":"Frolovo","c":"Russia","y":49.7714,"x":43.6622},{"n":"Alapayevsk","c":"Russia","y":57.85,"x":61.7},{"n":"Pojuca","c":"Brazil","y":-12.4308,"x":-38.3278},{"n":"El Bordo","c":"Colombia","y":2.1142,"x":-76.9831},{"n":"St. Marys","c":"United States","y":30.7567,"x":-81.5722},{"n":"Guaratuba","c":"Brazil","y":-25.8828,"x":-48.575},{"n":"Tosno","c":"Russia","y":59.54,"x":30.8775},{"n":"Chrzanow","c":"Poland","y":50.1333,"x":19.4},{"n":"Fermo","c":"Italy","y":43.1604,"x":13.7181},{"n":"Dalnegorsk","c":"Russia","y":44.5539,"x":135.5661},{"n":"Itarema","c":"Brazil","y":-2.92,"x":-39.915},{"n":"Fengguangcun","c":"China","y":23.9062,"x":116.6984},{"n":"Lilio","c":"Philippines","y":14.13,"x":121.436},{"n":"Nandaime","c":"Nicaragua","y":11.757,"x":-86.0529},{"n":"Goryachiy Klyuch","c":"Russia","y":44.6308,"x":39.13},{"n":"Malgobek","c":"Russia","y":43.5167,"x":44.5833},{"n":"Afogados da Ingazeira","c":"Brazil","y":-7.7508,"x":-37.6342},{"n":"Mechanicsville","c":"United States","y":37.6262,"x":-77.3561},{"n":"Bouznika","c":"Morocco","y":33.7894,"x":-7.1597},{"n":"San Blas","c":"Mexico","y":21.5397,"x":-105.2856},{"n":"Compostela","c":"Mexico","y":21.2389,"x":-104.9},{"n":"Santa Rosa de Osos","c":"Colombia","y":6.6472,"x":-75.4606},{"n":"Molndal","c":"Sweden","y":57.6542,"x":12.0139},{"n":"Risalpur Cantonment","c":"Pakistan","y":34.0049,"x":71.9989},{"n":"Cleburne","c":"United States","y":32.357,"x":-97.4152},{"n":"Shaxi","c":"China","y":22.3067,"x":113.1469},{"n":"Yirga `Alem","c":"Ethiopia","y":6.7504,"x":38.41},{"n":"Warendorf","c":"Germany","y":51.9539,"x":7.9933},{"n":"Bacong","c":"Philippines","y":9.2464,"x":123.2948},{"n":"Holubivske","c":"Ukraine","y":48.6375,"x":38.6433},{"n":"Yugorsk","c":"Russia","y":61.3167,"x":63.35},{"n":"Oswego","c":"United States","y":43.4516,"x":-76.5005},{"n":"Shrewsbury","c":"United States","y":42.2842,"x":-71.7154},{"n":"Melgar","c":"Colombia","y":4.2039,"x":-74.6428},{"n":"Patnongon","c":"Philippines","y":10.9167,"x":121.9833},{"n":"Baco","c":"Philippines","y":13.3584,"x":121.0977},{"n":"Lierre","c":"Belgium","y":51.1311,"x":4.5697},{"n":"Nossa Senhora da Gloria","c":"Brazil","y":-10.2178,"x":-37.42},{"n":"Oleiros","c":"Spain","y":43.3333,"x":-8.3166},{"n":"Aritao","c":"Philippines","y":16.2973,"x":121.0338},{"n":"Navarre","c":"United States","y":30.4174,"x":-86.8907},{"n":"Lebork","c":"Poland","y":54.55,"x":17.75},{"n":"Don Benito","c":"Spain","y":38.9545,"x":-5.8617},{"n":"Petrosani","c":"Romania","y":45.4122,"x":23.3733},{"n":"Mol","c":"Belgium","y":51.1842,"x":5.1156},{"n":"Montlucon","c":"France","y":46.3408,"x":2.6033},{"n":"Koryazhma","c":"Russia","y":61.3,"x":47.1667},{"n":"Oregon City","c":"United States","y":45.3415,"x":-122.5927},{"n":"Aracuai","c":"Brazil","y":-16.85,"x":-42.07},{"n":"Masyaf","c":"Syria","y":35.0653,"x":36.3421},{"n":"Mabuhay","c":"Philippines","y":7.4176,"x":122.837},{"n":"Winter Springs","c":"United States","y":28.6889,"x":-81.2704},{"n":"Tibu","c":"Colombia","y":8.64,"x":-72.7381},{"n":"Morondava","c":"Madagascar","y":-20.2833,"x":44.2833},{"n":"Parkland","c":"United States","y":47.1417,"x":-122.4376},{"n":"Daying","c":"China","y":39.0786,"x":116.1076},{"n":"Kizilyurt","c":"Russia","y":43.2,"x":46.8667},{"n":"Pahrump","c":"United States","y":36.2411,"x":-116.0176},{"n":"Tunzi","c":"China","y":35.5782,"x":107.3699},{"n":"Carpentersville","c":"United States","y":42.1227,"x":-88.2895},{"n":"Penfield","c":"United States","y":43.1602,"x":-77.4483},{"n":"Mangai","c":"Congo (Kinshasa)","y":-4.0396,"x":19.53},{"n":"Irbit","c":"Russia","y":57.6667,"x":63.0667},{"n":"Frankston","c":"Australia","y":-38.158,"x":145.135},{"n":"Cisterna di Latina","c":"Italy","y":41.6,"x":12.8333},{"n":"Wildomar","c":"United States","y":33.6173,"x":-117.2582},{"n":"Suhl","c":"Germany","y":50.6106,"x":10.6931},{"n":"Licata","c":"Italy","y":37.1083,"x":13.9469},{"n":"Tudela","c":"Spain","y":42.0653,"x":-1.6067},{"n":"Braintree","c":"United States","y":42.2039,"x":-71.0022},{"n":"Protvino","c":"Russia","y":54.8667,"x":37.2167},{"n":"Silves","c":"Portugal","y":37.1833,"x":-8.4333},{"n":"Rezh","c":"Russia","y":57.3667,"x":61.4},{"n":"Rock Island","c":"United States","y":41.4699,"x":-90.5827},{"n":"Cheltenham","c":"United States","y":40.0781,"x":-75.1382},{"n":"Kannan","c":"Japan","y":35.0894,"x":138.9453},{"n":"Olot","c":"Spain","y":42.1822,"x":2.489},{"n":"Baishi Airikecun","c":"China","y":40.8035,"x":80.37},{"n":"Akto","c":"China","y":39.1468,"x":75.9411},{"n":"Yasynuvata","c":"Ukraine","y":48.1167,"x":37.8333},{"n":"Rapu-Rapu","c":"Philippines","y":13.1833,"x":124.1333},{"n":"Anzhou","c":"China","y":38.8663,"x":115.8124},{"n":"Agua Preta","c":"Brazil","y":-8.7,"x":-35.35},{"n":"Beslan","c":"Russia","y":43.1833,"x":44.5333},{"n":"Erding","c":"Germany","y":48.3001,"x":11.9082},{"n":"Evans","c":"United States","y":33.5619,"x":-82.1351},{"n":"Haverstraw","c":"United States","y":41.2055,"x":-74.0384},{"n":"Jose de Freitas","c":"Brazil","y":-4.7558,"x":-42.5758},{"n":"Zuojiawu","c":"China","y":39.9514,"x":118.1511},{"n":"Qulsary","c":"Kazakhstan","y":46.9833,"x":54.0165},{"n":"Partizansk","c":"Russia","y":43.1333,"x":133.1333},{"n":"Elixku","c":"China","y":38.6803,"x":77.3106},{"n":"Kampene","c":"Congo (Kinshasa)","y":-3.5968,"x":26.6671},{"n":"Tsubata","c":"Japan","y":36.67,"x":136.7403},{"n":"West Fargo","c":"United States","y":46.8573,"x":-96.9057},{"n":"Kyshtym","c":"Russia","y":55.7139,"x":60.5528},{"n":"Lesozavodsk","c":"Russia","y":45.4667,"x":133.4},{"n":"Boston","c":"United Kingdom","y":52.974,"x":-0.0214},{"n":"Mount Juliet","c":"United States","y":36.1991,"x":-86.5114},{"n":"Aourir","c":"Morocco","y":30.4833,"x":-9.6333},{"n":"San Juan","c":"United States","y":26.1903,"x":-98.152},{"n":"San Andres","c":"Philippines","y":13.6,"x":124.1},{"n":"Oakton","c":"United States","y":38.8887,"x":-77.3016},{"n":"Netishyn","c":"Ukraine","y":50.33,"x":26.64},{"n":"Dabutou","c":"China","y":36.0708,"x":112.8744},{"n":"Aguelmous","c":"Morocco","y":33.15,"x":-5.8333},{"n":"Caimito","c":"Cuba","y":22.9575,"x":-82.5964},{"n":"Owasso","c":"United States","y":36.2882,"x":-95.8328},{"n":"Commack","c":"United States","y":40.8443,"x":-73.2834},{"n":"Santaluz","c":"Brazil","y":-11.2558,"x":-39.375},{"n":"Sokol","c":"Russia","y":59.4667,"x":40.1167},{"n":"Cassino","c":"Italy","y":41.4917,"x":13.8333},{"n":"Dagua","c":"Colombia","y":3.6575,"x":-76.6917},{"n":"Chimboy Shahri","c":"Uzbekistan","y":42.9311,"x":59.7708},{"n":"Foley","c":"United States","y":30.3983,"x":-87.6649},{"n":"Villajoyosa","c":"Spain","y":38.5053,"x":-0.2328},{"n":"Komatsushimacho","c":"Japan","y":34.0047,"x":134.5906},{"n":"Bangar","c":"Philippines","y":16.9,"x":120.4167},{"n":"Beiya","c":"China","y":36.464,"x":104.4513},{"n":"Buug","c":"Philippines","y":7.7333,"x":123.0667},{"n":"Sayula","c":"Mexico","y":19.8836,"x":-103.5972},{"n":"Vac","c":"Hungary","y":47.7753,"x":19.1311},{"n":"Basilisa","c":"Philippines","y":10.0654,"x":125.5968},{"n":"Mannar","c":"Sri Lanka","y":8.9772,"x":79.9138},{"n":"Billingham","c":"United Kingdom","y":54.61,"x":-1.27},{"n":"Gorinchem","c":"Netherlands","y":51.8306,"x":4.9742},{"n":"Yejituo","c":"China","y":39.8634,"x":118.6645},{"n":"Torres Novas","c":"Portugal","y":39.4833,"x":-8.5333},{"n":"Kanada","c":"Japan","y":33.7761,"x":130.9806},{"n":"Qaladizay","c":"Iraq","y":36.1811,"x":45.1286},{"n":"New Albany","c":"United States","y":38.3089,"x":-85.8234},{"n":"Rossano","c":"Italy","y":39.5667,"x":16.6333},{"n":"Lajedo","c":"Brazil","y":-8.6639,"x":-36.32},{"n":"Benton","c":"United States","y":34.5775,"x":-92.5712},{"n":"Zhaoqiao","c":"China","y":37.9398,"x":115.9499},{"n":"Nabas","c":"Philippines","y":11.8333,"x":122.0833},{"n":"Voi","c":"Kenya","y":-3.3696,"x":38.57},{"n":"Wangtuan","c":"China","y":36.8624,"x":105.9915},{"n":"La Macarena","c":"Colombia","y":2.1828,"x":-73.7847},{"n":"Koneurgench","c":"Turkmenistan","y":42.3167,"x":59.1586},{"n":"Nuoro","c":"Italy","y":40.3201,"x":9.3281},{"n":"Jamindan","c":"Philippines","y":11.4,"x":122.5},{"n":"Puerto Galera","c":"Philippines","y":13.5,"x":120.9542},{"n":"Esplanada","c":"Brazil","y":-11.7958,"x":-37.945},{"n":"Kambove","c":"Congo (Kinshasa)","y":-10.87,"x":26.6},{"n":"Danihe","c":"China","y":39.8489,"x":119.421},{"n":"Esik","c":"Kazakhstan","y":43.3552,"x":77.4524},{"n":"Oras","c":"Philippines","y":12.1333,"x":125.4333},{"n":"Morro do Chapeu","c":"Brazil","y":-11.55,"x":-41.1558},{"n":"Airdrie","c":"United Kingdom","y":55.86,"x":-3.98},{"n":"Gramado","c":"Brazil","y":-29.3789,"x":-50.8739},{"n":"Brant","c":"Canada","y":43.1167,"x":-80.3667},{"n":"Esquel","c":"Argentina","y":-42.9,"x":-71.3167},{"n":"Brejo","c":"Brazil","y":-3.6839,"x":-42.75},{"n":"Manucan","c":"Philippines","y":8.5161,"x":123.0917},{"n":"Clifton Park","c":"United States","y":42.8587,"x":-73.8242},{"n":"Pinerolo","c":"Italy","y":44.8833,"x":7.3333},{"n":"Torre-Pacheco","c":"Spain","y":37.7333,"x":-0.95},{"n":"Andujar","c":"Spain","y":38.0392,"x":-4.0506},{"n":"Zhetisay","c":"Kazakhstan","y":40.7753,"x":68.3272},{"n":"Belalcazar","c":"Colombia","y":2.6469,"x":-75.9717},{"n":"Kinel","c":"Russia","y":53.2333,"x":50.6167},{"n":"Luna","c":"Philippines","y":16.85,"x":120.3833},{"n":"Bulicun","c":"China","y":24.367,"x":116.274},{"n":"Kodaikanal","c":"India","y":10.23,"x":77.48},{"n":"Haomen","c":"China","y":37.3757,"x":101.622},{"n":"Lakeshore","c":"Canada","y":42.2399,"x":-82.6511},{"n":"Porsgrunn","c":"Norway","y":59.1419,"x":9.6568},{"n":"Dar Chabanne","c":"Tunisia","y":36.47,"x":10.75},{"n":"Campos Novos","c":"Brazil","y":-27.4019,"x":-51.225},{"n":"Masasi","c":"Tanzania","y":-10.7296,"x":38.7999},{"n":"Kehl","c":"Germany","y":48.5711,"x":7.8089},{"n":"Innisfil","c":"Canada","y":44.3,"x":-79.5833},{"n":"Barra Bonita","c":"Brazil","y":-22.4947,"x":-48.5581},{"n":"Francavilla Fontana","c":"Italy","y":40.5314,"x":17.5858},{"n":"Agudos","c":"Brazil","y":-22.4739,"x":-48.9836},{"n":"Mangalia","c":"Romania","y":43.8172,"x":28.5828},{"n":"Bettendorf","c":"United States","y":41.5656,"x":-90.4764},{"n":"Yorktown","c":"United States","y":41.2727,"x":-73.8092},{"n":"Sao Paulo de Olivenca","c":"Brazil","y":-3.45,"x":-68.95},{"n":"Dunedin","c":"United States","y":28.0329,"x":-82.7863},{"n":"Hilliard","c":"United States","y":40.0353,"x":-83.1578},{"n":"Merritt Island","c":"United States","y":28.3146,"x":-80.6713},{"n":"Warrnambool","c":"Australia","y":-38.3833,"x":142.4833},{"n":"Emsdetten","c":"Germany","y":52.1728,"x":7.5344},{"n":"Kaniama","c":"Congo (Kinshasa)","y":-7.5696,"x":24.17},{"n":"Nueve de Julio","c":"Argentina","y":-35.45,"x":-60.8833},{"n":"Sao Joao da Barra","c":"Brazil","y":-21.64,"x":-41.0508},{"n":"Phenix City","c":"United States","y":32.4588,"x":-85.0251},{"n":"Sambir","c":"Ukraine","y":49.5167,"x":23.2},{"n":"Addison","c":"United States","y":41.9314,"x":-88.0085},{"n":"Muhlhausen","c":"Germany","y":51.2167,"x":10.45},{"n":"Selcuk","c":"Turkey","y":37.95,"x":27.3667},{"n":"Camamu","c":"Brazil","y":-13.945,"x":-39.1039},{"n":"Coesfeld","c":"Germany","y":51.9458,"x":7.1675},{"n":"Sonson","c":"Colombia","y":5.7094,"x":-75.3106},{"n":"Castricum","c":"Netherlands","y":52.5517,"x":4.6583},{"n":"Careiro","c":"Brazil","y":-3.7678,"x":-60.3689},{"n":"Tambulig","c":"Philippines","y":8.0667,"x":123.5333},{"n":"Dama","c":"China","y":30.5009,"x":120.3413},{"n":"Ma`alot Tarshiha","c":"Israel","y":33.0167,"x":35.2708},{"n":"Sankt Ingbert","c":"Germany","y":49.3,"x":7.1167},{"n":"Zhmerynka","c":"Ukraine","y":49.0425,"x":28.0992},{"n":"Nyaungdon","c":"Myanmar","y":17.0433,"x":95.6429},{"n":"Udhampur","c":"India","y":32.93,"x":75.13},{"n":"Jaslo","c":"Poland","y":49.7333,"x":21.4667},{"n":"Kerava","c":"Finland","y":60.4028,"x":25.1},{"n":"Isla de Maipo","c":"Chile","y":-33.75,"x":-70.9},{"n":"Morohongo","c":"Japan","y":35.9417,"x":139.3161},{"n":"Oakville","c":"United States","y":38.4472,"x":-90.3199},{"n":"Nejapa","c":"El Salvador","y":13.8167,"x":-89.2333},{"n":"Tucker","c":"United States","y":33.8436,"x":-84.2021},{"n":"Queanbeyan","c":"Australia","y":-35.3533,"x":149.2342},{"n":"Moorpark","c":"United States","y":34.2855,"x":-118.877},{"n":"Rende","c":"Italy","y":39.3333,"x":16.1833},{"n":"San Pablo","c":"Colombia","y":7.4764,"x":-73.9231},{"n":"Oeiras","c":"Brazil","y":-7.025,"x":-42.1308},{"n":"Monrovia","c":"United States","y":34.165,"x":-117.9921},{"n":"Oak Creek","c":"United States","y":42.8803,"x":-87.9009},{"n":"Tomelloso","c":"Spain","y":39.1578,"x":-3.0208},{"n":"San Bernardo del Viento","c":"Colombia","y":9.355,"x":-75.9544},{"n":"Rifu","c":"Japan","y":38.3308,"x":140.9769},{"n":"La Ciotat","c":"France","y":43.1769,"x":5.6086},{"n":"La Libertad","c":"El Salvador","y":13.4882,"x":-89.32},{"n":"Claremont","c":"United States","y":34.1259,"x":-117.7153},{"n":"Pingshang","c":"China","y":23.3974,"x":115.8842},{"n":"Post Falls","c":"United States","y":47.7213,"x":-116.9385},{"n":"Smarhon'","c":"Belarus","y":54.4836,"x":26.4},{"n":"Mankayan","c":"Philippines","y":16.8667,"x":120.7833},{"n":"Peachtree City","c":"United States","y":33.3943,"x":-84.5712},{"n":"Palapye","c":"Botswana","y":-22.55,"x":27.1333},{"n":"Lumba-a-Bayabao","c":"Philippines","y":7.8833,"x":124.3833},{"n":"Bantay","c":"Philippines","y":17.5833,"x":120.3833},{"n":"At Turrah","c":"Jordan","y":32.6368,"x":35.99},{"n":"Ban Mueang Na Tai","c":"Thailand","y":19.5932,"x":98.9618},{"n":"Batobato","c":"Philippines","y":6.8244,"x":126.083},{"n":"Araguatins","c":"Brazil","y":-5.6508,"x":-48.1239},{"n":"Augusta","c":"Italy","y":37.2303,"x":15.2194},{"n":"Zacatepec","c":"Mexico","y":18.6833,"x":-99.1833},{"n":"Jyvaskylan Maalaiskunta","c":"Finland","y":62.2889,"x":25.7417},{"n":"Avdiivka","c":"Ukraine","y":48.1333,"x":37.75},{"n":"Natick","c":"United States","y":42.2847,"x":-71.3497},{"n":"French Valley","c":"United States","y":33.5998,"x":-117.1069},{"n":"Somma Vesuviana","c":"Italy","y":40.8725,"x":14.4369},{"n":"Farafenni","c":"Gambia, The","y":13.5667,"x":-15.6},{"n":"Miranda de Ebro","c":"Spain","y":42.6833,"x":-2.9333},{"n":"Canicatti","c":"Italy","y":37.36,"x":13.8511},{"n":"Tuttlingen","c":"Germany","y":47.985,"x":8.8233},{"n":"Viru","c":"Peru","y":-8.4143,"x":-78.7524},{"n":"Cento","c":"Italy","y":44.7333,"x":11.2833},{"n":"Galloway","c":"United States","y":39.4914,"x":-74.4803},{"n":"Hellendoorn","c":"Netherlands","y":52.3885,"x":6.4497},{"n":"Sertania","c":"Brazil","y":-8.0706,"x":-37.2658},{"n":"Adrano","c":"Italy","y":37.6625,"x":14.8356},{"n":"Conegliano","c":"Italy","y":45.8872,"x":12.2969},{"n":"Onteniente","c":"Spain","y":38.8222,"x":-0.6072},{"n":"Real","c":"Philippines","y":14.6667,"x":121.6},{"n":"Ewing","c":"United States","y":40.265,"x":-74.8005},{"n":"Gillette","c":"United States","y":44.2752,"x":-105.4983},{"n":"Enrile","c":"Philippines","y":17.55,"x":121.7},{"n":"Limburg","c":"Germany","y":50.3833,"x":8.0667},{"n":"Tooele","c":"United States","y":40.5393,"x":-112.3082},{"n":"Guayaramerin","c":"Bolivia","y":-10.8267,"x":-65.3567},{"n":"Porta Westfalica","c":"Germany","y":52.2167,"x":8.9333},{"n":"Itapicuru","c":"Brazil","y":-11.3169,"x":-38.2328},{"n":"Fraiburgo","c":"Brazil","y":-27.0258,"x":-50.9208},{"n":"Salinas","c":"Ecuador","y":-2.2083,"x":-80.9681},{"n":"Miyajima","c":"Japan","y":33.1525,"x":130.4747},{"n":"Accrington","c":"United Kingdom","y":53.7534,"x":-2.3638},{"n":"Zvishavane","c":"Zimbabwe","y":-20.3333,"x":30.0333},{"n":"Rongwo","c":"China","y":35.5077,"x":102.0121},{"n":"Velasco Ibarra","c":"Ecuador","y":-1.0439,"x":-79.6383},{"n":"Zhentang","c":"China","y":21.8662,"x":110.6996},{"n":"Trumbull","c":"United States","y":41.2602,"x":-73.2083},{"n":"Boyarka","c":"Russia","y":70.767,"x":97.5},{"n":"Prattville","c":"United States","y":32.4605,"x":-86.4588},{"n":"Kamenka","c":"Russia","y":53.1833,"x":44.05},{"n":"Chortoq","c":"Uzbekistan","y":41.0689,"x":71.8153},{"n":"Belluno","c":"Italy","y":46.1408,"x":12.2156},{"n":"Woodburn","c":"United States","y":45.1473,"x":-122.8603},{"n":"Kakhovka","c":"Ukraine","y":46.8,"x":33.4667},{"n":"Chernyakhovsk","c":"Russia","y":54.6333,"x":21.8167},{"n":"Prince Albert","c":"Canada","y":53.2,"x":-105.75},{"n":"Calumet City","c":"United States","y":41.6134,"x":-87.5505},{"n":"Praya","c":"Indonesia","y":-8.7223,"x":116.2923},{"n":"San Juan Capistrano","c":"United States","y":33.5009,"x":-117.6544},{"n":"Vyazniki","c":"Russia","y":56.2433,"x":42.1292},{"n":"Toretsk","c":"Ukraine","y":48.4,"x":37.8333},{"n":"Apodi","c":"Brazil","y":-5.6639,"x":-37.7989},{"n":"Colinas do Tocantins","c":"Brazil","y":-8.0589,"x":-48.475},{"n":"Mengdong","c":"China","y":23.1499,"x":99.2462},{"n":"Sion","c":"Switzerland","y":46.2304,"x":7.3661},{"n":"Kumo","c":"Nigeria","y":10.0431,"x":11.2183},{"n":"Alem Paraiba","c":"Brazil","y":-21.8878,"x":-42.7039},{"n":"Aguilas","c":"Spain","y":37.4042,"x":-1.5819},{"n":"Xonobod","c":"Uzbekistan","y":40.8127,"x":72.9731},{"n":"Zefat","c":"Israel","y":32.9658,"x":35.4983},{"n":"Chancay","c":"Peru","y":-11.5653,"x":-77.2714},{"n":"Karak","c":"Pakistan","y":33.1167,"x":71.0833},{"n":"Ingelheim","c":"Germany","y":49.9747,"x":8.0564},{"n":"Estreito","c":"Brazil","y":-6.5608,"x":-47.4508},{"n":"Imzouren","c":"Morocco","y":35.1448,"x":-3.8505},{"n":"Guacari","c":"Colombia","y":3.7647,"x":-76.3322},{"n":"Tallkalakh","c":"Syria","y":34.6683,"x":36.2597},{"n":"Pak Chong","c":"Thailand","y":14.6796,"x":101.3976},{"n":"Dayr Hafir","c":"Syria","y":36.1592,"x":37.704},{"n":"Borbon","c":"Philippines","y":10.8333,"x":124},{"n":"Andover","c":"United States","y":42.6466,"x":-71.1651},{"n":"Marialva","c":"Brazil","y":-23.485,"x":-51.7919},{"n":"Usuki","c":"Japan","y":33.1258,"x":131.8047},{"n":"Cooper City","c":"United States","y":26.0463,"x":-80.2862},{"n":"Dinas","c":"Philippines","y":7.6136,"x":123.3389},{"n":"Burriana","c":"Spain","y":39.8894,"x":-0.0925},{"n":"Leyland","c":"United Kingdom","y":53.692,"x":-2.697},{"n":"Kundian","c":"Pakistan","y":32.4522,"x":71.4718},{"n":"Laur","c":"Philippines","y":15.5833,"x":121.1833},{"n":"Svetlograd","c":"Russia","y":45.3308,"x":42.8511},{"n":"Teruel","c":"Spain","y":40.3456,"x":-1.1065},{"n":"Santiago de Tolu","c":"Colombia","y":9.525,"x":-75.5817},{"n":"Guane","c":"Cuba","y":22.2006,"x":-84.0839},{"n":"Caluya","c":"Philippines","y":11.9333,"x":121.55},{"n":"Timbio","c":"Colombia","y":2.3528,"x":-76.6819},{"n":"El Mirage","c":"United States","y":33.5905,"x":-112.3271},{"n":"Villenave-d'Ornon","c":"France","y":44.7806,"x":-0.5658},{"n":"Meadow Woods","c":"United States","y":28.3698,"x":-81.3467},{"n":"Turiacu","c":"Brazil","y":-1.6628,"x":-45.3719},{"n":"Woodley","c":"United Kingdom","y":51.453,"x":-0.902},{"n":"Sinsheim","c":"Germany","y":49.25,"x":8.8833},{"n":"LaGrange","c":"United States","y":33.0274,"x":-85.0384},{"n":"Cambrils","c":"Spain","y":41.067,"x":1.0564},{"n":"Trebic","c":"Czechia","y":49.215,"x":15.8817},{"n":"Cieszyn","c":"Poland","y":49.75,"x":18.6333},{"n":"La Vergne","c":"United States","y":36.0203,"x":-86.5582},{"n":"Tayasan","c":"Philippines","y":9.9167,"x":123.15},{"n":"Guilderland","c":"United States","y":42.708,"x":-73.9631},{"n":"Bagabag","c":"Philippines","y":16.6044,"x":121.2521},{"n":"Carrollwood","c":"United States","y":28.0577,"x":-82.5149},{"n":"Boyarka","c":"Ukraine","y":50.3292,"x":30.2886},{"n":"Junction City","c":"United States","y":39.0271,"x":-96.8496},{"n":"Inver Grove Heights","c":"United States","y":44.8247,"x":-93.0596},{"n":"Gurpinar","c":"Turkey","y":38.3269,"x":43.4133},{"n":"Cegled","c":"Hungary","y":47.1772,"x":19.7981},{"n":"Camara de Lobos","c":"Portugal","y":32.65,"x":-16.9667},{"n":"Pennsauken","c":"United States","y":39.9649,"x":-75.0563},{"n":"Kilimli","c":"Turkey","y":41.4833,"x":31.8333},{"n":"Kuala Kapuas","c":"Indonesia","y":-3.0996,"x":114.35},{"n":"Uster","c":"Switzerland","y":47.3492,"x":8.7192},{"n":"San Sebastian de Yali","c":"Nicaragua","y":13.3,"x":-86.1833},{"n":"Cha-am","c":"Thailand","y":12.7992,"x":99.9683},{"n":"Lokbatan","c":"Azerbaijan","y":40.3272,"x":49.73},{"n":"Schoten","c":"Belgium","y":51.25,"x":4.5},{"n":"La Troncal","c":"Ecuador","y":-2.4278,"x":-79.3389},{"n":"Bougouni","c":"Mali","y":11.4167,"x":-7.4833},{"n":"Morfelden-Walldorf","c":"Germany","y":49.9896,"x":8.5661},{"n":"Minami-Boso","c":"Japan","y":35.0433,"x":139.8403},{"n":"Lixingcun","c":"China","y":23.0825,"x":116.3698},{"n":"Saint-Chamond","c":"France","y":45.4775,"x":4.5153},{"n":"Dietzenbach","c":"Germany","y":50.0086,"x":8.7756},{"n":"Porto Uniao","c":"Brazil","y":-26.2378,"x":-51.0778},{"n":"Krasnik","c":"Poland","y":50.9167,"x":22.2167},{"n":"Tocancipa","c":"Colombia","y":4.9661,"x":-73.9111},{"n":"Jose Bonifacio","c":"Brazil","y":-21.0528,"x":-49.6878},{"n":"Gigante","c":"Colombia","y":2.3867,"x":-75.5461},{"n":"Yangambi","c":"Congo (Kinshasa)","y":0.7675,"x":24.4414},{"n":"Toritama","c":"Brazil","y":-8.0067,"x":-36.0567},{"n":"Meppen","c":"Germany","y":52.6906,"x":7.291},{"n":"Guama Abajo","c":"Cuba","y":19.9758,"x":-76.41},{"n":"Douzhuang","c":"China","y":39.4323,"x":116.0583},{"n":"Quimbaya","c":"Colombia","y":4.6239,"x":-75.7631},{"n":"Savonlinna","c":"Finland","y":61.8667,"x":28.8831},{"n":"Randallstown","c":"United States","y":39.3723,"x":-76.8024},{"n":"Yayladagi","c":"Turkey","y":35.9025,"x":36.0603},{"n":"Nanzhiqiu","c":"China","y":37.7492,"x":115.2357},{"n":"Lanciano","c":"Italy","y":42.2312,"x":14.3905},{"n":"Cutral-Co","c":"Argentina","y":-38.9333,"x":-69.2333},{"n":"Matinhos","c":"Brazil","y":-25.8178,"x":-48.5428},{"n":"Lage","c":"Germany","y":51.9833,"x":8.8},{"n":"Vichuga","c":"Russia","y":57.2,"x":41.9167},{"n":"Santana do Paraiso","c":"Brazil","y":-19.3639,"x":-42.5689},{"n":"Shenjiabang","c":"China","y":30.5783,"x":120.8193},{"n":"Gahanna","c":"United States","y":40.0251,"x":-82.8637},{"n":"Kahoku","c":"Japan","y":36.72,"x":136.7067},{"n":"Cartagena del Chaira","c":"Colombia","y":1.3361,"x":-74.8467},{"n":"Saint-Benoit","c":"Reunion","y":-21.0335,"x":55.7128},{"n":"Aine Draham","c":"Tunisia","y":36.7833,"x":8.7},{"n":"Tago","c":"Philippines","y":9.0211,"x":126.2317},{"n":"Kamata","c":"Japan","y":33.5633,"x":130.7117},{"n":"San Miguel Ixtahuacan","c":"Guatemala","y":15.25,"x":-91.75},{"n":"Riviera Beach","c":"United States","y":26.7812,"x":-80.0742},{"n":"Tamuin","c":"Mexico","y":22,"x":-98.7833},{"n":"Ikot Abasi","c":"Nigeria","y":4.5704,"x":7.56},{"n":"Armenia","c":"El Salvador","y":13.75,"x":-89.5},{"n":"Saint-Raphael","c":"France","y":43.4252,"x":6.7684},{"n":"Pilar","c":"Brazil","y":-9.5972,"x":-35.9567},{"n":"Antiguo Cuscatlan","c":"El Salvador","y":13.6731,"x":-89.2406},{"n":"Riachao do Jacuipe","c":"Brazil","y":-11.81,"x":-39.3819},{"n":"Wildwood","c":"United States","y":38.5799,"x":-90.6699},{"n":"Pilao Arcado","c":"Brazil","y":-10.0028,"x":-42.5039},{"n":"Paracuru","c":"Brazil","y":-3.41,"x":-39.0308},{"n":"Angra do Heroismo","c":"Portugal","y":38.6558,"x":-27.2153},{"n":"Cloppenburg","c":"Germany","y":52.8478,"x":8.0439},{"n":"Millerovo","c":"Russia","y":48.9167,"x":40.4},{"n":"La Palma","c":"Cuba","y":22.7472,"x":-83.5525},{"n":"Osimo","c":"Italy","y":43.4861,"x":13.4821},{"n":"Akouda","c":"Tunisia","y":35.8712,"x":10.5712},{"n":"Cieza","c":"Spain","y":38.2392,"x":-1.4189},{"n":"Buldon","c":"Philippines","y":7.5167,"x":124.3667},{"n":"Upper Arlington","c":"United States","y":40.0272,"x":-83.0704},{"n":"Dagami","c":"Philippines","y":11.0611,"x":124.9031},{"n":"Saarlouis","c":"Germany","y":49.3167,"x":6.75},{"n":"Langford Station","c":"Canada","y":48.4506,"x":-123.5058},{"n":"Auxerre","c":"France","y":47.7986,"x":3.5672},{"n":"Bradford West Gwillimbury","c":"Canada","y":44.1333,"x":-79.6333},{"n":"Radebeul","c":"Germany","y":51.1033,"x":13.67},{"n":"Yellandu","c":"India","y":17.6,"x":80.33},{"n":"Bad Vilbel","c":"Germany","y":50.1781,"x":8.7361},{"n":"Bou Salem","c":"Tunisia","y":36.6111,"x":8.9698},{"n":"Luga","c":"Russia","y":58.7333,"x":29.85},{"n":"Tecuci","c":"Romania","y":45.8467,"x":27.4278},{"n":"Crema","c":"Italy","y":45.3667,"x":9.6833},{"n":"Giddalur","c":"India","y":15.3784,"x":78.9265},{"n":"Colwyn Bay","c":"United Kingdom","y":53.29,"x":-3.7},{"n":"Cansancao","c":"Brazil","y":-10.6708,"x":-39.4978},{"n":"Voznesensk","c":"Ukraine","y":47.5725,"x":31.3119},{"n":"Fonseca","c":"Colombia","y":10.8858,"x":-72.8481},{"n":"Massape","c":"Brazil","y":-3.5228,"x":-40.3428},{"n":"Gorizia","c":"Italy","y":45.9352,"x":13.6193},{"n":"Tall Salhab","c":"Syria","y":35.2609,"x":36.3822},{"n":"Siltepec","c":"Mexico","y":15.55,"x":-92.3333},{"n":"Ieper","c":"Belgium","y":50.85,"x":2.8833},{"n":"Wermelskirchen","c":"Germany","y":51.1392,"x":7.2051},{"n":"Oak Harbor","c":"United States","y":48.2965,"x":-122.6333},{"n":"Yarim","c":"Yemen","y":14.2978,"x":44.3778},{"n":"Mirnyy","c":"Russia","y":62.5333,"x":113.95},{"n":"Winsen","c":"Germany","y":53.3667,"x":10.2167},{"n":"Curaca","c":"Brazil","y":-8.9919,"x":-39.9078},{"n":"Joao Camara","c":"Brazil","y":-5.5378,"x":-35.82},{"n":"Venaria Reale","c":"Italy","y":45.1167,"x":7.6333},{"n":"Yefremov","c":"Russia","y":53.1492,"x":38.0826},{"n":"Olney","c":"United States","y":39.1465,"x":-77.0715},{"n":"Trinec","c":"Czechia","y":49.6776,"x":18.6708},{"n":"Umarkot","c":"Pakistan","y":25.3614,"x":69.7361},{"n":"Kotah-ye `Ashro","c":"Afghanistan","y":34.45,"x":68.8},{"n":"Wodonga","c":"Australia","y":-36.1214,"x":146.8881},{"n":"Gorna Oryahovitsa","c":"Bulgaria","y":43.1222,"x":25.6897},{"n":"Gasan","c":"Philippines","y":13.3167,"x":121.85},{"n":"Sabanagrande","c":"Colombia","y":10.7903,"x":-74.7556},{"n":"Nova Olinda do Norte","c":"Brazil","y":-3.8878,"x":-59.0939},{"n":"Tamra","c":"Israel","y":32.8511,"x":35.2071},{"n":"San Vicente de Chucuri","c":"Colombia","y":6.8819,"x":-73.4119},{"n":"Campbell River","c":"Canada","y":50.0244,"x":-125.2475},{"n":"Datteln","c":"Germany","y":51.6539,"x":7.3417},{"n":"Aborlan","c":"Philippines","y":9.4386,"x":118.5481},{"n":"Adamantina","c":"Brazil","y":-21.6847,"x":-51.0733},{"n":"Ubajara","c":"Brazil","y":-3.8544,"x":-40.9211},{"n":"Chelmsford","c":"United States","y":42.6,"x":-71.3631},{"n":"Azazga","c":"Algeria","y":36.7453,"x":4.3711},{"n":"Matou","c":"China","y":39.5503,"x":116.1063},{"n":"Champerico","c":"Guatemala","y":14.293,"x":-91.914},{"n":"San Luis de Since","c":"Colombia","y":9.2447,"x":-75.1458},{"n":"Iyo","c":"Japan","y":33.7575,"x":132.7039},{"n":"Puerto Lopez","c":"Colombia","y":4.0897,"x":-72.9619},{"n":"New City","c":"United States","y":41.1543,"x":-73.9909},{"n":"Kempen","c":"Germany","y":51.3658,"x":6.4194},{"n":"Bochil","c":"Mexico","y":16.9953,"x":-92.8903},{"n":"Qadsayya","c":"Syria","y":33.5333,"x":36.2167},{"n":"Casilda","c":"Argentina","y":-33.0442,"x":-61.1681},{"n":"Formigine","c":"Italy","y":44.5739,"x":10.8478},{"n":"Owings Mills","c":"United States","y":39.4115,"x":-76.7913},{"n":"Seelze","c":"Germany","y":52.3961,"x":9.5981},{"n":"Raxruha","c":"Guatemala","y":15.8666,"x":-90.0424},{"n":"Palauig","c":"Philippines","y":15.4333,"x":120.05},{"n":"Bagamoyo","c":"Tanzania","y":-6.4333,"x":38.9},{"n":"Jaguariaiva","c":"Brazil","y":-24.2508,"x":-49.7058},{"n":"Acaxochitlan","c":"Mexico","y":20.1667,"x":-98.2},{"n":"Siayan","c":"Philippines","y":8.2519,"x":123.1122},{"n":"Zaventem","c":"Belgium","y":50.8833,"x":4.4667},{"n":"Campoalegre","c":"Colombia","y":2.6867,"x":-75.3256},{"n":"Curralinho","c":"Brazil","y":-1.8139,"x":-49.795},{"n":"Canaman","c":"Philippines","y":13.65,"x":123.1667},{"n":"Korkino","c":"Russia","y":54.8833,"x":61.4},{"n":"Baja","c":"Hungary","y":46.1833,"x":18.9536},{"n":"Leer","c":"Germany","y":53.2308,"x":7.4528},{"n":"La Porte","c":"United States","y":29.6689,"x":-95.0484},{"n":"Armacao dos Buzios","c":"Brazil","y":-22.7469,"x":-41.8819},{"n":"Odorheiu Secuiesc","c":"Romania","y":46.3139,"x":25.3017},{"n":"Meyzieu","c":"France","y":45.7667,"x":5.0036},{"n":"Piui","c":"Brazil","y":-20.465,"x":-45.9578},{"n":"Itamarandiba","c":"Brazil","y":-17.8569,"x":-42.8589},{"n":"Freehold","c":"United States","y":40.2233,"x":-74.2986},{"n":"Aguai","c":"Brazil","y":-22.0603,"x":-46.9736},{"n":"Aznakayevo","c":"Russia","y":54.85,"x":53.0667},{"n":"Loudaya","c":"Morocco","y":31.6507,"x":-8.3021},{"n":"Pola","c":"Philippines","y":13.1439,"x":121.44},{"n":"Victoria","c":"Chile","y":-38.2167,"x":-72.3333},{"n":"Nevers","c":"France","y":46.9933,"x":3.1572},{"n":"Barra do Choca","c":"Brazil","y":-14.8808,"x":-40.5789},{"n":"Sao Raimundo Nonato","c":"Brazil","y":-9.015,"x":-42.6989},{"n":"Macon","c":"France","y":46.3063,"x":4.8313},{"n":"Feijo","c":"Brazil","y":-8.1639,"x":-70.3539},{"n":"Sint-Pieters-Leeuw","c":"Belgium","y":50.7833,"x":4.25},{"n":"East Point","c":"United States","y":33.6696,"x":-84.4701},{"n":"Torres","c":"Brazil","y":-29.335,"x":-49.7269},{"n":"DeLand","c":"United States","y":29.0224,"x":-81.2873},{"n":"Tangua","c":"Brazil","y":-22.73,"x":-42.7139},{"n":"Ilawa","c":"Poland","y":53.5964,"x":19.5656},{"n":"Pleasant Hill","c":"United States","y":37.954,"x":-122.0759},{"n":"Angamali","c":"India","y":10.196,"x":76.386},{"n":"Diaowo","c":"China","y":39.4812,"x":116.0761},{"n":"Orangevale","c":"United States","y":38.6881,"x":-121.2209},{"n":"Aksay","c":"Kazakhstan","y":51.1714,"x":53.0349},{"n":"Guying","c":"China","y":38.0887,"x":114.556},{"n":"Ringsaker","c":"Norway","y":61.0242,"x":10.8019},{"n":"Merrillville","c":"United States","y":41.4728,"x":-87.3197},{"n":"Dzierzoniow","c":"Poland","y":50.7281,"x":16.6511},{"n":"Stow","c":"United States","y":41.1765,"x":-81.4344},{"n":"San Luis","c":"United States","y":32.4911,"x":-114.7089},{"n":"Sagnay","c":"Philippines","y":13.6,"x":123.5167},{"n":"Shingu","c":"Japan","y":33.7153,"x":130.4467},{"n":"Calhoun","c":"United States","y":34.4918,"x":-84.9391},{"n":"Ban Ang Sila","c":"Thailand","y":13.3364,"x":100.9278},{"n":"Sarpol-e Zahab","c":"Iran","y":34.4614,"x":45.8647},{"n":"Crailsheim","c":"Germany","y":49.1347,"x":10.0706},{"n":"Leawood","c":"United States","y":38.9076,"x":-94.6258},{"n":"Gutalac","c":"Philippines","y":7.9833,"x":122.4},{"n":"Zelenokumsk","c":"Russia","y":44.4,"x":43.867},{"n":"Abashiri","c":"Japan","y":44.0206,"x":144.2736},{"n":"Sao Luis do Quitunde","c":"Brazil","y":-9.3178,"x":-35.5608},{"n":"Shangzhen","c":"China","y":33.7116,"x":110.2575},{"n":"Merseburg","c":"Germany","y":51.3544,"x":11.9928},{"n":"Phra Phutthabat","c":"Thailand","y":14.7212,"x":100.8047},{"n":"Menlo Park","c":"United States","y":37.4686,"x":-122.1672},{"n":"Haguenau","c":"France","y":48.82,"x":7.79},{"n":"Zweibrucken","c":"Germany","y":49.2494,"x":7.3608},{"n":"Canguaretama","c":"Brazil","y":-6.38,"x":-35.1289},{"n":"Tabor","c":"Czechia","y":49.4145,"x":14.6578},{"n":"Biharamulo","c":"Tanzania","y":-2.6296,"x":31.31},{"n":"Sibuco","c":"Philippines","y":7.2833,"x":122.0667},{"n":"Sun Prairie","c":"United States","y":43.1827,"x":-89.2358},{"n":"Dakota Ridge","c":"United States","y":39.6192,"x":-105.1344},{"n":"IJsselstein","c":"Netherlands","y":52.02,"x":5.0422},{"n":"Bugojno","c":"Bosnia And Herzegovina","y":44.0572,"x":17.4508},{"n":"Jaguaribe","c":"Brazil","y":-5.8908,"x":-38.6219},{"n":"Pandan","c":"Philippines","y":11.7167,"x":122.1},{"n":"Coventry","c":"United States","y":41.6933,"x":-71.6611},{"n":"Cachoeira","c":"Brazil","y":-12.6178,"x":-38.9558},{"n":"Duenas","c":"Philippines","y":11.0667,"x":122.6167},{"n":"Arcata","c":"United States","y":40.8615,"x":-124.0757},{"n":"Esposende","c":"Portugal","y":41.5333,"x":-8.7833},{"n":"Humenne","c":"Slovakia","y":48.9306,"x":21.9122},{"n":"Chacabuco","c":"Argentina","y":-34.65,"x":-60.49},{"n":"Guanhaes","c":"Brazil","y":-18.775,"x":-42.9328},{"n":"Shrirangapattana","c":"India","y":12.4181,"x":76.6947},{"n":"Parnarama","c":"Brazil","y":-5.6819,"x":-43.0928},{"n":"Balingen","c":"Germany","y":48.2731,"x":8.8506},{"n":"Capela","c":"Brazil","y":-10.5028,"x":-37.0528},{"n":"Ballesteros","c":"Philippines","y":18.4,"x":121.5167},{"n":"Hemer","c":"Germany","y":51.3833,"x":7.7667},{"n":"Sao Luis Gonzaga","c":"Brazil","y":-28.4078,"x":-54.9608},{"n":"Canete","c":"Chile","y":-37.8,"x":-73.3833},{"n":"Guimbal","c":"Philippines","y":10.6667,"x":122.3167},{"n":"Barsinghausen","c":"Germany","y":52.3031,"x":9.4606},{"n":"Glastonbury","c":"United States","y":41.6922,"x":-72.5472},{"n":"Lockport","c":"United States","y":43.1698,"x":-78.6956},{"n":"Skhira","c":"Tunisia","y":34.3006,"x":10.0708},{"n":"Tabango","c":"Philippines","y":11.3167,"x":124.3667},{"n":"Kopavogur","c":"Iceland","y":64.1119,"x":-21.9},{"n":"Centenario","c":"Argentina","y":-38.8167,"x":-68.1333},{"n":"Zhangzhengqiao","c":"China","y":38.4042,"x":106.3567},{"n":"Mandaguari","c":"Brazil","y":-23.5475,"x":-51.6708},{"n":"Wedel","c":"Germany","y":53.5833,"x":9.7},{"n":"Albany","c":"Australia","y":-35.0228,"x":117.8814},{"n":"Cicero Dantas","c":"Brazil","y":-10.6,"x":-38.3828},{"n":"Mnasra","c":"Morocco","y":34.7667,"x":-5.5167},{"n":"Cabrobo","c":"Brazil","y":-8.5119,"x":-39.3069},{"n":"Zimapan","c":"Mexico","y":20.7333,"x":-99.3833},{"n":"Pullman","c":"United States","y":46.734,"x":-117.1669},{"n":"Songcaozhen","c":"China","y":37.7562,"x":114.5834},{"n":"Banes","c":"Cuba","y":20.9697,"x":-75.7117},{"n":"Gandara","c":"Philippines","y":12.013,"x":124.8118},{"n":"Gerash","c":"Iran","y":27.665,"x":54.1369},{"n":"Palapag","c":"Philippines","y":12.547,"x":125.116},{"n":"Vassouras","c":"Brazil","y":-22.4039,"x":-43.6628},{"n":"Ramnicu Sarat","c":"Romania","y":45.38,"x":27.06},{"n":"Youwangjie","c":"China","y":24.8695,"x":99.1067},{"n":"Padre Bernardo","c":"Brazil","y":-15.16,"x":-48.2839},{"n":"Imbatug","c":"Philippines","y":8.3128,"x":124.6873},{"n":"Exmouth","c":"United Kingdom","y":50.62,"x":-3.413},{"n":"Boardman","c":"United States","y":41.0334,"x":-80.6671},{"n":"Taiobeiras","c":"Brazil","y":-15.8078,"x":-42.2328},{"n":"Ahrensburg","c":"Germany","y":53.6747,"x":10.2411},{"n":"Nacogdoches","c":"United States","y":31.6134,"x":-94.6528},{"n":"Merauke","c":"Indonesia","y":-8.4932,"x":140.4018},{"n":"Kearney","c":"United States","y":40.701,"x":-99.0834},{"n":"Vestavia Hills","c":"United States","y":33.4518,"x":-86.7438},{"n":"Sual","c":"Philippines","y":16.0667,"x":120.1},{"n":"Casale Monferrato","c":"Italy","y":45.1342,"x":8.4583},{"n":"North Ridgeville","c":"United States","y":41.3851,"x":-82.0194},{"n":"Steinfurt","c":"Germany","y":52.1504,"x":7.3366},{"n":"Windsor","c":"United Kingdom","y":51.4791,"x":-0.6095},{"n":"Socorro","c":"United States","y":31.6384,"x":-106.2601},{"n":"Vibo Valentia","c":"Italy","y":38.6753,"x":16.0959},{"n":"Randolph","c":"United States","y":42.1778,"x":-71.0539},{"n":"Mogpog","c":"Philippines","y":13.4833,"x":121.8667},{"n":"Cambrai","c":"France","y":50.1767,"x":3.2356},{"n":"Marignane","c":"France","y":43.416,"x":5.2145},{"n":"Basista","c":"Philippines","y":15.8524,"x":120.3976},{"n":"Missao Velha","c":"Brazil","y":-7.25,"x":-39.1428},{"n":"Gladstone","c":"Australia","y":-23.8489,"x":151.2625},{"n":"Campina","c":"Romania","y":45.1281,"x":25.7383},{"n":"Gulkevichi","c":"Russia","y":45.3603,"x":40.6945},{"n":"Znojmo","c":"Czechia","y":48.8555,"x":16.0488},{"n":"Bogorodsk","c":"Russia","y":56.0997,"x":43.5072},{"n":"Businga","c":"Congo (Kinshasa)","y":3.3404,"x":20.87},{"n":"Komarno","c":"Slovakia","y":47.7633,"x":18.1283},{"n":"Villena","c":"Spain","y":38.635,"x":-0.8658},{"n":"Inca","c":"Spain","y":39.7167,"x":2.9167},{"n":"Shahin Dezh","c":"Iran","y":36.6792,"x":46.5667},{"n":"Caldono","c":"Colombia","y":2.7969,"x":-76.4828},{"n":"Valuyki","c":"Russia","y":50.1833,"x":38.1167},{"n":"Quinchia","c":"Colombia","y":5.3394,"x":-75.7294},{"n":"Firestone","c":"United States","y":40.1563,"x":-104.9494},{"n":"Cravinhos","c":"Brazil","y":-21.3403,"x":-47.7294},{"n":"San Enrique","c":"Philippines","y":11.0697,"x":122.6567},{"n":"Goshen","c":"United States","y":41.5743,"x":-85.8308},{"n":"Goiatuba","c":"Brazil","y":-18.0128,"x":-49.3569},{"n":"Vitrolles","c":"France","y":43.46,"x":5.2486},{"n":"Panglao","c":"Philippines","y":9.5833,"x":123.75},{"n":"Butte","c":"United States","y":45.902,"x":-112.6571},{"n":"Russellville","c":"United States","y":35.2763,"x":-93.1383},{"n":"Dartmouth","c":"United States","y":41.6138,"x":-70.9973},{"n":"Nowy Targ","c":"Poland","y":49.4833,"x":20.0333},{"n":"Sao Luis de Montes Belos","c":"Brazil","y":-16.525,"x":-50.3719},{"n":"Grass Valley","c":"United States","y":39.2237,"x":-121.0521},{"n":"Menen","c":"Belgium","y":50.7956,"x":3.1217},{"n":"Pascani","c":"Romania","y":47.2519,"x":26.7231},{"n":"Peyziwat","c":"China","y":39.4905,"x":76.7389},{"n":"Termoli","c":"Italy","y":42.0028,"x":14.9947},{"n":"Geldern","c":"Germany","y":51.5197,"x":6.3325},{"n":"Viernheim","c":"Germany","y":49.538,"x":8.5792},{"n":"Pomerode","c":"Brazil","y":-26.7408,"x":-49.1769},{"n":"Romans-sur-Isere","c":"France","y":45.0464,"x":5.0517},{"n":"Wickford","c":"United Kingdom","y":51.6114,"x":0.5207},{"n":"Binche","c":"Belgium","y":50.4103,"x":4.1652},{"n":"Uonuma","c":"Japan","y":37.2333,"x":138.9667},{"n":"Dimona","c":"Israel","y":31.07,"x":35.03},{"n":"San Agustin","c":"Colombia","y":1.8792,"x":-76.2683},{"n":"Mascalucia","c":"Italy","y":37.5667,"x":15.05},{"n":"Cabanglasan","c":"Philippines","y":8.0667,"x":125.3167},{"n":"Cishan","c":"China","y":36.578,"x":114.102},{"n":"Bariri","c":"Brazil","y":-22.0744,"x":-48.7403},{"n":"Goch","c":"Germany","y":51.6839,"x":6.1619},{"n":"Piombino","c":"Italy","y":42.9348,"x":10.5221},{"n":"Sao Jose do Egito","c":"Brazil","y":-7.4733,"x":-37.2744},{"n":"Six-Fours-les-Plages","c":"France","y":43.1009,"x":5.82},{"n":"Jagna","c":"Philippines","y":9.65,"x":124.3667},{"n":"Atiquizaya","c":"El Salvador","y":13.9667,"x":-89.75},{"n":"Stuhr","c":"Germany","y":53.0167,"x":8.75},{"n":"Castelfranco Veneto","c":"Italy","y":45.6667,"x":11.9333},{"n":"San Antonio de los Banos","c":"Cuba","y":22.8889,"x":-82.4989},{"n":"Kennesaw","c":"United States","y":34.026,"x":-84.6177},{"n":"Almeirim","c":"Brazil","y":-1.5228,"x":-52.5819},{"n":"Victoria Falls","c":"Zimbabwe","y":-17.9333,"x":25.8333},{"n":"Spruce Grove","c":"Canada","y":53.545,"x":-113.9008},{"n":"San Juan Nepomuceno","c":"Colombia","y":9.9522,"x":-75.0811},{"n":"Zhaitangcun","c":"China","y":24.5218,"x":112.3486},{"n":"Almendralejo","c":"Spain","y":38.6833,"x":-6.4167},{"n":"Majagual","c":"Colombia","y":8.5408,"x":-74.6297},{"n":"Adelanto","c":"United States","y":34.5815,"x":-117.4397},{"n":"Irvine","c":"United Kingdom","y":55.6201,"x":-4.6614},{"n":"Sneek","c":"Netherlands","y":53.0325,"x":5.66},{"n":"Sao Jose do Belmonte","c":"Brazil","y":-7.8608,"x":-38.76},{"n":"Ken Caryl","c":"United States","y":39.577,"x":-105.1144},{"n":"Braco do Norte","c":"Brazil","y":-28.275,"x":-49.1658},{"n":"Eirunepe","c":"Brazil","y":-6.6597,"x":-69.8744},{"n":"Deggendorf","c":"Germany","y":48.8353,"x":12.9644},{"n":"Domingos Martins","c":"Brazil","y":-20.3628,"x":-40.6589},{"n":"University Place","c":"United States","y":47.2147,"x":-122.5461},{"n":"Yinchengpu","c":"China","y":39.8189,"x":118.188},{"n":"Baltiysk","c":"Russia","y":54.65,"x":19.9167},{"n":"Douglasville","c":"United States","y":33.7384,"x":-84.7065},{"n":"Kadingilan","c":"Philippines","y":7.6,"x":124.9167},{"n":"Olutanga","c":"Philippines","y":7.3106,"x":122.8464},{"n":"Oulad Zemam","c":"Morocco","y":32.35,"x":-6.6333},{"n":"Furmanov","c":"Russia","y":57.25,"x":41.1},{"n":"Laramie","c":"United States","y":41.3099,"x":-105.6085},{"n":"Tynaarlo","c":"Netherlands","y":53.0833,"x":6.6},{"n":"Nizhneudinsk","c":"Russia","y":54.9,"x":99.0167},{"n":"Lake Stevens","c":"United States","y":48.0028,"x":-122.096},{"n":"Valparaiso","c":"United States","y":41.4782,"x":-87.0507},{"n":"Moose Jaw","c":"Canada","y":50.3933,"x":-105.5519},{"n":"Custodia","c":"Brazil","y":-8.0875,"x":-37.6431},{"n":"Fairborn","c":"United States","y":39.801,"x":-84.0093},{"n":"Reghin","c":"Romania","y":46.7758,"x":24.7083},{"n":"Ban Pak Phun","c":"Thailand","y":8.5391,"x":99.9702},{"n":"Camiri","c":"Bolivia","y":-20.1,"x":-63.5333},{"n":"Santa Pola","c":"Spain","y":38.1897,"x":-0.5556},{"n":"Estero","c":"United States","y":26.4277,"x":-81.7951},{"n":"Mason","c":"United States","y":39.3571,"x":-84.3023},{"n":"Uelzen","c":"Germany","y":52.9647,"x":10.5658},{"n":"Miguel Alves","c":"Brazil","y":-4.1658,"x":-42.895},{"n":"Tekes","c":"China","y":43.2181,"x":81.8372},{"n":"Ouro Fino","c":"Brazil","y":-22.2828,"x":-46.3689},{"n":"Penha","c":"Brazil","y":-26.7689,"x":-48.6458},{"n":"Bell Ville","c":"Argentina","y":-32.6333,"x":-62.6833},{"n":"Cottonwood Heights","c":"United States","y":40.6137,"x":-111.8144},{"n":"Kaneohe","c":"United States","y":21.4062,"x":-157.7904},{"n":"Sonoma","c":"United States","y":38.2902,"x":-122.4598},{"n":"Luuq","c":"Somalia","y":3.8005,"x":42.55},{"n":"Sulop","c":"Philippines","y":6.5986,"x":125.3436},{"n":"Geraardsbergen","c":"Belgium","y":50.7667,"x":3.8667},{"n":"Ronda","c":"Spain","y":36.7461,"x":-5.1611},{"n":"Villafranca di Verona","c":"Italy","y":45.35,"x":10.85},{"n":"Bugasong","c":"Philippines","y":11.05,"x":122.0667},{"n":"Dej","c":"Romania","y":47.0872,"x":23.8053},{"n":"Capoocan","c":"Philippines","y":11.2833,"x":124.65},{"n":"Leo","c":"Burkina Faso","y":11.1,"x":-2.1},{"n":"Poco Redondo","c":"Brazil","y":-9.8058,"x":-37.685},{"n":"Mella","c":"Cuba","y":20.3694,"x":-75.9111},{"n":"Galesburg","c":"United States","y":40.9506,"x":-90.3763},{"n":"Jishi","c":"China","y":35.8511,"x":102.4788},{"n":"Penticton","c":"Canada","y":49.4911,"x":-119.5886},{"n":"Gimbi","c":"Ethiopia","y":9.1667,"x":35.8333},{"n":"Gurupa","c":"Brazil","y":-1.405,"x":-51.64},{"n":"Didouche Mourad","c":"Algeria","y":36.45,"x":6.6333},{"n":"San Marcelino","c":"Philippines","y":14.9742,"x":120.1573},{"n":"Todos Santos Cuchumatan","c":"Guatemala","y":15.5116,"x":-91.6051},{"n":"Xiadian","c":"China","y":39.9435,"x":116.912},{"n":"Belen","c":"Turkey","y":36.4917,"x":36.1917},{"n":"Chilecito","c":"Argentina","y":-29.1667,"x":-67.5},{"n":"Teykovo","c":"Russia","y":56.85,"x":40.55},{"n":"Sukhoy Log","c":"Russia","y":56.9167,"x":62.05},{"n":"Vyatskiye Polyany","c":"Russia","y":56.2184,"x":51.0686},{"n":"Puerto Rico","c":"Colombia","y":1.9075,"x":-75.1583},{"n":"Mosonmagyarovar","c":"Hungary","y":47.8667,"x":17.2667},{"n":"Warsaw","c":"United States","y":41.2448,"x":-85.8464},{"n":"San Antero","c":"Colombia","y":9.3775,"x":-75.7603},{"n":"Cacapava do Sul","c":"Brazil","y":-30.5119,"x":-53.4908},{"n":"Balasan","c":"Philippines","y":11.4728,"x":123.0878},{"n":"Moncao","c":"Brazil","y":-3.4919,"x":-45.2508},{"n":"Cantel","c":"Guatemala","y":14.8112,"x":-91.4555},{"n":"Bayog","c":"Philippines","y":7.8474,"x":123.0423},{"n":"Knokke-Heist","c":"Belgium","y":51.3414,"x":3.2869},{"n":"Allacapan","c":"Philippines","y":18.227,"x":121.5556},{"n":"Fatehpur Sikri","c":"India","y":27.0911,"x":77.6611},{"n":"Korschenbroich","c":"Germany","y":51.1833,"x":6.5167},{"n":"Korsakov","c":"Russia","y":46.6333,"x":142.7667},{"n":"Lianmuqin Kancun","c":"China","y":42.8781,"x":89.9814},{"n":"Ibate","c":"Brazil","y":-21.955,"x":-47.9969},{"n":"Lebowakgomo","c":"South Africa","y":-24.305,"x":29.565},{"n":"Sao Domingos do Maranhao","c":"Brazil","y":-5.5758,"x":-44.385},{"n":"Dois Irmaos","c":"Brazil","y":-29.58,"x":-51.085},{"n":"Mildura","c":"Australia","y":-34.1889,"x":142.1583},{"n":"Asse","c":"Belgium","y":50.9,"x":4.2},{"n":"San Dimas","c":"United States","y":34.1082,"x":-117.809},{"n":"Sakaiminato","c":"Japan","y":35.5397,"x":133.2317},{"n":"Corinto","c":"Colombia","y":3.1739,"x":-76.2594},{"n":"Batouri","c":"Cameroon","y":4.4333,"x":14.3667},{"n":"Rheinfelden (Baden)","c":"Germany","y":47.5611,"x":7.7917},{"n":"Ayvacik","c":"Turkey","y":39.6011,"x":26.4047},{"n":"Zhitiqara","c":"Kazakhstan","y":52.1902,"x":61.1989},{"n":"Tortosa","c":"Spain","y":40.8125,"x":0.5211},{"n":"Ciudad Tecun Uman","c":"Guatemala","y":14.6833,"x":-92.1333},{"n":"Shangcaiyuan","c":"China","y":24.6817,"x":102.6918},{"n":"Joao Alfredo","c":"Brazil","y":-7.8558,"x":-35.5878},{"n":"Dana Point","c":"United States","y":33.4733,"x":-117.6968},{"n":"San Javier","c":"Spain","y":37.8037,"x":-0.8343},{"n":"Ipero","c":"Brazil","y":-23.3503,"x":-47.6886},{"n":"Panjakent","c":"Tajikistan","y":39.5031,"x":67.615},{"n":"Languyan","c":"Philippines","y":5.2667,"x":120.0833},{"n":"Port Moody","c":"Canada","y":49.2831,"x":-122.8317},{"n":"Riverhead","c":"United States","y":40.9409,"x":-72.7095},{"n":"Castro","c":"Chile","y":-42.4824,"x":-73.7643},{"n":"Touros","c":"Brazil","y":-5.1989,"x":-35.4608},{"n":"Falls","c":"United States","y":40.1686,"x":-74.7915},{"n":"Slobodskoy","c":"Russia","y":58.7242,"x":50.1612},{"n":"Shaliuhe","c":"China","y":39.8728,"x":117.939},{"n":"Midlothian","c":"United States","y":32.4668,"x":-96.9892},{"n":"Malangas","c":"Philippines","y":7.6263,"x":123.034},{"n":"Alamogordo","c":"United States","y":32.8837,"x":-105.9624},{"n":"Boca do Acre","c":"Brazil","y":-8.7519,"x":-67.3978},{"n":"Kasulu","c":"Tanzania","y":-4.5767,"x":30.1025},{"n":"Leganes","c":"Philippines","y":10.7833,"x":122.5833},{"n":"Alabaster","c":"United States","y":33.2198,"x":-86.8225},{"n":"Pikesville","c":"United States","y":39.3893,"x":-76.702},{"n":"Hlukhiv","c":"Ukraine","y":51.6765,"x":33.9078},{"n":"Qarqan","c":"China","y":38.1338,"x":85.5333},{"n":"Dumfries","c":"United Kingdom","y":55.07,"x":-3.603},{"n":"Navodari","c":"Romania","y":44.3208,"x":28.6125},{"n":"Derry","c":"United States","y":42.8888,"x":-71.2804},{"n":"Aranda de Duero","c":"Spain","y":41.6833,"x":-3.6833},{"n":"Shobara","c":"Japan","y":34.8578,"x":133.0167},{"n":"Nokia","c":"Finland","y":61.4767,"x":23.5053},{"n":"Woodridge","c":"United States","y":41.7368,"x":-88.0408},{"n":"Baturite","c":"Brazil","y":-4.3289,"x":-38.885},{"n":"Abbiategrasso","c":"Italy","y":45.4009,"x":8.9185},{"n":"Kolin","c":"Czechia","y":50.0282,"x":15.2006},{"n":"Kohtla-Jarve","c":"Estonia","y":59.4,"x":27.2833},{"n":"Biberach","c":"Germany","y":48.0981,"x":9.7886},{"n":"Southport","c":"Australia","y":-27.9667,"x":153.4},{"n":"Bridgeton","c":"United States","y":39.4286,"x":-75.2281},{"n":"Conceicao de Jacuipe","c":"Brazil","y":-12.3269,"x":-38.765},{"n":"Sitangkai","c":"Philippines","y":4.6615,"x":119.3919},{"n":"Greer","c":"United States","y":34.9313,"x":-82.2315},{"n":"Matalom","c":"Philippines","y":10.2833,"x":124.8},{"n":"Tayshet","c":"Russia","y":55.9333,"x":98.0167},{"n":"Umaria","c":"India","y":23.5245,"x":80.8365},{"n":"Tavda","c":"Russia","y":58.05,"x":65.2667},{"n":"La Virginia","c":"Colombia","y":4.8967,"x":-75.8839},{"n":"Cuenca","c":"Philippines","y":13.9167,"x":121.05},{"n":"Tobias Fornier","c":"Philippines","y":10.5167,"x":121.95},{"n":"Police","c":"Poland","y":53.55,"x":14.5708},{"n":"Ourilandia do Norte","c":"Brazil","y":-6.755,"x":-51.0839},{"n":"Zgorzelec","c":"Poland","y":51.1528,"x":15},{"n":"Oldenzaal","c":"Netherlands","y":52.3125,"x":6.9292},{"n":"Tynda","c":"Russia","y":55.15,"x":124.7167},{"n":"Huangzhuang","c":"China","y":39.9905,"x":117.1037},{"n":"Pocone","c":"Brazil","y":-16.2569,"x":-56.6228},{"n":"Springville","c":"United States","y":40.1638,"x":-111.6206},{"n":"Obukhiv","c":"Ukraine","y":50.1,"x":30.6167},{"n":"Espinho","c":"Portugal","y":41.01,"x":-8.64},{"n":"Columbio","c":"Philippines","y":6.7,"x":124.9333},{"n":"Canavieiras","c":"Brazil","y":-15.675,"x":-38.9469},{"n":"Levice","c":"Slovakia","y":48.2136,"x":18.6069},{"n":"Pambujan","c":"Philippines","y":12.5667,"x":124.9333},{"n":"Temascalapa","c":"Mexico","y":19.8,"x":-98.9},{"n":"Pivijay","c":"Colombia","y":10.4608,"x":-74.6153},{"n":"Shatura","c":"Russia","y":55.5667,"x":39.5333},{"n":"Camacan","c":"Brazil","y":-15.4189,"x":-39.4958},{"n":"Bragado","c":"Argentina","y":-35.1167,"x":-60.5},{"n":"Copperas Cove","c":"United States","y":31.1192,"x":-97.914},{"n":"Epsom","c":"United Kingdom","y":51.336,"x":-0.267},{"n":"Fraijanes","c":"Guatemala","y":14.4622,"x":-90.4386},{"n":"San Quintin","c":"Philippines","y":15.9844,"x":120.815},{"n":"Casiguran","c":"Philippines","y":12.8667,"x":124.0167},{"n":"Castelfranco Emilia","c":"Italy","y":44.5967,"x":11.0528},{"n":"Pribram","c":"Czechia","y":49.69,"x":14.0105},{"n":"Khvaf","c":"Iran","y":34.5764,"x":60.1408},{"n":"San Lazzaro di Savena","c":"Italy","y":44.4716,"x":11.4049},{"n":"Jaguarari","c":"Brazil","y":-10.26,"x":-40.1958},{"n":"Floresta","c":"Brazil","y":-8.6008,"x":-38.5678},{"n":"Fucheng","c":"China","y":35.3678,"x":103.7074},{"n":"Bou Ahmed","c":"Morocco","y":33.1119,"x":-7.4058},{"n":"Correntina","c":"Brazil","y":-13.3428,"x":-44.6369},{"n":"Motherwell","c":"United Kingdom","y":55.7839,"x":-3.9852},{"n":"Lucera","c":"Italy","y":41.5,"x":15.3333},{"n":"Catubig","c":"Philippines","y":12.4,"x":125.05},{"n":"American Fork","c":"United States","y":40.3792,"x":-111.7952},{"n":"Shimotoba","c":"Japan","y":34.8839,"x":135.6628},{"n":"Bad Nauheim","c":"Germany","y":50.3667,"x":8.75},{"n":"Sanarate","c":"Guatemala","y":14.795,"x":-90.1922},{"n":"Munai","c":"Philippines","y":7.9758,"x":124.0636},{"n":"Matthews","c":"United States","y":35.1195,"x":-80.7101},{"n":"Kamaishi","c":"Japan","y":39.2758,"x":141.8856},{"n":"Barugo","c":"Philippines","y":11.3167,"x":124.7333},{"n":"De Aar","c":"South Africa","y":-30.65,"x":24.0167},{"n":"Medina","c":"Philippines","y":8.9167,"x":125.0167},{"n":"Rio das Pedras","c":"Brazil","y":-22.8428,"x":-47.6058},{"n":"Laojiezi","c":"China","y":26.86,"x":103.1306},{"n":"Djenne","c":"Mali","y":13.9,"x":-4.55},{"n":"Massafra","c":"Italy","y":40.5833,"x":17.1167},{"n":"Carangola","c":"Brazil","y":-20.7328,"x":-42.0289},{"n":"Arteijo","c":"Spain","y":43.3044,"x":-8.5114},{"n":"Mashiki","c":"Japan","y":32.7914,"x":130.8164},{"n":"Wakabadai","c":"Japan","y":45.4,"x":141.7},{"n":"Plaisir","c":"France","y":48.8183,"x":1.9472},{"n":"Puebloviejo","c":"Colombia","y":10.9942,"x":-74.2833},{"n":"Mushie","c":"Congo (Kinshasa)","y":-3.0196,"x":16.92},{"n":"Timimoun","c":"Algeria","y":29.25,"x":0.2333},{"n":"Liptovsky Mikulas","c":"Slovakia","y":49.0811,"x":19.6181},{"n":"Sarikaya","c":"Turkey","y":39.4936,"x":35.3769},{"n":"Numancia","c":"Philippines","y":11.7,"x":122.3333},{"n":"Woodstock","c":"United States","y":34.1026,"x":-84.509},{"n":"Maragogi","c":"Brazil","y":-9.0122,"x":-35.2225},{"n":"Forbe Oroya","c":"Peru","y":-11.5333,"x":-75.9},{"n":"Bardejov","c":"Slovakia","y":49.295,"x":21.2758},{"n":"Marantao","c":"Philippines","y":7.95,"x":124.233},{"n":"Descalvado","c":"Brazil","y":-21.9039,"x":-47.6189},{"n":"Itzehoe","c":"Germany","y":53.925,"x":9.5164},{"n":"Bautista","c":"Philippines","y":15.7833,"x":120.5},{"n":"Glossop","c":"United Kingdom","y":53.443,"x":-1.949},{"n":"Julich","c":"Germany","y":50.9222,"x":6.3583},{"n":"Leamington","c":"Canada","y":42.0667,"x":-82.5833},{"n":"Arroyomolinos","c":"Spain","y":40.2667,"x":-3.9},{"n":"Lampertheim","c":"Germany","y":49.5942,"x":8.4671},{"n":"Jalajala","c":"Philippines","y":14.3557,"x":121.3233},{"n":"Imbituva","c":"Brazil","y":-25.23,"x":-50.6044},{"n":"Esperanca","c":"Brazil","y":-7.0333,"x":-35.85},{"n":"Chernushka","c":"Russia","y":56.5,"x":56.0833},{"n":"Mataquescuintla","c":"Guatemala","y":14.5336,"x":-90.1838},{"n":"Winsford","c":"United Kingdom","y":53.194,"x":-2.52},{"n":"Barao de Cocais","c":"Brazil","y":-19.9458,"x":-43.4869},{"n":"Bernburg","c":"Germany","y":51.8,"x":11.7333},{"n":"Dellys","c":"Algeria","y":36.9167,"x":3.8833},{"n":"Baragua","c":"Cuba","y":21.6819,"x":-78.6244},{"n":"Gandu","c":"Brazil","y":-13.7439,"x":-39.4869},{"n":"Mazarron","c":"Spain","y":37.5983,"x":-1.3139},{"n":"Oiso","c":"Japan","y":35.3069,"x":139.3114},{"n":"Wernigerode","c":"Germany","y":51.835,"x":10.7853},{"n":"Ozd","c":"Hungary","y":48.2192,"x":20.2869},{"n":"Trekhgornyy","c":"Russia","y":54.8,"x":58.45},{"n":"Vicencia","c":"Brazil","y":-7.6569,"x":-35.3269},{"n":"Forchheim","c":"Germany","y":49.7197,"x":11.0581},{"n":"Arbaoua","c":"Morocco","y":34.9,"x":-5.9167},{"n":"Coatepec Harinas","c":"Mexico","y":18.9,"x":-99.7167},{"n":"Rosmalen","c":"Netherlands","y":51.7167,"x":5.3667},{"n":"Kuji","c":"Japan","y":40.1903,"x":141.7753},{"n":"Dao","c":"Philippines","y":11.3944,"x":122.6858},{"n":"Santa Cruz das Palmeiras","c":"Brazil","y":-21.8269,"x":-47.2489},{"n":"Oeiras do Para","c":"Brazil","y":-2.0028,"x":-49.8539},{"n":"Banate","c":"Philippines","y":11.05,"x":122.7833},{"n":"Fairmont","c":"United States","y":39.4768,"x":-80.1491},{"n":"Tafas","c":"Syria","y":32.7356,"x":36.0669},{"n":"Puerto Escondido","c":"Colombia","y":9.0192,"x":-76.2614},{"n":"Manises","c":"Spain","y":39.4833,"x":-0.45},{"n":"Naumburg","c":"Germany","y":51.1521,"x":11.8098},{"n":"Baraawe","c":"Somalia","y":1.1133,"x":44.0303},{"n":"Safita","c":"Syria","y":34.8208,"x":36.1173},{"n":"Presidente Figueiredo","c":"Brazil","y":-2.0172,"x":-60.025},{"n":"Kaarina","c":"Finland","y":60.4069,"x":22.3722},{"n":"Sao Miguel Arcanjo","c":"Brazil","y":-23.8778,"x":-47.9969},{"n":"Ylojarvi","c":"Finland","y":61.55,"x":23.5833},{"n":"Vechta","c":"Germany","y":52.7306,"x":8.2886},{"n":"Bocas de Satinga","c":"Colombia","y":2.3469,"x":-78.3256},{"n":"Nazare da Mata","c":"Brazil","y":-7.7419,"x":-35.2278},{"n":"Payshamba Shahri","c":"Uzbekistan","y":40.0078,"x":66.2372},{"n":"Altenburg","c":"Germany","y":50.985,"x":12.4333},{"n":"Pombal","c":"Brazil","y":-6.77,"x":-37.8019},{"n":"Baiyan","c":"China","y":26.3584,"x":106.2347},{"n":"Silvia","c":"Colombia","y":2.6108,"x":-76.3789},{"n":"Nurlat","c":"Russia","y":54.4333,"x":50.8},{"n":"Tres Marias","c":"Brazil","y":-18.2058,"x":-45.2419},{"n":"Pomian","c":"China","y":25.2499,"x":105.6589},{"n":"Espigao D'Oeste","c":"Brazil","y":-11.5247,"x":-61.0128},{"n":"Yuzhne","c":"Ukraine","y":46.6222,"x":31.1008},{"n":"Bacarra","c":"Philippines","y":18.2519,"x":120.6107},{"n":"Camaiore","c":"Italy","y":43.9333,"x":10.3},{"n":"Concon","c":"Chile","y":-32.9167,"x":-71.5167},{"n":"Abulug","c":"Philippines","y":18.4441,"x":121.4576},{"n":"Favara","c":"Italy","y":37.3186,"x":13.6631},{"n":"Dobryanka","c":"Russia","y":58.45,"x":56.4167},{"n":"Ridgecrest","c":"United States","y":35.6308,"x":-117.6621},{"n":"Cururupu","c":"Brazil","y":-1.8278,"x":-44.8678},{"n":"El Dificil","c":"Colombia","y":9.8469,"x":-74.2367},{"n":"Lower Makefield","c":"United States","y":40.2309,"x":-74.855},{"n":"Initao","c":"Philippines","y":8.5,"x":124.3167},{"n":"Mateur","c":"Tunisia","y":37.04,"x":9.665},{"n":"Pitanga","c":"Brazil","y":-24.7569,"x":-51.7608},{"n":"East Kelowna","c":"Canada","y":49.8625,"x":-119.5833},{"n":"Campulung","c":"Romania","y":45.275,"x":25.05},{"n":"Aalsmeer","c":"Netherlands","y":52.2639,"x":4.7625},{"n":"Godollo","c":"Hungary","y":47.6,"x":19.3667},{"n":"Paratinga","c":"Brazil","y":-12.6908,"x":-43.1839},{"n":"Redcliff","c":"Zimbabwe","y":-19.0333,"x":29.7833},{"n":"Totana","c":"Spain","y":37.7711,"x":-1.5003},{"n":"Ostrogozhsk","c":"Russia","y":50.8667,"x":39.0667},{"n":"Deurne","c":"Netherlands","y":51.4639,"x":5.7947},{"n":"Mioveni","c":"Romania","y":44.9553,"x":24.9356},{"n":"Inza","c":"Colombia","y":2.5503,"x":-76.0636},{"n":"Aloguinsan","c":"Philippines","y":10.2229,"x":123.5491},{"n":"Castro-Urdiales","c":"Spain","y":43.3844,"x":-3.215},{"n":"Sao Joaquim de Bicas","c":"Brazil","y":-20.0489,"x":-44.2739},{"n":"Guindulman","c":"Philippines","y":9.762,"x":124.488},{"n":"Juban","c":"Philippines","y":12.85,"x":123.9833},{"n":"Massillon","c":"United States","y":40.7838,"x":-81.5254},{"n":"Spanaway","c":"United States","y":47.0979,"x":-122.4233},{"n":"Kulebaki","c":"Russia","y":55.4167,"x":42.5167},{"n":"Rio Branco do Sul","c":"Brazil","y":-25.19,"x":-49.3139},{"n":"Diplahan","c":"Philippines","y":7.6939,"x":122.9845},{"n":"Bonifacio","c":"Philippines","y":8.0527,"x":123.6136},{"n":"Rethymno","c":"Greece","y":35.3689,"x":24.4739},{"n":"Grodzisk Mazowiecki","c":"Poland","y":52.1039,"x":20.6337},{"n":"Starkville","c":"United States","y":33.4608,"x":-88.8297},{"n":"Yorii","c":"Japan","y":36.1183,"x":139.1931},{"n":"Slantsy","c":"Russia","y":59.1167,"x":28.0833},{"n":"Yankou","c":"China","y":27.595,"x":105.4174},{"n":"I-n-Salah","c":"Algeria","y":27.1936,"x":2.4606},{"n":"Louvain-la-Neuve","c":"Belgium","y":50.6696,"x":4.6112},{"n":"Milazzo","c":"Italy","y":38.217,"x":15.237},{"n":"Osvaldo Cruz","c":"Brazil","y":-21.7967,"x":-50.8786},{"n":"Warminster","c":"United States","y":40.2043,"x":-75.0915},{"n":"La Calera","c":"Argentina","y":-31.3439,"x":-64.3353},{"n":"Beixinzhuang","c":"China","y":38.7914,"x":116.0917},{"n":"Hoyerswerda","c":"Germany","y":51.4331,"x":14.25},{"n":"Staryy Beyneu","c":"Kazakhstan","y":45.1834,"x":55.1},{"n":"Nova Russas","c":"Brazil","y":-4.7,"x":-40.5667},{"n":"Maputsoe","c":"Lesotho","y":-28.8833,"x":27.9},{"n":"Chatellerault","c":"France","y":46.8178,"x":0.5461},{"n":"Plottier","c":"Argentina","y":-38.95,"x":-68.2333},{"n":"Landecy","c":"Switzerland","y":46.1897,"x":6.1158},{"n":"Clarence","c":"United States","y":43.0196,"x":-78.6375},{"n":"Batan","c":"Philippines","y":11.5833,"x":122.5},{"n":"Brasilia de Minas","c":"Brazil","y":-16.2078,"x":-44.4289},{"n":"Olintepeque","c":"Guatemala","y":14.8833,"x":-91.5167},{"n":"Harker Heights","c":"United States","y":31.0572,"x":-97.6445},{"n":"Tawaramoto","c":"Japan","y":34.5542,"x":135.7931},{"n":"Sarno","c":"Italy","y":40.8167,"x":14.6167},{"n":"Mohyliv-Podilskyi","c":"Ukraine","y":48.45,"x":27.7833},{"n":"Zentsujicho","c":"Japan","y":34.2283,"x":133.7872},{"n":"Cachoeira Paulista","c":"Brazil","y":-22.665,"x":-45.0094},{"n":"Georgsmarienhutte","c":"Germany","y":52.2031,"x":8.0447},{"n":"Elk Grove Village","c":"United States","y":42.0063,"x":-87.9921},{"n":"Zaojiao","c":"China","y":34.4727,"x":105.7062},{"n":"Zangang","c":"China","y":39.0524,"x":116.2017},{"n":"San Pedro de Uraba","c":"Colombia","y":8.275,"x":-76.3769},{"n":"Furstenwalde","c":"Germany","y":52.3667,"x":14.0667},{"n":"Kaysville","c":"United States","y":41.029,"x":-111.9456},{"n":"Guararapes","c":"Brazil","y":-21.2608,"x":-50.6428},{"n":"Achim","c":"Germany","y":53.013,"x":9.033},{"n":"Draa Ben Khedda","c":"Algeria","y":36.7349,"x":3.9556},{"n":"Southlake","c":"United States","y":32.9545,"x":-97.1503},{"n":"Ferry Pass","c":"United States","y":30.5203,"x":-87.1903},{"n":"Kristianstad","c":"Sweden","y":56.0337,"x":14.1333},{"n":"Savage","c":"United States","y":44.7544,"x":-93.3631},{"n":"Salug","c":"Philippines","y":8.1079,"x":122.7542},{"n":"Menglie","c":"China","y":22.5833,"x":101.866},{"n":"Ferrenafe","c":"Peru","y":-6.6391,"x":-79.788},{"n":"Bethel Park","c":"United States","y":40.3239,"x":-80.0364},{"n":"San Andres Itzapa","c":"Guatemala","y":14.6167,"x":-90.85},{"n":"Sao Jose da Tapera","c":"Brazil","y":-9.5578,"x":-37.3808},{"n":"Mayantoc","c":"Philippines","y":15.6167,"x":120.3833},{"n":"Santo Domingo Suchitepequez","c":"Guatemala","y":14.4667,"x":-91.4833},{"n":"Lupi Viejo","c":"Philippines","y":13.8167,"x":122.9},{"n":"Capalonga","c":"Philippines","y":14.3333,"x":122.5},{"n":"Ra's Gharib","c":"Egypt","y":28.3597,"x":33.0775},{"n":"Curanilahue","c":"Chile","y":-37.4667,"x":-73.35},{"n":"Dreux","c":"France","y":48.7372,"x":1.3664},{"n":"Princeton","c":"United States","y":25.5396,"x":-80.3971},{"n":"Warwick","c":"United Kingdom","y":52.28,"x":-1.59},{"n":"Mangur","c":"India","y":17.9373,"x":80.8185},{"n":"Ribeira Grande","c":"Portugal","y":37.8167,"x":-25.5167},{"n":"Ilhabela","c":"Brazil","y":-23.7778,"x":-45.3578},{"n":"Dumalinao","c":"Philippines","y":7.8167,"x":123.3667},{"n":"Shimizucho","c":"Japan","y":35.0992,"x":138.9028},{"n":"Koupela","c":"Burkina Faso","y":12.1794,"x":-0.3517},{"n":"Laoac East","c":"Philippines","y":16.0333,"x":120.55},{"n":"Jaguaruana","c":"Brazil","y":-4.8339,"x":-37.7808},{"n":"Nagato","c":"Japan","y":34.3711,"x":131.1822},{"n":"Vintar","c":"Philippines","y":18.225,"x":120.65},{"n":"Capulhuac","c":"Mexico","y":19.2,"x":-99.4667},{"n":"Dania Beach","c":"United States","y":26.0594,"x":-80.1637},{"n":"Kangasala","c":"Finland","y":61.4639,"x":24.065},{"n":"Luuk","c":"Philippines","y":5.9676,"x":121.3133},{"n":"Mendez-Nunez","c":"Philippines","y":14.1286,"x":120.9058},{"n":"Areka","c":"Ethiopia","y":7.0667,"x":37.7},{"n":"Bandeirantes","c":"Brazil","y":-23.11,"x":-50.3678},{"n":"Oer-Erkenschwick","c":"Germany","y":51.6422,"x":7.2508},{"n":"Cheb","c":"Czechia","y":50.0798,"x":12.374},{"n":"Lonneker","c":"Netherlands","y":52.2506,"x":6.9119},{"n":"Tuzantan","c":"Mexico","y":15.15,"x":-92.4167},{"n":"Wevelgem","c":"Belgium","y":50.8081,"x":3.1839},{"n":"Igbaras","c":"Philippines","y":10.7167,"x":122.2667},{"n":"Lower Macungie","c":"United States","y":40.5303,"x":-75.57},{"n":"Primorsko-Akhtarsk","c":"Russia","y":46.05,"x":38.1833},{"n":"Itatiaia","c":"Brazil","y":-22.4914,"x":-44.5592},{"n":"Xangda","c":"China","y":32.2056,"x":96.4751},{"n":"Pedana","c":"India","y":16.2667,"x":81.1667},{"n":"Grottaglie","c":"Italy","y":40.5333,"x":17.4333},{"n":"Novovoronezh","c":"Russia","y":51.3167,"x":39.2167},{"n":"Laranjeiras do Sul","c":"Brazil","y":-25.4078,"x":-52.4158},{"n":"Odacho-oda","c":"Japan","y":35.1922,"x":132.4997},{"n":"East Lake","c":"United States","y":28.1205,"x":-82.6868},{"n":"Whitstable","c":"United Kingdom","y":51.361,"x":1.026},{"n":"Uglich","c":"Russia","y":57.5333,"x":38.3333},{"n":"Dongxianpo","c":"China","y":39.561,"x":115.9865},{"n":"Douar Oulad Hssine","c":"Morocco","y":33.0681,"x":-8.5108},{"n":"Coos Bay","c":"United States","y":43.3789,"x":-124.233},{"n":"Smithfield","c":"United States","y":35.5131,"x":-78.3497},{"n":"Vall de Uxo","c":"Spain","y":39.8236,"x":-0.2317},{"n":"Delbruck","c":"Germany","y":51.7667,"x":8.5667},{"n":"Sechura","c":"Peru","y":-5.5576,"x":-80.8223},{"n":"Palmeira","c":"Brazil","y":-25.4289,"x":-50.0058},{"n":"Quintero","c":"Chile","y":-32.7833,"x":-71.5333},{"n":"Yaguaron","c":"Paraguay","y":-25.5621,"x":-57.284},{"n":"Colider","c":"Brazil","y":-10.8128,"x":-55.455},{"n":"Jasim","c":"Syria","y":32.9922,"x":36.06},{"n":"Trinidad","c":"Philippines","y":10.0795,"x":124.3432},{"n":"Clearfield","c":"United States","y":41.103,"x":-112.0237},{"n":"Serdobsk","c":"Russia","y":52.4667,"x":44.2167},{"n":"Zapala","c":"Argentina","y":-38.9028,"x":-70.065},{"n":"Jiming","c":"China","y":40.1884,"x":118.1392},{"n":"Liberty","c":"United States","y":39.2394,"x":-94.4191},{"n":"Midsalip","c":"Philippines","y":8.0324,"x":123.3145},{"n":"Donggou","c":"China","y":35.5621,"x":112.7046},{"n":"Shentang","c":"China","y":22.2915,"x":113.3695},{"n":"Alba","c":"Italy","y":44.6915,"x":8.0256},{"n":"Partinico","c":"Italy","y":38.05,"x":13.1167},{"n":"Macau","c":"Brazil","y":-5.115,"x":-36.6339},{"n":"Milaor","c":"Philippines","y":13.6,"x":123.1833},{"n":"Remedios","c":"Colombia","y":7.0275,"x":-74.6939},{"n":"Pinukpuk","c":"Philippines","y":17.6,"x":121.3667},{"n":"Asilah","c":"Morocco","y":35.4667,"x":-6.0333},{"n":"Tongkou","c":"China","y":38.7952,"x":115.8646},{"n":"Cabaiguan","c":"Cuba","y":22.0839,"x":-79.4953},{"n":"El Golea","c":"Algeria","y":30.5666,"x":2.8833},{"n":"Oristano","c":"Italy","y":39.9058,"x":8.5916},{"n":"Pekin","c":"United States","y":40.5679,"x":-89.6262},{"n":"Westlake","c":"United States","y":41.4524,"x":-81.9295},{"n":"Badoc","c":"Philippines","y":17.9267,"x":120.4754},{"n":"Bahharet Oulad Ayyad","c":"Morocco","y":34.7703,"x":-6.3047},{"n":"Herrenberg","c":"Germany","y":48.5967,"x":8.8708},{"n":"Dar Ould Zidouh","c":"Morocco","y":32.3167,"x":-6.9},{"n":"Nilka","c":"China","y":43.7826,"x":82.5089},{"n":"Chillicothe","c":"United States","y":39.3393,"x":-82.9937},{"n":"Jaral del Progreso","c":"Mexico","y":20.3667,"x":-101.0667},{"n":"Pativilca","c":"Peru","y":-10.6996,"x":-77.8},{"n":"La Verne","c":"United States","y":34.1208,"x":-117.7702},{"n":"Prairieville","c":"United States","y":30.3151,"x":-90.9571},{"n":"Paipa","c":"Colombia","y":5.78,"x":-73.1175},{"n":"Namegata","c":"Japan","y":35.9903,"x":140.4892},{"n":"Komagane","c":"Japan","y":35.7289,"x":137.9339},{"n":"Placerville","c":"United States","y":38.7308,"x":-120.7978},{"n":"Ivaipora","c":"Brazil","y":-24.2478,"x":-51.685},{"n":"Bel Air North","c":"United States","y":39.5544,"x":-76.3733},{"n":"Shahedian","c":"China","y":37.6546,"x":114.7392},{"n":"Nanyuki","c":"Kenya","y":0.0167,"x":37.0667},{"n":"Guachaves","c":"Colombia","y":1.2219,"x":-77.6772},{"n":"Sakhnin","c":"Israel","y":32.8667,"x":35.3},{"n":"Turicato","c":"Mexico","y":19.05,"x":-101.4167},{"n":"Montebelluna","c":"Italy","y":45.7753,"x":12.0389},{"n":"Grajau","c":"Brazil","y":-5.8194,"x":-46.1386},{"n":"Sasaguri","c":"Japan","y":33.6156,"x":130.5511},{"n":"El Oro de Hidalgo","c":"Mexico","y":19.8008,"x":-100.1314},{"n":"I`zaz","c":"Syria","y":36.5888,"x":37.0441},{"n":"Manlius","c":"United States","y":43.049,"x":-75.9793},{"n":"Ruy Barbosa","c":"Brazil","y":-12.2839,"x":-40.4939},{"n":"Katagami","c":"Japan","y":39.8833,"x":139.9889},{"n":"Touba","c":"Côte D’Ivoire","y":8.2833,"x":-7.6833},{"n":"Dandenong","c":"Australia","y":-37.981,"x":145.215},{"n":"San Pedro de Ribas","c":"Spain","y":41.2592,"x":1.773},{"n":"Redan","c":"United States","y":33.7394,"x":-84.1644},{"n":"Martinsville","c":"United States","y":36.6827,"x":-79.8636},{"n":"Gevelsberg","c":"Germany","y":51.3265,"x":7.3559},{"n":"Val-d'Or","c":"Canada","y":48.1,"x":-77.7833},{"n":"Boghni","c":"Algeria","y":36.5437,"x":3.9523},{"n":"Pueblo West","c":"United States","y":38.3551,"x":-104.7266},{"n":"Chajul","c":"Guatemala","y":15.4872,"x":-91.0347},{"n":"Buzovna","c":"Azerbaijan","y":40.5167,"x":50.1167},{"n":"Avola","c":"Italy","y":36.9167,"x":15.1333},{"n":"Radnor","c":"United States","y":40.0287,"x":-75.3675},{"n":"Owen Sound","c":"Canada","y":44.5667,"x":-80.9333},{"n":"Payao","c":"Philippines","y":7.5857,"x":122.8022},{"n":"Velikiy Ustyug","c":"Russia","y":60.7589,"x":46.3039},{"n":"Gubbio","c":"Italy","y":43.3518,"x":12.5773},{"n":"San Giuliano Terme","c":"Italy","y":43.7625,"x":10.4414},{"n":"Chum Phae","c":"Thailand","y":16.5431,"x":102.1104},{"n":"San Roque","c":"Spain","y":36.2097,"x":-5.3844},{"n":"Temascaltepec de Gonzalez","c":"Mexico","y":19.0433,"x":-100.0414},{"n":"Kyzyl-Kyya","c":"Kyrgyzstan","y":40.25,"x":72.1167},{"n":"Kalingalan Caluang","c":"Philippines","y":5.8833,"x":121.2667},{"n":"Kasimov","c":"Russia","y":54.9583,"x":41.3972},{"n":"Kuroishi","c":"Japan","y":40.6428,"x":140.5944},{"n":"Haan","c":"Germany","y":51.1931,"x":7.0131},{"n":"Sitionuevo","c":"Colombia","y":10.7758,"x":-74.7203},{"n":"Kulat","c":"Indonesia","y":-8.7151,"x":115.1841},{"n":"Radolfzell am Bodensee","c":"Germany","y":47.7369,"x":8.9697},{"n":"Kotovsk","c":"Russia","y":52.5833,"x":41.5},{"n":"Weil am Rhein","c":"Germany","y":47.5947,"x":7.6108},{"n":"Nijar","c":"Spain","y":36.9667,"x":-2.2},{"n":"Balyqshy","c":"Kazakhstan","y":47.0666,"x":51.8666},{"n":"Jesus Maria","c":"Argentina","y":-30.9817,"x":-64.0942},{"n":"Fallbrook","c":"United States","y":33.3693,"x":-117.2259},{"n":"Dongmaying","c":"China","y":39.1221,"x":115.9814},{"n":"Zepce","c":"Bosnia And Herzegovina","y":44.4333,"x":18.0333},{"n":"Bedworth","c":"United Kingdom","y":52.475,"x":-1.477},{"n":"Lowicz","c":"Poland","y":52.1,"x":19.9333},{"n":"Ibaiti","c":"Brazil","y":-23.8489,"x":-50.1878},{"n":"Nueva Imperial","c":"Chile","y":-38.7333,"x":-72.95},{"n":"Tecozautla","c":"Mexico","y":20.5333,"x":-99.6333},{"n":"Willingboro","c":"United States","y":40.028,"x":-74.8882},{"n":"Jacareacanga","c":"Brazil","y":-6.2222,"x":-57.7528},{"n":"Exu","c":"Brazil","y":-7.5133,"x":-39.7239},{"n":"Castelvetrano","c":"Italy","y":37.6786,"x":12.7917},{"n":"Santa Barbara","c":"Brazil","y":-19.9589,"x":-43.415},{"n":"Tanmen","c":"China","y":19.2429,"x":110.612},{"n":"Morro Agudo","c":"Brazil","y":-20.7314,"x":-48.0578},{"n":"Ayabe","c":"Japan","y":35.2989,"x":135.2586},{"n":"Espinosa","c":"Brazil","y":-14.9081,"x":-42.8103},{"n":"Kreuztal","c":"Germany","y":50.962,"x":8.0064},{"n":"Cantilan","c":"Philippines","y":9.3336,"x":125.9775},{"n":"Frederico Westphalen","c":"Brazil","y":-27.3589,"x":-53.3939},{"n":"Waterloo","c":"Belgium","y":50.7167,"x":4.3833},{"n":"San Andres Xecul","c":"Guatemala","y":14.9,"x":-91.4833},{"n":"Yawatahama-shi","c":"Japan","y":33.4631,"x":132.4233},{"n":"Mae Sot","c":"Thailand","y":16.7101,"x":98.5707},{"n":"Carballo","c":"Spain","y":43.2167,"x":-8.6833},{"n":"Nardo","c":"Italy","y":40.1797,"x":18.0333},{"n":"Oudenaarde","c":"Belgium","y":50.85,"x":3.6},{"n":"Lingig","c":"Philippines","y":8.0381,"x":126.4127},{"n":"Fengrenxu","c":"China","y":24.1736,"x":115.3268},{"n":"Hopkinsville","c":"United States","y":36.8386,"x":-87.4776},{"n":"Mocajuba","c":"Brazil","y":-2.5839,"x":-49.5069},{"n":"Zima","c":"Russia","y":53.9167,"x":102.05},{"n":"Ponta de Pedras","c":"Brazil","y":-1.39,"x":-48.8708},{"n":"Kosonsoy","c":"Uzbekistan","y":41.2492,"x":71.5458},{"n":"Fagaras","c":"Romania","y":45.8422,"x":24.9714},{"n":"Ban Chang","c":"Thailand","y":12.7209,"x":101.0669},{"n":"Calubian","c":"Philippines","y":11.45,"x":124.4167},{"n":"Balungao","c":"Philippines","y":15.9,"x":120.7},{"n":"Ipora","c":"Brazil","y":-16.4419,"x":-51.1178},{"n":"Huangxicun","c":"China","y":24.4702,"x":115.7723},{"n":"Puerto Wilches","c":"Colombia","y":7.3483,"x":-73.8983},{"n":"Verbania","c":"Italy","y":45.9228,"x":8.5519},{"n":"Lavras da Mangabeira","c":"Brazil","y":-6.7528,"x":-38.9719},{"n":"Maubeuge","c":"France","y":50.2775,"x":3.9734},{"n":"South Riding","c":"United States","y":38.912,"x":-77.5132},{"n":"Saint-Medard-en-Jalles","c":"France","y":44.8964,"x":-0.7164},{"n":"Minas Novas","c":"Brazil","y":-17.2189,"x":-42.59},{"n":"Marks","c":"Russia","y":51.7,"x":46.75},{"n":"Rheinberg","c":"Germany","y":51.5467,"x":6.6006},{"n":"Kostopil","c":"Ukraine","y":50.8833,"x":26.4431},{"n":"Santa Fe do Sul","c":"Brazil","y":-20.2108,"x":-50.9258},{"n":"Deinze","c":"Belgium","y":50.9833,"x":3.5272},{"n":"Centereach","c":"United States","y":40.8696,"x":-73.0808},{"n":"Neira","c":"Colombia","y":5.1664,"x":-75.5189},{"n":"Save","c":"Benin","y":8.0342,"x":2.4866},{"n":"Geesthacht","c":"Germany","y":53.4375,"x":10.3675},{"n":"Milledgeville","c":"United States","y":33.0874,"x":-83.2414},{"n":"Mograne","c":"Morocco","y":34.4167,"x":-6.4333},{"n":"Parambu","c":"Brazil","y":-6.2108,"x":-40.6939},{"n":"Mateus Leme","c":"Brazil","y":-19.9858,"x":-44.4278},{"n":"Stratford","c":"Canada","y":43.3708,"x":-80.9819},{"n":"Wanghong Yidui","c":"China","y":38.1993,"x":106.2284},{"n":"Yingyangcun","c":"China","y":22.0974,"x":106.7567},{"n":"Santa Maria La Pila","c":"Guatemala","y":15.6056,"x":-89.8125},{"n":"Netivot","c":"Israel","y":31.4167,"x":34.5833},{"n":"Kaminokawa","c":"Japan","y":36.4392,"x":139.91},{"n":"Bielsk Podlaski","c":"Poland","y":52.7667,"x":23.2},{"n":"Aracoiaba da Serra","c":"Brazil","y":-23.5053,"x":-47.6142},{"n":"Barrinha","c":"Brazil","y":-21.1936,"x":-48.1639},{"n":"Trebinje","c":"Bosnia And Herzegovina","y":42.7089,"x":18.3217},{"n":"Tiquipaya","c":"Bolivia","y":-17.3381,"x":-66.2189},{"n":"Sherwood","c":"United States","y":34.8508,"x":-92.2028},{"n":"Posse","c":"Brazil","y":-14.0928,"x":-46.3689},{"n":"Valkenswaard","c":"Netherlands","y":51.35,"x":5.4592},{"n":"Alacuas","c":"Spain","y":39.4583,"x":-0.4628},{"n":"Wenxian Chengguanzhen","c":"China","y":32.9421,"x":104.687},{"n":"Halden","c":"Norway","y":59.1264,"x":11.4828},{"n":"Quesada","c":"Costa Rica","y":10.3305,"x":-84.44},{"n":"Lloydminster","c":"Canada","y":53.2783,"x":-110.005},{"n":"Simunul","c":"Philippines","y":4.898,"x":119.8213},{"n":"Lumbang","c":"Philippines","y":14.3,"x":121.4667},{"n":"Garner","c":"United States","y":35.6934,"x":-78.6196},{"n":"Guamo","c":"Colombia","y":4.0281,"x":-74.97},{"n":"Key West","c":"United States","y":24.5637,"x":-81.7768},{"n":"Coria del Rio","c":"Spain","y":37.2833,"x":-6.05},{"n":"Caracal","c":"Romania","y":44.1,"x":24.3333},{"n":"Cauquenes","c":"Chile","y":-35.9671,"x":-72.3154},{"n":"Pointe-Claire","c":"Canada","y":45.45,"x":-73.8167},{"n":"Moalboal","c":"Philippines","y":9.95,"x":123.4},{"n":"Kudymkar","c":"Russia","y":59.0167,"x":54.6667},{"n":"Dracut","c":"United States","y":42.6832,"x":-71.301},{"n":"Skelleftea","c":"Sweden","y":64.65,"x":20.85},{"n":"Abra de Ilog","c":"Philippines","y":13.4448,"x":120.726},{"n":"Ganderkesee","c":"Germany","y":53.0358,"x":8.5483},{"n":"Novo Cruzeiro","c":"Brazil","y":-17.4678,"x":-41.875},{"n":"Petersburg","c":"United States","y":37.2043,"x":-77.3913},{"n":"Al Husayniyah","c":"Egypt","y":30.8612,"x":31.919},{"n":"North Olmsted","c":"United States","y":41.415,"x":-81.919},{"n":"Kahului","c":"United States","y":20.8715,"x":-156.4603},{"n":"Ostuni","c":"Italy","y":40.7322,"x":17.5778},{"n":"Kandalaksha","c":"Russia","y":67.1569,"x":32.4117},{"n":"Bagre","c":"Brazil","y":-1.9,"x":-50.1639},{"n":"Manduria","c":"Italy","y":40.4028,"x":17.6342},{"n":"Alice Springs","c":"Australia","y":-23.7,"x":133.8667},{"n":"Yaita","c":"Japan","y":36.8067,"x":139.9242},{"n":"Duanshan","c":"China","y":25.8308,"x":106.5785},{"n":"Wheat Ridge","c":"United States","y":39.7728,"x":-105.1029},{"n":"Fruit Cove","c":"United States","y":30.0972,"x":-81.6176},{"n":"Conceicao da Barra","c":"Brazil","y":-18.5928,"x":-39.7319},{"n":"Rosignano Marittimo","c":"Italy","y":43.4,"x":10.4667},{"n":"Tracuateua","c":"Brazil","y":-1.0719,"x":-46.8969},{"n":"Cibolo","c":"United States","y":29.5639,"x":-98.2123},{"n":"Buurhakaba","c":"Somalia","y":2.7837,"x":44.0833},{"n":"Marovoay","c":"Madagascar","y":-16.0995,"x":46.6333},{"n":"Calape","c":"Philippines","y":9.8833,"x":123.8833},{"n":"Barra dos Coqueiros","c":"Brazil","y":-10.9089,"x":-37.0389},{"n":"Bauko","c":"Philippines","y":16.9833,"x":120.8667},{"n":"Pindare-Mirim","c":"Brazil","y":-3.6078,"x":-45.3428},{"n":"Taozhuangcun","c":"China","y":30.9694,"x":120.8095},{"n":"Vitoria do Mearim","c":"Brazil","y":-3.4619,"x":-44.8708},{"n":"Uran","c":"India","y":18.89,"x":72.95},{"n":"Biritiba-Mirim","c":"Brazil","y":-23.5728,"x":-46.0389},{"n":"Alliance","c":"United States","y":40.9107,"x":-81.1189},{"n":"Balatan","c":"Philippines","y":13.3167,"x":123.2333},{"n":"Circasia","c":"Colombia","y":4.6192,"x":-75.6347},{"n":"San Vicente","c":"Philippines","y":10.5333,"x":119.2833},{"n":"Ipubi","c":"Brazil","y":-7.6519,"x":-40.1489},{"n":"Lukow","c":"Poland","y":51.9167,"x":22.3833},{"n":"Boxtel","c":"Netherlands","y":51.5911,"x":5.3275},{"n":"Banning","c":"United States","y":33.946,"x":-116.8992},{"n":"Burgess Hill","c":"United Kingdom","y":50.9535,"x":-0.1262},{"n":"Getafe","c":"Philippines","y":10.15,"x":124.15},{"n":"Laguna Hills","c":"United States","y":33.592,"x":-117.6992},{"n":"Central Islip","c":"United States","y":40.7837,"x":-73.1945},{"n":"Marigliano","c":"Italy","y":40.9333,"x":14.45},{"n":"Lagos","c":"Portugal","y":37.1,"x":-8.6667},{"n":"Bogoroditsk","c":"Russia","y":53.7667,"x":38.1333},{"n":"Lushnje","c":"Albania","y":40.9333,"x":19.7},{"n":"Yingshouyingzi","c":"China","y":40.5515,"x":117.6616},{"n":"Weyhe","c":"Germany","y":52.9936,"x":8.8733},{"n":"Flores da Cunha","c":"Brazil","y":-29.0289,"x":-51.1819},{"n":"Werl","c":"Germany","y":51.5528,"x":7.9139},{"n":"Culleredo","c":"Spain","y":43.2883,"x":-8.3894},{"n":"Loughton","c":"United Kingdom","y":51.6494,"x":0.0735},{"n":"Jimalalud","c":"Philippines","y":9.9797,"x":123.1999},{"n":"Orillia","c":"Canada","y":44.6,"x":-79.4167},{"n":"Baixo Guandu","c":"Brazil","y":-19.5189,"x":-41.0158},{"n":"Minacu","c":"Brazil","y":-13.5328,"x":-48.22},{"n":"Ciudad Vieja","c":"Guatemala","y":14.5233,"x":-90.7667},{"n":"Diemen","c":"Netherlands","y":52.3439,"x":4.9625},{"n":"Tokmak","c":"Ukraine","y":47.2514,"x":35.7058},{"n":"Magsingal","c":"Philippines","y":17.685,"x":120.4244},{"n":"Chitral","c":"Pakistan","y":35.8511,"x":71.7889},{"n":"Paraparaumu","c":"New Zealand","y":-40.9167,"x":175.0167},{"n":"Atotonilco de Tula","c":"Mexico","y":20.05,"x":-99.1833},{"n":"Candido Mota","c":"Brazil","y":-22.7464,"x":-50.3869},{"n":"Ski","c":"Norway","y":59.7419,"x":10.8939},{"n":"Masaki","c":"Japan","y":33.7875,"x":132.7114},{"n":"Afonso Claudio","c":"Brazil","y":-20.0739,"x":-41.1239},{"n":"Falmouth","c":"United States","y":41.5915,"x":-70.5914},{"n":"Bramsche","c":"Germany","y":52.4089,"x":7.9728},{"n":"Orcutt","c":"United States","y":34.8668,"x":-120.4269},{"n":"Portao","c":"Brazil","y":-29.7019,"x":-51.2419},{"n":"Naugatuck","c":"United States","y":41.489,"x":-73.0518},{"n":"Eldersburg","c":"United States","y":39.4041,"x":-76.9529},{"n":"Rio Grande","c":"Argentina","y":-53.7914,"x":-67.699},{"n":"Tewksbury","c":"United States","y":42.612,"x":-71.2278},{"n":"Itabela","c":"Brazil","y":-16.575,"x":-39.5528},{"n":"Muritiba","c":"Brazil","y":-12.6258,"x":-38.99},{"n":"Jacare","c":"Brazil","y":-18.9058,"x":-40.0758},{"n":"Bochnia","c":"Poland","y":49.9833,"x":20.4333},{"n":"Schonebeck","c":"Germany","y":52.0167,"x":11.75},{"n":"Tijucas","c":"Brazil","y":-27.2408,"x":-48.6339},{"n":"Soledade","c":"Brazil","y":-28.8178,"x":-52.51},{"n":"Rio Pardo de Minas","c":"Brazil","y":-15.61,"x":-42.54},{"n":"Mundelein","c":"United States","y":42.2691,"x":-88.0101},{"n":"Sapa Sapa","c":"Philippines","y":5.0899,"x":120.2729},{"n":"Bielawa","c":"Poland","y":50.6908,"x":16.623},{"n":"Matoes","c":"Brazil","y":-5.5189,"x":-43.1989},{"n":"San Andres del Rabanedo","c":"Spain","y":42.6167,"x":-5.6},{"n":"Dyurtyuli","c":"Russia","y":55.4833,"x":54.8667},{"n":"Harpenden","c":"United Kingdom","y":51.8175,"x":-0.3524},{"n":"Santa Vitoria do Palmar","c":"Brazil","y":-33.5189,"x":-53.3678},{"n":"Mocimboa da Praia","c":"Mozambique","y":-11.35,"x":40.3333},{"n":"Huamachuco","c":"Peru","y":-7.8121,"x":-78.0487},{"n":"Nartkala","c":"Russia","y":43.55,"x":43.85},{"n":"Amircan","c":"Azerbaijan","y":40.4236,"x":49.9886},{"n":"Rexburg","c":"United States","y":43.8224,"x":-111.792},{"n":"Burgdorf","c":"Germany","y":52.4438,"x":10.0078},{"n":"Needham","c":"United States","y":42.2814,"x":-71.2411},{"n":"Ambanja","c":"Madagascar","y":-13.6786,"x":48.4522},{"n":"Einbeck","c":"Germany","y":51.8167,"x":9.8667},{"n":"Sombrio","c":"Brazil","y":-29.1039,"x":-49.6289},{"n":"Neuruppin","c":"Germany","y":52.9222,"x":12.8},{"n":"Mossendjo","c":"Congo (Brazzaville)","y":-2.9458,"x":12.7147},{"n":"Fabriano","c":"Italy","y":43.3386,"x":12.9085},{"n":"Nogales","c":"United States","y":31.3624,"x":-110.9336},{"n":"Bela Cruz","c":"Brazil","y":-3.0508,"x":-40.1678},{"n":"Nicholasville","c":"United States","y":37.8902,"x":-84.5669},{"n":"Amatenango de la Frontera","c":"Mexico","y":15.4333,"x":-92.1167},{"n":"Goleta","c":"United States","y":34.436,"x":-119.8596},{"n":"Opelika","c":"United States","y":32.6612,"x":-85.3769},{"n":"Layla","c":"Saudi Arabia","y":22.2833,"x":46.7333},{"n":"Newburgh","c":"United States","y":41.553,"x":-74.0599},{"n":"Alma","c":"Canada","y":48.55,"x":-71.65},{"n":"Algonquin","c":"United States","y":42.1629,"x":-88.3159},{"n":"Sacele","c":"Romania","y":45.6175,"x":25.6878},{"n":"Marrero","c":"United States","y":29.8871,"x":-90.1127},{"n":"Radcliffe","c":"United Kingdom","y":53.5615,"x":-2.3268},{"n":"Arcos de la Frontera","c":"Spain","y":36.75,"x":-5.8},{"n":"Cranberry","c":"United States","y":40.7104,"x":-80.1059},{"n":"Gragnano","c":"Italy","y":40.6957,"x":14.5154},{"n":"Aiken","c":"United States","y":33.531,"x":-81.7268},{"n":"Pisek","c":"Czechia","y":49.3089,"x":14.1475},{"n":"Unterschleissheim","c":"Germany","y":48.2833,"x":11.5667},{"n":"North Andover","c":"United States","y":42.6713,"x":-71.0865},{"n":"Lawrenceville","c":"United States","y":33.9523,"x":-83.9931},{"n":"Lohmar","c":"Germany","y":50.8415,"x":7.2166},{"n":"Winter Park","c":"United States","y":28.5987,"x":-81.3438},{"n":"Alcazar de San Juan","c":"Spain","y":39.4056,"x":-3.2056},{"n":"Novoyavorovskoye","c":"Ukraine","y":49.9311,"x":23.5731},{"n":"Alegre","c":"Brazil","y":-20.709,"x":-41.5194},{"n":"Artemovskiy","c":"Russia","y":57.3667,"x":61.8667},{"n":"Lake Magdalene","c":"United States","y":28.0875,"x":-82.4791},{"n":"Carshalton","c":"United Kingdom","y":51.3652,"x":-0.1676},{"n":"Arraial do Cabo","c":"Brazil","y":-22.9658,"x":-42.0278},{"n":"Gloria do Goita","c":"Brazil","y":-7.9992,"x":-35.2911},{"n":"Hajduboszormeny","c":"Hungary","y":47.6667,"x":21.5167},{"n":"Granger","c":"United States","y":41.7373,"x":-86.135},{"n":"Qahderijan","c":"Iran","y":32.5767,"x":51.455},{"n":"Guaira","c":"Brazil","y":-24.08,"x":-54.2558},{"n":"Tekeli","c":"Kazakhstan","y":44.8333,"x":78.8167},{"n":"Wooster","c":"United States","y":40.8171,"x":-81.9335},{"n":"Catmon","c":"Philippines","y":10.6667,"x":123.95},{"n":"Synelnykove","c":"Ukraine","y":48.3178,"x":35.5119},{"n":"Treviglio","c":"Italy","y":45.5214,"x":9.5928},{"n":"Amaga","c":"Colombia","y":6.0383,"x":-75.7028},{"n":"Fountain","c":"United States","y":38.6886,"x":-104.6829},{"n":"Sandanski","c":"Bulgaria","y":41.5589,"x":23.2744},{"n":"Orangeville","c":"Canada","y":43.9167,"x":-80.1167},{"n":"Simbahan","c":"Philippines","y":6.3,"x":120.5833},{"n":"Emmen","c":"Switzerland","y":47.0772,"x":8.3},{"n":"Nanwucun","c":"China","y":37.3885,"x":115.5529},{"n":"Pau dos Ferros","c":"Brazil","y":-6.1108,"x":-38.2089},{"n":"Papa","c":"Hungary","y":47.3306,"x":17.4658},{"n":"Fort Erie","c":"Canada","y":42.9167,"x":-79.0167},{"n":"Puerto de la Cruz","c":"Spain","y":28.4167,"x":-16.55},{"n":"Xinzhaidian","c":"China","y":37.8136,"x":114.7144},{"n":"Polillo","c":"Philippines","y":14.7167,"x":121.95},{"n":"Juquitiba","c":"Brazil","y":-23.9319,"x":-47.0686},{"n":"Duanzhuang","c":"China","y":36.5796,"x":111.7577},{"n":"Torrijos","c":"Philippines","y":13.3167,"x":122.0833},{"n":"Brooklyn Center","c":"United States","y":45.0681,"x":-93.3162},{"n":"Mallig","c":"Philippines","y":17.2,"x":121.6167},{"n":"Mlawa","c":"Poland","y":53.1167,"x":20.3667},{"n":"Barreirinha","c":"Brazil","y":-2.8025,"x":-57.0686},{"n":"Banamba","c":"Mali","y":13.55,"x":-7.45},{"n":"Draveil","c":"France","y":48.6852,"x":2.408},{"n":"Thung Song","c":"Thailand","y":8.1669,"x":99.6745},{"n":"South Kingstown","c":"United States","y":41.4457,"x":-71.544},{"n":"Piedra Blanca","c":"Dominican Republic","y":18.83,"x":-70.3},{"n":"Victoria","c":"Argentina","y":-32.6167,"x":-60.1667},{"n":"Kerrville","c":"United States","y":30.0398,"x":-99.132},{"n":"Wuyuan","c":"China","y":41.0896,"x":108.2722},{"n":"Rapallo","c":"Italy","y":44.35,"x":9.2333},{"n":"Vienne","c":"France","y":45.5242,"x":4.8781},{"n":"Barstow","c":"United States","y":34.8661,"x":-117.0472},{"n":"Ross","c":"United States","y":40.5256,"x":-80.0243},{"n":"Ennepetal","c":"Germany","y":51.3021,"x":7.3425},{"n":"Motomiya","c":"Japan","y":37.5133,"x":140.3939},{"n":"Ypacarai","c":"Paraguay","y":-25.41,"x":-57.28},{"n":"Mehdya","c":"Morocco","y":34.2557,"x":-6.6745},{"n":"Chimakurti","c":"India","y":15.5819,"x":79.868},{"n":"Riesa","c":"Germany","y":51.3081,"x":13.2939},{"n":"Mount Gambier","c":"Australia","y":-37.8294,"x":140.7828},{"n":"Blagodarnyy","c":"Russia","y":45.1029,"x":43.4252},{"n":"Leusden","c":"Netherlands","y":52.1331,"x":5.4297},{"n":"Rio Preto da Eva","c":"Brazil","y":-2.6989,"x":-59.7},{"n":"Joacaba","c":"Brazil","y":-27.1778,"x":-51.505},{"n":"G'ijduvon Shahri","c":"Uzbekistan","y":40.1,"x":64.6667},{"n":"Andernach","c":"Germany","y":50.4397,"x":7.4017},{"n":"Villa Donato Guerra","c":"Mexico","y":19.3083,"x":-100.1422},{"n":"Ob","c":"Russia","y":54.9917,"x":82.7125},{"n":"Bela Vista de Goias","c":"Brazil","y":-16.9728,"x":-48.9528},{"n":"Fetesti","c":"Romania","y":44.415,"x":27.8236},{"n":"Sevenoaks","c":"United Kingdom","y":51.2781,"x":0.1874},{"n":"Mataas Na Kahoy","c":"Philippines","y":13.9667,"x":121.0833},{"n":"Osterholz-Scharmbeck","c":"Germany","y":53.2269,"x":8.7947},{"n":"Sibagat","c":"Philippines","y":8.8219,"x":125.6938},{"n":"Tskhinvali","c":"Georgia","y":42.2257,"x":43.9701},{"n":"Sibutu","c":"Philippines","y":4.85,"x":119.4667},{"n":"Crown Point","c":"United States","y":41.4141,"x":-87.3457},{"n":"Talusan","c":"Philippines","y":7.4263,"x":122.8084},{"n":"Slavgorod","c":"Russia","y":53,"x":78.65},{"n":"Windsor","c":"United States","y":40.4693,"x":-104.9213},{"n":"Korinthos","c":"Greece","y":37.9333,"x":22.9333},{"n":"Itaporanga d'Ajuda","c":"Brazil","y":-10.9978,"x":-37.3108},{"n":"Lakeside","c":"United States","y":30.1356,"x":-81.7674},{"n":"Taunusstein","c":"Germany","y":50.1435,"x":8.1606},{"n":"Deptford","c":"United States","y":39.8157,"x":-75.1181},{"n":"Sigma","c":"Philippines","y":11.4214,"x":122.6662},{"n":"North Huntingdon","c":"United States","y":40.3293,"x":-79.7335},{"n":"Ust'-Dzheguta","c":"Russia","y":44.0928,"x":41.9822},{"n":"Damulog","c":"Philippines","y":7.4833,"x":124.9333},{"n":"Lalla Mimouna","c":"Morocco","y":34.85,"x":-6.0669},{"n":"Horki","c":"Belarus","y":54.2833,"x":30.9833},{"n":"Salou","c":"Spain","y":41.0796,"x":1.1316},{"n":"Hirakawacho","c":"Japan","y":40.5842,"x":140.5664},{"n":"Togitsu","c":"Japan","y":32.8333,"x":129.85},{"n":"Iguape","c":"Brazil","y":-24.7081,"x":-47.5553},{"n":"Telimele","c":"Guinea","y":10.905,"x":-13.043},{"n":"Huanta","c":"Peru","y":-12.9397,"x":-74.2475},{"n":"Gurnee","c":"United States","y":42.3708,"x":-87.9392},{"n":"Carlos Barbosa","c":"Brazil","y":-29.2978,"x":-51.5039},{"n":"Orangeburg","c":"United States","y":33.4928,"x":-80.867},{"n":"Mont-de-Marsan","c":"France","y":43.89,"x":-0.5},{"n":"Buguey","c":"Philippines","y":18.2882,"x":121.8331},{"n":"Carmo do Paranaiba","c":"Brazil","y":-19.0008,"x":-46.3158},{"n":"Galdacano","c":"Spain","y":43.2306,"x":-2.8458},{"n":"Tactic","c":"Guatemala","y":15.3167,"x":-90.3511},{"n":"Vinces","c":"Ecuador","y":-1.55,"x":-79.7333},{"n":"Shetang","c":"China","y":34.5568,"x":105.9722},{"n":"Holladay","c":"United States","y":40.6599,"x":-111.8226},{"n":"Fuquay-Varina","c":"United States","y":35.5958,"x":-78.7794},{"n":"Chimichagua","c":"Colombia","y":9.2578,"x":-73.8133},{"n":"Valdepenas","c":"Spain","y":38.7667,"x":-3.4},{"n":"Chamblee","c":"United States","y":33.8842,"x":-84.3008},{"n":"Kondopoga","c":"Russia","y":62.2,"x":34.2667},{"n":"Comiso","c":"Italy","y":36.95,"x":14.6},{"n":"Dimataling","c":"Philippines","y":7.5333,"x":123.3667},{"n":"Carney","c":"United States","y":39.405,"x":-76.5236},{"n":"Xunjiansi","c":"China","y":23.962,"x":103.1925},{"n":"Peru","c":"United States","y":41.3484,"x":-89.137},{"n":"Kibiti","c":"Tanzania","y":-7.7296,"x":38.95},{"n":"Decines-Charpieu","c":"France","y":45.7694,"x":4.9594},{"n":"Cihuatlan","c":"Mexico","y":19.25,"x":-104.5667},{"n":"Tsuruno","c":"Japan","y":40.8089,"x":140.38},{"n":"Sergio Osmena Sr","c":"Philippines","y":8.2988,"x":123.5036},{"n":"Rushden","c":"United Kingdom","y":52.288,"x":-0.601},{"n":"Temse","c":"Belgium","y":51.1261,"x":4.2133},{"n":"Kombissiri","c":"Burkina Faso","y":12.0667,"x":-1.3333},{"n":"Augustow","c":"Poland","y":53.85,"x":22.9667},{"n":"Upper Merion","c":"United States","y":40.0902,"x":-75.3791},{"n":"Gorodets","c":"Russia","y":56.6503,"x":43.4703},{"n":"Matsubushi","c":"Japan","y":35.9258,"x":139.8153},{"n":"Trutnov","c":"Czechia","y":50.561,"x":15.9128},{"n":"North Tonawanda","c":"United States","y":43.0457,"x":-78.8659},{"n":"Talayan","c":"Philippines","y":6.9844,"x":124.3564},{"n":"Sue","c":"Japan","y":33.5872,"x":130.5072},{"n":"Gaggenau","c":"Germany","y":48.8039,"x":8.3194},{"n":"Newington","c":"United States","y":41.687,"x":-72.7308},{"n":"Catole do Rocha","c":"Brazil","y":-6.3439,"x":-37.7469},{"n":"Sitges","c":"Spain","y":41.2339,"x":1.8042},{"n":"Bergen","c":"Netherlands","y":52.6703,"x":4.7054},{"n":"Los Gatos","c":"United States","y":37.2303,"x":-121.956},{"n":"Mozhaysk","c":"Russia","y":55.5,"x":36.0333},{"n":"Shangpa","c":"China","y":26.9052,"x":98.8679},{"n":"Moanda","c":"Gabon","y":-1.5655,"x":13.2},{"n":"Bad Hersfeld","c":"Germany","y":50.8683,"x":9.7067},{"n":"Saint-Etienne-du-Rouvray","c":"France","y":49.3786,"x":1.105},{"n":"Penaranda","c":"Philippines","y":15.35,"x":121},{"n":"South Lake Tahoe","c":"United States","y":38.9393,"x":-119.9828},{"n":"LaSalle","c":"Canada","y":42.2167,"x":-83.0667},{"n":"Friedberg","c":"Germany","y":48.35,"x":10.9833},{"n":"Merida","c":"Philippines","y":10.9098,"x":124.5376},{"n":"Caramoran","c":"Philippines","y":13.9833,"x":124.1333},{"n":"Northfleet","c":"United Kingdom","y":51.44,"x":0.34},{"n":"Saratoga","c":"United States","y":37.2684,"x":-122.0263},{"n":"Hinunangan","c":"Philippines","y":10.4,"x":125.2},{"n":"Kalgoorlie","c":"Australia","y":-30.7489,"x":121.4658},{"n":"Tizi Gheniff","c":"Algeria","y":36.5891,"x":3.7678},{"n":"Paraipaba","c":"Brazil","y":-3.4389,"x":-39.1478},{"n":"Bra","c":"Italy","y":44.7,"x":7.85},{"n":"Planadas","c":"Colombia","y":3.1964,"x":-75.6444},{"n":"Gamu","c":"Philippines","y":17.05,"x":121.8333},{"n":"Brodnica","c":"Poland","y":53.25,"x":19.4},{"n":"Tabio","c":"Colombia","y":4.9158,"x":-74.0983},{"n":"Lismore","c":"Australia","y":-28.8167,"x":153.2833},{"n":"L'Arbaa Nait Irathen","c":"Algeria","y":36.6367,"x":4.2067},{"n":"Puente-Genil","c":"Spain","y":37.3833,"x":-4.7667},{"n":"Guotang","c":"China","y":23.8334,"x":115.9286},{"n":"Sainte-Julie","c":"Canada","y":45.5833,"x":-73.3333},{"n":"Shibancun","c":"China","y":22.1539,"x":110.7082},{"n":"Tacuba","c":"El Salvador","y":13.9,"x":-89.9333},{"n":"Los Altos","c":"United States","y":37.3685,"x":-122.0966},{"n":"Pervomaiskyi","c":"Ukraine","y":49.3869,"x":36.2142},{"n":"Ballwin","c":"United States","y":38.5951,"x":-90.55},{"n":"Barira","c":"Philippines","y":7.4833,"x":124.3},{"n":"Atascadero","c":"United States","y":35.4827,"x":-120.6858},{"n":"Barra Velha","c":"Brazil","y":-26.6319,"x":-48.685},{"n":"Selargius","c":"Italy","y":39.2537,"x":9.1606},{"n":"Alubijid","c":"Philippines","y":8.5714,"x":124.4751},{"n":"North Royalton","c":"United States","y":41.3138,"x":-81.7452},{"n":"Budaors","c":"Hungary","y":47.4606,"x":18.9578},{"n":"Villa Angela","c":"Argentina","y":-27.5833,"x":-60.7167},{"n":"Schwedt (Oder)","c":"Germany","y":53.0631,"x":14.2831},{"n":"Heesch","c":"Netherlands","y":51.7314,"x":5.53},{"n":"Saalfeld","c":"Germany","y":50.6506,"x":11.3542},{"n":"Meschede","c":"Germany","y":51.3503,"x":8.2836},{"n":"Somerset","c":"United States","y":37.0815,"x":-84.6091},{"n":"Villa Regina","c":"Argentina","y":-39.1,"x":-67.0667},{"n":"Werve","c":"Germany","y":51.6667,"x":7.6167},{"n":"Siraha","c":"Nepal","y":26.6528,"x":86.2069},{"n":"Neuburg","c":"Germany","y":48.7333,"x":11.1833},{"n":"Campo Alegre de Lourdes","c":"Brazil","y":-9.5158,"x":-43.0108},{"n":"Canosa di Puglia","c":"Italy","y":41.2167,"x":16.0667},{"n":"Degeh Bur","c":"Ethiopia","y":8.2167,"x":43.5667},{"n":"Casma","c":"Peru","y":-9.4742,"x":-78.3106},{"n":"Devarkonda","c":"India","y":16.7,"x":78.9333},{"n":"Nan'ao","c":"China","y":38.5162,"x":114.5648},{"n":"Merzig","c":"Germany","y":49.4471,"x":6.6312},{"n":"Asipovichy","c":"Belarus","y":53.3,"x":28.65},{"n":"Bourem Guindou","c":"Mali","y":16.9004,"x":-0.35},{"n":"Kelkheim (Taunus)","c":"Germany","y":50.138,"x":8.4525},{"n":"Evaz","c":"Iran","y":27.76,"x":54.0072},{"n":"Pantabangan","c":"Philippines","y":15.8167,"x":121.15},{"n":"Mavinga","c":"Angola","y":-15.7895,"x":20.36},{"n":"Leduc","c":"Canada","y":53.2594,"x":-113.5492},{"n":"Seguin","c":"United States","y":29.5889,"x":-97.9671},{"n":"Arlon","c":"Belgium","y":49.6836,"x":5.8167},{"n":"Santana do Acarau","c":"Brazil","y":-3.4608,"x":-40.2119},{"n":"Waltrop","c":"Germany","y":51.6236,"x":7.3972},{"n":"Tonisvorst","c":"Germany","y":51.3208,"x":6.4931},{"n":"Hampden","c":"United States","y":40.2602,"x":-76.9809},{"n":"Carinhanha","c":"Brazil","y":-14.305,"x":-43.765},{"n":"Svendborg","c":"Denmark","y":55.0704,"x":10.6167},{"n":"Giannitsa","c":"Greece","y":40.7962,"x":22.4145},{"n":"Arari","c":"Brazil","y":-3.4539,"x":-44.78},{"n":"Fortuna Foothills","c":"United States","y":32.6616,"x":-114.3973},{"n":"Fresno","c":"Colombia","y":5.1536,"x":-75.0369},{"n":"Cambui","c":"Brazil","y":-22.6119,"x":-46.0578},{"n":"Schwelm","c":"Germany","y":51.2904,"x":7.2972},{"n":"Milford Mill","c":"United States","y":39.3444,"x":-76.7668},{"n":"Cannock","c":"United Kingdom","y":52.691,"x":-2.027},{"n":"Casa Branca","c":"Brazil","y":-21.7739,"x":-47.0858},{"n":"San Rafael","c":"Mexico","y":20.1889,"x":-96.8658},{"n":"Souk et Tnine Jorf el Mellah","c":"Morocco","y":34.4833,"x":-5.5169},{"n":"Calintaan","c":"Philippines","y":12.5756,"x":120.9428},{"n":"Stockbridge","c":"United States","y":33.5253,"x":-84.2294},{"n":"Tameslouht","c":"Morocco","y":31.5,"x":-8.1},{"n":"East Liverpool","c":"United States","y":40.6333,"x":-80.5677},{"n":"Triunfo","c":"Brazil","y":-29.9428,"x":-51.7178},{"n":"Leonding","c":"Austria","y":48.2792,"x":14.2528},{"n":"Aral","c":"Kazakhstan","y":46.8,"x":61.6667},{"n":"Madison Heights","c":"United States","y":42.5073,"x":-83.1034},{"n":"Gyongyos","c":"Hungary","y":47.7833,"x":19.9333},{"n":"Vaihingen an der Enz","c":"Germany","y":48.9328,"x":8.9564},{"n":"Kinik","c":"Turkey","y":39.0872,"x":27.3833},{"n":"Capim","c":"Brazil","y":-1.675,"x":-47.775},{"n":"Zhangguzhuang","c":"China","y":38.0584,"x":115.2891},{"n":"Oosterend","c":"Netherlands","y":53.0036,"x":6.0664},{"n":"Kabalo","c":"Congo (Kinshasa)","y":-6.05,"x":26.91},{"n":"Prainha","c":"Brazil","y":-1.8,"x":-53.48},{"n":"Purificacion","c":"Colombia","y":3.8567,"x":-74.9325},{"n":"Livingston","c":"United States","y":40.7855,"x":-74.3291},{"n":"Mahon","c":"Spain","y":39.8894,"x":4.2642},{"n":"Williston","c":"United States","y":48.1814,"x":-103.6364},{"n":"Villa Gesell","c":"Argentina","y":-37.2556,"x":-56.9681},{"n":"Labasa","c":"Fiji","y":-16.4333,"x":179.3667},{"n":"Askoy","c":"Norway","y":60.4667,"x":5.15},{"n":"Dedovsk","c":"Russia","y":55.8667,"x":37.1333},{"n":"Heywood","c":"United Kingdom","y":53.59,"x":-2.219},{"n":"Shiyeli","c":"Kazakhstan","y":44.1689,"x":66.7389},{"n":"Matanog","c":"Philippines","y":7.4667,"x":124.25},{"n":"Bretten","c":"Germany","y":49.0364,"x":8.7061},{"n":"Crevillente","c":"Spain","y":38.2486,"x":-0.8089},{"n":"Dipaculao","c":"Philippines","y":15.9833,"x":121.6333},{"n":"Redondela","c":"Spain","y":42.2833,"x":-8.6167},{"n":"Pontedera","c":"Italy","y":43.6625,"x":10.6328},{"n":"Mandali","c":"Iraq","y":33.7436,"x":45.5464},{"n":"Misilmeri","c":"Italy","y":38.0333,"x":13.45},{"n":"Eagle","c":"United States","y":43.7223,"x":-116.3862},{"n":"Igarapava","c":"Brazil","y":-20.0383,"x":-47.7469},{"n":"Parabiago","c":"Italy","y":45.5583,"x":8.9477},{"n":"Dzyarzhynsk","c":"Belarus","y":53.6833,"x":27.1333},{"n":"Flandes","c":"Colombia","y":4.2844,"x":-74.8142},{"n":"Alushta","c":"Ukraine","y":44.6672,"x":34.3978},{"n":"Benito Soliven","c":"Philippines","y":16.9833,"x":121.95},{"n":"Rancharia","c":"Brazil","y":-22.2289,"x":-50.8928},{"n":"Brecht","c":"Belgium","y":51.3494,"x":4.6394},{"n":"Spinea","c":"Italy","y":45.4931,"x":12.1606},{"n":"Alquizar","c":"Cuba","y":22.8067,"x":-82.5828},{"n":"Campo Magro","c":"Brazil","y":-25.3689,"x":-49.4508},{"n":"Candijay","c":"Philippines","y":9.818,"x":124.496},{"n":"Mangdongshan","c":"China","y":24.1169,"x":98.3085},{"n":"Maryville","c":"United States","y":35.7468,"x":-83.9789},{"n":"Atbasar","c":"Kazakhstan","y":51.8,"x":68.3667},{"n":"Dumalag","c":"Philippines","y":11.3,"x":122.6167},{"n":"Mashan","c":"China","y":37.0017,"x":111.8933},{"n":"Rietberg","c":"Germany","y":51.8,"x":8.4333},{"n":"Brunssum","c":"Netherlands","y":50.95,"x":5.9667},{"n":"General Nakar","c":"Philippines","y":14.7631,"x":121.635},{"n":"Piraju","c":"Brazil","y":-23.1936,"x":-49.3839},{"n":"Asha","c":"Russia","y":55,"x":57.25},{"n":"Bosanska Krupa","c":"Bosnia And Herzegovina","y":44.8833,"x":16.15},{"n":"Anajas","c":"Brazil","y":-0.9869,"x":-49.94},{"n":"Walnut","c":"United States","y":34.0334,"x":-117.8593},{"n":"Toksun","c":"China","y":42.7918,"x":88.6536},{"n":"Shuangtian","c":"China","y":22.864,"x":114.5443},{"n":"Lianga","c":"Philippines","y":8.633,"x":126.0932},{"n":"North Cowichan","c":"Canada","y":48.8236,"x":-123.7192},{"n":"Mamaroneck","c":"United States","y":40.9443,"x":-73.7487},{"n":"Rendsburg","c":"Germany","y":54.3044,"x":9.6644},{"n":"Garden City","c":"United States","y":37.9754,"x":-100.8529},{"n":"Gustrow","c":"Germany","y":53.7939,"x":12.1764},{"n":"Landsberg","c":"Germany","y":48.0528,"x":10.8689},{"n":"Rota","c":"Spain","y":36.6167,"x":-6.35},{"n":"Rhennouch","c":"Tunisia","y":33.9397,"x":10.065},{"n":"Santa Fe","c":"Philippines","y":11.15,"x":123.8},{"n":"North Chicago","c":"United States","y":42.3172,"x":-87.8596},{"n":"Oelde","c":"Germany","y":51.8258,"x":8.1436},{"n":"Yangshuling","c":"China","y":40.9942,"x":118.8791},{"n":"Aberdeen","c":"United States","y":46.9757,"x":-123.8094},{"n":"Konigsbrunn","c":"Germany","y":48.2689,"x":10.8908},{"n":"Winona","c":"United States","y":44.0505,"x":-91.6684},{"n":"Rotterdam","c":"United States","y":42.8133,"x":-74.0129},{"n":"Ivisan","c":"Philippines","y":11.5217,"x":122.6908},{"n":"Drexel Heights","c":"United States","y":32.1457,"x":-111.0478},{"n":"Ukiah","c":"United States","y":39.1463,"x":-123.2105},{"n":"Atwater","c":"United States","y":37.3543,"x":-120.5981},{"n":"Bourgoin-Jallieu","c":"France","y":45.5861,"x":5.2736},{"n":"Maracana","c":"Brazil","y":-0.765,"x":-47.45},{"n":"Ja`ar","c":"Yemen","y":13.2167,"x":45.3},{"n":"Nazare","c":"Brazil","y":-13.035,"x":-39.0139},{"n":"Hermiston","c":"United States","y":45.8323,"x":-119.2858},{"n":"Orchard Park","c":"United States","y":42.7517,"x":-78.7455},{"n":"Riihimaki","c":"Finland","y":60.7333,"x":24.7667},{"n":"Orlova","c":"Czechia","y":49.8452,"x":18.4302},{"n":"Sint-Michielsgestel","c":"Netherlands","y":51.6433,"x":5.3586},{"n":"Fritissa","c":"Morocco","y":33.6167,"x":-3.55},{"n":"Culemborg","c":"Netherlands","y":51.95,"x":5.2333},{"n":"Desenzano del Garda","c":"Italy","y":45.4689,"x":10.535},{"n":"Tredyffrin","c":"United States","y":40.0663,"x":-75.454},{"n":"Xiaobazi","c":"China","y":27.3401,"x":105.502},{"n":"Campello","c":"Spain","y":38.4275,"x":-0.4011},{"n":"Ans","c":"Belgium","y":50.6625,"x":5.52},{"n":"Likino-Dulevo","c":"Russia","y":55.7,"x":38.95},{"n":"Timizart","c":"Algeria","y":36.8,"x":4.2667},{"n":"Tandubas","c":"Philippines","y":5.134,"x":120.3461},{"n":"Poggibonsi","c":"Italy","y":43.4667,"x":11.15},{"n":"Rosrath","c":"Germany","y":50.9,"x":7.1833},{"n":"Ibimirim","c":"Brazil","y":-8.5408,"x":-37.6903},{"n":"Kavaje","c":"Albania","y":41.1833,"x":19.55},{"n":"Gyula","c":"Hungary","y":46.65,"x":21.2828},{"n":"Kiskunfelegyhaza","c":"Hungary","y":46.705,"x":19.85},{"n":"Pittsford","c":"United States","y":43.0732,"x":-77.5268},{"n":"Capim Grosso","c":"Brazil","y":-11.3808,"x":-40.0128},{"n":"Iguaba Grande","c":"Brazil","y":-22.8389,"x":-42.2289},{"n":"Kostomuksha","c":"Russia","y":64.5833,"x":30.6},{"n":"Ra's al `Ayn","c":"Syria","y":36.8503,"x":40.0706},{"n":"Sopo","c":"Colombia","y":4.9081,"x":-73.9403},{"n":"Benhao","c":"China","y":18.6151,"x":109.9308},{"n":"Central","c":"United States","y":30.5593,"x":-91.0369},{"n":"Quivican","c":"Cuba","y":22.8247,"x":-82.3558},{"n":"Suran","c":"Syria","y":35.2897,"x":36.7433},{"n":"Masiu","c":"Philippines","y":7.8167,"x":124.3167},{"n":"East Lake-Orient Park","c":"United States","y":27.9971,"x":-82.3653},{"n":"Winnenden","c":"Germany","y":48.8764,"x":9.3978},{"n":"Bogdanovich","c":"Russia","y":56.7833,"x":62.05},{"n":"Matouying","c":"China","y":39.2922,"x":118.8143},{"n":"Hattersheim","c":"Germany","y":50.0697,"x":8.4862},{"n":"Novaya Usman'","c":"Russia","y":51.6439,"x":39.4103},{"n":"Chicago Heights","c":"United States","y":41.5101,"x":-87.6345},{"n":"Boxmeer","c":"Netherlands","y":51.6483,"x":5.9444},{"n":"Divnogorsk","c":"Russia","y":55.95,"x":92.3833},{"n":"Mondragone","c":"Italy","y":41.1,"x":13.8833},{"n":"Orange","c":"France","y":44.1383,"x":4.8097},{"n":"Johnston","c":"United States","y":41.8274,"x":-71.5202},{"n":"Northeim","c":"Germany","y":51.7067,"x":10.0011},{"n":"Khmilnyk","c":"Ukraine","y":49.55,"x":27.9667},{"n":"Limoeiro do Ajuru","c":"Brazil","y":-1.895,"x":-49.3808},{"n":"Capitan Bermudez","c":"Argentina","y":-32.8167,"x":-60.7167},{"n":"Namaacha","c":"Mozambique","y":-25.9667,"x":32.0333},{"n":"East Fishkill","c":"United States","y":41.5567,"x":-73.7824},{"n":"Tubao","c":"Philippines","y":16.35,"x":120.4167},{"n":"Buhl","c":"Germany","y":48.6953,"x":8.135},{"n":"Glenville","c":"United States","y":42.8869,"x":-73.9925},{"n":"Dasol","c":"Philippines","y":15.9896,"x":119.8805},{"n":"Anadia","c":"Portugal","y":40.4333,"x":-8.4333},{"n":"Truskavets","c":"Ukraine","y":49.2806,"x":23.505},{"n":"Duzhuang","c":"China","y":40.0121,"x":119.5262},{"n":"Carmagnola","c":"Italy","y":44.85,"x":7.7167},{"n":"Monitos","c":"Colombia","y":9.2461,"x":-76.1286},{"n":"Canada de Gomez","c":"Argentina","y":-32.8167,"x":-61.4},{"n":"Shiqiao","c":"China","y":34.1418,"x":105.1214},{"n":"Chortkiv","c":"Ukraine","y":49.0167,"x":25.8},{"n":"Balindong","c":"Philippines","y":7.9167,"x":124.2},{"n":"Palpa","c":"Nepal","y":27.8667,"x":83.55},{"n":"Cyangugu","c":"Rwanda","y":-2.4833,"x":28.8967},{"n":"Tabuleiro do Norte","c":"Brazil","y":-5.2481,"x":-38.13},{"n":"Prado","c":"Brazil","y":-17.3408,"x":-39.2208},{"n":"Vernon","c":"United States","y":41.8364,"x":-72.4606},{"n":"Tudela","c":"Philippines","y":8.2472,"x":123.8424},{"n":"Newberg","c":"United States","y":45.3075,"x":-122.9601},{"n":"Viacha","c":"Bolivia","y":-16.6333,"x":-68.2833},{"n":"Aipe","c":"Colombia","y":3.2219,"x":-75.2375},{"n":"Voorhees","c":"United States","y":39.845,"x":-74.955},{"n":"Cottica","c":"Suriname","y":3.8547,"x":-54.2289},{"n":"Santa Quiteria do Maranhao","c":"Brazil","y":-3.5158,"x":-42.5469},{"n":"Timbiras","c":"Brazil","y":-4.255,"x":-43.9408},{"n":"Ciying","c":"China","y":25.3595,"x":103.9143},{"n":"Ornskoldsvik","c":"Sweden","y":63.294,"x":18.7122},{"n":"Taquaritinga do Norte","c":"Brazil","y":-7.9001,"x":-36.0502},{"n":"Lewes","c":"United States","y":38.7777,"x":-75.1448},{"n":"Agde","c":"France","y":43.3108,"x":3.4758},{"n":"North Attleborough","c":"United States","y":41.9699,"x":-71.3345},{"n":"Aleysk","c":"Russia","y":52.5,"x":82.7833},{"n":"Itubera","c":"Brazil","y":-13.7319,"x":-39.1489},{"n":"Sant'Anastasia","c":"Italy","y":40.8667,"x":14.4},{"n":"Balete","c":"Philippines","y":11.55,"x":122.3833},{"n":"Gubkinskiy","c":"Russia","y":64.4333,"x":76.5},{"n":"Primero de Enero","c":"Cuba","y":21.9453,"x":-78.4189},{"n":"La Concordia","c":"Ecuador","y":0.0069,"x":-79.3958},{"n":"San Cristobal","c":"Cuba","y":22.7169,"x":-83.0511},{"n":"Gonglang","c":"China","y":24.8391,"x":100.3122},{"n":"Cheshire","c":"United States","y":41.5114,"x":-72.9036},{"n":"Beverley","c":"United Kingdom","y":53.845,"x":-0.427},{"n":"Extremoz","c":"Brazil","y":-5.7058,"x":-35.3069},{"n":"Crofton","c":"United States","y":39.0144,"x":-76.68},{"n":"Vinaroz","c":"Spain","y":40.4686,"x":0.4736},{"n":"Springe","c":"Germany","y":52.2167,"x":9.55},{"n":"Samokov","c":"Bulgaria","y":42.3381,"x":23.56},{"n":"Madinat Zayid","c":"United Arab Emirates","y":23.6522,"x":53.6536},{"n":"Ban Phai","c":"Thailand","y":16.073,"x":102.7362},{"n":"Chambly","c":"Canada","y":45.4311,"x":-73.2873},{"n":"Pasuquin","c":"Philippines","y":18.3333,"x":120.6167},{"n":"Winterswijk","c":"Netherlands","y":51.9667,"x":6.7167},{"n":"Old Harbour","c":"Jamaica","y":17.9414,"x":-77.109},{"n":"Laplace","c":"United States","y":30.0731,"x":-90.4758},{"n":"Nouna","c":"Burkina Faso","y":12.7329,"x":-3.8622},{"n":"Benavente","c":"Portugal","y":38.9833,"x":-8.8167},{"n":"Mirandopolis","c":"Brazil","y":-21.1336,"x":-51.1017},{"n":"Itaperucu","c":"Brazil","y":-25.22,"x":-49.3478},{"n":"Goio-Ere","c":"Brazil","y":-24.185,"x":-53.0278},{"n":"Carpentras","c":"France","y":44.0558,"x":5.0489},{"n":"Schwandorf","c":"Germany","y":49.3236,"x":12.0993},{"n":"Alatri","c":"Italy","y":41.7264,"x":13.3422},{"n":"Gagarin","c":"Russia","y":55.55,"x":35},{"n":"Tocache Nuevo","c":"Peru","y":-8.1886,"x":-76.5103},{"n":"San Javier","c":"Chile","y":-35.5924,"x":-71.7353},{"n":"Cervia","c":"Italy","y":44.25,"x":12.3667},{"n":"New Panamao","c":"Philippines","y":5.9667,"x":121.2},{"n":"SeaTac","c":"United States","y":47.4444,"x":-122.2986},{"n":"Jauja","c":"Peru","y":-11.775,"x":-75.5},{"n":"Staraya Russa","c":"Russia","y":57.9833,"x":31.35},{"n":"Tanglou","c":"China","y":22.1888,"x":110.871},{"n":"Langedijk","c":"Netherlands","y":52.6936,"x":4.7944},{"n":"Cajati","c":"Brazil","y":-24.7361,"x":-48.1228},{"n":"Dongwang","c":"China","y":38.3242,"x":114.8869},{"n":"Nenton","c":"Guatemala","y":15.8012,"x":-91.7552},{"n":"Salay","c":"Philippines","y":8.8667,"x":124.8},{"n":"Lavezares","c":"Philippines","y":12.5333,"x":124.3333},{"n":"Hoxter","c":"Germany","y":51.7667,"x":9.3667},{"n":"Xaxim","c":"Brazil","y":-26.9619,"x":-52.535},{"n":"Lubon","c":"Poland","y":52.3333,"x":16.8833},{"n":"La Calera","c":"Colombia","y":4.7197,"x":-73.97},{"n":"Caetes","c":"Brazil","y":-8.7728,"x":-36.6228},{"n":"Raytown","c":"United States","y":38.9944,"x":-94.4641},{"n":"Paragould","c":"United States","y":36.0555,"x":-90.5149},{"n":"Rosa Zarate","c":"Ecuador","y":0.3272,"x":-79.4689},{"n":"Passira","c":"Brazil","y":-7.995,"x":-35.5808},{"n":"Graham","c":"United States","y":47.0407,"x":-122.2756},{"n":"Vihti","c":"Finland","y":60.4167,"x":24.3331},{"n":"Anilao","c":"Philippines","y":10.9785,"x":122.7531},{"n":"Hanawa","c":"Japan","y":40.2158,"x":140.7883},{"n":"Krotoszyn","c":"Poland","y":51.697,"x":17.4357},{"n":"Yemanzhelinsk","c":"Russia","y":54.75,"x":61.3167},{"n":"Candelaria","c":"Spain","y":28.3547,"x":-16.371},{"n":"Southgate","c":"United States","y":42.2047,"x":-83.2057},{"n":"Caicedonia","c":"Colombia","y":4.3347,"x":-75.8281},{"n":"Calafell","c":"Spain","y":41.2004,"x":1.5693},{"n":"Meissen","c":"Germany","y":51.1636,"x":13.4775},{"n":"Barabinsk","c":"Russia","y":55.35,"x":78.35},{"n":"Pucon","c":"Chile","y":-39.2667,"x":-71.9667},{"n":"West Warwick","c":"United States","y":41.6986,"x":-71.5156},{"n":"Pulupandan","c":"Philippines","y":10.5167,"x":122.8},{"n":"Niles","c":"United States","y":42.0278,"x":-87.8099},{"n":"Fernandina Beach","c":"United States","y":30.6579,"x":-81.4504},{"n":"Siraway","c":"Philippines","y":7.5881,"x":122.1424},{"n":"Chahe","c":"China","y":27.1746,"x":105.3716},{"n":"Kromeriz","c":"Czechia","y":49.2979,"x":17.3931},{"n":"Timaru","c":"New Zealand","y":-44.4,"x":171.25},{"n":"Mount Olive","c":"United States","y":40.8662,"x":-74.7426},{"n":"Big Spring","c":"United States","y":32.2387,"x":-101.4802},{"n":"Petrovsk","c":"Russia","y":52.3167,"x":45.3833},{"n":"Heshancun","c":"China","y":30.6344,"x":120.3637},{"n":"Balakliia","c":"Ukraine","y":49.4564,"x":36.8389},{"n":"Claudio","c":"Brazil","y":-20.4428,"x":-44.7658},{"n":"Zhonghechang","c":"China","y":27.8886,"x":107.2531},{"n":"Hafnarfjordhur","c":"Iceland","y":64.0667,"x":-21.95},{"n":"Quakers Hill","c":"Australia","y":-33.7344,"x":150.8789},{"n":"Toqsu","c":"China","y":41.5417,"x":82.604},{"n":"Chiredzi","c":"Zimbabwe","y":-21.0496,"x":31.66},{"n":"Stanford le Hope","c":"United Kingdom","y":51.514,"x":0.4244},{"n":"Borzya","c":"Russia","y":50.3833,"x":116.5333},{"n":"Eibar","c":"Spain","y":43.1843,"x":-2.4733},{"n":"Novyi Rozdil","c":"Ukraine","y":49.4703,"x":24.13},{"n":"Okotoks","c":"Canada","y":50.725,"x":-113.975},{"n":"Campos Gerais","c":"Brazil","y":-21.235,"x":-45.7589},{"n":"Bella Vista","c":"United States","y":36.4667,"x":-94.2707},{"n":"Pabellon de Arteaga","c":"Mexico","y":22.15,"x":-102.2667},{"n":"Ogawa","c":"Japan","y":36.0567,"x":139.2619},{"n":"Laoaoba","c":"China","y":26.8377,"x":105.5292},{"n":"Chichaoua","c":"Morocco","y":31.5333,"x":-8.7667},{"n":"Herentals","c":"Belgium","y":51.1767,"x":4.8364},{"n":"Shangluhu","c":"China","y":23.2538,"x":115.5815},{"n":"Oyabe","c":"Japan","y":36.6833,"x":136.8667},{"n":"Morrisville","c":"United States","y":35.8367,"x":-78.8348},{"n":"Balzar","c":"Ecuador","y":-1.36,"x":-79.9},{"n":"Harelbeke","c":"Belgium","y":50.8567,"x":3.3131},{"n":"Zhongtai","c":"China","y":35.0675,"x":107.613},{"n":"Santa Rita de Cassia","c":"Brazil","y":-11.0089,"x":-44.5189},{"n":"Buriti","c":"Brazil","y":-3.9419,"x":-42.925},{"n":"Heerenveen","c":"Netherlands","y":52.95,"x":5.9333},{"n":"Bad Zwischenahn","c":"Germany","y":53.1836,"x":8.0097},{"n":"Qaratau","c":"Kazakhstan","y":43.1667,"x":70.4667},{"n":"Pires do Rio","c":"Brazil","y":-17.3008,"x":-48.28},{"n":"Zeitz","c":"Germany","y":51.0478,"x":12.1383},{"n":"Leichlingen","c":"Germany","y":51.1167,"x":7.0167},{"n":"Henstedt-Ulzburg","c":"Germany","y":53.7833,"x":10},{"n":"San Salvador","c":"Mexico","y":20.2833,"x":-99.0153},{"n":"Zhailuo","c":"China","y":26.8794,"x":105.3081},{"n":"Cecina","c":"Italy","y":43.3139,"x":10.525},{"n":"Yangiyer","c":"Uzbekistan","y":40.2667,"x":68.8167},{"n":"Casselberry","c":"United States","y":28.6625,"x":-81.3218},{"n":"Hatonuevo","c":"Colombia","y":11.0672,"x":-72.7631},{"n":"Propria","c":"Brazil","y":-10.2111,"x":-36.8403},{"n":"Wellesley","c":"United States","y":42.3043,"x":-71.2855},{"n":"East Haven","c":"United States","y":41.2984,"x":-72.8577},{"n":"Plattsburgh","c":"United States","y":44.6951,"x":-73.4563},{"n":"Alagoa Grande","c":"Brazil","y":-7.0783,"x":-35.5953},{"n":"Vittorio Veneto","c":"Italy","y":45.9833,"x":12.3},{"n":"Naranjito","c":"Ecuador","y":-2.1667,"x":-79.4653},{"n":"Novi Ligure","c":"Italy","y":44.7592,"x":8.7856},{"n":"Tucuru","c":"Guatemala","y":15.3,"x":-90.0667},{"n":"Griesheim","c":"Germany","y":49.8594,"x":8.5525},{"n":"Palotina","c":"Brazil","y":-24.2839,"x":-53.84},{"n":"Wasco","c":"United States","y":35.5938,"x":-119.3671},{"n":"Emmendingen","c":"Germany","y":48.1214,"x":7.8492},{"n":"Novo Oriente","c":"Brazil","y":-5.5339,"x":-40.7739},{"n":"Qincun","c":"China","y":37.836,"x":116.6708},{"n":"Douar Oulad Aj-jabri","c":"Morocco","y":32.2567,"x":-6.7839},{"n":"South Laurel","c":"United States","y":39.0603,"x":-76.8456},{"n":"Saint Bernard","c":"Philippines","y":10.2833,"x":125.1333},{"n":"Fleming Island","c":"United States","y":30.0988,"x":-81.7124},{"n":"Licab","c":"Philippines","y":15.5439,"x":120.7634},{"n":"Byaroza","c":"Belarus","y":52.55,"x":24.9667},{"n":"Belle Glade","c":"United States","y":26.692,"x":-80.6672},{"n":"Aioi","c":"Japan","y":34.8036,"x":134.4681},{"n":"Kumalarang","c":"Philippines","y":7.75,"x":123.15},{"n":"San Carlos","c":"Colombia","y":8.7944,"x":-75.6994},{"n":"Manticao","c":"Philippines","y":8.4042,"x":124.2867},{"n":"Stoughton","c":"United States","y":42.1192,"x":-71.1019},{"n":"Lake in the Hills","c":"United States","y":42.1913,"x":-88.3476},{"n":"Witney","c":"United Kingdom","y":51.78,"x":-1.49},{"n":"Kartaly","c":"Russia","y":53.05,"x":60.65},{"n":"Agawam","c":"United States","y":42.0657,"x":-72.6526},{"n":"Pokhvistnevo","c":"Russia","y":53.65,"x":52.1333},{"n":"Isnos","c":"Colombia","y":1.9289,"x":-76.2158},{"n":"Datu Paglas","c":"Philippines","y":6.7669,"x":124.85},{"n":"Baishaling","c":"China","y":24.095,"x":113.7591},{"n":"Dubasari","c":"Moldova","y":47.2667,"x":29.1667},{"n":"Bilgoraj","c":"Poland","y":50.55,"x":22.7333},{"n":"Wallkill","c":"United States","y":41.4854,"x":-74.3939},{"n":"Shirley","c":"United States","y":40.7949,"x":-72.8743},{"n":"Nzega","c":"Tanzania","y":-4.2096,"x":33.18},{"n":"Naranjal","c":"Ecuador","y":-2.6736,"x":-79.6183},{"n":"Lucenec","c":"Slovakia","y":48.3314,"x":19.6708},{"n":"Burton","c":"United States","y":42.9974,"x":-83.6175},{"n":"Oulad Yaich","c":"Morocco","y":32.4167,"x":-6.3333},{"n":"Izu","c":"Japan","y":34.9767,"x":138.9469},{"n":"Chili","c":"United States","y":43.0845,"x":-77.7541},{"n":"Geneva","c":"United States","y":42.8644,"x":-76.9827},{"n":"Baradero","c":"Argentina","y":-33.8,"x":-59.5167},{"n":"Giarre","c":"Italy","y":37.7297,"x":15.1844},{"n":"Tha Yang","c":"Thailand","y":12.9658,"x":99.8924},{"n":"Khust","c":"Ukraine","y":48.1814,"x":23.2978},{"n":"Oulad Hammou","c":"Morocco","y":33.25,"x":-8.3347},{"n":"Gusev","c":"Russia","y":54.5922,"x":22.1997},{"n":"Reinbek","c":"Germany","y":53.5089,"x":10.2483},{"n":"Sept-Iles","c":"Canada","y":50.2167,"x":-66.3833},{"n":"Triggiano","c":"Italy","y":41.0667,"x":16.9167},{"n":"Schererville","c":"United States","y":41.486,"x":-87.444},{"n":"Gorlice","c":"Poland","y":49.6556,"x":21.1604},{"n":"West Springfield","c":"United States","y":42.1253,"x":-72.6503},{"n":"Villareal","c":"Philippines","y":11.5667,"x":124.9333},{"n":"Venezuela","c":"Cuba","y":21.7511,"x":-78.7792},{"n":"Wegberg","c":"Germany","y":51.1333,"x":6.2667},{"n":"Assisi","c":"Italy","y":43.07,"x":12.6175},{"n":"Geislingen an der Steige","c":"Germany","y":48.6244,"x":9.8306},{"n":"Austintown","c":"United States","y":41.0932,"x":-80.7405},{"n":"Marapanim","c":"Brazil","y":-0.7139,"x":-47.6939},{"n":"Villa Allende","c":"Argentina","y":-31.2944,"x":-64.2953},{"n":"Tournefeuille","c":"France","y":43.5853,"x":1.3442},{"n":"Coyaima","c":"Colombia","y":3.7975,"x":-75.1939},{"n":"Lisen","c":"Czechia","y":49.2075,"x":16.6861},{"n":"Baunatal","c":"Germany","y":51.2589,"x":9.4183},{"n":"Mpika","c":"Zambia","y":-11.83,"x":31.46},{"n":"McCandless","c":"United States","y":40.5836,"x":-80.0283},{"n":"Bom Jesus","c":"Brazil","y":-4.42,"x":-46.765},{"n":"Las Nieves","c":"Philippines","y":8.7351,"x":125.601},{"n":"Serra Negra","c":"Brazil","y":-22.6119,"x":-46.7008},{"n":"Carbonia","c":"Italy","y":39.1668,"x":8.522},{"n":"Mogliano Veneto","c":"Italy","y":45.5619,"x":12.2364},{"n":"New Iberia","c":"United States","y":30.0049,"x":-91.8202},{"n":"Silvassa","c":"India","y":20.2666,"x":73.0166},{"n":"Guararema","c":"Brazil","y":-23.415,"x":-46.035},{"n":"Luis Correia","c":"Brazil","y":-2.8789,"x":-41.6669},{"n":"Raseborg","c":"Finland","y":59.975,"x":23.4361},{"n":"Javea","c":"Spain","y":38.7892,"x":0.1631},{"n":"Esztergom","c":"Hungary","y":47.7856,"x":18.7403},{"n":"Manaquiri","c":"Brazil","y":-3.4281,"x":-60.4594},{"n":"Ciro Redondo","c":"Cuba","y":22.0189,"x":-78.7031},{"n":"Macalelon","c":"Philippines","y":13.75,"x":122.1333},{"n":"Huanghuajing","c":"China","y":24.1989,"x":112.9104},{"n":"Jeffrey's Bay","c":"South Africa","y":-34.0333,"x":24.9167},{"n":"Pershotravensk","c":"Ukraine","y":48.3464,"x":36.4044},{"n":"Lillehammer","c":"Norway","y":61.1146,"x":10.4674},{"n":"Warin Chamrap","c":"Thailand","y":15.2008,"x":104.8612},{"n":"San Giovanni in Persiceto","c":"Italy","y":44.6408,"x":11.185},{"n":"Gates","c":"United States","y":43.1514,"x":-77.713},{"n":"Gaotan","c":"China","y":32.3227,"x":108.3812},{"n":"Sighisoara","c":"Romania","y":46.2169,"x":24.7911},{"n":"Vineyard","c":"United States","y":38.4744,"x":-121.319},{"n":"Las Rosas","c":"Mexico","y":16.3556,"x":-92.3672},{"n":"Toli","c":"China","y":45.9313,"x":83.6039},{"n":"Bermejo","c":"Bolivia","y":-22.7322,"x":-64.3425},{"n":"Bretigny-sur-Orge","c":"France","y":48.6114,"x":2.3059},{"n":"Bacoli","c":"Italy","y":40.8,"x":14.0833},{"n":"Conceicao das Alagoas","c":"Brazil","y":-19.915,"x":-48.3878},{"n":"Luruaco","c":"Colombia","y":10.6083,"x":-75.1417},{"n":"Zionsville","c":"United States","y":39.9897,"x":-86.3182},{"n":"Pedras de Fogo","c":"Brazil","y":-7.4019,"x":-35.1158},{"n":"Vestal","c":"United States","y":42.0492,"x":-76.026},{"n":"Libacao","c":"Philippines","y":11.4833,"x":122.3},{"n":"Pilar do Sul","c":"Brazil","y":-23.8128,"x":-47.7158},{"n":"Blankenfelde","c":"Germany","y":52.35,"x":13.4},{"n":"Guamal","c":"Colombia","y":9.1442,"x":-74.2236},{"n":"Mollendo","c":"Peru","y":-17.0167,"x":-72.0167},{"n":"Short Pump","c":"United States","y":37.6549,"x":-77.6201},{"n":"Wetter (Ruhr)","c":"Germany","y":51.3881,"x":7.395},{"n":"Sexmoan","c":"Philippines","y":14.9333,"x":120.6167},{"n":"Grimma","c":"Germany","y":51.2386,"x":12.7253},{"n":"Kevelaer","c":"Germany","y":51.5833,"x":6.25},{"n":"Belpasso","c":"Italy","y":37.5833,"x":14.9833},{"n":"Ajka","c":"Hungary","y":47.1006,"x":17.5522},{"n":"Klodzko","c":"Poland","y":50.4378,"x":16.6528},{"n":"Lumberton","c":"United States","y":34.6312,"x":-79.0186},{"n":"Leimen","c":"Germany","y":49.3481,"x":8.6911},{"n":"Alga","c":"Kazakhstan","y":49.9032,"x":57.335},{"n":"Safaja","c":"Egypt","y":26.7517,"x":33.9344},{"n":"Hiji","c":"Japan","y":33.3694,"x":131.5325},{"n":"Perry Hall","c":"United States","y":39.4067,"x":-76.4781},{"n":"Pitangui","c":"Brazil","y":-19.6828,"x":-44.89},{"n":"Dar Bel Hamri","c":"Morocco","y":34.1889,"x":-5.9697},{"n":"Obama","c":"Japan","y":35.4956,"x":135.7467},{"n":"Zacoalco de Torres","c":"Mexico","y":20.2333,"x":-103.5833},{"n":"Bad Neuenahr-Ahrweiler","c":"Germany","y":50.5447,"x":7.1133},{"n":"Villa Luvianos","c":"Mexico","y":18.92,"x":-100.2983},{"n":"Santa Cruz Cabralia","c":"Brazil","y":-16.2778,"x":-39.025},{"n":"Bardaskan","c":"Iran","y":35.2631,"x":57.9722},{"n":"Benicia","c":"United States","y":38.0725,"x":-122.1525},{"n":"Erice","c":"Italy","y":38.0375,"x":12.5875},{"n":"Oakleaf Plantation","c":"United States","y":30.1689,"x":-81.8337},{"n":"Capljina","c":"Bosnia And Herzegovina","y":43.11,"x":17.7},{"n":"Rockledge","c":"United States","y":28.3201,"x":-80.732},{"n":"Navahrudak","c":"Belarus","y":53.5833,"x":25.8167},{"n":"Miranda","c":"Brazil","y":-20.2408,"x":-56.3778},{"n":"San Miniato","c":"Italy","y":43.6833,"x":10.85},{"n":"Agno","c":"Philippines","y":16.1161,"x":119.8027},{"n":"Saugus","c":"United States","y":42.4681,"x":-71.0145},{"n":"Rapperswil-Jona","c":"Switzerland","y":47.2286,"x":8.8317},{"n":"Kurchaloy","c":"Russia","y":43.2019,"x":46.0881},{"n":"Oktyabrsk","c":"Kazakhstan","y":49.4731,"x":57.4449},{"n":"Qujingpu","c":"China","y":38.0808,"x":106.0469},{"n":"Guma","c":"China","y":37.6063,"x":78.2799},{"n":"Majayjay","c":"Philippines","y":14.1463,"x":121.4729},{"n":"Centre Wellington","c":"Canada","y":43.7,"x":-80.3667},{"n":"Bo`ka","c":"Uzbekistan","y":40.8111,"x":69.1942},{"n":"Monterey","c":"United States","y":36.5922,"x":-121.8807},{"n":"Shuiding","c":"China","y":44.05,"x":80.8667},{"n":"Langdu","c":"China","y":23.3129,"x":102.2283},{"n":"Arqalyq","c":"Kazakhstan","y":50.2486,"x":66.9114},{"n":"Converse","c":"United States","y":29.5091,"x":-98.3084},{"n":"Paracelis","c":"Philippines","y":17.2667,"x":121.4667},{"n":"Khrestivka","c":"Ukraine","y":48.15,"x":38.3667},{"n":"San Felipe Jalapa de Diaz","c":"Mexico","y":18.0716,"x":-96.5352},{"n":"Granite City","c":"United States","y":38.7292,"x":-90.1266},{"n":"Llallagua","c":"Bolivia","y":-18.4231,"x":-66.5856},{"n":"Oppegard","c":"Norway","y":59.7925,"x":10.7903},{"n":"Buritizeiro","c":"Brazil","y":-17.3508,"x":-44.9619},{"n":"Iguig","c":"Philippines","y":17.75,"x":121.7333},{"n":"Yangyuhe","c":"China","y":33.8614,"x":109.874},{"n":"Tainai","c":"Japan","y":38.0667,"x":139.4167},{"n":"Nallihan","c":"Turkey","y":40.1859,"x":31.3508},{"n":"Bien Unido","c":"Philippines","y":10.1333,"x":124.3833},{"n":"Tara","c":"Russia","y":56.8753,"x":74.4136},{"n":"Hazar","c":"Turkmenistan","y":39.4,"x":53.1167},{"n":"Khulm","c":"Afghanistan","y":36.6833,"x":67.6833},{"n":"Oslob","c":"Philippines","y":9.55,"x":123.4},{"n":"Xochistlahuaca","c":"Mexico","y":16.7914,"x":-98.2419},{"n":"Lepe","c":"Spain","y":37.2542,"x":-7.2033},{"n":"Algemesi","c":"Spain","y":39.1897,"x":-0.4378},{"n":"Pantao-Ragat","c":"Philippines","y":8.05,"x":124.15},{"n":"Yukon","c":"United States","y":35.5201,"x":-97.7639},{"n":"Kushva","c":"Russia","y":58.2833,"x":59.7333},{"n":"Villazon","c":"Bolivia","y":-22.091,"x":-65.596},{"n":"Pontal do Parana","c":"Brazil","y":-25.5768,"x":-48.3581},{"n":"Ballina","c":"Australia","y":-28.8333,"x":153.5333},{"n":"Taree","c":"Australia","y":-31.9,"x":152.45},{"n":"Sorochinsk","c":"Russia","y":52.4333,"x":53.15},{"n":"Babatngon","c":"Philippines","y":11.4207,"x":124.8434},{"n":"Kakuda","c":"Japan","y":37.9772,"x":140.7819},{"n":"Sonora","c":"United States","y":37.9819,"x":-120.3828},{"n":"Kuaidamao","c":"China","y":41.68,"x":125.75},{"n":"Shaler","c":"United States","y":40.5229,"x":-79.9632},{"n":"Dauin","c":"Philippines","y":9.2,"x":123.2667},{"n":"Prata","c":"Brazil","y":-19.3069,"x":-48.9239},{"n":"Gameleira","c":"Brazil","y":-8.5844,"x":-35.3867},{"n":"Branford","c":"United States","y":41.2841,"x":-72.7981},{"n":"Westport","c":"United States","y":41.1428,"x":-73.3475},{"n":"Kasangulu","c":"Congo (Kinshasa)","y":-4.5796,"x":15.18},{"n":"Uchturpan","c":"China","y":41.2136,"x":79.2319},{"n":"Baesweiler","c":"Germany","y":50.9,"x":6.1833},{"n":"Chios","c":"Greece","y":38.3725,"x":26.1375},{"n":"Jimenez","c":"Philippines","y":8.3333,"x":123.8333},{"n":"Illkirch-Graffenstaden","c":"France","y":48.53,"x":7.72},{"n":"Kriens","c":"Switzerland","y":47.0344,"x":8.28},{"n":"Imatra","c":"Finland","y":61.1931,"x":28.7764},{"n":"Coromandel","c":"Brazil","y":-18.4728,"x":-47.2},{"n":"Kholmsk","c":"Russia","y":47.0403,"x":142.0431},{"n":"Mehlville","c":"United States","y":38.5018,"x":-90.3149},{"n":"Ternivka","c":"Ukraine","y":48.5231,"x":36.0826},{"n":"Niuchangqiao","c":"China","y":26.6247,"x":106.0077},{"n":"Mirassol d'Oeste","c":"Brazil","y":-15.675,"x":-58.0958},{"n":"Wisconsin Rapids","c":"United States","y":44.3927,"x":-89.8265},{"n":"Nochistlan de Mejia","c":"Mexico","y":21.3642,"x":-102.8464},{"n":"Baisuo","c":"China","y":25.8864,"x":106.3532},{"n":"San Martin de los Andes","c":"Argentina","y":-40.1667,"x":-71.35},{"n":"Aglipay","c":"Philippines","y":16.4889,"x":121.5874},{"n":"Dembi Dolo","c":"Ethiopia","y":8.5333,"x":34.8},{"n":"Dahmani","c":"Tunisia","y":35.9424,"x":8.8284},{"n":"Piest'any","c":"Slovakia","y":48.5833,"x":17.8333},{"n":"Galt","c":"United States","y":38.2693,"x":-121.3},{"n":"Mocimboa","c":"Mozambique","y":-11.3196,"x":40.35},{"n":"Hutto","c":"United States","y":30.5373,"x":-97.5516},{"n":"Sundern","c":"Germany","y":51.3167,"x":8},{"n":"Jaguarao","c":"Brazil","y":-32.5658,"x":-53.3758},{"n":"Bixby","c":"United States","y":35.9454,"x":-95.8773},{"n":"Hobart","c":"United States","y":41.5139,"x":-87.2729},{"n":"West Windsor","c":"United States","y":40.2897,"x":-74.6267},{"n":"Benicarlo","c":"Spain","y":40.4167,"x":0.4167},{"n":"Tlalpujahua de Rayon","c":"Mexico","y":19.805,"x":-100.1744},{"n":"Oakdale","c":"United States","y":44.9876,"x":-92.9641},{"n":"Sabaneta","c":"Venezuela","y":8.7522,"x":-69.9325},{"n":"Sunbury","c":"United States","y":40.8617,"x":-76.7874},{"n":"Valente","c":"Brazil","y":-11.4119,"x":-39.4619},{"n":"Moulay Bousselham","c":"Morocco","y":34.8786,"x":-6.2933},{"n":"Shilan","c":"China","y":21.9053,"x":110.7151},{"n":"Summerlin South","c":"United States","y":36.1242,"x":-115.3324},{"n":"Bolobo","c":"Congo (Kinshasa)","y":-2.16,"x":16.24},{"n":"Melgaco","c":"Brazil","y":-1.8039,"x":-50.7119},{"n":"Pirai","c":"Brazil","y":-22.6289,"x":-43.8978},{"n":"Andenne","c":"Belgium","y":50.4833,"x":5.1},{"n":"Carauari","c":"Brazil","y":-4.8828,"x":-66.8958},{"n":"Belen de Umbria","c":"Colombia","y":5.2006,"x":-75.8689},{"n":"Hadishahr","c":"Iran","y":38.8478,"x":45.6622},{"n":"Topki","c":"Russia","y":55.2833,"x":85.6167},{"n":"Zamboanguita","c":"Philippines","y":9.1167,"x":123.2},{"n":"Vyshhorod","c":"Ukraine","y":50.5833,"x":30.5},{"n":"Salinas Victoria","c":"Mexico","y":25.9667,"x":-100.3},{"n":"Atlautla","c":"Mexico","y":19,"x":-98.7167},{"n":"Cocal","c":"Brazil","y":-3.4708,"x":-41.555},{"n":"Porto Sant'Elpidio","c":"Italy","y":43.2586,"x":13.7585},{"n":"Sueca","c":"Spain","y":39.2026,"x":-0.3112},{"n":"Zolotonosha","c":"Ukraine","y":49.6833,"x":32.0333},{"n":"Ormskirk","c":"United Kingdom","y":53.5665,"x":-2.8869},{"n":"Ouda-yamaguchi","c":"Japan","y":34.5278,"x":135.9525},{"n":"Aloran","c":"Philippines","y":8.4146,"x":123.8228},{"n":"Zaltbommel","c":"Netherlands","y":51.8,"x":5.25},{"n":"Lufeng","c":"China","y":24.5738,"x":103.113},{"n":"Soignies","c":"Belgium","y":50.5667,"x":4.0667},{"n":"Fuman","c":"Iran","y":37.2239,"x":49.3125},{"n":"New Smyrna Beach","c":"United States","y":29.0249,"x":-80.9651},{"n":"Bellaa","c":"Morocco","y":30.0314,"x":-9.5542},{"n":"Mahaplag","c":"Philippines","y":10.5833,"x":124.9833},{"n":"Tualatin","c":"United States","y":45.3772,"x":-122.7746},{"n":"Tehuipango","c":"Mexico","y":18.5167,"x":-97.05},{"n":"Forest Hills","c":"United States","y":42.9577,"x":-85.4895},{"n":"Fridley","c":"United States","y":45.0841,"x":-93.2595},{"n":"Maloyaroslavets","c":"Russia","y":55,"x":36.4667},{"n":"Newtown","c":"United States","y":41.3988,"x":-73.2927},{"n":"Iguai","c":"Brazil","y":-14.7558,"x":-40.0889},{"n":"Zakopane","c":"Poland","y":49.2994,"x":19.9519},{"n":"East Chicago","c":"United States","y":41.6484,"x":-87.4536},{"n":"Ofaqim","c":"Israel","y":31.2833,"x":34.6167},{"n":"Vinales","c":"Cuba","y":22.6153,"x":-83.7158},{"n":"Kirkwood","c":"United States","y":38.5788,"x":-90.4203},{"n":"Ozumba","c":"Mexico","y":19.0392,"x":-98.7936},{"n":"San Martin Hidalgo","c":"Mexico","y":20.435,"x":-103.9286},{"n":"Sumilao","c":"Philippines","y":8.2872,"x":124.9456},{"n":"Mechernich","c":"Germany","y":50.6,"x":6.65},{"n":"Lagoa Vermelha","c":"Brazil","y":-28.2089,"x":-51.5258},{"n":"Arnstadt","c":"Germany","y":50.8342,"x":10.9464},{"n":"Littlehampton","c":"United Kingdom","y":50.8094,"x":-0.5409},{"n":"Havran","c":"Turkey","y":39.5583,"x":27.0983},{"n":"Sanger","c":"United States","y":36.699,"x":-119.5575},{"n":"Gioia del Colle","c":"Italy","y":40.8,"x":16.9333},{"n":"Mananjary","c":"Madagascar","y":-21.2167,"x":48.3333},{"n":"Jarrow","c":"United Kingdom","y":54.9797,"x":-1.4804},{"n":"Mirano","c":"Italy","y":45.5,"x":12.1},{"n":"Kongsberg","c":"Norway","y":59.665,"x":9.6464},{"n":"Itako","c":"Japan","y":35.9472,"x":140.5553},{"n":"Lainate","c":"Italy","y":45.5667,"x":9.0333},{"n":"Nova Prata","c":"Brazil","y":-28.7839,"x":-51.61},{"n":"Boca da Mata","c":"Brazil","y":-9.6408,"x":-36.22},{"n":"Morgan City","c":"United States","y":29.7041,"x":-91.192},{"n":"Curtea de Arges","c":"Romania","y":45.1167,"x":24.6667},{"n":"Sao Jose do Norte","c":"Brazil","y":-32.015,"x":-52.0419},{"n":"Ramsey","c":"United States","y":45.2617,"x":-93.4494},{"n":"Zongdi","c":"China","y":25.5909,"x":106.3163},{"n":"Ruston","c":"United States","y":32.5329,"x":-92.6363},{"n":"Jeffersontown","c":"United States","y":38.2048,"x":-85.5701},{"n":"Glen Ellyn","c":"United States","y":41.8667,"x":-88.0629},{"n":"Longtan","c":"China","y":40.783,"x":115.5754},{"n":"Supia","c":"Colombia","y":5.4506,"x":-75.6514},{"n":"Argelia","c":"Colombia","y":2.2558,"x":-77.2492},{"n":"Kapellen","c":"Belgium","y":51.315,"x":4.4294},{"n":"Narat","c":"China","y":43.3198,"x":84.0147},{"n":"Moron de la Frontera","c":"Spain","y":37.1222,"x":-5.4517},{"n":"Bandipura","c":"India","y":34.4225,"x":74.6375},{"n":"San Juan Guichicovi","c":"Mexico","y":16.9667,"x":-95.0833},{"n":"Mantena","c":"Brazil","y":-18.7819,"x":-40.98},{"n":"Makato","c":"Philippines","y":11.712,"x":122.2922},{"n":"Borsa","c":"Romania","y":47.6553,"x":24.6631},{"n":"Canon City","c":"United States","y":38.443,"x":-105.2203},{"n":"Ibotirama","c":"Brazil","y":-12.185,"x":-43.2208},{"n":"Lichtenburg","c":"South Africa","y":-26.15,"x":26.1667},{"n":"Gojo","c":"Japan","y":34.352,"x":135.6937},{"n":"Wangtang","c":"China","y":19.9327,"x":110.875},{"n":"Juatuba","c":"Brazil","y":-19.9519,"x":-44.3428},{"n":"Cuartero","c":"Philippines","y":11.35,"x":122.6667},{"n":"Monticello","c":"United States","y":45.298,"x":-93.7984},{"n":"Itacare","c":"Brazil","y":-14.2778,"x":-38.9969},{"n":"Lebrija","c":"Spain","y":36.9194,"x":-6.0781},{"n":"Oktyabrsk","c":"Russia","y":53.1667,"x":48.6667},{"n":"Ashtabula","c":"United States","y":41.8806,"x":-80.7984},{"n":"Santa Perpetua de Moguda","c":"Spain","y":41.5375,"x":2.1819},{"n":"Marco","c":"Brazil","y":-3.1239,"x":-40.1469},{"n":"Wiesloch","c":"Germany","y":49.2942,"x":8.6983},{"n":"Temescal Valley","c":"United States","y":33.7581,"x":-117.4677},{"n":"Oroshaza","c":"Hungary","y":46.5678,"x":20.6428},{"n":"Xima","c":"China","y":37.9763,"x":114.6259},{"n":"Agua Azul do Norte","c":"Brazil","y":-6.7908,"x":-50.4669},{"n":"Mint Hill","c":"United States","y":35.1782,"x":-80.6533},{"n":"Jarinu","c":"Brazil","y":-23.1014,"x":-46.7283},{"n":"Rosiori de Vede","c":"Romania","y":44.065,"x":24.9655},{"n":"Dupax Del Norte","c":"Philippines","y":16.2864,"x":121.0942},{"n":"Ponot","c":"Philippines","y":8.45,"x":123.0333},{"n":"Panauti","c":"Nepal","y":27.5833,"x":85.5167},{"n":"Danvers","c":"United States","y":42.574,"x":-70.9494},{"n":"Tupanatinga","c":"Brazil","y":-8.7528,"x":-37.34},{"n":"Sao Miguel do Iguacu","c":"Brazil","y":-25.3478,"x":-54.2378},{"n":"Stratford-upon-Avon","c":"United Kingdom","y":52.1928,"x":-1.7064},{"n":"Tortona","c":"Italy","y":44.8942,"x":8.8656},{"n":"Molins de Rey","c":"Spain","y":41.4139,"x":2.0158},{"n":"Tongyangdao","c":"China","y":41.7676,"x":109.9711},{"n":"Whitehall","c":"United States","y":40.6571,"x":-75.5046},{"n":"Piracuruca","c":"Brazil","y":-3.9278,"x":-41.7089},{"n":"Lapao","c":"Brazil","y":-11.3828,"x":-41.8319},{"n":"Jaszbereny","c":"Hungary","y":47.5,"x":19.9167},{"n":"Neptune","c":"United States","y":40.2105,"x":-74.0539},{"n":"Neckarsulm","c":"Germany","y":49.1917,"x":9.2244},{"n":"Niimi","c":"Japan","y":34.9772,"x":133.4703},{"n":"Ciudad Bolivar","c":"Colombia","y":5.8494,"x":-76.0203},{"n":"Miguel Calmon","c":"Brazil","y":-11.4289,"x":-40.595},{"n":"Haiyang","c":"China","y":39.9534,"x":119.5431},{"n":"Almazora","c":"Spain","y":39.9403,"x":-0.0625},{"n":"Geilenkirchen","c":"Germany","y":50.9653,"x":6.1194},{"n":"Bidur","c":"Nepal","y":27.89,"x":85.1597},{"n":"Ipsala","c":"Turkey","y":40.9181,"x":26.3831},{"n":"Santa Rita do Passa Quatro","c":"Brazil","y":-21.71,"x":-47.4778},{"n":"Gawler","c":"Australia","y":-34.5981,"x":138.745},{"n":"Statesville","c":"United States","y":35.7842,"x":-80.8714},{"n":"Kathu","c":"Thailand","y":7.9112,"x":98.3475},{"n":"Repelon","c":"Colombia","y":10.4944,"x":-75.1242},{"n":"Verkhniy Ufaley","c":"Russia","y":56.05,"x":60.2333},{"n":"Terlizzi","c":"Italy","y":41.1333,"x":16.55},{"n":"Gloversville","c":"United States","y":43.0491,"x":-74.3465},{"n":"Miramas","c":"France","y":43.5822,"x":5.0019},{"n":"Rambouillet","c":"France","y":48.6444,"x":1.8308},{"n":"Chillan Viejo","c":"Chile","y":-36.6229,"x":-72.1317},{"n":"Campos Sales","c":"Brazil","y":-7.0739,"x":-40.3758},{"n":"Gladstone","c":"United States","y":39.2133,"x":-94.5593},{"n":"Sola","c":"Norway","y":58.88,"x":5.6286},{"n":"Bo'ao","c":"China","y":19.1607,"x":110.5809},{"n":"Kedu","c":"China","y":25.6063,"x":107.0084},{"n":"Reina Mercedes Viejo","c":"Philippines","y":16.9833,"x":121.7833},{"n":"East Grinstead","c":"United Kingdom","y":51.129,"x":-0.007},{"n":"Longdian","c":"China","y":37.9033,"x":115.8744},{"n":"Queensbury","c":"United States","y":43.3568,"x":-73.6765},{"n":"Laranjal Paulista","c":"Brazil","y":-23.0506,"x":-47.8376},{"n":"Rheinbach","c":"Germany","y":50.6256,"x":6.9491},{"n":"Garfield Heights","c":"United States","y":41.4199,"x":-81.6038},{"n":"Maryborough","c":"Australia","y":-25.5375,"x":152.7019},{"n":"Seneca","c":"United States","y":34.6815,"x":-82.9609},{"n":"Barcelos","c":"Brazil","y":-0.975,"x":-62.9239},{"n":"Vimercate","c":"Italy","y":45.6167,"x":9.3667},{"n":"Overath","c":"Germany","y":50.9328,"x":7.2839},{"n":"Zempoala","c":"Mexico","y":19.9167,"x":-98.6667},{"n":"Thatcham","c":"United Kingdom","y":51.405,"x":-1.264},{"n":"Bayonet Point","c":"United States","y":28.3254,"x":-82.6834},{"n":"Klosterneuburg","c":"Austria","y":48.3042,"x":16.3167},{"n":"Bakhchysarai","c":"Ukraine","y":44.7528,"x":33.8608},{"n":"Drimmelen","c":"Netherlands","y":51.6944,"x":4.7972},{"n":"Aschersleben","c":"Germany","y":51.75,"x":11.4667},{"n":"Huaquechula","c":"Mexico","y":18.7667,"x":-98.55},{"n":"Millville","c":"United States","y":39.3903,"x":-75.0561},{"n":"Monroeville","c":"United States","y":40.4262,"x":-79.7605},{"n":"Tall Rif`at","c":"Syria","y":36.4733,"x":37.0972},{"n":"Forquilhinha","c":"Brazil","y":-28.7469,"x":-49.4719},{"n":"Saint-Constant","c":"Canada","y":45.37,"x":-73.57},{"n":"Badiangan","c":"Philippines","y":10.986,"x":122.5369},{"n":"St. Helens","c":"United States","y":45.8571,"x":-122.8164},{"n":"Ban Phonla Krang","c":"Thailand","y":14.9192,"x":102.1095},{"n":"Stafford","c":"United States","y":39.7049,"x":-74.2643},{"n":"Lapuyan","c":"Philippines","y":7.6333,"x":123.2},{"n":"Pitogo","c":"Philippines","y":7.45,"x":123.3167},{"n":"Lunel","c":"France","y":43.6778,"x":4.1361},{"n":"Orvault","c":"France","y":47.2717,"x":-1.6225},{"n":"Sibinal","c":"Guatemala","y":15.1333,"x":-92.05},{"n":"Castro Alves","c":"Brazil","y":-12.7658,"x":-39.4278},{"n":"Ixchiguan","c":"Guatemala","y":15.1642,"x":-91.9333},{"n":"Atitalaquia","c":"Mexico","y":20.0583,"x":-99.2208},{"n":"Vicar","c":"Spain","y":36.8317,"x":-2.6431},{"n":"Enna","c":"Italy","y":37.5667,"x":14.2667},{"n":"Grimsby","c":"Canada","y":43.2,"x":-79.55},{"n":"Teutonia","c":"Brazil","y":-29.4478,"x":-51.8058},{"n":"Bergerac","c":"France","y":44.85,"x":0.48},{"n":"La Oliva","c":"Spain","y":28.6167,"x":-13.9333},{"n":"Tepehuacan de Guerrero","c":"Mexico","y":21.0131,"x":-98.8442},{"n":"Albignasego","c":"Italy","y":45.35,"x":11.8667},{"n":"Puerto Colombia","c":"Colombia","y":10.9922,"x":-74.9528},{"n":"New Windsor","c":"United States","y":41.4742,"x":-74.1089},{"n":"Gonesse","c":"France","y":48.9875,"x":2.4494},{"n":"Heiligenhaus","c":"Germany","y":51.3265,"x":6.971},{"n":"Aalten","c":"Netherlands","y":51.925,"x":6.5808},{"n":"El Alia","c":"Tunisia","y":37.1667,"x":10.0333},{"n":"Cangas","c":"Spain","y":42.2642,"x":-8.7819},{"n":"Conchal","c":"Brazil","y":-22.33,"x":-47.1728},{"n":"Pombos","c":"Brazil","y":-8.1492,"x":-35.4011},{"n":"San Giovanni Rotondo","c":"Italy","y":41.7,"x":15.7333},{"n":"Henin-Beaumont","c":"France","y":50.4217,"x":2.9508},{"n":"Horn Lake","c":"United States","y":34.9512,"x":-90.0501},{"n":"San Juan de Uraba","c":"Colombia","y":8.7611,"x":-76.5286},{"n":"Itapissuma","c":"Brazil","y":-7.7764,"x":-34.8919},{"n":"Pereyaslav-Khmel'nyts'kyy","c":"Ukraine","y":50.065,"x":31.445},{"n":"Sebes","c":"Romania","y":45.9547,"x":23.57},{"n":"Chivasso","c":"Italy","y":45.1833,"x":7.8833},{"n":"Estarreja","c":"Portugal","y":40.75,"x":-8.5667},{"n":"East Windsor","c":"United States","y":40.2606,"x":-74.5295},{"n":"Miracema","c":"Brazil","y":-21.4119,"x":-42.1969},{"n":"Prior Lake","c":"United States","y":44.7251,"x":-93.4409},{"n":"Jardim","c":"Brazil","y":-7.5819,"x":-39.2978},{"n":"Caboolture","c":"Australia","y":-27.0667,"x":152.967},{"n":"Santa Eugenia","c":"Spain","y":42.5667,"x":-8.9833},{"n":"Scicli","c":"Italy","y":36.7914,"x":14.7025},{"n":"Huntley","c":"United States","y":42.1599,"x":-88.433},{"n":"Niscemi","c":"Italy","y":37.15,"x":14.3833},{"n":"Galatina","c":"Italy","y":40.1667,"x":18.1667},{"n":"Cavaillon","c":"France","y":43.8375,"x":5.0381},{"n":"Kolambugan","c":"Philippines","y":8.1144,"x":123.8971},{"n":"Qingshan","c":"China","y":27.35,"x":105.02},{"n":"Maple Valley","c":"United States","y":47.3659,"x":-122.0368},{"n":"San Agustin Tlaxiaca","c":"Mexico","y":20.1144,"x":-98.8867},{"n":"Vilyeyka","c":"Belarus","y":54.4833,"x":26.9167},{"n":"Mundo Novo","c":"Brazil","y":-11.8589,"x":-40.4719},{"n":"Xalatlaco","c":"Mexico","y":19.1811,"x":-99.4164},{"n":"Fidenza","c":"Italy","y":44.8667,"x":10.0667},{"n":"Willebroek","c":"Belgium","y":51.0597,"x":4.3581},{"n":"Porto da Folha","c":"Brazil","y":-9.9169,"x":-37.2778},{"n":"Oak Forest","c":"United States","y":41.6054,"x":-87.7527},{"n":"Schloss Holte-Stukenbrock","c":"Germany","y":51.8833,"x":8.6167},{"n":"Mayskiy","c":"Russia","y":43.6333,"x":44.0667},{"n":"Pemberton","c":"United States","y":39.9562,"x":-74.6},{"n":"Glen Cove","c":"United States","y":40.8709,"x":-73.6287},{"n":"Ermelo","c":"Netherlands","y":52.3,"x":5.6331},{"n":"Liqizhuang","c":"China","y":39.9703,"x":117.0013},{"n":"Gradignan","c":"France","y":44.7725,"x":-0.6156},{"n":"Werkendam","c":"Netherlands","y":51.8097,"x":4.8928},{"n":"Wangen im Allgau","c":"Germany","y":47.6858,"x":9.8342},{"n":"Szentes","c":"Hungary","y":46.6519,"x":20.2572},{"n":"Sao Joaquim","c":"Brazil","y":-28.2939,"x":-49.9319},{"n":"Sikonge","c":"Tanzania","y":-5.6295,"x":32.77},{"n":"Sens","c":"France","y":48.1975,"x":3.2877},{"n":"Kiskunhalas","c":"Hungary","y":46.4319,"x":19.4883},{"n":"Saumur","c":"France","y":47.26,"x":-0.0769},{"n":"Ubata","c":"Brazil","y":-14.2139,"x":-39.5228},{"n":"Ksebia","c":"Morocco","y":34.2933,"x":-6.1594},{"n":"Shoreview","c":"United States","y":45.0842,"x":-93.1358},{"n":"Assemini","c":"Italy","y":39.2897,"x":9.0048},{"n":"Poona-Piagapo","c":"Philippines","y":8.0833,"x":124.0833},{"n":"Garchitorena","c":"Philippines","y":13.8833,"x":123.7},{"n":"Montbeliard","c":"France","y":47.51,"x":6.8},{"n":"Hennigsdorf","c":"Germany","y":52.6378,"x":13.2036},{"n":"Dodge City","c":"United States","y":37.761,"x":-100.0183},{"n":"Ronse","c":"Belgium","y":50.75,"x":3.6},{"n":"Unisan","c":"Philippines","y":13.8413,"x":121.9752},{"n":"Tlaxcoapan","c":"Mexico","y":20.0953,"x":-99.22},{"n":"Sol'-Iletsk","c":"Russia","y":51.1667,"x":54.9833},{"n":"San Pedro del Pinatar","c":"Spain","y":37.8167,"x":-0.75},{"n":"Colleyville","c":"United States","y":32.8913,"x":-97.1486},{"n":"Wilmette","c":"United States","y":42.0771,"x":-87.7282},{"n":"Plum","c":"United States","y":40.5024,"x":-79.7496},{"n":"Bernards","c":"United States","y":40.6761,"x":-74.5678},{"n":"Libenge","c":"Congo (Kinshasa)","y":3.6604,"x":18.62},{"n":"Sabanilla","c":"Mexico","y":17.2833,"x":-92.55},{"n":"Belo Oriente","c":"Brazil","y":-19.22,"x":-42.4839},{"n":"Falconara Marittima","c":"Italy","y":43.6296,"x":13.3968},{"n":"Pamidi","c":"India","y":14.95,"x":77.5833},{"n":"Itamaraca","c":"Brazil","y":-7.7478,"x":-34.8258},{"n":"Amatepec","c":"Mexico","y":18.65,"x":-100.15},{"n":"Laranjeiras","c":"Brazil","y":-10.8061,"x":-37.1717},{"n":"Ruzomberok","c":"Slovakia","y":49.0786,"x":19.3083},{"n":"McHenry","c":"United States","y":42.3388,"x":-88.2931},{"n":"Kazincbarcika","c":"Hungary","y":48.2531,"x":20.6456},{"n":"Waterville","c":"United States","y":44.5441,"x":-69.6624},{"n":"Bagac","c":"Philippines","y":14.5951,"x":120.3918},{"n":"Mesagne","c":"Italy","y":40.5667,"x":17.8},{"n":"Szentendre","c":"Hungary","y":47.6733,"x":19.0725},{"n":"Jiangdi","c":"China","y":27.012,"x":103.6042},{"n":"Walcz","c":"Poland","y":53.2779,"x":16.4712},{"n":"Quarrata","c":"Italy","y":43.8475,"x":10.9833},{"n":"Zuitou","c":"China","y":34.0622,"x":107.3127},{"n":"Shaker Heights","c":"United States","y":41.4744,"x":-81.5496},{"n":"Citrus Park","c":"United States","y":28.073,"x":-82.5628},{"n":"Boquim","c":"Brazil","y":-11.1469,"x":-37.6208},{"n":"Tarui","c":"Japan","y":35.3703,"x":136.5269},{"n":"Teltow","c":"Germany","y":52.4022,"x":13.2706},{"n":"Marcos Juarez","c":"Argentina","y":-32.7,"x":-62.1},{"n":"Brownsburg","c":"United States","y":39.833,"x":-86.3824},{"n":"Sanharo","c":"Brazil","y":-8.3608,"x":-36.5658},{"n":"Wakefield","c":"United States","y":42.5035,"x":-71.0656},{"n":"Sao Sebastiao da Boa Vista","c":"Brazil","y":-1.7178,"x":-49.5408},{"n":"Mainit","c":"Philippines","y":9.535,"x":125.5231},{"n":"Chaska","c":"United States","y":44.8164,"x":-93.6092},{"n":"Aripuana","c":"Brazil","y":-9.17,"x":-60.64},{"n":"Strausberg","c":"Germany","y":52.5808,"x":13.8814},{"n":"Ilchester","c":"United States","y":39.2187,"x":-76.7684},{"n":"Shelby","c":"United States","y":35.2904,"x":-81.5451},{"n":"Noicattaro","c":"Italy","y":41.0333,"x":16.9833},{"n":"Karpinsk","c":"Russia","y":59.7667,"x":60},{"n":"Uyuni","c":"Bolivia","y":-20.4627,"x":-66.824},{"n":"Taquari","c":"Brazil","y":-29.8,"x":-51.8597},{"n":"Lauf","c":"Germany","y":49.5103,"x":11.2772},{"n":"Maryland Heights","c":"United States","y":38.7189,"x":-90.4749},{"n":"Kamyshlov","c":"Russia","y":56.85,"x":62.7167},{"n":"Magna","c":"United States","y":40.7634,"x":-112.1599},{"n":"Pontecagnano","c":"Italy","y":40.65,"x":14.8833},{"n":"Xenia","c":"United States","y":39.6828,"x":-83.9414},{"n":"Putignano","c":"Italy","y":40.8492,"x":17.1225},{"n":"Allen Park","c":"United States","y":42.2595,"x":-83.2107},{"n":"Chuimatan","c":"China","y":35.7166,"x":102.8771},{"n":"Khanabad","c":"Afghanistan","y":36.6831,"x":69.1636},{"n":"Balabagan","c":"Philippines","y":7.5333,"x":124.1167},{"n":"Mason City","c":"United States","y":43.1487,"x":-93.1998},{"n":"Hancun","c":"China","y":39.4062,"x":116.6126},{"n":"New Lenox","c":"United States","y":41.5097,"x":-87.97},{"n":"Batalha","c":"Brazil","y":-4.0239,"x":-42.0778},{"n":"Jaltenco","c":"Mexico","y":19.7511,"x":-99.0931},{"n":"Pinarbasi","c":"Turkey","y":38.722,"x":36.391},{"n":"Hanahan","c":"United States","y":32.9302,"x":-80.0027},{"n":"Cartama","c":"Spain","y":36.7114,"x":-4.6306},{"n":"Karasuk","c":"Russia","y":53.7333,"x":78.0333},{"n":"Iglesias","c":"Italy","y":39.3103,"x":8.5372},{"n":"Padada","c":"Philippines","y":6.6333,"x":125.35},{"n":"Hamminkeln","c":"Germany","y":51.7319,"x":6.5908},{"n":"Lier","c":"Norway","y":59.8675,"x":10.2142},{"n":"Dongen","c":"Netherlands","y":51.6258,"x":4.9433},{"n":"Tibiao","c":"Philippines","y":11.2915,"x":122.0354},{"n":"Burdeos","c":"Philippines","y":14.8436,"x":121.9697},{"n":"Kinston","c":"United States","y":35.2748,"x":-77.5936},{"n":"Searcy","c":"United States","y":35.2418,"x":-91.7351},{"n":"Flemalle-Haute","c":"Belgium","y":50.6011,"x":5.4628},{"n":"Fern Down","c":"United Kingdom","y":50.81,"x":-1.9},{"n":"Boisbriand","c":"Canada","y":45.62,"x":-73.83},{"n":"Brzozow","c":"Poland","y":49.6953,"x":22.0194},{"n":"Miyanaga","c":"Japan","y":33.7236,"x":130.6667},{"n":"Majagua","c":"Cuba","y":21.9244,"x":-78.9906},{"n":"Candido Sales","c":"Brazil","y":-15.505,"x":-41.2389},{"n":"Pacasmayo","c":"Peru","y":-7.4003,"x":-79.57},{"n":"Tamorot","c":"Morocco","y":34.9333,"x":-4.7833},{"n":"Shangxiao","c":"China","y":35.4969,"x":107.4914},{"n":"Olindina","c":"Brazil","y":-11.3669,"x":-38.3328},{"n":"Ipixuna","c":"Brazil","y":-7.0508,"x":-71.695},{"n":"New London","c":"United States","y":41.3502,"x":-72.1023},{"n":"Jinju","c":"China","y":22.7073,"x":111.8223},{"n":"Lamego","c":"Portugal","y":41.0833,"x":-7.8667},{"n":"Nossa Senhora das Dores","c":"Brazil","y":-10.4919,"x":-37.1928},{"n":"West Islip","c":"United States","y":40.7097,"x":-73.2971},{"n":"Reserva","c":"Brazil","y":-24.65,"x":-50.8508},{"n":"Ramon Magsaysay","c":"Philippines","y":8,"x":123.4833},{"n":"Bafoulabe","c":"Mali","y":13.8064,"x":-10.8322},{"n":"Sofiyivs'ka Borshchahivka","c":"Ukraine","y":50.4114,"x":30.3692},{"n":"Sabaa Aiyoun","c":"Morocco","y":33.8969,"x":-5.3611},{"n":"Solanea","c":"Brazil","y":-6.7778,"x":-35.6969},{"n":"Rijssen","c":"Netherlands","y":52.3,"x":6.5167},{"n":"Fortul","c":"Colombia","y":6.7931,"x":-71.7714},{"n":"Monreal","c":"Philippines","y":12.644,"x":123.6648},{"n":"West Chicago","c":"United States","y":41.896,"x":-88.2253},{"n":"Dyatkovo","c":"Russia","y":53.6,"x":34.3333},{"n":"Nepomuceno","c":"Brazil","y":-21.2358,"x":-45.2358},{"n":"Sliedrecht","c":"Netherlands","y":51.8222,"x":4.7744},{"n":"Goianinha","c":"Brazil","y":-6.2669,"x":-35.21},{"n":"Santa Josefa","c":"Philippines","y":7.9842,"x":126.0285},{"n":"Novoaleksandrovsk","c":"Russia","y":45.4933,"x":41.2183},{"n":"Saint-Dizier","c":"France","y":48.6383,"x":4.9497},{"n":"Codajas","c":"Brazil","y":-3.8369,"x":-62.0569},{"n":"Los Cordobas","c":"Colombia","y":8.8953,"x":-76.3547},{"n":"Santeramo in Colle","c":"Italy","y":40.8,"x":16.7667},{"n":"Obertshausen","c":"Germany","y":50.0715,"x":8.8482},{"n":"Francavilla al Mare","c":"Italy","y":42.4181,"x":14.2919},{"n":"Semiluki","c":"Russia","y":51.6833,"x":39.0333},{"n":"Springettsbury","c":"United States","y":39.9907,"x":-76.6736},{"n":"McDonough","c":"United States","y":33.4399,"x":-84.1509},{"n":"Mariano Comense","c":"Italy","y":45.7,"x":9.1833},{"n":"Chuanliaocun","c":"China","y":28.2582,"x":120.2118},{"n":"Morales","c":"Colombia","y":2.7603,"x":-76.6339},{"n":"Montreux","c":"Switzerland","y":46.4333,"x":6.9167},{"n":"La Garde","c":"France","y":43.1256,"x":6.0108},{"n":"Piracaia","c":"Brazil","y":-23.0539,"x":-46.3581},{"n":"General Luna","c":"Philippines","y":13.6881,"x":122.1708},{"n":"Ragan Sur","c":"Philippines","y":17.3167,"x":121.7833},{"n":"Narasannapeta","c":"India","y":18.4151,"x":84.0447},{"n":"Polysayevo","c":"Russia","y":54.6,"x":86.2833},{"n":"West Linn","c":"United States","y":45.3669,"x":-122.6399},{"n":"Weiterstadt","c":"Germany","y":49.9,"x":8.6},{"n":"Basay","c":"Philippines","y":9.4167,"x":122.6333},{"n":"Cortland","c":"United States","y":42.6004,"x":-76.1784},{"n":"Lemoore","c":"United States","y":36.2949,"x":-119.7983},{"n":"Alvin","c":"United States","y":29.3871,"x":-95.2933},{"n":"Bushey","c":"United Kingdom","y":51.6429,"x":-0.3604},{"n":"Corrente","c":"Brazil","y":-10.4428,"x":-45.1619},{"n":"Kauswagan","c":"Philippines","y":8.1917,"x":124.0847},{"n":"Kirzhach","c":"Russia","y":56.15,"x":38.8667},{"n":"Ocean","c":"United States","y":40.2519,"x":-74.0392},{"n":"Brasileia","c":"Brazil","y":-11.01,"x":-68.7478},{"n":"Tubize","c":"Belgium","y":50.6928,"x":4.205},{"n":"Kiruna","c":"Sweden","y":67.8494,"x":20.2544},{"n":"Nova Zagora","c":"Bulgaria","y":42.4903,"x":26.0122},{"n":"Yuanyangzhen","c":"China","y":34.7847,"x":104.7762},{"n":"Hohen Neuendorf","c":"Germany","y":52.6667,"x":13.2831},{"n":"Husi","c":"Romania","y":46.6731,"x":28.0647},{"n":"Waynesboro","c":"United States","y":39.7525,"x":-77.5822},{"n":"Krasnoarmeysk","c":"Russia","y":56.1,"x":38.1333},{"n":"Betong","c":"Thailand","y":5.7731,"x":101.0725},{"n":"Nova Esperanca","c":"Brazil","y":-23.1839,"x":-52.205},{"n":"Sosnogorsk","c":"Russia","y":63.5833,"x":53.9333},{"n":"Segezha","c":"Russia","y":63.7415,"x":34.3222},{"n":"San Giovanni Lupatoto","c":"Italy","y":45.3833,"x":11.0333},{"n":"Marshalltown","c":"United States","y":42.0341,"x":-92.9067},{"n":"Planalto","c":"Brazil","y":-14.67,"x":-40.4708},{"n":"Wappinger","c":"United States","y":41.59,"x":-73.8918},{"n":"Lower Providence","c":"United States","y":40.1485,"x":-75.4267},{"n":"Thomasville","c":"United States","y":35.8813,"x":-80.0807},{"n":"Unterhaching","c":"Germany","y":48.0658,"x":11.61},{"n":"Macka","c":"Turkey","y":40.8186,"x":39.6136},{"n":"Goias","c":"Brazil","y":-15.9339,"x":-50.14},{"n":"Temple Terrace","c":"United States","y":28.0437,"x":-82.3774},{"n":"Wassenaar","c":"Netherlands","y":52.1453,"x":4.4006},{"n":"Coulsdon","c":"United Kingdom","y":51.3211,"x":-0.1386},{"n":"Veranopolis","c":"Brazil","y":-28.9358,"x":-51.5489},{"n":"Coracao de Jesus","c":"Brazil","y":-16.685,"x":-44.365},{"n":"Falticeni","c":"Romania","y":47.4625,"x":26.3},{"n":"Az Zabadani","c":"Syria","y":33.7247,"x":36.1003},{"n":"Dalnerechensk","c":"Russia","y":45.9333,"x":133.7333},{"n":"San Benito Abad","c":"Colombia","y":8.9272,"x":-75.0264},{"n":"Norco","c":"United States","y":33.9252,"x":-117.5499},{"n":"Pirapozinho","c":"Brazil","y":-22.2753,"x":-51.5},{"n":"Immokalee","c":"United States","y":26.4253,"x":-81.4251},{"n":"San Alberto","c":"Colombia","y":7.7592,"x":-73.3931},{"n":"Kirovsk","c":"Russia","y":67.6142,"x":33.6717},{"n":"Khadbari","c":"Nepal","y":27.3667,"x":87.2167},{"n":"Bolkhov","c":"Russia","y":53.45,"x":36},{"n":"As Sanamayn","c":"Syria","y":33.0711,"x":36.1842},{"n":"Shalqar","c":"Kazakhstan","y":47.8333,"x":59.6},{"n":"Hermanus","c":"South Africa","y":-34.4167,"x":19.3},{"n":"Dois Corregos","c":"Brazil","y":-22.3661,"x":-48.3803},{"n":"Muhlacker","c":"Germany","y":48.95,"x":8.8392},{"n":"Severouralsk","c":"Russia","y":60.15,"x":59.9333},{"n":"San Antonio del Sur","c":"Cuba","y":20.0569,"x":-74.8078},{"n":"Santa Margarita","c":"Philippines","y":12.0378,"x":124.6578},{"n":"Congleton","c":"United Kingdom","y":53.162,"x":-2.217},{"n":"Cesenatico","c":"Italy","y":44.2012,"x":12.4007},{"n":"La Union","c":"Chile","y":-40.2952,"x":-73.0822},{"n":"Valdagno","c":"Italy","y":45.65,"x":11.3},{"n":"Traralgon","c":"Australia","y":-38.1958,"x":146.5403},{"n":"Heppenheim","c":"Germany","y":49.6415,"x":8.645},{"n":"Vernon Hills","c":"United States","y":42.234,"x":-87.9608},{"n":"Zhaicun","c":"China","y":22.6174,"x":112.6275},{"n":"Sao Joao Nepomuceno","c":"Brazil","y":-21.54,"x":-43.0108},{"n":"Pearl","c":"United States","y":32.273,"x":-90.0918},{"n":"Paracuellos de Jarama","c":"Spain","y":40.55,"x":-3.5167},{"n":"Sao Bernardo","c":"Brazil","y":-3.3608,"x":-42.4178},{"n":"Bethany","c":"United States","y":45.5613,"x":-122.8369},{"n":"Vila Rica","c":"Brazil","y":-10.0119,"x":-51.1158},{"n":"Senador Pompeu","c":"Brazil","y":-5.5878,"x":-39.3719},{"n":"Tabira","c":"Brazil","y":-7.5908,"x":-37.5394},{"n":"Nordenham","c":"Germany","y":53.5,"x":8.4667},{"n":"Marquette","c":"United States","y":46.544,"x":-87.4082},{"n":"Horsham","c":"United States","y":40.1993,"x":-75.1665},{"n":"Zirndorf","c":"Germany","y":49.45,"x":10.95},{"n":"Oltenita","c":"Romania","y":44.0864,"x":26.6364},{"n":"Iesolo","c":"Italy","y":45.5331,"x":12.6448},{"n":"Sedalia","c":"United States","y":38.7042,"x":-93.2351},{"n":"Bessemer","c":"United States","y":33.3709,"x":-86.9713},{"n":"Oisterwijk","c":"Netherlands","y":51.5833,"x":5.2},{"n":"Balboa","c":"Colombia","y":2.0406,"x":-77.2164},{"n":"Plainview","c":"United States","y":40.7832,"x":-73.4732},{"n":"Macrohon","c":"Philippines","y":10.0797,"x":124.9431},{"n":"Migdal Ha`Emeq","c":"Israel","y":32.6786,"x":35.2444},{"n":"Butzbach","c":"Germany","y":50.4367,"x":8.6622},{"n":"Selm","c":"Germany","y":51.6833,"x":7.4833},{"n":"Pati do Alferes","c":"Brazil","y":-22.4289,"x":-43.4189},{"n":"Caririacu","c":"Brazil","y":-7.0419,"x":-39.2839},{"n":"Oldbury","c":"United Kingdom","y":52.505,"x":-2.0159},{"n":"Ocuilan de Arteaga","c":"Mexico","y":19,"x":-99.4},{"n":"Beuningen","c":"Netherlands","y":51.8667,"x":5.7667},{"n":"Liushuquan","c":"China","y":39.3512,"x":118.1039},{"n":"Ait Faska","c":"Morocco","y":31.5058,"x":-7.7161},{"n":"Canarana","c":"Brazil","y":-11.685,"x":-41.7689},{"n":"Sangerhausen","c":"Germany","y":51.4667,"x":11.3},{"n":"New Milton","c":"United Kingdom","y":50.76,"x":-1.65},{"n":"Vignola","c":"Italy","y":44.4808,"x":11.0022},{"n":"Batavia","c":"United States","y":41.8479,"x":-88.311},{"n":"Topol'cany","c":"Slovakia","y":48.55,"x":18.1833},{"n":"Ehingen an der Donau","c":"Germany","y":48.2833,"x":9.7236},{"n":"West Milford","c":"United States","y":41.1062,"x":-74.3913},{"n":"Lilancheng","c":"China","y":39.2012,"x":116.7168},{"n":"Pensilvania","c":"Colombia","y":5.384,"x":-75.1612},{"n":"Chanhassen","c":"United States","y":44.8544,"x":-93.5621},{"n":"Santo Tomas","c":"El Salvador","y":13.6333,"x":-89.1333},{"n":"Aurillac","c":"France","y":44.9261,"x":2.4406},{"n":"Jarocin","c":"Poland","y":51.9667,"x":17.5},{"n":"Ilha Solteira","c":"Brazil","y":-20.4272,"x":-51.3436},{"n":"Daventry","c":"United Kingdom","y":52.26,"x":-1.16},{"n":"Sacramento","c":"Brazil","y":-19.865,"x":-47.44},{"n":"Palanas","c":"Philippines","y":12.15,"x":123.9167},{"n":"Conversano","c":"Italy","y":40.9667,"x":17.1167},{"n":"Dimasalang","c":"Philippines","y":12.1923,"x":123.8592},{"n":"Bourdoud","c":"Morocco","y":34.5922,"x":-4.5492},{"n":"Sumperk","c":"Czechia","y":49.9653,"x":16.9707},{"n":"Termini Imerese","c":"Italy","y":37.9833,"x":13.7},{"n":"Arzignano","c":"Italy","y":45.5203,"x":11.3397},{"n":"Cabot","c":"United States","y":34.9768,"x":-92.0274},{"n":"Bad Honnef am Rhein","c":"Germany","y":50.645,"x":7.2269},{"n":"Pukekohe East","c":"New Zealand","y":-37.195,"x":174.9481},{"n":"Ludwigsfelde","c":"Germany","y":52.2997,"x":13.2667},{"n":"Shuanghe","c":"China","y":33.032,"x":109.6099},{"n":"Kalfou","c":"Cameroon","y":10.284,"x":14.9298},{"n":"Cuart de Poblet","c":"Spain","y":39.4833,"x":-0.4428},{"n":"Vicksburg","c":"United States","y":32.3173,"x":-90.8868},{"n":"Bangzha","c":"China","y":24.8345,"x":104.6721},{"n":"Karoi","c":"Zimbabwe","y":-16.8196,"x":29.68},{"n":"Bingen am Rhein","c":"Germany","y":49.9669,"x":7.895},{"n":"Itaiba","c":"Brazil","y":-8.9478,"x":-37.4228},{"n":"Sora","c":"Italy","y":41.7167,"x":13.6167},{"n":"Kluczbork","c":"Poland","y":50.9833,"x":18.2167},{"n":"Lauaan","c":"Philippines","y":11.1429,"x":122.0417},{"n":"Upper Dublin","c":"United States","y":40.1502,"x":-75.1813},{"n":"Leon Postigo","c":"Philippines","y":8.1514,"x":122.9244},{"n":"Alitagtag","c":"Philippines","y":13.865,"x":121.0063},{"n":"Dengjiazhuang","c":"China","y":37.7051,"x":115.7883},{"n":"Schleswig","c":"Germany","y":54.5153,"x":9.5697},{"n":"Ayorou","c":"Niger","y":14.7318,"x":0.9195},{"n":"Tarragona","c":"Philippines","y":7.0491,"x":126.4471},{"n":"Farafangana","c":"Madagascar","y":-22.8166,"x":47.8332},{"n":"Brawley","c":"United States","y":32.9783,"x":-115.5287},{"n":"Bouknadel","c":"Morocco","y":34.1245,"x":-6.748},{"n":"Geretsried","c":"Germany","y":47.8667,"x":11.4667},{"n":"Neenah","c":"United States","y":44.167,"x":-88.4764},{"n":"Perevalsk","c":"Ukraine","y":48.4333,"x":38.8167},{"n":"Boureit","c":"Morocco","y":34.9833,"x":-4.9167},{"n":"Snoqualmie","c":"United States","y":47.5293,"x":-121.8412},{"n":"Quipapa","c":"Brazil","y":-8.8278,"x":-36.0119},{"n":"Montemor-o-Velho","c":"Portugal","y":40.1667,"x":-8.6833},{"n":"Labytnangi","c":"Russia","y":66.65,"x":66.4},{"n":"Buesaco","c":"Colombia","y":1.3847,"x":-77.1564},{"n":"Hercules","c":"United States","y":38.0064,"x":-122.2564},{"n":"Mahwah","c":"United States","y":41.0816,"x":-74.1856},{"n":"Scandiano","c":"Italy","y":44.5925,"x":10.6878},{"n":"Semirom","c":"Iran","y":31.4142,"x":51.5694},{"n":"Lake City","c":"United States","y":30.1901,"x":-82.647},{"n":"Astorga","c":"Brazil","y":-23.2328,"x":-51.6658},{"n":"Bishop Auckland","c":"United Kingdom","y":54.6566,"x":-1.6768},{"n":"Magarao","c":"Philippines","y":13.6604,"x":123.1869},{"n":"Colotenango","c":"Guatemala","y":15.4054,"x":-91.7156},{"n":"Paramus","c":"United States","y":40.9455,"x":-74.0712},{"n":"Lindau","c":"Germany","y":47.5458,"x":9.6839},{"n":"Elefsina","c":"Greece","y":38.0414,"x":23.5453},{"n":"Okeechobee","c":"United States","y":27.2414,"x":-80.8298},{"n":"Lanaken","c":"Belgium","y":50.8925,"x":5.6497},{"n":"Vierzon","c":"France","y":47.2225,"x":2.0694},{"n":"Paz de Ariporo","c":"Colombia","y":5.8811,"x":-71.8917},{"n":"Almunecar","c":"Spain","y":36.7339,"x":-3.6911},{"n":"Khashuri","c":"Georgia","y":41.9975,"x":43.5986},{"n":"Malyn","c":"Ukraine","y":50.7689,"x":29.27},{"n":"Sasovo","c":"Russia","y":54.35,"x":41.9167},{"n":"North Kingstown","c":"United States","y":41.5687,"x":-71.4629},{"n":"Dongfeng","c":"China","y":22.2479,"x":112.3794},{"n":"Swiecie","c":"Poland","y":53.4167,"x":18.4333},{"n":"Vsetin","c":"Czechia","y":49.3387,"x":17.9962},{"n":"San Lucas Sacatepequez","c":"Guatemala","y":14.6095,"x":-90.6568},{"n":"La Teste-de-Buch","c":"France","y":44.62,"x":-1.1457},{"n":"Baleno","c":"Philippines","y":12.4739,"x":123.4982},{"n":"Conde","c":"Brazil","y":-11.8139,"x":-37.6108},{"n":"Haoping","c":"China","y":32.5992,"x":108.6148},{"n":"Wilmslow","c":"United Kingdom","y":53.325,"x":-2.239},{"n":"Tavira","c":"Portugal","y":37.1309,"x":-7.6506},{"n":"Yuanchang","c":"Taiwan","y":23.642,"x":120.323},{"n":"Conception Bay South","c":"Canada","y":47.5167,"x":-52.9833},{"n":"Pfaffenhofen","c":"Germany","y":48.5333,"x":11.5167},{"n":"Castel Volturno","c":"Italy","y":41.05,"x":13.9167},{"n":"Independencia","c":"Brazil","y":-5.3958,"x":-40.3089},{"n":"Kulmbach","c":"Germany","y":50.1,"x":11.4333},{"n":"Sao Sebastiao do Cai","c":"Brazil","y":-29.5869,"x":-51.3758},{"n":"Lice","c":"Turkey","y":38.4549,"x":40.6519},{"n":"Cujubim","c":"Brazil","y":-9.3628,"x":-62.5853},{"n":"Iacu","c":"Brazil","y":-12.7669,"x":-40.2119},{"n":"Puerto Varas","c":"Chile","y":-41.3178,"x":-72.9827},{"n":"Muchamiel","c":"Spain","y":38.4136,"x":-0.4456},{"n":"Uherske Hradiste","c":"Czechia","y":49.0698,"x":17.4597},{"n":"Guarai","c":"Brazil","y":-8.8339,"x":-48.51},{"n":"Aracoiaba","c":"Brazil","y":-4.3708,"x":-38.8139},{"n":"Wetteren","c":"Belgium","y":51,"x":3.8833},{"n":"Wethersfield","c":"United States","y":41.7013,"x":-72.6703},{"n":"Muscatine","c":"United States","y":41.4196,"x":-91.068},{"n":"Palmar de Varela","c":"Colombia","y":10.7389,"x":-74.7547},{"n":"Novopavlovsk","c":"Russia","y":43.9636,"x":43.6394},{"n":"Boone","c":"United States","y":36.2111,"x":-81.6668},{"n":"Itapuranga","c":"Brazil","y":-15.5619,"x":-49.9489},{"n":"Moscow","c":"United States","y":46.7307,"x":-116.9986},{"n":"Oum Hadjer","c":"Chad","y":13.2833,"x":19.6833},{"n":"Toktogul","c":"Kyrgyzstan","y":41.8826,"x":72.9372},{"n":"Tacaratu","c":"Brazil","y":-9.1058,"x":-38.15},{"n":"Santiago Papasquiaro","c":"Mexico","y":25.0439,"x":-105.4192},{"n":"Sebastian","c":"United States","y":27.7882,"x":-80.4813},{"n":"Northport","c":"United States","y":33.2589,"x":-87.5984},{"n":"Helmstedt","c":"Germany","y":52.2281,"x":11.0106},{"n":"Mizdah","c":"Libya","y":31.4337,"x":12.9833},{"n":"Saint-Bruno-de-Montarville","c":"Canada","y":45.5333,"x":-73.35},{"n":"Queimadas","c":"Brazil","y":-10.9778,"x":-39.6239},{"n":"Natchez","c":"United States","y":31.5437,"x":-91.3867},{"n":"Zacualtipan","c":"Mexico","y":20.65,"x":-98.65},{"n":"Sankt Wendel","c":"Germany","y":49.4667,"x":7.1667},{"n":"Conner","c":"Philippines","y":17.8,"x":121.3333},{"n":"Odemira","c":"Portugal","y":37.5833,"x":-8.6333},{"n":"Novelda","c":"Spain","y":38.385,"x":-0.768},{"n":"Aparecida do Taboado","c":"Brazil","y":-20.0869,"x":-51.0939},{"n":"Zarraga","c":"Philippines","y":10.8167,"x":122.6},{"n":"Twentynine Palms","c":"United States","y":34.1478,"x":-116.0659},{"n":"Roseto degli Abruzzi","c":"Italy","y":42.6833,"x":14.0167},{"n":"Sapian","c":"Philippines","y":11.5,"x":122.6},{"n":"Itai","c":"Brazil","y":-23.4178,"x":-49.0906},{"n":"Holt","c":"United States","y":42.6416,"x":-84.5307},{"n":"Stein","c":"Netherlands","y":50.9679,"x":5.7652},{"n":"Zavodoukovsk","c":"Russia","y":56.5,"x":66.55},{"n":"Traun","c":"Austria","y":48.2217,"x":14.2397},{"n":"Duiven","c":"Netherlands","y":51.9472,"x":6.0211},{"n":"Puerto Piritu","c":"Venezuela","y":10.0667,"x":-65.05},{"n":"East St. Louis","c":"United States","y":38.6156,"x":-90.1304},{"n":"Sachse","c":"United States","y":32.9726,"x":-96.5793},{"n":"Tinipuka","c":"Indonesia","y":-4.5496,"x":136.89},{"n":"Renedo","c":"Spain","y":43.3578,"x":-3.9581},{"n":"Pandami","c":"Philippines","y":5.5333,"x":120.75},{"n":"Libourne","c":"France","y":44.92,"x":-0.24},{"n":"Gaoya","c":"China","y":36.4609,"x":104.9936},{"n":"Nocera Superiore","c":"Italy","y":40.7417,"x":14.6722},{"n":"Sinait","c":"Philippines","y":17.8667,"x":120.4583},{"n":"Friedrichsdorf","c":"Germany","y":50.2569,"x":8.6418},{"n":"South Ubian","c":"Philippines","y":5.1833,"x":120.4833},{"n":"Montichiari","c":"Italy","y":45.4161,"x":10.3917},{"n":"Tamparan","c":"Philippines","y":7.879,"x":124.333},{"n":"Diapaga","c":"Burkina Faso","y":12.0667,"x":1.7833},{"n":"Achern","c":"Germany","y":48.6314,"x":8.0739},{"n":"Saintes","c":"France","y":45.7464,"x":-0.6333},{"n":"Jumilla","c":"Spain","y":38.4792,"x":-1.325},{"n":"Paris","c":"United States","y":33.6688,"x":-95.546},{"n":"Haines City","c":"United States","y":28.11,"x":-81.6157},{"n":"Blagnac","c":"France","y":43.6364,"x":1.3906},{"n":"Allen","c":"Philippines","y":12.5013,"x":124.282},{"n":"Salamina","c":"Greece","y":37.9333,"x":23.5},{"n":"Cave Spring","c":"United States","y":37.2254,"x":-80.0073},{"n":"Santo Antonio do Monte","c":"Brazil","y":-20.0869,"x":-45.2939},{"n":"Correggio","c":"Italy","y":44.7717,"x":10.7806},{"n":"Caluquembe","c":"Angola","y":-13.7833,"x":14.6833},{"n":"Istmina","c":"Colombia","y":5.1633,"x":-76.6867},{"n":"Magdalena","c":"Philippines","y":14.2,"x":121.4333},{"n":"Kimovsk","c":"Russia","y":53.9667,"x":38.5333},{"n":"Merrimack","c":"United States","y":42.8547,"x":-71.5188},{"n":"Superior","c":"United States","y":46.6941,"x":-92.0823},{"n":"Karlovo","c":"Bulgaria","y":42.642,"x":24.8082},{"n":"Maozhou","c":"China","y":38.86,"x":116.1244},{"n":"Marmara Ereglisi","c":"Turkey","y":40.9697,"x":27.9553},{"n":"Encruzilhada do Sul","c":"Brazil","y":-30.5439,"x":-52.5219},{"n":"Pantelimon","c":"Romania","y":44.4528,"x":26.2036},{"n":"West Odessa","c":"United States","y":31.8388,"x":-102.4996},{"n":"Alamos","c":"Mexico","y":27.0275,"x":-108.94},{"n":"San Juan Ixcoy","c":"Guatemala","y":15.6,"x":-91.45},{"n":"Medina","c":"United States","y":41.1358,"x":-81.8694},{"n":"Santa Ana","c":"Colombia","y":9.3194,"x":-74.5706},{"n":"Dolores","c":"Argentina","y":-36.3132,"x":-57.6792},{"n":"Barberton","c":"United States","y":41.0094,"x":-81.6038},{"n":"Espanola","c":"United States","y":36.0041,"x":-106.0669},{"n":"Koko","c":"Nigeria","y":11.4232,"x":4.517},{"n":"Armidale","c":"Australia","y":-30.5,"x":151.65},{"n":"Yinajia","c":"China","y":26.8239,"x":105.695},{"n":"San Vicente de Canete","c":"Peru","y":-13.0833,"x":-76.4},{"n":"Cuajinicuilapa","c":"Mexico","y":16.4717,"x":-98.4153},{"n":"Omachi","c":"Japan","y":36.5,"x":137.85},{"n":"Londonderry","c":"United States","y":42.8796,"x":-71.3873},{"n":"Erandio","c":"Spain","y":43.3047,"x":-2.9731},{"n":"Malangawa","c":"Nepal","y":26.8667,"x":85.5667},{"n":"Dix Hills","c":"United States","y":40.8035,"x":-73.337},{"n":"Villanueva de la Serena","c":"Spain","y":38.9667,"x":-5.8},{"n":"Wetzikon","c":"Switzerland","y":47.3208,"x":8.7931},{"n":"Rock Springs","c":"United States","y":41.5951,"x":-109.2238},{"n":"Santa Lucia","c":"Philippines","y":17.1167,"x":120.45},{"n":"San Martin","c":"Colombia","y":3.6969,"x":-73.6986},{"n":"Wagrowiec","c":"Poland","y":52.8,"x":17.2},{"n":"Beersel","c":"Belgium","y":50.7631,"x":4.3086},{"n":"South Windsor","c":"United States","y":41.8353,"x":-72.5733},{"n":"Mercer Island","c":"United States","y":47.5661,"x":-122.232},{"n":"Mola di Bari","c":"Italy","y":41.0667,"x":17.0833},{"n":"Lubbecke","c":"Germany","y":52.3081,"x":8.6231},{"n":"Heber","c":"United States","y":40.5068,"x":-111.3984},{"n":"White Bear Lake","c":"United States","y":45.0657,"x":-93.015},{"n":"San Lucas Toliman","c":"Guatemala","y":14.6333,"x":-91.1333},{"n":"Kunisakimachi-tsurugawa","c":"Japan","y":33.5653,"x":131.7317},{"n":"Lagoa Grande","c":"Brazil","y":-8.9969,"x":-40.2719},{"n":"Nova Soure","c":"Brazil","y":-11.2328,"x":-38.4828},{"n":"Roth","c":"Germany","y":49.2461,"x":11.0911},{"n":"Chester-le-Street","c":"United Kingdom","y":54.8594,"x":-1.5699},{"n":"Santa Lucia La Reforma","c":"Guatemala","y":15.1333,"x":-91.2333},{"n":"Verl","c":"Germany","y":51.8831,"x":8.5167},{"n":"Cochrane","c":"Canada","y":51.189,"x":-114.467},{"n":"Marshfield","c":"United States","y":42.114,"x":-70.715},{"n":"Monte Cristi","c":"Dominican Republic","y":19.85,"x":-71.65},{"n":"Bagno a Ripoli","c":"Italy","y":43.75,"x":11.3167},{"n":"Yany Kapu","c":"Ukraine","y":45.9675,"x":33.8003},{"n":"Holbrook","c":"United States","y":40.7944,"x":-73.0707},{"n":"Broadstairs","c":"United Kingdom","y":51.3589,"x":1.4394},{"n":"Huejotzingo","c":"Mexico","y":19.1594,"x":-98.4073},{"n":"Kireyevsk","c":"Russia","y":53.9333,"x":37.9333},{"n":"Nechi","c":"Colombia","y":8.0958,"x":-74.775},{"n":"Haskoy","c":"Turkey","y":38.6864,"x":41.6936},{"n":"Velingrad","c":"Bulgaria","y":42.0276,"x":23.9913},{"n":"Tabuelan","c":"Philippines","y":10.85,"x":123.9},{"n":"Bay Point","c":"United States","y":38.0329,"x":-121.9614},{"n":"Surgidero de Batabano","c":"Cuba","y":22.6986,"x":-82.2939},{"n":"Pereira Barreto","c":"Brazil","y":-20.6383,"x":-51.1092},{"n":"Nanpingcun","c":"China","y":39.753,"x":114.0923},{"n":"Firmat","c":"Argentina","y":-33.45,"x":-61.4833},{"n":"Lochearn","c":"United States","y":39.346,"x":-76.7307},{"n":"Gross-Gerau","c":"Germany","y":49.9214,"x":8.4818},{"n":"Zittau","c":"Germany","y":50.8961,"x":14.8072},{"n":"Umbauba","c":"Brazil","y":-11.3828,"x":-37.6578},{"n":"Santa Rosa de Viterbo","c":"Brazil","y":-21.4728,"x":-47.3628},{"n":"Green","c":"United States","y":40.9483,"x":-81.4757},{"n":"Oulad Said","c":"Morocco","y":32.632,"x":-8.8456},{"n":"Felipe Carrillo Puerto","c":"Mexico","y":19.5786,"x":-88.0453},{"n":"Wall","c":"United States","y":40.1674,"x":-74.0974},{"n":"Saky","c":"Ukraine","y":45.1336,"x":33.5772},{"n":"Pfungstadt","c":"Germany","y":49.8056,"x":8.6044},{"n":"Saint-Ouen-l'Aumone","c":"France","y":49.0447,"x":2.1111},{"n":"Aimores","c":"Brazil","y":-19.4958,"x":-41.0639},{"n":"Carandai","c":"Brazil","y":-20.9539,"x":-43.8058},{"n":"Ishii","c":"Japan","y":34.0675,"x":134.4419},{"n":"Rinteln","c":"Germany","y":52.1906,"x":9.0814},{"n":"Carahue","c":"Chile","y":-38.7,"x":-73.1667},{"n":"Cueramaro","c":"Mexico","y":20.6258,"x":-101.6739},{"n":"Panelas","c":"Brazil","y":-8.6639,"x":-36.0058},{"n":"Golborne","c":"United Kingdom","y":53.4758,"x":-2.5943},{"n":"Etampes","c":"France","y":48.4343,"x":2.1615},{"n":"Thetford Mines","c":"Canada","y":46.1,"x":-71.3},{"n":"Lamzoudia","c":"Morocco","y":31.5833,"x":-8.4833},{"n":"Alhaurin el Grande","c":"Spain","y":36.6331,"x":-4.6831},{"n":"Owatonna","c":"United States","y":44.0914,"x":-93.2304},{"n":"Ditzingen","c":"Germany","y":48.8264,"x":9.0667},{"n":"Tepetlaoxtoc","c":"Mexico","y":19.5731,"x":-98.8203},{"n":"Adra","c":"Spain","y":36.7478,"x":-3.0161},{"n":"Pooler","c":"United States","y":32.1043,"x":-81.2568},{"n":"Lennestadt","c":"Germany","y":51.1236,"x":8.0681},{"n":"Exeter","c":"United States","y":40.3139,"x":-75.834},{"n":"Haiwei","c":"China","y":19.4275,"x":108.8129},{"n":"Balabanovo","c":"Russia","y":55.1833,"x":36.65},{"n":"Haisyn","c":"Ukraine","y":48.8094,"x":29.3906},{"n":"Datu Piang","c":"Philippines","y":7.0178,"x":124.4974},{"n":"Yolombo","c":"Colombia","y":6.5978,"x":-75.0122},{"n":"Siofok","c":"Hungary","y":46.9,"x":18.05},{"n":"Nesher","c":"Israel","y":32.7667,"x":35.05},{"n":"Sarrat","c":"Philippines","y":18.1622,"x":120.6478},{"n":"Otradnoye","c":"Russia","y":59.7833,"x":30.8167},{"n":"Oliva","c":"Spain","y":38.9194,"x":-0.1211},{"n":"Veenoord","c":"Netherlands","y":52.9875,"x":6.2914},{"n":"Lanling","c":"China","y":23.0093,"x":114.5697},{"n":"Pirai do Sul","c":"Brazil","y":-24.5258,"x":-49.9489},{"n":"Rottweil","c":"Germany","y":48.1681,"x":8.6247},{"n":"Mata Grande","c":"Brazil","y":-9.1178,"x":-37.7339},{"n":"Fengruncun","c":"China","y":34.8537,"x":109.8283},{"n":"Oulad Tayeb","c":"Morocco","y":33.9598,"x":-4.9954},{"n":"Ciempozuelos","c":"Spain","y":40.1592,"x":-3.6183},{"n":"Puebla de Vallbona","c":"Spain","y":39.5917,"x":-0.553},{"n":"Poro","c":"Philippines","y":10.6333,"x":124.4167},{"n":"Wiehl","c":"Germany","y":50.95,"x":7.5333},{"n":"Courtenay","c":"Canada","y":49.6878,"x":-124.9944},{"n":"Olesa de Montserrat","c":"Spain","y":41.545,"x":1.8944},{"n":"Sao Geraldo do Araguaia","c":"Brazil","y":-6.4008,"x":-48.555},{"n":"Vynohradiv","c":"Ukraine","y":48.1397,"x":23.0331},{"n":"Gosforth","c":"United Kingdom","y":55.007,"x":-1.623},{"n":"South Salt Lake","c":"United States","y":40.7056,"x":-111.8986},{"n":"Plettenberg","c":"Germany","y":51.2128,"x":7.8715},{"n":"Legnago","c":"Italy","y":45.1929,"x":11.3115},{"n":"Tarpon Springs","c":"United States","y":28.1493,"x":-82.7623},{"n":"Edgewood","c":"United States","y":39.421,"x":-76.2968},{"n":"Soure","c":"Brazil","y":-0.7169,"x":-48.5228},{"n":"Busselton","c":"Australia","y":-33.6478,"x":115.3458},{"n":"Rudolstadt","c":"Germany","y":50.7169,"x":11.3275},{"n":"Tougue","c":"Guinea","y":11.44,"x":-11.67},{"n":"Dingalan","c":"Philippines","y":15.3833,"x":121.4},{"n":"Stassfurt","c":"Germany","y":51.8667,"x":11.5667},{"n":"Bluffton","c":"United States","y":32.2135,"x":-80.9316},{"n":"Sevierville","c":"United States","y":35.8873,"x":-83.5677},{"n":"Forest Grove","c":"United States","y":45.5244,"x":-123.1101},{"n":"Paete","c":"Philippines","y":14.3667,"x":121.4833},{"n":"Yanyan","c":"China","y":24.4166,"x":116.3271},{"n":"Solano","c":"Colombia","y":0.6983,"x":-75.2539},{"n":"Bugho","c":"Philippines","y":10.8,"x":124.9333},{"n":"Sun City West","c":"United States","y":33.6693,"x":-112.3575},{"n":"Thiene","c":"Italy","y":45.7072,"x":11.4786},{"n":"Luzilandia","c":"Brazil","y":-3.4578,"x":-42.37},{"n":"Cambara","c":"Brazil","y":-23.0458,"x":-50.0739},{"n":"Yanaul","c":"Russia","y":56.2667,"x":54.9333},{"n":"South Portland","c":"United States","y":43.631,"x":-70.2895},{"n":"Ruskin","c":"United States","y":27.7065,"x":-82.4209},{"n":"Denison","c":"United States","y":33.7672,"x":-96.5807},{"n":"Maaseik","c":"Belgium","y":51.1019,"x":5.7856},{"n":"Brilon","c":"Germany","y":51.3956,"x":8.5678},{"n":"Oud-Beijerland","c":"Netherlands","y":51.82,"x":4.42},{"n":"Eidsvoll","c":"Norway","y":60.3475,"x":11.2508},{"n":"Del Gallego","c":"Philippines","y":13.9167,"x":122.6},{"n":"Ain Aicha","c":"Morocco","y":34.4833,"x":-4.7},{"n":"Piagapo","c":"Philippines","y":8,"x":124.2},{"n":"Alta Floresta D'Oeste","c":"Brazil","y":-11.9283,"x":-61.995},{"n":"Samtredia","c":"Georgia","y":42.1625,"x":42.3417},{"n":"Tanabi","c":"Brazil","y":-20.6258,"x":-49.6489},{"n":"Skawina","c":"Poland","y":49.9753,"x":19.8275},{"n":"Keystone","c":"United States","y":28.1312,"x":-82.5999},{"n":"Moon","c":"United States","y":40.5082,"x":-80.2073},{"n":"Korostyshiv","c":"Ukraine","y":50.3186,"x":29.0592},{"n":"Dalmine","c":"Italy","y":45.65,"x":9.6},{"n":"Workington","c":"United Kingdom","y":54.6365,"x":-3.5549},{"n":"Jequitinhonha","c":"Brazil","y":-16.4339,"x":-41.0028},{"n":"Witham","c":"United Kingdom","y":51.7978,"x":0.6373},{"n":"Sandona","c":"Colombia","y":1.2847,"x":-77.4711},{"n":"Vistahermosa","c":"Colombia","y":3.1239,"x":-73.7514},{"n":"Laon","c":"France","y":49.5639,"x":3.6244},{"n":"Tamboril","c":"Brazil","y":-4.8319,"x":-40.3208},{"n":"Markkleeberg","c":"Germany","y":51.2778,"x":12.3833},{"n":"San Jose","c":"Colombia","y":1.6967,"x":-78.2453},{"n":"Inta","c":"Russia","y":66.0398,"x":60.1315},{"n":"Capao do Leao","c":"Brazil","y":-31.7628,"x":-52.4839},{"n":"Ruvo di Puglia","c":"Italy","y":41.1173,"x":16.4837},{"n":"Wumaying","c":"China","y":38.0094,"x":116.8032},{"n":"Lamut","c":"Philippines","y":16.65,"x":121.225},{"n":"Ituporanga","c":"Brazil","y":-27.4139,"x":-49.6008},{"n":"Ozery","c":"Russia","y":54.85,"x":38.55},{"n":"La Valette-du-Var","c":"France","y":43.1383,"x":5.9831},{"n":"Tupaciguara","c":"Brazil","y":-18.5928,"x":-48.705},{"n":"Albergaria-a-Velha","c":"Portugal","y":40.6936,"x":-8.4806},{"n":"Taupo","c":"New Zealand","y":-38.69,"x":176.08},{"n":"Sevlievo","c":"Bulgaria","y":43.0258,"x":25.1039},{"n":"Harsewinkel","c":"Germany","y":51.9667,"x":8.2331},{"n":"Cuijk","c":"Netherlands","y":51.7269,"x":5.8794},{"n":"Meckenheim","c":"Germany","y":50.6333,"x":7.0167},{"n":"Saydnaya","c":"Syria","y":33.6958,"x":36.3775},{"n":"Areia Branca","c":"Brazil","y":-4.9558,"x":-37.1369},{"n":"Claremore","c":"United States","y":36.3143,"x":-95.6099},{"n":"Pinheiral","c":"Brazil","y":-22.5128,"x":-44.0008},{"n":"Whitehaven","c":"United Kingdom","y":54.548,"x":-3.5855},{"n":"Homewood","c":"United States","y":33.4617,"x":-86.8092},{"n":"Muret","c":"France","y":43.4611,"x":1.3267},{"n":"Formosa do Rio Preto","c":"Brazil","y":-11.0478,"x":-45.1928},{"n":"Sao Joao da Ponte","c":"Brazil","y":-15.9289,"x":-44.0078},{"n":"Chiromo","c":"Malawi","y":-16.55,"x":35.1332},{"n":"Mengdan","c":"China","y":24.2752,"x":98.4672},{"n":"Ibia","c":"Brazil","y":-19.4778,"x":-46.5389},{"n":"La Blanca","c":"Guatemala","y":14.5791,"x":-92.1414},{"n":"Magog","c":"Canada","y":45.2667,"x":-72.15},{"n":"Hudson","c":"United States","y":42.7639,"x":-71.4072},{"n":"Mednogorsk","c":"Russia","y":51.4221,"x":57.5953},{"n":"Pandag","c":"Philippines","y":6.7411,"x":124.7827},{"n":"Tabina","c":"Philippines","y":7.4655,"x":123.4086},{"n":"Horb am Neckar","c":"Germany","y":48.445,"x":8.6911},{"n":"Choconta","c":"Colombia","y":5.1467,"x":-73.6825},{"n":"Westerlo","c":"Belgium","y":51.0897,"x":4.9153},{"n":"Salamanca","c":"Chile","y":-31.7667,"x":-70.9667},{"n":"Columbine","c":"United States","y":39.5879,"x":-105.0694},{"n":"Zheleznovodsk","c":"Russia","y":44.1333,"x":43.0333},{"n":"Pinal de Amoles","c":"Mexico","y":21.1342,"x":-99.4586},{"n":"Canyon Lake","c":"United States","y":29.8761,"x":-98.2611},{"n":"Lopez Jaena","c":"Philippines","y":8.55,"x":123.7667},{"n":"Oulad Barhil","c":"Morocco","y":30.6388,"x":-8.4732},{"n":"Kingsville","c":"United States","y":27.5094,"x":-97.8611},{"n":"Kochubeyevskoye","c":"Russia","y":44.6706,"x":41.838},{"n":"Forest City","c":"United States","y":35.3338,"x":-81.8702},{"n":"Cabangan","c":"Philippines","y":15.1333,"x":120.15},{"n":"Merelbeke","c":"Belgium","y":50.9939,"x":3.7461},{"n":"Baar","c":"Switzerland","y":47.1956,"x":8.5264},{"n":"Bainbridge Island","c":"United States","y":47.6439,"x":-122.5434},{"n":"Norden","c":"Germany","y":53.5967,"x":7.2056},{"n":"Salzkotten","c":"Germany","y":51.6708,"x":8.6047},{"n":"Petershagen","c":"Germany","y":52.3833,"x":8.9667},{"n":"Dedham","c":"United States","y":42.2466,"x":-71.1777},{"n":"Khed Brahma","c":"India","y":24.0299,"x":73.0463},{"n":"Caledonia","c":"United States","y":42.7986,"x":-87.8762},{"n":"Kamo","c":"Japan","y":37.6667,"x":139.0333},{"n":"Eloi Mendes","c":"Brazil","y":-21.61,"x":-45.565},{"n":"De Witt","c":"United States","y":43.0503,"x":-76.0712},{"n":"Cajuru","c":"Brazil","y":-21.2753,"x":-47.3042},{"n":"Champlin","c":"United States","y":45.1702,"x":-93.3903},{"n":"El Ghiate","c":"Morocco","y":32.0331,"x":-9.1625},{"n":"Sprockhovel","c":"Germany","y":51.3614,"x":7.244},{"n":"Lom","c":"Bulgaria","y":43.8272,"x":23.2364},{"n":"Thetford","c":"United Kingdom","y":52.41,"x":0.74},{"n":"Kariba","c":"Zimbabwe","y":-16.5333,"x":28.8},{"n":"Frederikshavn","c":"Denmark","y":57.4337,"x":10.5333},{"n":"Camalaniugan","c":"Philippines","y":18.2667,"x":121.6833},{"n":"Xiaolongtan","c":"China","y":23.8099,"x":103.203},{"n":"Safsaf","c":"Morocco","y":34.5581,"x":-6.0078},{"n":"Koscierzyna","c":"Poland","y":54.1167,"x":17.9833},{"n":"Anastacio","c":"Brazil","y":-20.4839,"x":-55.8069},{"n":"Sastamala","c":"Finland","y":61.3417,"x":22.9083},{"n":"Apiai","c":"Brazil","y":-24.5097,"x":-48.8428},{"n":"Edwardsville","c":"United States","y":38.7923,"x":-89.9877},{"n":"Pinillos","c":"Colombia","y":8.915,"x":-74.4619},{"n":"Genzano di Roma","c":"Italy","y":41.7022,"x":12.6925},{"n":"Rochefort","c":"France","y":45.9421,"x":-0.9588},{"n":"Fairland","c":"United States","y":39.0804,"x":-76.9527},{"n":"Bad Oldesloe","c":"Germany","y":53.8117,"x":10.3742},{"n":"Morozovsk","c":"Russia","y":48.35,"x":41.8333},{"n":"Elk River","c":"United States","y":45.3314,"x":-93.567},{"n":"Tono","c":"Japan","y":39.3275,"x":141.5336},{"n":"Onda","c":"Spain","y":39.9625,"x":-0.2639},{"n":"Idstein","c":"Germany","y":50.2206,"x":8.2692},{"n":"Rosemount","c":"United States","y":44.7465,"x":-93.0662},{"n":"Portogruaro","c":"Italy","y":45.7833,"x":12.8333},{"n":"Sezze","c":"Italy","y":41.5,"x":13.0667},{"n":"Fountain Hills","c":"United States","y":33.6073,"x":-111.7398},{"n":"Espera Feliz","c":"Brazil","y":-20.65,"x":-41.9069},{"n":"Droitwich","c":"United Kingdom","y":52.267,"x":-2.153},{"n":"Otuzco","c":"Peru","y":-7.9025,"x":-78.5657},{"n":"Cambre","c":"Spain","y":43.283,"x":-8.333},{"n":"Paoay","c":"Philippines","y":18.0553,"x":120.5161},{"n":"Agrestina","c":"Brazil","y":-8.45,"x":-35.95},{"n":"Shaqlawah","c":"Iraq","y":36.3964,"x":44.3436},{"n":"Santa Maria Tonameca","c":"Mexico","y":15.7458,"x":-96.5472},{"n":"Raahe","c":"Finland","y":64.6847,"x":24.4792},{"n":"Tarangnan","c":"Philippines","y":11.9,"x":124.75},{"n":"Socorro","c":"Colombia","y":6.4603,"x":-73.27},{"n":"Icatu","c":"Brazil","y":-2.7758,"x":-44.0658},{"n":"Quissama","c":"Brazil","y":-22.1069,"x":-41.4719},{"n":"Nedre Eiker","c":"Norway","y":59.7647,"x":10.0333},{"n":"Great Sankey","c":"United Kingdom","y":53.3918,"x":-2.6383},{"n":"Charentsavan","c":"Armenia","y":40.4097,"x":44.6431},{"n":"Delitzsch","c":"Germany","y":51.5264,"x":12.3425},{"n":"Atkarsk","c":"Russia","y":51.8667,"x":45},{"n":"Sovetskaya Gavan'","c":"Russia","y":48.9667,"x":140.2833},{"n":"Villarrobledo","c":"Spain","y":39.2667,"x":-2.6},{"n":"Belvidere","c":"United States","y":42.2544,"x":-88.8649},{"n":"Ereymentau","c":"Kazakhstan","y":51.6303,"x":73.1049},{"n":"Yuzhang","c":"China","y":25.3561,"x":105.102},{"n":"Middle River","c":"United States","y":39.3345,"x":-76.4318},{"n":"Walpole","c":"United States","y":42.1465,"x":-71.2555},{"n":"Muskego","c":"United States","y":42.886,"x":-88.1291},{"n":"Jaleshwar","c":"Nepal","y":26.6333,"x":85.8},{"n":"Wolfsberg","c":"Austria","y":46.8419,"x":14.8408},{"n":"Hazelwood","c":"United States","y":38.7931,"x":-90.3899},{"n":"Scottsbluff","c":"United States","y":41.8684,"x":-103.6616},{"n":"Tubay","c":"Philippines","y":9.165,"x":125.5226},{"n":"Pitsea","c":"United Kingdom","y":51.569,"x":0.504},{"n":"Dalupo","c":"China","y":19.3908,"x":110.4662},{"n":"Santo Tomas","c":"Peru","y":-14.45,"x":-72.082},{"n":"Saguiaran","c":"Philippines","y":8.0333,"x":124.2667},{"n":"Uaua","c":"Brazil","y":-9.8419,"x":-39.4819},{"n":"Matriz de Camarajibe","c":"Brazil","y":-9.1519,"x":-35.5328},{"n":"Krems an der Donau","c":"Austria","y":48.4167,"x":15.6167},{"n":"Whitehorse","c":"Canada","y":60.7029,"x":-135.0691},{"n":"Bialogard","c":"Poland","y":54.007,"x":15.9875},{"n":"Doctor Mora","c":"Mexico","y":21.1425,"x":-100.3192},{"n":"Sakai","c":"Japan","y":36.1,"x":139.8},{"n":"Rockaway","c":"United States","y":40.9602,"x":-74.4988},{"n":"Turnu Magurele","c":"Romania","y":43.7517,"x":24.8708},{"n":"Ridgewood","c":"United States","y":40.9822,"x":-74.1128},{"n":"Wujiaying","c":"China","y":33.1871,"x":107.048},{"n":"Piritiba","c":"Brazil","y":-11.73,"x":-40.555},{"n":"Cruz","c":"Brazil","y":-2.9178,"x":-40.1719},{"n":"Santa Maria do Para","c":"Brazil","y":-1.3519,"x":-47.5758},{"n":"Slavutych","c":"Ukraine","y":51.5206,"x":30.7569},{"n":"Yucca Valley","c":"United States","y":34.1234,"x":-116.4216},{"n":"Ridgefield","c":"United States","y":41.3065,"x":-73.5023},{"n":"Torrelodones","c":"Spain","y":40.5778,"x":-3.9278},{"n":"Iraquara","c":"Brazil","y":-12.2489,"x":-41.6189},{"n":"Branson","c":"United States","y":36.651,"x":-93.2635},{"n":"Sultepec","c":"Mexico","y":18.8667,"x":-99.95},{"n":"Dainyor","c":"Pakistan","y":35.9206,"x":74.3783},{"n":"Seaford","c":"United Kingdom","y":50.77,"x":0.1},{"n":"Uvarovo","c":"Russia","y":51.9833,"x":42.2667},{"n":"Sandomierz","c":"Poland","y":50.6833,"x":21.75},{"n":"Caransebes","c":"Romania","y":45.4214,"x":22.2219},{"n":"Ma`bar","c":"Yemen","y":14.7939,"x":44.2936},{"n":"Valparaiso","c":"Brazil","y":-21.2278,"x":-50.8678},{"n":"Eisenhuttenstadt","c":"Germany","y":52.1465,"x":14.63},{"n":"Zwevegem","c":"Belgium","y":50.8,"x":3.3333},{"n":"Balch Springs","c":"United States","y":32.7194,"x":-96.6151},{"n":"Woolwich","c":"Canada","y":43.5667,"x":-80.4833},{"n":"Ubach-Palenberg","c":"Germany","y":50.9197,"x":6.1194},{"n":"Warstein","c":"Germany","y":51.45,"x":8.3667},{"n":"Magenta","c":"Italy","y":45.4603,"x":8.8766},{"n":"Ronnenberg","c":"Germany","y":52.3194,"x":9.6556},{"n":"Santa Gertrudes","c":"Brazil","y":-22.4569,"x":-47.53},{"n":"Espelkamp","c":"Germany","y":52.3772,"x":8.6328},{"n":"Timberwood Park","c":"United States","y":29.6994,"x":-98.4838},{"n":"Olpe","c":"Germany","y":51.0289,"x":7.8514},{"n":"De Pere","c":"United States","y":44.4309,"x":-88.0785},{"n":"Ribas do Rio Pardo","c":"Brazil","y":-20.4428,"x":-53.7589},{"n":"Piranhas","c":"Brazil","y":-9.6239,"x":-37.7569},{"n":"Socastee","c":"United States","y":33.6871,"x":-79.0086},{"n":"Lagindingan","c":"Philippines","y":8.5833,"x":124.45},{"n":"Susquehanna","c":"United States","y":40.3111,"x":-76.8699},{"n":"Rishton","c":"Uzbekistan","y":40.3567,"x":71.2847},{"n":"Schmallenberg","c":"Germany","y":51.1333,"x":8.3},{"n":"Fajardo","c":"Puerto Rico","y":18.333,"x":-65.6592},{"n":"San Martin Sacatepequez","c":"Guatemala","y":14.8246,"x":-91.6425},{"n":"Madaoua","c":"Niger","y":14.0762,"x":5.9586},{"n":"Sao Joao dos Patos","c":"Brazil","y":-6.495,"x":-43.7019},{"n":"Derby","c":"United States","y":37.5571,"x":-97.2552},{"n":"Zarautz","c":"Spain","y":43.2833,"x":-2.1667},{"n":"Trebisov","c":"Slovakia","y":48.6333,"x":21.7167},{"n":"Manito","c":"Philippines","y":13.1235,"x":123.8693},{"n":"Litomerice","c":"Czechia","y":50.5336,"x":14.1319},{"n":"Betera","c":"Spain","y":39.5922,"x":-0.4625},{"n":"Plymstock","c":"United Kingdom","y":50.3569,"x":-4.09},{"n":"Shitan","c":"China","y":22.4546,"x":112.5832},{"n":"Vertou","c":"France","y":47.1689,"x":-1.4697},{"n":"Valls","c":"Spain","y":41.2883,"x":1.2508},{"n":"Wilsonville","c":"United States","y":45.3107,"x":-122.7705},{"n":"Echemmaia Est","c":"Morocco","y":32.0705,"x":-8.6532},{"n":"Wil","c":"Switzerland","y":47.4664,"x":9.0497},{"n":"Sharya","c":"Russia","y":58.3667,"x":45.5},{"n":"Ampatuan","c":"Philippines","y":6.8348,"x":124.4581},{"n":"Douar Olad. Salem","c":"Morocco","y":32.8739,"x":-8.8589},{"n":"Ottaviano","c":"Italy","y":40.85,"x":14.4775},{"n":"Ouaoula","c":"Morocco","y":31.8667,"x":-6.75},{"n":"Brookings","c":"United States","y":44.3022,"x":-96.7859},{"n":"Pavlovsk","c":"Russia","y":50.45,"x":40.0667},{"n":"Liangwu","c":"China","y":23.6012,"x":111.8238},{"n":"Evesham","c":"United Kingdom","y":52.092,"x":-1.947},{"n":"Cabrican","c":"Guatemala","y":15.0768,"x":-91.65},{"n":"Aquila","c":"Mexico","y":18.5833,"x":-103.5167},{"n":"Leoben","c":"Austria","y":47.3817,"x":15.0972},{"n":"North Laurel","c":"United States","y":39.1286,"x":-76.8476},{"n":"Breclav","c":"Czechia","y":48.759,"x":16.882},{"n":"Montevarchi","c":"Italy","y":43.5234,"x":11.5679},{"n":"Sierra Bullones","c":"Philippines","y":9.8167,"x":124.2833},{"n":"Walker","c":"United States","y":42.9853,"x":-85.7446},{"n":"Colon","c":"Argentina","y":-32.2241,"x":-58.1419},{"n":"Wyandotte","c":"United States","y":42.2113,"x":-83.1558},{"n":"Santa Rosa","c":"Colombia","y":10.4456,"x":-75.3686},{"n":"Grandview","c":"United States","y":38.8802,"x":-94.5227},{"n":"Dongxiaozhai","c":"China","y":40.1149,"x":118.1375},{"n":"Forest Lake","c":"United States","y":45.2536,"x":-92.9583},{"n":"Igreja Nova","c":"Brazil","y":-10.1253,"x":-36.6619},{"n":"Middleborough","c":"United States","y":41.8803,"x":-70.8745},{"n":"Chesapeake Beach","c":"United States","y":38.6881,"x":-76.5448},{"n":"Altavas","c":"Philippines","y":11.5333,"x":122.4833},{"n":"Palm City","c":"United States","y":27.1736,"x":-80.2861},{"n":"Pao de Acucar","c":"Brazil","y":-9.7478,"x":-37.4369},{"n":"Kulachi","c":"Pakistan","y":31.9286,"x":70.4592},{"n":"Zhuchangba","c":"China","y":26.6615,"x":106.5485},{"n":"Isernhagen-Sud","c":"Germany","y":52.4342,"x":9.8572},{"n":"Aytos","c":"Bulgaria","y":42.699,"x":27.249},{"n":"Pangil","c":"Philippines","y":14.4,"x":121.4667},{"n":"Lincoln","c":"Argentina","y":-34.85,"x":-61.5167},{"n":"Simsbury","c":"United States","y":41.8729,"x":-72.8256},{"n":"Calahorra","c":"Spain","y":42.3,"x":-1.9667},{"n":"Oga","c":"Japan","y":39.8867,"x":139.8478},{"n":"Swatara","c":"United States","y":40.2463,"x":-76.803},{"n":"Raisio","c":"Finland","y":60.4861,"x":22.1694},{"n":"Cesky Tesin","c":"Czechia","y":49.7461,"x":18.6262},{"n":"Hodonin","c":"Czechia","y":48.849,"x":17.1324},{"n":"Villanueva","c":"Colombia","y":4.6087,"x":-72.9288},{"n":"Ziketan","c":"China","y":35.5885,"x":99.9866},{"n":"Ludinghausen","c":"Germany","y":51.7681,"x":7.4444},{"n":"Kakonko","c":"Tanzania","y":-3.2796,"x":30.96},{"n":"Buy","c":"Russia","y":58.4833,"x":41.5167},{"n":"Tauramena","c":"Colombia","y":5.0167,"x":-72.75},{"n":"South Elgin","c":"United States","y":41.9906,"x":-88.3134},{"n":"Samaxi","c":"Azerbaijan","y":40.6339,"x":48.6392},{"n":"Algeciras","c":"Colombia","y":2.5219,"x":-75.3144},{"n":"Auburn Hills","c":"United States","y":42.6735,"x":-83.2447},{"n":"Cadca","c":"Slovakia","y":49.4386,"x":18.7883},{"n":"Juayua","c":"El Salvador","y":13.8436,"x":-89.746},{"n":"Ipameri","c":"Brazil","y":-17.7219,"x":-48.16},{"n":"Bela Vista","c":"Brazil","y":-22.1089,"x":-56.5208},{"n":"Ohringen","c":"Germany","y":49.2,"x":9.5},{"n":"Larvik","c":"Norway","y":59.0532,"x":10.0271},{"n":"Giulianova","c":"Italy","y":42.7525,"x":13.9567},{"n":"Vizela","c":"Portugal","y":41.3833,"x":-8.3},{"n":"Dorohoi","c":"Romania","y":47.9597,"x":26.3997},{"n":"Caninde de Sao Francisco","c":"Brazil","y":-9.6419,"x":-37.7878},{"n":"Chebba","c":"Tunisia","y":35.2372,"x":11.115},{"n":"North Tustin","c":"United States","y":33.7644,"x":-117.7945},{"n":"Igaracu do Tiete","c":"Brazil","y":-22.5092,"x":-48.5578},{"n":"Takhli","c":"Thailand","y":15.2667,"x":100.35},{"n":"Albenga","c":"Italy","y":44.0491,"x":8.213},{"n":"Arad","c":"Israel","y":31.2603,"x":35.2147},{"n":"Quirino","c":"Philippines","y":17.1333,"x":121.7},{"n":"Hastings","c":"United States","y":40.5963,"x":-98.3914},{"n":"Shangtianba","c":"China","y":28.039,"x":103.8584},{"n":"Tanglin","c":"China","y":37.4377,"x":115.8463},{"n":"Talisayan","c":"Philippines","y":8.9917,"x":124.8833},{"n":"Itabaiana","c":"Brazil","y":-7.3289,"x":-35.3328},{"n":"Las Cabras","c":"Chile","y":-34.3,"x":-71.3167},{"n":"Hannoversch Munden","c":"Germany","y":51.4167,"x":9.65},{"n":"Heiloo","c":"Netherlands","y":52.6011,"x":4.7019},{"n":"Roissy-en-Brie","c":"France","y":48.7906,"x":2.6519},{"n":"Alvares Machado","c":"Brazil","y":-22.0789,"x":-51.4719},{"n":"Sanchez-Mira","c":"Philippines","y":18.5667,"x":121.2333},{"n":"Norton Shores","c":"United States","y":43.1621,"x":-86.2519},{"n":"Kernersville","c":"United States","y":36.1066,"x":-80.0844},{"n":"Rickmansworth","c":"United Kingdom","y":51.6383,"x":-0.4659},{"n":"Windham","c":"United States","y":41.7102,"x":-72.1671},{"n":"Tairan Camp","c":"Philippines","y":6.65,"x":121.8667},{"n":"Khajuraho","c":"India","y":24.85,"x":79.9333},{"n":"Meiningen","c":"Germany","y":50.55,"x":10.4167},{"n":"Aurora","c":"Brazil","y":-6.9428,"x":-38.9678},{"n":"Yayas de Viajama","c":"Dominican Republic","y":18.6,"x":-70.92},{"n":"Sugar Hill","c":"United States","y":34.1081,"x":-84.056},{"n":"Hoensbroek","c":"Netherlands","y":50.9167,"x":5.9333},{"n":"Attendorn","c":"Germany","y":51.1264,"x":7.9033},{"n":"San Borja","c":"Bolivia","y":-14.8583,"x":-66.7475},{"n":"Pueblo Bello","c":"Colombia","y":10.4164,"x":-73.5867},{"n":"Freha","c":"Algeria","y":36.762,"x":4.3163},{"n":"Craibas","c":"Brazil","y":-9.6178,"x":-36.7678},{"n":"Emporia","c":"United States","y":38.4028,"x":-96.1924},{"n":"Nasukarasuyama","c":"Japan","y":36.6569,"x":140.1517},{"n":"Urbano Santos","c":"Brazil","y":-3.2078,"x":-43.4039},{"n":"Mekla","c":"Algeria","y":36.6876,"x":4.2681},{"n":"Sulmona","c":"Italy","y":42.048,"x":13.9262},{"n":"Zernograd","c":"Russia","y":46.85,"x":40.3},{"n":"Canhotinho","c":"Brazil","y":-8.8819,"x":-36.1908},{"n":"Prosper","c":"United States","y":33.2394,"x":-96.8087},{"n":"La Huerta","c":"Mexico","y":19.4833,"x":-104.65},{"n":"Pirajui","c":"Brazil","y":-21.9989,"x":-49.4569},{"n":"Valdivia","c":"Colombia","y":7.1636,"x":-75.4392},{"n":"Gyal","c":"Hungary","y":47.3822,"x":19.2136},{"n":"El Retorno","c":"Colombia","y":2.3306,"x":-72.6278},{"n":"Maguing","c":"Philippines","y":7.9,"x":124.4},{"n":"Cedro","c":"Brazil","y":-6.6069,"x":-39.0619},{"n":"Radauti","c":"Romania","y":47.8425,"x":25.9192},{"n":"Fossano","c":"Italy","y":44.55,"x":7.7333},{"n":"Dubnica nad Vahom","c":"Slovakia","y":48.9575,"x":18.1658},{"n":"Almansa","c":"Spain","y":38.8682,"x":-1.0979},{"n":"Vernon","c":"France","y":49.09,"x":1.49},{"n":"Itaporanga","c":"Brazil","y":-7.3039,"x":-38.15},{"n":"Kaniv","c":"Ukraine","y":49.7447,"x":31.4558},{"n":"Syke","c":"Germany","y":52.9161,"x":8.8186},{"n":"Waldshut-Tiengen","c":"Germany","y":47.6231,"x":8.2144},{"n":"Watsa","c":"Congo (Kinshasa)","y":3.04,"x":29.53},{"n":"Almonte","c":"Spain","y":37.2667,"x":-6.5167},{"n":"San Agustin Loxicha","c":"Mexico","y":16.0167,"x":-96.6167},{"n":"Waldkraiburg","c":"Germany","y":48.2167,"x":12.4},{"n":"Rathenow","c":"Germany","y":52.6,"x":12.3333},{"n":"Palmetto Bay","c":"United States","y":25.622,"x":-80.3221},{"n":"Guabiruba","c":"Brazil","y":-27.0858,"x":-48.9808},{"n":"Svishtov","c":"Bulgaria","y":43.6113,"x":25.3569},{"n":"Clarence-Rockland","c":"Canada","y":45.4833,"x":-75.2},{"n":"Mahdishahr","c":"Iran","y":35.7,"x":53.35},{"n":"Limbach-Oberfrohna","c":"Germany","y":50.8667,"x":12.75},{"n":"Copertino","c":"Italy","y":40.2667,"x":18.05},{"n":"Avon Lake","c":"United States","y":41.4945,"x":-82.016},{"n":"Pyrgos","c":"Greece","y":37.6667,"x":21.4333},{"n":"Forquilha","c":"Brazil","y":-3.7978,"x":-40.2608},{"n":"Malitbog","c":"Philippines","y":8.5333,"x":124.8833},{"n":"Neftekumsk","c":"Russia","y":44.7506,"x":44.9797},{"n":"Tamilisan","c":"Philippines","y":7.9742,"x":122.6625},{"n":"Lathrop","c":"United States","y":37.809,"x":-121.3131},{"n":"Loma Linda","c":"United States","y":34.0451,"x":-117.2498},{"n":"Natividad","c":"Philippines","y":16.05,"x":120.8167},{"n":"Pura","c":"Philippines","y":15.6248,"x":120.648},{"n":"Putten","c":"Netherlands","y":52.2579,"x":5.608},{"n":"Homer Glen","c":"United States","y":41.6044,"x":-87.9497},{"n":"Tifton","c":"United States","y":31.4625,"x":-83.5205},{"n":"Senftenberg","c":"Germany","y":51.5167,"x":14.0167},{"n":"Tocopilla","c":"Chile","y":-22.0941,"x":-70.201},{"n":"Dinuba","c":"United States","y":36.5453,"x":-119.3987},{"n":"East Hempfield","c":"United States","y":40.0825,"x":-76.3831},{"n":"Bad Soden am Taunus","c":"Germany","y":50.1424,"x":8.4997},{"n":"Bloomingdale","c":"United States","y":27.8784,"x":-82.2624},{"n":"Stroitel","c":"Russia","y":50.7833,"x":36.4833},{"n":"Amarapura","c":"Myanmar","y":21.9,"x":96.0458},{"n":"Selydove","c":"Ukraine","y":48.15,"x":37.3},{"n":"Sao Jeronimo","c":"Brazil","y":-29.9589,"x":-51.7219},{"n":"Salvaterra","c":"Brazil","y":-0.7528,"x":-48.5169},{"n":"Vulcan","c":"Romania","y":45.3811,"x":23.2914},{"n":"Porto de Mos","c":"Portugal","y":39.6,"x":-8.8167},{"n":"Hujiachi","c":"China","y":37.8917,"x":115.711},{"n":"Opelousas","c":"United States","y":30.528,"x":-92.0851},{"n":"Kotelnich","c":"Russia","y":58.3089,"x":48.3481},{"n":"Camas","c":"United States","y":45.6005,"x":-122.4305},{"n":"Orbassano","c":"Italy","y":45,"x":7.5333},{"n":"Semenov","c":"Russia","y":56.8,"x":44.5},{"n":"Harvey","c":"United States","y":41.6076,"x":-87.6521},{"n":"Trotwood","c":"United States","y":39.7927,"x":-84.3165},{"n":"West Memphis","c":"United States","y":35.1531,"x":-90.1995},{"n":"Cupira","c":"Brazil","y":-8.6169,"x":-35.95},{"n":"Qiaomaichuan","c":"China","y":39.7866,"x":113.8239},{"n":"Collinsville","c":"United States","y":38.6769,"x":-90.0059},{"n":"Longonjo","c":"Angola","y":-12.9067,"x":15.1864},{"n":"Garcia Hernandez","c":"Philippines","y":9.6144,"x":124.2946},{"n":"Mequon","c":"United States","y":43.2352,"x":-87.9838},{"n":"Joaquim Gomes","c":"Brazil","y":-9.1328,"x":-35.7478},{"n":"Ellensburg","c":"United States","y":46.9994,"x":-120.5477},{"n":"Rodniki","c":"Russia","y":57.1,"x":41.7333},{"n":"Nittedal","c":"Norway","y":60.0731,"x":10.8722},{"n":"Marple","c":"United Kingdom","y":53.397,"x":-2.061},{"n":"Ottumwa","c":"United States","y":41.0196,"x":-92.4186},{"n":"Chantilly","c":"United States","y":38.8868,"x":-77.4453},{"n":"Puerto Guzman","c":"Colombia","y":0.9636,"x":-76.4086},{"n":"Asino","c":"Russia","y":57,"x":86.15},{"n":"Al Qusayr","c":"Egypt","y":26.1091,"x":34.276},{"n":"Shelbyville","c":"United States","y":38.2069,"x":-85.2293},{"n":"Buturlinovka","c":"Russia","y":50.825,"x":40.5889},{"n":"Goulburn","c":"Australia","y":-34.7547,"x":149.6186},{"n":"Pedra Azul","c":"Brazil","y":-16.005,"x":-41.2969},{"n":"Westford","c":"United States","y":42.5864,"x":-71.4401},{"n":"La Montanita","c":"Colombia","y":1.4792,"x":-75.4361},{"n":"Orchards","c":"United States","y":45.689,"x":-122.5306},{"n":"Goirle","c":"Netherlands","y":51.5203,"x":5.0671},{"n":"Neropolis","c":"Brazil","y":-16.4058,"x":-49.2189},{"n":"Dole","c":"France","y":47.0931,"x":5.4906},{"n":"Nueva Paz","c":"Cuba","y":22.7667,"x":-81.75},{"n":"Inhapim","c":"Brazil","y":-19.5489,"x":-42.12},{"n":"Douar 'Ayn Dfali","c":"Morocco","y":33.95,"x":-4.45},{"n":"Rimavska Sobota","c":"Slovakia","y":48.3814,"x":20.02},{"n":"Calpe","c":"Spain","y":38.645,"x":0.0442},{"n":"Novo Aripuana","c":"Brazil","y":-5.1214,"x":-60.3806},{"n":"Donmatias","c":"Colombia","y":6.4858,"x":-75.3953},{"n":"Cogua","c":"Colombia","y":5.0619,"x":-73.9794},{"n":"Alfter","c":"Germany","y":50.7356,"x":7.0092},{"n":"Saint-Laurent-du-Maroni","c":"French Guiana","y":5.4976,"x":-54.0325},{"n":"Sao Lourenco d'Oeste","c":"Brazil","y":-26.3589,"x":-52.8508},{"n":"Manage","c":"Belgium","y":50.5,"x":4.2333},{"n":"Port Angeles","c":"United States","y":48.1142,"x":-123.4565},{"n":"Marsella","c":"Colombia","y":4.9367,"x":-75.7392},{"n":"Biancavilla","c":"Italy","y":37.6453,"x":14.8636},{"n":"Sun City Center","c":"United States","y":27.7149,"x":-82.3569},{"n":"Sarangani","c":"Philippines","y":5.4,"x":125.4667},{"n":"Inkster","c":"United States","y":42.2935,"x":-83.3148},{"n":"Wednesfield","c":"United Kingdom","y":52.5998,"x":-2.0817},{"n":"Dazhuang","c":"China","y":38.6951,"x":115.6067},{"n":"Ponca City","c":"United States","y":36.7235,"x":-97.0679},{"n":"Catano","c":"Puerto Rico","y":18.4415,"x":-66.1388},{"n":"Gazojak","c":"Turkmenistan","y":41.1833,"x":61.4},{"n":"Tecolutla","c":"Mexico","y":20.4797,"x":-97.01},{"n":"Solsona","c":"Philippines","y":18.1,"x":120.7667},{"n":"Oiapoque","c":"Brazil","y":3.8428,"x":-51.835},{"n":"Camillus","c":"United States","y":43.0539,"x":-76.3057},{"n":"West Melbourne","c":"United States","y":28.0693,"x":-80.6734},{"n":"Warrington","c":"United States","y":40.2489,"x":-75.158},{"n":"Feriana","c":"Tunisia","y":34.9431,"x":8.5625},{"n":"Faribault","c":"United States","y":44.2985,"x":-93.2786},{"n":"San Benito","c":"United States","y":26.1298,"x":-97.644},{"n":"Fort Washington","c":"United States","y":38.7339,"x":-77.0069},{"n":"Diest","c":"Belgium","y":50.9847,"x":5.0514},{"n":"Ibirapitanga","c":"Brazil","y":-14.1639,"x":-39.3739},{"n":"Pietrasanta","c":"Italy","y":43.9452,"x":10.2183},{"n":"Lincolnton","c":"United States","y":35.4747,"x":-81.2385},{"n":"Halfmoon","c":"United States","y":42.864,"x":-73.7275},{"n":"Bierun Stary","c":"Poland","y":50.0897,"x":19.0928},{"n":"Simpsonville","c":"United States","y":34.7287,"x":-82.2573},{"n":"Ivrea","c":"Italy","y":45.4622,"x":7.8747},{"n":"Setti Fatma","c":"Morocco","y":31.2256,"x":-7.6758},{"n":"Krychaw","c":"Belarus","y":53.7194,"x":31.7139},{"n":"Varel","c":"Germany","y":53.3969,"x":8.1361},{"n":"Uchquduq Shahri","c":"Uzbekistan","y":42.1567,"x":63.5556},{"n":"Scotch Plains","c":"United States","y":40.6332,"x":-74.3739},{"n":"San Marcos","c":"Nicaragua","y":11.9167,"x":-86.2},{"n":"Waverly","c":"United States","y":42.7401,"x":-84.6353},{"n":"Huilongping","c":"China","y":28.1887,"x":106.2086},{"n":"Skoura","c":"Morocco","y":31.0672,"x":-6.5397},{"n":"Rugeley","c":"United Kingdom","y":52.7599,"x":-1.9388},{"n":"Angatuba","c":"Brazil","y":-23.4903,"x":-48.4128},{"n":"Salqin","c":"Syria","y":36.1394,"x":36.4539},{"n":"Guaiuba","c":"Brazil","y":-4.04,"x":-38.6369},{"n":"Lihe","c":"China","y":34.009,"x":105.3416},{"n":"Diu","c":"India","y":20.7197,"x":70.9904},{"n":"Baiheqiao","c":"China","y":22.9764,"x":103.7982},{"n":"Schijndel","c":"Netherlands","y":51.6183,"x":5.4364},{"n":"Stjordal","c":"Norway","y":63.475,"x":11.1708},{"n":"Grootfontein","c":"Namibia","y":-19.5658,"x":18.1036},{"n":"Gauripur","c":"India","y":26.08,"x":89.97},{"n":"Ashton in Makerfield","c":"United Kingdom","y":53.487,"x":-2.641},{"n":"Rioblanco","c":"Colombia","y":3.5292,"x":-75.6447},{"n":"Quedlinburg","c":"Germany","y":51.7917,"x":11.1472},{"n":"Fishkill","c":"United States","y":41.5129,"x":-73.9271},{"n":"Fort Saskatchewan","c":"Canada","y":53.7128,"x":-113.2133},{"n":"Okemos","c":"United States","y":42.7057,"x":-84.4135},{"n":"Sao Jose da Laje","c":"Brazil","y":-9.01,"x":-36.0578},{"n":"Upper Macungie","c":"United States","y":40.5694,"x":-75.6244},{"n":"Suonan","c":"China","y":35.6634,"x":103.3923},{"n":"Ibicarai","c":"Brazil","y":-14.865,"x":-39.5878},{"n":"Al Jawf","c":"Libya","y":24.2167,"x":23.3},{"n":"Castiglione delle Stiviere","c":"Italy","y":45.4,"x":10.5},{"n":"Sattahip","c":"Thailand","y":12.6636,"x":100.9036},{"n":"Zolochiv","c":"Ukraine","y":49.8075,"x":24.9031},{"n":"Beni Amrane","c":"Algeria","y":36.6686,"x":3.5922},{"n":"Formby","c":"United Kingdom","y":53.5586,"x":-3.0666},{"n":"Upper Moreland","c":"United States","y":40.1572,"x":-75.1021},{"n":"Monte Siao","c":"Brazil","y":-22.4328,"x":-46.5728},{"n":"Sonneberg","c":"Germany","y":50.35,"x":11.1667},{"n":"Dobeln","c":"Germany","y":51.1194,"x":13.1128},{"n":"Amstetten","c":"Austria","y":48.1167,"x":14.8667},{"n":"Burgos","c":"Philippines","y":17.0667,"x":121.7},{"n":"Koilkuntla","c":"India","y":15.2333,"x":78.3167},{"n":"Vaterstetten","c":"Germany","y":48.105,"x":11.7706},{"n":"Ridgeland","c":"United States","y":32.4236,"x":-90.1481},{"n":"North Platte","c":"United States","y":41.1266,"x":-100.764},{"n":"As Sulayyil","c":"Saudi Arabia","y":20.4623,"x":45.5722},{"n":"Borne","c":"Netherlands","y":52.3,"x":6.75},{"n":"Charles Town","c":"United States","y":39.2745,"x":-77.8632},{"n":"Waukee","c":"United States","y":41.5984,"x":-93.8872},{"n":"Mina","c":"Philippines","y":10.9333,"x":122.5833},{"n":"Husum","c":"Germany","y":54.4769,"x":9.0511},{"n":"Montecchio Maggiore","c":"Italy","y":45.5037,"x":11.412},{"n":"Mentana","c":"Italy","y":42.0337,"x":12.6444},{"n":"Tupancireta","c":"Brazil","y":-29.0808,"x":-53.8358},{"n":"Selvazzano Dentro","c":"Italy","y":45.3833,"x":11.7833},{"n":"Rio Tinto","c":"Brazil","y":-6.8028,"x":-35.0808},{"n":"Cachoeira do Arari","c":"Brazil","y":-1.0108,"x":-48.9628},{"n":"Noto","c":"Italy","y":36.8833,"x":15.0833},{"n":"Talugtug","c":"Philippines","y":15.7789,"x":120.8111},{"n":"Bayang","c":"Philippines","y":7.793,"x":124.192},{"n":"Litvinov","c":"Czechia","y":50.6008,"x":13.6112},{"n":"Ban Phru","c":"Thailand","y":6.948,"x":100.4794},{"n":"Ventimiglia","c":"Italy","y":43.7903,"x":7.6083},{"n":"Bognor Regis","c":"United Kingdom","y":50.7824,"x":-0.6764},{"n":"Zawyat an Nwacer","c":"Morocco","y":33.3611,"x":-7.6114},{"n":"Sao Miguel do Guapore","c":"Brazil","y":-11.6936,"x":-62.7114},{"n":"Tayga","c":"Russia","y":56.0667,"x":85.6167},{"n":"Tres Passos","c":"Brazil","y":-27.4558,"x":-53.9319},{"n":"South Plainfield","c":"United States","y":40.5748,"x":-74.4153},{"n":"Konstancin-Jeziorna","c":"Poland","y":52.0938,"x":21.1176},{"n":"Wadsworth","c":"United States","y":41.0279,"x":-81.7324},{"n":"Dapa","c":"Philippines","y":9.7667,"x":126.05},{"n":"Quatro Barras","c":"Brazil","y":-25.3658,"x":-49.0769},{"n":"Kourou","c":"French Guiana","y":5.16,"x":-52.6499},{"n":"Horley","c":"United Kingdom","y":51.174,"x":-0.172},{"n":"Puerto San Jose","c":"Guatemala","y":13.9333,"x":-90.8167},{"n":"Ocara","c":"Brazil","y":-4.4908,"x":-38.5969},{"n":"Mairena del Alcor","c":"Spain","y":37.3667,"x":-5.7333},{"n":"Piracanjuba","c":"Brazil","y":-17.3028,"x":-49.0178},{"n":"Nava","c":"Mexico","y":28.4214,"x":-100.7675},{"n":"Grande-Synthe","c":"France","y":51.0139,"x":2.3028},{"n":"Bormujos","c":"Spain","y":37.3667,"x":-6.0667},{"n":"Tumwater","c":"United States","y":46.989,"x":-122.9173},{"n":"Fairfax","c":"United States","y":38.8531,"x":-77.2998},{"n":"Cranford","c":"United States","y":40.6564,"x":-74.3036},{"n":"Hoh Ereg","c":"China","y":41.0955,"x":111.4408},{"n":"Picarras","c":"Brazil","y":-26.75,"x":-48.6667},{"n":"Candler-McAfee","c":"United States","y":33.7267,"x":-84.2723},{"n":"East Gwillimbury","c":"Canada","y":44.1333,"x":-79.4167},{"n":"Venice","c":"United States","y":27.1163,"x":-82.4135},{"n":"Calw","c":"Germany","y":48.7144,"x":8.7375},{"n":"Lanester","c":"France","y":47.7647,"x":-3.3422},{"n":"Tres Coroas","c":"Brazil","y":-29.5169,"x":-50.7778},{"n":"Kelishad va Sudarjan","c":"Iran","y":32.5542,"x":51.525},{"n":"Hajduszoboszlo","c":"Hungary","y":47.45,"x":21.3833},{"n":"Macaparana","c":"Brazil","y":-7.555,"x":-35.4528},{"n":"El Zulia","c":"Colombia","y":7.9325,"x":-72.6025},{"n":"Harmanli","c":"Bulgaria","y":41.9238,"x":25.9183},{"n":"Jawor","c":"Poland","y":51.05,"x":16.1833},{"n":"Wright","c":"United States","y":30.4445,"x":-86.6419},{"n":"Aldeias Altas","c":"Brazil","y":-4.6278,"x":-43.4708},{"n":"Wajimazakimachi","c":"Japan","y":37.3906,"x":136.8992},{"n":"Hollola","c":"Finland","y":60.9886,"x":25.5128},{"n":"Kalach-na-Donu","c":"Russia","y":48.6833,"x":43.5333},{"n":"Anchieta","c":"Brazil","y":-20.8056,"x":-40.6444},{"n":"Sao Goncalo do Sapucai","c":"Brazil","y":-21.8919,"x":-45.595},{"n":"Laje","c":"Brazil","y":-13.1819,"x":-39.425},{"n":"La Mana","c":"Ecuador","y":-0.9417,"x":-79.2347},{"n":"Haren","c":"Germany","y":52.7667,"x":7.2167},{"n":"Ibi","c":"Spain","y":38.6272,"x":-0.5753},{"n":"Bogotol","c":"Russia","y":56.2,"x":89.5167},{"n":"Maldegem","c":"Belgium","y":51.2089,"x":3.4464},{"n":"Caras","c":"Peru","y":-9.0483,"x":-77.8108},{"n":"Lincolnia","c":"United States","y":38.8158,"x":-77.1543},{"n":"Tres de Maio","c":"Brazil","y":-27.7728,"x":-54.24},{"n":"Capoterra","c":"Italy","y":39.1752,"x":8.9709},{"n":"Nanxingguo","c":"China","y":37.6306,"x":114.4857},{"n":"Sokolov","c":"Czechia","y":50.1814,"x":12.6402},{"n":"Corinto","c":"Brazil","y":-18.3808,"x":-44.4558},{"n":"Westchase","c":"United States","y":28.0597,"x":-82.611},{"n":"Poco Verde","c":"Brazil","y":-10.7078,"x":-38.1828},{"n":"Upper Providence","c":"United States","y":40.1655,"x":-75.4889},{"n":"Tlacolula","c":"Mexico","y":20,"x":-97},{"n":"Bambui","c":"Brazil","y":-20.0058,"x":-45.9769},{"n":"North Potomac","c":"United States","y":39.0955,"x":-77.2372},{"n":"Honda","c":"Colombia","y":5.2069,"x":-74.7367},{"n":"Si Racha","c":"Thailand","y":13.1744,"x":100.9306},{"n":"Corsicana","c":"United States","y":32.0824,"x":-96.4665},{"n":"Monte Aprazivel","c":"Brazil","y":-20.7728,"x":-49.7139},{"n":"Seal Beach","c":"United States","y":33.7542,"x":-118.0714},{"n":"Comapa","c":"Guatemala","y":14.1146,"x":-89.9115},{"n":"Pagudpud","c":"Philippines","y":18.5583,"x":120.7847},{"n":"Combs-la-Ville","c":"France","y":48.67,"x":2.56},{"n":"San Miguel Ocotenco","c":"Mexico","y":18.9833,"x":-97.45},{"n":"Ciudad Serdan","c":"Mexico","y":18.9833,"x":-97.45},{"n":"Fort Dodge","c":"United States","y":42.5098,"x":-94.1751},{"n":"Bad Mergentheim","c":"Germany","y":49.5,"x":9.7667},{"n":"Mirandela","c":"Portugal","y":41.4833,"x":-7.1833},{"n":"Jurh","c":"China","y":44.6961,"x":120.5123},{"n":"Qift","c":"Egypt","y":26,"x":32.8167},{"n":"Starnberg","c":"Germany","y":47.9972,"x":11.3406},{"n":"Oostkamp","c":"Belgium","y":51.1544,"x":3.2353},{"n":"Dunkirk","c":"United States","y":42.4803,"x":-79.3323},{"n":"Khenichet-sur Ouerrha","c":"Morocco","y":34.4383,"x":-5.6844},{"n":"Douar Ouled Ayad","c":"Morocco","y":32.4167,"x":-7.1},{"n":"Zemst","c":"Belgium","y":50.9828,"x":4.4611},{"n":"Nyuzen","c":"Japan","y":36.9375,"x":137.5006},{"n":"Zeya","c":"Russia","y":53.7333,"x":127.25},{"n":"Bazhajiemicun","c":"China","y":38.8967,"x":77.6529},{"n":"Carambei","c":"Brazil","y":-24.9178,"x":-50.0969},{"n":"Calabasas","c":"United States","y":34.1375,"x":-118.6689},{"n":"Chalmette","c":"United States","y":29.9437,"x":-89.9659},{"n":"Bobon","c":"Philippines","y":12.5167,"x":124.5667},{"n":"Raul Soares","c":"Brazil","y":-20.1019,"x":-42.4528},{"n":"Los Barrios","c":"Spain","y":36.1833,"x":-5.4833},{"n":"Lustenau","c":"Austria","y":47.4271,"x":9.6711},{"n":"Berehove","c":"Ukraine","y":48.2025,"x":22.6375},{"n":"North Augusta","c":"United States","y":33.5214,"x":-81.9547},{"n":"Palm River-Clair Mel","c":"United States","y":27.9239,"x":-82.3791},{"n":"Stepanavan","c":"Armenia","y":41.0075,"x":44.3867},{"n":"Alexania","c":"Brazil","y":-16.0819,"x":-48.5069},{"n":"Chrudim","c":"Czechia","y":49.9511,"x":15.7956},{"n":"Oldebroek","c":"Netherlands","y":52.4667,"x":5.9167},{"n":"Ostrow Mazowiecka","c":"Poland","y":52.8,"x":21.9},{"n":"Ayuquitan","c":"Philippines","y":9.4644,"x":123.2237},{"n":"Jucas","c":"Brazil","y":-6.525,"x":-39.5278},{"n":"Kafr Sa`d","c":"Egypt","y":31.3557,"x":31.6848},{"n":"El Maknassi","c":"Tunisia","y":34.6042,"x":9.6056},{"n":"Bedburg","c":"Germany","y":51,"x":6.5625},{"n":"Mirandola","c":"Italy","y":44.8873,"x":11.066},{"n":"Mount Pocono","c":"United States","y":41.1225,"x":-75.3582},{"n":"Olopa","c":"Guatemala","y":14.6833,"x":-89.35},{"n":"Tugaya","c":"Philippines","y":7.884,"x":124.172},{"n":"Abbeville","c":"France","y":50.1058,"x":1.8358},{"n":"Sao Sepe","c":"Brazil","y":-30.1608,"x":-53.565},{"n":"Makouda","c":"Algeria","y":36.7909,"x":4.0669},{"n":"Brody","c":"Ukraine","y":50.0781,"x":25.1542},{"n":"Quartier Militaire","c":"Mauritius","y":-20.25,"x":57.55},{"n":"Carai","c":"Brazil","y":-17.1889,"x":-41.695},{"n":"Sao Miguel","c":"Brazil","y":-6.2119,"x":-38.4969},{"n":"Dumaran","c":"Philippines","y":10.5333,"x":119.7667},{"n":"Lincoln","c":"Canada","y":43.13,"x":-79.43},{"n":"Novy Jicin","c":"Czechia","y":49.5944,"x":18.0103},{"n":"Garopaba","c":"Brazil","y":-28.0228,"x":-48.6128},{"n":"Santa Lucia Utatlan","c":"Guatemala","y":14.7667,"x":-91.2667},{"n":"Loon op Zand","c":"Netherlands","y":51.6275,"x":5.0758},{"n":"Dancagan","c":"Philippines","y":7.6167,"x":125},{"n":"Marple","c":"United States","y":39.9654,"x":-75.3658},{"n":"Farragut","c":"United States","y":35.8731,"x":-84.1822},{"n":"Mosbach","c":"Germany","y":49.35,"x":9.1333},{"n":"Korbach","c":"Germany","y":51.2719,"x":8.8731},{"n":"Belmonte","c":"Brazil","y":-15.8628,"x":-38.8828},{"n":"Kuvandyk","c":"Russia","y":51.4833,"x":57.35},{"n":"Hachimantai","c":"Japan","y":39.9264,"x":141.0953},{"n":"Kalayaan","c":"Philippines","y":14.35,"x":121.5667},{"n":"Jenks","c":"United States","y":35.9981,"x":-95.9737},{"n":"Piat","c":"Philippines","y":17.7917,"x":121.475},{"n":"Kayapa","c":"Philippines","y":16.4167,"x":120.9167},{"n":"Ceccano","c":"Italy","y":41.5667,"x":13.3333},{"n":"Joao Lisboa","c":"Brazil","y":-5.4478,"x":-47.4008},{"n":"Maracas","c":"Brazil","y":-13.4408,"x":-40.4308},{"n":"Luninyets","c":"Belarus","y":52.25,"x":26.8},{"n":"Fria","c":"Guinea","y":10.3804,"x":-13.55},{"n":"Oulad Hassoune","c":"Morocco","y":31.6503,"x":-7.8361},{"n":"Gueznaia","c":"Morocco","y":35.72,"x":-5.894},{"n":"Herdecke","c":"Germany","y":51.4,"x":7.4333},{"n":"Ayancik","c":"Turkey","y":41.95,"x":34.5833},{"n":"Kalawit","c":"Philippines","y":7.9051,"x":122.5279},{"n":"Palatka","c":"United States","y":29.6493,"x":-81.6705},{"n":"Tatarsk","c":"Russia","y":55.2167,"x":75.9667},{"n":"Tamandare","c":"Brazil","y":-8.76,"x":-35.105},{"n":"Salzwedel","c":"Germany","y":52.85,"x":11.15},{"n":"Coronado","c":"United States","y":32.664,"x":-117.16},{"n":"Ayt Mohamed","c":"Morocco","y":32.5667,"x":-6.9833},{"n":"Lubartow","c":"Poland","y":51.4667,"x":22.6},{"n":"Rio Formoso","c":"Brazil","y":-8.6639,"x":-35.1589},{"n":"North Haven","c":"United States","y":41.3818,"x":-72.8573},{"n":"Sao Joao do Paraiso","c":"Brazil","y":-15.3139,"x":-42.0139},{"n":"Khromtau","c":"Kazakhstan","y":50.2699,"x":58.45},{"n":"Gamay","c":"Philippines","y":12.3833,"x":125.3},{"n":"San Juan Cotzocon","c":"Mexico","y":17.1667,"x":-95.7833},{"n":"Freudenstadt","c":"Germany","y":48.4633,"x":8.4111},{"n":"Nagykoros","c":"Hungary","y":47.0331,"x":19.7839},{"n":"Bauta","c":"Cuba","y":22.9919,"x":-82.5492},{"n":"Centerville","c":"United States","y":39.6339,"x":-84.1449},{"n":"Maracaju","c":"Brazil","y":-21.61,"x":-55.18},{"n":"Kreuzlingen","c":"Switzerland","y":47.6458,"x":9.1783},{"n":"Taraka","c":"Philippines","y":7.8994,"x":124.3481},{"n":"Juchitepec","c":"Mexico","y":19.0997,"x":-98.8792},{"n":"Lupeni","c":"Romania","y":45.3603,"x":23.2383},{"n":"Ladario","c":"Brazil","y":-19.005,"x":-57.6019},{"n":"Santo Antonio do Ica","c":"Brazil","y":-3.1019,"x":-67.94},{"n":"Sredneuralsk","c":"Russia","y":56.9833,"x":60.4667},{"n":"Van Buren","c":"United States","y":35.448,"x":-94.3528},{"n":"Greeneville","c":"United States","y":36.168,"x":-82.8197},{"n":"Tata","c":"Hungary","y":47.65,"x":18.3167},{"n":"Waycross","c":"United States","y":31.2108,"x":-82.3579},{"n":"Koziatyn","c":"Ukraine","y":49.7167,"x":28.8333},{"n":"Partizanske","c":"Slovakia","y":48.6333,"x":18.3667},{"n":"Inaja","c":"Brazil","y":-8.903,"x":-37.827},{"n":"Soledad Atzompa","c":"Mexico","y":18.755,"x":-97.1522},{"n":"Juchen","c":"Germany","y":51.1011,"x":6.5017},{"n":"Bulle","c":"Switzerland","y":46.6167,"x":7.05},{"n":"Poggiomarino","c":"Italy","y":40.8,"x":14.55},{"n":"Epernay","c":"France","y":49.0403,"x":3.96},{"n":"Carletonville","c":"South Africa","y":-26.3581,"x":27.3981},{"n":"Half Moon Bay","c":"United States","y":37.4688,"x":-122.4383},{"n":"Krnov","c":"Czechia","y":50.0897,"x":17.7039},{"n":"Hingham","c":"United States","y":42.2176,"x":-70.8854},{"n":"Santo Amaro da Imperatriz","c":"Brazil","y":-27.6878,"x":-48.7789},{"n":"Vigonza","c":"Italy","y":45.45,"x":11.9833},{"n":"Zheleznogorsk-Ilimskiy","c":"Russia","y":56.5833,"x":104.1167},{"n":"Dillenburg","c":"Germany","y":50.7333,"x":8.2833},{"n":"Belton","c":"United States","y":38.8193,"x":-94.5334},{"n":"Qianmotou","c":"China","y":37.7952,"x":115.4905},{"n":"Lentini","c":"Italy","y":37.2833,"x":15},{"n":"Baglung","c":"Nepal","y":28.2667,"x":83.5833},{"n":"Fucecchio","c":"Italy","y":43.7333,"x":10.8},{"n":"Jacksonville Beach","c":"United States","y":30.2782,"x":-81.4045},{"n":"Coronel Suarez","c":"Argentina","y":-37.4547,"x":-61.9334},{"n":"Acton","c":"United States","y":42.4843,"x":-71.4378},{"n":"Sehnde","c":"Germany","y":52.3161,"x":9.9642},{"n":"Havlickuv Brod","c":"Czechia","y":49.6079,"x":15.5807},{"n":"Herzogenaurach","c":"Germany","y":49.5667,"x":10.8833},{"n":"Ilion","c":"United States","y":43.0114,"x":-75.0396},{"n":"Kulgam","c":"India","y":33.64,"x":75.02},{"n":"Kato Polemidia","c":"Cyprus","y":34.6931,"x":32.9992},{"n":"Macia","c":"Mozambique","y":-25.0333,"x":33.1},{"n":"Sobradinho","c":"Brazil","y":-9.455,"x":-40.8228},{"n":"Vilaseca de Solcina","c":"Spain","y":41.111,"x":1.145},{"n":"Seymour","c":"United States","y":38.9476,"x":-85.891},{"n":"Ipatovo","c":"Russia","y":45.7167,"x":42.9},{"n":"Bronnitsy","c":"Russia","y":55.422,"x":38.2631},{"n":"Severobaykalsk","c":"Russia","y":55.6333,"x":109.3167},{"n":"Zarnesti","c":"Romania","y":45.5725,"x":25.3431},{"n":"Xiaping","c":"China","y":24.6168,"x":112.5945},{"n":"Liria","c":"Spain","y":39.6258,"x":-0.5961},{"n":"Gelnhausen","c":"Germany","y":50.2027,"x":9.1905},{"n":"Unecha","c":"Russia","y":52.85,"x":32.6833},{"n":"Cacule","c":"Brazil","y":-14.5028,"x":-42.2219},{"n":"Madisonville","c":"United States","y":37.3408,"x":-87.5034},{"n":"Canalete","c":"Colombia","y":8.79,"x":-76.2411},{"n":"Alcala","c":"Colombia","y":4.6736,"x":-75.7825},{"n":"Romulus","c":"United States","y":42.2237,"x":-83.366},{"n":"Kefar Yona","c":"Israel","y":32.315,"x":34.9328},{"n":"Wallenhorst","c":"Germany","y":52.35,"x":8.0167},{"n":"San Ignacio de Velasco","c":"Bolivia","y":-16.3667,"x":-60.95},{"n":"El Paso","c":"Colombia","y":9.6622,"x":-73.7519},{"n":"Alegria","c":"Philippines","y":9.7243,"x":123.3402},{"n":"Bni Frassen","c":"Morocco","y":34.3819,"x":-4.3761},{"n":"Icod de los Vinos","c":"Spain","y":28.35,"x":-16.7},{"n":"Troyan","c":"Bulgaria","y":42.8844,"x":24.7094},{"n":"Floridia","c":"Italy","y":37.0833,"x":15.15},{"n":"Hisor","c":"Tajikistan","y":38.5264,"x":68.5381},{"n":"Leland","c":"United States","y":34.2044,"x":-78.0277},{"n":"Brodosqui","c":"Brazil","y":-20.9908,"x":-47.6589},{"n":"Laguna de Duero","c":"Spain","y":41.5833,"x":-4.7167},{"n":"Ternate","c":"Philippines","y":14.2833,"x":120.7167},{"n":"Elektrogorsk","c":"Russia","y":55.8833,"x":38.7833},{"n":"Ahualulco de Mercado","c":"Mexico","y":20.6992,"x":-103.9556},{"n":"Cessnock","c":"Australia","y":-32.8342,"x":151.3555},{"n":"Rolling Meadows","c":"United States","y":42.0747,"x":-88.0252},{"n":"Megara","c":"Greece","y":38,"x":23.3333},{"n":"Bondo","c":"Congo (Kinshasa)","y":3.81,"x":23.67},{"n":"Davlekanovo","c":"Russia","y":54.2167,"x":55.0333},{"n":"Nijlen","c":"Belgium","y":51.1611,"x":4.6703},{"n":"Andoany","c":"Madagascar","y":-13.4,"x":48.2666},{"n":"Wekiwa Springs","c":"United States","y":28.6984,"x":-81.4251},{"n":"Jieshang","c":"China","y":26.2663,"x":104.6671},{"n":"Northdale","c":"United States","y":28.1058,"x":-82.5263},{"n":"Fort Hood","c":"United States","y":31.1345,"x":-97.7797},{"n":"Benbrook","c":"United States","y":32.6787,"x":-97.4638},{"n":"Nagtipunan","c":"Philippines","y":16.2167,"x":121.6},{"n":"Medeiros Neto","c":"Brazil","y":-17.3739,"x":-40.2208},{"n":"Limbuhan","c":"Philippines","y":11.9,"x":124.0333},{"n":"Tirat Karmel","c":"Israel","y":32.7667,"x":34.9667},{"n":"Arbroath","c":"United Kingdom","y":56.561,"x":-2.586},{"n":"Zion","c":"United States","y":42.4598,"x":-87.8509},{"n":"San Rafael del Sur","c":"Nicaragua","y":11.85,"x":-86.45},{"n":"Lensk","c":"Russia","y":60.7167,"x":114.9},{"n":"Frontignan","c":"France","y":43.4483,"x":3.7561},{"n":"Sederot","c":"Israel","y":31.5261,"x":34.5939},{"n":"Montrose","c":"United States","y":38.469,"x":-107.859},{"n":"Neihuzhai","c":"China","y":22.9745,"x":115.8343},{"n":"Conceicao de Macabu","c":"Brazil","y":-22.085,"x":-41.8678},{"n":"San Feliu de Guixols","c":"Spain","y":41.7806,"x":3.0306},{"n":"Labrador","c":"Philippines","y":16.0339,"x":120.1392},{"n":"Frascati","c":"Italy","y":41.8167,"x":12.6833},{"n":"Brotas","c":"Brazil","y":-22.2839,"x":-48.1269},{"n":"Ortona","c":"Italy","y":42.3557,"x":14.4036},{"n":"Riehen","c":"Switzerland","y":47.5794,"x":7.6512},{"n":"Ruwa","c":"Zimbabwe","y":-17.8897,"x":31.2447},{"n":"Veinticinco de Mayo","c":"Argentina","y":-35.4167,"x":-60.1667},{"n":"Teorama","c":"Colombia","y":8.4353,"x":-73.2864},{"n":"Arnold","c":"United States","y":39.0437,"x":-76.4974},{"n":"Cordeiropolis","c":"Brazil","y":-22.4819,"x":-47.4569},{"n":"Avon","c":"United States","y":41.4485,"x":-82.0187},{"n":"Tanki Leendert","c":"Aruba","y":12.5418,"x":-70.022},{"n":"Horgen","c":"Switzerland","y":47.2608,"x":8.5975},{"n":"Peritoro","c":"Brazil","y":-4.3828,"x":-44.3328},{"n":"San Felipe","c":"Philippines","y":15.0619,"x":120.07},{"n":"Ortigueira","c":"Brazil","y":-24.2078,"x":-50.9489},{"n":"Achkhoy-Martan","c":"Russia","y":43.1939,"x":45.2833},{"n":"San Lorenzo de Esmeraldas","c":"Ecuador","y":1.2864,"x":-78.8353},{"n":"Godalming","c":"United Kingdom","y":51.18,"x":-0.61},{"n":"Tobati","c":"Paraguay","y":-25.26,"x":-57.0814},{"n":"Loves Park","c":"United States","y":42.3364,"x":-88.9975},{"n":"Dunajska Streda","c":"Slovakia","y":47.9961,"x":17.6147},{"n":"Canico","c":"Portugal","y":32.6412,"x":-16.8504},{"n":"Rawtenstall","c":"United Kingdom","y":53.699,"x":-2.291},{"n":"Ban Bang Rin","c":"Thailand","y":9.9532,"x":98.6344},{"n":"La Prairie","c":"Canada","y":45.42,"x":-73.5},{"n":"Ponedera","c":"Colombia","y":10.6419,"x":-74.7531},{"n":"Palmeiras de Goias","c":"Brazil","y":-16.805,"x":-49.9258},{"n":"Thorigny-sur-Marne","c":"France","y":48.8788,"x":2.7075},{"n":"Yarmouth","c":"United States","y":41.6767,"x":-70.2249},{"n":"Vero Beach South","c":"United States","y":27.6164,"x":-80.413},{"n":"Lermontov","c":"Russia","y":44.1053,"x":42.9717},{"n":"Vilnohirsk","c":"Ukraine","y":48.4824,"x":34.0189},{"n":"Netphen","c":"Germany","y":50.9147,"x":8.1},{"n":"Alcobaca","c":"Brazil","y":-17.5189,"x":-39.1958},{"n":"Oliveira do Bairro","c":"Portugal","y":40.5167,"x":-8.5},{"n":"Puchheim","c":"Germany","y":48.15,"x":11.35},{"n":"Jiucangzhou","c":"China","y":38.206,"x":117.0239},{"n":"Calverley","c":"United Kingdom","y":53.8266,"x":-1.6908},{"n":"Qatana","c":"Syria","y":33.4333,"x":36.0833},{"n":"Sheyban","c":"Iran","y":31.4086,"x":48.7942},{"n":"Sao Joao de Pirabas","c":"Brazil","y":-0.7689,"x":-47.1739},{"n":"Itaocara","c":"Brazil","y":-21.6789,"x":-42.0819},{"n":"Shiling","c":"China","y":27.3576,"x":105.1535},{"n":"Qiryat Mal'akhi","c":"Israel","y":31.7333,"x":34.75},{"n":"Lisle","c":"United States","y":41.7918,"x":-88.0888},{"n":"Riachao das Neves","c":"Brazil","y":-11.7458,"x":-44.91},{"n":"Jabonga","c":"Philippines","y":9.3431,"x":125.5156},{"n":"Oud-Zuilen","c":"Netherlands","y":52.1272,"x":5.0694},{"n":"Sevan","c":"Armenia","y":40.555,"x":44.9536},{"n":"El Tejar","c":"Guatemala","y":14.65,"x":-90.8},{"n":"Qiryat Shemona","c":"Israel","y":33.2075,"x":35.5697},{"n":"Eschborn","c":"Germany","y":50.1437,"x":8.569},{"n":"Tambau","c":"Brazil","y":-21.705,"x":-47.2739},{"n":"Kolo","c":"Poland","y":52.2,"x":18.6333},{"n":"Tototlan","c":"Mexico","y":20.5333,"x":-102.7833},{"n":"East Retford","c":"United Kingdom","y":53.3228,"x":-0.9431},{"n":"Senador Guiomard","c":"Brazil","y":-10.1497,"x":-67.7374},{"n":"Loanda","c":"Brazil","y":-22.9228,"x":-53.1369},{"n":"Vranov nad Topl'ou","c":"Slovakia","y":48.8806,"x":21.6731},{"n":"Nakashunbetsu","c":"Japan","y":43.5553,"x":144.9714},{"n":"Devonport","c":"Australia","y":-41.1806,"x":146.3464},{"n":"Bom Jesus dos Perdoes","c":"Brazil","y":-23.135,"x":-46.4653},{"n":"Tecumseh","c":"Canada","y":42.2431,"x":-82.9256},{"n":"Maibog","c":"Philippines","y":10.15,"x":125},{"n":"Itambacuri","c":"Brazil","y":-18.0364,"x":-41.683},{"n":"Greenbelt","c":"United States","y":38.9953,"x":-76.8885},{"n":"Stoneham","c":"United States","y":42.4741,"x":-71.0972},{"n":"Nevyansk","c":"Russia","y":57.4833,"x":60.2},{"n":"Senden","c":"Germany","y":48.3167,"x":10.0667},{"n":"Itapora","c":"Brazil","y":-22.0789,"x":-54.7889},{"n":"Bassar","c":"Togo","y":9.25,"x":0.7833},{"n":"Tadmait","c":"Algeria","y":36.7427,"x":3.9019},{"n":"Warburg","c":"Germany","y":51.4881,"x":9.14},{"n":"Taquarituba","c":"Brazil","y":-23.5328,"x":-49.2439},{"n":"Altea","c":"Spain","y":38.5986,"x":-0.0519},{"n":"Molodohvardiisk","c":"Ukraine","y":48.3444,"x":39.6583},{"n":"Kolpashevo","c":"Russia","y":58.3167,"x":82.9167},{"n":"Linstead","c":"Jamaica","y":18.15,"x":-77.0167},{"n":"Areia","c":"Brazil","y":-6.9628,"x":-35.6919},{"n":"Abreus","c":"Cuba","y":22.2806,"x":-80.5678},{"n":"Granite Bay","c":"United States","y":38.7601,"x":-121.1714},{"n":"Fokino","c":"Russia","y":42.9667,"x":132.4},{"n":"Pezinok","c":"Slovakia","y":48.2667,"x":17.2667},{"n":"Campia Turzii","c":"Romania","y":46.5444,"x":23.8792},{"n":"Walsrode","c":"Germany","y":52.8592,"x":9.5853},{"n":"Puerto Concordia","c":"Colombia","y":2.6233,"x":-72.7592},{"n":"Mandelieu-la-Napoule","c":"France","y":43.5464,"x":6.9381},{"n":"Assare","c":"Brazil","y":-6.8739,"x":-39.875},{"n":"Tamiahua","c":"Mexico","y":21.2794,"x":-97.4469},{"n":"Abu","c":"India","y":24.5925,"x":72.7083},{"n":"Gersthofen","c":"Germany","y":48.4167,"x":10.8667},{"n":"Kilkis","c":"Greece","y":40.9954,"x":22.8765},{"n":"Dickinson","c":"United States","y":46.8917,"x":-102.7924},{"n":"Madalum","c":"Philippines","y":7.853,"x":124.119},{"n":"Balen","c":"Belgium","y":51.1708,"x":5.1697},{"n":"Puenteareas","c":"Spain","y":42.1667,"x":-8.5},{"n":"Bulusan","c":"Philippines","y":12.75,"x":124.1167},{"n":"Komlo","c":"Hungary","y":46.1911,"x":18.2611},{"n":"Esparraguera","c":"Spain","y":41.5381,"x":1.8692},{"n":"Mandaguacu","c":"Brazil","y":-23.3469,"x":-52.095},{"n":"Tashtagol","c":"Russia","y":52.7667,"x":87.8667},{"n":"Tupiza","c":"Bolivia","y":-21.4423,"x":-65.719},{"n":"Ganassi","c":"Philippines","y":7.8269,"x":124.1034},{"n":"Lengir","c":"Kazakhstan","y":42.1899,"x":69.8799},{"n":"Capinzal","c":"Brazil","y":-27.3439,"x":-51.6119},{"n":"Siwah","c":"Egypt","y":29.2,"x":25.5167},{"n":"Allison Park","c":"United States","y":40.573,"x":-79.9603},{"n":"Nanyangcun","c":"China","y":34.7015,"x":108.3295},{"n":"Kilwinning","c":"United Kingdom","y":55.655,"x":-4.703},{"n":"Gusinoozersk","c":"Russia","y":51.2833,"x":106.5167},{"n":"Orleaes","c":"Brazil","y":-28.3589,"x":-49.2908},{"n":"Wandlitz","c":"Germany","y":52.75,"x":13.4497},{"n":"San Miguel Chicaj","c":"Guatemala","y":15.1,"x":-90.4},{"n":"Kapfenberg","c":"Austria","y":47.4394,"x":15.2894},{"n":"Wulongpu","c":"China","y":37.9356,"x":110.3566},{"n":"Strakonice","c":"Czechia","y":49.2615,"x":13.9024},{"n":"Mercato San Severino","c":"Italy","y":40.7833,"x":14.7667},{"n":"Cuilapan de Guerrero","c":"Mexico","y":16.9972,"x":-96.7817},{"n":"Gainsborough","c":"United Kingdom","y":53.4016,"x":-0.7732},{"n":"Wichian Buri","c":"Thailand","y":15.6565,"x":101.1072},{"n":"Achi","c":"Colombia","y":8.5692,"x":-74.5561},{"n":"Calbiga","c":"Philippines","y":11.6333,"x":125.0167},{"n":"Whyalla","c":"Australia","y":-33.0333,"x":137.5667},{"n":"Princesa Isabel","c":"Brazil","y":-7.7369,"x":-37.9928},{"n":"Grajewo","c":"Poland","y":53.65,"x":22.45},{"n":"Amoucha","c":"Algeria","y":36.388,"x":5.4108},{"n":"Gyegu","c":"China","y":33.0166,"x":96.7333},{"n":"Encantado","c":"Brazil","y":-29.2358,"x":-51.87},{"n":"Curumani","c":"Colombia","y":9.1997,"x":-73.5425},{"n":"Guanajay","c":"Cuba","y":22.9306,"x":-82.6881},{"n":"Oyonnax","c":"France","y":46.2561,"x":5.6556},{"n":"Orobo","c":"Brazil","y":-7.745,"x":-35.6019},{"n":"Huaibaijie","c":"China","y":35.7056,"x":109.5855},{"n":"Aiud","c":"Romania","y":46.3103,"x":23.7167},{"n":"Conil de la Frontera","c":"Spain","y":36.2667,"x":-6.0833},{"n":"Makinsk","c":"Kazakhstan","y":52.6404,"x":70.41},{"n":"Quarai","c":"Brazil","y":-30.3878,"x":-56.4508},{"n":"Plainsboro","c":"United States","y":40.3377,"x":-74.5878},{"n":"Yeadon","c":"United Kingdom","y":53.869,"x":-1.688},{"n":"Yuli","c":"China","y":41.3351,"x":86.2614},{"n":"Yako","c":"Burkina Faso","y":12.9667,"x":-2.2667},{"n":"Vale de Cambra","c":"Portugal","y":40.85,"x":-8.4},{"n":"Yanshanbu","c":"China","y":26.4497,"x":107.1359},{"n":"Pirenopolis","c":"Brazil","y":-15.8519,"x":-48.9589},{"n":"Rockingham","c":"United States","y":34.9386,"x":-79.7608},{"n":"Krasnouralsk","c":"Russia","y":58.35,"x":60.05},{"n":"Zedelgem","c":"Belgium","y":51.1431,"x":3.1361},{"n":"Taxisco","c":"Guatemala","y":14.0716,"x":-90.4645},{"n":"West Goshen","c":"United States","y":39.9756,"x":-75.5927},{"n":"Frederickson","c":"United States","y":47.0914,"x":-122.3594},{"n":"Beixingzhuang","c":"China","y":35.7033,"x":111.1029},{"n":"Zvenigorod","c":"Russia","y":55.7333,"x":36.85},{"n":"Steenwijk","c":"Netherlands","y":52.7833,"x":6.1167},{"n":"Karlsfeld","c":"Germany","y":48.2167,"x":11.4667},{"n":"Tighadouine","c":"Morocco","y":32.2167,"x":-5.4333},{"n":"Willoughby","c":"United States","y":41.646,"x":-81.4084},{"n":"Dabeiba","c":"Colombia","y":7.0014,"x":-76.2611},{"n":"Amaraji","c":"Brazil","y":-8.3758,"x":-35.4522},{"n":"Wadenswil","c":"Switzerland","y":47.2303,"x":8.6722},{"n":"Guadalupe","c":"Colombia","y":2.025,"x":-75.7564},{"n":"Fayid","c":"Egypt","y":30.3261,"x":32.2986},{"n":"Sidi Ifni","c":"Morocco","y":29.3833,"x":-10.1667},{"n":"Conselheiro Pena","c":"Brazil","y":-19.1719,"x":-41.4719},{"n":"San Agustin","c":"Philippines","y":16.5167,"x":121.75},{"n":"Manghit","c":"Uzbekistan","y":42.1236,"x":60.0583},{"n":"Mustang","c":"United States","y":35.3917,"x":-97.7246},{"n":"Palma di Montechiaro","c":"Italy","y":37.1936,"x":13.7658},{"n":"Mount Pearl Park","c":"Canada","y":47.5189,"x":-52.8058},{"n":"Roxbury","c":"United States","y":40.8822,"x":-74.6522},{"n":"La Democracia","c":"Guatemala","y":14.2308,"x":-90.9472},{"n":"Znamianka","c":"Ukraine","y":48.7136,"x":32.6733},{"n":"Haywards Heath","c":"United Kingdom","y":51.0048,"x":-0.0979},{"n":"Wertheim","c":"Germany","y":49.75,"x":9.5167},{"n":"Masterton","c":"New Zealand","y":-40.9667,"x":175.65},{"n":"Cullera","c":"Spain","y":39.1639,"x":-0.2517},{"n":"Uberlingen","c":"Germany","y":47.7667,"x":9.1583},{"n":"Maying","c":"China","y":36.0448,"x":102.8343},{"n":"Neusass","c":"Germany","y":48.4,"x":10.8333},{"n":"Leutkirch im Allgau","c":"Germany","y":47.8256,"x":10.0222},{"n":"Patterson","c":"United States","y":37.4758,"x":-121.1535},{"n":"Eckernforde","c":"Germany","y":54.4742,"x":9.8378},{"n":"Manhumirim","c":"Brazil","y":-20.3578,"x":-41.9578},{"n":"Tervuren","c":"Belgium","y":50.8167,"x":4.5},{"n":"Isilkul","c":"Russia","y":54.9089,"x":71.2606},{"n":"Gallup","c":"United States","y":35.5183,"x":-108.7423},{"n":"Mutuipe","c":"Brazil","y":-13.2289,"x":-39.505},{"n":"Zacualpa","c":"Guatemala","y":15.0272,"x":-90.8778},{"n":"Radcliff","c":"United States","y":37.8206,"x":-85.9366},{"n":"Baroy","c":"Philippines","y":8.0333,"x":123.7833},{"n":"Thebes","c":"Greece","y":38.3242,"x":23.3236},{"n":"Westerstede","c":"Germany","y":53.25,"x":7.9167},{"n":"Buriti Bravo","c":"Brazil","y":-5.8369,"x":-43.8339},{"n":"Trezzano sul Naviglio","c":"Italy","y":45.4333,"x":9.0667},{"n":"Patacamaya","c":"Bolivia","y":-17.2333,"x":-67.9167},{"n":"Prieto Diaz","c":"Philippines","y":13.0333,"x":124.1833},{"n":"Crystal","c":"United States","y":45.0377,"x":-93.3599},{"n":"Olivet","c":"France","y":47.8639,"x":1.9006},{"n":"Arcos de Valdevez","c":"Portugal","y":41.85,"x":-8.4167},{"n":"Kalat","c":"Pakistan","y":29.0258,"x":66.59},{"n":"San Raimundo","c":"Guatemala","y":14.7647,"x":-90.5956},{"n":"Guryevsk","c":"Russia","y":54.2833,"x":85.9333},{"n":"Lengerich","c":"Germany","y":52.175,"x":7.8667},{"n":"Nazca","c":"Peru","y":-14.8289,"x":-74.9436},{"n":"Allen","c":"Argentina","y":-38.9772,"x":-67.8272},{"n":"Weilheim","c":"Germany","y":47.8333,"x":11.1333},{"n":"Forbach","c":"France","y":49.19,"x":6.9},{"n":"Glauchau","c":"Germany","y":50.8233,"x":12.5444},{"n":"Catigbian","c":"Philippines","y":9.8333,"x":124.0333},{"n":"Montilla","c":"Spain","y":37.5833,"x":-4.6333},{"n":"Dzialdowo","c":"Poland","y":53.2396,"x":20.17},{"n":"Frauenfeld","c":"Switzerland","y":47.558,"x":8.8964},{"n":"Catamayo","c":"Ecuador","y":-3.9833,"x":-79.35},{"n":"San Cataldo","c":"Italy","y":37.4833,"x":13.9833},{"n":"Tocantinopolis","c":"Brazil","y":-6.3289,"x":-47.4158},{"n":"Oteiza","c":"Philippines","y":8.7437,"x":126.2214},{"n":"Pace","c":"United States","y":30.6187,"x":-87.1667},{"n":"Naqadah","c":"Egypt","y":25.9017,"x":32.7242},{"n":"Barbasa","c":"Philippines","y":11.2167,"x":122.05},{"n":"Coin","c":"Spain","y":36.8167,"x":-4.75},{"n":"Rastede","c":"Germany","y":53.25,"x":8.2},{"n":"Tunuyan","c":"Argentina","y":-33.5667,"x":-69.0167},{"n":"Losser","c":"Netherlands","y":52.2617,"x":7.0044},{"n":"Naciria","c":"Algeria","y":36.7475,"x":3.8289},{"n":"Karachayevsk","c":"Russia","y":43.7667,"x":41.9},{"n":"Saint-Genis-Laval","c":"France","y":45.696,"x":4.793},{"n":"Ataco","c":"Colombia","y":3.5897,"x":-75.3822},{"n":"Shaomi","c":"China","y":26.4727,"x":104.8126},{"n":"Marshall","c":"United States","y":32.537,"x":-94.3515},{"n":"Cartagena","c":"Chile","y":-33.55,"x":-71.6},{"n":"Alnif","c":"Morocco","y":31.1169,"x":-5.1737},{"n":"Selouane","c":"Morocco","y":35.0708,"x":-2.9392},{"n":"Haar","c":"Germany","y":48.1,"x":11.7333},{"n":"Laguna Beach","c":"United States","y":33.5448,"x":-117.7612},{"n":"Goldasht","c":"Iran","y":32.6267,"x":51.4392},{"n":"Webster Groves","c":"United States","y":38.5866,"x":-90.3544},{"n":"Acworth","c":"United States","y":34.0566,"x":-84.6715},{"n":"Le Creusot","c":"France","y":46.8014,"x":4.4411},{"n":"Royken","c":"Norway","y":59.7336,"x":10.4289},{"n":"Cinco Saltos","c":"Argentina","y":-38.8167,"x":-68.0667},{"n":"Griffin","c":"United States","y":33.2418,"x":-84.2747},{"n":"Santa Fe de Antioquia","c":"Colombia","y":6.5564,"x":-75.8275},{"n":"Itaparica","c":"Brazil","y":-12.8878,"x":-38.6789},{"n":"Curchorem","c":"India","y":15.25,"x":74.1},{"n":"Vreden","c":"Germany","y":52.0331,"x":6.8331},{"n":"Botevgrad","c":"Bulgaria","y":42.9073,"x":23.7937},{"n":"Morton Grove","c":"United States","y":42.0423,"x":-87.789},{"n":"Conceicao da Feira","c":"Brazil","y":-12.5058,"x":-38.9989},{"n":"Caibiran","c":"Philippines","y":11.5667,"x":124.5833},{"n":"Lysander","c":"United States","y":43.18,"x":-76.3745},{"n":"Keene","c":"United States","y":42.9494,"x":-72.2997},{"n":"Padre Burgos","c":"Philippines","y":13.9226,"x":121.8116},{"n":"Velsk","c":"Russia","y":61.0667,"x":42.1},{"n":"Marina","c":"United States","y":36.6812,"x":-121.7895},{"n":"Oliveira dos Brejinhos","c":"Brazil","y":-12.3169,"x":-42.8958},{"n":"Solon","c":"United States","y":41.3864,"x":-81.4401},{"n":"Rixensart","c":"Belgium","y":50.7167,"x":4.5333},{"n":"Sarzana","c":"Italy","y":44.1136,"x":9.96},{"n":"Valasske Mezirici","c":"Czechia","y":49.4718,"x":17.9712},{"n":"Svetlyy","c":"Russia","y":54.6833,"x":20.1333},{"n":"Petrila","c":"Romania","y":45.4511,"x":23.3981},{"n":"Bad Kissingen","c":"Germany","y":50.2,"x":10.0667},{"n":"Massarosa","c":"Italy","y":43.8667,"x":10.3333},{"n":"Kaltenkirchen","c":"Germany","y":53.8397,"x":9.9603},{"n":"San Miguel de Papasquiaro","c":"Mexico","y":24.8304,"x":-105.34},{"n":"Barnegat","c":"United States","y":39.7665,"x":-74.2773},{"n":"Iracemapolis","c":"Brazil","y":-22.5808,"x":-47.5189},{"n":"Mandan","c":"United States","y":46.829,"x":-100.887},{"n":"Kalachinsk","c":"Russia","y":55.05,"x":74.5833},{"n":"Buxton","c":"United Kingdom","y":53.259,"x":-1.911},{"n":"Ladyzhyn","c":"Ukraine","y":48.6667,"x":29.2167},{"n":"Carmo do Cajuru","c":"Brazil","y":-20.1839,"x":-44.7708},{"n":"Buritis","c":"Brazil","y":-15.6178,"x":-46.4228},{"n":"Donaueschingen","c":"Germany","y":47.9531,"x":8.5033},{"n":"Buenavista","c":"Colombia","y":8.2233,"x":-75.4817},{"n":"Amalfi","c":"Colombia","y":6.9092,"x":-75.0767},{"n":"Manzanares","c":"Colombia","y":5.2519,"x":-75.1569},{"n":"Salcedo","c":"Philippines","y":11.15,"x":125.6667},{"n":"Manosque","c":"France","y":43.8342,"x":5.7839},{"n":"Erval d'Oeste","c":"Brazil","y":-27.1939,"x":-51.495},{"n":"Seynod","c":"France","y":45.8889,"x":6.0961},{"n":"Frameries","c":"Belgium","y":50.4088,"x":3.8906},{"n":"Staraya Kupavna","c":"Russia","y":55.8,"x":38.1833},{"n":"Beek en Donk","c":"Netherlands","y":51.5161,"x":5.6208},{"n":"Lefkada","c":"Greece","y":38.7178,"x":20.6439},{"n":"Barbate de Franco","c":"Spain","y":36.1833,"x":-5.9167},{"n":"Sal'a","c":"Slovakia","y":48.15,"x":17.8833},{"n":"Tubungan","c":"Philippines","y":10.7833,"x":122.3},{"n":"Elizabeth City","c":"United States","y":36.2943,"x":-76.2361},{"n":"Harriman","c":"United States","y":35.9307,"x":-84.5602},{"n":"Mondovi","c":"Italy","y":44.3833,"x":7.8167},{"n":"Torre del Mar","c":"Spain","y":36.75,"x":-4.1},{"n":"Zhengtun","c":"China","y":25.1494,"x":105.0802},{"n":"Magdalena","c":"Mexico","y":20.9092,"x":-103.9803},{"n":"Uenohara","c":"Japan","y":35.6303,"x":139.1086},{"n":"Souk Tlet El Gharb","c":"Morocco","y":34.6211,"x":-6.1336},{"n":"Dona Remedios Trinidad","c":"Philippines","y":15,"x":121.0833},{"n":"Oytal","c":"Kazakhstan","y":42.9153,"x":73.2549},{"n":"Metzingen","c":"Germany","y":48.5367,"x":9.2858},{"n":"Sondrio","c":"Italy","y":46.1697,"x":9.87},{"n":"Fairhope","c":"United States","y":30.5217,"x":-87.8815},{"n":"Cottage Lake","c":"United States","y":47.7466,"x":-122.0755},{"n":"Machesney Park","c":"United States","y":42.3666,"x":-89.0266},{"n":"Wettingen","c":"Switzerland","y":47.4659,"x":8.3267},{"n":"Pachino","c":"Italy","y":36.7167,"x":15.1},{"n":"Braidwood","c":"United States","y":41.2696,"x":-88.2235},{"n":"Lochristi","c":"Belgium","y":51.0953,"x":3.8325},{"n":"Hurricane","c":"United States","y":37.1487,"x":-113.3517},{"n":"Sant'Arcangelo di Romagna","c":"Italy","y":44.0633,"x":12.4466},{"n":"Onondaga","c":"United States","y":42.9687,"x":-76.2168},{"n":"Laupheim","c":"Germany","y":48.2289,"x":9.8797},{"n":"Sagbayan","c":"Philippines","y":9.9167,"x":124.1},{"n":"Pogradec","c":"Albania","y":40.9,"x":20.65},{"n":"Omagh","c":"United Kingdom","y":54.59,"x":-7.29},{"n":"Lajas","c":"Cuba","y":22.4164,"x":-80.2906},{"n":"Dunaharaszti","c":"Hungary","y":47.3553,"x":19.0844},{"n":"Annecy-le-Vieux","c":"France","y":45.9192,"x":6.1419},{"n":"Nagold","c":"Germany","y":48.5519,"x":8.7256},{"n":"Flores","c":"Brazil","y":-7.8658,"x":-37.975},{"n":"Wareham","c":"United States","y":41.7662,"x":-70.6999},{"n":"Baliguian","c":"Philippines","y":7.8088,"x":122.1452},{"n":"Pudsey","c":"United Kingdom","y":53.797,"x":-1.663},{"n":"Baraki Barak","c":"Afghanistan","y":33.9667,"x":68.9667},{"n":"Trussville","c":"United States","y":33.6404,"x":-86.5819},{"n":"Goleniow","c":"Poland","y":53.5639,"x":14.8285},{"n":"Pilar de la Horadada","c":"Spain","y":37.8667,"x":-0.7833},{"n":"Karben","c":"Germany","y":50.2322,"x":8.7681},{"n":"Yahualica de Gonzalez Gallo","c":"Mexico","y":21.1781,"x":-102.886},{"n":"Feira Grande","c":"Brazil","y":-9.9,"x":-36.6778},{"n":"Cuyo","c":"Philippines","y":10.85,"x":121.0167},{"n":"Tecali","c":"Mexico","y":18.9011,"x":-97.97},{"n":"Lempaala","c":"Finland","y":61.3139,"x":23.7528},{"n":"Stadthagen","c":"Germany","y":52.3247,"x":9.2069},{"n":"Huangzhai","c":"China","y":38.0605,"x":112.6701},{"n":"Darton","c":"United Kingdom","y":53.585,"x":-1.5325},{"n":"Burg","c":"Germany","y":52.2725,"x":11.855},{"n":"Mako","c":"Hungary","y":46.22,"x":20.4789},{"n":"Pushkar","c":"India","y":26.5,"x":74.55},{"n":"Huautla","c":"Mexico","y":21.0308,"x":-98.285},{"n":"Paraopeba","c":"Brazil","y":-19.2739,"x":-44.4039},{"n":"Sardinata","c":"Colombia","y":8.0836,"x":-72.8003},{"n":"Edewecht","c":"Germany","y":53.1258,"x":7.9825},{"n":"Puente Nacional","c":"Mexico","y":19.3333,"x":-96.4833},{"n":"Dawmat al Jandal","c":"Saudi Arabia","y":29.8153,"x":39.8664},{"n":"Buftea","c":"Romania","y":44.57,"x":25.95},{"n":"Porto Torres","c":"Italy","y":40.8369,"x":8.4014},{"n":"Corcoran","c":"United States","y":36.0839,"x":-119.561},{"n":"Meadville","c":"United States","y":41.6476,"x":-80.1468},{"n":"Paese","c":"Italy","y":45.6667,"x":12.15},{"n":"Ariano Irpino","c":"Italy","y":41.1528,"x":15.0889},{"n":"Martellago","c":"Italy","y":45.5467,"x":12.1575},{"n":"Belabo","c":"Cameroon","y":4.9333,"x":13.3},{"n":"Kadiria","c":"Algeria","y":36.5333,"x":3.6833},{"n":"Carrascal","c":"Philippines","y":9.3703,"x":125.9492},{"n":"Wenceslau Guimaraes","c":"Brazil","y":-13.6869,"x":-39.4789},{"n":"Caravelas","c":"Brazil","y":-17.7319,"x":-39.2658},{"n":"Happy Valley","c":"United States","y":45.4362,"x":-122.5077},{"n":"Ginosa","c":"Italy","y":40.5,"x":16.75},{"n":"Friesoythe","c":"Germany","y":53.0206,"x":7.8586},{"n":"El Progreso","c":"Guatemala","y":14.35,"x":-89.85},{"n":"East Peoria","c":"United States","y":40.6734,"x":-89.5419},{"n":"Westerly","c":"United States","y":41.3635,"x":-71.7899},{"n":"Agropoli","c":"Italy","y":40.3583,"x":14.9833},{"n":"Heide","c":"Germany","y":54.1961,"x":9.0933},{"n":"Santo Antonio de Posse","c":"Brazil","y":-22.6058,"x":-46.9189},{"n":"Hopewell","c":"United States","y":37.2915,"x":-77.2985},{"n":"Mutata","c":"Colombia","y":7.2433,"x":-76.4358},{"n":"Fort Walton Beach","c":"United States","y":30.4249,"x":-86.6194},{"n":"Radevormwald","c":"Germany","y":51.2,"x":7.35},{"n":"Nixa","c":"United States","y":37.0453,"x":-93.296},{"n":"Caba","c":"Philippines","y":16.4316,"x":120.3446},{"n":"Nadvirna","c":"Ukraine","y":48.6333,"x":24.5833},{"n":"Olanchito","c":"Honduras","y":15.4833,"x":-86.5833},{"n":"Florsheim","c":"Germany","y":50.0117,"x":8.4281},{"n":"Khadyzhensk","c":"Russia","y":44.4239,"x":39.5372},{"n":"Santa Ana Nextlalpan","c":"Mexico","y":19.7167,"x":-99.0667},{"n":"Gaoguzhuang","c":"China","y":37.8364,"x":115.5016},{"n":"Apolda","c":"Germany","y":51.0247,"x":11.5139},{"n":"Zhedao","c":"China","y":24.8098,"x":98.2961},{"n":"Munster","c":"United States","y":41.5469,"x":-87.504},{"n":"Christiansburg","c":"United States","y":37.1411,"x":-80.4028},{"n":"Gorgonzola","c":"Italy","y":45.5333,"x":9.4},{"n":"Anthem","c":"United States","y":33.856,"x":-112.1168},{"n":"Saint-Louis","c":"France","y":47.59,"x":7.57},{"n":"Amizmiz","c":"Morocco","y":31.21,"x":-8.25},{"n":"Halluin","c":"France","y":50.7836,"x":3.1256},{"n":"El Colegio","c":"Colombia","y":4.5808,"x":-74.4425},{"n":"Koprivnice","c":"Czechia","y":49.5995,"x":18.1448},{"n":"Priego de Cordoba","c":"Spain","y":37.4333,"x":-4.1833},{"n":"Tarnaveni","c":"Romania","y":46.3297,"x":24.27},{"n":"Gardelegen","c":"Germany","y":52.5264,"x":11.3925},{"n":"La Jagua de Ibirico","c":"Colombia","y":9.5611,"x":-73.3364},{"n":"Castelnau-le-Lez","c":"France","y":43.6369,"x":3.9019},{"n":"Dianopolis","c":"Brazil","y":-11.6258,"x":-46.8203},{"n":"Looc","c":"Philippines","y":12.2605,"x":121.9926},{"n":"Santa Teresita","c":"Philippines","y":13.8664,"x":120.9814},{"n":"Schwetzingen","c":"Germany","y":49.3833,"x":8.5667},{"n":"Klatovy","c":"Czechia","y":49.3956,"x":13.2951},{"n":"Barra da Estiva","c":"Brazil","y":-13.6258,"x":-41.3269},{"n":"Warrensburg","c":"United States","y":38.7627,"x":-93.726},{"n":"Sao Vicente Ferrer","c":"Brazil","y":-2.8939,"x":-44.88},{"n":"Hockenheim","c":"Germany","y":49.3181,"x":8.5472},{"n":"Daxin","c":"China","y":26.621,"x":107.2398},{"n":"Kihei","c":"United States","y":20.7653,"x":-156.4454},{"n":"Casal di Principe","c":"Italy","y":41.0108,"x":14.1319},{"n":"Acatlan","c":"Mexico","y":20.4242,"x":-103.6014},{"n":"Zeewolde","c":"Netherlands","y":52.3333,"x":5.5167},{"n":"Borgomanero","c":"Italy","y":45.7,"x":8.4667},{"n":"Lebu","c":"Chile","y":-37.6103,"x":-73.6561},{"n":"Mendeleyevsk","c":"Russia","y":55.9,"x":52.3167},{"n":"Cornaredo","c":"Italy","y":45.5,"x":9.0333},{"n":"Chankou","c":"China","y":35.7754,"x":104.5345},{"n":"Zhucaoying","c":"China","y":40.1759,"x":119.5909},{"n":"La Cruz","c":"Chile","y":-32.8167,"x":-71.2333},{"n":"Fougeres","c":"France","y":48.3525,"x":-1.1986},{"n":"Corinto","c":"Nicaragua","y":12.4833,"x":-87.1833},{"n":"Florida Ridge","c":"United States","y":27.5805,"x":-80.3848},{"n":"Ar Rutbah","c":"Iraq","y":33.0333,"x":40.2833},{"n":"Takahata","c":"Japan","y":38.0028,"x":140.1892},{"n":"Bubong","c":"Philippines","y":8.0167,"x":124.4833},{"n":"Yahualica","c":"Mexico","y":20.9531,"x":-98.38},{"n":"Demba","c":"Congo (Kinshasa)","y":-5.5096,"x":22.26},{"n":"Silver Firs","c":"United States","y":47.8635,"x":-122.1497},{"n":"Alvarado","c":"Mexico","y":18.7811,"x":-95.7572},{"n":"Patian","c":"Philippines","y":5.8444,"x":121.1439},{"n":"Presidente Medici","c":"Brazil","y":-11.1758,"x":-61.9008},{"n":"Colorado","c":"Brazil","y":-22.8378,"x":-51.9728},{"n":"Dolton","c":"United States","y":41.6284,"x":-87.5979},{"n":"Natagaima","c":"Colombia","y":3.6231,"x":-75.0936},{"n":"Duncan","c":"United States","y":34.5424,"x":-97.919},{"n":"Chaumont","c":"France","y":48.1117,"x":5.1389},{"n":"Ramain","c":"Philippines","y":7.9667,"x":124.35},{"n":"Iraucuba","c":"Brazil","y":-3.7458,"x":-39.7828},{"n":"Palestrina","c":"Italy","y":41.8333,"x":12.9},{"n":"Brent","c":"United States","y":30.4729,"x":-87.2496},{"n":"Bacchus Marsh","c":"Australia","y":-37.675,"x":144.4389},{"n":"Murayama","c":"Japan","y":38.4833,"x":140.3803},{"n":"Camana","c":"Peru","y":-16.6233,"x":-72.7092},{"n":"Lyman","c":"Ukraine","y":48.9861,"x":37.8111},{"n":"Villeneuve-sur-Lot","c":"France","y":44.4081,"x":0.705},{"n":"San Andres Villa Seca","c":"Guatemala","y":14.5667,"x":-91.5833},{"n":"El Doncello","c":"Colombia","y":1.68,"x":-75.285},{"n":"Northfield","c":"United States","y":44.455,"x":-93.1698},{"n":"Nikolskoye","c":"Russia","y":59.7,"x":30.7833},{"n":"Tepexi de Rodriguez","c":"Mexico","y":18.5797,"x":-97.9267},{"n":"Gata","c":"Philippines","y":7.85,"x":124.35},{"n":"Pingtan","c":"China","y":23.2524,"x":111.412},{"n":"Nieuwerkerk aan den IJssel","c":"Netherlands","y":51.9656,"x":4.6083},{"n":"Las Torres de Cotillas","c":"Spain","y":38.0264,"x":-1.2436},{"n":"Binnish","c":"Syria","y":35.95,"x":36.7},{"n":"Musselburgh","c":"United Kingdom","y":55.942,"x":-3.054},{"n":"Harim","c":"Syria","y":36.2076,"x":36.5192},{"n":"Sequim","c":"United States","y":48.0746,"x":-123.0944},{"n":"Djibo","c":"Burkina Faso","y":14.1012,"x":-1.6279},{"n":"Lyndhurst","c":"United States","y":40.7964,"x":-74.1099},{"n":"Prairie Village","c":"United States","y":38.9874,"x":-94.6361},{"n":"Djinet","c":"Algeria","y":36.877,"x":3.7231},{"n":"Herent","c":"Belgium","y":50.9081,"x":4.6706},{"n":"Atuntaqui","c":"Ecuador","y":0.3325,"x":-78.2136},{"n":"Kuna","c":"United States","y":43.4869,"x":-116.3986},{"n":"Coralville","c":"United States","y":41.699,"x":-91.5967},{"n":"Waltham Abbey","c":"United Kingdom","y":51.6846,"x":0.0004},{"n":"Saint-Jean-de-Braye","c":"France","y":47.9128,"x":1.9719},{"n":"Popesti-Leordeni","c":"Romania","y":44.38,"x":26.17},{"n":"Sao Miguel do Araguaia","c":"Brazil","y":-13.275,"x":-50.1628},{"n":"Spremberg","c":"Germany","y":51.5717,"x":14.3794},{"n":"Fort Mill","c":"United States","y":35.0062,"x":-80.9388},{"n":"Caracarai","c":"Brazil","y":1.8158,"x":-61.1278},{"n":"Bad Harzburg","c":"Germany","y":51.8828,"x":10.5617},{"n":"Mandirituba","c":"Brazil","y":-25.7789,"x":-49.3258},{"n":"Terenos","c":"Brazil","y":-20.4419,"x":-54.86},{"n":"Ouardenine","c":"Tunisia","y":35.72,"x":10.67},{"n":"Bressanone","c":"Italy","y":46.7167,"x":11.65},{"n":"Morris","c":"United States","y":40.796,"x":-74.4945},{"n":"Niskayuna","c":"United States","y":42.803,"x":-73.873},{"n":"Comacchio","c":"Italy","y":44.7,"x":12.1833},{"n":"Moinesti","c":"Romania","y":46.4847,"x":26.4964},{"n":"Waldkirch","c":"Germany","y":48.0939,"x":7.9608},{"n":"Hazebrouck","c":"France","y":50.725,"x":2.5392},{"n":"Rose Hill","c":"United States","y":38.7872,"x":-77.1085},{"n":"Ban Piang Luang","c":"Thailand","y":19.6493,"x":98.6352},{"n":"Lihuzhuang","c":"China","y":39.652,"x":117.8649},{"n":"Eseka","c":"Cameroon","y":3.6504,"x":10.7666},{"n":"Caojiachuan","c":"China","y":34.9016,"x":111.521},{"n":"San Rafael del Norte","c":"Nicaragua","y":13.2,"x":-86.1},{"n":"Auch","c":"France","y":43.6465,"x":0.5855},{"n":"Millau","c":"France","y":44.0986,"x":3.0783},{"n":"Geertruidenberg","c":"Netherlands","y":51.7008,"x":4.8603},{"n":"Lutz","c":"United States","y":28.1396,"x":-82.4467},{"n":"Chapa de Mota","c":"Mexico","y":19.8144,"x":-99.5269},{"n":"Alhama de Murcia","c":"Spain","y":37.8514,"x":-1.4264},{"n":"Taylors","c":"United States","y":34.9157,"x":-82.3124},{"n":"Ramos","c":"Philippines","y":15.6667,"x":120.6417},{"n":"Roanoke Rapids","c":"United States","y":36.4452,"x":-77.6491},{"n":"Guilford","c":"United States","y":41.3345,"x":-72.7004},{"n":"Afourar","c":"Morocco","y":32.2083,"x":-6.5403},{"n":"Vega Baja","c":"Puerto Rico","y":18.441,"x":-66.3993},{"n":"Tangalan","c":"Philippines","y":11.7667,"x":122.25},{"n":"Castrovillari","c":"Italy","y":39.8167,"x":16.2},{"n":"Raymore","c":"United States","y":38.8029,"x":-94.4583},{"n":"Ensley","c":"United States","y":30.5261,"x":-87.2735},{"n":"Colleferro","c":"Italy","y":41.7287,"x":13.0031},{"n":"Mukwonago","c":"United States","y":42.8566,"x":-88.3269},{"n":"Diamantino","c":"Brazil","y":-14.4089,"x":-56.4458},{"n":"Laventille","c":"Trinidad And Tobago","y":10.65,"x":-61.4833},{"n":"Bavly","c":"Russia","y":54.4,"x":53.25},{"n":"East Patchogue","c":"United States","y":40.7704,"x":-72.9817},{"n":"Qarazhal","c":"Kazakhstan","y":48.0253,"x":70.7999},{"n":"Porto Belo","c":"Brazil","y":-27.1578,"x":-48.5528},{"n":"Kitzingen","c":"Germany","y":49.7333,"x":10.1667},{"n":"Qapqal","c":"China","y":43.834,"x":81.1581},{"n":"Pickerington","c":"United States","y":39.889,"x":-82.7678},{"n":"Binidayan","c":"Philippines","y":7.8,"x":124.1667},{"n":"Eislingen","c":"Germany","y":48.6933,"x":9.7067},{"n":"Silvania","c":"Colombia","y":4.4033,"x":-74.3881},{"n":"Arvin","c":"United States","y":35.1944,"x":-118.8306},{"n":"Cantanhede","c":"Brazil","y":-3.6328,"x":-44.3769},{"n":"Schroeder","c":"Brazil","y":-26.4128,"x":-49.0728},{"n":"Beni Douala","c":"Algeria","y":36.6167,"x":4.0667},{"n":"Budingen","c":"Germany","y":50.2908,"x":9.1125},{"n":"Kommunar","c":"Russia","y":59.6217,"x":30.3936},{"n":"Southold","c":"United States","y":41.0435,"x":-72.4184},{"n":"Palmital","c":"Brazil","y":-22.7889,"x":-50.2175},{"n":"Honmachi","c":"Japan","y":36.0608,"x":136.5006},{"n":"Leczna","c":"Poland","y":51.3,"x":22.8833},{"n":"Raritan","c":"United States","y":40.507,"x":-74.8662},{"n":"Manlleu","c":"Spain","y":42,"x":2.2836},{"n":"Luofa","c":"China","y":39.4343,"x":116.8386},{"n":"Swiedbodzin","c":"Poland","y":52.25,"x":15.5333},{"n":"Pailitas","c":"Colombia","y":8.9597,"x":-73.625},{"n":"Una","c":"Brazil","y":-15.2928,"x":-39.075},{"n":"Cortona","c":"Italy","y":43.2756,"x":11.9881},{"n":"Lino Lakes","c":"United States","y":45.1679,"x":-93.083},{"n":"Woensdrecht","c":"Netherlands","y":51.43,"x":4.305},{"n":"Aljaraque","c":"Spain","y":37.2667,"x":-7.0167},{"n":"Busuanga","c":"Philippines","y":12.1335,"x":119.9363},{"n":"Cunha","c":"Brazil","y":-23.0744,"x":-44.9597},{"n":"Corinth","c":"United States","y":33.1435,"x":-97.0681},{"n":"Sidi Rahal","c":"Morocco","y":33.4725,"x":-7.9617},{"n":"Kontich","c":"Belgium","y":51.1344,"x":4.4456},{"n":"Yaojiafen","c":"China","y":40.7158,"x":114.8733},{"n":"Timbiqui","c":"Colombia","y":2.7719,"x":-77.665},{"n":"Naples","c":"United States","y":26.1504,"x":-81.7936},{"n":"Bataguacu","c":"Brazil","y":-21.7139,"x":-52.4219},{"n":"Maghull","c":"United Kingdom","y":53.5174,"x":-2.9449},{"n":"Pantar","c":"Philippines","y":8.0667,"x":124.2667},{"n":"Ust'-Katav","c":"Russia","y":54.9333,"x":58.1667},{"n":"Maple Heights","c":"United States","y":41.4094,"x":-81.5625},{"n":"Vanersborg","c":"Sweden","y":58.363,"x":12.33},{"n":"Tiquisio","c":"Colombia","y":8.5578,"x":-74.2639},{"n":"Semikarakorsk","c":"Russia","y":47.5167,"x":40.8},{"n":"Laziska Gorne","c":"Poland","y":50.1434,"x":18.8528},{"n":"Peshtera","c":"Bulgaria","y":42.034,"x":24.3025},{"n":"Eppingen","c":"Germany","y":49.1333,"x":8.9167},{"n":"Taminango","c":"Colombia","y":1.57,"x":-77.2806},{"n":"Lugus","c":"Philippines","y":5.7,"x":120.8167},{"n":"Gotse Delchev","c":"Bulgaria","y":41.5737,"x":23.7291},{"n":"Hlohovec","c":"Slovakia","y":48.4311,"x":17.8031},{"n":"Povoa de Lanhoso","c":"Portugal","y":41.5667,"x":-8.2667},{"n":"Unity","c":"United States","y":40.2811,"x":-79.4236},{"n":"Jalpan","c":"Mexico","y":21.2167,"x":-99.4725},{"n":"Pio XII","c":"Brazil","y":-3.8939,"x":-45.17},{"n":"Kozmodemyansk","c":"Russia","y":56.3419,"x":46.5636},{"n":"Gardner","c":"United States","y":38.8158,"x":-94.93},{"n":"San Bonifacio","c":"Italy","y":45.4,"x":11.2833},{"n":"Vilyuchinsk","c":"Russia","y":52.9333,"x":158.4},{"n":"Carutapera","c":"Brazil","y":-1.195,"x":-46.02},{"n":"Kemi","c":"Finland","y":65.7336,"x":24.5634},{"n":"Omutninsk","c":"Russia","y":58.6667,"x":52.1833},{"n":"Monte Azul","c":"Brazil","y":-15.1553,"x":-42.8589},{"n":"Sonthofen","c":"Germany","y":47.5142,"x":10.2817},{"n":"Kotovo","c":"Russia","y":50.3167,"x":44.8},{"n":"Anicuns","c":"Brazil","y":-16.4608,"x":-49.9619},{"n":"Colonia Leopoldina","c":"Brazil","y":-8.9089,"x":-35.725},{"n":"Puerto Suarez","c":"Bolivia","y":-18.9633,"x":-57.7978},{"n":"Axapusco","c":"Mexico","y":19.7194,"x":-98.7972},{"n":"Vereshchagino","c":"Russia","y":58.0667,"x":54.65},{"n":"Union Hill-Novelty Hill","c":"United States","y":47.6788,"x":-122.0284},{"n":"Elsdorf","c":"Germany","y":50.9333,"x":6.5667},{"n":"Xanten","c":"Germany","y":51.6622,"x":6.4539},{"n":"Rolleston","c":"New Zealand","y":-43.596,"x":172.383},{"n":"Seligenstadt","c":"Germany","y":50.0441,"x":8.9753},{"n":"Peters","c":"United States","y":40.274,"x":-80.0802},{"n":"Kotli","c":"Pakistan","y":33.5156,"x":73.9019},{"n":"Coreau","c":"Brazil","y":-3.5328,"x":-40.6569},{"n":"Isernia","c":"Italy","y":41.6028,"x":14.2397},{"n":"Dumbarton","c":"United Kingdom","y":55.95,"x":-4.5667},{"n":"Notteroy","c":"Norway","y":59.2011,"x":10.4078},{"n":"Siloam Springs","c":"United States","y":36.1844,"x":-94.5318},{"n":"Moguer","c":"Spain","y":37.2747,"x":-6.8386},{"n":"Thenia","c":"Algeria","y":36.7278,"x":3.5539},{"n":"Iisalmi","c":"Finland","y":63.5611,"x":27.1889},{"n":"Cajidiocan","c":"Philippines","y":12.3667,"x":122.6833},{"n":"Opoczno","c":"Poland","y":51.3833,"x":20.2833},{"n":"Reigate","c":"United Kingdom","y":51.237,"x":-0.206},{"n":"Palafrugell","c":"Spain","y":41.9174,"x":3.1631},{"n":"Pedernales","c":"Ecuador","y":0.0719,"x":-80.0508},{"n":"Trinidad","c":"Uruguay","y":-33.5333,"x":-56.8833},{"n":"East Hampton","c":"United States","y":41.0117,"x":-72.1277},{"n":"Banaue","c":"Philippines","y":16.9167,"x":121.0667},{"n":"Wieliczka","c":"Poland","y":49.9894,"x":20.0661},{"n":"Guia de Isora","c":"Spain","y":28.211,"x":-16.7784},{"n":"Tongzhou","c":"China","y":25.7716,"x":106.973},{"n":"Tornio","c":"Finland","y":65.8497,"x":24.1441},{"n":"Osterode","c":"Germany","y":51.7286,"x":10.2522},{"n":"Gif-sur-Yvette","c":"France","y":48.7018,"x":2.1339},{"n":"Piqua","c":"United States","y":40.1505,"x":-84.2441},{"n":"Amherstburg","c":"Canada","y":42.1,"x":-83.0833},{"n":"Chelmno","c":"Poland","y":53.3492,"x":18.4261},{"n":"Hallein","c":"Austria","y":47.6667,"x":13.0833},{"n":"Poortugaal","c":"Netherlands","y":51.8553,"x":4.3967},{"n":"Fish Hawk","c":"United States","y":27.8511,"x":-82.2164},{"n":"Yoqne`am `Illit","c":"Israel","y":32.6594,"x":35.11},{"n":"El Ksiba","c":"Morocco","y":32.5681,"x":-6.0308},{"n":"Zorgo","c":"Burkina Faso","y":12.25,"x":-0.6167},{"n":"Port Hueneme","c":"United States","y":34.1617,"x":-119.2036},{"n":"Caxambu","c":"Brazil","y":-21.9769,"x":-44.9328},{"n":"Lagonglong","c":"Philippines","y":8.8,"x":124.7833},{"n":"Gympie","c":"Australia","y":-26.19,"x":152.6655},{"n":"Cha Grande","c":"Brazil","y":-8.2378,"x":-35.4619},{"n":"Tolosa","c":"Philippines","y":11.0333,"x":125.0167},{"n":"Candoni","c":"Philippines","y":9.8167,"x":122.6},{"n":"Sao Jose da Coroa Grande","c":"Brazil","y":-8.8978,"x":-35.1478},{"n":"Azambuja","c":"Portugal","y":39.0667,"x":-8.8667},{"n":"Casablanca","c":"Chile","y":-33.3167,"x":-71.4167},{"n":"Halewood","c":"United Kingdom","y":53.3599,"x":-2.84},{"n":"Secaucus","c":"United States","y":40.781,"x":-74.0659},{"n":"Potters Bar","c":"United Kingdom","y":51.698,"x":-0.183},{"n":"Urucuca","c":"Brazil","y":-14.5928,"x":-39.2839},{"n":"Colle di Val d'Elsa","c":"Italy","y":43.4225,"x":11.1267},{"n":"Golden Valley","c":"United States","y":44.9901,"x":-93.3591},{"n":"Olho d'Agua das Flores","c":"Brazil","y":-9.5358,"x":-37.2939},{"n":"Ginebra","c":"Colombia","y":3.7244,"x":-76.2672},{"n":"Calamba","c":"Philippines","y":8.5583,"x":123.6417},{"n":"Gros Islet","c":"Saint Lucia","y":14.081,"x":-60.953},{"n":"Codlea","c":"Romania","y":45.6958,"x":25.4497},{"n":"Coueron","c":"France","y":47.2156,"x":-1.7228},{"n":"Fukuyoshi","c":"Japan","y":33.6833,"x":130.78},{"n":"Alcantara","c":"Brazil","y":-2.4089,"x":-44.415},{"n":"Mashiko","c":"Japan","y":36.4667,"x":140.1},{"n":"Lisieux","c":"France","y":49.15,"x":0.23},{"n":"Imi-n-Tanout","c":"Morocco","y":31.177,"x":-8.8504},{"n":"Banolas","c":"Spain","y":42.1194,"x":2.7664},{"n":"Tidili Masfiywat","c":"Morocco","y":31.4667,"x":-7.6167},{"n":"Ilsede","c":"Germany","y":52.2667,"x":10.1833},{"n":"Brockville","c":"Canada","y":44.5833,"x":-75.6833},{"n":"Santa Maria das Barreiras","c":"Brazil","y":-8.855,"x":-49.7219},{"n":"Ocotlan de Morelos","c":"Mexico","y":16.7914,"x":-96.675},{"n":"Piazza Armerina","c":"Italy","y":37.3833,"x":14.3667},{"n":"Maigo","c":"Philippines","y":8.15,"x":123.9667},{"n":"Camanducaia","c":"Brazil","y":-22.755,"x":-46.145},{"n":"Camp Springs","c":"United States","y":38.8052,"x":-76.9198},{"n":"Siilinjarvi","c":"Finland","y":63.075,"x":27.66},{"n":"New Hartford","c":"United States","y":43.0587,"x":-75.2822},{"n":"`Adra","c":"Syria","y":33.6,"x":36.515},{"n":"Manari","c":"Brazil","y":-8.9639,"x":-37.6278},{"n":"Itajuipe","c":"Brazil","y":-14.6778,"x":-39.375},{"n":"Isla-Cristina","c":"Spain","y":37.1992,"x":-7.3214},{"n":"San Martin de las Piramides","c":"Mexico","y":19.7333,"x":-98.8167},{"n":"Bornem","c":"Belgium","y":51.0953,"x":4.2342},{"n":"Cavinti","c":"Philippines","y":14.2448,"x":121.508},{"n":"Sao Francisco de Paula","c":"Brazil","y":-29.4478,"x":-50.5839},{"n":"Puerto Triunfo","c":"Colombia","y":5.8728,"x":-74.6397},{"n":"San Bernardo","c":"Colombia","y":1.5164,"x":-77.0467},{"n":"Rancho San Diego","c":"United States","y":32.7624,"x":-116.9197},{"n":"Silva Jardim","c":"Brazil","y":-22.6508,"x":-42.3919},{"n":"Itaiopolis","c":"Brazil","y":-26.3358,"x":-49.9058},{"n":"Collingwood","c":"Canada","y":44.5,"x":-80.2167},{"n":"Alcala la Real","c":"Spain","y":37.45,"x":-3.9167},{"n":"Quickborn","c":"Germany","y":53.7333,"x":9.8972},{"n":"Monsummano","c":"Italy","y":43.8667,"x":10.8167},{"n":"Zundert","c":"Netherlands","y":51.4703,"x":4.66},{"n":"Itapecerica","c":"Brazil","y":-20.4728,"x":-45.1258},{"n":"Coronel Vivida","c":"Brazil","y":-25.98,"x":-52.5678},{"n":"Pergine Valsugana","c":"Italy","y":46.0667,"x":11.2333},{"n":"Saint Austell","c":"United Kingdom","y":50.3386,"x":-4.7922},{"n":"Corciano","c":"Italy","y":43.129,"x":12.2877},{"n":"Viga","c":"Philippines","y":13.8667,"x":124.3},{"n":"Palo del Colle","c":"Italy","y":41.05,"x":16.7},{"n":"Bilohorodka","c":"Ukraine","y":50.4,"x":30.2167},{"n":"Miguelopolis","c":"Brazil","y":-20.1794,"x":-48.0319},{"n":"Kurikka","c":"Finland","y":62.6167,"x":22.4},{"n":"Sao Marcos","c":"Brazil","y":-28.9708,"x":-51.0678},{"n":"Darien","c":"United States","y":41.0786,"x":-73.4819},{"n":"Germersheim","c":"Germany","y":49.2167,"x":8.3667},{"n":"Gokcebey","c":"Turkey","y":41.3133,"x":32.1497},{"n":"Dax","c":"France","y":43.71,"x":-1.05},{"n":"Shafter","c":"United States","y":35.4794,"x":-119.2013},{"n":"Eastmont","c":"United States","y":47.8968,"x":-122.1817},{"n":"Wallington","c":"United Kingdom","y":51.3647,"x":-0.1403},{"n":"Stadtallendorf","c":"Germany","y":50.8333,"x":9.0167},{"n":"Katy","c":"United States","y":29.7904,"x":-95.8353},{"n":"Brownwood","c":"United States","y":31.7127,"x":-98.9767},{"n":"Chernogolovka","c":"Russia","y":56.0147,"x":38.3897},{"n":"Versmold","c":"Germany","y":52.0436,"x":8.15},{"n":"Savigliano","c":"Italy","y":44.65,"x":7.6333},{"n":"Del City","c":"United States","y":35.4483,"x":-97.4408},{"n":"Woodlesford","c":"United Kingdom","y":53.7567,"x":-1.453},{"n":"Kobilo","c":"Senegal","y":16.15,"x":-13.5},{"n":"Eyl","c":"Somalia","y":7.9667,"x":49.85},{"n":"Almoradi","c":"Spain","y":38.1097,"x":-0.7894},{"n":"Zerbst","c":"Germany","y":51.9681,"x":12.0844},{"n":"Montecatini Terme","c":"Italy","y":43.8828,"x":10.7711},{"n":"Batad","c":"Philippines","y":11.4167,"x":123.1167},{"n":"Senaki","c":"Georgia","y":42.2689,"x":42.0678},{"n":"Caapora","c":"Brazil","y":-7.5158,"x":-34.9078},{"n":"San Jacinto","c":"Colombia","y":9.8311,"x":-75.1219},{"n":"Beaune","c":"France","y":47.025,"x":4.8397},{"n":"Sao Felipe","c":"Brazil","y":-12.8469,"x":-39.0889},{"n":"Cassilandia","c":"Brazil","y":-19.1128,"x":-51.7339},{"n":"Bad Rappenau","c":"Germany","y":49.2389,"x":9.1028},{"n":"Nova Brasilandia d'Oeste","c":"Brazil","y":-11.7197,"x":-62.3158},{"n":"Follonica","c":"Italy","y":42.9189,"x":10.7614},{"n":"Wulfrath","c":"Germany","y":51.2833,"x":7.0333},{"n":"Les Pennes-Mirabeau","c":"France","y":43.4106,"x":5.3103},{"n":"Yenice","c":"Turkey","y":41.2,"x":32.3333},{"n":"Entroncamento","c":"Portugal","y":39.4667,"x":-8.4667},{"n":"Silverdale","c":"United States","y":47.6663,"x":-122.6828},{"n":"Allendale","c":"United States","y":42.9851,"x":-85.9509},{"n":"Kant","c":"Kyrgyzstan","y":42.8833,"x":74.85},{"n":"Nefta","c":"Tunisia","y":33.8722,"x":7.8816},{"n":"Aichach","c":"Germany","y":48.45,"x":11.1333},{"n":"Denain","c":"France","y":50.3286,"x":3.395},{"n":"Crisopolis","c":"Brazil","y":-11.5108,"x":-38.15},{"n":"Kirkintilloch","c":"United Kingdom","y":55.9357,"x":-4.1547},{"n":"Urucui","c":"Brazil","y":-7.2333,"x":-44.55},{"n":"Paraguacu","c":"Brazil","y":-21.5331,"x":-45.7664},{"n":"Lower","c":"United States","y":38.9819,"x":-74.9088},{"n":"San Nicolas","c":"Cuba","y":22.7819,"x":-81.9069},{"n":"Lindlar","c":"Germany","y":51.0167,"x":7.3833},{"n":"Nueva Granada","c":"Colombia","y":9.8011,"x":-74.3917},{"n":"Tamgrout","c":"Morocco","y":30.2612,"x":-5.682},{"n":"La Resolana","c":"Mexico","y":19.6031,"x":-104.4362},{"n":"Leerdam","c":"Netherlands","y":51.8939,"x":5.0914},{"n":"Hoogstraten","c":"Belgium","y":51.4008,"x":4.7611},{"n":"Ozoir-la-Ferriere","c":"France","y":48.778,"x":2.68},{"n":"Perrysburg","c":"United States","y":41.5377,"x":-83.6413},{"n":"Zhoucun","c":"China","y":37.4509,"x":115.4829},{"n":"Coswig","c":"Germany","y":51.1333,"x":13.5833},{"n":"Sondershausen","c":"Germany","y":51.3667,"x":10.8667},{"n":"Scugog","c":"Canada","y":44.09,"x":-78.936},{"n":"Galeras","c":"Colombia","y":9.1586,"x":-75.0489},{"n":"Lewistown","c":"United States","y":40.5964,"x":-77.573},{"n":"Richmond","c":"United Kingdom","y":51.456,"x":-0.301},{"n":"Allauch","c":"France","y":43.3369,"x":5.4828},{"n":"Nang Rong","c":"Thailand","y":14.6363,"x":102.7746},{"n":"Piddig","c":"Philippines","y":18.1667,"x":120.7333},{"n":"Tong'anyi","c":"China","y":35.3041,"x":104.6802},{"n":"Anagni","c":"Italy","y":41.75,"x":13.15},{"n":"Argenta","c":"Italy","y":44.6131,"x":11.8364},{"n":"Acatic","c":"Mexico","y":20.7803,"x":-102.91},{"n":"Parelhas","c":"Brazil","y":-6.6878,"x":-36.6578},{"n":"Eeklo","c":"Belgium","y":51.1858,"x":3.5639},{"n":"Gardanne","c":"France","y":43.4553,"x":5.476},{"n":"Hajnowka","c":"Poland","y":52.7333,"x":23.5667},{"n":"MacArthur","c":"Philippines","y":10.85,"x":124.95},{"n":"Grottaferrata","c":"Italy","y":41.8,"x":12.6667},{"n":"Perdoes","c":"Brazil","y":-21.0908,"x":-45.0908},{"n":"Geseke","c":"Germany","y":51.6497,"x":8.5167},{"n":"Gherla","c":"Romania","y":47.02,"x":23.9},{"n":"Dayr Abu Hinnis","c":"Egypt","y":27.7864,"x":30.905},{"n":"Buritirama","c":"Brazil","y":-10.7078,"x":-43.6308},{"n":"Jamsa","c":"Finland","y":61.8639,"x":25.1903},{"n":"Murree","c":"Pakistan","y":33.9042,"x":73.3903},{"n":"Kingsville","c":"Canada","y":42.1,"x":-82.7167},{"n":"Gujan-Mestras","c":"France","y":44.6364,"x":-1.0667},{"n":"Monte Santo de Minas","c":"Brazil","y":-21.19,"x":-46.98},{"n":"Ano Syros","c":"Greece","y":37.45,"x":24.9},{"n":"Porto Franco","c":"Brazil","y":-6.3378,"x":-47.3989},{"n":"Barro","c":"Brazil","y":-7.1769,"x":-38.7819},{"n":"Leek","c":"United Kingdom","y":53.108,"x":-2.0234},{"n":"Romano di Lombardia","c":"Italy","y":45.5167,"x":9.75},{"n":"Cajueiro","c":"Brazil","y":-9.3967,"x":-36.1536},{"n":"Kara-Suu","c":"Kyrgyzstan","y":40.7,"x":72.8833},{"n":"Baie-Comeau","c":"Canada","y":49.2167,"x":-68.15},{"n":"Qia'erbagecun","c":"China","y":37.9766,"x":77.3417},{"n":"Harsefeld","c":"Germany","y":53.45,"x":9.5},{"n":"Santa Barbara","c":"Colombia","y":5.8747,"x":-75.5661},{"n":"Dean Funes","c":"Argentina","y":-30.4333,"x":-64.35},{"n":"Villagarzon","c":"Colombia","y":1.0294,"x":-76.6164},{"n":"Anini-y","c":"Philippines","y":10.4325,"x":121.9253},{"n":"Paraibano","c":"Brazil","y":-6.4328,"x":-43.9839},{"n":"Bellview","c":"United States","y":30.462,"x":-87.312},{"n":"Vecses","c":"Hungary","y":47.4108,"x":19.2722},{"n":"Picasent","c":"Spain","y":39.3611,"x":-0.46},{"n":"Lagoa do Itaenga","c":"Brazil","y":-7.9358,"x":-35.29},{"n":"Livadeia","c":"Greece","y":38.4361,"x":22.875},{"n":"Biddeford","c":"United States","y":43.4674,"x":-70.4512},{"n":"Suzzara","c":"Italy","y":44.9927,"x":10.7494},{"n":"Moniquira","c":"Colombia","y":5.8744,"x":-73.5717},{"n":"Wang Nam Yen","c":"Thailand","y":13.5004,"x":102.1806},{"n":"Juli","c":"Peru","y":-16.2125,"x":-69.4603},{"n":"Somers","c":"United States","y":41.3058,"x":-73.725},{"n":"Sarreguemines","c":"France","y":49.11,"x":7.07},{"n":"Ryazhsk","c":"Russia","y":53.7167,"x":40.0667},{"n":"Rosolini","c":"Italy","y":36.8167,"x":14.95},{"n":"Villa Park","c":"United States","y":41.8864,"x":-87.9779},{"n":"Magallanes","c":"Philippines","y":9.0225,"x":125.5179},{"n":"El Paujil","c":"Colombia","y":1.5694,"x":-75.3264},{"n":"Almaguer","c":"Colombia","y":1.9131,"x":-76.8561},{"n":"Fernley","c":"United States","y":39.5611,"x":-119.1926},{"n":"Xintian","c":"China","y":23.1427,"x":103.5489},{"n":"Prudnik","c":"Poland","y":50.3197,"x":17.5792},{"n":"Schramberg","c":"Germany","y":48.2269,"x":8.3842},{"n":"Khotkovo","c":"Russia","y":56.25,"x":37.9833},{"n":"Elkridge","c":"United States","y":39.1941,"x":-76.7427},{"n":"Kutna Hora","c":"Czechia","y":49.9484,"x":15.2682},{"n":"Jindrichuv Hradec","c":"Czechia","y":49.1441,"x":15.003},{"n":"Naawan","c":"Philippines","y":8.4333,"x":124.3},{"n":"Palatka","c":"Russia","y":60.1,"x":150.9},{"n":"Antsohihy","c":"Madagascar","y":-14.8661,"x":47.9834},{"n":"Tarko-Sale","c":"Russia","y":64.9147,"x":77.7728},{"n":"Sint-Katelijne-Waver","c":"Belgium","y":51.0667,"x":4.5333},{"n":"Traunreut","c":"Germany","y":47.9667,"x":12.5833},{"n":"Mukilteo","c":"United States","y":47.9096,"x":-122.3035},{"n":"Cugir","c":"Romania","y":45.8436,"x":23.3636},{"n":"Urussanga","c":"Brazil","y":-28.5178,"x":-49.3208},{"n":"East Pennsboro","c":"United States","y":40.2886,"x":-76.9394},{"n":"Atoka","c":"United States","y":35.4239,"x":-89.7861},{"n":"Prichard","c":"United States","y":30.7735,"x":-88.1301},{"n":"Le Ray","c":"United States","y":44.0771,"x":-75.7975},{"n":"Oros","c":"Brazil","y":-6.2439,"x":-38.9139},{"n":"Waghausel","c":"Germany","y":49.25,"x":8.5169},{"n":"Soltau","c":"Germany","y":52.9833,"x":9.8333},{"n":"Hays","c":"United States","y":38.8815,"x":-99.3218},{"n":"Tubbergen","c":"Netherlands","y":52.4,"x":6.7667},{"n":"Oulad Embarek","c":"Morocco","y":32.2878,"x":-6.4328},{"n":"Tizi-n-Bechar","c":"Algeria","y":36.4311,"x":5.36},{"n":"Gross-Umstadt","c":"Germany","y":49.8683,"x":8.929},{"n":"Pajara","c":"Spain","y":28.35,"x":-14.1},{"n":"Los Vilos","c":"Chile","y":-31.9,"x":-71.5167},{"n":"Nerja","c":"Spain","y":36.7469,"x":-3.879},{"n":"Sestu","c":"Italy","y":39.2994,"x":9.0918},{"n":"Recanati","c":"Italy","y":43.3986,"x":13.5525},{"n":"Paradise","c":"Canada","y":47.5333,"x":-52.8667},{"n":"Sessa Aurunca","c":"Italy","y":41.2333,"x":13.9333},{"n":"Pompeia","c":"Brazil","y":-22.1089,"x":-50.1719},{"n":"Marogong","c":"Philippines","y":7.6667,"x":124.15},{"n":"Montville","c":"United States","y":40.9135,"x":-74.3594},{"n":"Easley","c":"United States","y":34.819,"x":-82.5828},{"n":"La Union","c":"Spain","y":37.6192,"x":-0.8756},{"n":"Brambleton","c":"United States","y":38.9802,"x":-77.5323},{"n":"Gryfino","c":"Poland","y":53.2524,"x":14.4883},{"n":"Kaltan","c":"Russia","y":53.5167,"x":87.2667},{"n":"Totoro","c":"Colombia","y":2.5103,"x":-76.4019},{"n":"Samboan","c":"Philippines","y":9.5288,"x":123.3064},{"n":"Palmer","c":"United States","y":40.7007,"x":-75.2628},{"n":"Shisui","c":"Japan","y":35.725,"x":140.2694},{"n":"Jandaia do Sul","c":"Brazil","y":-23.6028,"x":-51.6428},{"n":"Hindang","c":"Philippines","y":10.45,"x":124.8},{"n":"Los Llanos de Aridane","c":"Spain","y":28.65,"x":-17.9},{"n":"Lyskovo","c":"Russia","y":56.0128,"x":45.0253},{"n":"Varadero","c":"Cuba","y":23.1394,"x":-81.2861},{"n":"Belovodskoe","c":"Kyrgyzstan","y":42.8333,"x":74.1167},{"n":"Youganning","c":"China","y":34.7356,"x":101.5978},{"n":"Barcelona","c":"Philippines","y":12.8667,"x":124.1333},{"n":"Asni","c":"Morocco","y":31.25,"x":-7.9792},{"n":"Ramona","c":"United States","y":33.0474,"x":-116.8767},{"n":"Carei","c":"Romania","y":47.69,"x":22.47},{"n":"Bananeiras","c":"Brazil","y":-6.75,"x":-35.6328},{"n":"Owosso","c":"United States","y":42.9955,"x":-84.176},{"n":"King of Prussia","c":"United States","y":40.0963,"x":-75.382},{"n":"Elverum","c":"Norway","y":60.8833,"x":11.5667},{"n":"DeBary","c":"United States","y":28.8815,"x":-81.324},{"n":"Araripe","c":"Brazil","y":-7.2128,"x":-40.0458},{"n":"Garforth","c":"United Kingdom","y":53.792,"x":-1.388},{"n":"Eustis","c":"United States","y":28.856,"x":-81.6781},{"n":"Tanhacu","c":"Brazil","y":-14.0208,"x":-41.2478},{"n":"South Euclid","c":"United States","y":41.5239,"x":-81.5245},{"n":"Adet","c":"Ethiopia","y":11.2667,"x":37.4833},{"n":"South Holland","c":"United States","y":41.5977,"x":-87.6022},{"n":"Jiangjiadong","c":"China","y":24.5067,"x":112.8385},{"n":"Pushchino","c":"Russia","y":54.8333,"x":37.6167},{"n":"Okahandja","c":"Namibia","y":-21.9796,"x":16.91},{"n":"Palm Valley","c":"United States","y":30.2011,"x":-81.3949},{"n":"Bulach","c":"Switzerland","y":47.5189,"x":8.5422},{"n":"Ludlow","c":"United States","y":42.1921,"x":-72.4581},{"n":"Nerekhta","c":"Russia","y":57.45,"x":40.5833},{"n":"Carmo do Rio Claro","c":"Brazil","y":-20.9731,"x":-46.1189},{"n":"Paraisopolis","c":"Brazil","y":-22.5539,"x":-45.78},{"n":"Givors","c":"France","y":45.5906,"x":4.7689},{"n":"Sapulpa","c":"United States","y":36.0089,"x":-96.1006},{"n":"Santa Maria Chilchotla","c":"Mexico","y":18.2333,"x":-96.8167},{"n":"Manuel Tames","c":"Cuba","y":20.1803,"x":-75.0514},{"n":"Alfena","c":"Portugal","y":41.2395,"x":-8.5244},{"n":"Duarte","c":"United States","y":34.161,"x":-117.9504},{"n":"Aguadas","c":"Colombia","y":5.6092,"x":-75.4564},{"n":"Rio Maior","c":"Portugal","y":39.3333,"x":-8.9333},{"n":"Lucelia","c":"Brazil","y":-21.7203,"x":-51.0189},{"n":"Great Linford","c":"United Kingdom","y":52.068,"x":-0.7637},{"n":"Griffith","c":"Australia","y":-34.29,"x":146.04},{"n":"Brezno","c":"Slovakia","y":48.8036,"x":19.6381},{"n":"Ayamonte","c":"Spain","y":37.2,"x":-7.4},{"n":"Battle Ground","c":"United States","y":45.7765,"x":-122.5413},{"n":"Ferentino","c":"Italy","y":41.6833,"x":13.25},{"n":"Stephenville","c":"United States","y":32.2148,"x":-98.2205},{"n":"Monte Alegre de Minas","c":"Brazil","y":-18.8708,"x":-48.8808},{"n":"Itororo","c":"Brazil","y":-15.1169,"x":-40.07},{"n":"Amsterdam","c":"United States","y":42.942,"x":-74.1907},{"n":"Montecristo","c":"Colombia","y":8.2958,"x":-74.4728},{"n":"Sandhurst","c":"United Kingdom","y":51.349,"x":-0.8},{"n":"Reichenbach/Vogtland","c":"Germany","y":50.6167,"x":12.3},{"n":"Baixa Grande","c":"Brazil","y":-11.96,"x":-40.1678},{"n":"Sadao","c":"Thailand","y":6.6386,"x":100.424},{"n":"Park Forest","c":"United States","y":41.4817,"x":-87.6868},{"n":"San Salvo","c":"Italy","y":42.0455,"x":14.7315},{"n":"Schenefeld","c":"Germany","y":53.6028,"x":9.8233},{"n":"Hancha","c":"China","y":37.8572,"x":109.4972},{"n":"Fort Atkinson","c":"United States","y":42.9253,"x":-88.8441},{"n":"Hazel Dell","c":"United States","y":45.6797,"x":-122.6553},{"n":"Varkaus","c":"Finland","y":62.3167,"x":27.8833},{"n":"Bastos","c":"Brazil","y":-21.9167,"x":-50.7333},{"n":"Carrboro","c":"United States","y":35.926,"x":-79.0878},{"n":"Baclayon","c":"Philippines","y":9.6227,"x":123.9135},{"n":"Seria","c":"Brunei","y":4.6142,"x":114.3303},{"n":"Agan","c":"China","y":35.9167,"x":103.8471},{"n":"Bardstown","c":"United States","y":37.8174,"x":-85.4548},{"n":"East Ridge","c":"United States","y":34.9973,"x":-85.2284},{"n":"Wipperfurth","c":"Germany","y":51.1167,"x":7.4},{"n":"Elko","c":"United States","y":40.8387,"x":-115.7674},{"n":"Uxbridge","c":"Canada","y":44.1167,"x":-79.1333},{"n":"Florencia","c":"Cuba","y":22.1475,"x":-78.9669},{"n":"Suaza","c":"Colombia","y":1.975,"x":-75.7956},{"n":"Bologoye","c":"Russia","y":57.8787,"x":34.0789},{"n":"Cabucgayan","c":"Philippines","y":11.4667,"x":124.5667},{"n":"Gaffney","c":"United States","y":35.0742,"x":-81.6558},{"n":"Xinnongcun","c":"China","y":42.2357,"x":122.9455},{"n":"Alcudia","c":"Spain","y":39.8525,"x":3.1192},{"n":"Praia da Vitoria","c":"Portugal","y":38.7333,"x":-27.0667},{"n":"Boralday","c":"Kazakhstan","y":43.3341,"x":76.8288},{"n":"Sun Valley","c":"United States","y":39.6106,"x":-119.7765},{"n":"Komatipoort","c":"South Africa","y":-25.4333,"x":31.95},{"n":"Tigbao","c":"Philippines","y":7.8205,"x":123.2277},{"n":"Barroso","c":"Brazil","y":-21.1869,"x":-43.9758},{"n":"Anping","c":"China","y":39.7034,"x":116.8954},{"n":"West Deptford","c":"United States","y":39.8431,"x":-75.1851},{"n":"Sidney","c":"United States","y":40.2891,"x":-84.1667},{"n":"Bonney Lake","c":"United States","y":47.1791,"x":-122.17},{"n":"Urucurituba","c":"Brazil","y":-3.1308,"x":-58.155},{"n":"Taperoa","c":"Brazil","y":-13.5378,"x":-39.0989},{"n":"Parabcan","c":"Philippines","y":13.7167,"x":123.75},{"n":"Ecclesall","c":"United Kingdom","y":53.362,"x":-1.498},{"n":"Frondenberg","c":"Germany","y":51.4719,"x":7.7658},{"n":"Harstad","c":"Norway","y":68.7989,"x":16.5314},{"n":"Villapinzon","c":"Colombia","y":5.2158,"x":-73.5967},{"n":"El Calafate","c":"Argentina","y":-50.3395,"x":-72.2649},{"n":"Martha Lake","c":"United States","y":47.8479,"x":-122.2327},{"n":"Cournon-d'Auvergne","c":"France","y":45.7422,"x":3.1972},{"n":"Little Egg Harbor","c":"United States","y":39.5969,"x":-74.3454},{"n":"Bad Schwartau","c":"Germany","y":53.9194,"x":10.6975},{"n":"Faversham","c":"United Kingdom","y":51.3177,"x":0.8928},{"n":"Vikhorevka","c":"Russia","y":56.1167,"x":101.1667},{"n":"Welench'iti","c":"Ethiopia","y":8.6667,"x":39.4333},{"n":"Bothell West","c":"United States","y":47.8056,"x":-122.2401},{"n":"Bruchkobel","c":"Germany","y":50.1833,"x":8.9167},{"n":"Jangy-Nookat","c":"Kyrgyzstan","y":40.25,"x":72.55},{"n":"Fredonia","c":"Colombia","y":5.9267,"x":-75.6739},{"n":"Werdau","c":"Germany","y":50.7333,"x":12.3833},{"n":"Stange","c":"Norway","y":60.6494,"x":11.3664},{"n":"Trecate","c":"Italy","y":45.4333,"x":8.7333},{"n":"Pakil","c":"Philippines","y":14.3833,"x":121.4833},{"n":"Aspe","c":"Spain","y":38.3456,"x":-0.7689},{"n":"Pindobacu","c":"Brazil","y":-10.7428,"x":-40.3628},{"n":"Arroio do Meio","c":"Brazil","y":-29.4008,"x":-51.945},{"n":"Imi n'Oulaoun","c":"Morocco","y":31.3094,"x":-6.4992},{"n":"Campestre","c":"Brazil","y":-21.7108,"x":-46.2458},{"n":"Can-Avid","c":"Philippines","y":12,"x":125.45},{"n":"Vyskov","c":"Czechia","y":49.2775,"x":16.999},{"n":"La Colonia Tovar","c":"Venezuela","y":10.4167,"x":-67.2833},{"n":"Essa","c":"Canada","y":44.25,"x":-79.7833},{"n":"Santo Anastacio","c":"Brazil","y":-21.9769,"x":-51.6519},{"n":"Gunzburg","c":"Germany","y":48.4525,"x":10.2711},{"n":"Ballenger Creek","c":"United States","y":39.3807,"x":-77.4205},{"n":"Bahia de Caraquez","c":"Ecuador","y":-0.6,"x":-80.425},{"n":"Sotouboua","c":"Togo","y":8.5667,"x":0.9833},{"n":"Crowborough","c":"United Kingdom","y":51.06,"x":0.16},{"n":"Toguchin","c":"Russia","y":55.2333,"x":84.3833},{"n":"Ripley","c":"United Kingdom","y":53.05,"x":-1.407},{"n":"Steinhagen","c":"Germany","y":52.005,"x":8.4147},{"n":"Chascomus","c":"Argentina","y":-35.575,"x":-58.0089},{"n":"Elektrougli","c":"Russia","y":55.7167,"x":38.2167},{"n":"Saka","c":"Morocco","y":34.6167,"x":-3.4167},{"n":"El Reten","c":"Colombia","y":10.6106,"x":-74.2683},{"n":"Rolla","c":"United States","y":37.9458,"x":-91.7608},{"n":"Sysert","c":"Russia","y":56.5,"x":60.8167},{"n":"West Pensacola","c":"United States","y":30.4263,"x":-87.2679},{"n":"Winschoten","c":"Netherlands","y":53.15,"x":7.0333},{"n":"Sokal","c":"Ukraine","y":50.4833,"x":24.2833},{"n":"Candiac","c":"Canada","y":45.38,"x":-73.52},{"n":"Gallipoli","c":"Italy","y":40.0556,"x":17.9917},{"n":"Bni Rzine","c":"Morocco","y":35.0108,"x":-4.7262},{"n":"Medina","c":"Brazil","y":-16.2228,"x":-41.4769},{"n":"Abano Terme","c":"Italy","y":45.3619,"x":11.7924},{"n":"Cockeysville","c":"United States","y":39.4793,"x":-76.63},{"n":"Zd'ar nad Sazavou","c":"Czechia","y":49.5627,"x":15.9393},{"n":"Oro-Medonte","c":"Canada","y":44.5667,"x":-79.5833},{"n":"Jefferson","c":"United States","y":41.0003,"x":-74.5531},{"n":"Pleasant Prairie","c":"United States","y":42.5266,"x":-87.8895},{"n":"Mirador","c":"Brazil","y":-6.3708,"x":-44.3628},{"n":"Palma del Rio","c":"Spain","y":37.7,"x":-5.2833},{"n":"Voiron","c":"France","y":45.3642,"x":5.5906},{"n":"Mitry-Mory","c":"France","y":48.9839,"x":2.6164},{"n":"Liubotyn","c":"Ukraine","y":49.9489,"x":35.9306},{"n":"Senguio","c":"Mexico","y":19.7539,"x":-100.3377},{"n":"Bugalagrande","c":"Colombia","y":4.2075,"x":-76.1575},{"n":"Tepezala","c":"Mexico","y":22.2167,"x":-102.1667},{"n":"Gigaquit","c":"Philippines","y":9.6,"x":125.7},{"n":"Dudinka","c":"Russia","y":69.4,"x":86.1833},{"n":"Muhldorf","c":"Germany","y":48.2456,"x":12.5228},{"n":"Nurota","c":"Uzbekistan","y":40.565,"x":65.685},{"n":"Comodoro","c":"Brazil","y":-13.6593,"x":-59.7941},{"n":"Hualqui","c":"Chile","y":-36.9759,"x":-72.9384},{"n":"Lambari","c":"Brazil","y":-21.9758,"x":-45.35},{"n":"Castel San Pietro Terme","c":"Italy","y":44.3978,"x":11.5894},{"n":"Roshal","c":"Russia","y":55.6667,"x":39.8833},{"n":"Caoayan","c":"Philippines","y":17.5333,"x":120.4},{"n":"Varennes","c":"Canada","y":45.6833,"x":-73.4333},{"n":"St. Andrews","c":"United States","y":34.051,"x":-81.1057},{"n":"Milwaukie","c":"United States","y":45.4447,"x":-122.6221},{"n":"Rivalta di Torino","c":"Italy","y":45.0333,"x":7.5333},{"n":"Maribojoc","c":"Philippines","y":9.75,"x":123.85},{"n":"Challans","c":"France","y":46.8467,"x":-1.8781},{"n":"Madre de Deus","c":"Brazil","y":-12.7408,"x":-38.6208},{"n":"Butia","c":"Brazil","y":-30.12,"x":-51.9619},{"n":"Bussolengo","c":"Italy","y":45.4667,"x":10.85},{"n":"Pedra","c":"Brazil","y":-8.5006,"x":-36.9456},{"n":"Guara","c":"Brazil","y":-20.4283,"x":-47.8242},{"n":"Bryant","c":"United States","y":34.6152,"x":-92.4914},{"n":"Mae Sai","c":"Thailand","y":20.4266,"x":99.8841},{"n":"Nizhniy Lomov","c":"Russia","y":53.5333,"x":43.6833},{"n":"Urk","c":"Netherlands","y":52.6653,"x":5.6058},{"n":"Purranque","c":"Chile","y":-40.9167,"x":-73.1667},{"n":"Bohumin","c":"Czechia","y":49.9041,"x":18.3576},{"n":"Luckenwalde","c":"Germany","y":52.0831,"x":13.1667},{"n":"Guipos","c":"Philippines","y":7.7333,"x":123.3167},{"n":"Enger","c":"Germany","y":52.1333,"x":8.5667},{"n":"Serro","c":"Brazil","y":-18.5204,"x":-43.3807},{"n":"Dillingen","c":"Germany","y":49.35,"x":6.7333},{"n":"Siquinala","c":"Guatemala","y":14.3082,"x":-90.9659},{"n":"Salmon Creek","c":"United States","y":45.7099,"x":-122.6632},{"n":"Hyde Park","c":"United States","y":41.8011,"x":-73.906},{"n":"Cruzeiro do Oeste","c":"Brazil","y":-23.785,"x":-53.0728},{"n":"Hernani","c":"Spain","y":43.2667,"x":-1.9667},{"n":"Kill Devil Hills","c":"United States","y":36.0167,"x":-75.6699},{"n":"Oderzo","c":"Italy","y":45.7808,"x":12.4928},{"n":"North Salt Lake","c":"United States","y":40.8439,"x":-111.9187},{"n":"Apollo Beach","c":"United States","y":27.7618,"x":-82.4002},{"n":"Valenca do Piaui","c":"Brazil","y":-6.4078,"x":-41.7458},{"n":"Traunstein","c":"Germany","y":47.8683,"x":12.6433},{"n":"'Ain el Hammam","c":"Algeria","y":36.5647,"x":4.3061},{"n":"Herborn","c":"Germany","y":50.6825,"x":8.3061},{"n":"Al Brouj","c":"Morocco","y":32.5,"x":-7.2},{"n":"Comala","c":"Mexico","y":19.3208,"x":-103.7603},{"n":"Bombinhas","c":"Brazil","y":-27.1378,"x":-48.5169},{"n":"Gauting","c":"Germany","y":48.0678,"x":11.3739},{"n":"Vico Equense","c":"Italy","y":40.6667,"x":14.4333},{"n":"Ararat","c":"Armenia","y":39.8094,"x":44.7144},{"n":"Osa","c":"Russia","y":57.2833,"x":55.45},{"n":"Kurovskoye","c":"Russia","y":55.5833,"x":38.9167},{"n":"Catarina","c":"Brazil","y":-6.1308,"x":-39.8778},{"n":"Kremenets","c":"Ukraine","y":50.1081,"x":25.7275},{"n":"Cornelia","c":"United States","y":34.517,"x":-83.531},{"n":"Schifferstadt","c":"Germany","y":49.3861,"x":8.3761},{"n":"Suwanee","c":"United States","y":34.0506,"x":-84.0687},{"n":"New Hope","c":"United States","y":45.0374,"x":-93.3869},{"n":"Ubaitaba","c":"Brazil","y":-14.3128,"x":-39.3228},{"n":"Gerlingen","c":"Germany","y":48.8,"x":9.0653},{"n":"Wade Hampton","c":"United States","y":34.8821,"x":-82.3336},{"n":"Wuustwezel","c":"Belgium","y":51.3922,"x":4.5942},{"n":"Green Valley","c":"United States","y":31.8436,"x":-111.0174},{"n":"Mill Creek","c":"United States","y":47.8631,"x":-122.2037},{"n":"Samaca","c":"Colombia","y":5.4919,"x":-73.4867},{"n":"Pallazzolo sull'Oglio","c":"Italy","y":45.6,"x":9.8833},{"n":"Ovejas","c":"Colombia","y":9.5258,"x":-75.2272},{"n":"Pico Truncado","c":"Argentina","y":-46.8,"x":-67.9667},{"n":"Yangping","c":"China","y":27.7607,"x":100.6614},{"n":"Universal City","c":"United States","y":29.5521,"x":-98.3074},{"n":"Mossingen","c":"Germany","y":48.4064,"x":9.0575},{"n":"Sotomayor","c":"Colombia","y":1.4933,"x":-77.5214},{"n":"Kirkby in Ashfield","c":"United Kingdom","y":53.099,"x":-1.245},{"n":"Buinsk","c":"Russia","y":54.9667,"x":48.2833},{"n":"Gamboma","c":"Congo (Brazzaville)","y":-1.8795,"x":15.85},{"n":"Lopez","c":"Colombia","y":2.8464,"x":-77.2472},{"n":"Lorton","c":"United States","y":38.6984,"x":-77.2163},{"n":"Bourg-les-Valence","c":"France","y":44.9475,"x":4.8953},{"n":"Kuusankoski","c":"Finland","y":60.9083,"x":26.6236},{"n":"Clemmons","c":"United States","y":36.0319,"x":-80.3861},{"n":"Strathroy-Caradoc","c":"Canada","y":42.9575,"x":-81.6167},{"n":"Guimar","c":"Spain","y":28.315,"x":-16.41},{"n":"Olenegorsk","c":"Russia","y":68.15,"x":33.2833},{"n":"Valkeakoski","c":"Finland","y":61.2667,"x":24.0306},{"n":"Viesca","c":"Mexico","y":25.35,"x":-102.8},{"n":"Hexiang","c":"China","y":19.5283,"x":109.6328},{"n":"Rosamond","c":"United States","y":34.8658,"x":-118.2154},{"n":"Bear","c":"United States","y":39.6188,"x":-75.6804},{"n":"Horten","c":"Norway","y":59.4172,"x":10.4834},{"n":"Boussu","c":"Belgium","y":50.4331,"x":3.7961},{"n":"Blieskastel","c":"Germany","y":49.2422,"x":7.2544},{"n":"Dyersburg","c":"United States","y":36.0465,"x":-89.3777},{"n":"Blaj","c":"Romania","y":46.1753,"x":23.9144},{"n":"Hassloch","c":"Germany","y":49.35,"x":8.25},{"n":"Manor","c":"United States","y":39.9849,"x":-76.4216},{"n":"Puzol","c":"Spain","y":39.6167,"x":-0.3011},{"n":"Oneida","c":"United States","y":43.0769,"x":-75.6621},{"n":"Wachtberg","c":"Germany","y":50.6242,"x":7.1322},{"n":"Aomar","c":"Algeria","y":36.5,"x":3.7833},{"n":"Hanmayingcun","c":"China","y":41.2636,"x":117.8596},{"n":"Ceres","c":"Brazil","y":-15.3078,"x":-49.5978},{"n":"Hunters Creek","c":"United States","y":28.3611,"x":-81.4357},{"n":"Holiday","c":"United States","y":28.1864,"x":-82.7429},{"n":"Feltre","c":"Italy","y":46.0167,"x":11.9},{"n":"Pacatu","c":"Brazil","y":-11.9578,"x":-38.975},{"n":"Ubaira","c":"Brazil","y":-13.2678,"x":-39.6628},{"n":"Lebedinovka","c":"Kyrgyzstan","y":42.88,"x":74.68},{"n":"Giovinazzo","c":"Italy","y":41.1833,"x":16.6667},{"n":"Stamford","c":"United Kingdom","y":52.656,"x":-0.484},{"n":"Dixon","c":"United States","y":38.4468,"x":-121.8249},{"n":"Allende","c":"Mexico","y":28.3333,"x":-100.8333},{"n":"Ino","c":"Japan","y":33.5486,"x":133.4278},{"n":"Pontassieve","c":"Italy","y":43.775,"x":11.4375},{"n":"Scobinti","c":"Romania","y":47.4016,"x":26.9141},{"n":"Mabitac","c":"Philippines","y":14.4333,"x":121.4167},{"n":"Lastra a Signa","c":"Italy","y":43.7667,"x":11.1},{"n":"Carcagente","c":"Spain","y":39.1222,"x":-0.4489},{"n":"Lazi","c":"Philippines","y":9.1333,"x":123.6167},{"n":"Dugulubgey","c":"Russia","y":43.65,"x":43.55},{"n":"Pozzallo","c":"Italy","y":36.7303,"x":14.8467},{"n":"Inopacan","c":"Philippines","y":10.5,"x":124.75},{"n":"Golden","c":"United States","y":39.7406,"x":-105.2118},{"n":"Nidderau","c":"Germany","y":50.25,"x":8.9},{"n":"Illapel","c":"Chile","y":-31.6327,"x":-71.1683},{"n":"Bad Salzungen","c":"Germany","y":50.8117,"x":10.2333},{"n":"Blansko","c":"Czechia","y":49.3632,"x":16.6432},{"n":"Acquaviva delle Fonti","c":"Italy","y":40.9,"x":16.85},{"n":"Nova Granada","c":"Brazil","y":-20.5339,"x":-49.3139},{"n":"Olean","c":"United States","y":42.0819,"x":-78.4321},{"n":"Chachahuantla","c":"Mexico","y":20.2756,"x":-98.1503},{"n":"Hoddesdon","c":"United Kingdom","y":51.759,"x":-0.015},{"n":"Dolyna","c":"Ukraine","y":48.9703,"x":24.0108},{"n":"Na Klang","c":"Thailand","y":17.3043,"x":102.1964},{"n":"Senica","c":"Slovakia","y":48.6806,"x":17.3667},{"n":"Fonte Boa","c":"Brazil","y":-2.5139,"x":-66.0917},{"n":"Belem de Sao Francisco","c":"Brazil","y":-8.7578,"x":-38.9639},{"n":"Elvas","c":"Portugal","y":38.88,"x":-7.1628},{"n":"Tala Yfassene","c":"Algeria","y":36.4583,"x":5.0889},{"n":"Melena del Sur","c":"Cuba","y":22.7814,"x":-82.1486},{"n":"Grayslake","c":"United States","y":42.3402,"x":-88.0338},{"n":"Mantsala","c":"Finland","y":60.6331,"x":25.3167},{"n":"Tielt","c":"Belgium","y":50.9989,"x":3.3258},{"n":"Pita","c":"Guinea","y":11.08,"x":-12.401},{"n":"Okha","c":"Russia","y":53.5833,"x":142.9333},{"n":"Ronda","c":"Philippines","y":10.0003,"x":123.4095},{"n":"Riacho das Almas","c":"Brazil","y":-8.1339,"x":-35.6892},{"n":"Piratini","c":"Brazil","y":-31.4478,"x":-53.1039},{"n":"Cranendonck","c":"Netherlands","y":51.2853,"x":5.5881},{"n":"Menaka","c":"Mali","y":15.9183,"x":2.4022},{"n":"Andira","c":"Brazil","y":-23.0508,"x":-50.2289},{"n":"South Milwaukee","c":"United States","y":42.912,"x":-87.8627},{"n":"Shimogamo","c":"Japan","y":34.6794,"x":138.9453},{"n":"Sidi Chiker","c":"Morocco","y":31.7453,"x":-8.7069},{"n":"Cittadella","c":"Italy","y":45.6486,"x":11.7836},{"n":"Miracema do Tocantins","c":"Brazil","y":-9.5669,"x":-48.3919},{"n":"Pertuis","c":"France","y":43.695,"x":5.5036},{"n":"Nove Mesto nad Vahom","c":"Slovakia","y":48.7833,"x":17.8333},{"n":"Arhavi","c":"Turkey","y":41.3531,"x":41.31},{"n":"Duderstadt","c":"Germany","y":51.5125,"x":10.2597},{"n":"Hailsham","c":"United Kingdom","y":50.8647,"x":0.2577},{"n":"Nordlingen","c":"Germany","y":48.85,"x":10.5},{"n":"Sabaudia","c":"Italy","y":41.2998,"x":13.0248},{"n":"Havelock","c":"United States","y":34.9078,"x":-76.8987},{"n":"Sao Joao do Piaui","c":"Brazil","y":-8.3578,"x":-42.2469},{"n":"Wasaga Beach","c":"Canada","y":44.5206,"x":-80.0167},{"n":"Neufahrn bei Freising","c":"Germany","y":48.3159,"x":11.6632},{"n":"Lake Ronkonkoma","c":"United States","y":40.8308,"x":-73.1112},{"n":"Cirencester","c":"United Kingdom","y":51.719,"x":-1.968},{"n":"Chapulhuacan","c":"Mexico","y":21.1547,"x":-98.9039},{"n":"Vazante","c":"Brazil","y":-17.9869,"x":-46.9078},{"n":"Ban Tha Pha","c":"Thailand","y":13.8437,"x":99.8681},{"n":"Bati","c":"Ethiopia","y":11.1833,"x":40.0167},{"n":"East Moline","c":"United States","y":41.5199,"x":-90.3879},{"n":"As","c":"Norway","y":59.6603,"x":10.7836},{"n":"Baiao","c":"Portugal","y":41.1667,"x":-8.0333},{"n":"Miandrivazo","c":"Madagascar","y":-19.5162,"x":45.4666},{"n":"Gjovik","c":"Norway","y":60.7957,"x":10.6916},{"n":"Korntal-Munchingen","c":"Germany","y":48.8306,"x":9.1214},{"n":"Floresti","c":"Romania","y":46.7475,"x":23.4908},{"n":"Beroun","c":"Czechia","y":49.9639,"x":14.0721},{"n":"Bobrov","c":"Russia","y":51.0944,"x":40.0322},{"n":"Itanhem","c":"Brazil","y":-17.1658,"x":-40.33},{"n":"Schortens","c":"Germany","y":53.5333,"x":7.95},{"n":"Kawayan","c":"Philippines","y":11.7,"x":124.3667},{"n":"Goris","c":"Armenia","y":39.5111,"x":46.3417},{"n":"Pak Phanang","c":"Thailand","y":8.3538,"x":100.2023},{"n":"Mar''ina Horka","c":"Belarus","y":53.5167,"x":28.1417},{"n":"Yorkville","c":"United States","y":41.6562,"x":-88.4507},{"n":"Archena","c":"Spain","y":38.115,"x":-1.2992},{"n":"Mbala","c":"Zambia","y":-8.84,"x":31.37},{"n":"Kawambwa","c":"Zambia","y":-9.7795,"x":29.08},{"n":"New Glasgow","c":"Canada","y":45.5926,"x":-62.6455},{"n":"Sidi Jaber","c":"Morocco","y":32.3833,"x":-6.4167},{"n":"Logansport","c":"United States","y":40.7472,"x":-86.3519},{"n":"Linamon","c":"Philippines","y":8.1833,"x":124.1667},{"n":"Douar Lamrabih","c":"Morocco","y":34.8167,"x":-5.8167},{"n":"Station des Essais M.V.A.","c":"Morocco","y":34.9353,"x":-2.4306},{"n":"Chodziez","c":"Poland","y":52.9901,"x":16.9122},{"n":"Aldan","c":"Russia","y":58.6,"x":125.3833},{"n":"Muzambinho","c":"Brazil","y":-21.3758,"x":-46.5258},{"n":"Hiddenhausen","c":"Germany","y":52.1667,"x":8.6167},{"n":"Barehra","c":"India","y":27.75,"x":78.5667},{"n":"Casarano","c":"Italy","y":40.0167,"x":18.1667},{"n":"Nikolsk","c":"Russia","y":53.7167,"x":46.0833},{"n":"Veroli","c":"Italy","y":41.6833,"x":13.4167},{"n":"North Ogden","c":"United States","y":41.3123,"x":-111.9585},{"n":"Ain Cheggag","c":"Morocco","y":33.8833,"x":-5.0333},{"n":"Bibai","c":"Japan","y":43.3329,"x":141.8538},{"n":"Gioia Tauro","c":"Italy","y":38.4333,"x":15.9},{"n":"Stadtlohn","c":"Germany","y":51.9925,"x":6.915},{"n":"Meinerzhagen","c":"Germany","y":51.1061,"x":7.6403},{"n":"Baden","c":"Switzerland","y":47.4729,"x":8.308},{"n":"Qagan Us","c":"China","y":36.2979,"x":98.0937},{"n":"Arsk","c":"Russia","y":56.0906,"x":49.8764},{"n":"Timana","c":"Colombia","y":1.9499,"x":-75.9139},{"n":"San Mauro Torinese","c":"Italy","y":45.1039,"x":7.7536},{"n":"Sunchales","c":"Argentina","y":-30.9442,"x":-61.5614},{"n":"Cambridge","c":"New Zealand","y":-37.8833,"x":175.4667},{"n":"Itapiuna","c":"Brazil","y":-4.5639,"x":-38.9219},{"n":"Miracatu","c":"Brazil","y":-24.2808,"x":-47.46},{"n":"Hem","c":"France","y":50.6553,"x":3.1878},{"n":"Medina del Campo","c":"Spain","y":41.3,"x":-4.9167},{"n":"Altonia","c":"Brazil","y":-23.8739,"x":-53.9019},{"n":"Gaeta","c":"Italy","y":41.2167,"x":13.5667},{"n":"Wilmot","c":"Canada","y":43.4,"x":-80.65},{"n":"Acri","c":"Italy","y":39.5,"x":16.3833},{"n":"Mundra","c":"India","y":22.85,"x":69.73},{"n":"Colonia General Felipe Angeles","c":"Mexico","y":23.9167,"x":-104.6},{"n":"Laboulaye","c":"Argentina","y":-34.1267,"x":-63.3911},{"n":"Tyrnyauz","c":"Russia","y":43.4,"x":42.9167},{"n":"San Pablo Tacachico","c":"El Salvador","y":13.9833,"x":-89.3333},{"n":"Pleszew","c":"Poland","y":51.8974,"x":17.7856},{"n":"Lynn Haven","c":"United States","y":30.2337,"x":-85.637},{"n":"Ferguson","c":"United States","y":38.749,"x":-90.295},{"n":"Khvansar","c":"Iran","y":33.2206,"x":50.315},{"n":"Nova Xavantina","c":"Brazil","y":-14.6728,"x":-52.3528},{"n":"Sacile","c":"Italy","y":45.9541,"x":12.5027},{"n":"Cinfaes","c":"Portugal","y":41.0667,"x":-8.0833},{"n":"Agua Branca","c":"Brazil","y":-9.2608,"x":-37.9361},{"n":"Willmar","c":"United States","y":45.122,"x":-95.0569},{"n":"Alice","c":"United States","y":27.7556,"x":-98.0653},{"n":"Seydi","c":"Turkmenistan","y":39.4817,"x":62.9136},{"n":"South Ockendon","c":"United Kingdom","y":51.5207,"x":0.2956},{"n":"Swansboro","c":"United States","y":34.6958,"x":-77.1368},{"n":"Marblehead","c":"United States","y":42.4991,"x":-70.8638},{"n":"Murphy","c":"United States","y":33.0186,"x":-96.6105},{"n":"Gostyn","c":"Poland","y":51.8792,"x":17.0125},{"n":"Sao Joaquim do Monte","c":"Brazil","y":-8.4319,"x":-35.8039},{"n":"Lannion","c":"France","y":48.7325,"x":-3.4553},{"n":"Bad Waldsee","c":"Germany","y":47.9211,"x":9.7519},{"n":"Ushtobe","c":"Kazakhstan","y":45.2653,"x":77.97},{"n":"Carquefou","c":"France","y":47.2969,"x":-1.4928},{"n":"Tobe","c":"Japan","y":33.7492,"x":132.7922},{"n":"Takanabe","c":"Japan","y":32.1333,"x":131.5},{"n":"Culpeper","c":"United States","y":38.4705,"x":-78.0001},{"n":"San Lorenzo","c":"Colombia","y":1.5039,"x":-77.2178},{"n":"Ocos","c":"Guatemala","y":14.5138,"x":-92.1909},{"n":"Berlin","c":"United States","y":41.6114,"x":-72.7758},{"n":"Ozark","c":"United States","y":37.0361,"x":-93.2155},{"n":"Cagwait","c":"Philippines","y":8.9167,"x":126.3},{"n":"Puerto Quito","c":"Ecuador","y":0.1272,"x":-79.2531},{"n":"Lugait","c":"Philippines","y":8.3411,"x":124.2592},{"n":"Montalto Uffugo","c":"Italy","y":39.4,"x":16.15},{"n":"Rancheria Payau","c":"Philippines","y":7.8509,"x":123.1542},{"n":"American Canyon","c":"United States","y":38.1796,"x":-122.2583},{"n":"Gaz","c":"Iran","y":32.8022,"x":51.6208},{"n":"Annaberg-Buchholz","c":"Germany","y":50.58,"x":13.0022},{"n":"Papillion","c":"United States","y":41.1516,"x":-96.0679},{"n":"Baza","c":"Spain","y":37.4833,"x":-2.7667},{"n":"Loja","c":"Spain","y":37.1667,"x":-4.15},{"n":"Kampong Thum","c":"Cambodia","y":12.712,"x":104.889},{"n":"Rhenen","c":"Netherlands","y":51.9597,"x":5.5689},{"n":"Piove di Sacco","c":"Italy","y":45.2977,"x":12.0368},{"n":"Tenjo","c":"Colombia","y":4.8697,"x":-74.1439},{"n":"Schwanewede","c":"Germany","y":53.2333,"x":8.6},{"n":"Ely","c":"United Kingdom","y":52.3981,"x":0.2622},{"n":"Belur","c":"India","y":13.1642,"x":75.8647},{"n":"Moorestown","c":"United States","y":39.9784,"x":-74.9413},{"n":"Ibiruba","c":"Brazil","y":-28.6278,"x":-53.09},{"n":"The Dalles","c":"United States","y":45.6053,"x":-121.1818},{"n":"Karnobat","c":"Bulgaria","y":42.6513,"x":26.9855},{"n":"Edam","c":"Netherlands","y":52.5167,"x":5.05},{"n":"Adel","c":"United Kingdom","y":53.8489,"x":-1.5849},{"n":"Ostrov","c":"Russia","y":57.3333,"x":28.35},{"n":"Bladel","c":"Netherlands","y":51.3667,"x":5.2167},{"n":"Jaboticatubas","c":"Brazil","y":-19.5139,"x":-43.745},{"n":"Cabra","c":"Spain","y":37.4667,"x":-4.4333},{"n":"Requena","c":"Spain","y":39.4861,"x":-1.1017},{"n":"Essex","c":"Canada","y":42.0833,"x":-82.9},{"n":"Villefontaine","c":"France","y":45.6133,"x":5.1486},{"n":"Uetze","c":"Germany","y":52.4661,"x":10.2039},{"n":"Porrino","c":"Spain","y":42.1667,"x":-8.6167},{"n":"La Estrada","c":"Spain","y":42.7,"x":-8.4833},{"n":"Svilengrad","c":"Bulgaria","y":41.7652,"x":26.203},{"n":"Barre","c":"United States","y":44.1997,"x":-72.5083},{"n":"Kubinka","c":"Russia","y":55.5764,"x":36.6947},{"n":"Wittmund","c":"Germany","y":53.5747,"x":7.7808},{"n":"Canas","c":"Costa Rica","y":10.43,"x":-85.1},{"n":"Hatvan","c":"Hungary","y":47.6681,"x":19.6697},{"n":"Amherst Center","c":"United States","y":42.3757,"x":-72.5188},{"n":"Reggane","c":"Algeria","y":26.7,"x":0.1667},{"n":"Concordia","c":"Colombia","y":6.0456,"x":-75.9075},{"n":"Melzo","c":"Italy","y":45.5,"x":9.4167},{"n":"Pinan","c":"Philippines","y":8.4785,"x":123.451},{"n":"Crest Hill","c":"United States","y":41.5723,"x":-88.1124},{"n":"Zulpich","c":"Germany","y":50.7,"x":6.65},{"n":"Bequimao","c":"Brazil","y":-2.4489,"x":-44.7828},{"n":"Punta Gorda","c":"United States","y":26.8933,"x":-82.0516},{"n":"Mayluu-Suu","c":"Kyrgyzstan","y":41.2457,"x":72.448},{"n":"Teculutan","c":"Guatemala","y":14.9877,"x":-89.717},{"n":"Kloten","c":"Switzerland","y":47.4481,"x":8.5828},{"n":"Wilnsdorf","c":"Germany","y":50.8167,"x":8.1},{"n":"Neabsco","c":"United States","y":38.6083,"x":-77.2847},{"n":"Melnik","c":"Czechia","y":50.3506,"x":14.4742},{"n":"Khowrzuq","c":"Iran","y":32.7781,"x":51.6458},{"n":"Poplar Bluff","c":"United States","y":36.7632,"x":-90.4136},{"n":"Ennis","c":"United States","y":32.3255,"x":-96.635},{"n":"Coolbaugh","c":"United States","y":41.1837,"x":-75.4386},{"n":"Oberkirch","c":"Germany","y":48.5322,"x":8.0786},{"n":"Cuite","c":"Brazil","y":-6.485,"x":-36.1569},{"n":"Jaguaruna","c":"Brazil","y":-28.615,"x":-49.0258},{"n":"Tukwila","c":"United States","y":47.4749,"x":-122.2727},{"n":"Marneuli","c":"Georgia","y":41.4969,"x":44.8108},{"n":"Satiro Dias","c":"Brazil","y":-11.6,"x":-38.6},{"n":"Donauworth","c":"Germany","y":48.7184,"x":10.777},{"n":"Greiz","c":"Germany","y":50.6547,"x":12.1997},{"n":"Tsotsin-Yurt","c":"Russia","y":43.2419,"x":46},{"n":"Horstel","c":"Germany","y":52.2972,"x":7.5861},{"n":"Rumoi","c":"Japan","y":43.9411,"x":141.6369},{"n":"Prunedale","c":"United States","y":36.8064,"x":-121.6555},{"n":"Orvieto","c":"Italy","y":42.7167,"x":12.1},{"n":"Santo Antonio do Sudoeste","c":"Brazil","y":-26.07,"x":-53.7228},{"n":"Jirkov","c":"Czechia","y":50.4999,"x":13.4478},{"n":"Jdour","c":"Morocco","y":32.1154,"x":-8.7587},{"n":"Albertville","c":"France","y":45.6758,"x":6.3925},{"n":"Mirfield","c":"United Kingdom","y":53.6807,"x":-1.6888},{"n":"Leinefelde","c":"Germany","y":51.3833,"x":10.3333},{"n":"Aragarcas","c":"Brazil","y":-15.8978,"x":-52.2508},{"n":"Payson","c":"United States","y":40.036,"x":-111.7395},{"n":"Villa Hidalgo","c":"Mexico","y":21.6667,"x":-102.6},{"n":"Lichtenfels","c":"Germany","y":50.1333,"x":11.0333},{"n":"Mountain Brook","c":"United States","y":33.4871,"x":-86.74},{"n":"Sergach","c":"Russia","y":55.5333,"x":45.4667},{"n":"Dingolfing","c":"Germany","y":48.6333,"x":12.5},{"n":"Padre Paraiso","c":"Brazil","y":-17.0719,"x":-41.5239},{"n":"Porto Real do Colegio","c":"Brazil","y":-10.1858,"x":-36.84},{"n":"Glassboro","c":"United States","y":39.7014,"x":-75.1113},{"n":"Pedro Carbo","c":"Ecuador","y":-1.8167,"x":-80.2333},{"n":"Simiti","c":"Colombia","y":7.9564,"x":-73.9461},{"n":"Sandwich","c":"United States","y":41.7138,"x":-70.485},{"n":"Neustrelitz","c":"Germany","y":53.3647,"x":13.0636},{"n":"Ciudad Melchor de Mencos","c":"Guatemala","y":17.0667,"x":-89.15},{"n":"Rovira","c":"Colombia","y":4.2392,"x":-75.2403},{"n":"Bouguenais","c":"France","y":47.1775,"x":-1.6214},{"n":"Nachod","c":"Czechia","y":50.4167,"x":16.163},{"n":"Brandys nad Labem-Stara Boleslav","c":"Czechia","y":50.1872,"x":14.6633},{"n":"Diguapo","c":"China","y":25.6988,"x":104.9614},{"n":"New Canaan","c":"United States","y":41.1593,"x":-73.4992},{"n":"Hakui","c":"Japan","y":36.8936,"x":136.7789},{"n":"Minturno","c":"Italy","y":41.2667,"x":13.75},{"n":"El Viso del Alcor","c":"Spain","y":37.3833,"x":-5.7167},{"n":"Sbeitla","c":"Tunisia","y":35.2297,"x":9.1294},{"n":"Lalin","c":"Spain","y":42.65,"x":-8.1167},{"n":"Kety","c":"Poland","y":49.8821,"x":19.2233},{"n":"San Guillermo","c":"Philippines","y":16.7667,"x":121.8},{"n":"Torgau","c":"Germany","y":51.5603,"x":13.0056},{"n":"Shenandoah","c":"United States","y":30.4019,"x":-91.002},{"n":"Aracariguama","c":"Brazil","y":-23.4386,"x":-47.0614},{"n":"Mougins","c":"France","y":43.6,"x":6.9947},{"n":"Buckingham","c":"United States","y":40.3188,"x":-75.058},{"n":"Major Isidoro","c":"Brazil","y":-9.5319,"x":-36.985},{"n":"Acqui Terme","c":"Italy","y":44.6761,"x":8.4686},{"n":"Rosas","c":"Spain","y":42.2633,"x":3.175},{"n":"Viadana","c":"Italy","y":44.9267,"x":10.52},{"n":"Eastwood","c":"United Kingdom","y":53.018,"x":-1.304},{"n":"Cruz Grande","c":"Mexico","y":16.7333,"x":-99.1333},{"n":"Linda","c":"United States","y":39.1241,"x":-121.5421},{"n":"Yeniseysk","c":"Russia","y":58.4667,"x":92.1333},{"n":"Skegness","c":"United Kingdom","y":53.14,"x":0.34},{"n":"Holzminden","c":"Germany","y":51.8297,"x":9.4483},{"n":"Muhlenberg","c":"United States","y":40.3955,"x":-75.925},{"n":"Calatayud","c":"Spain","y":41.35,"x":-1.6333},{"n":"Agoura Hills","c":"United States","y":34.151,"x":-118.7608},{"n":"Goole","c":"United Kingdom","y":53.6992,"x":-0.8692},{"n":"Cahors","c":"France","y":44.4475,"x":1.4406},{"n":"East Hemet","c":"United States","y":33.7301,"x":-116.941},{"n":"Celorico de Basto","c":"Portugal","y":41.3869,"x":-8.0022},{"n":"Zubia","c":"Spain","y":37.1206,"x":-3.585},{"n":"Libertyville","c":"United States","y":42.287,"x":-87.967},{"n":"Dracevo","c":"Macedonia","y":41.9367,"x":21.5217},{"n":"Durango","c":"United States","y":37.2659,"x":-107.8782},{"n":"Fot","c":"Hungary","y":47.6092,"x":19.1928},{"n":"Le Puy-en-Velay","c":"France","y":45.0433,"x":3.885},{"n":"Sapang Dalaga","c":"Philippines","y":8.55,"x":123.5667},{"n":"Bad Krozingen","c":"Germany","y":47.9181,"x":7.7025},{"n":"Snina","c":"Slovakia","y":48.9881,"x":22.1567},{"n":"Pikalevo","c":"Russia","y":59.5208,"x":34.1514},{"n":"East Northport","c":"United States","y":40.8792,"x":-73.3232},{"n":"Llorente","c":"Philippines","y":11.4167,"x":125.5333},{"n":"Ivoti","c":"Brazil","y":-29.5908,"x":-51.1608},{"n":"Vriezenveen","c":"Netherlands","y":52.4117,"x":6.6256},{"n":"Wisch","c":"Netherlands","y":51.9333,"x":6.3167},{"n":"Kotelnikovo","c":"Russia","y":47.6333,"x":43.1333},{"n":"Bichena","c":"Ethiopia","y":10.45,"x":38.2},{"n":"Culion","c":"Philippines","y":11.8353,"x":119.9933},{"n":"Abrisham","c":"Iran","y":32.555,"x":51.5731},{"n":"Howard","c":"United States","y":44.5703,"x":-88.092},{"n":"Irlam","c":"United Kingdom","y":53.445,"x":-2.422},{"n":"Sao Luis Gonzaga do Maranhao","c":"Brazil","y":-4.38,"x":-44.67},{"n":"Monmouth","c":"United States","y":44.8505,"x":-123.2283},{"n":"Ypsilanti","c":"United States","y":42.2437,"x":-83.6205},{"n":"Toprakkale","c":"Turkey","y":37.0639,"x":36.1469},{"n":"Rocky Hill","c":"United States","y":41.6572,"x":-72.6632},{"n":"Mokena","c":"United States","y":41.5327,"x":-87.8779},{"n":"Fort St. John","c":"Canada","y":56.2465,"x":-120.8476},{"n":"Ebbw Vale","c":"United Kingdom","y":51.7779,"x":-3.2117},{"n":"Wildeshausen","c":"Germany","y":52.8931,"x":8.4314},{"n":"Sesheke","c":"Zambia","y":-17.4806,"x":24.3064},{"n":"Saint-Die-des-Vosges","c":"France","y":48.2842,"x":6.9492},{"n":"Pleasantville","c":"United States","y":39.39,"x":-74.5169},{"n":"L'Isle-sur-la-Sorgue","c":"France","y":43.9194,"x":5.0514},{"n":"Affton","c":"United States","y":38.5499,"x":-90.3264},{"n":"Millburn","c":"United States","y":40.7394,"x":-74.324},{"n":"Metztitlan","c":"Mexico","y":20.6,"x":-98.7667},{"n":"Haka","c":"Myanmar","y":22.9833,"x":94.0167},{"n":"Bartow","c":"United States","y":27.8868,"x":-81.8213},{"n":"Guding","c":"China","y":26.524,"x":107.4755},{"n":"Mithi","c":"Pakistan","y":24.7333,"x":69.8},{"n":"Scarborough","c":"United States","y":43.5911,"x":-70.3682},{"n":"Mead Valley","c":"United States","y":33.8333,"x":-117.2852},{"n":"Telgte","c":"Germany","y":51.9819,"x":7.7856},{"n":"Jiangjiehe","c":"China","y":27.3649,"x":107.3684},{"n":"Miamisburg","c":"United States","y":39.6323,"x":-84.2725},{"n":"Lancing","c":"United Kingdom","y":50.832,"x":-0.319},{"n":"Yuancun","c":"China","y":27.454,"x":106.6649},{"n":"Qorasuv","c":"Uzbekistan","y":40.7222,"x":72.8872},{"n":"Araruna","c":"Brazil","y":-6.5578,"x":-35.7419},{"n":"Grafton","c":"Australia","y":-29.6833,"x":152.9333},{"n":"Merrick","c":"United States","y":40.6515,"x":-73.5535},{"n":"Schilde","c":"Belgium","y":51.2333,"x":4.5667},{"n":"'Ali Ben Sliman","c":"Morocco","y":31.9053,"x":-7.2144},{"n":"Naranjos","c":"Mexico","y":21.3472,"x":-97.6833},{"n":"Mairi","c":"Brazil","y":-11.7108,"x":-40.1489},{"n":"Uetersen","c":"Germany","y":53.6872,"x":9.6692},{"n":"Giengen an der Brenz","c":"Germany","y":48.6217,"x":10.245},{"n":"La Chapelle-sur-Erdre","c":"France","y":47.2989,"x":-1.5528},{"n":"Aquidaba","c":"Brazil","y":-10.2833,"x":-37.0333},{"n":"Icapui","c":"Brazil","y":-4.7128,"x":-37.355},{"n":"Anage","c":"Brazil","y":-14.6119,"x":-41.1358},{"n":"Guaymango","c":"El Salvador","y":13.75,"x":-89.8333},{"n":"Itarantim","c":"Brazil","y":-15.66,"x":-40.0658},{"n":"Taquarana","c":"Brazil","y":-9.645,"x":-36.4969},{"n":"Guapiacu","c":"Brazil","y":-20.795,"x":-49.22},{"n":"Escanaba","c":"United States","y":45.7477,"x":-87.09},{"n":"Northwich","c":"United Kingdom","y":53.259,"x":-2.518},{"n":"Selden","c":"United States","y":40.8699,"x":-73.0462},{"n":"Bayou Cane","c":"United States","y":29.6244,"x":-90.751},{"n":"Cartaya","c":"Spain","y":37.2833,"x":-7.15},{"n":"Mililani Mauka","c":"United States","y":21.4756,"x":-157.9947},{"n":"Jericoacoara","c":"Brazil","y":-2.7939,"x":-40.5128},{"n":"Glinde","c":"Germany","y":53.5406,"x":10.2111},{"n":"Kwinana","c":"Australia","y":-32.2394,"x":115.7702},{"n":"Kasongo-Lunda","c":"Congo (Kinshasa)","y":-6.4796,"x":16.83},{"n":"Zverevo","c":"Russia","y":48.02,"x":40.12},{"n":"Cassano d'Adda","c":"Italy","y":45.5333,"x":9.5167},{"n":"Tegelen","c":"Netherlands","y":51.3422,"x":6.1364},{"n":"Snellville","c":"United States","y":33.8563,"x":-84.0038},{"n":"Shirahama","c":"Japan","y":33.6781,"x":135.3481},{"n":"Hidrolandia","c":"Brazil","y":-4.4078,"x":-40.4378},{"n":"Zhaodianzi","c":"China","y":39.9373,"x":118.6401},{"n":"Moana","c":"Spain","y":42.2833,"x":-8.75},{"n":"Junqueiropolis","c":"Brazil","y":-21.5147,"x":-51.4336},{"n":"Zhosaly","c":"Kazakhstan","y":45.4889,"x":64.09},{"n":"Zwijndrecht","c":"Belgium","y":51.2167,"x":4.3333},{"n":"Kuysinjaq","c":"Iraq","y":36.0828,"x":44.6286},{"n":"Santiago Texacuangos","c":"El Salvador","y":13.65,"x":-89.1167},{"n":"Sulphur","c":"United States","y":30.2286,"x":-93.3565},{"n":"L'Assomption","c":"Canada","y":45.8333,"x":-73.4167},{"n":"Alagir","c":"Russia","y":43.0417,"x":44.2106},{"n":"Shakhunya","c":"Russia","y":57.6833,"x":46.6},{"n":"Kurten","c":"Germany","y":51.05,"x":7.2667},{"n":"South St. Paul","c":"United States","y":44.8876,"x":-93.0411},{"n":"Oregon","c":"United States","y":41.6528,"x":-83.4322},{"n":"Ban Tha Kham","c":"Thailand","y":9.1059,"x":99.2326},{"n":"Tarhzirt","c":"Morocco","y":32.4333,"x":-6.1833},{"n":"Burnie","c":"Australia","y":-41.0636,"x":145.8753},{"n":"Bachi-Yurt","c":"Russia","y":43.2191,"x":46.1926},{"n":"Ipanema","c":"Brazil","y":-19.8008,"x":-41.7128},{"n":"Caridade","c":"Brazil","y":-4.2319,"x":-39.1928},{"n":"Kyakhta","c":"Russia","y":50.35,"x":106.45},{"n":"Carira","c":"Brazil","y":-10.3581,"x":-37.7008},{"n":"Middleton","c":"United States","y":43.1065,"x":-89.5058},{"n":"Ferndale","c":"United States","y":42.4592,"x":-83.1314},{"n":"Casamassima","c":"Italy","y":40.95,"x":16.9167},{"n":"Wetherby","c":"United Kingdom","y":53.9276,"x":-1.3839},{"n":"Canto do Buriti","c":"Brazil","y":-8.11,"x":-42.9439},{"n":"Yeppoon","c":"Australia","y":-23.1333,"x":150.7333},{"n":"Deblin","c":"Poland","y":51.5667,"x":21.8614},{"n":"Haya","c":"Sudan","y":18.3461,"x":36.3969},{"n":"El Mansouria","c":"Morocco","y":33.75,"x":-7.3},{"n":"El Arenal","c":"Mexico","y":20.7754,"x":-103.6935},{"n":"La Canada Flintridge","c":"United States","y":34.2097,"x":-118.2002},{"n":"Hauppauge","c":"United States","y":40.8217,"x":-73.2119},{"n":"Al Mijlad","c":"Sudan","y":11.0337,"x":27.7333},{"n":"Zemio","c":"Central African Republic","y":5.0337,"x":25.1333},{"n":"Pugo","c":"Philippines","y":16.2833,"x":120.4833},{"n":"Alpinopolis","c":"Brazil","y":-20.8639,"x":-46.3878},{"n":"Torokszentmiklos","c":"Hungary","y":47.1833,"x":20.4167},{"n":"Neviges","c":"Germany","y":51.3128,"x":7.0869},{"n":"Luisiana","c":"Philippines","y":14.185,"x":121.5109},{"n":"Ennigerloh","c":"Germany","y":51.8367,"x":8.0256},{"n":"Safford","c":"United States","y":32.8317,"x":-109.7005},{"n":"Rocky River","c":"United States","y":41.4703,"x":-81.8526},{"n":"Sao Jose de Piranhas","c":"Brazil","y":-7.1208,"x":-38.5019},{"n":"Had Zraqtane","c":"Morocco","y":31.45,"x":-7.4},{"n":"Ceglie Messapico","c":"Italy","y":40.65,"x":17.5167},{"n":"Usman","c":"Russia","y":52.05,"x":39.7333},{"n":"Concarneau","c":"France","y":47.8753,"x":-3.9189},{"n":"Rubiataba","c":"Brazil","y":-15.1639,"x":-49.8028},{"n":"Wenden","c":"Germany","y":50.9667,"x":7.8667},{"n":"Mpwapwa","c":"Tanzania","y":-6.35,"x":36.4833},{"n":"Heusenstamm","c":"Germany","y":50.0596,"x":8.8068},{"n":"Uruburetama","c":"Brazil","y":-3.625,"x":-39.5078},{"n":"Ait Tamlil","c":"Morocco","y":31.48,"x":-6.94},{"n":"El Reno","c":"United States","y":35.543,"x":-97.966},{"n":"Lajinha","c":"Brazil","y":-20.1508,"x":-41.6228},{"n":"Umirim","c":"Brazil","y":-3.6769,"x":-39.35},{"n":"Saco","c":"United States","y":43.539,"x":-70.4624},{"n":"Fairwood","c":"United States","y":47.4467,"x":-122.143},{"n":"West St. Paul","c":"United States","y":44.9018,"x":-93.0858},{"n":"Xiaqiaotou","c":"China","y":27.1892,"x":100.0488},{"n":"Rovato","c":"Italy","y":45.5642,"x":9.9997},{"n":"Liuliang","c":"China","y":35.2695,"x":105.986},{"n":"Salsomaggiore Terme","c":"Italy","y":44.8167,"x":9.9833},{"n":"Blankenburg","c":"Germany","y":51.7953,"x":10.9622},{"n":"Cardedeu","c":"Spain","y":41.6406,"x":2.3594},{"n":"Spennymoor","c":"United Kingdom","y":54.7,"x":-1.59},{"n":"Imouzzer Kandar","c":"Morocco","y":33.7215,"x":-5.0083},{"n":"Aanekoski","c":"Finland","y":62.6042,"x":25.7264},{"n":"Volketswil","c":"Switzerland","y":47.3906,"x":8.6953},{"n":"Mapai","c":"Mozambique","y":-22.7306,"x":32.0583},{"n":"Os","c":"Norway","y":60.2269,"x":5.4758},{"n":"Schopfheim","c":"Germany","y":47.6494,"x":7.8247},{"n":"Pradopolis","c":"Brazil","y":-21.3594,"x":-48.0656},{"n":"Valley","c":"United States","y":32.8088,"x":-85.1809},{"n":"Orinda","c":"United States","y":37.8808,"x":-122.1791},{"n":"Henichesk","c":"Ukraine","y":46.1769,"x":34.7989},{"n":"Comapa","c":"Mexico","y":19.1667,"x":-96.8666},{"n":"Cullman","c":"United States","y":34.1777,"x":-86.8407},{"n":"Schmalkalden","c":"Germany","y":50.7167,"x":10.45},{"n":"Eschwege","c":"Germany","y":51.1881,"x":10.0528},{"n":"Senec","c":"Slovakia","y":48.2189,"x":17.3997},{"n":"Ban Na San","c":"Thailand","y":8.7997,"x":99.3635},{"n":"Alamo","c":"United States","y":26.1811,"x":-98.1177},{"n":"Signa","c":"Italy","y":43.7833,"x":11.1},{"n":"Sand Springs","c":"United States","y":36.1342,"x":-96.1284},{"n":"Brandsen","c":"Argentina","y":-35.1667,"x":-58.2167},{"n":"Spoltore","c":"Italy","y":42.455,"x":14.1399},{"n":"Nizhnyaya Tura","c":"Russia","y":58.6208,"x":59.8478},{"n":"Tiverton","c":"United Kingdom","y":50.903,"x":-3.488},{"n":"Hamina","c":"Finland","y":60.5697,"x":27.1981},{"n":"Vernal","c":"United States","y":40.4517,"x":-109.5379},{"n":"Callosa de Segura","c":"Spain","y":38.1225,"x":-0.8797},{"n":"Castilho","c":"Brazil","y":-20.8722,"x":-51.4875},{"n":"Laurinburg","c":"United States","y":34.7597,"x":-79.4781},{"n":"Saint-Lazare","c":"Canada","y":45.4,"x":-74.1333},{"n":"Chestermere","c":"Canada","y":51.05,"x":-113.8225},{"n":"Painesville","c":"United States","y":41.724,"x":-81.2536},{"n":"Poperinge","c":"Belgium","y":50.8547,"x":2.7256},{"n":"Madalena","c":"Brazil","y":-4.8569,"x":-39.5769},{"n":"Santa Vitoria","c":"Brazil","y":-18.8389,"x":-50.1208},{"n":"Lake Zurich","c":"United States","y":42.1955,"x":-88.087},{"n":"Ba","c":"Fiji","y":-17.5333,"x":177.6833},{"n":"El Castillo de La Concepcion","c":"Nicaragua","y":11.0178,"x":-84.4011},{"n":"Comanesti","c":"Romania","y":46.4132,"x":26.4362},{"n":"Gubakha","c":"Russia","y":58.8667,"x":57.5833},{"n":"Utebo","c":"Spain","y":41.7141,"x":-0.9944},{"n":"Castellana Grotte","c":"Italy","y":40.8838,"x":17.1679},{"n":"Ariccia","c":"Italy","y":41.7167,"x":12.6667},{"n":"Amorebieta","c":"Spain","y":43.2192,"x":-2.7342},{"n":"Volokolamsk","c":"Russia","y":56.0333,"x":35.95},{"n":"Arcore","c":"Italy","y":45.6333,"x":9.3167},{"n":"Puerto Armuelles","c":"Panama","y":8.2777,"x":-82.8621},{"n":"Waldbrol","c":"Germany","y":50.8789,"x":7.615},{"n":"Huanimaro","c":"Mexico","y":20.3675,"x":-101.4969},{"n":"General Martin Miguel de Guemes","c":"Argentina","y":-24.6667,"x":-65.05},{"n":"Riachao do Dantas","c":"Brazil","y":-11.0689,"x":-37.725},{"n":"Upper Allen","c":"United States","y":40.1801,"x":-76.9807},{"n":"Saint-Lo","c":"France","y":49.1144,"x":-1.0917},{"n":"Hazlet","c":"United States","y":40.4265,"x":-74.1711},{"n":"Bressuire","c":"France","y":46.84,"x":-0.4886},{"n":"Rosedale","c":"United States","y":39.3266,"x":-76.5084},{"n":"Silla","c":"Spain","y":39.3618,"x":-0.4103},{"n":"Ottawa","c":"United States","y":41.3532,"x":-88.8306},{"n":"Lerdo de Tejada","c":"Mexico","y":18.638,"x":-95.5085},{"n":"Sil-li","c":"Korea, North","y":39.488,"x":125.464},{"n":"Itigi","c":"Tanzania","y":-5.6996,"x":34.48},{"n":"Pescia","c":"Italy","y":43.9017,"x":10.6898},{"n":"Barrhead","c":"United Kingdom","y":55.8016,"x":-4.388},{"n":"Bourne","c":"United States","y":41.723,"x":-70.5819},{"n":"Chipiona","c":"Spain","y":36.7333,"x":-6.4333},{"n":"Cognac","c":"France","y":45.6958,"x":-0.3292},{"n":"Kitatajima","c":"Japan","y":35.9814,"x":139.4817},{"n":"Ochtrup","c":"Germany","y":52.2056,"x":7.1903},{"n":"Busra ash Sham","c":"Syria","y":32.5167,"x":36.4833},{"n":"Huntsville","c":"Canada","y":45.3333,"x":-79.2167},{"n":"Sulzbach-Rosenberg","c":"Germany","y":49.5,"x":11.75},{"n":"Guantiankan","c":"China","y":28.2939,"x":106.6108},{"n":"Meadowbrook","c":"United States","y":37.4301,"x":-77.474},{"n":"Sarstedt","c":"Germany","y":52.2394,"x":9.8606},{"n":"Liuguang","c":"China","y":26.997,"x":106.4376},{"n":"Corner Brook","c":"Canada","y":48.9287,"x":-57.926},{"n":"Casa de Oro-Mount Helix","c":"United States","y":32.764,"x":-116.9687},{"n":"Xiaba","c":"China","y":27.7814,"x":108.0233},{"n":"Paulistana","c":"Brazil","y":-8.1439,"x":-41.15},{"n":"Selestat","c":"France","y":48.2594,"x":7.4542},{"n":"Zaouia Ait Ishak","c":"Morocco","y":32.76,"x":-5.7233},{"n":"Lake Shore","c":"United States","y":39.1029,"x":-76.4876},{"n":"Molln","c":"Germany","y":53.6269,"x":10.6847},{"n":"Parma Heights","c":"United States","y":41.3865,"x":-81.7637},{"n":"Puerto El Triunfo","c":"El Salvador","y":13.2833,"x":-88.55},{"n":"Nyandoma","c":"Russia","y":61.6667,"x":40.2},{"n":"Karcag","c":"Hungary","y":47.3167,"x":20.9333},{"n":"Nottuln","c":"Germany","y":51.9278,"x":7.3542},{"n":"South Whitehall","c":"United States","y":40.6154,"x":-75.5503},{"n":"Mahmudabad Nemuneh","c":"Iran","y":36.2886,"x":49.9019},{"n":"Old Jamestown","c":"United States","y":38.8394,"x":-90.2847},{"n":"Simonesia","c":"Brazil","y":-20.1239,"x":-42.0008},{"n":"Pichidegua","c":"Chile","y":-34.35,"x":-71.3},{"n":"Makakilo","c":"United States","y":21.3591,"x":-158.0813},{"n":"Karuizawa","c":"Japan","y":36.3483,"x":138.5969},{"n":"Helden","c":"Netherlands","y":51.3167,"x":6},{"n":"Tahlequah","c":"United States","y":35.9116,"x":-94.9773},{"n":"Jnane Bouih","c":"Morocco","y":32.0308,"x":-8.7894},{"n":"Cajari","c":"Brazil","y":-3.3208,"x":-45.0108},{"n":"Brockport","c":"United States","y":43.2137,"x":-77.9404},{"n":"Calvillo","c":"Mexico","y":21.85,"x":-102.7167},{"n":"Carate Brianza","c":"Italy","y":45.6833,"x":9.2333},{"n":"Atok","c":"Philippines","y":16.5667,"x":120.7},{"n":"Itatinga","c":"Brazil","y":-23.1017,"x":-48.6158},{"n":"Campina Verde","c":"Brazil","y":-19.5358,"x":-49.4858},{"n":"Kleppe","c":"Norway","y":58.7772,"x":5.5967},{"n":"Arbaoun","c":"Algeria","y":36.4667,"x":5.65},{"n":"Marsberg","c":"Germany","y":51.45,"x":8.85},{"n":"Norton","c":"United States","y":41.964,"x":-71.1842},{"n":"Casalgrande","c":"Italy","y":44.5898,"x":10.7394},{"n":"Rockport","c":"United States","y":28.029,"x":-97.0722},{"n":"Tradate","c":"Italy","y":45.7,"x":8.9167},{"n":"Upper St. Clair","c":"United States","y":40.3336,"x":-80.0842},{"n":"Regente Feijo","c":"Brazil","y":-22.2208,"x":-51.3028},{"n":"Ekazhevo","c":"Russia","y":43.2122,"x":44.8231},{"n":"Varpalota","c":"Hungary","y":47.1972,"x":18.1394},{"n":"Rio Segundo","c":"Argentina","y":-31.6501,"x":-63.9116},{"n":"Oschersleben","c":"Germany","y":52.0167,"x":11.25},{"n":"Hongshui","c":"China","y":38.5077,"x":100.8814},{"n":"Pocao de Pedras","c":"Brazil","y":-4.75,"x":-44.9333},{"n":"Agryz","c":"Russia","y":56.5167,"x":52.9833},{"n":"Rybnoye","c":"Russia","y":54.7333,"x":39.5167},{"n":"Tash-Komur","c":"Kyrgyzstan","y":41.35,"x":72.2167},{"n":"Polonuevo","c":"Colombia","y":10.7772,"x":-74.8528},{"n":"Front Royal","c":"United States","y":38.926,"x":-78.1838},{"n":"Eupen","c":"Belgium","y":50.6333,"x":6.0333},{"n":"San Jose Ojetenam","c":"Guatemala","y":15.2167,"x":-91.9667},{"n":"Babanusah","c":"Sudan","y":11.3334,"x":27.8},{"n":"Kufstein","c":"Austria","y":47.5833,"x":12.1667},{"n":"Chopinzinho","c":"Brazil","y":-25.8558,"x":-52.5228},{"n":"West Mifflin","c":"United States","y":40.3581,"x":-79.9072},{"n":"Doujing","c":"China","y":26.4789,"x":105.1253},{"n":"Cirie","c":"Italy","y":45.2333,"x":7.6},{"n":"Urumita","c":"Colombia","y":10.5603,"x":-73.0136},{"n":"Jakobstad","c":"Finland","y":63.6667,"x":22.7},{"n":"Anguillara Sabazia","c":"Italy","y":42.0883,"x":12.2775},{"n":"Rhar el Melah","c":"Tunisia","y":37.1667,"x":10.1833},{"n":"Somerton","c":"United States","y":32.6009,"x":-114.699},{"n":"Naklo nad Notecia","c":"Poland","y":53.1421,"x":17.6018},{"n":"Blythe","c":"United States","y":33.622,"x":-114.6188},{"n":"Southbury","c":"United States","y":41.4745,"x":-73.2329},{"n":"Borda da Mata","c":"Brazil","y":-22.2739,"x":-46.165},{"n":"Dharmsala","c":"India","y":32.2167,"x":76.3167},{"n":"Ziar nad Hronom","c":"Slovakia","y":48.5919,"x":18.8533},{"n":"Porto Grande","c":"Brazil","y":0.7128,"x":-51.4128},{"n":"Yuanhucun","c":"China","y":44.1977,"x":86.8928},{"n":"Cugnaux","c":"France","y":43.5378,"x":1.3436},{"n":"Oulad Salmane","c":"Morocco","y":34.3356,"x":-6.4603},{"n":"Riverview","c":"Canada","y":46.0613,"x":-64.8052},{"n":"Bethel","c":"United States","y":41.3747,"x":-73.3928},{"n":"Sandbach","c":"United Kingdom","y":53.146,"x":-2.367},{"n":"Yahotyn","c":"Ukraine","y":50.2569,"x":31.7817},{"n":"Wangaratta","c":"Australia","y":-36.3583,"x":146.3125},{"n":"Momchilgrad","c":"Bulgaria","y":41.5297,"x":25.4064},{"n":"Malabuyoc","c":"Philippines","y":9.65,"x":123.3333},{"n":"Barreira","c":"Brazil","y":-4.2869,"x":-38.6428},{"n":"Capoeiras","c":"Brazil","y":-8.735,"x":-36.6269},{"n":"Weil der Stadt","c":"Germany","y":48.7508,"x":8.8706},{"n":"Espiritu","c":"Philippines","y":17.9833,"x":120.65},{"n":"Ait Bousarane","c":"Morocco","y":31.7917,"x":-7.0926},{"n":"Burghausen","c":"Germany","y":48.1667,"x":12.8333},{"n":"Keszthely","c":"Hungary","y":46.7675,"x":17.2463},{"n":"Horizon City","c":"United States","y":31.6799,"x":-106.1903},{"n":"Levin","c":"New Zealand","y":-40.625,"x":175.2833},{"n":"Tirmitine","c":"Algeria","y":36.6618,"x":3.9848},{"n":"Presidente Olegario","c":"Brazil","y":-18.4178,"x":-46.4178},{"n":"El Arahal","c":"Spain","y":37.2667,"x":-5.55},{"n":"Rawah","c":"Iraq","y":34.4792,"x":41.9083},{"n":"Ban Bueng","c":"Thailand","y":13.314,"x":101.1114},{"n":"Cherepanovo","c":"Russia","y":54.2167,"x":83.3667},{"n":"Eloy","c":"United States","y":32.747,"x":-111.5991},{"n":"Artik","c":"Armenia","y":40.6167,"x":43.95},{"n":"Utinga","c":"Brazil","y":-12.0819,"x":-41.0939},{"n":"Sint-Gillis-Waas","c":"Belgium","y":51.2186,"x":4.1236},{"n":"Joliette","c":"Canada","y":46.0167,"x":-73.45},{"n":"Atasu","c":"Kazakhstan","y":48.6903,"x":71.6499},{"n":"Nesoddtangen","c":"Norway","y":59.8086,"x":10.6556},{"n":"Hechingen","c":"Germany","y":48.3517,"x":8.9633},{"n":"Tolentino","c":"Italy","y":43.2086,"x":13.2841},{"n":"Roznava","c":"Slovakia","y":48.6586,"x":20.5314},{"n":"Adria","c":"Italy","y":45.05,"x":12.05},{"n":"Meerssen","c":"Netherlands","y":50.8858,"x":5.7519},{"n":"Riom","c":"France","y":45.8936,"x":3.1125},{"n":"Bruges","c":"France","y":44.8828,"x":-0.6125},{"n":"Diepenbeek","c":"Belgium","y":50.9072,"x":5.4175},{"n":"Brigham City","c":"United States","y":41.5034,"x":-112.0454},{"n":"Plaisance-du-Touch","c":"France","y":43.5656,"x":1.2964},{"n":"Yershov","c":"Russia","y":51.35,"x":48.2833},{"n":"Hemmingen","c":"Germany","y":52.3236,"x":9.7256},{"n":"Heinola","c":"Finland","y":61.2028,"x":26.0319},{"n":"Capela do Alto","c":"Brazil","y":-23.4706,"x":-47.7347},{"n":"Gilching","c":"Germany","y":48.1103,"x":11.3011},{"n":"Murrysville","c":"United States","y":40.4456,"x":-79.6555},{"n":"Julio de Castilhos","c":"Brazil","y":-29.2269,"x":-53.6819},{"n":"Candelaria","c":"Cuba","y":22.7439,"x":-82.9581},{"n":"Jasien","c":"Poland","y":54.3399,"x":18.56},{"n":"Pidhorodne","c":"Ukraine","y":48.5737,"x":35.0966},{"n":"Abare","c":"Brazil","y":-8.7208,"x":-39.115},{"n":"Morros","c":"Brazil","y":-2.8639,"x":-44.0389},{"n":"Brainerd","c":"United States","y":46.3553,"x":-94.1982},{"n":"Rio Rico","c":"United States","y":31.4957,"x":-110.9886},{"n":"Engelskirchen","c":"Germany","y":50.9833,"x":7.4167},{"n":"Rhede","c":"Germany","y":51.8333,"x":6.7006},{"n":"Mazagao","c":"Brazil","y":-0.115,"x":-51.2889},{"n":"Yellowknife","c":"Canada","y":62.4709,"x":-114.4053},{"n":"Ibicoara","c":"Brazil","y":-13.4108,"x":-41.285},{"n":"Hoxut","c":"China","y":42.2552,"x":86.8607},{"n":"Haslett","c":"United States","y":42.7525,"x":-84.402},{"n":"Haiger","c":"Germany","y":50.7422,"x":8.2039},{"n":"Tole Bi","c":"Kazakhstan","y":43.6808,"x":73.7628},{"n":"Stowmarket","c":"United Kingdom","y":52.19,"x":1},{"n":"Xihuangcun","c":"China","y":37.1411,"x":114.2293},{"n":"Tullahoma","c":"United States","y":35.3721,"x":-86.2173},{"n":"Monkseaton","c":"United Kingdom","y":55.043,"x":-1.459},{"n":"Rolante","c":"Brazil","y":-29.6508,"x":-50.5758},{"n":"Tapalpa","c":"Mexico","y":19.9445,"x":-103.7585},{"n":"Terek","c":"Russia","y":43.4833,"x":44.1333},{"n":"Tipo-Tipo","c":"Philippines","y":6.5333,"x":122.1667},{"n":"Someren","c":"Netherlands","y":51.3847,"x":5.7119},{"n":"Aradippou","c":"Cyprus","y":34.9478,"x":33.5881},{"n":"Beloyarskiy","c":"Russia","y":63.7167,"x":66.6667},{"n":"Norak","c":"Tajikistan","y":38.3883,"x":69.325},{"n":"Anna","c":"United States","y":33.347,"x":-96.5503},{"n":"Kos","c":"Greece","y":36.8153,"x":27.1103},{"n":"Borna","c":"Germany","y":51.1167,"x":12.5},{"n":"Bad Aibling","c":"Germany","y":47.865,"x":12.0097},{"n":"Seesen","c":"Germany","y":51.8931,"x":10.1783},{"n":"Szigethalom","c":"Hungary","y":47.3228,"x":19.0128},{"n":"Amatan","c":"Mexico","y":17.3715,"x":-92.818},{"n":"Buckeburg","c":"Germany","y":52.2608,"x":9.0492},{"n":"Tadian","c":"Philippines","y":16.9953,"x":120.8219},{"n":"Romsey","c":"United Kingdom","y":50.989,"x":-1.4966},{"n":"Rio Verde de Mato Grosso","c":"Brazil","y":-18.9178,"x":-54.8439},{"n":"Bad Berleburg","c":"Germany","y":51.0497,"x":8.4},{"n":"Capinota","c":"Bolivia","y":-17.7147,"x":-66.2631},{"n":"Squamish","c":"Canada","y":49.7017,"x":-123.1589},{"n":"Zossen","c":"Germany","y":52.2167,"x":13.4497},{"n":"South Burlington","c":"United States","y":44.4622,"x":-73.2203},{"n":"Kovylkino","c":"Russia","y":54.0333,"x":43.9167},{"n":"Kempston","c":"United Kingdom","y":52.114,"x":-0.497},{"n":"Traiskirchen","c":"Austria","y":48.0189,"x":16.2922},{"n":"Reriutaba","c":"Brazil","y":-4.1419,"x":-40.5819},{"n":"Lichtenvoorde","c":"Netherlands","y":51.9833,"x":6.5667},{"n":"Regensdorf","c":"Switzerland","y":47.4383,"x":8.4744},{"n":"North Liberty","c":"United States","y":41.7438,"x":-91.611},{"n":"Lake Butler","c":"United States","y":28.4868,"x":-81.5453},{"n":"Vincennes","c":"United States","y":38.676,"x":-87.5102},{"n":"Heishanzuicun","c":"China","y":41.0354,"x":116.9304},{"n":"Ardon","c":"Russia","y":43.1667,"x":44.2833},{"n":"Huercal-Overa","c":"Spain","y":37.3833,"x":-1.9333},{"n":"Echt","c":"Netherlands","y":51.1058,"x":5.8706},{"n":"Godo","c":"Japan","y":35.4175,"x":136.6086},{"n":"Kantharalak","c":"Thailand","y":14.6536,"x":104.6278},{"n":"Sienna Plantation","c":"United States","y":29.4834,"x":-95.5065},{"n":"Heishuikeng","c":"China","y":37.7773,"x":110.5216},{"n":"Holtsville","c":"United States","y":40.8124,"x":-73.0447},{"n":"Kapangan","c":"Philippines","y":16.5833,"x":120.6},{"n":"East Dereham","c":"United Kingdom","y":52.681,"x":0.94},{"n":"Mayen","c":"Germany","y":50.3333,"x":7.2167},{"n":"Magitang","c":"China","y":35.9484,"x":102.0273},{"n":"Abbeville","c":"United States","y":29.975,"x":-92.1265},{"n":"Vila Real de Santo Antonio","c":"Portugal","y":37.2,"x":-7.4167},{"n":"Tettnang","c":"Germany","y":47.6708,"x":9.5875},{"n":"Lodeynoye Pole","c":"Russia","y":60.7333,"x":33.55},{"n":"Fecamp","c":"France","y":49.7575,"x":0.3792},{"n":"Bourbonnais","c":"United States","y":41.183,"x":-87.878},{"n":"Starodub","c":"Russia","y":52.5833,"x":32.7667},{"n":"Motru","c":"Romania","y":44.8042,"x":22.9694},{"n":"Sipoo","c":"Finland","y":60.3764,"x":25.2722},{"n":"Royan","c":"France","y":45.6231,"x":-1.0431},{"n":"Mullheim","c":"Germany","y":47.8083,"x":7.6308},{"n":"Ramsbottom","c":"United Kingdom","y":53.6484,"x":-2.3169},{"n":"Syosset","c":"United States","y":40.8156,"x":-73.502},{"n":"Zola Predosa","c":"Italy","y":44.4883,"x":11.2181},{"n":"Lancut","c":"Poland","y":50.0687,"x":22.2291},{"n":"Matteson","c":"United States","y":41.5095,"x":-87.7468},{"n":"Papanduva","c":"Brazil","y":-26.37,"x":-50.1439},{"n":"Riviere-du-Loup","c":"Canada","y":47.8333,"x":-69.5333},{"n":"Pariquera-Acu","c":"Brazil","y":-24.715,"x":-47.8811},{"n":"Aguinaldo","c":"Philippines","y":16.8206,"x":121.4629},{"n":"Quixere","c":"Brazil","y":-5.0739,"x":-37.9889},{"n":"Salgado","c":"Brazil","y":-11.0319,"x":-37.475},{"n":"Chiari","c":"Italy","y":45.5197,"x":9.8833},{"n":"Cobourg","c":"Canada","y":43.9667,"x":-78.1667},{"n":"Kolbermoor","c":"Germany","y":47.85,"x":12.0667},{"n":"Krasnystaw","c":"Poland","y":51,"x":23.1667},{"n":"Tangbian","c":"China","y":25.6539,"x":106.7793},{"n":"Dalanzadgad","c":"Mongolia","y":43.57,"x":104.4258},{"n":"Venceslau Bras","c":"Brazil","y":-23.8739,"x":-49.8028},{"n":"Vellmar","c":"Germany","y":51.3588,"x":9.4677},{"n":"Angleton","c":"United States","y":29.1718,"x":-95.4291},{"n":"Ituacu","c":"Brazil","y":-13.8128,"x":-41.2969},{"n":"Lower Allen","c":"United States","y":40.2083,"x":-76.9287},{"n":"Scorze","c":"Italy","y":45.5719,"x":12.1089},{"n":"Bad Tolz","c":"Germany","y":47.7603,"x":11.5567},{"n":"Tres Barras","c":"Brazil","y":-26.1058,"x":-50.3219},{"n":"Pultusk","c":"Poland","y":52.7025,"x":21.0828},{"n":"Dorchester","c":"United Kingdom","y":50.7154,"x":-2.4367},{"n":"Dagohoy","c":"Philippines","y":9.9167,"x":124.2833},{"n":"Mingjiujie","c":"China","y":23.4558,"x":103.6522},{"n":"Rayevskiy","c":"Russia","y":54.0658,"x":54.9467},{"n":"Cabildo","c":"Chile","y":-32.4267,"x":-71.0664},{"n":"Castaic","c":"United States","y":34.4818,"x":-118.6317},{"n":"Kamiichi","c":"Japan","y":36.7,"x":137.3667},{"n":"Senges","c":"Brazil","y":-24.1128,"x":-49.4639},{"n":"Bad Pyrmont","c":"Germany","y":51.9867,"x":9.2636},{"n":"Cocos","c":"Brazil","y":-14.1839,"x":-44.5339},{"n":"Canby","c":"United States","y":45.2653,"x":-122.6866},{"n":"Montemurlo","c":"Italy","y":43.9278,"x":11.04},{"n":"Aguas Formosas","c":"Brazil","y":-17.0819,"x":-40.9358},{"n":"Balta","c":"Ukraine","y":47.9361,"x":29.6225},{"n":"Juquia","c":"Brazil","y":-24.3208,"x":-47.6347},{"n":"Wendell","c":"United States","y":35.7823,"x":-78.3962},{"n":"Marchena","c":"Spain","y":37.3333,"x":-5.4167},{"n":"San Vito dei Normanni","c":"Italy","y":40.6556,"x":17.7036},{"n":"Wittlich","c":"Germany","y":49.9869,"x":6.8897},{"n":"Monte Azul Paulista","c":"Brazil","y":-20.9072,"x":-48.6414},{"n":"Schwalmtal","c":"Germany","y":51.2225,"x":6.2625},{"n":"Paranapanema","c":"Brazil","y":-23.3886,"x":-48.7228},{"n":"Ampere","c":"Brazil","y":-25.915,"x":-53.4728},{"n":"Buerarema","c":"Brazil","y":-14.9589,"x":-39.3},{"n":"Terzigno","c":"Italy","y":40.8,"x":14.5},{"n":"Iiyama","c":"Japan","y":36.8517,"x":138.3656},{"n":"Izra","c":"Syria","y":32.8567,"x":36.2469},{"n":"Mukaiengaru","c":"Japan","y":44.0617,"x":143.5281},{"n":"Laconia","c":"United States","y":43.5724,"x":-71.4775},{"n":"Haldensleben","c":"Germany","y":52.2833,"x":11.4167},{"n":"Sorgues","c":"France","y":44.0083,"x":4.8725},{"n":"Atarfe","c":"Spain","y":37.2229,"x":-3.6899},{"n":"Bergneustadt","c":"Germany","y":51.0333,"x":7.65},{"n":"Butig","c":"Philippines","y":7.7239,"x":124.3011},{"n":"Lieto","c":"Finland","y":60.5,"x":22.4497},{"n":"Bracciano","c":"Italy","y":42.1,"x":12.1833},{"n":"Tibagi","c":"Brazil","y":-24.5089,"x":-50.4139},{"n":"Narni","c":"Italy","y":42.5167,"x":12.5167},{"n":"San Antonio Sacatepequez","c":"Guatemala","y":14.9667,"x":-91.7333},{"n":"Silverthorne","c":"United States","y":39.656,"x":-106.0867},{"n":"Alhandra","c":"Brazil","y":-7.4389,"x":-34.9139},{"n":"Altamont","c":"United States","y":42.1981,"x":-121.7249},{"n":"Aci Sant'Antonio","c":"Italy","y":37.6059,"x":15.126},{"n":"Zerong","c":"China","y":24.9692,"x":104.9558},{"n":"Sidi Redouane","c":"Morocco","y":34.6833,"x":-5.45},{"n":"Ayaviri","c":"Peru","y":-14.8818,"x":-70.5901},{"n":"Eersel","c":"Netherlands","y":51.3572,"x":5.3147},{"n":"Kralupy nad Vltavou","c":"Czechia","y":50.2411,"x":14.3116},{"n":"Varzelandia","c":"Brazil","y":-15.7008,"x":-44.0278},{"n":"Korsholm","c":"Finland","y":63.1125,"x":21.6778},{"n":"Ban Mae Hia Nai","c":"Thailand","y":18.7433,"x":98.964},{"n":"Moncao","c":"Portugal","y":42.0733,"x":-8.48},{"n":"Sheridan","c":"United States","y":44.7962,"x":-106.9643},{"n":"Kirovgrad","c":"Russia","y":57.4333,"x":60.0667},{"n":"Soure","c":"Portugal","y":40.05,"x":-8.6333},{"n":"Lebedyan","c":"Russia","y":53.0116,"x":39.1281},{"n":"Durant","c":"United States","y":33.9957,"x":-96.3938},{"n":"Horizontina","c":"Brazil","y":-27.6258,"x":-54.3078},{"n":"Agliana","c":"Italy","y":43.9,"x":11},{"n":"Sylvania","c":"United States","y":41.71,"x":-83.7091},{"n":"Santa Marinella","c":"Italy","y":42.0333,"x":11.85},{"n":"Veresegyhaz","c":"Hungary","y":47.6569,"x":19.2847},{"n":"Dolynska","c":"Ukraine","y":48.1111,"x":32.7648},{"n":"Lebach","c":"Germany","y":49.41,"x":6.91},{"n":"Bakal","c":"Russia","y":54.9333,"x":58.8},{"n":"Groesbeek","c":"Netherlands","y":51.7833,"x":5.9333},{"n":"Kronberg","c":"Germany","y":50.1797,"x":8.5085},{"n":"Corning","c":"United States","y":42.147,"x":-77.0561},{"n":"Anori","c":"Brazil","y":-3.7728,"x":-61.6442},{"n":"Arbutus","c":"United States","y":39.2428,"x":-76.6922},{"n":"Puttlingen","c":"Germany","y":49.2833,"x":6.8833},{"n":"Corbetta","c":"Italy","y":45.4667,"x":8.9167},{"n":"Pfullingen","c":"Germany","y":48.4656,"x":9.2261},{"n":"Iati","c":"Brazil","y":-9.0458,"x":-36.8458},{"n":"White Oak","c":"United States","y":39.2106,"x":-84.6061},{"n":"Lgov","c":"Russia","y":51.6667,"x":35.2667},{"n":"Zatec","c":"Czechia","y":50.3273,"x":13.5459},{"n":"Sao Francisco de Assis","c":"Brazil","y":-29.55,"x":-55.1308},{"n":"Cranbrook","c":"Canada","y":49.5097,"x":-115.7667},{"n":"Lede","c":"Belgium","y":50.9658,"x":3.9778},{"n":"Aroeiras","c":"Brazil","y":-7.545,"x":-35.7078},{"n":"Kabudarahang","c":"Iran","y":35.2083,"x":48.7239},{"n":"Sommerda","c":"Germany","y":51.1617,"x":11.1169},{"n":"Pinole","c":"United States","y":37.9931,"x":-122.2834},{"n":"Dolny Kubin","c":"Slovakia","y":49.2117,"x":19.2992},{"n":"Erlanger","c":"United States","y":39.0109,"x":-84.5864},{"n":"Noci","c":"Italy","y":40.8,"x":17.1333},{"n":"Druten","c":"Netherlands","y":51.8889,"x":5.6044},{"n":"Abdulino","c":"Russia","y":53.6833,"x":53.65},{"n":"Ware","c":"United Kingdom","y":51.8109,"x":-0.0314},{"n":"Bandar-e Kong","c":"Iran","y":26.5989,"x":54.9361},{"n":"Jamiltepec","c":"Mexico","y":16.2783,"x":-97.82},{"n":"Uzhur","c":"Russia","y":55.3167,"x":89.8167},{"n":"Moreni","c":"Romania","y":44.9803,"x":25.6444},{"n":"Buruanga","c":"Philippines","y":11.8438,"x":121.8888},{"n":"Lumphat","c":"Cambodia","y":13.507,"x":106.981},{"n":"Mount Eliza","c":"Australia","y":-38.189,"x":145.092},{"n":"Albolote","c":"Spain","y":37.2306,"x":-3.6569},{"n":"Port Alfred","c":"South Africa","y":-33.6,"x":26.8833},{"n":"Carlisle","c":"United States","y":40.1999,"x":-77.2042},{"n":"Antas","c":"Brazil","y":-10.4,"x":-38.3328},{"n":"Whitpain","c":"United States","y":40.1578,"x":-75.2769},{"n":"Huehuetla","c":"Mexico","y":20.1039,"x":-97.6251},{"n":"El Quetzal","c":"Guatemala","y":14.7667,"x":-91.8167},{"n":"Valderrama","c":"Philippines","y":11,"x":122.1333},{"n":"Valenza","c":"Italy","y":45.014,"x":8.6458},{"n":"Bredene","c":"Belgium","y":51.2336,"x":2.9756},{"n":"Vera","c":"Argentina","y":-29.4667,"x":-60.2167},{"n":"Maracacume","c":"Brazil","y":-2.0428,"x":-45.9589},{"n":"Palmi","c":"Italy","y":38.3667,"x":15.85},{"n":"Ait Ben Daoudi","c":"Morocco","y":31.6345,"x":-7.644},{"n":"Staveley","c":"United Kingdom","y":53.2694,"x":-1.3484},{"n":"Apora","c":"Brazil","y":-11.66,"x":-38.0808},{"n":"Stevenson Ranch","c":"United States","y":34.3894,"x":-118.5885},{"n":"Karia Ba Mohamed","c":"Morocco","y":34.3631,"x":-5.2123},{"n":"Dadeldhura","c":"Nepal","y":29.3,"x":80.6},{"n":"Liberal","c":"United States","y":37.0466,"x":-100.9295},{"n":"Ibirama","c":"Brazil","y":-27.0569,"x":-49.5178},{"n":"Sebt Gzoula","c":"Morocco","y":32.1167,"x":-9.0833},{"n":"Tazishan","c":"China","y":41.0937,"x":119.0408},{"n":"Pastavy","c":"Belarus","y":55.1167,"x":26.8333},{"n":"Tak Bai","c":"Thailand","y":6.2592,"x":102.053},{"n":"Bad Driburg","c":"Germany","y":51.7333,"x":9.0167},{"n":"Camacupa","c":"Angola","y":-12.0167,"x":17.4833},{"n":"La Ligua","c":"Chile","y":-32.4494,"x":-71.2317},{"n":"Dupax del Sur","c":"Philippines","y":16.2833,"x":121.1},{"n":"Camocim de Sao Felix","c":"Brazil","y":-8.3589,"x":-35.7619},{"n":"Halstenbek","c":"Germany","y":53.6334,"x":9.8372},{"n":"Castelfidardo","c":"Italy","y":43.4642,"x":13.5461},{"n":"Jussara","c":"Brazil","y":-15.865,"x":-50.8678},{"n":"Prenzlau","c":"Germany","y":53.3167,"x":13.8667},{"n":"Pinecrest","c":"United States","y":25.665,"x":-80.3042},{"n":"Brie-Comte-Robert","c":"France","y":48.6925,"x":2.6111},{"n":"Horseheads","c":"United States","y":42.1625,"x":-76.794},{"n":"Pirkkala","c":"Finland","y":61.4667,"x":23.65},{"n":"Goyty","c":"Russia","y":43.1642,"x":45.6228},{"n":"Cerqueira Cesar","c":"Brazil","y":-23.0356,"x":-49.1661},{"n":"Lower Southampton","c":"United States","y":40.1541,"x":-74.9903},{"n":"Vence","c":"France","y":43.7225,"x":7.1119},{"n":"Santa Ana Jilotzingo","c":"Mexico","y":19.5333,"x":-99.4},{"n":"Klaeng","c":"Thailand","y":12.7778,"x":101.6483},{"n":"Shemonaikha","c":"Kazakhstan","y":50.6281,"x":81.9122},{"n":"Nikolayevsk-na-Amure","c":"Russia","y":53.15,"x":140.7333},{"n":"Oberasbach","c":"Germany","y":49.4219,"x":10.9583},{"n":"Bruz","c":"France","y":48.0247,"x":-1.7458},{"n":"Moissy-Cramayel","c":"France","y":48.6261,"x":2.5922},{"n":"Londerzeel","c":"Belgium","y":51,"x":4.3},{"n":"Luneville","c":"France","y":48.5894,"x":6.5017},{"n":"Tiffin","c":"United States","y":41.1165,"x":-83.1805},{"n":"Ashkezar","c":"Iran","y":32,"x":54.2044},{"n":"Sudbury","c":"United States","y":42.3847,"x":-71.4234},{"n":"Amares","c":"Portugal","y":41.6333,"x":-8.35},{"n":"Mount Airy","c":"United States","y":36.5083,"x":-80.6154},{"n":"Beaconsfield","c":"Canada","y":45.4333,"x":-73.8667},{"n":"Lumbatan","c":"Philippines","y":7.785,"x":124.256},{"n":"Ixtlahuacan del Rio","c":"Mexico","y":20.8667,"x":-103.25},{"n":"Broadview Heights","c":"United States","y":41.3195,"x":-81.6782},{"n":"Buriti dos Lopes","c":"Brazil","y":-3.175,"x":-41.8669},{"n":"Targu Neamt","c":"Romania","y":47.2025,"x":26.3586},{"n":"Gostynin","c":"Poland","y":52.4167,"x":19.4667},{"n":"Sint-Genesius-Rode","c":"Belgium","y":50.75,"x":4.35},{"n":"Palma Campania","c":"Italy","y":40.8667,"x":14.55},{"n":"Baena","c":"Spain","y":37.6167,"x":-4.3167},{"n":"Silvania","c":"Brazil","y":-16.6589,"x":-48.6078},{"n":"Ban Na Yang","c":"Thailand","y":12.8339,"x":99.9346},{"n":"Guernica y Luno","c":"Spain","y":43.3167,"x":-2.6667},{"n":"Mumbwa","c":"Zambia","y":-14.9796,"x":27.07},{"n":"Dormentes","c":"Brazil","y":-8.4469,"x":-40.7708},{"n":"Toulal","c":"Morocco","y":32.3037,"x":-3.9861},{"n":"Carmo","c":"Brazil","y":-21.9339,"x":-42.6089},{"n":"Tlalnelhuayocan","c":"Mexico","y":19.5667,"x":-96.9667},{"n":"Shimomura","c":"Japan","y":36.0697,"x":138.0803},{"n":"Guaranesia","c":"Brazil","y":-21.2989,"x":-46.8028},{"n":"Radeberg","c":"Germany","y":51.1167,"x":13.9167},{"n":"Valenzano","c":"Italy","y":41.05,"x":16.8833},{"n":"Westbrook","c":"United States","y":43.6954,"x":-70.3539},{"n":"Matipo","c":"Brazil","y":-20.2839,"x":-42.3408},{"n":"Cuquio","c":"Mexico","y":20.9275,"x":-103.0239},{"n":"Komarom","c":"Hungary","y":47.74,"x":18.1217},{"n":"Wervik","c":"Belgium","y":50.7797,"x":3.04},{"n":"Preveza","c":"Greece","y":38.95,"x":20.75},{"n":"Cabaceiras do Paraguacu","c":"Brazil","y":-12.5358,"x":-39.1908},{"n":"Saugerties","c":"United States","y":42.0891,"x":-73.9969},{"n":"Umburanas","c":"Brazil","y":-10.7328,"x":-41.3258},{"n":"Rawa Mazowiecka","c":"Poland","y":51.7667,"x":20.25},{"n":"Alzey","c":"Germany","y":49.7517,"x":8.1161},{"n":"Zuidhorn","c":"Netherlands","y":53.2468,"x":6.4077},{"n":"Akureyri","c":"Iceland","y":65.6833,"x":-18.1},{"n":"Springwater","c":"Canada","y":44.4333,"x":-79.7333},{"n":"Holden","c":"United States","y":42.3562,"x":-71.8608},{"n":"Nova Petropolis","c":"Brazil","y":-29.3758,"x":-51.1119},{"n":"Pruzhany","c":"Belarus","y":52.5567,"x":24.4644},{"n":"Caowotan","c":"China","y":37.2739,"x":104.1046},{"n":"Proletarsk","c":"Russia","y":46.7031,"x":41.7192},{"n":"Banovce nad Bebravou","c":"Slovakia","y":48.7186,"x":18.2581},{"n":"Haukipudas","c":"Finland","y":65.1833,"x":25.35},{"n":"Red Bluff","c":"United States","y":40.1735,"x":-122.2413},{"n":"Villaquilambre","c":"Spain","y":42.6167,"x":-5.6},{"n":"Bronte","c":"Italy","y":37.8,"x":14.8333},{"n":"Westborough","c":"United States","y":42.2681,"x":-71.614},{"n":"Dankov","c":"Russia","y":53.25,"x":39.15},{"n":"God","c":"Hungary","y":47.6906,"x":19.1344},{"n":"Onega","c":"Russia","y":63.9167,"x":38.0833},{"n":"Ghedi","c":"Italy","y":45.402,"x":10.2803},{"n":"Louviers","c":"France","y":49.2153,"x":1.1656},{"n":"Puerto Natales","c":"Chile","y":-51.7263,"x":-72.5062},{"n":"Porciuncula","c":"Brazil","y":-20.9628,"x":-42.0408},{"n":"Time","c":"Norway","y":58.7228,"x":5.7653},{"n":"Caconde","c":"Brazil","y":-21.5289,"x":-46.6439},{"n":"Shimanovsk","c":"Russia","y":52,"x":127.6667},{"n":"La Nucia","c":"Spain","y":38.6172,"x":-0.1231},{"n":"Fox Crossing","c":"United States","y":44.2229,"x":-88.4763},{"n":"Ervalia","c":"Brazil","y":-20.84,"x":-42.6569},{"n":"McKeesport","c":"United States","y":40.3419,"x":-79.8439},{"n":"Beni Zouli","c":"Morocco","y":30.5047,"x":-5.8563},{"n":"Taft","c":"Philippines","y":11.9,"x":125.4167},{"n":"Mill Hill","c":"United Kingdom","y":51.62,"x":-0.23},{"n":"Salcaja","c":"Guatemala","y":14.8833,"x":-91.45},{"n":"Las Terrenas","c":"Dominican Republic","y":19.32,"x":-69.53},{"n":"La Crau","c":"France","y":43.1497,"x":6.0742},{"n":"Eitorf","c":"Germany","y":50.7697,"x":7.4517},{"n":"Gyomro","c":"Hungary","y":47.4353,"x":19.3986},{"n":"Ribera","c":"Italy","y":37.4994,"x":13.265},{"n":"Atlapexco","c":"Mexico","y":21.0042,"x":-98.5056},{"n":"Limerick","c":"United States","y":40.2323,"x":-75.5344},{"n":"Motomachi","c":"Japan","y":43.8236,"x":144.1072},{"n":"La Eliana","c":"Spain","y":39.5661,"x":-0.5281},{"n":"Bideford","c":"United Kingdom","y":51.016,"x":-4.209},{"n":"Qitai","c":"China","y":41.5494,"x":113.5339},{"n":"Dorval","c":"Canada","y":45.45,"x":-73.75},{"n":"Stroud","c":"United States","y":41.0001,"x":-75.2173},{"n":"Jiaoxiyakou","c":"China","y":26.1274,"x":102.4502},{"n":"Montceau-les-Mines","c":"France","y":46.6669,"x":4.3689},{"n":"Murray Bridge","c":"Australia","y":-35.117,"x":139.267},{"n":"Antonina","c":"Brazil","y":-25.4289,"x":-48.7119},{"n":"Lubang","c":"Philippines","y":13.8,"x":120.15},{"n":"Kalynivka","c":"Ukraine","y":49.4472,"x":28.5231},{"n":"Appley Bridge","c":"United Kingdom","y":53.579,"x":-2.721},{"n":"Naantali","c":"Finland","y":60.4681,"x":22.0264},{"n":"Onalaska","c":"United States","y":43.8881,"x":-91.2074},{"n":"Castel Maggiore","c":"Italy","y":44.5778,"x":11.3617},{"n":"Kapay","c":"Philippines","y":8.0833,"x":124.4},{"n":"Pindoretama","c":"Brazil","y":-4.0278,"x":-38.3058},{"n":"Rutigliano","c":"Italy","y":40.9333,"x":16.9},{"n":"Waterford","c":"United States","y":41.3692,"x":-72.1483},{"n":"Ipaba","c":"Brazil","y":-19.4139,"x":-42.4189},{"n":"Uwchlan","c":"United States","y":40.0522,"x":-75.6679},{"n":"Barao do Grajau","c":"Brazil","y":-6.7558,"x":-43.0239},{"n":"Moosburg","c":"Germany","y":48.4667,"x":11.9333},{"n":"Avion","c":"France","y":50.4097,"x":2.8328},{"n":"Springboro","c":"United States","y":39.5612,"x":-84.2348},{"n":"Poulton le Fylde","c":"United Kingdom","y":53.847,"x":-2.995},{"n":"Terra Santa","c":"Brazil","y":-2.1039,"x":-56.4869},{"n":"Sartell","c":"United States","y":45.6187,"x":-94.2207},{"n":"Tado","c":"Colombia","y":5.2633,"x":-76.56},{"n":"Narangba","c":"Australia","y":-27.2015,"x":152.9655},{"n":"Contamana","c":"Peru","y":-7.3333,"x":-75.0167},{"n":"Itatira","c":"Brazil","y":-4.5289,"x":-39.6219},{"n":"Polohy","c":"Ukraine","y":47.4796,"x":36.2611},{"n":"Badger","c":"United States","y":64.8006,"x":-147.3877},{"n":"Paks","c":"Hungary","y":46.6219,"x":18.8558},{"n":"Chapada dos Guimaraes","c":"Brazil","y":-15.4608,"x":-55.75},{"n":"Cofradia","c":"Honduras","y":15.4168,"x":-88.1603},{"n":"Louny","c":"Czechia","y":50.3571,"x":13.7968},{"n":"Five Corners","c":"United States","y":45.6883,"x":-122.5738},{"n":"Landa de Matamoros","c":"Mexico","y":21.1819,"x":-99.3203},{"n":"Mo i Rana","c":"Norway","y":66.3167,"x":14.1667},{"n":"Contenda","c":"Brazil","y":-25.6758,"x":-49.535},{"n":"McAlester","c":"United States","y":34.9262,"x":-95.7698},{"n":"Hardinxveld-Giessendam","c":"Netherlands","y":51.83,"x":4.87},{"n":"Nelidovo","c":"Russia","y":56.2167,"x":32.7833},{"n":"Stord","c":"Norway","y":59.8081,"x":5.4664},{"n":"Laukaa","c":"Finland","y":62.4167,"x":25.95},{"n":"Hala","c":"China","y":26.8272,"x":103.9938},{"n":"Conceicao","c":"Brazil","y":-7.5619,"x":-38.5089},{"n":"Drunen","c":"Netherlands","y":51.6833,"x":5.1667},{"n":"Szazhalombatta","c":"Hungary","y":47.3167,"x":18.9114},{"n":"Sestri Levante","c":"Italy","y":44.2733,"x":9.3932},{"n":"Mount Isa","c":"Australia","y":-20.7333,"x":139.5},{"n":"La Follette","c":"United States","y":36.3718,"x":-84.1256},{"n":"Velez","c":"Colombia","y":6.0131,"x":-73.6736},{"n":"Alfeld","c":"Germany","y":51.9886,"x":9.8269},{"n":"Aberystwyth","c":"United Kingdom","y":52.414,"x":-4.081},{"n":"Le Pontet","c":"France","y":43.9642,"x":4.86},{"n":"Fushe-Kruje","c":"Albania","y":41.4833,"x":19.7167},{"n":"Muttenz","c":"Switzerland","y":47.5228,"x":7.6452},{"n":"Benicasim","c":"Spain","y":40.0553,"x":0.0642},{"n":"Piatykhatky","c":"Ukraine","y":48.4126,"x":33.7034},{"n":"Terrell","c":"United States","y":32.7341,"x":-96.2939},{"n":"Heanor","c":"United Kingdom","y":53.014,"x":-1.354},{"n":"Tocaima","c":"Colombia","y":4.4578,"x":-74.6347},{"n":"Meylan","c":"France","y":45.2086,"x":5.7794},{"n":"Kara-Kol","c":"Kyrgyzstan","y":41.6283,"x":72.6703},{"n":"Kalach","c":"Russia","y":50.4258,"x":41.0156},{"n":"San Lorenzo de El Escorial","c":"Spain","y":40.5936,"x":-4.1428},{"n":"Natchitoches","c":"United States","y":31.7317,"x":-93.0979},{"n":"Oulmes","c":"Morocco","y":33.4167,"x":-6.0167},{"n":"Targu Secuiesc","c":"Romania","y":45.9969,"x":26.1406},{"n":"Twinsburg","c":"United States","y":41.322,"x":-81.4451},{"n":"Taufkirchen","c":"Germany","y":48.05,"x":11.6167},{"n":"Central Point","c":"United States","y":42.3765,"x":-122.911},{"n":"Bemmel","c":"Netherlands","y":51.8917,"x":5.8958},{"n":"Crimmitschau","c":"Germany","y":50.8181,"x":12.3875},{"n":"Seminole","c":"United States","y":27.8435,"x":-82.7839},{"n":"Burscheid","c":"Germany","y":51.1,"x":7.1167},{"n":"Kilbirnie","c":"United Kingdom","y":55.755,"x":-4.686},{"n":"Dzuunharaa","c":"Mongolia","y":48.8666,"x":106.4666},{"n":"Coldwater","c":"United States","y":41.9465,"x":-84.9989},{"n":"Gossau","c":"Switzerland","y":47.4164,"x":9.25},{"n":"Porto Acre","c":"Brazil","y":-9.5878,"x":-67.5328},{"n":"Owego","c":"United States","y":42.0881,"x":-76.1906},{"n":"Starobilsk","c":"Ukraine","y":49.2667,"x":38.9167},{"n":"Bareggio","c":"Italy","y":45.4667,"x":8.9833},{"n":"Marsciano","c":"Italy","y":42.9167,"x":12.3333},{"n":"Peterhead","c":"United Kingdom","y":57.5091,"x":-1.7832},{"n":"West Manchester","c":"United States","y":39.9456,"x":-76.7952},{"n":"Sortavala","c":"Russia","y":61.7,"x":30.6667},{"n":"Victoria","c":"Mexico","y":21.2122,"x":-100.2144},{"n":"Lessines","c":"Belgium","y":50.7117,"x":3.83},{"n":"Oirschot","c":"Netherlands","y":51.5047,"x":5.3128},{"n":"Siderno Marina","c":"Italy","y":38.2667,"x":16.3},{"n":"Malacacheta","c":"Brazil","y":-17.8419,"x":-42.0769},{"n":"Thorold","c":"Canada","y":43.1167,"x":-79.2},{"n":"Ban Mai","c":"Thailand","y":14.9658,"x":102.0233},{"n":"Santiago de Maria","c":"El Salvador","y":13.4833,"x":-88.4667},{"n":"Palmeiras","c":"Brazil","y":-2.645,"x":-44.895},{"n":"Costa Marques","c":"Brazil","y":-12.445,"x":-64.2272},{"n":"St. John","c":"United States","y":41.4431,"x":-87.47},{"n":"Novyy Oskol","c":"Russia","y":50.7667,"x":37.8667},{"n":"Osny","c":"France","y":49.0592,"x":2.0625},{"n":"Renningen","c":"Germany","y":48.7661,"x":8.9347},{"n":"Cabusao","c":"Philippines","y":13.7167,"x":123.1},{"n":"Engenheiro Coelho","c":"Brazil","y":-22.4883,"x":-47.215},{"n":"Alzenau in Unterfranken","c":"Germany","y":50.0881,"x":9.0497},{"n":"Piossasco","c":"Italy","y":44.9833,"x":7.4667},{"n":"Neopolis","c":"Brazil","y":-10.32,"x":-36.5794},{"n":"Quitandinha","c":"Brazil","y":-25.8719,"x":-49.4978},{"n":"Rawmarsh","c":"United Kingdom","y":53.4636,"x":-1.3439},{"n":"Huercal de Almeria","c":"Spain","y":36.8833,"x":-2.4333},{"n":"Kitcharao","c":"Philippines","y":9.4581,"x":125.5756},{"n":"Emba","c":"Kazakhstan","y":48.8268,"x":58.1442},{"n":"Stekene","c":"Belgium","y":51.2061,"x":4.04},{"n":"Vitre","c":"France","y":48.1233,"x":-1.2094},{"n":"Ibitita","c":"Brazil","y":-11.5469,"x":-41.9778},{"n":"Konz","c":"Germany","y":49.7028,"x":6.5794},{"n":"Farias Brito","c":"Brazil","y":-6.9308,"x":-39.5658},{"n":"Cruz Machado","c":"Brazil","y":-26.0169,"x":-51.3469},{"n":"Tepetlixpa","c":"Mexico","y":19.0006,"x":-98.8178},{"n":"Pirapemas","c":"Brazil","y":-3.7269,"x":-44.2228},{"n":"Rufino","c":"Argentina","y":-34.2683,"x":-62.7125},{"n":"Longjia","c":"China","y":19.1487,"x":110.3209},{"n":"Villa de Leyva","c":"Colombia","y":5.6331,"x":-73.5256},{"n":"Grafton","c":"United States","y":42.2085,"x":-71.6838},{"n":"Camrose","c":"Canada","y":53.0167,"x":-112.8333},{"n":"Schneverdingen","c":"Germany","y":53.1167,"x":9.8},{"n":"Orodara","c":"Burkina Faso","y":10.974,"x":-4.908},{"n":"Rajmahal","c":"India","y":25.05,"x":87.84},{"n":"Villa Verde","c":"Philippines","y":16.5833,"x":121.2},{"n":"Marktoberdorf","c":"Germany","y":47.7667,"x":10.6167},{"n":"Domodossola","c":"Italy","y":46.1161,"x":8.2911},{"n":"Jbabra","c":"Morocco","y":34.4314,"x":-4.9642},{"n":"Cimarron Hills","c":"United States","y":38.8597,"x":-104.6995},{"n":"East Lyme","c":"United States","y":41.3664,"x":-72.2352},{"n":"Wassenberg","c":"Germany","y":51.1,"x":6.15},{"n":"Miyatoko","c":"Japan","y":33.6992,"x":130.9206},{"n":"Scituate","c":"United States","y":42.1992,"x":-70.759},{"n":"Sparta","c":"United States","y":41.0486,"x":-74.6264},{"n":"Carius","c":"Brazil","y":-6.5369,"x":-39.4969},{"n":"Venturosa","c":"Brazil","y":-8.5747,"x":-36.8742},{"n":"Cafarnaum","c":"Brazil","y":-11.6939,"x":-41.4678},{"n":"Bad Reichenhall","c":"Germany","y":47.7247,"x":12.8769},{"n":"Alsip","c":"United States","y":41.6701,"x":-87.7368},{"n":"Toflea","c":"Romania","y":46.0637,"x":27.3341},{"n":"Orastie","c":"Romania","y":45.8403,"x":23.1994},{"n":"Laives","c":"Italy","y":46.4276,"x":11.3405},{"n":"Picui","c":"Brazil","y":-6.555,"x":-36.3489},{"n":"Surovikino","c":"Russia","y":48.6,"x":42.85},{"n":"Or `Aqiva","c":"Israel","y":32.5,"x":34.9167},{"n":"Lora del Rio","c":"Spain","y":37.65,"x":-5.5167},{"n":"Sanpaicun","c":"China","y":24.6642,"x":112.2935},{"n":"Auerbach","c":"Germany","y":50.5094,"x":12.4},{"n":"Ibipeba","c":"Brazil","y":-11.6408,"x":-42.0108},{"n":"Port Isabel","c":"United States","y":26.054,"x":-97.2505},{"n":"Bacuri","c":"Brazil","y":-1.7028,"x":-45.1339},{"n":"Liuma","c":"China","y":25.6681,"x":105.872},{"n":"Ban Thum","c":"Thailand","y":16.4523,"x":102.7225},{"n":"Vovchansk","c":"Ukraine","y":50.2881,"x":36.9461},{"n":"Marinette","c":"United States","y":45.087,"x":-87.6328},{"n":"Bergeijk","c":"Netherlands","y":51.3203,"x":5.3592},{"n":"Capua","c":"Italy","y":41.1056,"x":14.2139},{"n":"Vlotho","c":"Germany","y":52.1667,"x":8.8497},{"n":"Jaguaripe","c":"Brazil","y":-13.1128,"x":-38.8958},{"n":"Boa Vista do Tupim","c":"Brazil","y":-12.66,"x":-40.6089},{"n":"Kavalerovo","c":"Russia","y":44.2702,"x":135.0498},{"n":"Filomeno Mata","c":"Mexico","y":20.2,"x":-97.7},{"n":"Bad Durkheim","c":"Germany","y":49.4618,"x":8.1724},{"n":"Hochheim am Main","c":"Germany","y":50.0108,"x":8.3508},{"n":"Bals","c":"Romania","y":44.3542,"x":24.0986},{"n":"Ansonia","c":"United States","y":41.3443,"x":-73.0689},{"n":"Weissenburg","c":"Germany","y":49.0306,"x":10.9719},{"n":"Chouafaa","c":"Morocco","y":34.7667,"x":-6.05},{"n":"Bremervorde","c":"Germany","y":53.4833,"x":9.1333},{"n":"West Whiteland","c":"United States","y":40.0227,"x":-75.6239},{"n":"Malnate","c":"Italy","y":45.8,"x":8.8833},{"n":"Bagnols-sur-Ceze","c":"France","y":44.1625,"x":4.62},{"n":"Sao Joao dos Poleiros","c":"Brazil","y":-5.1139,"x":-43.81},{"n":"Deerfield","c":"United States","y":42.1654,"x":-87.8516},{"n":"South Frontenac","c":"Canada","y":44.5081,"x":-76.4939},{"n":"Augustinopolis","c":"Brazil","y":-5.4658,"x":-47.8878},{"n":"Guanzhai","c":"China","y":26.2697,"x":105.3089},{"n":"Maple Shade","c":"United States","y":39.952,"x":-74.995},{"n":"Tamri","c":"Morocco","y":30.7,"x":-9.8333},{"n":"Limay","c":"France","y":48.9933,"x":1.7358},{"n":"Kulu","c":"India","y":31.96,"x":77.1},{"n":"Melegnano","c":"Italy","y":45.3667,"x":9.3167},{"n":"Nytva","c":"Russia","y":57.9333,"x":55.3333},{"n":"Porto Real","c":"Brazil","y":-22.42,"x":-44.29},{"n":"Olten","c":"Switzerland","y":47.3531,"x":7.9078},{"n":"Creve Coeur","c":"United States","y":38.6621,"x":-90.443},{"n":"Cluses","c":"France","y":46.0603,"x":6.5786},{"n":"Vanino","c":"Russia","y":49.0873,"x":140.2425},{"n":"Aguas de Lindoia","c":"Brazil","y":-22.4758,"x":-46.6328},{"n":"Carnaiba","c":"Brazil","y":-7.805,"x":-37.7939},{"n":"Brand","c":"Germany","y":50.7489,"x":6.165},{"n":"Tata","c":"Morocco","y":29.7428,"x":-7.9725},{"n":"Jiabong","c":"Philippines","y":11.7625,"x":124.9519},{"n":"Hoppegarten","c":"Germany","y":52.5167,"x":13.6667},{"n":"Tatsuno","c":"Japan","y":35.9825,"x":137.9875},{"n":"Skadovsk","c":"Ukraine","y":46.1167,"x":32.9167},{"n":"Shaogang","c":"China","y":38.1584,"x":106.0661},{"n":"Orestiada","c":"Greece","y":41.5,"x":26.5333},{"n":"Berea","c":"United States","y":41.3696,"x":-81.8642},{"n":"Olho d'Agua das Cunhas","c":"Brazil","y":-4.1389,"x":-45.12},{"n":"Firminy","c":"France","y":45.3881,"x":4.2872},{"n":"Cocoa","c":"United States","y":28.382,"x":-80.7674},{"n":"Moultrie","c":"United States","y":31.1591,"x":-83.7708},{"n":"Timoktene","c":"Algeria","y":27.0217,"x":1.015},{"n":"Berkhampstead","c":"United Kingdom","y":51.76,"x":-0.56},{"n":"Unquillo","c":"Argentina","y":-31.2333,"x":-64.3167},{"n":"Budrio","c":"Italy","y":44.5374,"x":11.5344},{"n":"Houghton Regis","c":"United Kingdom","y":51.9039,"x":-0.5247},{"n":"Bonen","c":"Germany","y":51.5986,"x":7.7592},{"n":"Marihatag","c":"Philippines","y":8.8,"x":126.3},{"n":"Sinacaban","c":"Philippines","y":8.2854,"x":123.8436},{"n":"Varjota","c":"Brazil","y":-4.1939,"x":-40.4769},{"n":"Pitt Meadows","c":"Canada","y":49.2333,"x":-122.6833},{"n":"Zagarolo","c":"Italy","y":41.8333,"x":12.8333},{"n":"Kristiansund","c":"Norway","y":63.1105,"x":7.7279},{"n":"Priozersk","c":"Russia","y":61.0393,"x":30.1291},{"n":"Santa Cruz Zenzontepec","c":"Mexico","y":16.5333,"x":-97.5},{"n":"Anacortes","c":"United States","y":48.4878,"x":-122.6292},{"n":"Moloacan","c":"Mexico","y":17.9833,"x":-94.35},{"n":"Lahnstein","c":"Germany","y":50.3011,"x":7.6056},{"n":"Sidi Allal Tazi","c":"Morocco","y":34.5197,"x":-6.3236},{"n":"Matagob","c":"Philippines","y":11.1167,"x":124.4667},{"n":"Asuncion Nochixtlan","c":"Mexico","y":17.4592,"x":-97.2261},{"n":"Shaoyu","c":"China","y":34.0629,"x":105.3672},{"n":"Heusweiler","c":"Germany","y":49.3375,"x":6.9301},{"n":"Borgo San Lorenzo","c":"Italy","y":43.9555,"x":11.3856},{"n":"Miedzyrzecz","c":"Poland","y":52.4446,"x":15.578},{"n":"Tha Bo","c":"Thailand","y":17.8494,"x":102.5858},{"n":"Sam Phran","c":"Thailand","y":13.727,"x":100.2153},{"n":"Cordenons","c":"Italy","y":45.9833,"x":12.7},{"n":"Fatima","c":"Brazil","y":-10.6,"x":-38.2169},{"n":"Bramhall","c":"United Kingdom","y":53.357,"x":-2.164},{"n":"San Blas Atempa","c":"Mexico","y":16.3167,"x":-95.2167},{"n":"Campo de la Cruz","c":"Colombia","y":10.3778,"x":-74.8814},{"n":"Rancho Mirage","c":"United States","y":33.7634,"x":-116.4271},{"n":"Sharon","c":"United States","y":42.1085,"x":-71.183},{"n":"Kherameh","c":"Iran","y":29.5,"x":53.3164},{"n":"Littau","c":"Switzerland","y":47.0494,"x":8.2639},{"n":"Garuva","c":"Brazil","y":-26.0269,"x":-48.855},{"n":"Siqueira Campos","c":"Brazil","y":-23.6889,"x":-49.8339},{"n":"Placido de Castro","c":"Brazil","y":-10.2758,"x":-67.15},{"n":"Kostrzyn nad Odra","c":"Poland","y":52.5883,"x":14.6667},{"n":"Dniprorudne","c":"Ukraine","y":47.3855,"x":34.9879},{"n":"Gibsonton","c":"United States","y":27.826,"x":-82.3761},{"n":"Del Carmen","c":"Philippines","y":9.869,"x":125.97},{"n":"Taio","c":"Brazil","y":-27.1158,"x":-49.9978},{"n":"Viradouro","c":"Brazil","y":-20.8728,"x":-48.2969},{"n":"Lynden","c":"United States","y":48.9502,"x":-122.4545},{"n":"Somma Lombardo","c":"Italy","y":45.6833,"x":8.7},{"n":"Savignano sul Rubicone","c":"Italy","y":44.0881,"x":12.3933},{"n":"Elst","c":"Netherlands","y":51.9156,"x":5.8378},{"n":"Swellendam","c":"South Africa","y":-34.0231,"x":20.44},{"n":"Beloozerskiy","c":"Russia","y":55.4614,"x":38.4422},{"n":"Foum el Anser","c":"Morocco","y":32.3717,"x":-6.2614},{"n":"Guadix","c":"Spain","y":37.3,"x":-3.1333},{"n":"Gautier","c":"United States","y":30.4106,"x":-88.6568},{"n":"Otrokovice","c":"Czechia","y":49.2099,"x":17.5308},{"n":"Nara","c":"Mali","y":15.18,"x":-7.28},{"n":"Mayfield Heights","c":"United States","y":41.5175,"x":-81.4534},{"n":"Piata","c":"Brazil","y":-13.1519,"x":-41.7728},{"n":"Breaux Bridge","c":"United States","y":30.2829,"x":-91.9043},{"n":"Tonantins","c":"Brazil","y":-2.8728,"x":-67.8019},{"n":"Arroio Grande","c":"Brazil","y":-32.2378,"x":-53.0869},{"n":"Itapaci","c":"Brazil","y":-14.9508,"x":-49.5489},{"n":"Almondbury","c":"United Kingdom","y":53.6344,"x":-1.7489},{"n":"Taft","c":"Iran","y":31.7475,"x":54.2042},{"n":"Nerviano","c":"Italy","y":45.55,"x":8.9833},{"n":"Torredembarra","c":"Spain","y":41.1457,"x":1.3957},{"n":"Hopkins","c":"United States","y":44.9261,"x":-93.4056},{"n":"Bekes","c":"Hungary","y":46.7769,"x":21.125},{"n":"Albino","c":"Italy","y":45.7606,"x":9.7969},{"n":"Villorba","c":"Italy","y":45.7333,"x":12.2333},{"n":"Kobylka","c":"Poland","y":52.3395,"x":21.1959},{"n":"Wilton","c":"United States","y":41.207,"x":-73.4401},{"n":"Lamrasla","c":"Morocco","y":32.0247,"x":-8.9153},{"n":"Tingloy","c":"Philippines","y":13.65,"x":120.8667},{"n":"Defiance","c":"United States","y":41.281,"x":-84.3661},{"n":"Gheorgheni","c":"Romania","y":46.72,"x":25.59},{"n":"Monor","c":"Hungary","y":47.3475,"x":19.4489},{"n":"Itapororoca","c":"Brazil","y":-6.83,"x":-35.2469},{"n":"Madalag","c":"Philippines","y":11.5167,"x":122.3},{"n":"Yur'yev-Pol'skiy","c":"Russia","y":56.5,"x":39.6833},{"n":"Korsun-Shevchenkivskyi","c":"Ukraine","y":49.4261,"x":31.2806},{"n":"Valguarnera Caropepe","c":"Italy","y":37.5,"x":14.3833},{"n":"Stonington","c":"United States","y":41.3738,"x":-71.9034},{"n":"San Jose Tenango","c":"Mexico","y":18.15,"x":-96.7333},{"n":"Amvrosiivka","c":"Ukraine","y":47.7958,"x":38.4801},{"n":"Svatove","c":"Ukraine","y":49.4092,"x":38.1619},{"n":"Campos Belos","c":"Brazil","y":-13.0369,"x":-46.7719},{"n":"Panagyurishte","c":"Bulgaria","y":42.5026,"x":24.1802},{"n":"Iron Mountain","c":"United States","y":45.8275,"x":-88.0599},{"n":"Durlesti","c":"Moldova","y":47.0178,"x":28.7625},{"n":"Schwechat","c":"Austria","y":48.1411,"x":16.4786},{"n":"Formoso do Araguaia","c":"Brazil","y":-11.7969,"x":-49.5289},{"n":"Golcar","c":"United Kingdom","y":53.6378,"x":-1.8457},{"n":"Bodegraven","c":"Netherlands","y":52.0808,"x":4.7486},{"n":"Altus","c":"United States","y":34.6566,"x":-99.3051},{"n":"San Celoni","c":"Spain","y":41.6895,"x":2.4897},{"n":"Belo Campo","c":"Brazil","y":-15.0378,"x":-41.26},{"n":"Harinakunda","c":"Bangladesh","y":23.65,"x":89.0333},{"n":"Oroszlany","c":"Hungary","y":47.4892,"x":18.3164},{"n":"Kadan","c":"Czechia","y":50.3761,"x":13.2714},{"n":"Santa Maria di Sala","c":"Italy","y":45.5089,"x":12.0363},{"n":"Uvalde","c":"United States","y":29.2153,"x":-99.7782},{"n":"Nunungan","c":"Philippines","y":7.8167,"x":123.9667},{"n":"Banting","c":"Philippines","y":5.7167,"x":120.9},{"n":"Serra Dourada","c":"Brazil","y":-12.7608,"x":-43.95},{"n":"Garwolin","c":"Poland","y":51.9,"x":21.6167},{"n":"Brushy Creek","c":"United States","y":30.5125,"x":-97.7388},{"n":"Concepcion de Ataco","c":"El Salvador","y":13.8667,"x":-89.85},{"n":"Ait Bouchta","c":"Morocco","y":35.1033,"x":-3.8383},{"n":"Cassano al Ionio","c":"Italy","y":39.7839,"x":16.3189},{"n":"Brook Park","c":"United States","y":41.4036,"x":-81.8219},{"n":"Yoichi","c":"Japan","y":43.2039,"x":140.7703},{"n":"Pembroke","c":"United States","y":42.0655,"x":-70.8014},{"n":"Novopavlovka","c":"Kyrgyzstan","y":42.87,"x":74.48},{"n":"Braniewo","c":"Poland","y":54.3833,"x":19.8333},{"n":"Piuma","c":"Brazil","y":-20.835,"x":-40.7289},{"n":"Middle","c":"United States","y":39.0851,"x":-74.8336},{"n":"Memuro-minami","c":"Japan","y":42.9119,"x":143.0508},{"n":"Wallingford Center","c":"United States","y":41.4499,"x":-72.8189},{"n":"Grossenhain","c":"Germany","y":51.2833,"x":13.55},{"n":"Santander","c":"Philippines","y":9.45,"x":123.3333},{"n":"Carire","c":"Brazil","y":-3.9508,"x":-40.4728},{"n":"Qishe","c":"China","y":24.9232,"x":104.7218},{"n":"Sunnyside","c":"United States","y":46.3158,"x":-120.0059},{"n":"Pinabacdao","c":"Philippines","y":11.6167,"x":124.9833},{"n":"Lagoa da Canoa","c":"Brazil","y":-9.83,"x":-36.7378},{"n":"Middelharnis","c":"Netherlands","y":51.7535,"x":4.1647},{"n":"Sorum","c":"Norway","y":59.9871,"x":11.2402},{"n":"Serrita","c":"Brazil","y":-7.9328,"x":-39.2958},{"n":"Garching bei Munchen","c":"Germany","y":48.25,"x":11.65},{"n":"Bet She'an","c":"Israel","y":32.4961,"x":35.4989},{"n":"Fulwood","c":"United Kingdom","y":53.365,"x":-1.544},{"n":"Dobrush","c":"Belarus","y":52.4167,"x":31.3167},{"n":"Schwalmstadt","c":"Germany","y":50.9128,"x":9.1889},{"n":"Jucurutu","c":"Brazil","y":-6.0339,"x":-37.02},{"n":"Boissy-Saint-Leger","c":"France","y":48.7503,"x":2.5097},{"n":"Shaying","c":"China","y":25.974,"x":105.4233},{"n":"Towamencin","c":"United States","y":40.2417,"x":-75.3387},{"n":"Klaukkala","c":"Finland","y":60.382,"x":24.7492},{"n":"Forst (Lausitz)","c":"Germany","y":51.7333,"x":14.6333},{"n":"World Golf Village","c":"United States","y":29.9653,"x":-81.4898},{"n":"Sycamore","c":"United States","y":41.9951,"x":-88.6812},{"n":"Franklin Farm","c":"United States","y":38.9133,"x":-77.3969},{"n":"Charata","c":"Argentina","y":-27.2144,"x":-61.1881},{"n":"Vertentes","c":"Brazil","y":-7.9028,"x":-35.9878},{"n":"Oyama","c":"Japan","y":35.3667,"x":138.9833},{"n":"San Gabriel","c":"Philippines","y":16.6667,"x":120.4},{"n":"Sikhio","c":"Thailand","y":14.8764,"x":101.7202},{"n":"Chowchilla","c":"United States","y":37.1095,"x":-120.2349},{"n":"Felanitx","c":"Spain","y":39.4692,"x":3.1481},{"n":"Ronkonkoma","c":"United States","y":40.804,"x":-73.1258},{"n":"Polignano a Mare","c":"Italy","y":40.9961,"x":17.2203},{"n":"Lagoa do Carro","c":"Brazil","y":-7.845,"x":-35.32},{"n":"Port Colborne","c":"Canada","y":42.8833,"x":-79.25},{"n":"Pocinhos","c":"Brazil","y":-7.0769,"x":-36.0608},{"n":"Maltby","c":"United Kingdom","y":53.426,"x":-1.21},{"n":"Lobos","c":"Argentina","y":-35.1864,"x":-59.0961},{"n":"Slyudyanka","c":"Russia","y":51.6594,"x":103.7061},{"n":"Torrox","c":"Spain","y":36.75,"x":-3.95},{"n":"Buckhaven","c":"United Kingdom","y":56.1776,"x":-3.0303},{"n":"Newburyport","c":"United States","y":42.8124,"x":-70.8878},{"n":"Kosvik","c":"Norway","y":58.1418,"x":8.0802},{"n":"Colina","c":"Brazil","y":-20.7136,"x":-48.5411},{"n":"Schkeuditz","c":"Germany","y":51.4,"x":12.2167},{"n":"Caldas de Montbuy","c":"Spain","y":41.6328,"x":2.1675},{"n":"Huitan","c":"Guatemala","y":15.0486,"x":-91.64},{"n":"Condeuba","c":"Brazil","y":-14.895,"x":-41.9689},{"n":"Hessisch Oldendorf","c":"Germany","y":52.1667,"x":9.25},{"n":"Malimono","c":"Philippines","y":9.6167,"x":125.4},{"n":"Xochiatipan de Castillo","c":"Mexico","y":20.8333,"x":-98.285},{"n":"Montornes del Valles","c":"Spain","y":41.5444,"x":2.267},{"n":"Bouarouss","c":"Morocco","y":34.3667,"x":-4.8167},{"n":"Banabuiu","c":"Brazil","y":-5.31,"x":-38.9208},{"n":"Luz","c":"Brazil","y":-19.8008,"x":-45.6858},{"n":"Dragasani","c":"Romania","y":44.6611,"x":24.2639},{"n":"Isfana","c":"Kyrgyzstan","y":39.8333,"x":69.5167},{"n":"Werdohl","c":"Germany","y":51.2563,"x":7.7562},{"n":"Kilgore","c":"United States","y":32.3979,"x":-94.8603},{"n":"Kishi","c":"Japan","y":35.3364,"x":139.1233},{"n":"Worth am Rhein","c":"Germany","y":49.0517,"x":8.2603},{"n":"Gangwuzhen","c":"China","y":25.9644,"x":105.3376},{"n":"Baicoi","c":"Romania","y":45.0453,"x":25.8658},{"n":"Sapucaia","c":"Brazil","y":-21.995,"x":-42.9139},{"n":"Nigran","c":"Spain","y":42.1419,"x":-8.8056},{"n":"Bekalta","c":"Tunisia","y":35.62,"x":11},{"n":"Radford","c":"United States","y":37.1229,"x":-80.5587},{"n":"Ikniwn","c":"Morocco","y":31.1717,"x":-5.6489},{"n":"Quispamsis","c":"Canada","y":45.4322,"x":-65.9462},{"n":"Texistepeque","c":"El Salvador","y":14.1333,"x":-89.5},{"n":"Palestine","c":"United States","y":31.7544,"x":-95.6471},{"n":"Whitestown","c":"United States","y":43.135,"x":-75.3404},{"n":"Crawfordsville","c":"United States","y":40.0428,"x":-86.8975},{"n":"Puchov","c":"Slovakia","y":49.12,"x":18.3306},{"n":"San Kamphaeng","c":"Thailand","y":18.75,"x":99.1167},{"n":"Ploemeur","c":"France","y":47.7358,"x":-3.4311},{"n":"Arinos","c":"Brazil","y":-15.9169,"x":-46.1058},{"n":"Grangemouth","c":"United Kingdom","y":56.012,"x":-3.717},{"n":"Boerne","c":"United States","y":29.7844,"x":-98.7289},{"n":"Rikuzen-Takata","c":"Japan","y":39.0153,"x":141.6294},{"n":"Pieksamaki","c":"Finland","y":62.3,"x":27.1583},{"n":"Lake Placid","c":"United States","y":27.2977,"x":-81.3715},{"n":"Carvin","c":"France","y":50.4931,"x":2.9581},{"n":"Tarifa","c":"Spain","y":36.014,"x":-5.606},{"n":"Lask","c":"Poland","y":51.5906,"x":19.1328},{"n":"Dombovar","c":"Hungary","y":46.3769,"x":18.131},{"n":"Diadi","c":"Philippines","y":16.6333,"x":121.35},{"n":"Alpignano","c":"Italy","y":45.1,"x":7.5167},{"n":"Wemmel","c":"Belgium","y":50.9167,"x":4.3},{"n":"Pastrana","c":"Philippines","y":11.1333,"x":124.8833},{"n":"Muynoq","c":"Uzbekistan","y":43.7667,"x":59.0333},{"n":"Rhaude","c":"Germany","y":53.1667,"x":7.55},{"n":"Rio Maria","c":"Brazil","y":-7.3108,"x":-50.0478},{"n":"St. Michael","c":"United States","y":45.2014,"x":-93.692},{"n":"East Goshen","c":"United States","y":39.9934,"x":-75.5478},{"n":"Ilam","c":"Nepal","y":26.908,"x":87.926},{"n":"Mont-Saint-Hilaire","c":"Canada","y":45.5622,"x":-73.1917},{"n":"Maumelle","c":"United States","y":34.8522,"x":-92.4},{"n":"Tremedal","c":"Brazil","y":-14.9758,"x":-41.4108},{"n":"Santo Antonio do Leverger","c":"Brazil","y":-15.8658,"x":-56.0769},{"n":"Lavasan","c":"Iran","y":35.8231,"x":51.6242},{"n":"Bad Segeberg","c":"Germany","y":53.9356,"x":10.3089},{"n":"Parchim","c":"Germany","y":53.4167,"x":11.8333},{"n":"Benavente","c":"Spain","y":42.0031,"x":-5.6742},{"n":"Itacarambi","c":"Brazil","y":-15.1019,"x":-44.0919},{"n":"Monthey","c":"Switzerland","y":46.25,"x":6.95},{"n":"Hranice","c":"Czechia","y":49.548,"x":17.7347},{"n":"Pratteln","c":"Switzerland","y":47.5185,"x":7.6928},{"n":"Avtury","c":"Russia","y":43.1667,"x":46},{"n":"Sint-Oedenrode","c":"Netherlands","y":51.5636,"x":5.4608},{"n":"Beruri","c":"Brazil","y":-3.9022,"x":-61.3714},{"n":"Central","c":"Brazil","y":-11.1542,"x":-42.0814},{"n":"Vestby","c":"Norway","y":59.575,"x":10.7319},{"n":"Morro da Fumaca","c":"Brazil","y":-28.6508,"x":-49.21},{"n":"Menomonie","c":"United States","y":44.8893,"x":-91.9084},{"n":"Croata","c":"Brazil","y":-4.4,"x":-40.9108},{"n":"Bathurst","c":"Canada","y":47.62,"x":-65.65},{"n":"Sao Caetano de Odivelas","c":"Brazil","y":-0.75,"x":-48.02},{"n":"Southeast","c":"United States","y":41.4032,"x":-73.5985},{"n":"Tapaua","c":"Brazil","y":-5.6278,"x":-63.1828},{"n":"Paraibuna","c":"Brazil","y":-23.3861,"x":-45.6622},{"n":"Calenzano","c":"Italy","y":43.8567,"x":11.1636},{"n":"Bexbach","c":"Germany","y":49.3494,"x":7.2594},{"n":"Saint-Augustin-de-Desmaures","c":"Canada","y":46.7333,"x":-71.4667},{"n":"Wheatfield","c":"United States","y":43.0975,"x":-78.8831},{"n":"Solonopole","c":"Brazil","y":-5.7328,"x":-39.0078},{"n":"Feyzabad","c":"Iran","y":35.0144,"x":58.78},{"n":"Matelandia","c":"Brazil","y":-25.2408,"x":-53.9958},{"n":"Atalaia do Norte","c":"Brazil","y":-4.3719,"x":-70.1919},{"n":"Lagoa Formosa","c":"Brazil","y":-18.7789,"x":-46.4078},{"n":"Rutland","c":"United States","y":43.6091,"x":-72.9782},{"n":"Bloemhof","c":"South Africa","y":-27.65,"x":25.59},{"n":"Marcon","c":"Italy","y":45.5543,"x":12.2994},{"n":"Maranello","c":"Italy","y":44.5256,"x":10.8664},{"n":"Coronda","c":"Argentina","y":-31.9667,"x":-60.9167},{"n":"Ghouazi","c":"Morocco","y":34.4667,"x":-5.3},{"n":"Sona","c":"Italy","y":45.4333,"x":10.8333},{"n":"Imperial","c":"United States","y":32.839,"x":-115.5719},{"n":"Matigou","c":"China","y":37.6043,"x":109.9024},{"n":"Mengjiacun","c":"China","y":40.0186,"x":119.7878},{"n":"Otsego","c":"United States","y":45.266,"x":-93.62},{"n":"Madeley","c":"United Kingdom","y":52.637,"x":-2.448},{"n":"Pescantina","c":"Italy","y":45.4833,"x":10.8667},{"n":"St. Matthews","c":"United States","y":38.2497,"x":-85.6383},{"n":"Dizicheh","c":"Iran","y":32.3833,"x":51.5147},{"n":"Round Lake","c":"United States","y":42.3435,"x":-88.1058},{"n":"General Juan Madariaga","c":"Argentina","y":-37.0167,"x":-57.1333},{"n":"Quanzhang","c":"China","y":35.6613,"x":111.1049},{"n":"Oak Bay","c":"Canada","y":48.4264,"x":-123.3228},{"n":"Heidenau","c":"Germany","y":50.9833,"x":13.8667},{"n":"Piacabucu","c":"Brazil","y":-10.4086,"x":-36.4339},{"n":"Freilassing","c":"Germany","y":47.8333,"x":12.9667},{"n":"Oxon Hill","c":"United States","y":38.7887,"x":-76.9733},{"n":"Pastos Bons","c":"Brazil","y":-6.6019,"x":-44.0769},{"n":"Malacky","c":"Slovakia","y":48.4381,"x":17.0236},{"n":"Rypin","c":"Poland","y":53.0667,"x":19.45},{"n":"Beeville","c":"United States","y":28.4059,"x":-97.7494},{"n":"Sebaste","c":"Philippines","y":11.5901,"x":122.0945},{"n":"Tublay","c":"Philippines","y":16.5167,"x":120.6167},{"n":"North Wilkesboro","c":"United States","y":36.1728,"x":-81.139},{"n":"Freudenberg","c":"Germany","y":50.8997,"x":7.8667},{"n":"Yupiltepeque","c":"Guatemala","y":14.1941,"x":-89.7913},{"n":"Goffstown","c":"United States","y":43.019,"x":-71.5681},{"n":"Duero","c":"Philippines","y":9.7167,"x":124.4},{"n":"North Aurora","c":"United States","y":41.8083,"x":-88.3413},{"n":"Hijuelas","c":"Chile","y":-32.8,"x":-71.1667},{"n":"Lithia Springs","c":"United States","y":33.781,"x":-84.6485},{"n":"Tall `Aran","c":"Syria","y":36.1231,"x":37.3369},{"n":"Northallerton","c":"United Kingdom","y":54.3378,"x":-1.4285},{"n":"Sorrento","c":"Italy","y":40.6278,"x":14.3736},{"n":"Bon Air","c":"United States","y":37.5187,"x":-77.5713},{"n":"Mirangaba","c":"Brazil","y":-10.9539,"x":-40.5758},{"n":"Almolonga","c":"Guatemala","y":14.8122,"x":-91.4944},{"n":"Bensenville","c":"United States","y":41.9593,"x":-87.9433},{"n":"Balilihan","c":"Philippines","y":9.75,"x":123.9667},{"n":"Sinzig","c":"Germany","y":50.5453,"x":7.2519},{"n":"Eastlake","c":"United States","y":41.6581,"x":-81.4323},{"n":"Beaver Dam","c":"United States","y":43.469,"x":-88.8308},{"n":"Muhradah","c":"Syria","y":35.2478,"x":36.5725},{"n":"Kelsterbach","c":"Germany","y":50.0688,"x":8.5301},{"n":"Nauen","c":"Germany","y":52.6,"x":12.8831},{"n":"Qal`ah-ye Zal","c":"Afghanistan","y":37.015,"x":68.4672},{"n":"Itabera","c":"Brazil","y":-23.8619,"x":-49.1372},{"n":"Rio Pomba","c":"Brazil","y":-21.275,"x":-43.1789},{"n":"Marcos","c":"Philippines","y":18.05,"x":120.6833},{"n":"Safety Harbor","c":"United States","y":28.008,"x":-82.6964},{"n":"Mattoon","c":"United States","y":39.4775,"x":-88.3624},{"n":"Port-de-Bouc","c":"France","y":43.405,"x":4.9886},{"n":"Neftegorsk","c":"Russia","y":52.8,"x":51.1667},{"n":"Canapi","c":"Brazil","y":-9.1269,"x":-37.605},{"n":"Colne","c":"United Kingdom","y":53.8554,"x":-2.1756},{"n":"Ginsheim-Gustavsburg","c":"Germany","y":49.9646,"x":8.3464},{"n":"Requena","c":"Peru","y":-5.0569,"x":-73.8515},{"n":"General Deheza","c":"Argentina","y":-32.7564,"x":-63.7889},{"n":"Waalre","c":"Netherlands","y":51.3867,"x":5.4456},{"n":"Macomb","c":"United States","y":40.4721,"x":-90.6816},{"n":"Munguia","c":"Spain","y":43.3547,"x":-2.8472},{"n":"North Druid Hills","c":"United States","y":33.8186,"x":-84.3254},{"n":"Baronissi","c":"Italy","y":40.75,"x":14.78},{"n":"West Columbia","c":"United States","y":33.9931,"x":-81.0932},{"n":"Arco","c":"Italy","y":45.9167,"x":10.8833},{"n":"Oborniki","c":"Poland","y":52.65,"x":16.8167},{"n":"Mirante do Paranapanema","c":"Brazil","y":-22.2919,"x":-51.9064},{"n":"Regeneracao","c":"Brazil","y":-6.2378,"x":-42.6878},{"n":"Messias","c":"Brazil","y":-9.3828,"x":-35.8419},{"n":"Mosbrough","c":"United Kingdom","y":53.325,"x":-1.362},{"n":"Sunland Park","c":"United States","y":31.8194,"x":-106.5943},{"n":"Sabana de Torres","c":"Colombia","y":7.3903,"x":-73.5003},{"n":"Ribat Al Khayr","c":"Morocco","y":33.8184,"x":-4.4106},{"n":"Chateauneuf-les-Martigues","c":"France","y":43.3831,"x":5.1642},{"n":"Puurs","c":"Belgium","y":51.0761,"x":4.2803},{"n":"Kharabali","c":"Russia","y":47.4,"x":47.25},{"n":"Isola Capo Rizzuto","c":"Italy","y":38.9667,"x":17.1},{"n":"Miedzyrzec Podlaski","c":"Poland","y":51.9833,"x":22.8},{"n":"Estelle","c":"United States","y":29.8447,"x":-90.1021},{"n":"Antenor Navarro","c":"Brazil","y":-6.7289,"x":-38.4489},{"n":"Po","c":"Burkina Faso","y":11.1667,"x":-1.15},{"n":"Melfi","c":"Italy","y":40.9964,"x":15.6558},{"n":"Ibirataia","c":"Brazil","y":-14.0669,"x":-39.6408},{"n":"Manzanares","c":"Spain","y":38.9964,"x":-3.3731},{"n":"San Carlos Park","c":"United States","y":26.4765,"x":-81.8193},{"n":"Pelaya","c":"Colombia","y":8.6892,"x":-73.6653},{"n":"Daimiel","c":"Spain","y":39.0833,"x":-3.6167},{"n":"San Teodoro","c":"Philippines","y":13.4358,"x":121.0192},{"n":"Policoro","c":"Italy","y":40.2,"x":16.6667},{"n":"Illertissen","c":"Germany","y":48.2167,"x":10.0833},{"n":"Al Qbab","c":"Morocco","y":32.7419,"x":-5.5231},{"n":"Rockland","c":"United States","y":42.1295,"x":-70.91},{"n":"Gaoniang","c":"China","y":26.8394,"x":109.177},{"n":"Kreuzau","c":"Germany","y":50.747,"x":6.4907},{"n":"Frankenberg","c":"Germany","y":51.0589,"x":8.7967},{"n":"Zachary","c":"United States","y":30.6642,"x":-91.1634},{"n":"Kingsland","c":"United States","y":30.8194,"x":-81.7217},{"n":"Zapotlan del Rey","c":"Mexico","y":20.4674,"x":-102.9248},{"n":"Marco Island","c":"United States","y":25.933,"x":-81.6993},{"n":"L'Isle-d'Abeau","c":"France","y":45.6194,"x":5.2331},{"n":"Union de San Antonio","c":"Mexico","y":21.1272,"x":-102.0061},{"n":"Juazeirinho","c":"Brazil","y":-7.0678,"x":-36.5778},{"n":"Ingleside","c":"United States","y":27.87,"x":-97.2077},{"n":"Humacao","c":"Puerto Rico","y":18.1519,"x":-65.8204},{"n":"Whitemarsh","c":"United States","y":40.104,"x":-75.2483},{"n":"Tricase","c":"Italy","y":39.9333,"x":18.3667},{"n":"Weilerswist","c":"Germany","y":50.7525,"x":6.8378},{"n":"Buchen in Odenwald","c":"Germany","y":49.5217,"x":9.3233},{"n":"Marmande","c":"France","y":44.5,"x":0.1653},{"n":"Guapiara","c":"Brazil","y":-24.185,"x":-48.5328},{"n":"Monselice","c":"Italy","y":45.2333,"x":11.75},{"n":"Conceicao do Mato Dentro","c":"Brazil","y":-19.0369,"x":-43.425},{"n":"Ustka","c":"Poland","y":54.5805,"x":16.8619},{"n":"Wantagh","c":"United States","y":40.6686,"x":-73.5104},{"n":"Kirsanov","c":"Russia","y":52.65,"x":42.7333},{"n":"Sibutao","c":"Philippines","y":8.6,"x":123.4667},{"n":"Golitsyno","c":"Russia","y":55.6147,"x":36.9872},{"n":"Lenoir","c":"United States","y":35.9096,"x":-81.5247},{"n":"Yaguachi Nuevo","c":"Ecuador","y":-2.12,"x":-79.69},{"n":"Zlotoryja","c":"Poland","y":51.1264,"x":15.9198},{"n":"Anadia","c":"Brazil","y":-9.6844,"x":-36.3042},{"n":"Ommen","c":"Netherlands","y":52.5167,"x":6.4167},{"n":"Nguigmi","c":"Niger","y":14.2532,"x":13.1108},{"n":"Galich","c":"Russia","y":58.3833,"x":42.35},{"n":"Serafina Corea","c":"Brazil","y":-28.7119,"x":-51.935},{"n":"Yuanquan","c":"China","y":40.5004,"x":95.8},{"n":"Upton","c":"United Kingdom","y":53.385,"x":-3.099},{"n":"Porto San Giorgio","c":"Italy","y":43.1848,"x":13.7955},{"n":"San Bartolo Tutotepec","c":"Mexico","y":20.4,"x":-98.2},{"n":"Perry","c":"United States","y":32.4719,"x":-83.7282},{"n":"Saint Ives","c":"United Kingdom","y":52.3344,"x":-0.0761},{"n":"Siruma","c":"Philippines","y":14,"x":123.25},{"n":"Hannibal","c":"United States","y":39.7097,"x":-91.3939},{"n":"Holzwickede","c":"Germany","y":51.5,"x":7.6167},{"n":"Gikongoro","c":"Rwanda","y":-2.4697,"x":29.5814},{"n":"Douar Oulad Mbarek","c":"Morocco","y":34.2833,"x":-4.3167},{"n":"Jacupiranga","c":"Brazil","y":-24.6925,"x":-48.0022},{"n":"Jaguaretama","c":"Brazil","y":-5.6128,"x":-38.7669},{"n":"Menasha","c":"United States","y":44.2124,"x":-88.4272},{"n":"Pontalina","c":"Brazil","y":-17.5258,"x":-49.4489},{"n":"Oak Grove","c":"United States","y":45.4156,"x":-122.6349},{"n":"Schwarzenbek","c":"Germany","y":53.5042,"x":10.4792},{"n":"Scarsdale","c":"United States","y":40.9902,"x":-73.7773},{"n":"Alton","c":"United Kingdom","y":51.1498,"x":-0.9769},{"n":"Braunstone","c":"United Kingdom","y":52.616,"x":-1.175},{"n":"Brenham","c":"United States","y":30.1585,"x":-96.3964},{"n":"Ocean Springs","c":"United States","y":30.4082,"x":-88.7861},{"n":"Woodcrest","c":"United States","y":33.8789,"x":-117.3686},{"n":"Libjo","c":"Philippines","y":10.196,"x":125.5328},{"n":"Wadgassen","c":"Germany","y":49.2667,"x":6.7833},{"n":"Carlentini","c":"Italy","y":37.2833,"x":15.0167},{"n":"White Settlement","c":"United States","y":32.7554,"x":-97.4605},{"n":"High Blantyre","c":"United Kingdom","y":55.793,"x":-4.097},{"n":"Cesson-Sevigne","c":"France","y":48.1208,"x":-1.6036},{"n":"Kukmor","c":"Russia","y":56.1825,"x":50.9064},{"n":"Nazare Paulista","c":"Brazil","y":-23.1808,"x":-46.395},{"n":"Schwalbach","c":"Germany","y":49.2833,"x":6.8167},{"n":"Salgar","c":"Colombia","y":5.9639,"x":-75.9775},{"n":"Cerro Azul","c":"Brazil","y":-24.8239,"x":-49.2608},{"n":"Kongsvinger","c":"Norway","y":60.1912,"x":11.9992},{"n":"Mitake","c":"Japan","y":35.4167,"x":137.1333},{"n":"Five Forks","c":"United States","y":34.8069,"x":-82.2271},{"n":"Belterra","c":"Brazil","y":-2.6358,"x":-54.9369},{"n":"Knightdale","c":"United States","y":35.7918,"x":-78.4955},{"n":"Orta Nova","c":"Italy","y":41.3308,"x":15.7114},{"n":"Forio","c":"Italy","y":40.7333,"x":13.85},{"n":"Ada","c":"United States","y":34.7683,"x":-96.6689},{"n":"Salonta","c":"Romania","y":46.8,"x":21.65},{"n":"Broken Hill","c":"Australia","y":-31.9567,"x":141.4678},{"n":"Miaojiaping","c":"China","y":37.5777,"x":110.0658},{"n":"Madamba","c":"Philippines","y":7.8833,"x":124.0667},{"n":"Sobinka","c":"Russia","y":55.99,"x":40.0167},{"n":"Orsay","c":"France","y":48.6981,"x":2.1875},{"n":"Naarden","c":"Netherlands","y":52.2953,"x":5.1622},{"n":"Zhongguyue","c":"China","y":38.2833,"x":113.867},{"n":"Crossville","c":"United States","y":35.9527,"x":-85.0294},{"n":"Yutz","c":"France","y":49.3589,"x":6.1886},{"n":"Yanggezhuang","c":"China","y":39.3831,"x":118.7119},{"n":"Sleaford","c":"United Kingdom","y":52.996,"x":-0.413},{"n":"Bad Sackingen","c":"Germany","y":47.5533,"x":7.9472},{"n":"Sao Benedito do Rio Preto","c":"Brazil","y":-3.3339,"x":-43.5278},{"n":"Oerlinghausen","c":"Germany","y":51.9667,"x":8.6667},{"n":"Sapeacu","c":"Brazil","y":-12.7278,"x":-39.1819},{"n":"Pontarlier","c":"France","y":46.9061,"x":6.3547},{"n":"Beltsville","c":"United States","y":39.0394,"x":-76.9211},{"n":"Hlybokaye","c":"Belarus","y":55.1333,"x":27.6833},{"n":"Sangenjo","c":"Spain","y":42.4017,"x":-8.8067},{"n":"Pirapora do Bom Jesus","c":"Brazil","y":-23.3972,"x":-47.0028},{"n":"San Felipe","c":"Guatemala","y":14.6206,"x":-91.5961},{"n":"Nao-Me-Toque","c":"Brazil","y":-28.4592,"x":-52.8208},{"n":"Lac","c":"Albania","y":41.6353,"x":19.7131},{"n":"Latsia","c":"Cyprus","y":35.0968,"x":33.3773},{"n":"Shangjing","c":"China","y":24.6011,"x":114.9898},{"n":"Santa Elena","c":"Argentina","y":-30.95,"x":-59.8},{"n":"Colonia","c":"United States","y":40.5929,"x":-74.3151},{"n":"Outat Oulad Al Haj","c":"Morocco","y":33.3456,"x":-3.6939},{"n":"Ruhango","c":"Rwanda","y":-2.2325,"x":29.7803},{"n":"Grenchen","c":"Switzerland","y":47.1931,"x":7.3958},{"n":"Guisborough","c":"United Kingdom","y":54.535,"x":-1.0563},{"n":"Portchester","c":"United Kingdom","y":50.842,"x":-1.12},{"n":"Presidente Getulio","c":"Brazil","y":-27.0508,"x":-49.6228},{"n":"Moraga","c":"United States","y":37.8439,"x":-122.1225},{"n":"Beni Fouda","c":"Algeria","y":36.2861,"x":5.6071},{"n":"Balaguer","c":"Spain","y":41.7904,"x":0.8056},{"n":"Minquan","c":"China","y":37.442,"x":103.3811},{"n":"Zaslawye","c":"Belarus","y":54,"x":27.2833},{"n":"Cairu","c":"Brazil","y":-13.4869,"x":-39.0439},{"n":"San Agustin Chahal","c":"Guatemala","y":15.75,"x":-89.5667},{"n":"Ban Song","c":"Thailand","y":8.6603,"x":99.3768},{"n":"Cassia","c":"Brazil","y":-20.5828,"x":-46.9219},{"n":"Pouso Redondo","c":"Brazil","y":-27.2578,"x":-49.9339},{"n":"Midway","c":"United States","y":30.4138,"x":-87.0261},{"n":"Zongo","c":"Congo (Kinshasa)","y":4.35,"x":18.6},{"n":"Banora Point","c":"Australia","y":-28.2225,"x":153.5386},{"n":"Steubenville","c":"United States","y":40.3653,"x":-80.652},{"n":"Dingjiagouxiang","c":"China","y":35.5307,"x":105.0207},{"n":"Glen Parva","c":"United Kingdom","y":52.5867,"x":-1.1617},{"n":"Fiorano Modenese","c":"Italy","y":44.5392,"x":10.8117},{"n":"Newmarket","c":"United Kingdom","y":52.2459,"x":0.4105},{"n":"Tavares","c":"United States","y":28.7921,"x":-81.7353},{"n":"Duijiang","c":"China","y":27.0782,"x":105.5256},{"n":"Ngara","c":"Tanzania","y":-2.4695,"x":30.65},{"n":"El Roble","c":"Costa Rica","y":9.9771,"x":-84.7443},{"n":"Belgrade","c":"United States","y":45.7796,"x":-111.1751},{"n":"Sierre","c":"Switzerland","y":46.2918,"x":7.532},{"n":"Cipo","c":"Brazil","y":-11.1,"x":-38.5169},{"n":"Popovo","c":"Bulgaria","y":43.3481,"x":26.2275},{"n":"Ban Pong","c":"Thailand","y":13.8174,"x":99.883},{"n":"Lousa","c":"Portugal","y":40.1125,"x":-8.2469},{"n":"Thornton","c":"United Kingdom","y":53.7898,"x":-1.8504},{"n":"Foxborough","c":"United States","y":42.0627,"x":-71.2461},{"n":"Bilar","c":"Philippines","y":9.7,"x":124.1},{"n":"Tanque Novo","c":"Brazil","y":-13.5458,"x":-42.4908},{"n":"Laatatra","c":"Morocco","y":32.6314,"x":-8.4147},{"n":"Lackawanna","c":"United States","y":42.8182,"x":-78.8326},{"n":"Tizi Rached","c":"Algeria","y":36.6718,"x":4.1918},{"n":"Melville","c":"United States","y":40.7823,"x":-73.4088},{"n":"Verdun","c":"France","y":49.1597,"x":5.3828},{"n":"Boqueirao","c":"Brazil","y":-7.4819,"x":-36.135},{"n":"Wailuku","c":"United States","y":20.8834,"x":-156.5059},{"n":"Buckhall","c":"United States","y":38.725,"x":-77.4472},{"n":"El Dorado","c":"United States","y":33.2184,"x":-92.664},{"n":"Salmon Arm","c":"Canada","y":50.7022,"x":-119.2722},{"n":"Alcochete","c":"Portugal","y":38.7553,"x":-8.9608},{"n":"South Hadley","c":"United States","y":42.2567,"x":-72.5793},{"n":"Ashton","c":"New Zealand","y":-44.033,"x":171.772},{"n":"Tlahuelilpan","c":"Mexico","y":20.1297,"x":-99.2286},{"n":"Fleron","c":"Belgium","y":50.6167,"x":5.6833},{"n":"Bailen","c":"Spain","y":38.0833,"x":-3.7667},{"n":"Preganziol","c":"Italy","y":45.6,"x":12.2333},{"n":"Port Alberni","c":"Canada","y":49.2339,"x":-124.805},{"n":"Pisticci","c":"Italy","y":40.3833,"x":16.55},{"n":"Verneuil-sur-Seine","c":"France","y":48.9797,"x":1.9739},{"n":"Santos Reyes Nopala","c":"Mexico","y":16.1,"x":-97.15},{"n":"Novo Airao","c":"Brazil","y":-2.6208,"x":-60.9439},{"n":"Ribeirao Branco","c":"Brazil","y":-24.2208,"x":-48.7658},{"n":"Ban Phe","c":"Thailand","y":12.6287,"x":101.4399},{"n":"Greene","c":"United States","y":39.9543,"x":-77.5668},{"n":"Pianoro","c":"Italy","y":44.3833,"x":11.3333},{"n":"Sipacapa","c":"Guatemala","y":15.2128,"x":-91.6342},{"n":"Nerang","c":"Australia","y":-27.9956,"x":153.322},{"n":"Valle Vista","c":"United States","y":33.7436,"x":-116.8872},{"n":"Bitam","c":"Gabon","y":2.0833,"x":11.4833},{"n":"Qal'at Mgouna","c":"Morocco","y":31.2414,"x":-6.1283},{"n":"Ait Majdane","c":"Morocco","y":31.8514,"x":-6.9658},{"n":"San Alejo","c":"El Salvador","y":13.4333,"x":-87.9667},{"n":"Albert Lea","c":"United States","y":43.6547,"x":-93.3642},{"n":"Polyarnyy","c":"Russia","y":69.1983,"x":33.4561},{"n":"Sao Paulo do Potengi","c":"Brazil","y":-5.895,"x":-35.7628},{"n":"Maitland","c":"United States","y":28.6295,"x":-81.3717},{"n":"Osuna","c":"Spain","y":37.2333,"x":-5.1},{"n":"Guidan Roumdji","c":"Niger","y":13.6575,"x":6.6958},{"n":"Gretna","c":"United States","y":29.9101,"x":-90.0515},{"n":"Inza","c":"Russia","y":53.85,"x":46.35},{"n":"Hatfield","c":"United States","y":40.2758,"x":-75.2895},{"n":"Arauco","c":"Chile","y":-37.2463,"x":-73.3175},{"n":"Totutla","c":"Mexico","y":19.2167,"x":-96.9667},{"n":"Bendorf","c":"Germany","y":50.4297,"x":7.5703},{"n":"Tarrega","c":"Spain","y":41.6464,"x":1.1394},{"n":"Milanowek","c":"Poland","y":52.1243,"x":20.6654},{"n":"Sinnai","c":"Italy","y":39.3026,"x":9.2031},{"n":"Chedaopo","c":"China","y":36.4008,"x":106.7353},{"n":"Hinsdale","c":"United States","y":41.8005,"x":-87.9273},{"n":"Rocca di Papa","c":"Italy","y":41.7667,"x":12.7167},{"n":"Ain Zaouia","c":"Algeria","y":36.5483,"x":3.8942},{"n":"Tougan","c":"Burkina Faso","y":13.0667,"x":-3.0667},{"n":"Seara","c":"Brazil","y":-27.1489,"x":-52.3108},{"n":"Santa Fe Springs","c":"United States","y":33.933,"x":-118.0625},{"n":"Bilina","c":"Czechia","y":50.5486,"x":13.7754},{"n":"Magalhaes de Almeida","c":"Brazil","y":-3.3958,"x":-42.2039},{"n":"Bad Munder am Deister","c":"Germany","y":52.1992,"x":9.4653},{"n":"Bethpage","c":"United States","y":40.7495,"x":-73.4856},{"n":"La Primavera","c":"Colombia","y":5.4906,"x":-70.4092},{"n":"Awlouz","c":"Morocco","y":30.7,"x":-8.15},{"n":"East Massapequa","c":"United States","y":40.6743,"x":-73.4358},{"n":"Plainville","c":"United States","y":41.6741,"x":-72.8575},{"n":"Amarante","c":"Brazil","y":-6.2408,"x":-42.855},{"n":"Same","c":"Tanzania","y":-4.0696,"x":37.72},{"n":"Scordia","c":"Italy","y":37.3,"x":14.85},{"n":"Filadelfia","c":"Brazil","y":-10.7408,"x":-40.1328},{"n":"Brignoles","c":"France","y":43.4058,"x":6.0617},{"n":"Catriel","c":"Argentina","y":-37.8778,"x":-67.7917},{"n":"Wendlingen am Neckar","c":"Germany","y":48.6747,"x":9.3817},{"n":"Blooming Grove","c":"United States","y":41.3948,"x":-74.184},{"n":"Tabernes de Valldigna","c":"Spain","y":39.0722,"x":-0.2658},{"n":"Zaysan","c":"Kazakhstan","y":47.4688,"x":84.8646},{"n":"Kirksville","c":"United States","y":40.1986,"x":-92.5753},{"n":"Nipomo","c":"United States","y":35.0323,"x":-120.4991},{"n":"Nova Era","c":"Brazil","y":-19.7606,"x":-43.0289},{"n":"Hopkinton","c":"United States","y":42.2255,"x":-71.5378},{"n":"Afranio","c":"Brazil","y":-8.5,"x":-41},{"n":"As Suqaylibiyah","c":"Syria","y":35.3697,"x":36.38},{"n":"San Giovanni Valdarno","c":"Italy","y":43.5644,"x":11.5328},{"n":"Bad Langensalza","c":"Germany","y":51.1081,"x":10.6467},{"n":"Gorham","c":"United States","y":43.7034,"x":-70.4581},{"n":"Rubano","c":"Italy","y":45.4333,"x":11.7833},{"n":"Raunheim","c":"Germany","y":50.0097,"x":8.45},{"n":"Neerpelt","c":"Belgium","y":51.2278,"x":5.4422},{"n":"Butner","c":"United States","y":36.1285,"x":-78.7502},{"n":"Cortes","c":"Philippines","y":9.7167,"x":123.8833},{"n":"Boulsa","c":"Burkina Faso","y":12.6667,"x":-0.5833},{"n":"Feilding","c":"New Zealand","y":-40.225,"x":175.565},{"n":"Sahel","c":"Morocco","y":34.9667,"x":-4.55},{"n":"Poyo","c":"Spain","y":42.4333,"x":-8.6667},{"n":"Thale","c":"Germany","y":51.7511,"x":11.0428},{"n":"Mayorga","c":"Philippines","y":10.9,"x":125},{"n":"Marktredwitz","c":"Germany","y":50,"x":12.0667},{"n":"Sanary-sur-Mer","c":"France","y":43.1192,"x":5.8022},{"n":"Chirpan","c":"Bulgaria","y":42.1981,"x":25.3304},{"n":"Tillmans Corner","c":"United States","y":30.5818,"x":-88.2128},{"n":"Sedeh Lanjan","c":"Iran","y":32.3778,"x":51.3181},{"n":"Tabarka","c":"Tunisia","y":36.955,"x":8.755},{"n":"Fanipal'","c":"Belarus","y":53.75,"x":27.3333},{"n":"Pecanha","c":"Brazil","y":-18.5489,"x":-42.5569},{"n":"La Garriga","c":"Spain","y":41.6804,"x":2.2833},{"n":"Alotenango","c":"Guatemala","y":14.4878,"x":-90.8058},{"n":"Upper Grand Lagoon","c":"United States","y":30.169,"x":-85.7407},{"n":"Haslemere","c":"United Kingdom","y":51.09,"x":-0.712},{"n":"Anoka","c":"United States","y":45.2099,"x":-93.3893},{"n":"Ismaning","c":"Germany","y":48.2264,"x":11.6725},{"n":"Remagen","c":"Germany","y":50.5786,"x":7.2306},{"n":"Hoganas","c":"Sweden","y":56.196,"x":12.5769},{"n":"Terra Roxa d'Oeste","c":"Brazil","y":-24.1569,"x":-54.0969},{"n":"Castelfiorentino","c":"Italy","y":43.6108,"x":10.97},{"n":"Bobingen","c":"Germany","y":48.2667,"x":10.8167},{"n":"Bailesti","c":"Romania","y":44.0308,"x":23.3525},{"n":"Miramichi","c":"Canada","y":47.0196,"x":-65.5072},{"n":"Adelfia","c":"Italy","y":41,"x":16.8667},{"n":"Amesbury","c":"United States","y":42.853,"x":-70.9446},{"n":"Plast","c":"Russia","y":54.3667,"x":60.8167},{"n":"Dar Chaifat","c":"Morocco","y":32.55,"x":-7.5},{"n":"Agourai","c":"Morocco","y":33.6333,"x":-5.5833},{"n":"Trossingen","c":"Germany","y":48.0756,"x":8.6361},{"n":"Windlesham","c":"United Kingdom","y":51.36,"x":-0.66},{"n":"Karukh","c":"Afghanistan","y":34.4868,"x":62.5918},{"n":"Tallmadge","c":"United States","y":41.1023,"x":-81.4216},{"n":"Cafelandia","c":"Brazil","y":-21.8025,"x":-49.61},{"n":"Nanuet","c":"United States","y":41.0957,"x":-74.0155},{"n":"Negrar","c":"Italy","y":45.5333,"x":10.9333},{"n":"Balma","c":"France","y":43.6103,"x":1.4986},{"n":"Maryland City","c":"United States","y":39.1016,"x":-76.8051},{"n":"Ketama","c":"Morocco","y":34.9158,"x":-4.5686},{"n":"Son en Breugel","c":"Netherlands","y":51.5158,"x":5.5022},{"n":"Niagara-on-the-Lake","c":"Canada","y":43.2553,"x":-79.0717},{"n":"Krasnokumskoye","c":"Russia","y":44.1778,"x":43.5},{"n":"Vero Beach","c":"United States","y":27.6463,"x":-80.393},{"n":"Ziracuaretiro","c":"Mexico","y":19.4189,"x":-101.9088},{"n":"Berga","c":"Spain","y":42.1,"x":1.8456},{"n":"Clemson","c":"United States","y":34.6837,"x":-82.8124},{"n":"Pinili","c":"Philippines","y":17.954,"x":120.527},{"n":"Sulzbach","c":"Germany","y":49.3,"x":7.0667},{"n":"Forssa","c":"Finland","y":60.8167,"x":23.6167},{"n":"Karachev","c":"Russia","y":53.1167,"x":34.9833},{"n":"Pomaz","c":"Hungary","y":47.6472,"x":19.0269},{"n":"Spanish Lake","c":"United States","y":38.7884,"x":-90.2078},{"n":"Kadogawa","c":"Japan","y":32.4697,"x":131.6489},{"n":"Suvorov","c":"Russia","y":54.1167,"x":36.5},{"n":"Lewes","c":"United Kingdom","y":50.8756,"x":0.0179},{"n":"Sant'Elpidio a Mare","c":"Italy","y":43.2295,"x":13.6861},{"n":"Lara","c":"Australia","y":-38.0167,"x":144.4167},{"n":"Concorezzo","c":"Italy","y":45.5897,"x":9.3359},{"n":"Pavullo nel Frignano","c":"Italy","y":44.3327,"x":10.8331},{"n":"Sao Raimundo das Mangabeiras","c":"Brazil","y":-7.0219,"x":-45.4808},{"n":"Lake Mary","c":"United States","y":28.7592,"x":-81.3359},{"n":"Vechelde","c":"Germany","y":52.2608,"x":10.3719},{"n":"Jovellar","c":"Philippines","y":13.0667,"x":123.6},{"n":"Horsham","c":"Australia","y":-36.7167,"x":142.2},{"n":"Guaranda","c":"Colombia","y":8.4672,"x":-74.5367},{"n":"Calafat","c":"Romania","y":43.9858,"x":22.9575},{"n":"Volgorechensk","c":"Russia","y":57.4333,"x":41.1667},{"n":"Lakeport","c":"United States","y":39.0392,"x":-122.9218},{"n":"Sigmaringen","c":"Germany","y":48.0867,"x":9.2164},{"n":"Malhada","c":"Brazil","y":-14.3358,"x":-43.7739},{"n":"Saint-Lin--Laurentides","c":"Canada","y":45.85,"x":-73.7667},{"n":"Mori","c":"Japan","y":34.8333,"x":137.9333},{"n":"Knik-Fairview","c":"United States","y":61.4964,"x":-149.6535},{"n":"Galaz","c":"Morocco","y":34.55,"x":-4.8},{"n":"Maruim","c":"Brazil","y":-10.7378,"x":-37.0819},{"n":"Martinsburg","c":"United States","y":39.4582,"x":-77.9776},{"n":"El Rosal","c":"Colombia","y":4.8519,"x":-74.2628},{"n":"Bolhrad","c":"Ukraine","y":45.6855,"x":28.6134},{"n":"Montemor-o-Novo","c":"Portugal","y":38.65,"x":-8.2167},{"n":"Tinton Falls","c":"United States","y":40.2709,"x":-74.0948},{"n":"Pedra Preta","c":"Brazil","y":-16.6228,"x":-54.4739},{"n":"Freienbach","c":"Switzerland","y":47.2047,"x":8.7578},{"n":"Flora","c":"Philippines","y":18.1167,"x":121.4},{"n":"Conchas","c":"Brazil","y":-23.0134,"x":-48.0078},{"n":"Puerto Aysen","c":"Chile","y":-45.4068,"x":-72.6977},{"n":"Stowbtsy","c":"Belarus","y":53.4833,"x":26.7333},{"n":"Nidda","c":"Germany","y":50.4128,"x":9.0092},{"n":"Doylestown","c":"United States","y":40.2962,"x":-75.1393},{"n":"Jenison","c":"United States","y":42.9063,"x":-85.8269},{"n":"Cadoneghe","c":"Italy","y":45.45,"x":11.9333},{"n":"Tapiramuta","c":"Brazil","y":-11.8469,"x":-40.7908},{"n":"Dijiasuoxiang","c":"China","y":35.6871,"x":105.2571},{"n":"La Algaba","c":"Spain","y":37.45,"x":-6},{"n":"Los Alcazares","c":"Spain","y":37.7436,"x":-0.8497},{"n":"Gescher","c":"Germany","y":51.9569,"x":7.0056},{"n":"Raychikhinsk","c":"Russia","y":49.8,"x":129.4},{"n":"Suesca","c":"Colombia","y":5.1017,"x":-73.7981},{"n":"Montalvania","c":"Brazil","y":-14.4228,"x":-44.3658},{"n":"Redland","c":"United States","y":39.1335,"x":-77.1465},{"n":"Bad Munstereifel","c":"Germany","y":50.5531,"x":6.7661},{"n":"Eldorado","c":"Argentina","y":-26.4,"x":-54.6333},{"n":"Gennep","c":"Netherlands","y":51.6942,"x":5.9733},{"n":"Mayoyao","c":"Philippines","y":16.9667,"x":121.2167},{"n":"Nizhnyaya Salda","c":"Russia","y":58.0833,"x":60.7167},{"n":"Godfrey","c":"United States","y":38.9577,"x":-90.2156},{"n":"Pendleton","c":"United States","y":45.6756,"x":-118.8209},{"n":"Kafr Zayta","c":"Syria","y":35.3736,"x":36.6017},{"n":"Beaumont","c":"Canada","y":53.3572,"x":-113.4147},{"n":"Zandvoort","c":"Netherlands","y":52.3667,"x":4.5333},{"n":"Betulia","c":"Colombia","y":6.1122,"x":-75.9839},{"n":"Rattaphum","c":"Thailand","y":7.1412,"x":100.2905},{"n":"Eutin","c":"Germany","y":54.1378,"x":10.6181},{"n":"Santo Antonio do Amparo","c":"Brazil","y":-20.9458,"x":-44.9189},{"n":"Sao Domingos do Prata","c":"Brazil","y":-19.865,"x":-42.9678},{"n":"Pecan Grove","c":"United States","y":29.6235,"x":-95.7331},{"n":"Heilbad Heiligenstadt","c":"Germany","y":51.3775,"x":10.1344},{"n":"Biggleswade","c":"United Kingdom","y":52.0855,"x":-0.2557},{"n":"Milla'ab","c":"Morocco","y":31.5319,"x":-4.8061},{"n":"Ripon","c":"United Kingdom","y":54.138,"x":-1.524},{"n":"Dazhangzi","c":"China","y":40.6239,"x":118.1081},{"n":"Nederland","c":"United States","y":29.9707,"x":-94.0015},{"n":"Colonial Heights","c":"United States","y":37.265,"x":-77.3969},{"n":"Horn-Bad Meinberg","c":"Germany","y":51.8833,"x":8.9667},{"n":"Stockerau","c":"Austria","y":48.3858,"x":16.2108},{"n":"Ayacucho","c":"Argentina","y":-37.1525,"x":-58.4882},{"n":"Wohlen","c":"Switzerland","y":47.3506,"x":8.2778},{"n":"Morriston","c":"United Kingdom","y":51.6647,"x":-3.9389},{"n":"Porto Empedocle","c":"Italy","y":37.2944,"x":13.5272},{"n":"Stockach","c":"Germany","y":47.8514,"x":9.0114},{"n":"Krasnoslobodsk","c":"Russia","y":48.7,"x":44.5667},{"n":"Bermeo","c":"Spain","y":43.42,"x":-2.7264},{"n":"Willimantic","c":"United States","y":41.7153,"x":-72.2173},{"n":"G`uzor","c":"Uzbekistan","y":38.6208,"x":66.2481},{"n":"Mount Barker","c":"Australia","y":-35.0667,"x":138.85},{"n":"Wittenberge","c":"Germany","y":52.9936,"x":11.7514},{"n":"Saviano","c":"Italy","y":40.9167,"x":14.5167},{"n":"Souto Soares","c":"Brazil","y":-12.0889,"x":-41.6378},{"n":"Ban Thung Tam Sao","c":"Thailand","y":6.9581,"x":100.3207},{"n":"Shumikha","c":"Russia","y":55.2333,"x":63.2833},{"n":"Gussago","c":"Italy","y":45.6,"x":10.15},{"n":"Harborcreek","c":"United States","y":42.1498,"x":-79.9501},{"n":"Finnentrop","c":"Germany","y":51.1731,"x":7.9725},{"n":"Barbastro","c":"Spain","y":42.0361,"x":0.1264},{"n":"Schrobenhausen","c":"Germany","y":48.5669,"x":11.2583},{"n":"Ocean Acres","c":"United States","y":39.743,"x":-74.2804},{"n":"Tapes","c":"Brazil","y":-30.6728,"x":-51.3958},{"n":"San Casciano in Val di Pesa","c":"Italy","y":43.6569,"x":11.1858},{"n":"Burgdorf","c":"Switzerland","y":47.0567,"x":7.6264},{"n":"Leczyca","c":"Poland","y":52.0583,"x":19.2},{"n":"Tumbao","c":"Philippines","y":7.1167,"x":124.3833},{"n":"Pisaflores","c":"Mexico","y":21.1933,"x":-99.005},{"n":"Faxinal","c":"Brazil","y":-24.0008,"x":-51.32},{"n":"Urandi","c":"Brazil","y":-14.7708,"x":-42.655},{"n":"Guben","c":"Germany","y":51.9533,"x":14.7167},{"n":"Handlova","c":"Slovakia","y":48.7272,"x":18.7619},{"n":"La Marque","c":"United States","y":29.369,"x":-94.9957},{"n":"Svalyava","c":"Ukraine","y":48.5472,"x":22.9861},{"n":"Peso da Regua","c":"Portugal","y":41.1632,"x":-7.789},{"n":"Konigstein im Taunus","c":"Germany","y":50.1831,"x":8.4635},{"n":"Lattes","c":"France","y":43.5678,"x":3.9021},{"n":"Sawankhalok","c":"Thailand","y":17.3099,"x":99.8263},{"n":"Cosautlan","c":"Mexico","y":19.3333,"x":-96.9833},{"n":"Carmopolis","c":"Brazil","y":-10.6478,"x":-36.9889},{"n":"Braunau am Inn","c":"Austria","y":48.2583,"x":13.0333},{"n":"Altena","c":"Germany","y":51.3,"x":7.6667},{"n":"Colchester","c":"United States","y":44.5545,"x":-73.2167},{"n":"Heckmondwike","c":"United Kingdom","y":53.708,"x":-1.67},{"n":"Baliangao","c":"Philippines","y":8.6667,"x":123.6},{"n":"Heysham","c":"United Kingdom","y":54.046,"x":-2.894},{"n":"Porto Murtinho","c":"Brazil","y":-21.6989,"x":-57.8828},{"n":"Aubange","c":"Belgium","y":49.5667,"x":5.805},{"n":"Versailles","c":"United States","y":38.0487,"x":-84.7259},{"n":"Campagna","c":"Italy","y":40.6666,"x":15.1064},{"n":"Kamenz","c":"Germany","y":51.2667,"x":14.1},{"n":"Zarumilla","c":"Peru","y":-3.5014,"x":-80.2722},{"n":"Damme","c":"Germany","y":52.5222,"x":8.1956},{"n":"Lemont","c":"United States","y":41.6695,"x":-87.9836},{"n":"Vera","c":"Spain","y":37.25,"x":-1.8667},{"n":"Cervantes","c":"Philippines","y":16.9917,"x":120.7333},{"n":"Bucay","c":"Philippines","y":17.5388,"x":120.7167},{"n":"Kangaba","c":"Mali","y":11.9333,"x":-8.4167},{"n":"Sayre","c":"United States","y":41.9855,"x":-76.5207},{"n":"Carovigno","c":"Italy","y":40.7072,"x":17.6594},{"n":"Giffnock","c":"United Kingdom","y":55.8051,"x":-4.2946},{"n":"Bad Wildungen","c":"Germany","y":51.1167,"x":9.1167},{"n":"Palanan","c":"Philippines","y":17.0589,"x":122.43},{"n":"Podporozhye","c":"Russia","y":60.9167,"x":34.1667},{"n":"East Finchley","c":"United Kingdom","y":51.5902,"x":-0.1753},{"n":"Chertsey","c":"United Kingdom","y":51.3902,"x":-0.5074},{"n":"Rojales","c":"Spain","y":38.0886,"x":-0.7236},{"n":"Navalmoral de la Mata","c":"Spain","y":39.8983,"x":-5.5403},{"n":"Domont","c":"France","y":49.0275,"x":2.3267},{"n":"Monsenhor Tabosa","c":"Brazil","y":-4.7889,"x":-40.0628},{"n":"Bom Sucesso","c":"Brazil","y":-21.0328,"x":-44.7578},{"n":"Clevelandia","c":"Brazil","y":-26.3958,"x":-52.4708},{"n":"Baymak","c":"Russia","y":52.5833,"x":58.3167},{"n":"Lindenwold","c":"United States","y":39.8172,"x":-74.9898},{"n":"Eggenstein-Leopoldshafen","c":"Germany","y":49.0778,"x":8.3925},{"n":"Middlesex Centre","c":"Canada","y":43.05,"x":-81.45},{"n":"Pozoblanco","c":"Spain","y":38.3833,"x":-4.85},{"n":"Oswestry","c":"United Kingdom","y":52.8598,"x":-3.0538},{"n":"San Jorge","c":"Philippines","y":11.9833,"x":124.8167},{"n":"Alcoy","c":"Philippines","y":9.7082,"x":123.506},{"n":"Saint-Egreve","c":"France","y":45.2317,"x":5.6831},{"n":"Calnali","c":"Mexico","y":20.9,"x":-98.5833},{"n":"Cesario Lange","c":"Brazil","y":-23.2267,"x":-47.9531},{"n":"Xintangcun","c":"China","y":23.9423,"x":116.7865},{"n":"Almeria","c":"Philippines","y":11.6206,"x":124.3794},{"n":"Clive","c":"United States","y":41.6147,"x":-93.798},{"n":"Cumaru","c":"Brazil","y":-8.0058,"x":-35.6969},{"n":"Mohacs","c":"Hungary","y":45.9958,"x":18.6797},{"n":"Ribeiropolis","c":"Brazil","y":-10.5389,"x":-37.4361},{"n":"Oneonta","c":"United States","y":42.4551,"x":-75.0666},{"n":"Santa Magdalena","c":"Philippines","y":12.65,"x":124.1},{"n":"Inverness","c":"Canada","y":46.2,"x":-61.1},{"n":"Shippensburg","c":"United States","y":40.0484,"x":-77.5227},{"n":"Ambares-et-Lagrave","c":"France","y":44.9247,"x":-0.4867},{"n":"Killingly","c":"United States","y":41.8311,"x":-71.8499},{"n":"Sudipen","c":"Philippines","y":16.9,"x":120.4667},{"n":"Penzberg","c":"Germany","y":47.75,"x":11.3667},{"n":"Pampa","c":"United States","y":35.5479,"x":-100.9651},{"n":"Stockelsdorf","c":"Germany","y":53.8833,"x":10.65},{"n":"Numbrecht","c":"Germany","y":50.9053,"x":7.5422},{"n":"Kempele","c":"Finland","y":64.9125,"x":25.5083},{"n":"Dour","c":"Belgium","y":50.3979,"x":3.7807},{"n":"Cajola","c":"Guatemala","y":14.9252,"x":-91.616},{"n":"Jicin","c":"Czechia","y":50.4373,"x":15.3517},{"n":"Marienberg","c":"Germany","y":50.6508,"x":13.1647},{"n":"McKinleyville","c":"United States","y":40.9488,"x":-124.0857},{"n":"Kozienice","c":"Poland","y":51.5833,"x":21.5667},{"n":"Condeixa-a-Nova","c":"Portugal","y":40.1167,"x":-8.5},{"n":"Fuente-Alamo de Murcia","c":"Spain","y":37.7394,"x":-1.1881},{"n":"South Ogden","c":"United States","y":41.1722,"x":-111.9577},{"n":"Elbeuf","c":"France","y":49.2858,"x":1.0083},{"n":"Aracagi","c":"Brazil","y":-6.8528,"x":-35.3808},{"n":"Santana do Cariri","c":"Brazil","y":-7.1878,"x":-39.7369},{"n":"Balmazujvaros","c":"Hungary","y":47.6167,"x":21.35},{"n":"Itirapina","c":"Brazil","y":-22.2528,"x":-47.8228},{"n":"Hayange","c":"France","y":49.3297,"x":6.0619},{"n":"Stony Plain","c":"Canada","y":53.5264,"x":-114.0069},{"n":"Poing","c":"Germany","y":48.1667,"x":11.8167},{"n":"Sedan","c":"France","y":49.7019,"x":4.9403},{"n":"Petawawa","c":"Canada","y":45.9,"x":-77.2833},{"n":"Albemarle","c":"United States","y":35.3594,"x":-80.1915},{"n":"Canudos","c":"Brazil","y":-9.9639,"x":-39.1639},{"n":"Urucuia","c":"Brazil","y":-16.1328,"x":-45.7419},{"n":"Brzesko","c":"Poland","y":49.9667,"x":20.6167},{"n":"Adustina","c":"Brazil","y":-10.5328,"x":-38.1},{"n":"Saluzzo","c":"Italy","y":44.6453,"x":7.4906},{"n":"Coalinga","c":"United States","y":36.143,"x":-120.3262},{"n":"North Canton","c":"United States","y":40.8742,"x":-81.3971},{"n":"Saran","c":"France","y":47.9514,"x":1.8803},{"n":"Saint-Cyr-sur-Loire","c":"France","y":47.4028,"x":0.6781},{"n":"Konstantinovsk","c":"Russia","y":47.5833,"x":41.1},{"n":"Itaquitinga","c":"Brazil","y":-7.6678,"x":-35.1019},{"n":"La Vista","c":"United States","y":41.1816,"x":-96.0666},{"n":"Elias Fausto","c":"Brazil","y":-23.0428,"x":-47.3739},{"n":"Saint-Pierre-des-Corps","c":"France","y":47.3908,"x":0.7281},{"n":"Urucara","c":"Brazil","y":-2.5358,"x":-57.76},{"n":"Benesov","c":"Czechia","y":49.7817,"x":14.687},{"n":"Ashwaubenon","c":"United States","y":44.4796,"x":-88.0889},{"n":"Freiberg am Neckar","c":"Germany","y":48.9347,"x":9.1917},{"n":"Gubin","c":"Poland","y":51.95,"x":14.7333},{"n":"Dickson","c":"United States","y":36.064,"x":-87.3668},{"n":"Kusa","c":"Russia","y":55.3333,"x":59.4333},{"n":"Codru","c":"Moldova","y":46.9753,"x":28.8194},{"n":"North Adams","c":"United States","y":42.6844,"x":-73.1166},{"n":"Torre Maggiore","c":"Italy","y":41.6833,"x":15.2833},{"n":"Capistrano","c":"Brazil","y":-4.47,"x":-38.9008},{"n":"Corbelia","c":"Brazil","y":-24.7989,"x":-53.3069},{"n":"Sidi Yakoub","c":"Morocco","y":31.6667,"x":-7.0667},{"n":"Ignacio de la Llave","c":"Mexico","y":18.6618,"x":-95.9721},{"n":"Waxhaw","c":"United States","y":34.9364,"x":-80.7438},{"n":"San Juan del Sur","c":"Nicaragua","y":11.25,"x":-85.8667},{"n":"Kezmarok","c":"Slovakia","y":49.1383,"x":20.4292},{"n":"Lam Luk Ka","c":"Thailand","y":13.9297,"x":100.7375},{"n":"Ajacuba","c":"Mexico","y":20.0833,"x":-99.1167},{"n":"Saint Andrews","c":"United Kingdom","y":56.3404,"x":-2.7955},{"n":"Castellaneta","c":"Italy","y":40.6333,"x":16.9333},{"n":"Manlin","c":"China","y":23.663,"x":101.8853},{"n":"Xinlong","c":"China","y":18.9524,"x":108.6787},{"n":"Zvenyhorodka","c":"Ukraine","y":49.0833,"x":30.9667},{"n":"Sidi Daoud","c":"Algeria","y":36.85,"x":3.85},{"n":"North Babylon","c":"United States","y":40.7311,"x":-73.3251},{"n":"Pinas","c":"Ecuador","y":-3.6806,"x":-79.6806},{"n":"Long'e","c":"China","y":25.8061,"x":109.2134},{"n":"Kiangan","c":"Philippines","y":16.7833,"x":121.0833},{"n":"Svitavy","c":"Czechia","y":49.756,"x":16.4683},{"n":"Kunzell","c":"Germany","y":50.55,"x":9.7167},{"n":"Palestina de los Altos","c":"Guatemala","y":14.9333,"x":-91.7},{"n":"Xixinzhuangzhen","c":"China","y":37.0165,"x":111.4908},{"n":"Bargteheide","c":"Germany","y":53.7167,"x":10.2667},{"n":"Kronach","c":"Germany","y":50.2411,"x":11.3281},{"n":"Dabas","c":"Hungary","y":47.1833,"x":19.3167},{"n":"Staphorst","c":"Netherlands","y":52.6333,"x":6.2},{"n":"Bethlehem","c":"South Africa","y":-28.2333,"x":28.3},{"n":"Biliran","c":"Philippines","y":11.4667,"x":124.4833},{"n":"Eppelborn","c":"Germany","y":49.4022,"x":6.9706},{"n":"Rotselaar","c":"Belgium","y":50.9511,"x":4.7108},{"n":"Wadi Halfa'","c":"Sudan","y":21.8,"x":31.35},{"n":"Landerneau","c":"France","y":48.4508,"x":-4.2494},{"n":"Bastrop","c":"United States","y":30.1118,"x":-97.3257},{"n":"San Giovanni in Fiore","c":"Italy","y":39.2642,"x":16.7003},{"n":"Abelardo Luz","c":"Brazil","y":-26.565,"x":-52.3278},{"n":"Cham","c":"Germany","y":49.2183,"x":12.6658},{"n":"Ammon","c":"United States","y":43.4746,"x":-111.9569},{"n":"Tagounite","c":"Morocco","y":29.9833,"x":-5.5667},{"n":"Pelham","c":"Canada","y":43.0333,"x":-79.3333},{"n":"Tijucas do Sul","c":"Brazil","y":-25.9278,"x":-49.1989},{"n":"Knemis Dades","c":"Morocco","y":31.309,"x":-6.028},{"n":"Cestas","c":"France","y":44.7444,"x":-0.6822},{"n":"Tamallalt","c":"Morocco","y":31.8288,"x":-7.5262},{"n":"Resplendor","c":"Brazil","y":-19.3258,"x":-41.255},{"n":"Nova Canaa","c":"Brazil","y":-14.7939,"x":-40.1419},{"n":"Yelm","c":"United States","y":46.9398,"x":-122.6261},{"n":"Yabuki","c":"Japan","y":37.2011,"x":140.3386},{"n":"Toijala","c":"Finland","y":61.1667,"x":23.8681},{"n":"Xinying","c":"China","y":35.706,"x":104.1824},{"n":"Girua","c":"Brazil","y":-28.0278,"x":-54.35},{"n":"Carmopolis de Minas","c":"Brazil","y":-20.5408,"x":-44.635},{"n":"Tolanaro","c":"Madagascar","y":-25.0325,"x":46.9833},{"n":"Macatuba","c":"Brazil","y":-22.5022,"x":-48.7114},{"n":"Bombon","c":"Philippines","y":13.6833,"x":123.2},{"n":"Babenhausen","c":"Germany","y":49.9624,"x":8.9533},{"n":"Schwarzenberg","c":"Germany","y":50.5453,"x":12.7792},{"n":"Fundao","c":"Brazil","y":-19.9328,"x":-40.4069},{"n":"Martinsicuro","c":"Italy","y":42.8851,"x":13.916},{"n":"Marabut","c":"Philippines","y":11.1167,"x":125.2167},{"n":"Gavrilov-Yam","c":"Russia","y":57.3,"x":39.85},{"n":"Zafra","c":"Spain","y":38.4167,"x":-6.4167},{"n":"Parole","c":"United States","y":38.9861,"x":-76.5519},{"n":"Ban Cho Ho","c":"Thailand","y":15.0311,"x":102.1381},{"n":"Mauguio","c":"France","y":43.6164,"x":4.0075},{"n":"Menzelinsk","c":"Russia","y":55.7167,"x":53.0833},{"n":"Oulad Amrane","c":"Morocco","y":32.2833,"x":-9.2333},{"n":"Filiasi","c":"Romania","y":44.5539,"x":23.529},{"n":"Agua Fria","c":"Brazil","y":-11.8669,"x":-38.7669},{"n":"Itapiranga","c":"Brazil","y":-27.1689,"x":-53.7119},{"n":"Preetz","c":"Germany","y":54.2367,"x":10.2822},{"n":"Glenvar Heights","c":"United States","y":25.709,"x":-80.3156},{"n":"Grottammare","c":"Italy","y":42.9891,"x":13.8681},{"n":"Pokrov","c":"Russia","y":55.9178,"x":39.175},{"n":"Mangueirinha","c":"Brazil","y":-25.9408,"x":-52.1758},{"n":"Turinsk","c":"Russia","y":58.0333,"x":63.7},{"n":"Palos Hills","c":"United States","y":41.6986,"x":-87.8266},{"n":"Selwyn","c":"Canada","y":44.4167,"x":-78.3333},{"n":"Talsint","c":"Morocco","y":32.5353,"x":-3.4481},{"n":"Annonay","c":"France","y":45.24,"x":4.6708},{"n":"Povorino","c":"Russia","y":51.2,"x":42.25},{"n":"Rosario Oeste","c":"Brazil","y":-14.8358,"x":-56.4278},{"n":"Seltso","c":"Russia","y":53.3694,"x":34.1},{"n":"Vedelago","c":"Italy","y":45.6833,"x":12.0167},{"n":"Khed","c":"India","y":17.72,"x":73.38},{"n":"Mula","c":"Spain","y":38.0419,"x":-1.4906},{"n":"Sint-Kruis","c":"Belgium","y":51.2139,"x":3.2503},{"n":"Crixas","c":"Brazil","y":-14.5489,"x":-49.9689},{"n":"Brixham","c":"United Kingdom","y":50.394,"x":-3.516},{"n":"Diepholz","c":"Germany","y":52.6072,"x":8.3711},{"n":"Camano","c":"United States","y":48.1865,"x":-122.4708},{"n":"Dongjiangshui","c":"China","y":33.3792,"x":104.9516},{"n":"Loay","c":"Philippines","y":9.6,"x":124.0167},{"n":"Retiro","c":"Colombia","y":6.0597,"x":-75.5039},{"n":"Liuchuan","c":"China","y":26.6549,"x":108.5876},{"n":"Cernavoda","c":"Romania","y":44.3381,"x":28.0336},{"n":"Santa Maria","c":"Argentina","y":-26.6833,"x":-66.0333},{"n":"Valencia","c":"Ecuador","y":-0.9525,"x":-79.3531},{"n":"Dacaozhuang","c":"China","y":37.5546,"x":114.9316},{"n":"Streator","c":"United States","y":41.1244,"x":-88.8296},{"n":"Bytow","c":"Poland","y":54.1667,"x":17.5},{"n":"Samarate","c":"Italy","y":45.6167,"x":8.7833},{"n":"Wyckoff","c":"United States","y":40.9989,"x":-74.1676},{"n":"Lentate sul Seveso","c":"Italy","y":45.6833,"x":9.1167},{"n":"Ihosy","c":"Madagascar","y":-22.3996,"x":46.1167},{"n":"Liuguoju","c":"China","y":38.3107,"x":110.3},{"n":"San Juan Lalana","c":"Mexico","y":17.4667,"x":-95.8833},{"n":"Penamiller","c":"Mexico","y":21.0519,"x":-99.815},{"n":"Ambriz","c":"Angola","y":-7.85,"x":13.1167},{"n":"Aiuaba","c":"Brazil","y":-6.5739,"x":-40.1239},{"n":"Steffisburg","c":"Switzerland","y":46.7831,"x":7.6333},{"n":"Realeza","c":"Brazil","y":-25.7669,"x":-53.5269},{"n":"Seeheim-Jugenheim","c":"Germany","y":49.7667,"x":8.65},{"n":"East Lampeter","c":"United States","y":40.0375,"x":-76.2162},{"n":"Osowa","c":"Poland","y":54.4272,"x":18.4708},{"n":"Guadalupe Victoria","c":"Mexico","y":19.2833,"x":-97.3333},{"n":"Ashmyany","c":"Belarus","y":54.425,"x":25.9375},{"n":"Bagnacavallo","c":"Italy","y":44.4169,"x":11.9761},{"n":"Al Kilabiyah","c":"Saudi Arabia","y":25.3833,"x":49.6},{"n":"Sparti","c":"Greece","y":37.0819,"x":22.4236},{"n":"Sylacauga","c":"United States","y":33.1778,"x":-86.2606},{"n":"Oconomowoc","c":"United States","y":43.0995,"x":-88.495},{"n":"Giaveno","c":"Italy","y":45.0333,"x":7.35},{"n":"Azeffoun","c":"Algeria","y":36.8961,"x":4.4204},{"n":"Grojec","c":"Poland","y":51.8656,"x":20.8675},{"n":"Saint-Julien-en-Genevois","c":"France","y":46.1442,"x":6.0842},{"n":"Tourlaville","c":"France","y":49.6408,"x":-1.5789},{"n":"Fort Hunt","c":"United States","y":38.7361,"x":-77.0589},{"n":"Mateszalka","c":"Hungary","y":47.9431,"x":22.3167},{"n":"Loyalist","c":"Canada","y":44.25,"x":-76.75},{"n":"Phoenixville","c":"United States","y":40.1358,"x":-75.5201},{"n":"Batuco","c":"Chile","y":-33.2299,"x":-70.8085},{"n":"Krapkowice","c":"Poland","y":50.4751,"x":17.9654},{"n":"Riemst","c":"Belgium","y":50.8089,"x":5.6019},{"n":"San Jacinto Amilpas","c":"Mexico","y":17.1,"x":-96.7667},{"n":"Vatutine","c":"Ukraine","y":49.0167,"x":31.0667},{"n":"Pran Buri","c":"Thailand","y":12.3939,"x":99.9159},{"n":"Terra Rica","c":"Brazil","y":-22.7089,"x":-52.6169},{"n":"Brunico","c":"Italy","y":46.7994,"x":11.9343},{"n":"America Dourada","c":"Brazil","y":-11.455,"x":-41.4358},{"n":"Mountain Home","c":"United States","y":43.1324,"x":-115.6972},{"n":"Neratovice","c":"Czechia","y":50.2593,"x":14.5177},{"n":"San Jose de Chiquitos","c":"Bolivia","y":-17.85,"x":-60.75},{"n":"Didam","c":"Netherlands","y":51.9333,"x":6.1333},{"n":"Asten","c":"Netherlands","y":51.4031,"x":5.7472},{"n":"Palagonia","c":"Italy","y":37.3333,"x":14.75},{"n":"Findikli","c":"Turkey","y":41.1333,"x":41.0167},{"n":"Americus","c":"United States","y":32.0736,"x":-84.2249},{"n":"Cubellas","c":"Spain","y":41.21,"x":1.6736},{"n":"Republic","c":"United States","y":37.1452,"x":-93.4446},{"n":"Iziaslav","c":"Ukraine","y":50.1167,"x":26.8},{"n":"Reinheim","c":"Germany","y":49.8261,"x":8.8348},{"n":"Santa Cecilia","c":"Brazil","y":-26.9608,"x":-50.4269},{"n":"Kelheim","c":"Germany","y":48.9167,"x":11.8667},{"n":"Upper Chichester","c":"United States","y":39.8414,"x":-75.4421},{"n":"Severinia","c":"Brazil","y":-20.8089,"x":-48.8028},{"n":"Agrate Brianza","c":"Italy","y":45.5783,"x":9.3522},{"n":"Rio Bueno","c":"Chile","y":-40.3337,"x":-72.9568},{"n":"Holzkirchen","c":"Germany","y":47.8833,"x":11.7},{"n":"Dehaqan","c":"Iran","y":31.94,"x":51.6478},{"n":"Lemay","c":"United States","y":38.5325,"x":-90.2845},{"n":"Ratba","c":"Morocco","y":34.7833,"x":-4.9333},{"n":"Zhukovka","c":"Russia","y":53.5339,"x":33.7281},{"n":"Manilva","c":"Spain","y":36.3833,"x":-5.25},{"n":"Alvorada D'Oeste","c":"Brazil","y":-11.3417,"x":-62.2861},{"n":"Buda","c":"United States","y":30.0856,"x":-97.8472},{"n":"Tomas Oppus","c":"Philippines","y":10.25,"x":124.9833},{"n":"Rakovski","c":"Bulgaria","y":42.2884,"x":24.9655},{"n":"Katsuura","c":"Japan","y":35.1525,"x":140.3211},{"n":"Shahba","c":"Syria","y":32.8539,"x":36.6294},{"n":"Famy","c":"Philippines","y":14.4333,"x":121.45},{"n":"Sao Pedro do Sul","c":"Portugal","y":40.75,"x":-8.0667},{"n":"Guarei","c":"Brazil","y":-23.3728,"x":-48.1842},{"n":"Alfajayucan","c":"Mexico","y":20.4,"x":-99.35},{"n":"Cutlerville","c":"United States","y":42.8405,"x":-85.6739},{"n":"Marbach am Neckar","c":"Germany","y":48.9406,"x":9.2575},{"n":"Chalchihuitan","c":"Mexico","y":16.9667,"x":-92.65},{"n":"Port Lincoln","c":"Australia","y":-34.7322,"x":135.8586},{"n":"Hajdunanas","c":"Hungary","y":47.85,"x":21.4333},{"n":"Alto Santo","c":"Brazil","y":-5.5208,"x":-38.2719},{"n":"Calverton","c":"United States","y":39.0578,"x":-76.9488},{"n":"Karratha","c":"Australia","y":-20.7364,"x":116.8464},{"n":"Heumen","c":"Netherlands","y":51.7656,"x":5.8433},{"n":"Janakkala","c":"Finland","y":60.9167,"x":24.65},{"n":"Poco Fundo","c":"Brazil","y":-21.7808,"x":-45.965},{"n":"'Ain Abessa","c":"Algeria","y":36.3,"x":5.295},{"n":"Leini","c":"Italy","y":45.1836,"x":7.7153},{"n":"Stara L'ubovna","c":"Slovakia","y":49.3167,"x":20.6833},{"n":"Southbridge","c":"United States","y":42.0604,"x":-72.0338},{"n":"Hohenems","c":"Austria","y":47.3667,"x":9.6667},{"n":"Tichi","c":"Algeria","y":36.6675,"x":5.1601},{"n":"Cagdianao","c":"Philippines","y":9.9167,"x":125.6667},{"n":"Nova Resende","c":"Brazil","y":-21.1258,"x":-46.42},{"n":"Myrtle Grove","c":"United States","y":30.4158,"x":-87.3028},{"n":"Burstadt","c":"Germany","y":49.6414,"x":8.4546},{"n":"Medicina","c":"Italy","y":44.4833,"x":11.6333},{"n":"Sin-le-Noble","c":"France","y":50.3631,"x":3.1131},{"n":"Montagu","c":"South Africa","y":-33.7833,"x":20.1167},{"n":"Nova Ipixuna","c":"Brazil","y":-4.9208,"x":-49.0769},{"n":"Lake St. Louis","c":"United States","y":38.7846,"x":-90.7886},{"n":"Midland","c":"Canada","y":44.75,"x":-79.8833},{"n":"Bruckmuhl","c":"Germany","y":47.8833,"x":11.9167},{"n":"Este","c":"Italy","y":45.2333,"x":11.6667},{"n":"Seagoville","c":"United States","y":32.653,"x":-96.5455},{"n":"Colwood","c":"Canada","y":48.4236,"x":-123.4958},{"n":"Bella Vista","c":"Paraguay","y":-22.1296,"x":-56.52},{"n":"Guadarrama","c":"Spain","y":40.6728,"x":-4.0889},{"n":"Chinampa de Gorostiza","c":"Mexico","y":21.3667,"x":-97.7333},{"n":"Westervoort","c":"Netherlands","y":51.9667,"x":5.9667},{"n":"Tejucuoca","c":"Brazil","y":-3.9889,"x":-39.5808},{"n":"Crescent City","c":"United States","y":41.7727,"x":-124.1902},{"n":"Ouaouzgane","c":"Morocco","y":35.0167,"x":-4.5167},{"n":"Colle Salvetti","c":"Italy","y":43.6,"x":10.4833},{"n":"Escoublac","c":"France","y":47.2858,"x":-2.3922},{"n":"Locarno","c":"Switzerland","y":46.1664,"x":8.7997},{"n":"Vallegrande","c":"Bolivia","y":-18.4894,"x":-64.1083},{"n":"Lille","c":"Belgium","y":51.2383,"x":4.8242},{"n":"Saalfelden am Steinernen Meer","c":"Austria","y":47.4269,"x":12.8483},{"n":"Ubrique","c":"Spain","y":36.6833,"x":-5.45},{"n":"Strzegom","c":"Poland","y":51,"x":16.3333},{"n":"Campulung Moldovenesc","c":"Romania","y":47.5308,"x":25.5514},{"n":"Sidi Lamine","c":"Morocco","y":32.9,"x":-6.05},{"n":"Saint-Maximin-la-Sainte-Baume","c":"France","y":43.4533,"x":5.8619},{"n":"Picayune","c":"United States","y":30.5322,"x":-89.6724},{"n":"Taguatinga","c":"Brazil","y":-12.4061,"x":-46.4339},{"n":"Iglino","c":"Russia","y":54.8385,"x":56.4232},{"n":"Pindai","c":"Brazil","y":-14.4928,"x":-42.6869},{"n":"Fuying","c":"China","y":40.8754,"x":117.6978},{"n":"Itariri","c":"Brazil","y":-24.2888,"x":-47.1332},{"n":"North Myrtle Beach","c":"United States","y":33.823,"x":-78.7089},{"n":"Ostrov","c":"Czechia","y":50.306,"x":12.9392},{"n":"Gunzenhausen","c":"Germany","y":49.1147,"x":10.7542},{"n":"Central Saanich","c":"Canada","y":48.5142,"x":-123.3839},{"n":"Campanha","c":"Brazil","y":-21.8389,"x":-45.3997},{"n":"Tocantins","c":"Brazil","y":-21.175,"x":-43.0178},{"n":"Vendome","c":"France","y":47.7928,"x":1.0656},{"n":"Bemidji","c":"United States","y":47.4828,"x":-94.8796},{"n":"Sidi el Mokhfi","c":"Morocco","y":34.6039,"x":-4.7889},{"n":"Sume","c":"Brazil","y":-7.6719,"x":-36.88},{"n":"Calayan","c":"Philippines","y":19.2667,"x":121.4833},{"n":"Chestnuthill","c":"United States","y":40.9568,"x":-75.4183},{"n":"Sudak","c":"Ukraine","y":44.8514,"x":34.9725},{"n":"Kushima","c":"Japan","y":31.4645,"x":131.2284},{"n":"Lonigo","c":"Italy","y":45.3833,"x":11.3833},{"n":"Goodlettsville","c":"United States","y":36.3327,"x":-86.7029},{"n":"Pajapita","c":"Guatemala","y":14.7243,"x":-92.0334},{"n":"Kauhava","c":"Finland","y":63.1014,"x":23.0639},{"n":"Mikumi","c":"Tanzania","y":-7.3996,"x":36.98},{"n":"Ricany","c":"Czechia","y":49.9917,"x":14.6543},{"n":"Carnaubal","c":"Brazil","y":-4.1669,"x":-40.9428},{"n":"Grossostheim","c":"Germany","y":49.9167,"x":9.0833},{"n":"Ham Lake","c":"United States","y":45.2545,"x":-93.2039},{"n":"El Pinon","c":"Colombia","y":10.4039,"x":-74.8231},{"n":"Cabeceiras de Basto","c":"Portugal","y":41.5167,"x":-8},{"n":"Aue","c":"Germany","y":50.5853,"x":12.7008},{"n":"Liangyi","c":"China","y":35.2698,"x":106.093},{"n":"Sada","c":"Spain","y":43.35,"x":-8.25},{"n":"Fairburn","c":"United States","y":33.5496,"x":-84.5914},{"n":"Pollensa","c":"Spain","y":39.8772,"x":3.0164},{"n":"Kaiwen","c":"China","y":27.1548,"x":99.8371},{"n":"Ceadir-Lunga","c":"Moldova","y":46.055,"x":28.8303},{"n":"Sainte-Catherine","c":"Canada","y":45.4,"x":-73.58},{"n":"Neston","c":"United Kingdom","y":53.289,"x":-3.074},{"n":"Lake Wales","c":"United States","y":27.9195,"x":-81.5961},{"n":"Sallanches","c":"France","y":45.9364,"x":6.6319},{"n":"Potirendaba","c":"Brazil","y":-21.0428,"x":-49.3769},{"n":"Brasilandia","c":"Brazil","y":-17.01,"x":-46.0089},{"n":"Agudo","c":"Brazil","y":-29.645,"x":-53.24},{"n":"Port Hope","c":"Canada","y":43.95,"x":-78.3},{"n":"Cerea","c":"Italy","y":45.1894,"x":11.2166},{"n":"Gitagum","c":"Philippines","y":8.5956,"x":124.4054},{"n":"Caravaggio","c":"Italy","y":45.4978,"x":9.6431},{"n":"Anamoros","c":"El Salvador","y":13.7333,"x":-87.8667},{"n":"Machelen","c":"Belgium","y":50.9103,"x":4.4367},{"n":"Ponte de Sor","c":"Portugal","y":39.25,"x":-8.0167},{"n":"Singleton","c":"Australia","y":-32.5667,"x":151.1697},{"n":"Novomichurinsk","c":"Russia","y":54.0333,"x":39.75},{"n":"Douar Tabouda","c":"Morocco","y":34.7167,"x":-5.1333},{"n":"New Port Richey","c":"United States","y":28.2468,"x":-82.717},{"n":"Upper Saucon","c":"United States","y":40.5364,"x":-75.4084},{"n":"Saint-Basile-le-Grand","c":"Canada","y":45.5333,"x":-73.2833},{"n":"Morombe","c":"Madagascar","y":-21.7391,"x":43.3657},{"n":"Truckee","c":"United States","y":39.3455,"x":-120.1848},{"n":"Chorfa","c":"Algeria","y":36.3617,"x":4.3307},{"n":"Sidi Ettiji","c":"Morocco","y":32.1594,"x":-8.8267},{"n":"Uhersky Brod","c":"Czechia","y":49.0251,"x":17.6472},{"n":"Wimborne Minster","c":"United Kingdom","y":50.804,"x":-1.978},{"n":"Leopoldshohe","c":"Germany","y":52.0167,"x":8.7},{"n":"Sunagawa","c":"Japan","y":43.4948,"x":141.9035},{"n":"Zirara","c":"Morocco","y":32.35,"x":-8.5333},{"n":"Capurso","c":"Italy","y":41.05,"x":16.9167},{"n":"Zumarraga","c":"Philippines","y":11.639,"x":124.841},{"n":"Cerro Maggiore","c":"Italy","y":45.6,"x":8.95},{"n":"Lindsay","c":"United States","y":36.2082,"x":-119.0897},{"n":"Illingen","c":"Germany","y":49.3764,"x":7.0525},{"n":"Hennebont","c":"France","y":47.8042,"x":-3.2789},{"n":"Seacombe","c":"United Kingdom","y":53.409,"x":-3.029},{"n":"Louth","c":"United Kingdom","y":53.3669,"x":-0.0061},{"n":"Vammala","c":"Finland","y":61.3403,"x":22.9097},{"n":"Ansfelden","c":"Austria","y":48.2083,"x":14.2889},{"n":"Ibicui","c":"Brazil","y":-14.8419,"x":-39.9869},{"n":"Pochep","c":"Russia","y":52.9333,"x":33.45},{"n":"Ibitiara","c":"Brazil","y":-12.6519,"x":-42.2178},{"n":"Salesopolis","c":"Brazil","y":-23.5319,"x":-45.8458},{"n":"Aston","c":"United States","y":39.8718,"x":-75.4348},{"n":"Chelmza","c":"Poland","y":53.2,"x":18.6},{"n":"North Decatur","c":"United States","y":33.8073,"x":-84.2889},{"n":"Wentang","c":"China","y":23.9918,"x":112.2868},{"n":"Roznov pod Radhostem","c":"Czechia","y":49.4585,"x":18.143},{"n":"Zequ","c":"China","y":35.0376,"x":101.4606},{"n":"Cohoes","c":"United States","y":42.7732,"x":-73.7077},{"n":"Beek","c":"Netherlands","y":50.9394,"x":5.7961},{"n":"Monesiglio","c":"Italy","y":44.4667,"x":8.1167},{"n":"Todi","c":"Italy","y":42.7833,"x":12.4167},{"n":"Zeulenroda","c":"Germany","y":50.6333,"x":11.9667},{"n":"Reggello","c":"Italy","y":43.6833,"x":11.5333},{"n":"Federacion","c":"Argentina","y":-30.9833,"x":-57.9167},{"n":"Anisoc","c":"Equatorial Guinea","y":1.8656,"x":10.7689},{"n":"McComb","c":"United States","y":31.2442,"x":-90.4717},{"n":"Highland Village","c":"United States","y":33.0897,"x":-97.0615},{"n":"Noale","c":"Italy","y":45.5501,"x":12.0709},{"n":"Jinji","c":"China","y":22.165,"x":112.4848},{"n":"Codogno","c":"Italy","y":45.16,"x":9.705},{"n":"Miyazu","c":"Japan","y":35.5356,"x":135.1956},{"n":"Raposos","c":"Brazil","y":-19.9669,"x":-43.8039},{"n":"Dilijan","c":"Armenia","y":40.7408,"x":44.8631},{"n":"Auburndale","c":"United States","y":28.0962,"x":-81.8011},{"n":"Hunfeld","c":"Germany","y":50.6667,"x":9.7667},{"n":"Jiblah","c":"Yemen","y":13.9167,"x":44.15},{"n":"Pote","c":"Brazil","y":-17.8069,"x":-41.7858},{"n":"Tagana-an","c":"Philippines","y":9.7,"x":125.5833},{"n":"Carapebus","c":"Brazil","y":-22.1869,"x":-41.6608},{"n":"Santomera","c":"Spain","y":38.0617,"x":-1.0492},{"n":"Illzach","c":"France","y":47.7822,"x":7.3481},{"n":"Mifune","c":"Japan","y":32.7144,"x":130.8019},{"n":"Ad Dis ash Sharqiyah","c":"Yemen","y":14.8833,"x":49.8667},{"n":"Santa Maria Petapa","c":"Mexico","y":16.8167,"x":-95.1167},{"n":"Banbridge","c":"United Kingdom","y":54.343,"x":-6.26},{"n":"Denby Dale","c":"United Kingdom","y":53.572,"x":-1.655},{"n":"Tinoc","c":"Philippines","y":16.7,"x":120.9},{"n":"Kovdor","c":"Russia","y":67.5594,"x":30.4667},{"n":"Lanquin","c":"Guatemala","y":15.5758,"x":-89.9811},{"n":"Scott","c":"United States","y":40.3875,"x":-80.0791},{"n":"Vesoul","c":"France","y":47.6222,"x":6.1553},{"n":"Alcantara","c":"Philippines","y":12.2584,"x":122.0543},{"n":"Zapotlan de Juarez","c":"Mexico","y":19.9667,"x":-98.85},{"n":"Corabia","c":"Romania","y":43.7736,"x":24.5033},{"n":"Gryfice","c":"Poland","y":53.9167,"x":15.2},{"n":"Wolcott","c":"United States","y":41.6007,"x":-72.9734},{"n":"Montbrison","c":"France","y":45.6075,"x":4.0653},{"n":"Al Lataminah","c":"Syria","y":35.3208,"x":36.6225},{"n":"Umbertide","c":"Italy","y":43.3056,"x":12.3366},{"n":"El Segundo","c":"United States","y":33.9169,"x":-118.4021},{"n":"Holmdel","c":"United States","y":40.3768,"x":-74.1725},{"n":"Denville","c":"United States","y":40.8889,"x":-74.4893},{"n":"Xinyuan","c":"China","y":37.2953,"x":99.0341},{"n":"Mercedes","c":"United States","y":26.1533,"x":-97.9129},{"n":"Swift Current","c":"Canada","y":50.2881,"x":-107.7939},{"n":"Pardes Hanna Karkur","c":"Israel","y":32.4711,"x":34.9675},{"n":"Macetown","c":"New Zealand","y":-44.865,"x":168.819},{"n":"Libertad","c":"Philippines","y":11.769,"x":121.9189},{"n":"Centre de Flacq","c":"Mauritius","y":-20.2002,"x":57.7177},{"n":"Olecko","c":"Poland","y":54.0333,"x":22.5},{"n":"Norcross","c":"United States","y":33.9379,"x":-84.2065},{"n":"Burrillville","c":"United States","y":41.9706,"x":-71.6984},{"n":"Buritama","c":"Brazil","y":-21.0667,"x":-50.1475},{"n":"Kurtamysh","c":"Russia","y":54.9,"x":64.4333},{"n":"Jutai","c":"Brazil","y":-2.7469,"x":-66.7669},{"n":"Villeneuve-Loubet","c":"France","y":43.6581,"x":7.1214},{"n":"Tredegar","c":"United Kingdom","y":51.7776,"x":-3.2407},{"n":"Northbridge","c":"United States","y":42.13,"x":-71.6547},{"n":"Edmundston","c":"Canada","y":47.3765,"x":-68.3253},{"n":"Chinde","c":"Mozambique","y":-18.5833,"x":36.4667},{"n":"Morganton","c":"United States","y":35.7408,"x":-81.7003},{"n":"Weybridge","c":"United Kingdom","y":51.362,"x":-0.453},{"n":"Sainte-Luce-sur-Loire","c":"France","y":47.2494,"x":-1.4867},{"n":"Swansea","c":"United States","y":41.7571,"x":-71.212},{"n":"Keflavik","c":"Iceland","y":64,"x":-22.5819},{"n":"Besana in Brianza","c":"Italy","y":45.7,"x":9.2833},{"n":"Berezan","c":"Ukraine","y":50.3197,"x":31.47},{"n":"Quarteira","c":"Portugal","y":37.0695,"x":-8.1006},{"n":"Delran","c":"United States","y":40.017,"x":-74.9495},{"n":"Langenthal","c":"Switzerland","y":47.2153,"x":7.7889},{"n":"West Hempfield","c":"United States","y":40.0564,"x":-76.4632},{"n":"Uchkeken","c":"Russia","y":43.9439,"x":42.5153},{"n":"Bayat","c":"Turkey","y":40.646,"x":34.261},{"n":"Ban Lam Narai","c":"Thailand","y":15.2054,"x":101.1356},{"n":"Murraysville","c":"United States","y":34.2919,"x":-77.8429},{"n":"Pedregulho","c":"Brazil","y":-20.2569,"x":-47.4767},{"n":"Donaldsonville","c":"United States","y":30.0954,"x":-90.9926},{"n":"Solvang","c":"United States","y":34.5936,"x":-120.1401},{"n":"Charqueada","c":"Brazil","y":-22.5097,"x":-47.7781},{"n":"Los Osos","c":"United States","y":35.3068,"x":-120.8249},{"n":"Kisvarda","c":"Hungary","y":48.2264,"x":22.0844},{"n":"Mapiri","c":"Bolivia","y":-15.3097,"x":-68.2161},{"n":"Horodok","c":"Ukraine","y":49.1667,"x":26.5667},{"n":"Gardhabaer","c":"Iceland","y":64.0833,"x":-22},{"n":"Saint-Amand-les-Eaux","c":"France","y":50.4481,"x":3.4269},{"n":"Hovelhof","c":"Germany","y":51.8167,"x":8.65},{"n":"Huissen","c":"Netherlands","y":51.9333,"x":5.9333},{"n":"Ivanava","c":"Belarus","y":52.1333,"x":25.55},{"n":"Russell","c":"Canada","y":45.2569,"x":-75.3583},{"n":"Tururu","c":"Brazil","y":-3.5808,"x":-39.4369},{"n":"Groveton","c":"United States","y":38.7605,"x":-77.098},{"n":"Espartinas","c":"Spain","y":37.3833,"x":-6.1167},{"n":"Bady Bassitt","c":"Brazil","y":-20.9178,"x":-49.445},{"n":"Longchang","c":"China","y":27.6627,"x":105.7881},{"n":"Changji","c":"China","y":26.9471,"x":108.7524},{"n":"Kirchlengern","c":"Germany","y":52.2,"x":8.6331},{"n":"Yaypan","c":"Uzbekistan","y":40.3758,"x":70.8156},{"n":"Zhongzai","c":"China","y":26.6877,"x":105.6548},{"n":"Regenstauf","c":"Germany","y":49.1236,"x":12.1283},{"n":"Rakovnik","c":"Czechia","y":50.1038,"x":13.7335},{"n":"Wyke","c":"United Kingdom","y":53.7369,"x":-1.77},{"n":"Geddes","c":"United States","y":43.0767,"x":-76.2243},{"n":"Karema","c":"Tanzania","y":-6.8162,"x":30.4333},{"n":"Lock Haven","c":"United States","y":41.1365,"x":-77.4521},{"n":"Colon","c":"Costa Rica","y":9.9096,"x":-84.262},{"n":"Loimaa","c":"Finland","y":60.8514,"x":23.0583},{"n":"Vienna","c":"United States","y":38.8996,"x":-77.2597},{"n":"Boljoon","c":"Philippines","y":9.6333,"x":123.4333},{"n":"Country Club Hills","c":"United States","y":41.5637,"x":-87.725},{"n":"Streetsboro","c":"United States","y":41.2396,"x":-81.3456},{"n":"Kirchhain","c":"Germany","y":50.8167,"x":8.9167},{"n":"Jasper","c":"United States","y":38.3933,"x":-86.9402},{"n":"Eden","c":"United States","y":36.5028,"x":-79.7412},{"n":"Pearl River","c":"United States","y":41.0615,"x":-74.0047},{"n":"Harenkarspel","c":"Netherlands","y":52.7344,"x":4.7706},{"n":"Digne-les-Bains","c":"France","y":44.0925,"x":6.2356},{"n":"Yunshan","c":"China","y":34.761,"x":105.7915},{"n":"Chateaurenard","c":"France","y":43.8825,"x":4.855},{"n":"Kozelsk","c":"Russia","y":54.0353,"x":35.7767},{"n":"Morretes","c":"Brazil","y":-25.4769,"x":-48.8339},{"n":"Silvi Paese","c":"Italy","y":42.55,"x":14.1167},{"n":"Hammam al `Alil","c":"Iraq","y":36.1581,"x":43.2594},{"n":"Douglas","c":"United States","y":31.3602,"x":-109.5394},{"n":"Bovolone","c":"Italy","y":45.25,"x":11.1333},{"n":"Slany","c":"Czechia","y":50.2305,"x":14.087},{"n":"Valmontone","c":"Italy","y":41.7833,"x":12.9167},{"n":"Bilohirsk","c":"Ukraine","y":45.0544,"x":34.6022},{"n":"Crowley","c":"United States","y":32.5781,"x":-97.3585},{"n":"Itaete","c":"Brazil","y":-12.9858,"x":-40.9728},{"n":"Highland Springs","c":"United States","y":37.5516,"x":-77.3285},{"n":"Anori","c":"Colombia","y":7.0736,"x":-75.1469},{"n":"Brackenheim","c":"Germany","y":49.0833,"x":9.0667},{"n":"Civita Castellana","c":"Italy","y":42.2961,"x":12.41},{"n":"Harlingen","c":"Netherlands","y":53.1736,"x":5.4272},{"n":"Passa Quatro","c":"Brazil","y":-22.39,"x":-44.9669},{"n":"Taohongpozhen","c":"China","y":36.9854,"x":111.4737},{"n":"North Grenville","c":"Canada","y":44.9667,"x":-75.65},{"n":"Ispica","c":"Italy","y":36.7853,"x":14.9069},{"n":"Bruntal","c":"Czechia","y":49.9884,"x":17.4648},{"n":"Verrieres-le-Buisson","c":"France","y":48.7475,"x":2.2628},{"n":"Francheville","c":"France","y":45.7364,"x":4.7636},{"n":"Sertanopolis","c":"Brazil","y":-23.0589,"x":-51.0358},{"n":"Eibergen","c":"Netherlands","y":52.1,"x":6.65},{"n":"Bordj Mokhtar","c":"Algeria","y":21.3289,"x":0.9542},{"n":"Cinco Ranch","c":"United States","y":29.7395,"x":-95.7607},{"n":"Sava","c":"Italy","y":40.4003,"x":17.5667},{"n":"San Cristobal Cucho","c":"Guatemala","y":14.9,"x":-91.7833},{"n":"Vlijmen","c":"Netherlands","y":51.6953,"x":5.2119},{"n":"Wolf Trap","c":"United States","y":38.9395,"x":-77.2842},{"n":"Lymington","c":"United Kingdom","y":50.75,"x":-1.55},{"n":"Chickasha","c":"United States","y":35.041,"x":-97.9472},{"n":"Finsterwalde","c":"Germany","y":51.6331,"x":13.7167},{"n":"Pindorama","c":"Brazil","y":-21.1858,"x":-48.9069},{"n":"Las Cabezas de San Juan","c":"Spain","y":36.9817,"x":-5.9406},{"n":"Verkhivtseve","c":"Ukraine","y":48.4812,"x":34.2488},{"n":"Curacautin","c":"Chile","y":-38.4333,"x":-71.8833},{"n":"Przeworsk","c":"Poland","y":50.0591,"x":22.4941},{"n":"Lumbayanague","c":"Philippines","y":7.7833,"x":124.2833},{"n":"Al Hibah","c":"Egypt","y":28.8,"x":30.9167},{"n":"Uckfield","c":"United Kingdom","y":50.97,"x":0.1},{"n":"Portachuelo","c":"Bolivia","y":-17.3547,"x":-63.3947},{"n":"Kings Park","c":"United States","y":40.8887,"x":-73.2452},{"n":"Groveland","c":"United States","y":28.6021,"x":-81.8204},{"n":"Tirhassaline","c":"Morocco","y":32.7822,"x":-5.6517},{"n":"Manturovo","c":"Russia","y":58.3333,"x":44.7667},{"n":"Piera","c":"Spain","y":41.5222,"x":1.7494},{"n":"Cinnaminson","c":"United States","y":40.0008,"x":-74.993},{"n":"Bituruna","c":"Brazil","y":-26.1608,"x":-51.5528},{"n":"La Falda","c":"Argentina","y":-31.0833,"x":-64.5},{"n":"Collipulli","c":"Chile","y":-37.95,"x":-72.4333},{"n":"Herisau","c":"Switzerland","y":47.3851,"x":9.2786},{"n":"Aveiro","c":"Brazil","y":-3.6058,"x":-55.3319},{"n":"Bad Lippspringe","c":"Germany","y":51.7833,"x":8.8167},{"n":"Shiraoi","c":"Japan","y":42.55,"x":141.35},{"n":"River Falls","c":"United States","y":44.861,"x":-92.6248},{"n":"Hernando","c":"United States","y":34.85,"x":-89.9922},{"n":"Copparo","c":"Italy","y":44.9,"x":11.8333},{"n":"Acarape","c":"Brazil","y":-4.2242,"x":-38.7083},{"n":"Baipingshan","c":"China","y":26.196,"x":106.55},{"n":"Carcarana","c":"Argentina","y":-32.85,"x":-61.15},{"n":"Wurzen","c":"Germany","y":51.3667,"x":12.7167},{"n":"Sao Pedro do Sul","c":"Brazil","y":-29.6208,"x":-54.1789},{"n":"Ripon","c":"United States","y":37.7417,"x":-121.131},{"n":"Weisswasser/Oberlausitz","c":"Germany","y":51.5,"x":14.6331},{"n":"Penicuik","c":"United Kingdom","y":55.826,"x":-3.22},{"n":"Divrigi","c":"Turkey","y":39.3667,"x":38.1167},{"n":"Codroipo","c":"Italy","y":45.9614,"x":12.9774},{"n":"Montivilliers","c":"France","y":49.5461,"x":0.1881},{"n":"Hude","c":"Germany","y":53.1111,"x":8.4625},{"n":"Petersberg","c":"Germany","y":50.5667,"x":9.7167},{"n":"Penn","c":"United States","y":39.7994,"x":-76.9642},{"n":"Brakel","c":"Germany","y":51.7167,"x":9.1833},{"n":"Bang Phae","c":"Thailand","y":13.6983,"x":99.9068},{"n":"Kierspe","c":"Germany","y":51.1333,"x":7.5667},{"n":"Assai","c":"Brazil","y":-23.3728,"x":-50.8408},{"n":"Saguday","c":"Philippines","y":16.5167,"x":121.6},{"n":"Rio Linda","c":"United States","y":38.6876,"x":-121.4418},{"n":"Bluffdale","c":"United States","y":40.4744,"x":-111.9381},{"n":"Dieburg","c":"Germany","y":49.8985,"x":8.8385},{"n":"Otacilio Costa","c":"Brazil","y":-27.4828,"x":-50.1219},{"n":"Rygge","c":"Norway","y":59.3747,"x":10.7147},{"n":"Pecel","c":"Hungary","y":47.4911,"x":19.3419},{"n":"Oarai","c":"Japan","y":36.3142,"x":140.5839},{"n":"East Greenbush","c":"United States","y":42.6122,"x":-73.6969},{"n":"Storrs","c":"United States","y":41.8045,"x":-72.2552},{"n":"Tapejara","c":"Brazil","y":-23.7328,"x":-52.8728},{"n":"Havelock North","c":"New Zealand","y":-39.6667,"x":176.8833},{"n":"Orimattila","c":"Finland","y":60.8042,"x":25.7333},{"n":"Yorkton","c":"Canada","y":51.2139,"x":-102.4628},{"n":"Schmelz","c":"Germany","y":49.4167,"x":6.8333},{"n":"Burley","c":"United States","y":42.5379,"x":-113.793},{"n":"Donna","c":"United States","y":26.1467,"x":-98.0559},{"n":"Ustron","c":"Poland","y":49.7186,"x":18.8313},{"n":"Michelstadt","c":"Germany","y":49.6786,"x":9.0042},{"n":"Palagiano","c":"Italy","y":40.5833,"x":17.05},{"n":"Straelen","c":"Germany","y":51.45,"x":6.2667},{"n":"Shahriston","c":"Tajikistan","y":39.7667,"x":68.8167},{"n":"Aranyaprathet","c":"Thailand","y":13.6928,"x":102.5017},{"n":"Douar Azla","c":"Morocco","y":35.5317,"x":-5.2885},{"n":"Loxstedt","c":"Germany","y":53.4699,"x":8.6479},{"n":"Tarquinia","c":"Italy","y":42.2492,"x":11.7561},{"n":"Schiffweiler","c":"Germany","y":49.3667,"x":7.1167},{"n":"Ostashkov","c":"Russia","y":57.15,"x":33.1},{"n":"Queensbury","c":"United Kingdom","y":53.7683,"x":-1.8453},{"n":"Ponsacco","c":"Italy","y":43.6167,"x":10.6333},{"n":"Red Wing","c":"United States","y":44.5816,"x":-92.6036},{"n":"Les Herbiers","c":"France","y":46.8711,"x":-1.0136},{"n":"Adjud","c":"Romania","y":46.1,"x":27.1797},{"n":"Halver","c":"Germany","y":51.1834,"x":7.5027},{"n":"Walldorf","c":"Germany","y":49.3,"x":8.65},{"n":"Fallon","c":"United States","y":39.4738,"x":-118.778},{"n":"Lyss","c":"Switzerland","y":47.075,"x":7.3069},{"n":"Chamgardan","c":"Iran","y":32.3933,"x":51.3408},{"n":"Novoanninskiy","c":"Russia","y":50.5167,"x":42.6667},{"n":"Guerande","c":"France","y":47.3281,"x":-2.4292},{"n":"Itau de Minas","c":"Brazil","y":-20.7389,"x":-46.7519},{"n":"Fairview Heights","c":"United States","y":38.5974,"x":-90.0053},{"n":"Celina","c":"United States","y":33.3188,"x":-96.7865},{"n":"Timezgana","c":"Morocco","y":34.5833,"x":-4.7333},{"n":"Bikou","c":"China","y":32.7522,"x":105.2424},{"n":"Ospitaletto","c":"Italy","y":45.5553,"x":10.0733},{"n":"Guardamar del Segura","c":"Spain","y":38.0897,"x":-0.655},{"n":"'Ayn Bni Mathar","c":"Morocco","y":34.0889,"x":-2.0247},{"n":"Gun Barrel City","c":"United States","y":32.3277,"x":-96.1287},{"n":"Thermi","c":"Greece","y":40.5472,"x":23.0197},{"n":"Chaona","c":"China","y":35.0895,"x":107.219},{"n":"Kabo","c":"Central African Republic","y":7.6994,"x":18.6292},{"n":"Rumilly","c":"France","y":45.8667,"x":5.9444},{"n":"Arzua","c":"Spain","y":42.9167,"x":-8.2167},{"n":"Chateau-Thierry","c":"France","y":49.0464,"x":3.4031},{"n":"North Whitehall","c":"United States","y":40.6797,"x":-75.5788},{"n":"Cacu","c":"Brazil","y":-18.5569,"x":-51.1308},{"n":"Morton","c":"United States","y":40.6136,"x":-89.4669},{"n":"Port Jervis","c":"United States","y":41.3783,"x":-74.6909},{"n":"Red Hill","c":"United States","y":33.7777,"x":-79.0111},{"n":"Vila Bela da Santissima Trindade","c":"Brazil","y":-15.0078,"x":-59.9508},{"n":"Petrovsk-Zabaykal'skiy","c":"Russia","y":51.2833,"x":108.8333},{"n":"Loboc","c":"Philippines","y":9.6333,"x":124.0333},{"n":"Kaukauna","c":"United States","y":44.2776,"x":-88.2645},{"n":"San Antonio Oeste","c":"Argentina","y":-40.7333,"x":-64.95},{"n":"Mezokovesd","c":"Hungary","y":47.8067,"x":20.5647},{"n":"Adwick le Street","c":"United Kingdom","y":53.5677,"x":-1.1931},{"n":"Fort Thomas","c":"United States","y":39.0802,"x":-84.4518},{"n":"Erwitte","c":"Germany","y":51.6167,"x":8.3497},{"n":"Mebane","c":"United States","y":36.0857,"x":-79.2763},{"n":"Guanagazapa","c":"Guatemala","y":14.2333,"x":-90.65},{"n":"Capinopolis","c":"Brazil","y":-18.6819,"x":-49.57},{"n":"Zegzel","c":"Morocco","y":34.8407,"x":-2.3543},{"n":"Mount Holly","c":"United States","y":35.3136,"x":-81.0072},{"n":"Landen","c":"Belgium","y":50.7547,"x":5.0814},{"n":"Conyers","c":"United States","y":33.6645,"x":-83.9966},{"n":"Nanzuo","c":"China","y":37.8369,"x":114.3591},{"n":"Clausthal-Zellerfeld","c":"Germany","y":51.805,"x":10.3356},{"n":"Bruck an der Mur","c":"Austria","y":47.4106,"x":15.2686},{"n":"Xiaozhengzhuang","c":"China","y":39.625,"x":117.9031},{"n":"Nonantola","c":"Italy","y":44.6777,"x":11.043},{"n":"Igapora","c":"Brazil","y":-13.7728,"x":-42.7139},{"n":"Centerton","c":"United States","y":36.3567,"x":-94.2971},{"n":"Yaojia","c":"China","y":28.4547,"x":109.1831},{"n":"Sered'","c":"Slovakia","y":48.2833,"x":17.7333},{"n":"East Longmeadow","c":"United States","y":42.0597,"x":-72.499},{"n":"Perchtoldsdorf","c":"Austria","y":48.1167,"x":16.2667},{"n":"Leixlip","c":"Ireland","y":53.3636,"x":-6.4864},{"n":"Bad Worishofen","c":"Germany","y":48.0058,"x":10.5969},{"n":"Merate","c":"Italy","y":45.7,"x":9.4333},{"n":"Stuart","c":"United States","y":27.1958,"x":-80.2438},{"n":"Sikeston","c":"United States","y":36.8865,"x":-89.587},{"n":"Pianezza","c":"Italy","y":45.1042,"x":7.55},{"n":"Sulphur Springs","c":"United States","y":33.1421,"x":-95.6124},{"n":"Araputanga","c":"Brazil","y":-15.4708,"x":-58.3528},{"n":"Breaza","c":"Romania","y":45.1872,"x":25.6622},{"n":"San Pedro de Lloc","c":"Peru","y":-7.4267,"x":-79.5038},{"n":"Galliate","c":"Italy","y":45.4833,"x":8.7},{"n":"Ouadhia","c":"Algeria","y":36.55,"x":4.0833},{"n":"Ait Yaazem","c":"Morocco","y":33.7333,"x":-5.5833},{"n":"Poxoreo","c":"Brazil","y":-15.8369,"x":-54.3889},{"n":"Bouchabel","c":"Morocco","y":34.3833,"x":-5.0167},{"n":"San Cesareo","c":"Italy","y":41.8167,"x":12.8},{"n":"San Gabriel","c":"Ecuador","y":0.61,"x":-77.84},{"n":"Boulder City","c":"United States","y":35.8407,"x":-114.9257},{"n":"Buadiposo-Buntong","c":"Philippines","y":7.9667,"x":124.3833},{"n":"Palmitos","c":"Brazil","y":-27.0678,"x":-53.1608},{"n":"Puerto Pimentel","c":"Peru","y":-6.8367,"x":-79.9342},{"n":"Masmouda","c":"Morocco","y":34.7861,"x":-5.7078},{"n":"Pocking","c":"Germany","y":48.3997,"x":13.3167},{"n":"Altinopolis","c":"Brazil","y":-21.0231,"x":-47.3728},{"n":"Chai Prakan","c":"Thailand","y":19.7322,"x":99.1403},{"n":"Horqueta","c":"Paraguay","y":-23.3396,"x":-57.05},{"n":"Getulio Vargas","c":"Brazil","y":-27.89,"x":-52.2278},{"n":"Mujui dos Campos","c":"Brazil","y":-2.6847,"x":-54.6403},{"n":"Barra de Santo Antonio","c":"Brazil","y":-9.4,"x":-35.5},{"n":"Bar","c":"Ukraine","y":49.0781,"x":27.6831},{"n":"Troutdale","c":"United States","y":45.5372,"x":-122.3955},{"n":"Zevenbergen","c":"Netherlands","y":51.6453,"x":4.5997},{"n":"Paulino Neves","c":"Brazil","y":-2.7189,"x":-42.5328},{"n":"Iguatemi","c":"Brazil","y":-23.68,"x":-54.5608},{"n":"Wiefelstede","c":"Germany","y":53.2581,"x":8.1172},{"n":"Babayurt","c":"Russia","y":43.5992,"x":46.7758},{"n":"Huarmey","c":"Peru","y":-10.0686,"x":-78.1603},{"n":"Pelhrimov","c":"Czechia","y":49.4314,"x":15.2234},{"n":"San Tomas","c":"Philippines","y":15.7119,"x":120.5847},{"n":"Quixelo","c":"Brazil","y":-6.2539,"x":-39.2019},{"n":"As Sukhnah","c":"Syria","y":34.8868,"x":38.8721},{"n":"Iraci","c":"Brazil","y":-8.8078,"x":-35.9519},{"n":"Ellington","c":"United States","y":41.9151,"x":-72.4485},{"n":"Rylsk","c":"Russia","y":51.5667,"x":34.6833},{"n":"Conwy","c":"United Kingdom","y":53.28,"x":-3.83},{"n":"Mount Clemens","c":"United States","y":42.5976,"x":-82.882},{"n":"Fairview Park","c":"United States","y":41.4419,"x":-81.853},{"n":"Discovery Bay","c":"United States","y":37.9071,"x":-121.6076},{"n":"Sukth","c":"Albania","y":41.3833,"x":19.5333},{"n":"Ukrainka","c":"Ukraine","y":50.15,"x":30.7519},{"n":"Potenza Picena","c":"Italy","y":43.3663,"x":13.6203},{"n":"Bni Tajjit","c":"Morocco","y":32.2914,"x":-3.466},{"n":"Wardenburg","c":"Germany","y":53.0617,"x":8.1967},{"n":"Corupa","c":"Brazil","y":-26.425,"x":-49.2428},{"n":"Ginatilan","c":"Philippines","y":9.6,"x":123.35},{"n":"Bni Quolla","c":"Morocco","y":34.7381,"x":-5.5442},{"n":"Stallings","c":"United States","y":35.1088,"x":-80.6597},{"n":"Wendelstein","c":"Germany","y":49.3536,"x":11.1483},{"n":"Joaquim Nabuco","c":"Brazil","y":-8.6239,"x":-35.5328},{"n":"Sandhausen","c":"Germany","y":49.3439,"x":8.6581},{"n":"Mezotur","c":"Hungary","y":47.0042,"x":20.6181},{"n":"Minster","c":"United Kingdom","y":51.421,"x":0.809},{"n":"Baleyara","c":"Niger","y":13.7841,"x":2.9515},{"n":"Taucha","c":"Germany","y":51.38,"x":12.4936},{"n":"Lubbenau/Spreewald","c":"Germany","y":51.8667,"x":13.9667},{"n":"Westwood","c":"United States","y":42.2202,"x":-71.2106},{"n":"Chenove","c":"France","y":47.2911,"x":5.0072},{"n":"Barrington","c":"United States","y":41.7443,"x":-71.3145},{"n":"Hongsi","c":"China","y":35.5113,"x":105.5136},{"n":"Ebersbach an der Fils","c":"Germany","y":48.7147,"x":9.5236},{"n":"Chinggil","c":"China","y":46.666,"x":90.3794},{"n":"Arteche","c":"Philippines","y":12.2694,"x":125.3712},{"n":"Csongrad","c":"Hungary","y":46.7111,"x":20.1403},{"n":"Altopascio","c":"Italy","y":43.8167,"x":10.6747},{"n":"Kodinsk","c":"Russia","y":58.6,"x":99.1833},{"n":"Tracadie","c":"Canada","y":47.5124,"x":-64.9101},{"n":"Alsfeld","c":"Germany","y":50.7511,"x":9.2711},{"n":"Whittlesey","c":"United Kingdom","y":52.558,"x":-0.13},{"n":"Dalachi","c":"China","y":36.6371,"x":105.0142},{"n":"Center Point","c":"United States","y":33.6446,"x":-86.6851},{"n":"Canyon","c":"United States","y":34.9877,"x":-101.9178},{"n":"Coulommiers","c":"France","y":48.8156,"x":3.0836},{"n":"Washougal","c":"United States","y":45.5822,"x":-122.3448},{"n":"Degtyarsk","c":"Russia","y":56.7,"x":60.1},{"n":"Aquitania","c":"Colombia","y":5.5194,"x":-72.8836},{"n":"Sassenheim","c":"Netherlands","y":52.2258,"x":4.5225},{"n":"Mulundo","c":"Philippines","y":7.9333,"x":124.3833},{"n":"Saint-Avertin","c":"France","y":47.3667,"x":0.7267},{"n":"Ilave","c":"Peru","y":-16.0866,"x":-69.6354},{"n":"Bridgeview","c":"United States","y":41.7403,"x":-87.8067},{"n":"Telfs","c":"Austria","y":47.3069,"x":11.0722},{"n":"Khat Azakane","c":"Morocco","y":32.2236,"x":-9.1278},{"n":"Nyahanga","c":"Tanzania","y":-2.3829,"x":33.55},{"n":"Nagasu","c":"Japan","y":32.9297,"x":130.4528},{"n":"Certaldo","c":"Italy","y":43.5478,"x":11.0411},{"n":"Fiano Romano","c":"Italy","y":42.1667,"x":12.6},{"n":"Skhour Rehamna","c":"Morocco","y":32.4833,"x":-7.9167},{"n":"Boudjima","c":"Algeria","y":36.814,"x":4.1588},{"n":"Frogn","c":"Norway","y":59.6989,"x":10.6553},{"n":"Stafa","c":"Switzerland","y":47.2401,"x":8.7328},{"n":"Candoi","c":"Brazil","y":-25.6628,"x":-52.1258},{"n":"L'Oulja","c":"Morocco","y":34.2894,"x":-4.9481},{"n":"Griffith","c":"United States","y":41.5279,"x":-87.424},{"n":"Villa Rica","c":"United States","y":33.7305,"x":-84.917},{"n":"Santa Cruz de la Palma","c":"Spain","y":28.6825,"x":-17.765},{"n":"Schluchtern","c":"Germany","y":50.35,"x":9.5167},{"n":"Paluan","c":"Philippines","y":13.4167,"x":120.4667},{"n":"Atescatempa","c":"Guatemala","y":14.175,"x":-89.7417},{"n":"Azzano Decimo","c":"Italy","y":45.8833,"x":12.7167},{"n":"Sansepolcro","c":"Italy","y":43.5756,"x":12.1439},{"n":"Bassum","c":"Germany","y":52.8494,"x":8.7267},{"n":"Fairhaven","c":"United States","y":41.6395,"x":-70.8732},{"n":"Tizi-n-Tleta","c":"Algeria","y":36.5457,"x":4.0571},{"n":"Weener","c":"Germany","y":53.1692,"x":7.3564},{"n":"Alma","c":"United States","y":43.38,"x":-84.6556},{"n":"Dianga","c":"China","y":34.0587,"x":103.2074},{"n":"Bragadiru","c":"Romania","y":44.3694,"x":25.9753},{"n":"Fort Leonard Wood","c":"United States","y":37.7562,"x":-92.1274},{"n":"Chislehurst","c":"United Kingdom","y":51.412,"x":0.075},{"n":"Kasli","c":"Russia","y":55.8833,"x":60.75},{"n":"Guamare","c":"Brazil","y":-5.095,"x":-36.325},{"n":"Villers-les-Nancy","c":"France","y":48.6731,"x":6.1547},{"n":"Shchigry","c":"Russia","y":51.8811,"x":36.9031},{"n":"Lady Lake","c":"United States","y":28.9241,"x":-81.9299},{"n":"Todmorden","c":"United Kingdom","y":53.713,"x":-2.096},{"n":"Welby","c":"United States","y":39.8403,"x":-104.9655},{"n":"Indianola","c":"United States","y":41.3629,"x":-93.5652},{"n":"Pianco","c":"Brazil","y":-7.1978,"x":-37.9289},{"n":"Ban Dung","c":"Thailand","y":17.704,"x":103.2623},{"n":"Bracebridge","c":"Canada","y":45.0333,"x":-79.3},{"n":"Paglat","c":"Philippines","y":6.7811,"x":124.7849},{"n":"Seven Pagodas","c":"India","y":12.6227,"x":80.1939},{"n":"Mennecy","c":"France","y":48.5653,"x":2.4361},{"n":"Kamyzyak","c":"Russia","y":46.1167,"x":48.0833},{"n":"Caetano","c":"Brazil","y":-14.3378,"x":-40.91},{"n":"Fartura","c":"Brazil","y":-23.3883,"x":-49.51},{"n":"Yaransk","c":"Russia","y":57.3033,"x":47.8688},{"n":"Barysh","c":"Russia","y":53.65,"x":47.1167},{"n":"Phelan","c":"United States","y":34.4398,"x":-117.5248},{"n":"Issoire","c":"France","y":45.5442,"x":3.2489},{"n":"Bastogne","c":"Belgium","y":50.0042,"x":5.72},{"n":"Chivolo","c":"Colombia","y":10.0264,"x":-74.6214},{"n":"Santa Maria de Jesus","c":"Guatemala","y":14.4933,"x":-90.7094},{"n":"Lakeway","c":"United States","y":30.3547,"x":-97.9854},{"n":"Alcaniz","c":"Spain","y":41.0511,"x":-0.1336},{"n":"Ghomrassen","c":"Tunisia","y":33.0592,"x":10.34},{"n":"Knaresborough","c":"United Kingdom","y":54.0084,"x":-1.467},{"n":"Dyer","c":"United States","y":41.4976,"x":-87.509},{"n":"Toul","c":"France","y":48.675,"x":5.8917},{"n":"Archer Lodge","c":"United States","y":35.6907,"x":-78.3749},{"n":"Niceville","c":"United States","y":30.5291,"x":-86.4754},{"n":"Bocsa","c":"Romania","y":45.3747,"x":21.7106},{"n":"Blanquefort","c":"France","y":44.9106,"x":-0.6375},{"n":"Trelaze","c":"France","y":47.4461,"x":-0.4664},{"n":"Haddada","c":"Morocco","y":34.222,"x":-6.511},{"n":"Calbuco","c":"Chile","y":-41.7712,"x":-73.1275},{"n":"Fussen","c":"Germany","y":47.5667,"x":10.7},{"n":"Bruggen","c":"Germany","y":51.2417,"x":6.1822},{"n":"Clearlake","c":"United States","y":38.959,"x":-122.633},{"n":"Dehaq","c":"Iran","y":33.1044,"x":50.9589},{"n":"Thundersley","c":"United Kingdom","y":51.57,"x":0.59},{"n":"Marghita","c":"Romania","y":47.35,"x":22.3333},{"n":"Fillmore","c":"United States","y":34.3989,"x":-118.9181},{"n":"Yorito","c":"Honduras","y":15.06,"x":-87.29},{"n":"Talitsa","c":"Russia","y":57.0125,"x":63.7292},{"n":"Rescaldina","c":"Italy","y":45.6167,"x":8.95},{"n":"San Julian","c":"Mexico","y":21.0167,"x":-102.1667},{"n":"Hood River","c":"United States","y":45.7092,"x":-121.5258},{"n":"Plavsk","c":"Russia","y":53.7,"x":37.3},{"n":"Pamiers","c":"France","y":43.1164,"x":1.6108},{"n":"Xixucun","c":"China","y":36.694,"x":113.7967},{"n":"Spanish Springs","c":"United States","y":39.6567,"x":-119.6695},{"n":"Bikin","c":"Russia","y":46.8167,"x":134.25},{"n":"Maardu","c":"Estonia","y":59.4781,"x":25.0161},{"n":"Aramil","c":"Russia","y":56.7,"x":60.8333},{"n":"Boskoop","c":"Netherlands","y":52.0667,"x":4.6333},{"n":"Ain Mediouna","c":"Morocco","y":34.5,"x":-4.55},{"n":"Port Glasgow","c":"United Kingdom","y":55.934,"x":-4.6906},{"n":"Volpiano","c":"Italy","y":45.2,"x":7.7833},{"n":"San Martino Buon Albergo","c":"Italy","y":45.4167,"x":11.1},{"n":"Bois-Guillaume","c":"France","y":49.47,"x":1.1194},{"n":"Comarapa","c":"Bolivia","y":-17.9136,"x":-64.5297},{"n":"Tabatinga","c":"Brazil","y":-21.7169,"x":-48.6878},{"n":"Dinan","c":"France","y":48.4556,"x":-2.0503},{"n":"Oyten","c":"Germany","y":53.0611,"x":9.0178},{"n":"Mottola","c":"Italy","y":40.6333,"x":17.0333},{"n":"Eilenburg","c":"Germany","y":51.4608,"x":12.6358},{"n":"Serta","c":"Portugal","y":39.8008,"x":-8.1003},{"n":"Chiconquiaco","c":"Mexico","y":19.75,"x":-96.8167},{"n":"Monte Plata","c":"Dominican Republic","y":18.807,"x":-69.784},{"n":"Cardonal","c":"Mexico","y":20.6167,"x":-99.1167},{"n":"New River","c":"United States","y":33.8835,"x":-112.0858},{"n":"Sayville","c":"United States","y":40.7478,"x":-73.084},{"n":"Patos","c":"Albania","y":40.6841,"x":19.6194},{"n":"Malta","c":"United States","y":42.9853,"x":-73.7879},{"n":"Dvur Kralove nad Labem","c":"Czechia","y":50.4318,"x":15.8141},{"n":"Warwick","c":"Australia","y":-28.2152,"x":152.0352},{"n":"Alabat","c":"Philippines","y":14.1023,"x":122.0136},{"n":"Beaucaire","c":"France","y":43.8072,"x":4.6433},{"n":"Readington","c":"United States","y":40.5822,"x":-74.7796},{"n":"Tamazouzt","c":"Morocco","y":31.3833,"x":-8.3833},{"n":"Millbrook","c":"United States","y":32.5028,"x":-86.3737},{"n":"Sidi Allal el Bahraoui","c":"Morocco","y":33.983,"x":-6.417},{"n":"Grao Mogol","c":"Brazil","y":-16.5589,"x":-42.89},{"n":"Carthage","c":"United States","y":37.1503,"x":-94.3225},{"n":"Greater Napanee","c":"Canada","y":44.25,"x":-76.95},{"n":"Breisach am Rhein","c":"Germany","y":48.0289,"x":7.58},{"n":"Skvyra","c":"Ukraine","y":49.7333,"x":29.6833},{"n":"Yuvileine","c":"Ukraine","y":48.5531,"x":39.1742},{"n":"Ras El Oued","c":"Morocco","y":34.3903,"x":-4.5072},{"n":"Ivdel","c":"Russia","y":60.6833,"x":60.4333},{"n":"West Lampeter","c":"United States","y":39.9947,"x":-76.256},{"n":"Puquio","c":"Peru","y":-14.6939,"x":-74.1241},{"n":"Prospect Heights","c":"United States","y":42.1039,"x":-87.9267},{"n":"King City","c":"United States","y":36.2166,"x":-121.133},{"n":"Opa-locka","c":"United States","y":25.8997,"x":-80.2551},{"n":"Dilasag","c":"Philippines","y":16.4,"x":122.2167},{"n":"Markranstadt","c":"Germany","y":51.3017,"x":12.2211},{"n":"Pataskala","c":"United States","y":40.011,"x":-82.7155},{"n":"Hedongcun","c":"China","y":37.7546,"x":102.7906},{"n":"Katav-Ivanovsk","c":"Russia","y":54.75,"x":58.2},{"n":"Indiaroba","c":"Brazil","y":-11.5189,"x":-37.5119},{"n":"Mozarlandia","c":"Brazil","y":-14.745,"x":-50.5708},{"n":"Casalpusterlengo","c":"Italy","y":45.1778,"x":9.65},{"n":"Leso","c":"Philippines","y":11.6667,"x":122.3333},{"n":"Galatone","c":"Italy","y":40.15,"x":18.0667},{"n":"Rumst","c":"Belgium","y":51.0769,"x":4.4233},{"n":"Baeza","c":"Spain","y":37.9833,"x":-3.4667},{"n":"Tillsonburg","c":"Canada","y":42.8667,"x":-80.7333},{"n":"Sunset","c":"United States","y":25.7061,"x":-80.353},{"n":"Wadern","c":"Germany","y":49.5394,"x":6.89},{"n":"Saint-Avold","c":"France","y":49.1042,"x":6.7081},{"n":"Tenango de Doria","c":"Mexico","y":20.3356,"x":-98.2267},{"n":"Ince-in-Makerfield","c":"United Kingdom","y":53.5402,"x":-2.599},{"n":"Restinga Seca","c":"Brazil","y":-29.8128,"x":-53.375},{"n":"Tsukumiura","c":"Japan","y":33.0725,"x":131.8611},{"n":"Neustadt in Holstein","c":"Germany","y":54.1072,"x":10.8158},{"n":"Grandville","c":"United States","y":42.9003,"x":-85.7564},{"n":"Ixhuatlan del Sureste","c":"Mexico","y":18.017,"x":-94.38},{"n":"Hibbing","c":"United States","y":47.3981,"x":-92.9487},{"n":"Sarasota Springs","c":"United States","y":27.3092,"x":-82.4788},{"n":"Barrocas","c":"Brazil","y":-11.5289,"x":-39.0778},{"n":"Laguna Woods","c":"United States","y":33.6098,"x":-117.7299},{"n":"Derzhavinsk","c":"Kazakhstan","y":51.1021,"x":66.3075},{"n":"Hope Mills","c":"United States","y":34.969,"x":-78.9559},{"n":"Kumano","c":"Japan","y":33.8833,"x":136.1},{"n":"Ibateguara","c":"Brazil","y":-8.9728,"x":-35.9389},{"n":"El Estor","c":"Guatemala","y":15.5333,"x":-89.35},{"n":"Chenlu","c":"China","y":35.0287,"x":109.1548},{"n":"Surbo","c":"Italy","y":40.4,"x":18.1333},{"n":"Jatauba","c":"Brazil","y":-7.99,"x":-36.4958},{"n":"Sierra Vista Southeast","c":"United States","y":31.4525,"x":-110.216},{"n":"Nymburk","c":"Czechia","y":50.1861,"x":15.0417},{"n":"Templin","c":"Germany","y":53.1167,"x":13.5},{"n":"Wilmington Island","c":"United States","y":32.0036,"x":-80.9752},{"n":"Upper Gwynedd","c":"United States","y":40.2143,"x":-75.289},{"n":"Kalininsk","c":"Russia","y":51.5,"x":44.45},{"n":"Easthampton","c":"United States","y":42.2652,"x":-72.672},{"n":"Steinbach","c":"Canada","y":49.5258,"x":-96.6839},{"n":"Bad Neustadt","c":"Germany","y":50.3219,"x":10.2161},{"n":"Papagaios","c":"Brazil","y":-19.4489,"x":-44.7478},{"n":"Patton","c":"United States","y":40.8258,"x":-77.9237},{"n":"Biritinga","c":"Brazil","y":-11.6169,"x":-38.8},{"n":"Lumbreras","c":"Spain","y":37.5633,"x":-1.8072},{"n":"Naivasha","c":"Kenya","y":-0.7167,"x":36.4359},{"n":"Grossenkneten","c":"Germany","y":52.95,"x":8.2667},{"n":"Humble","c":"United States","y":29.9921,"x":-95.2655},{"n":"Mamadysh","c":"Russia","y":55.7,"x":51.4},{"n":"Konigslutter am Elm","c":"Germany","y":52.25,"x":10.8167},{"n":"Echuca","c":"Australia","y":-36.1333,"x":144.75},{"n":"Taurianova","c":"Italy","y":38.35,"x":16.0167},{"n":"Lagoa Real","c":"Brazil","y":-14.035,"x":-42.1419},{"n":"Ovruch","c":"Ukraine","y":51.3244,"x":28.8081},{"n":"Carterton","c":"United Kingdom","y":51.76,"x":-1.59},{"n":"Bredasdorp","c":"South Africa","y":-34.5333,"x":20.0417},{"n":"Duxbury","c":"United States","y":42.0465,"x":-70.7139},{"n":"Port Washington","c":"United States","y":40.8268,"x":-73.6764},{"n":"Yasnyy","c":"Russia","y":51.0333,"x":59.8667},{"n":"Putyvl","c":"Ukraine","y":51.3347,"x":33.8686},{"n":"Nova Ponte","c":"Brazil","y":-19.1983,"x":-47.7272},{"n":"Shahr-e Jadid-e Hashtgerd","c":"Iran","y":35.9825,"x":50.7353},{"n":"Sopelana","c":"Spain","y":43.3814,"x":-2.9792},{"n":"Sao Joao Evangelista","c":"Brazil","y":-18.5478,"x":-42.7628},{"n":"Macedo de Cavaleiros","c":"Portugal","y":41.5333,"x":-6.95},{"n":"Bad Essen","c":"Germany","y":52.3214,"x":8.34},{"n":"Pereiro","c":"Brazil","y":-6.045,"x":-38.4608},{"n":"Castenaso","c":"Italy","y":44.5097,"x":11.4706},{"n":"Circleville","c":"United States","y":39.6063,"x":-82.9334},{"n":"Hautmont","c":"France","y":50.2481,"x":3.9244},{"n":"Longmeadow","c":"United States","y":42.0475,"x":-72.5718},{"n":"Ulladulla","c":"Australia","y":-35.3486,"x":150.4678},{"n":"Plochingen","c":"Germany","y":48.7117,"x":9.4164},{"n":"Omegna","c":"Italy","y":45.8781,"x":8.4069},{"n":"Itajiba","c":"Brazil","y":-14.2839,"x":-39.8428},{"n":"Bengonbeyene","c":"Equatorial Guinea","y":1.6931,"x":11.0342},{"n":"Juma Shahri","c":"Uzbekistan","y":39.7094,"x":66.6614},{"n":"Niederkruchten","c":"Germany","y":51.1989,"x":6.2194},{"n":"Totteridge","c":"United Kingdom","y":51.6354,"x":-0.2},{"n":"Kalocsa","c":"Hungary","y":46.5333,"x":18.9856},{"n":"Kempsey","c":"Australia","y":-31.0833,"x":152.8333},{"n":"Kafr Nubl","c":"Syria","y":35.6139,"x":36.5611},{"n":"Agua Clara","c":"Brazil","y":-20.45,"x":-52.8667},{"n":"Acajutiba","c":"Brazil","y":-11.6619,"x":-38.0169},{"n":"Tiverton","c":"United States","y":41.6091,"x":-71.1741},{"n":"Sakha","c":"Egypt","y":31.0881,"x":30.9456},{"n":"White","c":"United States","y":40.621,"x":-79.1513},{"n":"Guasca","c":"Colombia","y":4.8658,"x":-73.8772},{"n":"Abadiania","c":"Brazil","y":-16.2039,"x":-48.7069},{"n":"Fos-sur-Mer","c":"France","y":43.4544,"x":4.9436},{"n":"Cassina de' Pecchi","c":"Italy","y":45.5167,"x":9.3667},{"n":"Molinella","c":"Italy","y":44.6167,"x":11.6667},{"n":"Saboeiro","c":"Brazil","y":-6.5419,"x":-39.9069},{"n":"Punta Umbria","c":"Spain","y":37.1667,"x":-6.95},{"n":"Powder Springs","c":"United States","y":33.8659,"x":-84.6838},{"n":"Ershui","c":"Taiwan","y":23.8167,"x":120.6167},{"n":"Flowing Wells","c":"United States","y":32.2937,"x":-111.011},{"n":"Jiaojiazhuang","c":"China","y":38.2636,"x":101.8328},{"n":"Wenwu","c":"China","y":24.7413,"x":116.1942},{"n":"Itamonte","c":"Brazil","y":-22.2839,"x":-44.87},{"n":"Clark","c":"United States","y":40.6203,"x":-74.3135},{"n":"Voss","c":"Norway","y":60.7025,"x":6.4231},{"n":"San Giorgio Ionico","c":"Italy","y":40.45,"x":17.3667},{"n":"Purcellville","c":"United States","y":39.1378,"x":-77.7109},{"n":"Nova Olinda","c":"Brazil","y":-7.0919,"x":-39.6808},{"n":"Si Satchanalai","c":"Thailand","y":17.4155,"x":99.8152},{"n":"Pornic","c":"France","y":47.1156,"x":-2.1033},{"n":"Greenwood Village","c":"United States","y":39.6152,"x":-104.913},{"n":"Hanover","c":"Canada","y":49.4433,"x":-96.8492},{"n":"Spittal an der Drau","c":"Austria","y":46.7917,"x":13.4958},{"n":"Finale Emilia","c":"Italy","y":44.8319,"x":11.2957},{"n":"Despujols","c":"Philippines","y":12.5333,"x":122.025},{"n":"Ulverstone","c":"Australia","y":-41.1667,"x":146.1667},{"n":"Middle Smithfield","c":"United States","y":41.0918,"x":-75.1031},{"n":"Riposto","c":"Italy","y":37.7333,"x":15.2},{"n":"Terrace","c":"Canada","y":54.5164,"x":-128.5997},{"n":"Sabinopolis","c":"Brazil","y":-18.6658,"x":-43.0839},{"n":"Yasnogorsk","c":"Russia","y":54.4794,"x":37.6934},{"n":"Paola","c":"Italy","y":39.3667,"x":16.0333},{"n":"Tiran","c":"Iran","y":32.7025,"x":51.1536},{"n":"Farmingville","c":"United States","y":40.8389,"x":-73.0401},{"n":"Andrews","c":"United States","y":32.3208,"x":-102.552},{"n":"Sumidouro","c":"Brazil","y":-22.05,"x":-42.675},{"n":"Castelnuovo Rangone","c":"Italy","y":44.5519,"x":10.9358},{"n":"Kysucke Nove Mesto","c":"Slovakia","y":49.3,"x":18.7833},{"n":"Tiszaujvaros","c":"Hungary","y":47.9228,"x":21.0519},{"n":"Crepy-en-Valois","c":"France","y":49.2344,"x":2.8875},{"n":"Ostroh","c":"Ukraine","y":50.3333,"x":26.5167},{"n":"Newberry","c":"United States","y":40.1286,"x":-76.792},{"n":"Erlensee","c":"Germany","y":50.1635,"x":8.9808},{"n":"Zhirnovsk","c":"Russia","y":50.9833,"x":44.7667},{"n":"Varnsdorf","c":"Czechia","y":50.9116,"x":14.6184},{"n":"Blytheville","c":"United States","y":35.9321,"x":-89.9051},{"n":"Ben Taieb","c":"Morocco","y":35.0837,"x":-3.4696},{"n":"Winkfield","c":"United Kingdom","y":51.4318,"x":-0.7096},{"n":"Einsiedeln","c":"Switzerland","y":47.1278,"x":8.7431},{"n":"Corbera de Llobregat","c":"Spain","y":41.4169,"x":1.9314},{"n":"Kuusamo","c":"Finland","y":65.9667,"x":29.1667},{"n":"Midar","c":"Morocco","y":34.95,"x":-3.5333},{"n":"Shively","c":"United States","y":38.197,"x":-85.8136},{"n":"Suffield","c":"United States","y":41.9945,"x":-72.6789},{"n":"Drensteinfurt","c":"Germany","y":51.7944,"x":7.7392},{"n":"Featherstone","c":"United Kingdom","y":53.7,"x":-1.37},{"n":"Lagoa dos Gatos","c":"Brazil","y":-8.6578,"x":-35.9},{"n":"Mitchell","c":"United States","y":43.7296,"x":-98.0337},{"n":"Opera","c":"Italy","y":45.3833,"x":9.2167},{"n":"Rakhiv","c":"Ukraine","y":48.05,"x":24.2167},{"n":"Ipanguacu","c":"Brazil","y":-5.4978,"x":-36.855},{"n":"Kasagi","c":"Japan","y":34.2964,"x":135.5042},{"n":"Ac-cahrij","c":"Morocco","y":31.8,"x":-7.14},{"n":"Valeggio sul Mincio","c":"Italy","y":45.35,"x":10.7333},{"n":"Casalmaggiore","c":"Italy","y":44.9858,"x":10.4147},{"n":"Schonefeld","c":"Germany","y":52.3883,"x":13.5047},{"n":"Szarvas","c":"Hungary","y":46.85,"x":20.6},{"n":"West Norriton","c":"United States","y":40.1308,"x":-75.3795},{"n":"Mortara","c":"Italy","y":45.25,"x":8.75},{"n":"Tobetsu","c":"Japan","y":43.2239,"x":141.5172},{"n":"Helensburgh","c":"United Kingdom","y":56.0166,"x":-4.7333},{"n":"Atacames","c":"Ecuador","y":0.8667,"x":-79.8333},{"n":"Gaillac","c":"France","y":43.9006,"x":1.8983},{"n":"Rio do Antonio","c":"Brazil","y":-14.4108,"x":-42.0758},{"n":"Bad Bentheim","c":"Germany","y":52.3031,"x":7.1597},{"n":"Lindas","c":"Norway","y":60.6247,"x":5.3283},{"n":"Dolo","c":"Italy","y":45.4249,"x":12.0758},{"n":"Ceska Trebova","c":"Czechia","y":49.9019,"x":16.4473},{"n":"Tanque Verde","c":"United States","y":32.2687,"x":-110.7437},{"n":"Bolotnoye","c":"Russia","y":55.6667,"x":84.4},{"n":"Serpa","c":"Portugal","y":37.9333,"x":-7.5833},{"n":"Baia-Sprie","c":"Romania","y":47.6608,"x":23.6886},{"n":"Alvinopolis","c":"Brazil","y":-20.1069,"x":-43.0489},{"n":"Miguelturra","c":"Spain","y":38.9647,"x":-3.8911},{"n":"Saint-Omer","c":"France","y":50.7483,"x":2.2608},{"n":"Elkton","c":"United States","y":39.6067,"x":-75.8208},{"n":"Kinna","c":"Sweden","y":57.4954,"x":12.6805},{"n":"Santa Ursula","c":"Spain","y":28.4253,"x":-16.4917},{"n":"Shizukuishi","c":"Japan","y":39.6942,"x":140.9844},{"n":"Three Lakes","c":"United States","y":25.6415,"x":-80.4},{"n":"South Fayette","c":"United States","y":40.3556,"x":-80.1618},{"n":"Mangqu","c":"China","y":35.5707,"x":100.7798},{"n":"Jedrzejow","c":"Poland","y":50.6333,"x":20.3},{"n":"Loncoche","c":"Chile","y":-39.3669,"x":-72.6308},{"n":"Espumoso","c":"Brazil","y":-28.725,"x":-52.85},{"n":"Bohodukhiv","c":"Ukraine","y":50.1608,"x":35.5164},{"n":"Corridonia","c":"Italy","y":43.2482,"x":13.5075},{"n":"Agios Athanasios","c":"Cyprus","y":34.7087,"x":33.0504},{"n":"Caudry","c":"France","y":50.125,"x":3.4117},{"n":"At-Bashy","c":"Kyrgyzstan","y":41.1725,"x":75.7968},{"n":"Kuala Lipis","c":"Malaysia","y":4.184,"x":102.042},{"n":"Fate","c":"United States","y":32.9429,"x":-96.3858},{"n":"Ipua","c":"Brazil","y":-20.4381,"x":-48.0122},{"n":"Poco Branco","c":"Brazil","y":-5.6228,"x":-35.6628},{"n":"Ban Na Kham","c":"Thailand","y":14.0681,"x":101.8125},{"n":"Borborema","c":"Brazil","y":-21.62,"x":-49.0739},{"n":"Najasa","c":"Cuba","y":21.0836,"x":-77.7472},{"n":"Bunnik","c":"Netherlands","y":52.0672,"x":5.1969},{"n":"Soliera","c":"Italy","y":44.7381,"x":10.9245},{"n":"Mandal","c":"Norway","y":58.0333,"x":7.4833},{"n":"Kunzelsau","c":"Germany","y":49.2833,"x":9.6833},{"n":"Hille","c":"Germany","y":52.3331,"x":8.75},{"n":"Riverdale","c":"United States","y":33.564,"x":-84.4103},{"n":"Fort Mohave","c":"United States","y":35.0004,"x":-114.5748},{"n":"Ban Duea","c":"Thailand","y":16.1253,"x":101.8967},{"n":"Castellarano","c":"Italy","y":44.5139,"x":10.7339},{"n":"Chubbuck","c":"United States","y":42.9261,"x":-112.4624},{"n":"Siemiatycze","c":"Poland","y":52.4272,"x":22.8625},{"n":"Dionisio Cerqueira","c":"Brazil","y":-26.255,"x":-53.64},{"n":"Campos Altos","c":"Brazil","y":-19.6958,"x":-46.1708},{"n":"Dastgerd","c":"Iran","y":32.8019,"x":51.6636},{"n":"Urziceni","c":"Romania","y":44.7181,"x":26.6453},{"n":"Weston","c":"United Kingdom","y":53.413,"x":-2.798},{"n":"North Reading","c":"United States","y":42.5816,"x":-71.0876},{"n":"Banqiao","c":"China","y":35.8912,"x":107.9655},{"n":"Antrim","c":"United States","y":39.7863,"x":-77.722},{"n":"Svetogorsk","c":"Russia","y":61.1083,"x":28.8583},{"n":"Hemsworth","c":"United Kingdom","y":53.61,"x":-1.35},{"n":"Burbage","c":"United Kingdom","y":52.5277,"x":-1.3483},{"n":"Privolzhsk","c":"Russia","y":57.3833,"x":41.2833},{"n":"Chiaravalle","c":"Italy","y":43.5997,"x":13.3257},{"n":"La Roda","c":"Spain","y":39.207,"x":-2.1604},{"n":"Potsdam","c":"United States","y":44.6774,"x":-75.0396},{"n":"Khamir","c":"Yemen","y":15.99,"x":43.95},{"n":"Parvomay","c":"Bulgaria","y":42.0994,"x":25.2242},{"n":"Frei Miguelinho","c":"Brazil","y":-7.9408,"x":-35.9106},{"n":"Longwood","c":"United States","y":28.7014,"x":-81.3487},{"n":"Ipecaeta","c":"Brazil","y":-12.3,"x":-39.3078},{"n":"Baiceng","c":"China","y":25.3885,"x":105.7848},{"n":"Sayo","c":"Japan","y":35.0042,"x":134.3558},{"n":"Wawizaght","c":"Morocco","y":32.16,"x":-6.35},{"n":"Schriesheim","c":"Germany","y":49.4736,"x":8.6592},{"n":"Ludus","c":"Romania","y":46.4778,"x":24.0961},{"n":"Castiglione del Lago","c":"Italy","y":43.1271,"x":12.0452},{"n":"Stahnsdorf","c":"Germany","y":52.3922,"x":13.2167},{"n":"Rahden","c":"Germany","y":52.4167,"x":8.6167},{"n":"Kawasaki","c":"Japan","y":33.6,"x":130.8153},{"n":"Overland","c":"United States","y":38.6966,"x":-90.3689},{"n":"Dunn","c":"United States","y":35.3113,"x":-78.6129},{"n":"Alvaraes","c":"Brazil","y":-3.2,"x":-64.8333},{"n":"Khao Yoi","c":"Thailand","y":13.2403,"x":99.8254},{"n":"Houghton","c":"United States","y":47.1119,"x":-88.5672},{"n":"Uusikaupunki","c":"Finland","y":60.7833,"x":21.4167},{"n":"Cambuci","c":"Brazil","y":-21.575,"x":-41.9108},{"n":"Ladson","c":"United States","y":33.0092,"x":-80.1078},{"n":"Daigo","c":"Japan","y":36.7667,"x":140.35},{"n":"Nova Timboteua","c":"Brazil","y":-1.2058,"x":-47.3858},{"n":"Jurema","c":"Brazil","y":-8.7178,"x":-36.1358},{"n":"La Solana","c":"Spain","y":38.9414,"x":-3.2394},{"n":"Zelenogradsk","c":"Russia","y":54.95,"x":20.4833},{"n":"Abaza","c":"Russia","y":52.65,"x":90.0833},{"n":"Vieiro","c":"Spain","y":43.6481,"x":-7.59},{"n":"Fiorenzuola d'Arda","c":"Italy","y":44.9333,"x":9.9},{"n":"Itanhandu","c":"Brazil","y":-22.2958,"x":-44.935},{"n":"Boppard","c":"Germany","y":50.2314,"x":7.5908},{"n":"Limanowa","c":"Poland","y":49.7167,"x":20.4667},{"n":"Blackfoot","c":"United States","y":43.194,"x":-112.3455},{"n":"Ifrane","c":"Morocco","y":33.5333,"x":-5.1167},{"n":"Buford","c":"United States","y":34.1185,"x":-83.9916},{"n":"Tasquillo","c":"Mexico","y":20.6167,"x":-99.25},{"n":"Lake Geneva","c":"United States","y":42.5824,"x":-88.4281},{"n":"Ascheberg","c":"Germany","y":51.7889,"x":7.62},{"n":"Simmerath","c":"Germany","y":50.6,"x":6.2997},{"n":"La Grande","c":"United States","y":45.3243,"x":-118.0865},{"n":"Genappe","c":"Belgium","y":50.6103,"x":4.4497},{"n":"Balassagyarmat","c":"Hungary","y":48.0712,"x":19.2937},{"n":"Senlis","c":"France","y":49.2072,"x":2.5867},{"n":"Barwon Heads","c":"Australia","y":-38.25,"x":144.5167},{"n":"Cruzilia","c":"Brazil","y":-21.8389,"x":-44.8078},{"n":"Neustadt bei Coburg","c":"Germany","y":50.3289,"x":11.1211},{"n":"Panorama","c":"Brazil","y":-21.3564,"x":-51.86},{"n":"Passo de Camarajibe","c":"Brazil","y":-9.2378,"x":-35.4928},{"n":"Chiva","c":"Spain","y":39.4714,"x":-0.7197},{"n":"Narragansett","c":"United States","y":41.4291,"x":-71.4669},{"n":"Broxbourne","c":"United Kingdom","y":51.7495,"x":-0.0216},{"n":"Dom Feliciano","c":"Brazil","y":-30.7039,"x":-52.1078},{"n":"East Highland Park","c":"United States","y":37.577,"x":-77.3865},{"n":"Linguere","c":"Senegal","y":15.3833,"x":-15.2167},{"n":"Fontainebleau","c":"France","y":48.4089,"x":2.7017},{"n":"Piquet Carneiro","c":"Brazil","y":-5.8039,"x":-39.4178},{"n":"Hilvarenbeek","c":"Netherlands","y":51.4861,"x":5.1367},{"n":"Ober-Ramstadt","c":"Germany","y":49.8333,"x":8.75},{"n":"Castanet-Tolosan","c":"France","y":43.5156,"x":1.4981},{"n":"Australind","c":"Australia","y":-33.28,"x":115.726},{"n":"Outreau","c":"France","y":50.7039,"x":1.5939},{"n":"Mirandiba","c":"Brazil","y":-8.1189,"x":-38.7278},{"n":"Salinas da Margarida","c":"Brazil","y":-12.8708,"x":-38.7639},{"n":"Pontivy","c":"France","y":48.0686,"x":-2.9628},{"n":"Mainburg","c":"Germany","y":48.65,"x":11.7833},{"n":"Glen Allen","c":"United States","y":37.666,"x":-77.4838},{"n":"Riegelsberg","c":"Germany","y":49.2942,"x":6.9375},{"n":"Ratekau","c":"Germany","y":53.95,"x":10.7333},{"n":"Seven Oaks","c":"United States","y":34.0474,"x":-81.1434},{"n":"Taphan Hin","c":"Thailand","y":16.2108,"x":100.4188},{"n":"Santa","c":"Philippines","y":17.4917,"x":120.4333},{"n":"Jelcz-Laskowice","c":"Poland","y":51.0333,"x":17.3333},{"n":"Groves","c":"United States","y":29.9457,"x":-93.9164},{"n":"Pargas","c":"Finland","y":60.3,"x":22.3},{"n":"Flers","c":"France","y":48.7483,"x":-0.5694},{"n":"Mastic","c":"United States","y":40.8098,"x":-72.8479},{"n":"Galanta","c":"Slovakia","y":48.1914,"x":17.7308},{"n":"Hofgeismar","c":"Germany","y":51.496,"x":9.3872},{"n":"Hermitage","c":"United States","y":41.2305,"x":-80.4414},{"n":"Madagh","c":"Morocco","y":35.0103,"x":-2.337},{"n":"Salitre","c":"Brazil","y":-7.2839,"x":-40.4606},{"n":"Forks","c":"United States","y":40.7358,"x":-75.2211},{"n":"Churumuco de Morelos","c":"Mexico","y":18.6167,"x":-101.6333},{"n":"Petersfield","c":"United Kingdom","y":51.0038,"x":-0.9345},{"n":"Sulat","c":"Philippines","y":11.8167,"x":125.45},{"n":"Sale","c":"Australia","y":-38.1,"x":147.0667},{"n":"Torello","c":"Spain","y":42.0492,"x":2.2629},{"n":"Cloverly","c":"United States","y":39.1065,"x":-76.9993},{"n":"Bouc-Bel-Air","c":"France","y":43.4544,"x":5.4144},{"n":"San Rafael Pie de la Cuesta","c":"Guatemala","y":14.9333,"x":-91.9167},{"n":"Ezzhiliga","c":"Morocco","y":33.3,"x":-6.5333},{"n":"Talladega","c":"United States","y":33.4329,"x":-86.0976},{"n":"Anazzou","c":"Morocco","y":30.6333,"x":-8.05},{"n":"Erjie","c":"China","y":24.6997,"x":102.4872},{"n":"Langenau","c":"Germany","y":48.4994,"x":10.1211},{"n":"Coremas","c":"Brazil","y":-7.0139,"x":-37.9458},{"n":"Felixlandia","c":"Brazil","y":-18.7578,"x":-44.8989},{"n":"Belvedere Park","c":"United States","y":33.7488,"x":-84.2598},{"n":"Seekonk","c":"United States","y":41.8379,"x":-71.3174},{"n":"Glucholazy","c":"Poland","y":50.3131,"x":17.3742},{"n":"Kerouane","c":"Guinea","y":9.2704,"x":-9.02},{"n":"Hayden","c":"United States","y":47.768,"x":-116.8039},{"n":"Moul El Bergui","c":"Morocco","y":32.5228,"x":-8.9986},{"n":"Middleburg Heights","c":"United States","y":41.3695,"x":-81.8151},{"n":"Ait Yazza","c":"Morocco","y":30.5119,"x":-8.7978},{"n":"Rellingen","c":"Germany","y":53.65,"x":9.8167},{"n":"Konarka","c":"India","y":19.8878,"x":86.0948},{"n":"Klimavichy","c":"Belarus","y":53.6167,"x":31.95},{"n":"Hilltown","c":"United States","y":40.3416,"x":-75.2534},{"n":"Huohua","c":"China","y":25.6952,"x":106.0514},{"n":"Grenzach-Wyhlen","c":"Germany","y":47.5517,"x":7.6592},{"n":"Kanegasaki","c":"Japan","y":39.1956,"x":141.1161},{"n":"Rubiera","c":"Italy","y":44.65,"x":10.7833},{"n":"Jacaraci","c":"Brazil","y":-14.85,"x":-42.4328},{"n":"Edingen-Neckarhausen","c":"Germany","y":49.4469,"x":8.6094},{"n":"Landazuri","c":"Colombia","y":6.2181,"x":-73.8114},{"n":"Amatitan","c":"Mexico","y":20.8333,"x":-103.7167},{"n":"Villa del Rosario","c":"Argentina","y":-31.5833,"x":-63.5333},{"n":"Conguaco","c":"Guatemala","y":14.047,"x":-90.0336},{"n":"Cumru","c":"United States","y":40.2811,"x":-75.9544},{"n":"Entre Rios de Minas","c":"Brazil","y":-20.6708,"x":-44.0658},{"n":"Barro Alto","c":"Brazil","y":-11.7608,"x":-41.9119},{"n":"Mendrisio","c":"Switzerland","y":45.8667,"x":8.9833},{"n":"Nyunzu","c":"Congo (Kinshasa)","y":-5.95,"x":28.0167},{"n":"Bakun","c":"Philippines","y":16.7922,"x":120.6653},{"n":"Pulaski","c":"United States","y":37.0528,"x":-80.7624},{"n":"Mian Sahib","c":"Pakistan","y":28.1559,"x":68.6397},{"n":"Saint-Rambert","c":"France","y":45.4994,"x":4.24},{"n":"Kusnacht","c":"Switzerland","y":47.3181,"x":8.5825},{"n":"Calolziocorte","c":"Italy","y":45.8,"x":9.4333},{"n":"Tarascon","c":"France","y":43.805,"x":4.6594},{"n":"Julita","c":"Philippines","y":10.9667,"x":124.9667},{"n":"Waikanae","c":"New Zealand","y":-40.876,"x":175.064},{"n":"Odenthal","c":"Germany","y":51.0333,"x":7.1167},{"n":"Campina da Lagoa","c":"Brazil","y":-24.5919,"x":-52.7989},{"n":"Grafelfing","c":"Germany","y":48.1189,"x":11.4289},{"n":"Northview","c":"United States","y":43.0427,"x":-85.6016},{"n":"Hohenstein-Ernstthal","c":"Germany","y":50.8,"x":12.7167},{"n":"South Middleton","c":"United States","y":40.1322,"x":-77.1641},{"n":"Thoen","c":"Thailand","y":17.61,"x":99.2234},{"n":"Rochedale","c":"Australia","y":-27.5952,"x":153.1233},{"n":"Ashtead","c":"United Kingdom","y":51.31,"x":-0.299},{"n":"Olonne-sur-Mer","c":"France","y":46.5361,"x":-1.7728},{"n":"Tendrara","c":"Morocco","y":33.05,"x":-2},{"n":"Moreau","c":"United States","y":43.2469,"x":-73.6659},{"n":"Bom Jesus do Galho","c":"Brazil","y":-19.8289,"x":-42.3158},{"n":"Feucht","c":"Germany","y":49.3758,"x":11.2131},{"n":"Fraga","c":"Spain","y":41.52,"x":0.35},{"n":"Itapagipe","c":"Brazil","y":-19.9089,"x":-49.3808},{"n":"Agidel","c":"Russia","y":55.9,"x":53.9333},{"n":"Fameck","c":"France","y":49.2992,"x":6.1097},{"n":"Serra Preta","c":"Brazil","y":-12.16,"x":-39.3319},{"n":"Castro Daire","c":"Portugal","y":40.9,"x":-7.9333},{"n":"Chaltyr","c":"Russia","y":47.2848,"x":39.4823},{"n":"Bingawan","c":"Philippines","y":11.2333,"x":122.5667},{"n":"Targuist","c":"Morocco","y":34.9402,"x":-4.3208},{"n":"Pedara","c":"Italy","y":37.6167,"x":15.0667},{"n":"Saloa","c":"Brazil","y":-8.9758,"x":-36.6878},{"n":"Blaydon","c":"United Kingdom","y":54.963,"x":-1.7187},{"n":"Silvino Lobos","c":"Philippines","y":12.3,"x":124.8333},{"n":"Bailleul","c":"France","y":50.7375,"x":2.7339},{"n":"Swallownest","c":"United Kingdom","y":53.3623,"x":-1.3251},{"n":"Lower Salford","c":"United States","y":40.2639,"x":-75.3929},{"n":"Den Ham","c":"Netherlands","y":52.465,"x":6.4942},{"n":"Wakuya","c":"Japan","y":38.5447,"x":141.1347},{"n":"Oulad Bou Rahmoun","c":"Morocco","y":32.2953,"x":-6.6669},{"n":"Krasnovishersk","c":"Russia","y":60.4,"x":57.0667},{"n":"Huckeswagen","c":"Germany","y":51.145,"x":7.3417},{"n":"Bar-le-Duc","c":"France","y":48.7717,"x":5.1672},{"n":"Brake","c":"Germany","y":53.3333,"x":8.4833},{"n":"Batuan","c":"Philippines","y":12.4167,"x":123.7667},{"n":"Stony Point","c":"United States","y":41.2592,"x":-74.0112},{"n":"Italva","c":"Brazil","y":-21.4208,"x":-41.6908},{"n":"Horw","c":"Switzerland","y":47.0164,"x":8.3111},{"n":"Chilcuautla","c":"Mexico","y":20.3333,"x":-99.2333},{"n":"Lahoysk","c":"Belarus","y":54.2,"x":27.85},{"n":"Poynton","c":"United Kingdom","y":53.3492,"x":-2.1222},{"n":"Eldorado","c":"Brazil","y":-24.52,"x":-48.1081},{"n":"Ambaguio","c":"Philippines","y":16.5316,"x":121.0282},{"n":"Alta","c":"Norway","y":69.9686,"x":23.2714},{"n":"Liangwancun","c":"China","y":28.4466,"x":104.2563},{"n":"Springfield","c":"Canada","y":49.9292,"x":-96.6939},{"n":"Nazare","c":"Portugal","y":39.6,"x":-9.0667},{"n":"Chipurupalle","c":"India","y":18.3,"x":83.5667},{"n":"Grosse Pointe Woods","c":"United States","y":42.4366,"x":-82.8987},{"n":"Junin","c":"Peru","y":-11.15,"x":-75.9833},{"n":"Loviisa","c":"Finland","y":60.4569,"x":26.225},{"n":"Capitao Eneas","c":"Brazil","y":-16.3239,"x":-43.7108},{"n":"Castellammare del Golfo","c":"Italy","y":38.0192,"x":12.8858},{"n":"Belokurikha","c":"Russia","y":52,"x":84.9833},{"n":"Villa Paranacito","c":"Argentina","y":-33.7,"x":-58.6833},{"n":"Azpeitia","c":"Spain","y":43.1819,"x":-2.2653},{"n":"Kabayan","c":"Philippines","y":16.6167,"x":120.8333},{"n":"Libagon","c":"Philippines","y":10.3,"x":125.05},{"n":"Morlaix","c":"France","y":48.5775,"x":-3.8278},{"n":"Zevio","c":"Italy","y":45.3728,"x":11.1303},{"n":"Hueytown","c":"United States","y":33.4237,"x":-87.022},{"n":"Penacova","c":"Portugal","y":40.2667,"x":-8.2667},{"n":"Ain Jemaa","c":"Morocco","y":34.0263,"x":-5.7949},{"n":"Kawaminami","c":"Japan","y":32.1919,"x":131.5258},{"n":"Port Pirie","c":"Australia","y":-33.1858,"x":138.0169},{"n":"Aldine","c":"United States","y":29.9122,"x":-95.3785},{"n":"Tazert","c":"Morocco","y":31.6597,"x":-7.4092},{"n":"Guastalla","c":"Italy","y":44.9214,"x":10.6542},{"n":"Chitila","c":"Romania","y":44.5172,"x":25.9753},{"n":"Bradley","c":"United States","y":41.1641,"x":-87.8452},{"n":"Southchase","c":"United States","y":28.3793,"x":-81.3903},{"n":"Poronaysk","c":"Russia","y":49.2167,"x":143.1},{"n":"Ibipitanga","c":"Brazil","y":-12.8819,"x":-42.4858},{"n":"Sannicandro Garganico","c":"Italy","y":41.8333,"x":15.5667},{"n":"Santa Luzia","c":"Brazil","y":-6.8719,"x":-36.9189},{"n":"San Vito al Tagliamento","c":"Italy","y":45.9153,"x":12.8556},{"n":"Markgroningen","c":"Germany","y":48.9047,"x":9.0808},{"n":"Tapolca","c":"Hungary","y":46.8828,"x":17.4411},{"n":"Pendencias","c":"Brazil","y":-5.26,"x":-36.7219},{"n":"Blomberg","c":"Germany","y":51.9331,"x":9.0831},{"n":"Tulle","c":"France","y":45.2658,"x":1.7722},{"n":"Pineto","c":"Italy","y":42.6167,"x":14.0667},{"n":"Wittenheim","c":"France","y":47.8075,"x":7.3369},{"n":"Sarvar","c":"Hungary","y":47.2539,"x":16.9353},{"n":"Selb","c":"Germany","y":50.1667,"x":12.1333},{"n":"Mackworth","c":"United Kingdom","y":52.9277,"x":-1.5373},{"n":"Santa Maria a Vico","c":"Italy","y":41.0333,"x":14.4833},{"n":"Chellaston","c":"United Kingdom","y":52.8671,"x":-1.4384},{"n":"IJsselmuiden","c":"Netherlands","y":52.5647,"x":5.9275},{"n":"Wentorf bei Hamburg","c":"Germany","y":53.4931,"x":10.2533},{"n":"Ribeiro do Amparo","c":"Brazil","y":-11.0469,"x":-38.4328},{"n":"Ribnitz-Damgarten","c":"Germany","y":54.25,"x":12.4667},{"n":"Witzenhausen","c":"Germany","y":51.3417,"x":9.8569},{"n":"Mexborough","c":"United Kingdom","y":53.4992,"x":-1.283},{"n":"Kerman","c":"United States","y":36.7249,"x":-120.0625},{"n":"Grefrath","c":"Germany","y":51.3363,"x":6.3408},{"n":"Xihuangni","c":"China","y":38.3575,"x":113.852},{"n":"Pestovo","c":"Russia","y":58.6,"x":35.8167},{"n":"Citta Sant'Angelo","c":"Italy","y":42.5167,"x":14.05},{"n":"Tamesis","c":"Colombia","y":5.6647,"x":-75.7144},{"n":"Yinhua","c":"China","y":33.453,"x":110.2601},{"n":"Mindelheim","c":"Germany","y":48.0333,"x":10.4667},{"n":"Hugo","c":"United States","y":45.1671,"x":-92.9588},{"n":"Tankal","c":"Philippines","y":8,"x":124},{"n":"Laterza","c":"Italy","y":40.6333,"x":16.8},{"n":"Sao Joao do Triunfo","c":"Brazil","y":-25.6828,"x":-50.2969},{"n":"Sabbah","c":"Morocco","y":33.8201,"x":-7.0334},{"n":"Fray Luis A. Beltran","c":"Argentina","y":-32.7833,"x":-60.7333},{"n":"Sao Lourenco da Serra","c":"Brazil","y":-23.8528,"x":-46.9428},{"n":"Paralimni","c":"Cyprus","y":35.0387,"x":33.9862},{"n":"Boksitogorsk","c":"Russia","y":59.4833,"x":33.85},{"n":"Humayingcun","c":"China","y":41.1145,"x":116.8985},{"n":"Jayaque","c":"El Salvador","y":13.6667,"x":-89.4333},{"n":"Buttelborn","c":"Germany","y":49.9022,"x":8.5137},{"n":"Kingersheim","c":"France","y":47.7914,"x":7.3381},{"n":"Damascus","c":"United States","y":39.2737,"x":-77.2006},{"n":"Bilopillya","c":"Ukraine","y":51.1532,"x":34.3025},{"n":"Gross-Zimmern","c":"Germany","y":49.8726,"x":8.8343},{"n":"Meru","c":"France","y":49.2358,"x":2.135},{"n":"Guiratinga","c":"Brazil","y":-16.3489,"x":-53.7578},{"n":"Beckingen","c":"Germany","y":49.3928,"x":6.7008},{"n":"Brejoes","c":"Brazil","y":-13.1039,"x":-39.7958},{"n":"Campodarsego","c":"Italy","y":45.5,"x":11.9167},{"n":"Sao Felix","c":"Brazil","y":-12.605,"x":-38.9719},{"n":"Motiong","c":"Philippines","y":11.7833,"x":125},{"n":"Uchiko","c":"Japan","y":33.5331,"x":132.6581},{"n":"Berlare","c":"Belgium","y":51.025,"x":4.0025},{"n":"Primavera","c":"Brazil","y":-8.3378,"x":-35.355},{"n":"Nampicuan","c":"Philippines","y":15.7333,"x":120.6333},{"n":"Salyan","c":"Nepal","y":28.35,"x":82.1833},{"n":"La Carolina","c":"Spain","y":38.2667,"x":-3.6167},{"n":"Areado","c":"Brazil","y":-21.3589,"x":-46.1458},{"n":"Vergara","c":"Spain","y":43.1175,"x":-2.4133},{"n":"San Carlos de la Rapita","c":"Spain","y":40.6203,"x":0.5927},{"n":"Teolandia","c":"Brazil","y":-13.6019,"x":-39.4908},{"n":"Andoain","c":"Spain","y":43.2167,"x":-2.0167},{"n":"Santa Adelia","c":"Brazil","y":-21.2428,"x":-48.8039},{"n":"Curiuva","c":"Brazil","y":-24.0328,"x":-50.4578},{"n":"Nakanojomachi","c":"Japan","y":36.59,"x":138.8411},{"n":"Masty","c":"Belarus","y":53.4,"x":24.5333},{"n":"Bitburg","c":"Germany","y":49.9747,"x":6.5256},{"n":"Skalica","c":"Slovakia","y":48.8436,"x":17.2264},{"n":"Tupi Paulista","c":"Brazil","y":-21.3808,"x":-51.5708},{"n":"San Antonio La Paz","c":"Guatemala","y":14.75,"x":-90.2833},{"n":"Tartarugalzinho","c":"Brazil","y":1.5058,"x":-50.9119},{"n":"Tokoroa","c":"New Zealand","y":-38.22,"x":175.872},{"n":"Mineral Wells","c":"United States","y":32.8169,"x":-98.0776},{"n":"Monte Alegre de Sergipe","c":"Brazil","y":-10.0269,"x":-37.5619},{"n":"Penrith","c":"United Kingdom","y":54.6648,"x":-2.7548},{"n":"Neutraubling","c":"Germany","y":48.9878,"x":12.1964},{"n":"Majiagoucha","c":"China","y":37.5609,"x":109.6287},{"n":"Gehrden","c":"Germany","y":52.3135,"x":9.6008},{"n":"Samobor","c":"Croatia","y":45.8011,"x":15.711},{"n":"Itajobi","c":"Brazil","y":-21.3178,"x":-49.0539},{"n":"Huasca de Ocampo","c":"Mexico","y":20.2028,"x":-98.5758},{"n":"Choszczno","c":"Poland","y":53.1667,"x":15.4},{"n":"Laxou","c":"France","y":48.6856,"x":6.1522},{"n":"Bay Village","c":"United States","y":41.4851,"x":-81.9315},{"n":"Huchuan","c":"China","y":34.9249,"x":106.1409},{"n":"Tazarine","c":"Morocco","y":30.61,"x":-8.01},{"n":"Candelaria","c":"Puerto Rico","y":18.4043,"x":-66.2175},{"n":"Pequannock","c":"United States","y":40.9627,"x":-74.3041},{"n":"Arnedo","c":"Spain","y":42.2167,"x":-2.1},{"n":"Gardabani","c":"Georgia","y":41.45,"x":45.1},{"n":"Richterswil","c":"Switzerland","y":47.2081,"x":8.7058},{"n":"Niedernhausen","c":"Germany","y":50.1617,"x":8.3176},{"n":"Moura","c":"Portugal","y":38.1397,"x":-7.4505},{"n":"Kutchan","c":"Japan","y":42.9017,"x":140.7592},{"n":"Garrel","c":"Germany","y":52.9581,"x":8.0253},{"n":"San Pedro Tapanatepec","c":"Mexico","y":16.3667,"x":-94.2},{"n":"Oroco","c":"Brazil","y":-8.62,"x":-39.6019},{"n":"Ilha de Mocambique","c":"Mozambique","y":-15.0367,"x":40.7328},{"n":"Guipavas","c":"France","y":48.4336,"x":-4.4008},{"n":"Mata Roma","c":"Brazil","y":-3.625,"x":-43.1108},{"n":"North Hykeham","c":"United Kingdom","y":53.1819,"x":-0.5849},{"n":"Meilen","c":"Switzerland","y":47.2703,"x":8.6411},{"n":"Sullivan","c":"United States","y":43.0922,"x":-75.8794},{"n":"Elk Plain","c":"United States","y":47.0448,"x":-122.3671},{"n":"Cadereyta","c":"Mexico","y":20.7,"x":-99.8167},{"n":"Sommacampagna","c":"Italy","y":45.4,"x":10.85},{"n":"Hereford","c":"United States","y":34.8232,"x":-102.4001},{"n":"Barra de Santa Rosa","c":"Brazil","y":-6.72,"x":-36.0608},{"n":"Gaspe","c":"Canada","y":48.8333,"x":-64.4833},{"n":"Galion","c":"United States","y":40.7385,"x":-82.7792},{"n":"Cossato","c":"Italy","y":45.5667,"x":8.1667},{"n":"Dentsville","c":"United States","y":34.0754,"x":-80.9546},{"n":"Grovetown","c":"United States","y":33.4504,"x":-82.2073},{"n":"Amlash","c":"Iran","y":37.0975,"x":50.1864},{"n":"Rosarno","c":"Italy","y":38.485,"x":15.9797},{"n":"Ciro Marina","c":"Italy","y":39.3667,"x":17.1167},{"n":"Driouch","c":"Morocco","y":34.9833,"x":-3.3833},{"n":"Nopala de Villagran","c":"Mexico","y":20.2528,"x":-99.6433},{"n":"Great Bend","c":"United States","y":38.3593,"x":-98.8016},{"n":"Provadia","c":"Bulgaria","y":43.1694,"x":27.4428},{"n":"Luino","c":"Italy","y":46,"x":8.75},{"n":"Bela Vista do Paraiso","c":"Brazil","y":-22.9969,"x":-51.1908},{"n":"Gualdo Tadino","c":"Italy","y":43.2333,"x":12.7833},{"n":"Gantt","c":"United States","y":34.7837,"x":-82.4027},{"n":"Ratzeburg","c":"Germany","y":53.7017,"x":10.7567},{"n":"Oued Jdida","c":"Morocco","y":33.9333,"x":-5.3667},{"n":"Ritterhude","c":"Germany","y":53.1828,"x":8.7356},{"n":"Ramechhap","c":"Nepal","y":27.326,"x":86.087},{"n":"Trepuzzi","c":"Italy","y":40.4,"x":18.0667},{"n":"Canutama","c":"Brazil","y":-6.5339,"x":-64.3828},{"n":"Porteiras","c":"Brazil","y":-7.535,"x":-39.1178},{"n":"Burshtyn","c":"Ukraine","y":49.26,"x":24.635},{"n":"Teignmouth","c":"United Kingdom","y":50.5515,"x":-3.4886},{"n":"Bhimphedi","c":"Nepal","y":27.551,"x":85.13},{"n":"Rossville","c":"United States","y":39.3572,"x":-76.4767},{"n":"Fortuna","c":"Brazil","y":-5.7328,"x":-44.1578},{"n":"Santa Brigida","c":"Brazil","y":-9.7358,"x":-38.1258},{"n":"Ban Bang Muang","c":"Thailand","y":13.8273,"x":100.3859},{"n":"Rasnov","c":"Romania","y":45.5931,"x":25.4603},{"n":"Kulunda","c":"Russia","y":52.5667,"x":78.9472},{"n":"Sultandagi","c":"Turkey","y":38.5333,"x":31.2333},{"n":"Teixeira","c":"Brazil","y":-7.2228,"x":-37.2539},{"n":"La Fleche","c":"France","y":47.6997,"x":-0.0761},{"n":"Graca","c":"Brazil","y":-4.0458,"x":-40.7528},{"n":"Pont-a-Mousson","c":"France","y":48.9044,"x":6.0542},{"n":"Tulchyn","c":"Ukraine","y":48.6744,"x":28.8497},{"n":"Kochkor-Ata","c":"Kyrgyzstan","y":41.0358,"x":72.4814},{"n":"Bennington","c":"United States","y":42.8852,"x":-73.2132},{"n":"Burbach","c":"Germany","y":50.7444,"x":8.0861},{"n":"Jiquirica","c":"Brazil","y":-13.2569,"x":-39.5719},{"n":"Kenora","c":"Canada","y":49.7667,"x":-94.4833},{"n":"Rosa","c":"Italy","y":45.7167,"x":11.7667},{"n":"Kok-Janggak","c":"Kyrgyzstan","y":41.0307,"x":73.2058},{"n":"Qantir","c":"Egypt","y":30.8032,"x":31.8379},{"n":"Hilchenbach","c":"Germany","y":50.9983,"x":8.1094},{"n":"Mering","c":"Germany","y":48.2625,"x":10.9844},{"n":"Meco","c":"Spain","y":40.5539,"x":-3.3261},{"n":"Punata","c":"Bolivia","y":-17.5469,"x":-65.8367},{"n":"Skipton","c":"United Kingdom","y":53.962,"x":-2.017},{"n":"Vil'nyans'k","c":"Ukraine","y":47.9445,"x":35.4331},{"n":"Thouars","c":"France","y":46.975,"x":-0.2153},{"n":"Horta","c":"Portugal","y":38.5333,"x":-28.6333},{"n":"Cowdenbeath","c":"United Kingdom","y":56.11,"x":-3.35},{"n":"Leninsk","c":"Russia","y":48.7,"x":45.2},{"n":"West Richland","c":"United States","y":46.3115,"x":-119.3998},{"n":"Alexandreia","c":"Greece","y":40.6283,"x":22.4454},{"n":"Viseu de Sus","c":"Romania","y":47.7111,"x":24.4264},{"n":"Salkhad","c":"Syria","y":32.4914,"x":36.7106},{"n":"Chepica","c":"Chile","y":-34.7333,"x":-71.2833},{"n":"Ylivieska","c":"Finland","y":64.0722,"x":24.5375},{"n":"Oldsmar","c":"United States","y":28.0507,"x":-82.6698},{"n":"Spitak","c":"Armenia","y":40.8372,"x":44.2675},{"n":"Lohfelden","c":"Germany","y":51.2716,"x":9.5487},{"n":"Washington Court House","c":"United States","y":39.5383,"x":-83.4279},{"n":"Sasso Marconi","c":"Italy","y":44.4,"x":11.25},{"n":"Northborough","c":"United States","y":42.3231,"x":-71.6462},{"n":"Coto de Caza","c":"United States","y":33.5961,"x":-117.5862},{"n":"Whitman","c":"United States","y":42.08,"x":-70.9399},{"n":"Mizil","c":"Romania","y":45,"x":26.4406},{"n":"Canteleu","c":"France","y":49.4511,"x":1.0361},{"n":"Obando","c":"Colombia","y":4.5761,"x":-75.9731},{"n":"Tamarana","c":"Brazil","y":-23.7228,"x":-51.0969},{"n":"Pontinia","c":"Italy","y":41.4083,"x":13.0443},{"n":"Sorso","c":"Italy","y":40.7983,"x":8.5772},{"n":"Carmignano","c":"Italy","y":43.8103,"x":11.0149},{"n":"Esbiaat","c":"Morocco","y":32.2044,"x":-8.5608},{"n":"Zapolyarnyy","c":"Russia","y":69.4167,"x":30.8},{"n":"Breukelen","c":"Netherlands","y":52.1725,"x":4.9986},{"n":"Morwell","c":"Australia","y":-38.2333,"x":146.4},{"n":"Uhingen","c":"Germany","y":48.7058,"x":9.5919},{"n":"Tierra Blanca","c":"Mexico","y":21.1011,"x":-100.1578},{"n":"Berkovitsa","c":"Bulgaria","y":43.2371,"x":23.1251},{"n":"Bludenz","c":"Austria","y":47.1533,"x":9.8219},{"n":"Turnov","c":"Czechia","y":50.5873,"x":15.1569},{"n":"Douar Souk L`qolla","c":"Morocco","y":35.0717,"x":-5.5703},{"n":"Neu-Anspach","c":"Germany","y":50.3003,"x":8.5072},{"n":"Upper Southampton","c":"United States","y":40.1723,"x":-75.0362},{"n":"Qiaoyang","c":"China","y":35.0716,"x":104.1846},{"n":"Bad Bramstedt","c":"Germany","y":53.9186,"x":9.8844},{"n":"Bonanza","c":"Nicaragua","y":14.0167,"x":-84.5833},{"n":"Massalubrense","c":"Italy","y":40.6167,"x":14.35},{"n":"Depew","c":"United States","y":42.9117,"x":-78.7044},{"n":"Susanville","c":"United States","y":40.4205,"x":-120.6129},{"n":"Chaguarama","c":"Venezuela","y":9.2159,"x":-63.7523},{"n":"Mariestad","c":"Sweden","y":58.705,"x":13.828},{"n":"Aghbal","c":"Morocco","y":34.9382,"x":-2.1455},{"n":"Belchertown","c":"United States","y":42.2787,"x":-72.4004},{"n":"Mittweida","c":"Germany","y":50.9856,"x":12.9811},{"n":"Swampscott","c":"United States","y":42.4757,"x":-70.9068},{"n":"Iharana","c":"Madagascar","y":-13.375,"x":50.01},{"n":"Vandalia","c":"United States","y":39.879,"x":-84.193},{"n":"Auriflama","c":"Brazil","y":-20.6858,"x":-50.555},{"n":"Botelhos","c":"Brazil","y":-21.6424,"x":-46.3937},{"n":"Carmo de Minas","c":"Brazil","y":-22.1219,"x":-45.1289},{"n":"Tabant","c":"Morocco","y":31.6581,"x":-6.42},{"n":"Willow Grove","c":"United States","y":40.1495,"x":-75.1178},{"n":"Shlisselburg","c":"Russia","y":59.95,"x":31.0333},{"n":"Jardim de Piranhas","c":"Brazil","y":-6.3789,"x":-37.3519},{"n":"Brasil Novo","c":"Brazil","y":-3.2619,"x":-52.6678},{"n":"Drahichyn","c":"Belarus","y":52.1833,"x":25.15},{"n":"Araceli","c":"Philippines","y":10.5529,"x":119.9904},{"n":"Coribe","c":"Brazil","y":-13.8289,"x":-44.4539},{"n":"Czluchow","c":"Poland","y":53.65,"x":17.3667},{"n":"Malo","c":"Italy","y":45.6582,"x":11.4047},{"n":"Jinta","c":"China","y":37.8573,"x":102.5775},{"n":"Reboucas","c":"Brazil","y":-25.6208,"x":-50.6928},{"n":"Verdal","c":"Norway","y":63.7922,"x":11.4817},{"n":"Andresy","c":"France","y":48.9808,"x":2.0583},{"n":"Detva","c":"Slovakia","y":48.5572,"x":19.4208},{"n":"Tsumeb","c":"Namibia","y":-19.25,"x":17.7167},{"n":"Pudtol","c":"Philippines","y":18.15,"x":121.2833},{"n":"Serhetabat","c":"Turkmenistan","y":35.2833,"x":62.35},{"n":"Gourrama","c":"Morocco","y":32.3375,"x":-4.0761},{"n":"Cold Lake","c":"Canada","y":54.4642,"x":-110.1825},{"n":"Saint-Fargeau","c":"France","y":48.5328,"x":2.5447},{"n":"Sarmin","c":"Syria","y":35.9,"x":36.7167},{"n":"Woippy","c":"France","y":49.1511,"x":6.1514},{"n":"Novi Pazar","c":"Bulgaria","y":43.3476,"x":27.1981},{"n":"Quinapundan","c":"Philippines","y":11.15,"x":125.5167},{"n":"Bni Darkoul","c":"Morocco","y":35.0563,"x":-5.0688},{"n":"Cuarte de Huerva","c":"Spain","y":41.5833,"x":-0.9167},{"n":"Avrille","c":"France","y":47.5069,"x":-0.5889},{"n":"Fort Carson","c":"United States","y":38.7403,"x":-104.784},{"n":"Tall Abyad","c":"Syria","y":36.6975,"x":38.9567},{"n":"Pallasovka","c":"Russia","y":50.05,"x":46.8833},{"n":"Saint-Jean-de-Luz","c":"France","y":43.3903,"x":-1.6597},{"n":"Nobres","c":"Brazil","y":-14.72,"x":-56.3278},{"n":"Mantua","c":"United States","y":39.7618,"x":-75.1686},{"n":"Beech Grove","c":"United States","y":39.7157,"x":-86.0871},{"n":"Hewitt","c":"United States","y":31.452,"x":-97.196},{"n":"Nastola","c":"Finland","y":60.9477,"x":25.9301},{"n":"Thompson","c":"United States","y":41.6474,"x":-74.6745},{"n":"Levoca","c":"Slovakia","y":49.0228,"x":20.5906},{"n":"Magione","c":"Italy","y":43.15,"x":12.2},{"n":"Cassano delle Murge","c":"Italy","y":40.8833,"x":16.7667},{"n":"Cunit","c":"Spain","y":41.1976,"x":1.6345},{"n":"Tehachapi","c":"United States","y":35.1274,"x":-118.4749},{"n":"Buhusi","c":"Romania","y":46.715,"x":26.7042},{"n":"Meerane","c":"Germany","y":50.8519,"x":12.4636},{"n":"Cabanas","c":"Guatemala","y":14.9333,"x":-89.8},{"n":"Nyzhnia Krynka","c":"Ukraine","y":48.1144,"x":38.1606},{"n":"Sisian","c":"Armenia","y":39.5208,"x":46.0322},{"n":"Nerchinsk","c":"Russia","y":51.9833,"x":116.5833},{"n":"Pugachev","c":"Russia","y":52.0133,"x":48.8025},{"n":"Gryazovets","c":"Russia","y":58.8833,"x":40.25},{"n":"Sukhinichi","c":"Russia","y":54.1,"x":35.35},{"n":"Pedro Velho","c":"Brazil","y":-6.4389,"x":-35.2208},{"n":"Vinci","c":"Italy","y":43.7833,"x":10.9167},{"n":"Impruneta","c":"Italy","y":43.6854,"x":11.2544},{"n":"Radomir","c":"Bulgaria","y":42.5467,"x":22.9642},{"n":"Busto Garolfo","c":"Italy","y":45.5478,"x":8.8867},{"n":"Astoria","c":"United States","y":46.1856,"x":-123.8053},{"n":"Shuichecun","c":"China","y":24.09,"x":116.0174},{"n":"Fritzlar","c":"Germany","y":51.1333,"x":9.2667},{"n":"Lons","c":"France","y":43.315,"x":-0.4108},{"n":"Paiania","c":"Greece","y":37.95,"x":23.85},{"n":"Santa Croce sull' Arno","c":"Italy","y":43.7202,"x":10.7727},{"n":"Gidole","c":"Ethiopia","y":5.65,"x":37.3667},{"n":"Kondrovo","c":"Russia","y":54.8064,"x":35.9278},{"n":"Kizel","c":"Russia","y":59.05,"x":57.65},{"n":"Zmiiv","c":"Ukraine","y":49.6878,"x":36.3558},{"n":"Gondomar","c":"Spain","y":42.1111,"x":-8.7611},{"n":"Podebrady","c":"Czechia","y":50.1425,"x":15.1189},{"n":"Jisr ez Zarqa","c":"Israel","y":32.5379,"x":34.9122},{"n":"Mascote","c":"Brazil","y":-15.5628,"x":-39.3028},{"n":"Taft","c":"United States","y":35.1267,"x":-119.4242},{"n":"Amersham","c":"United Kingdom","y":51.677,"x":-0.603},{"n":"Namanga","c":"Kenya","y":-2.55,"x":36.7833},{"n":"Whitewater","c":"United States","y":42.8372,"x":-88.7341},{"n":"Clarksdale","c":"United States","y":34.1971,"x":-90.5729},{"n":"Romilly-sur-Seine","c":"France","y":48.5158,"x":3.7267},{"n":"West Lealman","c":"United States","y":27.8191,"x":-82.7385},{"n":"Mondolfo","c":"Italy","y":43.7517,"x":13.0956},{"n":"Vrbovec","c":"Croatia","y":45.8833,"x":16.4333},{"n":"Arona","c":"Italy","y":45.7569,"x":8.56},{"n":"Warragul","c":"Australia","y":-38.15,"x":145.9333},{"n":"Collecchio","c":"Italy","y":44.7527,"x":10.2157},{"n":"New Freedom","c":"United States","y":39.7353,"x":-76.6967},{"n":"Alpine","c":"United States","y":32.8439,"x":-116.7585},{"n":"Victor","c":"United States","y":42.9894,"x":-77.4277},{"n":"San Policarpo","c":"Philippines","y":12.1791,"x":125.5072},{"n":"Gafanha da Nazare","c":"Portugal","y":40.6333,"x":-8.7167},{"n":"Chateau-d'Olonne","c":"France","y":46.5042,"x":-1.7372},{"n":"Phra Samut Chedi","c":"Thailand","y":13.5934,"x":100.5801},{"n":"Yankton","c":"United States","y":42.8901,"x":-97.3926},{"n":"Nzalat Laadam","c":"Morocco","y":32.0806,"x":-7.93},{"n":"Fujisaki","c":"Japan","y":40.6561,"x":140.5025},{"n":"Oftringen","c":"Switzerland","y":47.315,"x":7.9236},{"n":"Rotenburg an der Fulda","c":"Germany","y":50.995,"x":9.7272},{"n":"Audincourt","c":"France","y":47.4828,"x":6.8397},{"n":"Markt Schwaben","c":"Germany","y":48.1917,"x":11.8681},{"n":"Ternitz","c":"Austria","y":47.7167,"x":16.0333},{"n":"Chegdomyn","c":"Russia","y":51.1178,"x":133.0241},{"n":"Pattensen","c":"Germany","y":52.2645,"x":9.7644},{"n":"Nioro","c":"Mali","y":15.1833,"x":-9.55},{"n":"Salem Lakes","c":"United States","y":42.5366,"x":-88.1307},{"n":"Bayeux","c":"France","y":49.2786,"x":-0.7039},{"n":"Petrolandia","c":"Brazil","y":-9.1828,"x":-38.2689},{"n":"Saint-Brevin-les-Pins","c":"France","y":47.2464,"x":-2.1669},{"n":"Navashino","c":"Russia","y":55.5333,"x":42.2},{"n":"Hampton Bays","c":"United States","y":40.8692,"x":-72.5227},{"n":"Mions","c":"France","y":45.6631,"x":4.9531},{"n":"Spenge","c":"Germany","y":52.1331,"x":8.4831},{"n":"Grodzisk Wielkopolski","c":"Poland","y":52.2333,"x":16.3667},{"n":"Kontiolahti","c":"Finland","y":62.7667,"x":29.85},{"n":"Betsukai","c":"Japan","y":43.3942,"x":145.1175},{"n":"Huasuo","c":"China","y":35.4043,"x":107.0869},{"n":"Ighrem n'Ougdal","c":"Morocco","y":31.2282,"x":-7.4237},{"n":"Sai Buri","c":"Thailand","y":6.7012,"x":101.6181},{"n":"Uryzhar","c":"Kazakhstan","y":47.09,"x":81.6228},{"n":"Nevel","c":"Russia","y":56.0167,"x":29.9333},{"n":"Summerside","c":"Canada","y":46.4,"x":-63.7833},{"n":"Lobau","c":"Germany","y":51.0944,"x":14.6667},{"n":"Comox","c":"Canada","y":49.6733,"x":-124.9022},{"n":"Bom Lugar","c":"Brazil","y":-4.22,"x":-45.0389},{"n":"Karabanovo","c":"Russia","y":56.3089,"x":38.7014},{"n":"Fortim","c":"Brazil","y":-4.45,"x":-37.7833},{"n":"Wombourn","c":"United Kingdom","y":52.5302,"x":-2.1857},{"n":"Montelupo Fiorentino","c":"Italy","y":43.7333,"x":11.0167},{"n":"Amay","c":"Belgium","y":50.5478,"x":5.3192},{"n":"Maglie","c":"Italy","y":40.1167,"x":18.3},{"n":"El Paisnal","c":"El Salvador","y":13.9667,"x":-89.2167},{"n":"Cehegin","c":"Spain","y":38.0925,"x":-1.7989},{"n":"Katyr-Yurt","c":"Russia","y":43.17,"x":45.3711},{"n":"Nova Trento","c":"Brazil","y":-27.2867,"x":-48.9303},{"n":"Yazoo City","c":"United States","y":32.8618,"x":-90.4067},{"n":"Mount Washington","c":"United States","y":38.043,"x":-85.5549},{"n":"Upanema","c":"Brazil","y":-5.6419,"x":-37.2578},{"n":"Sylvan Lake","c":"Canada","y":52.3083,"x":-114.0964},{"n":"California","c":"United States","y":38.2969,"x":-76.4949},{"n":"Vennesla","c":"Norway","y":58.3106,"x":7.8569},{"n":"Orbetello","c":"Italy","y":42.4394,"x":11.2125},{"n":"Anao-aon","c":"Philippines","y":9.7333,"x":125.4167},{"n":"Ivanic-Grad","c":"Croatia","y":45.7081,"x":16.3947},{"n":"Bissendorf","c":"Germany","y":52.2333,"x":8.1667},{"n":"Grimes","c":"United States","y":41.6776,"x":-93.7946},{"n":"Andorinha","c":"Brazil","y":-10.345,"x":-39.8328},{"n":"Tabuse","c":"Japan","y":33.9547,"x":132.0414},{"n":"Bangui","c":"Philippines","y":18.5333,"x":120.7667},{"n":"Huizucar","c":"El Salvador","y":13.5833,"x":-89.2333},{"n":"Tepetzintla","c":"Mexico","y":21.1647,"x":-97.8528},{"n":"Bellair-Meadowbrook Terrace","c":"United States","y":30.1796,"x":-81.7375},{"n":"Obanazawa","c":"Japan","y":38.6008,"x":140.4058},{"n":"Lamont","c":"United States","y":35.2651,"x":-118.9159},{"n":"Castel San Giorgio","c":"Italy","y":40.7833,"x":14.7},{"n":"Dorfen","c":"Germany","y":48.2667,"x":12.15},{"n":"Roncade","c":"Italy","y":45.6246,"x":12.3766},{"n":"Lalibela","c":"Ethiopia","y":12.0356,"x":39.0462},{"n":"Morpeth","c":"United Kingdom","y":55.1675,"x":-1.6908},{"n":"Ait Yaich","c":"Algeria","y":36.5811,"x":4.3303},{"n":"Ekenas","c":"Finland","y":59.975,"x":23.4361},{"n":"Rixheim","c":"France","y":47.7486,"x":7.4044},{"n":"Villa San Giovanni","c":"Italy","y":38.2167,"x":15.6333},{"n":"Correia Pinto","c":"Brazil","y":-27.585,"x":-50.3608},{"n":"Shimubi","c":"China","y":19.1645,"x":110.3043},{"n":"Cidelandia","c":"Brazil","y":-5.1739,"x":-47.7819},{"n":"Lauchhammer","c":"Germany","y":51.5,"x":13.8},{"n":"Saint Joseph","c":"Trinidad And Tobago","y":10.65,"x":-61.4167},{"n":"Sidmant al Jabal","c":"Egypt","y":29.0856,"x":30.9344},{"n":"Tubaran","c":"Philippines","y":7.7167,"x":124.1667},{"n":"Bhalil","c":"Morocco","y":33.85,"x":-4.8667},{"n":"Amberieu-en-Bugey","c":"France","y":45.9581,"x":5.3578},{"n":"Novi Iskar","c":"Bulgaria","y":42.8031,"x":23.3436},{"n":"Piano di Sorrento","c":"Italy","y":40.6333,"x":14.4111},{"n":"Maydolong","c":"Philippines","y":11.5,"x":125.5},{"n":"Rokycany","c":"Czechia","y":49.7428,"x":13.5946},{"n":"Hot Springs Village","c":"United States","y":34.6568,"x":-92.9644},{"n":"St. Simons","c":"United States","y":31.1774,"x":-81.3857},{"n":"Berettyoujfalu","c":"Hungary","y":47.2167,"x":21.55},{"n":"Campbellsville","c":"United States","y":37.3446,"x":-85.3511},{"n":"Muri","c":"Switzerland","y":46.9319,"x":7.4872},{"n":"Kushimoto","c":"Japan","y":33.4725,"x":135.7814},{"n":"Xexeu","c":"Brazil","y":-8.8019,"x":-35.6269},{"n":"Nishinoomote","c":"Japan","y":30.7325,"x":130.9975},{"n":"Usingen","c":"Germany","y":50.334,"x":8.5372},{"n":"Malsch","c":"Germany","y":48.8808,"x":8.3342},{"n":"Broome","c":"Australia","y":-17.9619,"x":122.2361},{"n":"Roquebrune-sur-Argens","c":"France","y":43.4433,"x":6.6378},{"n":"Tsivilsk","c":"Russia","y":55.8667,"x":47.4833},{"n":"Ledyard","c":"United States","y":41.44,"x":-72.0167},{"n":"Danilov","c":"Russia","y":58.1833,"x":40.1833},{"n":"Maqat","c":"Kazakhstan","y":47.65,"x":53.3167},{"n":"Vargem da Roca","c":"Brazil","y":-11.6069,"x":-40.1369},{"n":"Monteroni di Lecce","c":"Italy","y":40.3333,"x":18.1},{"n":"San Ramon","c":"Peru","y":-11.1247,"x":-75.3569},{"n":"Cicekdagi","c":"Turkey","y":39.6036,"x":34.4158},{"n":"Oulad Driss","c":"Morocco","y":31.9536,"x":-8.2053},{"n":"Trinitapoli","c":"Italy","y":41.35,"x":16.1},{"n":"Nocatee","c":"United States","y":30.0918,"x":-81.4097},{"n":"Tonawanda","c":"United States","y":43.0105,"x":-78.8805},{"n":"Lope de Vega","c":"Philippines","y":12.2983,"x":124.6238},{"n":"Bang Racham","c":"Thailand","y":14.8864,"x":100.3235},{"n":"Angical","c":"Brazil","y":-12.0069,"x":-44.6939},{"n":"Bad Wurzach","c":"Germany","y":47.9094,"x":9.8994},{"n":"Governador Celso Ramos","c":"Brazil","y":-27.315,"x":-48.5589},{"n":"Pilisvorosvar","c":"Hungary","y":47.6211,"x":18.9108},{"n":"Wymondham","c":"United Kingdom","y":52.57,"x":1.116},{"n":"Arzgir","c":"Russia","y":45.3736,"x":44.2208},{"n":"Xincun","c":"China","y":27.6739,"x":103.8739},{"n":"Kinogitan","c":"Philippines","y":8.9855,"x":124.7937},{"n":"Ashiya","c":"Japan","y":33.8939,"x":130.6639},{"n":"Holliston","c":"United States","y":42.1977,"x":-71.445},{"n":"Montataire","c":"France","y":49.2556,"x":2.4383},{"n":"Wschowa","c":"Poland","y":51.8,"x":16.3},{"n":"Great Baddow","c":"United Kingdom","y":51.719,"x":0.507},{"n":"Berck-sur-Mer","c":"France","y":50.4083,"x":1.5928},{"n":"Calera","c":"United States","y":33.1249,"x":-86.745},{"n":"Ochakiv","c":"Ukraine","y":46.6186,"x":31.5392},{"n":"Budakeszi","c":"Hungary","y":47.5111,"x":18.93},{"n":"Travagliato","c":"Italy","y":45.524,"x":10.0797},{"n":"Sanjiang Nongchang","c":"China","y":19.8798,"x":110.6011},{"n":"Massaranduba","c":"Brazil","y":-26.6108,"x":-49.0078},{"n":"Tolland","c":"United States","y":41.8786,"x":-72.3648},{"n":"Stein bei Nurnberg","c":"Germany","y":49.4167,"x":11.0167},{"n":"Patnanungan","c":"Philippines","y":14.7833,"x":122.1833},{"n":"Askim","c":"Norway","y":59.5832,"x":11.1629},{"n":"Raamsdonk","c":"Netherlands","y":51.6878,"x":4.9081},{"n":"Port Augusta","c":"Australia","y":-32.4925,"x":137.7658},{"n":"Carmen de Areco","c":"Argentina","y":-34.3833,"x":-59.8167},{"n":"Rehlingen-Siersburg","c":"Germany","y":49.3686,"x":6.6786},{"n":"Lubbeek","c":"Belgium","y":50.8817,"x":4.8414},{"n":"Youngsville","c":"United States","y":30.0964,"x":-91.9963},{"n":"Tayum","c":"Philippines","y":17.6165,"x":120.6553},{"n":"Candiba","c":"Brazil","y":-14.4108,"x":-42.8669},{"n":"Royse City","c":"United States","y":32.9762,"x":-96.3175},{"n":"Brazopolis","c":"Brazil","y":-22.4739,"x":-45.6078},{"n":"Ardestan","c":"Iran","y":33.3797,"x":52.3725},{"n":"Azalea Park","c":"United States","y":28.5473,"x":-81.2956},{"n":"Versoix","c":"Switzerland","y":46.2833,"x":6.1667},{"n":"Hulyaypole","c":"Ukraine","y":47.6644,"x":36.2632},{"n":"Pomorie","c":"Bulgaria","y":42.5569,"x":27.6405},{"n":"Lauda-Konigshofen","c":"Germany","y":49.5686,"x":9.7039},{"n":"Bischofsheim","c":"Germany","y":49.989,"x":8.355},{"n":"Hartsville","c":"United States","y":34.3676,"x":-80.0833},{"n":"Worthington","c":"United States","y":40.0949,"x":-83.021},{"n":"Zontecomatlan de Lopez y Fuentes","c":"Mexico","y":20.7667,"x":-98.3333},{"n":"Penrith","c":"Australia","y":-33.7511,"x":150.6942},{"n":"North Fayette","c":"United States","y":40.4204,"x":-80.2246},{"n":"Gland","c":"Switzerland","y":46.4167,"x":6.2667},{"n":"Ihtiman","c":"Bulgaria","y":42.4333,"x":23.8167},{"n":"`Alavicheh","c":"Iran","y":33.0528,"x":51.0825},{"n":"Troon","c":"United Kingdom","y":55.54,"x":-4.66},{"n":"Mascali","c":"Italy","y":37.7578,"x":15.1958},{"n":"Nyagatare","c":"Rwanda","y":-1.2947,"x":30.3272},{"n":"Saint-Jacques-de-la-Lande","c":"France","y":48.0903,"x":-1.6956},{"n":"Condoto","c":"Colombia","y":5.0917,"x":-76.65},{"n":"Brad","c":"Romania","y":46.1294,"x":22.79},{"n":"Bollullos par del Condado","c":"Spain","y":37.3358,"x":-6.5364},{"n":"General MacArthur","c":"Philippines","y":11.25,"x":125.5333},{"n":"Ottweiler","c":"Germany","y":49.4014,"x":7.1634},{"n":"Sanderstead","c":"United Kingdom","y":51.3358,"x":-0.0818},{"n":"Baiersbronn","c":"Germany","y":48.5058,"x":8.3711},{"n":"Plerin","c":"France","y":48.5344,"x":-2.7708},{"n":"Abong Mbang","c":"Cameroon","y":3.9833,"x":13.1667},{"n":"Latiano","c":"Italy","y":40.5333,"x":17.7167},{"n":"Zollikon","c":"Switzerland","y":47.3422,"x":8.5783},{"n":"Simoes","c":"Brazil","y":-7.5989,"x":-40.8178},{"n":"Ban Kaeng","c":"Thailand","y":16.4119,"x":102.0402},{"n":"Alfredo Chaves","c":"Brazil","y":-20.635,"x":-40.75},{"n":"Bicas","c":"Brazil","y":-21.725,"x":-43.0589},{"n":"Noya","c":"Spain","y":42.7833,"x":-8.8833},{"n":"Southern Pines","c":"United States","y":35.1927,"x":-79.404},{"n":"Goure","c":"Niger","y":13.9874,"x":10.27},{"n":"Cicciano","c":"Italy","y":40.9667,"x":14.5333},{"n":"Lopik","c":"Netherlands","y":51.9722,"x":4.9464},{"n":"Djanet","c":"Algeria","y":24.555,"x":9.4853},{"n":"Forster","c":"Australia","y":-32.1806,"x":152.5117},{"n":"Hershey","c":"United States","y":40.2806,"x":-76.6458},{"n":"Tepecoyo","c":"El Salvador","y":13.7003,"x":-89.4678},{"n":"Saraland","c":"United States","y":30.8478,"x":-88.1004},{"n":"Ipaucu","c":"Brazil","y":-23.0569,"x":-49.6267},{"n":"Kuurne","c":"Belgium","y":50.8519,"x":3.2861},{"n":"Darlowo","c":"Poland","y":54.4167,"x":16.4167},{"n":"Williamstown","c":"United States","y":39.6874,"x":-74.9786},{"n":"Matias Barbosa","c":"Brazil","y":-21.8689,"x":-43.3189},{"n":"Chelsfield","c":"United Kingdom","y":51.3582,"x":0.1278},{"n":"Jever","c":"Germany","y":53.5744,"x":7.9008},{"n":"Eberbach","c":"Germany","y":49.4667,"x":8.9833},{"n":"Wilbraham","c":"United States","y":42.127,"x":-72.4308},{"n":"Bacuag","c":"Philippines","y":9.6081,"x":125.6405},{"n":"Paradise Valley","c":"United States","y":33.5434,"x":-111.9595},{"n":"Radomyshl","c":"Ukraine","y":50.4947,"x":29.2333},{"n":"Santa Maria do Suacui","c":"Brazil","y":-18.19,"x":-42.4139},{"n":"Alzano Lombardo","c":"Italy","y":45.7317,"x":9.7283},{"n":"Pastores","c":"Guatemala","y":14.59,"x":-90.75},{"n":"Klasterec nad Ohri","c":"Czechia","y":50.3846,"x":13.1714},{"n":"Pewaukee","c":"United States","y":43.0701,"x":-88.2411},{"n":"Lapua","c":"Finland","y":62.9708,"x":23.0069},{"n":"Nafplio","c":"Greece","y":37.5667,"x":22.8},{"n":"Heswall","c":"United Kingdom","y":53.328,"x":-3.099},{"n":"Roncq","c":"France","y":50.7536,"x":3.1203},{"n":"Urbino","c":"Italy","y":43.7252,"x":12.6372},{"n":"Ayt 'Attou ou L'Arbi","c":"Morocco","y":31.5456,"x":-8.2967},{"n":"Priverno","c":"Italy","y":41.4667,"x":13.1833},{"n":"Mocha","c":"Yemen","y":13.3167,"x":43.25},{"n":"Langwedel","c":"Germany","y":52.9999,"x":9.1732},{"n":"Olsberg","c":"Germany","y":51.35,"x":8.4833},{"n":"Cadaval","c":"Portugal","y":39.25,"x":-9.1},{"n":"Nea Alikarnassos","c":"Greece","y":35.3286,"x":25.1644},{"n":"Oschatz","c":"Germany","y":51.3003,"x":13.1072},{"n":"Villa Yapacani","c":"Bolivia","y":-17.4028,"x":-63.885},{"n":"Rio Branco","c":"Uruguay","y":-32.5969,"x":-53.385},{"n":"Majia","c":"China","y":35.4599,"x":103.2076},{"n":"Bezou","c":"Morocco","y":32.0833,"x":-7.05},{"n":"Boninal","c":"Brazil","y":-12.7019,"x":-41.8278},{"n":"Usti nad Orlici","c":"Czechia","y":49.9739,"x":16.3937},{"n":"Saint-Genis-Pouilly","c":"France","y":46.2433,"x":6.0214},{"n":"Boula'wane","c":"Morocco","y":32.8625,"x":-8.0611},{"n":"Gonzalez","c":"United States","y":30.5822,"x":-87.2906},{"n":"Curua","c":"Brazil","y":-1.8878,"x":-55.1169},{"n":"Port Orchard","c":"United States","y":47.5163,"x":-122.661},{"n":"Yanhewan","c":"China","y":36.7523,"x":109.3677},{"n":"San Julian","c":"Philippines","y":11.7536,"x":125.4558},{"n":"Boa Nova","c":"Brazil","y":-14.3628,"x":-40.2078},{"n":"Guaraniacu","c":"Brazil","y":-25.1008,"x":-52.8778},{"n":"Apuiares","c":"Brazil","y":-3.9489,"x":-39.4319},{"n":"Qazyqurt","c":"Kazakhstan","y":41.7598,"x":69.388},{"n":"Pucioasa","c":"Romania","y":45.0742,"x":25.4342},{"n":"Zemamra","c":"Morocco","y":32.6215,"x":-8.7022},{"n":"Santa Branca","c":"Brazil","y":-23.3969,"x":-45.8839},{"n":"Breza","c":"Bosnia And Herzegovina","y":44.021,"x":18.261},{"n":"Tibau do Sul","c":"Brazil","y":-6.1869,"x":-35.0919},{"n":"Bosobolo","c":"Congo (Kinshasa)","y":4.1904,"x":19.88},{"n":"Douarnenez","c":"France","y":48.0922,"x":-4.3303},{"n":"Santa Filomena","c":"Brazil","y":-8.1628,"x":-40.6158},{"n":"Muscle Shoals","c":"United States","y":34.7436,"x":-87.6344},{"n":"Jennings","c":"United States","y":38.723,"x":-90.2644},{"n":"Tlayacapan","c":"Mexico","y":18.9556,"x":-98.9811},{"n":"Stanytsia Luhanska","c":"Ukraine","y":48.6667,"x":39.4667},{"n":"Boa Esperanca do Sul","c":"Brazil","y":-21.9925,"x":-48.3908},{"n":"Leno","c":"Italy","y":45.3703,"x":10.2167},{"n":"Connersville","c":"United States","y":39.6581,"x":-85.141},{"n":"Royal Kunia","c":"United States","y":21.4053,"x":-158.0318},{"n":"Neustadt an der Donau","c":"Germany","y":48.8,"x":11.7667},{"n":"Maxcanu","c":"Mexico","y":20.5833,"x":-89.9833},{"n":"Caldas","c":"Brazil","y":-21.9239,"x":-46.3858},{"n":"Much","c":"Germany","y":50.9167,"x":7.4},{"n":"Goonellabah","c":"Australia","y":-28.815,"x":153.3178},{"n":"Antequera","c":"Philippines","y":9.7812,"x":123.8975},{"n":"Tsimlyansk","c":"Russia","y":47.6467,"x":42.0947},{"n":"Ust'-Ordynskiy","c":"Russia","y":52.833,"x":104.7},{"n":"Metuchen","c":"United States","y":40.5424,"x":-74.3628},{"n":"Barra do Mendes","c":"Brazil","y":-11.81,"x":-42.0589},{"n":"Agua Boa","c":"Brazil","y":-17.9958,"x":-42.3889},{"n":"Lieusaint","c":"France","y":48.6322,"x":2.5486},{"n":"Vatra Dornei","c":"Romania","y":47.35,"x":25.3667},{"n":"Kearsley","c":"United Kingdom","y":53.53,"x":-2.37},{"n":"Alterosa","c":"Brazil","y":-21.2489,"x":-46.1428},{"n":"Grain Valley","c":"United States","y":39.0168,"x":-94.2085},{"n":"Milnrow","c":"United Kingdom","y":53.6101,"x":-2.1111},{"n":"Bad Camberg","c":"Germany","y":50.3,"x":8.2667},{"n":"Villaviciosa","c":"Spain","y":43.4833,"x":-5.4333},{"n":"Iflissen","c":"Algeria","y":36.8636,"x":4.2203},{"n":"Sopetran","c":"Colombia","y":6.5017,"x":-75.7433},{"n":"Pinhalzinho","c":"Brazil","y":-22.78,"x":-46.57},{"n":"Mount Dora","c":"United States","y":28.8143,"x":-81.6344},{"n":"Cefalu","c":"Italy","y":38.0395,"x":14.0221},{"n":"Barroquinha","c":"Brazil","y":-3.0189,"x":-41.1369},{"n":"Skippack","c":"United States","y":40.2165,"x":-75.419},{"n":"Stezzano","c":"Italy","y":45.6508,"x":9.6528},{"n":"Langenselbold","c":"Germany","y":50.1833,"x":9.0333},{"n":"Worgl","c":"Austria","y":47.4831,"x":12.0664},{"n":"Cuevas del Almanzora","c":"Spain","y":37.3,"x":-1.8667},{"n":"Uibai","c":"Brazil","y":-11.3369,"x":-42.1328},{"n":"Oleggio","c":"Italy","y":45.6,"x":8.6333},{"n":"San Juan","c":"Trinidad And Tobago","y":10.65,"x":-61.45},{"n":"Scheemda","c":"Netherlands","y":53.1667,"x":6.9667},{"n":"Orikhiv","c":"Ukraine","y":47.5677,"x":35.7849},{"n":"Lotte","c":"Germany","y":52.2764,"x":7.9167},{"n":"Abony","c":"Hungary","y":47.1892,"x":20.0053},{"n":"Ceres","c":"Argentina","y":-29.8833,"x":-61.95},{"n":"Hola Prystan","c":"Ukraine","y":46.5167,"x":32.5167},{"n":"Squinzano","c":"Italy","y":40.4333,"x":18.05},{"n":"West Lincoln","c":"Canada","y":43.0667,"x":-79.5667},{"n":"Dryden","c":"United States","y":42.4786,"x":-76.3563},{"n":"Liedekerke","c":"Belgium","y":50.8667,"x":4.0833},{"n":"Krasnyy Kut","c":"Russia","y":50.95,"x":46.9667},{"n":"Pe de Serra","c":"Brazil","y":-11.8339,"x":-39.6128},{"n":"Manoel Vitorino","c":"Brazil","y":-14.145,"x":-40.2428},{"n":"Dueville","c":"Italy","y":45.6333,"x":11.55},{"n":"Alausi","c":"Ecuador","y":-2.19,"x":-78.85},{"n":"Wangjiaxian","c":"China","y":36.5443,"x":104.1496},{"n":"Bo'ness","c":"United Kingdom","y":56.0168,"x":-3.6089},{"n":"Schneeberg","c":"Germany","y":50.5942,"x":12.6456},{"n":"Torrijos","c":"Spain","y":39.9833,"x":-4.2814},{"n":"Fiesole","c":"Italy","y":43.8,"x":11.3},{"n":"Argentan","c":"France","y":48.7444,"x":-0.0203},{"n":"Glasgow","c":"United States","y":37.0047,"x":-85.9263},{"n":"Locorotondo","c":"Italy","y":40.75,"x":17.3167},{"n":"Little Falls","c":"United States","y":40.8762,"x":-74.218},{"n":"Casinhas","c":"Brazil","y":-7.7411,"x":-35.7211},{"n":"Branchburg","c":"United States","y":40.5629,"x":-74.714},{"n":"Fraser","c":"United States","y":42.5388,"x":-82.9496},{"n":"Riedisheim","c":"France","y":47.7483,"x":7.3669},{"n":"Ourtzagh","c":"Morocco","y":34.55,"x":-4.9333},{"n":"Rovinj","c":"Croatia","y":45.0833,"x":13.6333},{"n":"Sun Lakes","c":"United States","y":33.2172,"x":-111.8695},{"n":"Sidi Azzouz","c":"Morocco","y":31.7667,"x":-7.6667},{"n":"Wilsdruff","c":"Germany","y":51.0522,"x":13.5383},{"n":"Ulchin","c":"Korea, South","y":37.002,"x":129.4003},{"n":"Gernsbach","c":"Germany","y":48.7633,"x":8.3342},{"n":"Dimiao","c":"Philippines","y":9.6167,"x":124.1667},{"n":"Mahinog","c":"Philippines","y":9.15,"x":124.7833},{"n":"Hartselle","c":"United States","y":34.4391,"x":-86.94},{"n":"East Bridgewater","c":"United States","y":42.0352,"x":-70.9424},{"n":"Ollioules","c":"France","y":43.1394,"x":5.8469},{"n":"Matane","c":"Canada","y":48.85,"x":-67.5333},{"n":"Arroio dos Ratos","c":"Brazil","y":-30.0769,"x":-51.7289},{"n":"Shamalgan","c":"Kazakhstan","y":43.3775,"x":76.62},{"n":"Thonotosassa","c":"United States","y":28.0465,"x":-82.291},{"n":"Tagalft","c":"Morocco","y":32.2381,"x":-6.1194},{"n":"Munsingen","c":"Germany","y":48.4128,"x":9.4953},{"n":"Zemrane","c":"Morocco","y":31.5339,"x":-8.2672},{"n":"Hlucin","c":"Czechia","y":49.8979,"x":18.192},{"n":"Fostoria","c":"United States","y":41.1601,"x":-83.412},{"n":"Tenafly","c":"United States","y":40.9175,"x":-73.9531},{"n":"Brooks","c":"Canada","y":50.5642,"x":-111.8989},{"n":"Taggia","c":"Italy","y":43.8439,"x":7.8509},{"n":"Amantea","c":"Italy","y":39.1333,"x":16.0667},{"n":"Tornesch","c":"Germany","y":53.7,"x":9.7167},{"n":"Immenstadt im Allgau","c":"Germany","y":47.5667,"x":10.2167},{"n":"Gargzdai","c":"Lithuania","y":55.7,"x":21.4},{"n":"Maisach","c":"Germany","y":48.2167,"x":11.2667},{"n":"Caselle Torinese","c":"Italy","y":45.1833,"x":7.65},{"n":"Beekman","c":"United States","y":41.6042,"x":-73.6945},{"n":"Yamada","c":"Japan","y":39.4675,"x":141.9489},{"n":"Sassenberg","c":"Germany","y":51.9897,"x":8.0408},{"n":"Zaouiat Moulay Bouchta El Khammar","c":"Morocco","y":34.4833,"x":-5.1167},{"n":"North Strabane","c":"United States","y":40.2279,"x":-80.1488},{"n":"Chaparral","c":"United States","y":32.0442,"x":-106.4061},{"n":"Gorssel","c":"Netherlands","y":52.2,"x":6.2},{"n":"Polyarnyye Zori","c":"Russia","y":67.3658,"x":32.4981},{"n":"Scottsboro","c":"United States","y":34.6438,"x":-86.0491},{"n":"Cliftonville","c":"United Kingdom","y":51.3881,"x":1.4046},{"n":"Ascension","c":"Bolivia","y":-15.6996,"x":-63.08},{"n":"Shirebrook","c":"United Kingdom","y":53.2048,"x":-1.2197},{"n":"Leverano","c":"Italy","y":40.2833,"x":18.0833},{"n":"Dippoldiswalde","c":"Germany","y":50.8933,"x":13.6667},{"n":"Lockhart","c":"United States","y":28.6271,"x":-81.4354},{"n":"Middlewich","c":"United Kingdom","y":53.192,"x":-2.443},{"n":"Geldagana","c":"Russia","y":43.2162,"x":46.0381},{"n":"Haaren","c":"Netherlands","y":51.6017,"x":5.2228},{"n":"Thibodaux","c":"United States","y":29.7941,"x":-90.8163},{"n":"Marmeleiro","c":"Brazil","y":-26.1489,"x":-53.0258},{"n":"Marostica","c":"Italy","y":45.7456,"x":11.6553},{"n":"Igrapiuna","c":"Brazil","y":-13.8258,"x":-39.1419},{"n":"Sanpozhen","c":"China","y":39.6683,"x":115.4426},{"n":"Sainte-Anne-des-Plaines","c":"Canada","y":45.7617,"x":-73.8204},{"n":"Bom Principio","c":"Brazil","y":-29.4889,"x":-51.3528},{"n":"Itinga","c":"Brazil","y":-16.6128,"x":-41.765},{"n":"Ilhota","c":"Brazil","y":-26.9,"x":-48.8269},{"n":"Paranhos","c":"Brazil","y":-23.8928,"x":-55.4308},{"n":"San Andres Timilpan","c":"Mexico","y":19.8667,"x":-99.7333},{"n":"Sainte-Maxime","c":"France","y":43.3089,"x":6.6378},{"n":"Port Hedland","c":"Australia","y":-20.31,"x":118.6011},{"n":"Fisciano","c":"Italy","y":40.7667,"x":14.8},{"n":"Cotegipe","c":"Brazil","y":-12.0278,"x":-44.2578},{"n":"Peumo","c":"Chile","y":-34.4,"x":-71.1667},{"n":"Taglio","c":"Italy","y":45.0167,"x":12.2167},{"n":"Chudovo","c":"Russia","y":59.1281,"x":31.6592},{"n":"Hettstedt","c":"Germany","y":51.6333,"x":11.5},{"n":"Beasain","c":"Spain","y":43.0458,"x":-2.1894},{"n":"Pazar","c":"Turkey","y":40.2759,"x":36.2832},{"n":"Alginet","c":"Spain","y":39.2625,"x":-0.4683},{"n":"Bradley Gardens","c":"United States","y":40.5711,"x":-74.6678},{"n":"Schiffdorf","c":"Germany","y":53.5355,"x":8.6622},{"n":"Det Udom","c":"Thailand","y":14.906,"x":105.0784},{"n":"Lagangilang","c":"Philippines","y":17.6103,"x":120.7344},{"n":"San Cristobal","c":"Argentina","y":-30.3105,"x":-61.2372},{"n":"Greenlawn","c":"United States","y":40.863,"x":-73.3642},{"n":"Wulong","c":"China","y":23.3202,"x":112.1901},{"n":"Robbinsdale","c":"United States","y":45.0261,"x":-93.3332},{"n":"Valday","c":"Russia","y":57.9667,"x":33.25},{"n":"Pak Thong Chai","c":"Thailand","y":14.7302,"x":102.0263},{"n":"Carlopolis","c":"Brazil","y":-23.425,"x":-49.7208},{"n":"Yanshuiguan","c":"China","y":36.8656,"x":110.3536},{"n":"Eching","c":"Germany","y":48.3,"x":11.6167},{"n":"Tafrant","c":"Morocco","y":34.625,"x":-5.1242},{"n":"Clewiston","c":"United States","y":26.7529,"x":-80.9399},{"n":"Feldkirchen","c":"Austria","y":46.7236,"x":14.0919},{"n":"Zolote","c":"Ukraine","y":48.6833,"x":38.5167},{"n":"Tounfit","c":"Morocco","y":32.4773,"x":-5.1348},{"n":"Furukawamen","c":"Japan","y":33.2383,"x":129.6506},{"n":"Markdorf","c":"Germany","y":47.7208,"x":9.3917},{"n":"Rio Piracicaba","c":"Brazil","y":-19.9289,"x":-43.1739},{"n":"Abadla","c":"Algeria","y":31.0167,"x":-2.7333},{"n":"Chippewa Falls","c":"United States","y":44.9358,"x":-91.3902},{"n":"Lakinsk","c":"Russia","y":56.0169,"x":39.9494},{"n":"Robbinsville","c":"United States","y":40.222,"x":-74.591},{"n":"Artena","c":"Italy","y":41.7333,"x":12.9167},{"n":"West Nipissing / Nipissing Ouest","c":"Canada","y":46.3667,"x":-79.9167},{"n":"Maurilandia","c":"Brazil","y":-17.9708,"x":-50.3389},{"n":"Uslar","c":"Germany","y":51.6597,"x":9.6358},{"n":"Ocean View","c":"United States","y":38.5355,"x":-75.0984},{"n":"Astolfo Dutra","c":"Brazil","y":-21.315,"x":-42.8619},{"n":"Cienega de Flores","c":"Mexico","y":25.95,"x":-100.1833},{"n":"Langerwehe","c":"Germany","y":50.8167,"x":6.3497},{"n":"Cervignano del Friuli","c":"Italy","y":45.8231,"x":13.335},{"n":"Ostwald","c":"France","y":48.5511,"x":7.7136},{"n":"Tsukawaki","c":"Japan","y":33.2833,"x":131.1514},{"n":"Bridgetown","c":"United States","y":39.1551,"x":-84.6359},{"n":"Carballino","c":"Spain","y":42.431,"x":-8.079},{"n":"Temsamane","c":"Morocco","y":35.1223,"x":-3.6373},{"n":"Yakhroma","c":"Russia","y":56.2833,"x":37.4833},{"n":"Estremoz","c":"Portugal","y":38.8422,"x":-7.5881},{"n":"Denzlingen","c":"Germany","y":48.0683,"x":7.8825},{"n":"Summerfield","c":"United States","y":38.9042,"x":-76.8678},{"n":"Medvezhyegorsk","c":"Russia","y":62.9171,"x":34.4569},{"n":"Koundara","c":"Guinea","y":12.48,"x":-13.296},{"n":"Tenerife","c":"Colombia","y":9.8989,"x":-74.8589},{"n":"Eski Ikan","c":"Kazakhstan","y":43.1833,"x":68.5333},{"n":"Coronel Bogado","c":"Paraguay","y":-27.17,"x":-56.25},{"n":"El Barrio de la Soledad","c":"Mexico","y":16.8,"x":-95.1167},{"n":"Bua Yai","c":"Thailand","y":15.5858,"x":102.4337},{"n":"Cisnadie","c":"Romania","y":45.7128,"x":24.1508},{"n":"Hollins","c":"United States","y":37.3434,"x":-79.9535},{"n":"Schwabmunchen","c":"Germany","y":48.1789,"x":10.755},{"n":"Lebedyn","c":"Ukraine","y":50.5831,"x":34.4823},{"n":"Ban Mae Kaluang","c":"Thailand","y":19.0778,"x":99.927},{"n":"Tarumirim","c":"Brazil","y":-19.2808,"x":-42.0069},{"n":"Rezzato","c":"Italy","y":45.515,"x":10.3175},{"n":"Takerbouzt","c":"Algeria","y":36.418,"x":4.3428},{"n":"Cristopolis","c":"Brazil","y":-12.2339,"x":-44.4208},{"n":"Alexander City","c":"United States","y":32.9242,"x":-85.9361},{"n":"Korneuburg","c":"Austria","y":48.3453,"x":16.3331},{"n":"Svetlogorsk","c":"Russia","y":54.9333,"x":20.15},{"n":"Wang'anzhen","c":"China","y":39.3989,"x":114.9367},{"n":"Marechal Floriano","c":"Brazil","y":-20.4128,"x":-40.6828},{"n":"Sines","c":"Portugal","y":37.9536,"x":-8.8712},{"n":"Santo Antonio dos Lopes","c":"Brazil","y":-4.8689,"x":-44.36},{"n":"Cambados","c":"Spain","y":42.5,"x":-8.8},{"n":"Kashin","c":"Russia","y":57.36,"x":37.6039},{"n":"Tergnier","c":"France","y":49.6558,"x":3.2872},{"n":"San Marcos","c":"Honduras","y":14.38,"x":-88.92},{"n":"Bondeno","c":"Italy","y":44.8894,"x":11.4154},{"n":"Matican","c":"Kosovo","y":42.6449,"x":21.1918},{"n":"Dayr al Barsha","c":"Egypt","y":27.7572,"x":30.91},{"n":"Otopeni","c":"Romania","y":44.55,"x":26.07},{"n":"Rosemere","c":"Canada","y":45.6369,"x":-73.8},{"n":"Corat","c":"Azerbaijan","y":40.5739,"x":49.7036},{"n":"Hooksett","c":"United States","y":43.0709,"x":-71.4365},{"n":"Maria da Fe","c":"Brazil","y":-22.3078,"x":-45.375},{"n":"Lubsko","c":"Poland","y":51.7877,"x":14.9724},{"n":"Toppenish","c":"United States","y":46.3806,"x":-120.3123},{"n":"Kouroussa","c":"Guinea","y":10.653,"x":-9.892},{"n":"Magdiwang","c":"Philippines","y":12.4833,"x":122.5167},{"n":"Raydah","c":"Yemen","y":15.8233,"x":44.0386},{"n":"Kawaii","c":"Japan","y":38.0044,"x":140.0458},{"n":"Almoloya de Alquisiras","c":"Mexico","y":18.85,"x":-99.85},{"n":"Matungao","c":"Philippines","y":8.1333,"x":124.1667},{"n":"Eastham","c":"United Kingdom","y":53.313,"x":-2.962},{"n":"Santiago Ixtayutla","c":"Mexico","y":16.5667,"x":-97.65},{"n":"Malone","c":"United States","y":44.7957,"x":-74.2857},{"n":"Santa Juliana","c":"Brazil","y":-19.3089,"x":-47.5242},{"n":"Guape","c":"Brazil","y":-20.7619,"x":-45.9178},{"n":"Vinto","c":"Bolivia","y":-17.3972,"x":-66.3136},{"n":"Sankt Leon-Rot","c":"Germany","y":49.2653,"x":8.5986},{"n":"North Auburn","c":"United States","y":38.9306,"x":-121.0821},{"n":"Hard","c":"Austria","y":47.4892,"x":9.69},{"n":"Juan de Acosta","c":"Colombia","y":10.8286,"x":-75.035},{"n":"Douar Hammadi","c":"Morocco","y":31.6043,"x":-8.4688},{"n":"Germasogeia","c":"Cyprus","y":34.7181,"x":33.0856},{"n":"Shichinohe","c":"Japan","y":40.7447,"x":141.1578},{"n":"Mill Valley","c":"United States","y":37.9085,"x":-122.5421},{"n":"La Carlota","c":"Spain","y":37.6667,"x":-4.9333},{"n":"Chalfont Saint Peter","c":"United Kingdom","y":51.607,"x":-0.556},{"n":"Wennigsen","c":"Germany","y":52.2742,"x":9.5708},{"n":"Niederzier","c":"Germany","y":50.8831,"x":6.4667},{"n":"Pilas","c":"Spain","y":37.3017,"x":-6.2986},{"n":"Quakenbruck","c":"Germany","y":52.6772,"x":7.9575},{"n":"Tamaqua","c":"United States","y":40.8033,"x":-75.9344},{"n":"Taruma","c":"Brazil","y":-22.7469,"x":-50.5769},{"n":"Bickley","c":"United Kingdom","y":51.4003,"x":0.0466},{"n":"Mistassini","c":"Canada","y":48.8229,"x":-72.2154},{"n":"Bou Izakarn","c":"Morocco","y":29.176,"x":-9.714},{"n":"Valenca","c":"Portugal","y":42.0282,"x":-8.6339},{"n":"Hatten","c":"Germany","y":53.0083,"x":8.3167},{"n":"Destin","c":"United States","y":30.395,"x":-86.4701},{"n":"Amriswil","c":"Switzerland","y":47.5497,"x":9.3},{"n":"Ocher","c":"Russia","y":57.8833,"x":54.7167},{"n":"Kivertsi","c":"Ukraine","y":50.8331,"x":25.4614},{"n":"Maridi","c":"South Sudan","y":4.9151,"x":29.4769},{"n":"El Porvenir de Velasco Suarez","c":"Mexico","y":15.4556,"x":-92.2794},{"n":"Zherdevka","c":"Russia","y":51.8333,"x":41.4667},{"n":"Hayashima","c":"Japan","y":34.6006,"x":133.8283},{"n":"Wittstock","c":"Germany","y":53.1636,"x":12.4856},{"n":"Venev","c":"Russia","y":54.35,"x":38.2667},{"n":"Murrhardt","c":"Germany","y":48.9794,"x":9.5783},{"n":"West Boldon","c":"United Kingdom","y":54.9447,"x":-1.4409},{"n":"Ad Dab`ah","c":"Egypt","y":31.0338,"x":28.4333},{"n":"Puspokladany","c":"Hungary","y":47.3197,"x":21.1139},{"n":"Salida","c":"United States","y":37.7145,"x":-121.087},{"n":"Torquay","c":"Australia","y":-38.3333,"x":144.3167},{"n":"Sakaki","c":"Japan","y":36.4619,"x":138.1803},{"n":"Kings Park West","c":"United States","y":38.8151,"x":-77.296},{"n":"Nilo Pecanha","c":"Brazil","y":-13.5989,"x":-39.1069},{"n":"Belison","c":"Philippines","y":10.8333,"x":121.9667},{"n":"Malvik","c":"Norway","y":63.3728,"x":10.7508},{"n":"Guia","c":"Spain","y":28.1389,"x":-15.6328},{"n":"Kaoma","c":"Zambia","y":-14.7796,"x":24.8},{"n":"Caln","c":"United States","y":40.0014,"x":-75.7618},{"n":"Mirinzal","c":"Brazil","y":-2.065,"x":-44.7839},{"n":"Bad Ischl","c":"Austria","y":47.7115,"x":13.6239},{"n":"Torre del Campo","c":"Spain","y":37.7667,"x":-3.8833},{"n":"Eppstein","c":"Germany","y":50.1401,"x":8.392},{"n":"East Wenatchee","c":"United States","y":47.4174,"x":-120.2822},{"n":"Golub-Dobrzyn","c":"Poland","y":53.1,"x":19.05},{"n":"Phillipsburg","c":"United States","y":40.6895,"x":-75.1821},{"n":"Biatorbagy","c":"Hungary","y":47.4742,"x":18.8236},{"n":"Rio Casca","c":"Brazil","y":-20.2258,"x":-42.6508},{"n":"Jefferson Valley-Yorktown","c":"United States","y":41.3179,"x":-73.8007},{"n":"Piquete","c":"Brazil","y":-22.6136,"x":-45.1761},{"n":"Rincon","c":"United States","y":32.2947,"x":-81.2353},{"n":"Baianopolis","c":"Brazil","y":-12.3058,"x":-44.535},{"n":"California City","c":"United States","y":35.1578,"x":-117.8721},{"n":"Maasbracht","c":"Netherlands","y":51.15,"x":5.8833},{"n":"Taos","c":"United States","y":36.3871,"x":-105.5804},{"n":"Raynham","c":"United States","y":41.9312,"x":-71.0436},{"n":"Neuenkirchen","c":"Germany","y":52.2411,"x":7.3689},{"n":"Marchtrenk","c":"Austria","y":48.1917,"x":14.1106},{"n":"Titiribi","c":"Colombia","y":6.0625,"x":-75.7936},{"n":"North Branford","c":"United States","y":41.3645,"x":-72.7769},{"n":"Porecatu","c":"Brazil","y":-22.7558,"x":-51.3789},{"n":"Beilen","c":"Netherlands","y":52.8567,"x":6.5111},{"n":"Hopatcong","c":"United States","y":40.9541,"x":-74.6593},{"n":"Puerto Deseado","c":"Argentina","y":-47.75,"x":-65.9167},{"n":"Nafpaktos","c":"Greece","y":38.3917,"x":21.8275},{"n":"Hidalgo","c":"United States","y":26.109,"x":-98.2463},{"n":"Isny im Allgau","c":"Germany","y":47.6919,"x":10.0394},{"n":"Kadena","c":"Japan","y":26.3617,"x":127.7553},{"n":"Nannestad","c":"Norway","y":60.2456,"x":10.9528},{"n":"Abensberg","c":"Germany","y":48.8109,"x":11.8595},{"n":"Gardendale","c":"United States","y":33.6678,"x":-86.8069},{"n":"Mucambo","c":"Brazil","y":-3.9089,"x":-40.7469},{"n":"Uitgeest","c":"Netherlands","y":52.5292,"x":4.7103},{"n":"Veglie","c":"Italy","y":40.3333,"x":17.9667},{"n":"Engenheiro Paulo de Frontin","c":"Brazil","y":-22.55,"x":-43.6778},{"n":"Bou Fekrane","c":"Morocco","y":33.7601,"x":-5.4866},{"n":"Grand Falls","c":"Canada","y":48.9578,"x":-55.6633},{"n":"Rheinfelden","c":"Switzerland","y":47.5539,"x":7.7958},{"n":"Olgiate Olona","c":"Italy","y":45.6333,"x":8.8833},{"n":"Kerben","c":"Kyrgyzstan","y":41.5,"x":71.75},{"n":"Lakoucun","c":"China","y":28.3412,"x":119.9523},{"n":"Nioaque","c":"Brazil","y":-21.135,"x":-55.83},{"n":"Ipiranga","c":"Brazil","y":-25.0239,"x":-50.5839},{"n":"Zimnicea","c":"Romania","y":43.6539,"x":25.365},{"n":"Kakunodatemachi","c":"Japan","y":39.5963,"x":140.562},{"n":"Grunstadt","c":"Germany","y":49.5692,"x":8.1681},{"n":"Santa Luzia do Itanhy","c":"Brazil","y":-11.3508,"x":-37.4478},{"n":"San Ferdinando di Puglia","c":"Italy","y":41.3,"x":16.0667},{"n":"Knottingley","c":"United Kingdom","y":53.705,"x":-1.249},{"n":"Satoraljaujhely","c":"Hungary","y":48.3941,"x":21.6561},{"n":"New Paltz","c":"United States","y":41.7577,"x":-74.0883},{"n":"Astravyets","c":"Belarus","y":54.6136,"x":25.9553},{"n":"Itaguacu","c":"Brazil","y":-19.8019,"x":-40.8558},{"n":"Novoulyanovsk","c":"Russia","y":54.15,"x":48.3833},{"n":"Kisanuki","c":"Japan","y":31.3447,"x":130.9453},{"n":"Balangiga","c":"Philippines","y":11.1097,"x":125.3875},{"n":"Narvik","c":"Norway","y":68.4383,"x":17.4278},{"n":"Fara in Sabina","c":"Italy","y":42.2167,"x":12.7333},{"n":"Clearview","c":"Canada","y":44.3981,"x":-80.0742},{"n":"Nelas","c":"Portugal","y":40.5167,"x":-7.85},{"n":"Mashpee","c":"United States","y":41.6178,"x":-70.4908},{"n":"Eynesil","c":"Turkey","y":41.05,"x":39.1333},{"n":"Sidi Abdelkarim","c":"Morocco","y":33.1869,"x":-7.2333},{"n":"Sauk Rapids","c":"United States","y":45.5981,"x":-94.1539},{"n":"Mapanas","c":"Philippines","y":12.475,"x":125.254},{"n":"Boutilimit","c":"Mauritania","y":17.5504,"x":-14.7},{"n":"Vetralla","c":"Italy","y":42.3106,"x":12.0792},{"n":"Greendale","c":"United States","y":42.9371,"x":-88.0018},{"n":"Mayrtup","c":"Russia","y":43.2036,"x":46.1322},{"n":"Lubben (Spreewald)","c":"Germany","y":51.95,"x":13.9},{"n":"Anatuya","c":"Argentina","y":-28.4667,"x":-62.8333},{"n":"Emerald","c":"Australia","y":-23.5167,"x":148.15},{"n":"Canals","c":"Spain","y":38.9611,"x":-0.585},{"n":"New Franklin","c":"United States","y":40.9525,"x":-81.5838},{"n":"Tamm","c":"Germany","y":48.9217,"x":9.1206},{"n":"Vohringen","c":"Germany","y":48.2833,"x":10.0833},{"n":"Leuna","c":"Germany","y":51.3167,"x":12.0167},{"n":"Larena","c":"Philippines","y":9.2333,"x":123.6167},{"n":"Crissiumal","c":"Brazil","y":-27.5,"x":-54.1008},{"n":"Ionia","c":"United States","y":42.9772,"x":-85.0727},{"n":"Pineville","c":"United States","y":31.3414,"x":-92.4096},{"n":"Grafing bei Munchen","c":"Germany","y":48.05,"x":11.9667},{"n":"Suluktu","c":"Kyrgyzstan","y":39.9333,"x":69.5667},{"n":"Lukoyanov","c":"Russia","y":55.0383,"x":44.4978},{"n":"Torokbalint","c":"Hungary","y":47.4356,"x":18.9156},{"n":"Aldenhoven","c":"Germany","y":50.8958,"x":6.2831},{"n":"Cheadle","c":"United Kingdom","y":52.9849,"x":-1.9865},{"n":"Tostedt","c":"Germany","y":53.2833,"x":9.7167},{"n":"Tempio Pausania","c":"Italy","y":40.9015,"x":9.1044},{"n":"Iona","c":"United States","y":26.516,"x":-81.9601},{"n":"Ystrad Mynach","c":"United Kingdom","y":51.6419,"x":-3.2405},{"n":"Patrocinio Paulista","c":"Brazil","y":-20.6394,"x":-47.2817},{"n":"Villalba","c":"Spain","y":43.3,"x":-7.6833},{"n":"Castelsarrasin","c":"France","y":44.04,"x":1.1069},{"n":"Cabo Verde","c":"Brazil","y":-21.4719,"x":-46.3958},{"n":"Greensburg","c":"United States","y":40.3113,"x":-79.5444},{"n":"Bebra","c":"Germany","y":50.9711,"x":9.7903},{"n":"Middleburg","c":"United States","y":30.0502,"x":-81.9011},{"n":"Santiago de Anaya","c":"Mexico","y":20.3844,"x":-98.9647},{"n":"Bamble","c":"Norway","y":59.0197,"x":9.5608},{"n":"Zhipingxiang","c":"China","y":35.2949,"x":105.6157},{"n":"Montabaur","c":"Germany","y":50.4375,"x":7.8258},{"n":"Aracatu","c":"Brazil","y":-14.4278,"x":-41.4619},{"n":"Villacidro","c":"Italy","y":39.4578,"x":8.7424},{"n":"Bergschenhoek","c":"Netherlands","y":51.98,"x":4.5},{"n":"Gouveia","c":"Portugal","y":40.5,"x":-7.6},{"n":"Paraiso do Norte","c":"Brazil","y":-23.2808,"x":-52.6019},{"n":"Sarezzo","c":"Italy","y":45.65,"x":10.2},{"n":"Mjolby","c":"Sweden","y":58.3321,"x":15.1312},{"n":"Chesterton","c":"United States","y":41.5997,"x":-87.0548},{"n":"Maria","c":"Philippines","y":9.1833,"x":123.6333},{"n":"Steamboat Springs","c":"United States","y":40.4777,"x":-106.8243},{"n":"St. Clair","c":"Canada","y":42.7833,"x":-82.35},{"n":"Talwat","c":"Morocco","y":31.2938,"x":-7.176},{"n":"Holzgerlingen","c":"Germany","y":48.6392,"x":9.0108},{"n":"Sweden","c":"United States","y":43.1791,"x":-77.9406},{"n":"Black Forest","c":"United States","y":39.0608,"x":-104.6752},{"n":"Lomas de Sargentillo","c":"Ecuador","y":-1.8833,"x":-80.0833},{"n":"Fort Payne","c":"United States","y":34.4557,"x":-85.6965},{"n":"Casatenovo","c":"Italy","y":45.6983,"x":9.3117},{"n":"Moudjbara","c":"Algeria","y":34.5037,"x":3.4704},{"n":"Schmolln","c":"Germany","y":50.895,"x":12.3564},{"n":"Oberhaching","c":"Germany","y":48.0167,"x":11.5833},{"n":"Montepulciano","c":"Italy","y":43.1,"x":11.7833},{"n":"Castel San Giovanni","c":"Italy","y":45.0591,"x":9.4342},{"n":"Aleksandrow Kujawski","c":"Poland","y":52.875,"x":18.7},{"n":"Cherry Hill Mall","c":"United States","y":39.9384,"x":-75.0117},{"n":"Fruitville","c":"United States","y":27.3328,"x":-82.4616},{"n":"Mor","c":"Hungary","y":47.3717,"x":18.2086},{"n":"Wanding","c":"China","y":24.0814,"x":98.0643},{"n":"Lakewood Park","c":"United States","y":27.539,"x":-80.3865},{"n":"Rio de Oro","c":"Colombia","y":8.2917,"x":-73.3872},{"n":"El Carmen de Atrato","c":"Colombia","y":5.8983,"x":-76.1431},{"n":"Sao Joao do Araguaia","c":"Brazil","y":-5.3578,"x":-48.7908},{"n":"Guazacapan","c":"Guatemala","y":14.0751,"x":-90.4161},{"n":"Galmi","c":"Niger","y":13.9667,"x":5.6744},{"n":"Callaway","c":"United States","y":30.1348,"x":-85.5568},{"n":"Oatfield","c":"United States","y":45.4127,"x":-122.5942},{"n":"Phalaborwa","c":"South Africa","y":-23.9333,"x":31.1167},{"n":"Kalkar","c":"Germany","y":51.7389,"x":6.2925},{"n":"Beylul","c":"Eritrea","y":13.2639,"x":42.3347},{"n":"Muggia","c":"Italy","y":45.6,"x":13.7667},{"n":"Pomfret","c":"United States","y":42.4029,"x":-79.3534},{"n":"Cordoba","c":"Colombia","y":0.8533,"x":-77.5178},{"n":"Waunakee","c":"United States","y":43.1829,"x":-89.4445},{"n":"Famenin","c":"Iran","y":35.1139,"x":48.9717},{"n":"Wixom","c":"United States","y":42.5244,"x":-83.5346},{"n":"Luling","c":"United States","y":29.9008,"x":-90.3523},{"n":"La Puebla","c":"Spain","y":39.7693,"x":3.0225},{"n":"Chumpak","c":"China","y":41.8585,"x":84.137},{"n":"Sanlucar la Mayor","c":"Spain","y":37.3831,"x":-6.2},{"n":"Eggenfelden","c":"Germany","y":48.4039,"x":12.7642},{"n":"Genthin","c":"Germany","y":52.4,"x":12.1667},{"n":"Pell City","c":"United States","y":33.5609,"x":-86.2669},{"n":"Lariano","c":"Italy","y":41.7333,"x":12.8333},{"n":"Belm","c":"Germany","y":52.3,"x":8.1333},{"n":"Pecos","c":"United States","y":31.4046,"x":-103.5057},{"n":"Sampaloc","c":"Philippines","y":14.1667,"x":121.5833},{"n":"Taiyong","c":"China","y":26.4726,"x":108.5105},{"n":"Peabiru","c":"Brazil","y":-23.9128,"x":-52.3428},{"n":"Bay St. Louis","c":"United States","y":30.3281,"x":-89.3774},{"n":"Biscarrosse","c":"France","y":44.3931,"x":-1.1639},{"n":"Huangyadong","c":"China","y":36.8039,"x":113.4446},{"n":"Gisborne","c":"Australia","y":-37.49,"x":144.5889},{"n":"La Entrada","c":"Honduras","y":15.05,"x":-88.7333},{"n":"Vieste","c":"Italy","y":41.8833,"x":16.1667},{"n":"Mittegrossefehn","c":"Germany","y":53.3833,"x":7.5833},{"n":"Belle Chasse","c":"United States","y":29.8472,"x":-90.0069},{"n":"Trubchevsk","c":"Russia","y":52.5833,"x":33.7667},{"n":"Thala","c":"Tunisia","y":35.5667,"x":8.6667},{"n":"Havre de Grace","c":"United States","y":39.5481,"x":-76.1145},{"n":"Montesarchio","c":"Italy","y":41.0667,"x":14.6333},{"n":"Taishi","c":"Japan","y":34.5187,"x":135.6476},{"n":"East Norriton","c":"United States","y":40.1506,"x":-75.3364},{"n":"Ovidiu","c":"Romania","y":44.27,"x":28.56},{"n":"Statte","c":"Italy","y":40.5667,"x":17.2},{"n":"D'Iberville","c":"United States","y":30.4709,"x":-88.9011},{"n":"Ibiraci","c":"Brazil","y":-20.4619,"x":-47.1219},{"n":"Cayce","c":"United States","y":33.9458,"x":-81.0433},{"n":"Chodov","c":"Czechia","y":50.2415,"x":12.7534},{"n":"Effingham","c":"United States","y":39.1207,"x":-88.5508},{"n":"Santaquin","c":"United States","y":39.9711,"x":-111.7937},{"n":"Guapo","c":"Brazil","y":-16.8308,"x":-49.5319},{"n":"Hobe Sound","c":"United States","y":27.0729,"x":-80.1425},{"n":"Misano Adriatico","c":"Italy","y":43.9667,"x":12.7},{"n":"Dubovka","c":"Russia","y":49.05,"x":44.8333},{"n":"Santo Augusto","c":"Brazil","y":-27.8508,"x":-53.7769},{"n":"Alto Alegre dos Parecis","c":"Brazil","y":-12.1278,"x":-61.8508},{"n":"Zeven","c":"Germany","y":53.2969,"x":9.2789},{"n":"Acala","c":"Mexico","y":16.5533,"x":-92.8069},{"n":"Tako","c":"Japan","y":35.7356,"x":140.4678},{"n":"Uxbridge","c":"United States","y":42.0593,"x":-71.638},{"n":"Wauchula","c":"United States","y":27.5469,"x":-81.8101},{"n":"Colesville","c":"United States","y":39.073,"x":-77.0009},{"n":"Canmore","c":"Canada","y":51.089,"x":-115.359},{"n":"Vianopolis","c":"Brazil","y":-16.7419,"x":-48.5158},{"n":"Ivai","c":"Brazil","y":-25.0108,"x":-50.8589},{"n":"Reidsville","c":"United States","y":36.3377,"x":-79.6727},{"n":"Ban Bang Non","c":"Thailand","y":9.9923,"x":98.6507},{"n":"Engenheiro Beltrao","c":"Brazil","y":-23.7969,"x":-52.2689},{"n":"Beesel","c":"Netherlands","y":51.2669,"x":6.0392},{"n":"Plumstead","c":"United States","y":40.3878,"x":-75.1164},{"n":"Mambore","c":"Brazil","y":-24.3189,"x":-52.53},{"n":"Wanzleben","c":"Germany","y":52.0667,"x":11.4333},{"n":"Spiesen-Elversberg","c":"Germany","y":49.3167,"x":7.1331},{"n":"Noyon","c":"France","y":49.5811,"x":2.9989},{"n":"Toplita","c":"Romania","y":46.9918,"x":25.3709},{"n":"Pacaembu","c":"Brazil","y":-21.5622,"x":-51.2606},{"n":"Asslar","c":"Germany","y":50.5833,"x":8.4667},{"n":"Kiskoros","c":"Hungary","y":46.6203,"x":19.2836},{"n":"Beacon","c":"United States","y":41.5036,"x":-73.9655},{"n":"Primeira Cruz","c":"Brazil","y":-2.51,"x":-43.4378},{"n":"Ipswich","c":"United States","y":42.6857,"x":-70.8399},{"n":"Dumas","c":"United States","y":35.8613,"x":-101.9642},{"n":"Raymondville","c":"United States","y":26.4759,"x":-97.7769},{"n":"Anapurus","c":"Brazil","y":-3.6719,"x":-43.1158},{"n":"Novellara","c":"Italy","y":44.85,"x":10.7333},{"n":"Valbonne","c":"France","y":43.6414,"x":7.0089},{"n":"Polotitlan de la Ilustracion","c":"Mexico","y":20.2231,"x":-99.8147},{"n":"New Fairfield","c":"United States","y":41.488,"x":-73.4882},{"n":"Ban Bang Sai","c":"Thailand","y":13.3847,"x":100.9856},{"n":"Soller","c":"Spain","y":39.7667,"x":2.7},{"n":"Fagnano Olona","c":"Italy","y":45.6667,"x":8.8667},{"n":"Ping'anbao","c":"China","y":40.4901,"x":117.5973},{"n":"North Mankato","c":"United States","y":44.1813,"x":-94.0387},{"n":"Tucacas","c":"Venezuela","y":10.7978,"x":-68.3175},{"n":"Ielmo Marinho","c":"Brazil","y":-5.8239,"x":-35.5528},{"n":"Lithgow","c":"Australia","y":-33.4833,"x":150.15},{"n":"Meckenbeuren","c":"Germany","y":47.7,"x":9.5625},{"n":"Shawangunk","c":"United States","y":41.6335,"x":-74.2654},{"n":"Mar de Ajo","c":"Argentina","y":-36.7162,"x":-56.6766},{"n":"Maracai","c":"Brazil","y":-22.6106,"x":-50.6672},{"n":"Dennis","c":"United States","y":41.7064,"x":-70.1643},{"n":"Glenpool","c":"United States","y":35.9485,"x":-96.0052},{"n":"Oil City","c":"United States","y":41.4282,"x":-79.7035},{"n":"Brejo do Cruz","c":"Brazil","y":-6.3489,"x":-37.4978},{"n":"Gien","c":"France","y":47.6981,"x":2.625},{"n":"Hammonton","c":"United States","y":39.6572,"x":-74.7678},{"n":"New Kingman-Butler","c":"United States","y":35.2645,"x":-114.0091},{"n":"Tracunhaem","c":"Brazil","y":-7.805,"x":-35.24},{"n":"Newhaven","c":"United Kingdom","y":50.8,"x":0.06},{"n":"Nidzica","c":"Poland","y":53.3583,"x":20.425},{"n":"Dalkeith","c":"United Kingdom","y":55.8958,"x":-3.0583},{"n":"Kamigori","c":"Japan","y":34.8736,"x":134.3561},{"n":"Diego de Almagro","c":"Chile","y":-26.3667,"x":-70.05},{"n":"Deming","c":"United States","y":32.2631,"x":-107.7525},{"n":"Oulad Chikh","c":"Morocco","y":32.8544,"x":-7.5386},{"n":"Big Rapids","c":"United States","y":43.6992,"x":-85.4806},{"n":"Zhovkva","c":"Ukraine","y":50.0667,"x":23.9667},{"n":"Miami Springs","c":"United States","y":25.8195,"x":-80.2894},{"n":"San Prisco","c":"Italy","y":41.0833,"x":14.2833},{"n":"Itapetim","c":"Brazil","y":-7.3778,"x":-37.19},{"n":"Pirallahi","c":"Azerbaijan","y":40.47,"x":50.3247},{"n":"Fulshear","c":"United States","y":29.693,"x":-95.8792},{"n":"Miraima","c":"Brazil","y":-3.5689,"x":-39.97},{"n":"Cromwell","c":"United States","y":41.6122,"x":-72.6638},{"n":"South Venice","c":"United States","y":27.0434,"x":-82.4152},{"n":"Khmis Sidi al 'Aydi","c":"Morocco","y":33.1228,"x":-7.6219},{"n":"Ataleia","c":"Brazil","y":-18.0439,"x":-41.11},{"n":"Demerval Lobao","c":"Brazil","y":-5.3578,"x":-42.6758},{"n":"Chaoyangdicun","c":"China","y":42.0221,"x":118.2178},{"n":"Gaesti","c":"Romania","y":44.7208,"x":25.3147},{"n":"Douar Lehgagcha","c":"Morocco","y":32.55,"x":-8.7167},{"n":"Allouez","c":"United States","y":44.4721,"x":-88.0261},{"n":"Valburg","c":"Netherlands","y":51.9111,"x":5.7892},{"n":"Baraboo","c":"United States","y":43.4695,"x":-89.7376},{"n":"Gura Humorului","c":"Romania","y":47.5542,"x":25.8875},{"n":"Zhashkiv","c":"Ukraine","y":49.25,"x":30.1},{"n":"Lanuvio","c":"Italy","y":41.6833,"x":12.7},{"n":"Cavarzere","c":"Italy","y":45.137,"x":12.0817},{"n":"Jericho","c":"United States","y":40.7875,"x":-73.5416},{"n":"North Battleford","c":"Canada","y":52.7575,"x":-108.2861},{"n":"Kauhajoki","c":"Finland","y":62.4319,"x":22.1794},{"n":"Wanze","c":"Belgium","y":50.5353,"x":5.2133},{"n":"Philippsburg","c":"Germany","y":49.2369,"x":8.4547},{"n":"Erbach","c":"Germany","y":49.6569,"x":8.9931},{"n":"Rustington","c":"United Kingdom","y":50.8102,"x":-0.5052},{"n":"Pembroke","c":"Canada","y":45.8167,"x":-77.1},{"n":"Jinmingsi","c":"China","y":38.0512,"x":110.2869},{"n":"El Sobrante","c":"United States","y":33.8724,"x":-117.4625},{"n":"Schwaz","c":"Austria","y":47.35,"x":11.7},{"n":"Cahokia","c":"United States","y":38.5649,"x":-90.1792},{"n":"Niquinohomo","c":"Nicaragua","y":11.9052,"x":-86.0945},{"n":"Oak Island","c":"United States","y":33.9434,"x":-78.1366},{"n":"Saint-Gilles","c":"France","y":43.6778,"x":4.4311},{"n":"Melsungen","c":"Germany","y":51.1333,"x":9.55},{"n":"Gramercy","c":"United States","y":30.061,"x":-90.6928},{"n":"Atlantic Beach","c":"United States","y":30.3371,"x":-81.4128},{"n":"Zabreh","c":"Czechia","y":49.8826,"x":16.8723},{"n":"Hassfurt","c":"Germany","y":50.0353,"x":10.5123},{"n":"Guapi","c":"Colombia","y":2.5604,"x":-77.86},{"n":"Teays Valley","c":"United States","y":38.4482,"x":-81.924},{"n":"Ephrata","c":"United States","y":40.1812,"x":-76.1811},{"n":"Sant'Angelo Lodigiano","c":"Italy","y":45.2389,"x":9.4097},{"n":"Oosterzele","c":"Belgium","y":50.9458,"x":3.8042},{"n":"Uruana","c":"Brazil","y":-15.4978,"x":-49.6878},{"n":"Ban Tha Luang Lang","c":"Thailand","y":12.6376,"x":102.0884},{"n":"Arcozelo","c":"Portugal","y":41.0555,"x":-8.6395},{"n":"Santa Cruz de Bezana","c":"Spain","y":43.4442,"x":-3.9031},{"n":"Couvin","c":"Belgium","y":50.0519,"x":4.4961},{"n":"Zacualpan","c":"Mexico","y":18.7197,"x":-99.78},{"n":"Saddle Brook","c":"United States","y":40.9033,"x":-74.0955},{"n":"Horodyshche","c":"Ukraine","y":49.2925,"x":31.4581},{"n":"San Pietro Vernotico","c":"Italy","y":40.4833,"x":18.05},{"n":"Apostolove","c":"Ukraine","y":47.6595,"x":33.717},{"n":"Richmond Hill","c":"United States","y":31.9013,"x":-81.3125},{"n":"Forlimpopoli","c":"Italy","y":44.1833,"x":12.1333},{"n":"Peri-Mirim","c":"Brazil","y":-2.5778,"x":-44.8539},{"n":"Granville","c":"France","y":48.8381,"x":-1.5869},{"n":"Brandermill","c":"United States","y":37.434,"x":-77.6522},{"n":"Sao Jose do Cedro","c":"Brazil","y":-26.455,"x":-53.4939},{"n":"Joaquim Pires","c":"Brazil","y":-3.5078,"x":-42.1978},{"n":"Machados","c":"Brazil","y":-7.6858,"x":-35.515},{"n":"Latisana","c":"Italy","y":45.7833,"x":13},{"n":"Yamanobe","c":"Japan","y":38.2892,"x":140.2625},{"n":"Berre-l'Etang","c":"France","y":43.4756,"x":5.1681},{"n":"Alagoinha","c":"Brazil","y":-8.4658,"x":-36.7758},{"n":"Jupi","c":"Brazil","y":-8.7119,"x":-36.415},{"n":"Lamas","c":"Peru","y":-6.4167,"x":-76.5333},{"n":"Sedriano","c":"Italy","y":45.4833,"x":8.9667},{"n":"Ak-Dovurak","c":"Russia","y":51.1667,"x":90.6},{"n":"Lich","c":"Germany","y":50.5217,"x":8.8208},{"n":"Great Driffield","c":"United Kingdom","y":54.005,"x":-0.438},{"n":"Rutherford","c":"Australia","y":-32.715,"x":151.5317},{"n":"Llanera","c":"Spain","y":43.4667,"x":-5.9333},{"n":"Calanogas","c":"Philippines","y":7.75,"x":124.1},{"n":"Forrest City","c":"United States","y":35.0135,"x":-90.7931},{"n":"Sun Village","c":"United States","y":34.5596,"x":-117.9559},{"n":"Vilanova del Cami","c":"Spain","y":41.5733,"x":1.6381},{"n":"Santana do Matos","c":"Brazil","y":-5.9578,"x":-36.6558},{"n":"San Agustin de Guadalix","c":"Spain","y":40.6781,"x":-3.615},{"n":"Arzachena","c":"Italy","y":41.0801,"x":9.388},{"n":"Crispiano","c":"Italy","y":40.6,"x":17.2333},{"n":"Jardin","c":"Colombia","y":5.5983,"x":-75.8197},{"n":"Eichstatt","c":"Germany","y":48.8919,"x":11.1839},{"n":"Bokod","c":"Philippines","y":16.5,"x":120.8333},{"n":"Moorestown-Lenola","c":"United States","y":39.9659,"x":-74.9643},{"n":"Melenki","c":"Russia","y":55.3333,"x":41.6333},{"n":"Mwinilunga","c":"Zambia","y":-11.7396,"x":24.44},{"n":"Heliopolis","c":"Brazil","y":-10.6828,"x":-38.2858},{"n":"Wayland","c":"United States","y":42.3585,"x":-71.3594},{"n":"Neckargemund","c":"Germany","y":49.3939,"x":8.7975},{"n":"Zarghun Shahr","c":"Afghanistan","y":32.85,"x":68.4167},{"n":"Bovenden","c":"Germany","y":51.5897,"x":9.9222},{"n":"Jindayris","c":"Syria","y":36.3947,"x":36.6889},{"n":"Marienheide","c":"Germany","y":51.0833,"x":7.5333},{"n":"Lauterbach","c":"Germany","y":50.6378,"x":9.3944},{"n":"Fergus Falls","c":"United States","y":46.2853,"x":-96.076},{"n":"Passa e Fica","c":"Brazil","y":-6.4358,"x":-35.6428},{"n":"Wlodawa","c":"Poland","y":51.55,"x":23.55},{"n":"Verin","c":"Spain","y":41.9408,"x":-7.4358},{"n":"Spaichingen","c":"Germany","y":48.0758,"x":8.7378},{"n":"Dores do Indaia","c":"Brazil","y":-19.4628,"x":-45.6019},{"n":"Angermunde","c":"Germany","y":53.0333,"x":14},{"n":"Ampthill","c":"United Kingdom","y":52.0263,"x":-0.4906},{"n":"Selston","c":"United Kingdom","y":53.07,"x":-1.3},{"n":"Feliz","c":"Brazil","y":-29.4508,"x":-51.3058},{"n":"Kupino","c":"Russia","y":54.3667,"x":77.3},{"n":"Ponduru","c":"India","y":18.3508,"x":83.7567},{"n":"Chiran","c":"Japan","y":31.3783,"x":130.4416},{"n":"Pedro Afonso","c":"Brazil","y":-8.9678,"x":-48.175},{"n":"Mont-Laurier","c":"Canada","y":46.55,"x":-75.5},{"n":"Munchenstein","c":"Switzerland","y":47.5186,"x":7.6174},{"n":"Ahrensfelde","c":"Germany","y":52.5758,"x":13.5764},{"n":"Forres","c":"United Kingdom","y":57.608,"x":-3.62},{"n":"Goldap","c":"Poland","y":54.3063,"x":22.3036},{"n":"Hilpoltstein","c":"Germany","y":49.1833,"x":11.1833},{"n":"La Quiaca","c":"Argentina","y":-22.1056,"x":-65.6},{"n":"Conneaut","c":"United States","y":41.9278,"x":-80.5685},{"n":"Nether Providence","c":"United States","y":39.8971,"x":-75.3697},{"n":"Mansidao","c":"Brazil","y":-10.7158,"x":-44.0339},{"n":"Biedenkopf","c":"Germany","y":50.9128,"x":8.5322},{"n":"Chalette-sur-Loing","c":"France","y":48.0117,"x":2.7358},{"n":"Sao Ludgero","c":"Brazil","y":-28.3258,"x":-49.1767},{"n":"Tenente Portela","c":"Brazil","y":-27.3708,"x":-53.7578},{"n":"Bollene","c":"France","y":44.2803,"x":4.7489},{"n":"Thomaston","c":"United States","y":32.8908,"x":-84.3271},{"n":"Otley","c":"United Kingdom","y":53.905,"x":-1.687},{"n":"Strathmore","c":"Canada","y":51.0378,"x":-113.4003},{"n":"Virgem da Lapa","c":"Brazil","y":-16.8039,"x":-42.3428},{"n":"Abre Campo","c":"Brazil","y":-20.3008,"x":-42.4778},{"n":"Levelland","c":"United States","y":33.5806,"x":-102.3636},{"n":"Bandarbeyla","c":"Somalia","y":9.4833,"x":50.8167},{"n":"Filandia","c":"Colombia","y":4.6733,"x":-75.6583},{"n":"Mbulu","c":"Tanzania","y":-3.8496,"x":35.53},{"n":"Grunberg","c":"Germany","y":50.6,"x":8.95},{"n":"Jaguapita","c":"Brazil","y":-23.1128,"x":-51.5319},{"n":"Palmetto","c":"United States","y":27.5251,"x":-82.575},{"n":"Puxinana","c":"Brazil","y":-7.1608,"x":-35.9608},{"n":"Piney Green","c":"United States","y":34.7498,"x":-77.3208},{"n":"Caledon","c":"South Africa","y":-34.23,"x":19.4283},{"n":"Xireg","c":"China","y":36.9257,"x":98.4837},{"n":"Fort Campbell North","c":"United States","y":36.6554,"x":-87.4658},{"n":"Schoonhoven","c":"Netherlands","y":51.9475,"x":4.8486},{"n":"Camponogara","c":"Italy","y":45.3833,"x":12.0667},{"n":"Millbury","c":"United States","y":42.1925,"x":-71.7741},{"n":"Mangha","c":"China","y":23.37,"x":98.9892},{"n":"Andarai","c":"Brazil","y":-12.8069,"x":-41.3308},{"n":"Motupe","c":"Peru","y":-6.1508,"x":-79.7208},{"n":"Cumnock","c":"United Kingdom","y":55.4529,"x":-4.2638},{"n":"Cobh","c":"Ireland","y":51.851,"x":-8.2967},{"n":"Kuleshovka","c":"Russia","y":47.0794,"x":39.5378},{"n":"Altos del Rosario","c":"Colombia","y":8.7914,"x":-74.1636},{"n":"Pierrelatte","c":"France","y":44.3775,"x":4.6961},{"n":"Jimbolia","c":"Romania","y":45.7917,"x":20.7222},{"n":"Alleroy","c":"Russia","y":43.2172,"x":46.2822},{"n":"Schermbeck","c":"Germany","y":51.695,"x":6.8756},{"n":"Bergen","c":"Germany","y":54.4167,"x":13.4333},{"n":"Conceicao do Rio Verde","c":"Brazil","y":-21.8808,"x":-45.085},{"n":"Blegny","c":"Belgium","y":50.6667,"x":5.7333},{"n":"Torredonjimeno","c":"Spain","y":37.7667,"x":-3.95},{"n":"Tamsaout","c":"Morocco","y":29.5333,"x":-8.85},{"n":"San Pedro Pochutla","c":"Mexico","y":15.7463,"x":-96.4652},{"n":"Vedi","c":"Armenia","y":39.91,"x":44.73},{"n":"Saugeen Shores","c":"Canada","y":44.4333,"x":-81.3667},{"n":"Camapua","c":"Brazil","y":-19.5308,"x":-54.0439},{"n":"Quatipuru","c":"Brazil","y":-0.9008,"x":-47.0058},{"n":"Margraten","c":"Netherlands","y":50.8225,"x":5.8203},{"n":"Wells","c":"United Kingdom","y":51.209,"x":-2.647},{"n":"Hickory Hills","c":"United States","y":41.7248,"x":-87.8281},{"n":"Quartucciu","c":"Italy","y":39.2529,"x":9.1762},{"n":"Khomam","c":"Iran","y":37.4,"x":49.6667},{"n":"Meruoca","c":"Brazil","y":-3.5419,"x":-40.455},{"n":"Quata","c":"Brazil","y":-22.2475,"x":-50.6983},{"n":"Robinson","c":"United States","y":40.4578,"x":-80.1334},{"n":"Hinabangan","c":"Philippines","y":11.7,"x":125.0667},{"n":"Beach Park","c":"United States","y":42.4261,"x":-87.8584},{"n":"Burglengenfeld","c":"Germany","y":49.2061,"x":12.0409},{"n":"Bully-les-Mines","c":"France","y":50.4419,"x":2.7244},{"n":"General Carneiro","c":"Brazil","y":-26.4278,"x":-51.3158},{"n":"Winsum","c":"Netherlands","y":53.3312,"x":6.5157},{"n":"East Milton","c":"United States","y":30.6175,"x":-86.9636},{"n":"Satuba","c":"Brazil","y":-9.5628,"x":-35.8239},{"n":"Grammichele","c":"Italy","y":37.2167,"x":14.6333},{"n":"Hunxe","c":"Germany","y":51.6417,"x":6.7672},{"n":"Tomino","c":"Spain","y":41.9833,"x":-8.7167},{"n":"Fontenay-le-Comte","c":"France","y":46.4669,"x":-0.8064},{"n":"Weissenhorn","c":"Germany","y":48.3044,"x":10.1593},{"n":"Dishashah","c":"Egypt","y":28.9831,"x":30.8492},{"n":"Sharonville","c":"United States","y":39.2825,"x":-84.4071},{"n":"Lappersdorf","c":"Germany","y":49.0525,"x":12.0903},{"n":"Santa Marcela","c":"Philippines","y":18.2833,"x":121.4333},{"n":"Cacequi","c":"Brazil","y":-29.8839,"x":-54.825},{"n":"West Freehold","c":"United States","y":40.2324,"x":-74.2943},{"n":"Middlesex","c":"United States","y":40.5744,"x":-74.5011},{"n":"Thompson","c":"Canada","y":55.7433,"x":-97.8553},{"n":"Lagoa da Confusao","c":"Brazil","y":-10.7939,"x":-49.6239},{"n":"Quierschied","c":"Germany","y":49.3167,"x":7.05},{"n":"San Jorge","c":"Guatemala","y":14.9253,"x":-89.5897},{"n":"Castelfranco di Sotto","c":"Italy","y":43.7,"x":10.75},{"n":"Spring Creek","c":"United States","y":40.7386,"x":-115.5971},{"n":"St. James","c":"United States","y":40.8761,"x":-73.1521},{"n":"Vigodarzere","c":"Italy","y":45.45,"x":11.8833},{"n":"Nikolayevsk","c":"Russia","y":50.0167,"x":45.45},{"n":"Maumee","c":"United States","y":41.5696,"x":-83.6636},{"n":"Caldeirao Grande","c":"Brazil","y":-11.02,"x":-40.3028},{"n":"Alto Parana","c":"Brazil","y":-23.1289,"x":-52.3189},{"n":"Lawrenceburg","c":"United States","y":38.0332,"x":-84.9032},{"n":"Brevard","c":"United States","y":35.2439,"x":-82.7264},{"n":"Saint-Paul-les-Dax","c":"France","y":43.7256,"x":-1.0528},{"n":"Sao Pedro do Piaui","c":"Brazil","y":-5.9289,"x":-42.7189},{"n":"Bad Laasphe","c":"Germany","y":50.9303,"x":8.4167},{"n":"Salzano","c":"Italy","y":45.5333,"x":12.1167},{"n":"Sternberk","c":"Czechia","y":49.7305,"x":17.2989},{"n":"Beyne-Heusay","c":"Belgium","y":50.6167,"x":5.65},{"n":"Ad Duraykish","c":"Syria","y":34.8969,"x":36.1346},{"n":"Rio Vermelho","c":"Brazil","y":-18.2939,"x":-43.0089},{"n":"Lavaltrie","c":"Canada","y":45.8833,"x":-73.2833},{"n":"Bowral","c":"Australia","y":-34.4792,"x":150.4181},{"n":"Lengede","c":"Germany","y":52.2049,"x":10.3078},{"n":"Rottingdean","c":"United Kingdom","y":50.815,"x":-0.065},{"n":"Glubczyce","c":"Poland","y":50.2,"x":17.8333},{"n":"Ixcatepec","c":"Mexico","y":21.2333,"x":-98},{"n":"Nicosia","c":"Italy","y":37.75,"x":14.4},{"n":"Gran","c":"Norway","y":60.4411,"x":10.4956},{"n":"Sunjiayan","c":"China","y":27.8776,"x":108.3073},{"n":"Lorsch","c":"Germany","y":49.6539,"x":8.5675},{"n":"Bridport","c":"United Kingdom","y":50.7336,"x":-2.7584},{"n":"Hosbach","c":"Germany","y":50,"x":9.2},{"n":"San Martino di Lupari","c":"Italy","y":45.6557,"x":11.8594},{"n":"Adams","c":"United States","y":40.7092,"x":-80.012},{"n":"Talne","c":"Ukraine","y":48.8863,"x":30.7027},{"n":"San Marco in Lamis","c":"Italy","y":41.7117,"x":15.635},{"n":"Cajabamba","c":"Peru","y":-7.6237,"x":-78.046},{"n":"Mirabela","c":"Brazil","y":-16.2628,"x":-44.1639},{"n":"Trogir","c":"Croatia","y":43.5167,"x":16.25},{"n":"Crevalcore","c":"Italy","y":44.7167,"x":11.15},{"n":"Kirchheim bei Munchen","c":"Germany","y":48.1766,"x":11.7556},{"n":"Afir","c":"Algeria","y":36.7676,"x":3.7029},{"n":"Rio de Contas","c":"Brazil","y":-13.5789,"x":-41.8108},{"n":"Broxburn","c":"United Kingdom","y":55.934,"x":-3.471},{"n":"Montefiascone","c":"Italy","y":42.5333,"x":12.0333},{"n":"Zelzate","c":"Belgium","y":51.1975,"x":3.8139},{"n":"Vicovu de Sus","c":"Romania","y":47.9258,"x":25.68},{"n":"Samorin","c":"Slovakia","y":48.0267,"x":17.3117},{"n":"Beverstedt","c":"Germany","y":53.434,"x":8.8183},{"n":"Saint-Martin-de-Crau","c":"France","y":43.6397,"x":4.8125},{"n":"Kastoria","c":"Greece","y":40.5181,"x":21.2688},{"n":"Hersham","c":"United Kingdom","y":51.3681,"x":-0.4008},{"n":"Soddy-Daisy","c":"United States","y":35.2571,"x":-85.1739},{"n":"Melilli","c":"Italy","y":37.1833,"x":15.1167},{"n":"Terra Boa","c":"Brazil","y":-12.3919,"x":-38.625},{"n":"Moberly","c":"United States","y":39.419,"x":-92.4365},{"n":"Plougastel-Daoulas","c":"France","y":48.3725,"x":-4.3706},{"n":"Bacup","c":"United Kingdom","y":53.704,"x":-2.199},{"n":"Port Clinton","c":"United States","y":41.5096,"x":-82.9385},{"n":"Zhukovo","c":"Russia","y":55.0333,"x":36.75},{"n":"Hochstadt an der Aisch","c":"Germany","y":49.7056,"x":10.8058},{"n":"Agua Blanca","c":"Guatemala","y":14.4833,"x":-89.6494},{"n":"San Javier","c":"Argentina","y":-30.5833,"x":-59.95},{"n":"Aguas Vermelhas","c":"Brazil","y":-15.7469,"x":-41.46},{"n":"Grez-Doiceau","c":"Belgium","y":50.7333,"x":4.7},{"n":"San Gennaro Vesuviano","c":"Italy","y":40.8667,"x":14.5333},{"n":"Waianae","c":"United States","y":21.4569,"x":-158.1759},{"n":"Qingxicun","c":"China","y":24.53,"x":116.5904},{"n":"Vadnais Heights","c":"United States","y":45.057,"x":-93.0748},{"n":"Wood Dale","c":"United States","y":41.9666,"x":-87.9807},{"n":"Panukulan","c":"Philippines","y":14.9333,"x":121.8167},{"n":"Montespertoli","c":"Italy","y":43.65,"x":11.0833},{"n":"Haaren","c":"Germany","y":50.7956,"x":6.1269},{"n":"Brecksville","c":"United States","y":41.3079,"x":-81.6193},{"n":"Wolsztyn","c":"Poland","y":52.1167,"x":16.1167},{"n":"Frias","c":"Argentina","y":-28.6496,"x":-65.15},{"n":"Bad Soden-Salmunster","c":"Germany","y":50.2833,"x":9.3667},{"n":"Eichenau","c":"Germany","y":48.1667,"x":11.3167},{"n":"Saarwellingen","c":"Germany","y":49.3542,"x":6.805},{"n":"Aghbala","c":"Morocco","y":32.4817,"x":-5.6427},{"n":"Dakit","c":"Philippines","y":10.06,"x":125.1606},{"n":"New Providence","c":"United States","y":40.6996,"x":-74.4034},{"n":"Maribondo","c":"Brazil","y":-9.5769,"x":-36.305},{"n":"Radnevo","c":"Bulgaria","y":42.2886,"x":25.9336},{"n":"Betanzos","c":"Spain","y":43.2792,"x":-8.2106},{"n":"Quatis","c":"Brazil","y":-22.4069,"x":-44.2578},{"n":"Krumbach","c":"Germany","y":48.2431,"x":10.3633},{"n":"Ettenheim","c":"Germany","y":48.2556,"x":7.8119},{"n":"Alexandria","c":"Brazil","y":-6.4128,"x":-38.0158},{"n":"Kaharlyk","c":"Ukraine","y":49.8522,"x":30.8092},{"n":"El Barco de Valdeorras","c":"Spain","y":42.4167,"x":-6.9831},{"n":"Shiloh","c":"United States","y":38.5534,"x":-89.916},{"n":"Pfullendorf","c":"Germany","y":47.9242,"x":9.2567},{"n":"Shangping","c":"China","y":25.0897,"x":113.0395},{"n":"Rantoul","c":"United States","y":40.3031,"x":-88.1549},{"n":"High River","c":"Canada","y":50.5808,"x":-113.8744},{"n":"Colonial Park","c":"United States","y":40.2997,"x":-76.8068},{"n":"Serra Branca","c":"Brazil","y":-7.4828,"x":-36.665},{"n":"Tomar do Geru","c":"Brazil","y":-11.3728,"x":-37.8408},{"n":"Bagulin","c":"Philippines","y":16.6079,"x":120.4378},{"n":"Drobak","c":"Norway","y":59.6667,"x":10.6333},{"n":"Manerbio","c":"Italy","y":45.3667,"x":10.1333},{"n":"Tianguistengo","c":"Mexico","y":20.7278,"x":-98.6289},{"n":"Spiez","c":"Switzerland","y":46.6831,"x":7.6664},{"n":"Broadlands","c":"United States","y":39.0168,"x":-77.5167},{"n":"Marly","c":"France","y":50.3489,"x":3.5442},{"n":"Shepshed","c":"United Kingdom","y":52.7711,"x":-1.2951},{"n":"Barra do Ribeiro","c":"Brazil","y":-30.2908,"x":-51.3008},{"n":"Presidente Bernardes","c":"Brazil","y":-22.0061,"x":-51.5531},{"n":"Boston","c":"Philippines","y":7.8667,"x":126.3667},{"n":"Cha da Alegria","c":"Brazil","y":-8.0008,"x":-35.2133},{"n":"Mqam at Tolba","c":"Morocco","y":33.9375,"x":-6.2544},{"n":"Feldbach","c":"Austria","y":46.955,"x":15.8883},{"n":"Genas","c":"France","y":45.7314,"x":5.0022},{"n":"Lourdes","c":"France","y":43.095,"x":-0.0453},{"n":"Mario Campos","c":"Brazil","y":-20.0558,"x":-44.1878},{"n":"Talanga","c":"Honduras","y":14.4,"x":-87.0833},{"n":"Hazel Crest","c":"United States","y":41.5732,"x":-87.6899},{"n":"Price","c":"United States","y":39.604,"x":-110.8004},{"n":"Vitry-le-Francois","c":"France","y":48.7247,"x":4.5844},{"n":"LaBelle","c":"United States","y":26.7219,"x":-81.4506},{"n":"Arruda dos Vinhos","c":"Portugal","y":38.9833,"x":-9.0667},{"n":"Reeuwijk","c":"Netherlands","y":52.0481,"x":4.7203},{"n":"Trebur","c":"Germany","y":49.9242,"x":8.4092},{"n":"Creutzwald","c":"France","y":49.2053,"x":6.6958},{"n":"Nesebar","c":"Bulgaria","y":42.6608,"x":27.7139},{"n":"Panchgani","c":"India","y":17.92,"x":73.82},{"n":"Vernouillet","c":"France","y":48.7208,"x":1.3606},{"n":"Santa Coloma de Farnes","c":"Spain","y":41.8624,"x":2.6654},{"n":"Eloxochitlan","c":"Mexico","y":18.5088,"x":-96.9227},{"n":"Charlton","c":"United States","y":42.1351,"x":-71.968},{"n":"Landau an der Isar","c":"Germany","y":48.6749,"x":12.6913},{"n":"Carluke","c":"United Kingdom","y":55.7337,"x":-3.8343},{"n":"Urupes","c":"Brazil","y":-21.2019,"x":-49.29},{"n":"Ilamatlan","c":"Mexico","y":20.7833,"x":-98.45},{"n":"Chanaral","c":"Chile","y":-29.0772,"x":-71.4906},{"n":"Calderara di Reno","c":"Italy","y":44.5639,"x":11.2719},{"n":"Alpena","c":"United States","y":45.074,"x":-83.4399},{"n":"Halsteren","c":"Netherlands","y":51.5256,"x":4.2747},{"n":"Knittelfeld","c":"Austria","y":47.215,"x":14.8294},{"n":"Flint","c":"United Kingdom","y":53.2482,"x":-3.1358},{"n":"Chateaudun","c":"France","y":48.0708,"x":1.3378},{"n":"Roudnice nad Labem","c":"Czechia","y":50.4254,"x":14.2618},{"n":"Loningen","c":"Germany","y":52.7167,"x":7.7667},{"n":"Ketsch","c":"Germany","y":49.3658,"x":8.5336},{"n":"Manuel Ribas","c":"Brazil","y":-24.5158,"x":-51.6678},{"n":"Tezze sul Brenta","c":"Italy","y":45.6862,"x":11.7042},{"n":"Patti","c":"Italy","y":38.1333,"x":14.9667},{"n":"Ribeirao do Pinhal","c":"Brazil","y":-23.4167,"x":-50.35},{"n":"Busra al Harir","c":"Syria","y":32.8425,"x":36.34},{"n":"Kussnacht","c":"Switzerland","y":47.0828,"x":8.4408},{"n":"Dok Kham Tai","c":"Thailand","y":19.1612,"x":99.9946},{"n":"Gricignano d'Aversa","c":"Italy","y":40.9833,"x":14.2333},{"n":"Woudenberg","c":"Netherlands","y":52.0806,"x":5.4164},{"n":"Llanes","c":"Spain","y":43.4214,"x":-4.7564},{"n":"Mayenne","c":"France","y":48.3031,"x":-0.6136},{"n":"Manati","c":"Colombia","y":10.4481,"x":-74.9592},{"n":"Rocky Point","c":"United States","y":40.9357,"x":-72.9364},{"n":"Ainsdale","c":"United Kingdom","y":53.6021,"x":-3.0405},{"n":"Kissane Ltouqi","c":"Morocco","y":34.6,"x":-5.0833},{"n":"Castelnuovo di Verona","c":"Italy","y":45.4333,"x":10.7667},{"n":"Loreto","c":"Italy","y":43.4403,"x":13.6074},{"n":"Sant Sadurni d'Anoia","c":"Spain","y":41.4261,"x":1.785},{"n":"Casale sul Sile","c":"Italy","y":45.5988,"x":12.3243},{"n":"Neunkirchen","c":"Austria","y":47.7269,"x":16.0817},{"n":"Pervomaysk","c":"Russia","y":54.8667,"x":43.8},{"n":"Lavello","c":"Italy","y":41.05,"x":15.8},{"n":"Elizabethton","c":"United States","y":36.3367,"x":-82.2369},{"n":"Ficarazzi","c":"Italy","y":38.0923,"x":13.4639},{"n":"Miranorte","c":"Brazil","y":-9.5289,"x":-48.59},{"n":"Wauconda","c":"United States","y":42.2748,"x":-88.1359},{"n":"Lake Forest Park","c":"United States","y":47.7574,"x":-122.2865},{"n":"Aconibe","c":"Equatorial Guinea","y":1.3,"x":10.9333},{"n":"Quattro Castella","c":"Italy","y":44.6333,"x":10.4667},{"n":"Gex","c":"France","y":46.3333,"x":6.0578},{"n":"Ban Chorakhe Samphan","c":"Thailand","y":14.3258,"x":99.8623},{"n":"Nules","c":"Spain","y":39.8525,"x":-0.1506},{"n":"Vicuna","c":"Chile","y":-30.0167,"x":-70.7},{"n":"Schuttorf","c":"Germany","y":52.3167,"x":7.2167},{"n":"Brunn am Gebirge","c":"Austria","y":48.1069,"x":16.2842},{"n":"Zehdenick","c":"Germany","y":52.9831,"x":13.3331},{"n":"Avenal","c":"United States","y":36.0311,"x":-120.1162},{"n":"Buchloe","c":"Germany","y":48.0375,"x":10.725},{"n":"Fereydunshahr","c":"Iran","y":32.9411,"x":50.1211},{"n":"Formello","c":"Italy","y":42.0833,"x":12.4},{"n":"Maasbree","c":"Netherlands","y":51.35,"x":6.05},{"n":"Kaspi","c":"Georgia","y":41.925,"x":44.4222},{"n":"Mechtras","c":"Algeria","y":36.5448,"x":4.0049},{"n":"Rionero in Vulture","c":"Italy","y":40.9167,"x":15.6667},{"n":"Champasak","c":"Laos","y":14.8833,"x":105.8667},{"n":"Standish","c":"United Kingdom","y":53.586,"x":-2.664},{"n":"Varzea Nova","c":"Brazil","y":-11.2589,"x":-40.9419},{"n":"Saint-Orens-de-Gameville","c":"France","y":43.5514,"x":1.5342},{"n":"Jensen Beach","c":"United States","y":27.2438,"x":-80.2423},{"n":"Jimboomba","c":"Australia","y":-27.8333,"x":153.0333},{"n":"Uttoxeter","c":"United Kingdom","y":52.898,"x":-1.86},{"n":"Fruita","c":"United States","y":39.1549,"x":-108.7307},{"n":"Homosassa Springs","c":"United States","y":28.8118,"x":-82.5392},{"n":"Severn","c":"Canada","y":44.75,"x":-79.5167},{"n":"Paripueira","c":"Brazil","y":-9.465,"x":-35.5519},{"n":"Mutterstadt","c":"Germany","y":49.4417,"x":8.3561},{"n":"Friedland","c":"Germany","y":51.4167,"x":9.9333},{"n":"Middlesborough","c":"United States","y":36.6127,"x":-83.7227},{"n":"Bad Durrheim","c":"Germany","y":48.0167,"x":8.5333},{"n":"Tahannawt","c":"Morocco","y":31.3514,"x":-7.9508},{"n":"Harnes","c":"France","y":50.445,"x":2.9058},{"n":"Costessey","c":"United Kingdom","y":52.6602,"x":1.2161},{"n":"Itaguara","c":"Brazil","y":-20.3919,"x":-44.4878},{"n":"Les Ponts-de-Ce","c":"France","y":47.4244,"x":-0.5253},{"n":"Wake","c":"Japan","y":34.8028,"x":134.1575},{"n":"Wehr","c":"Germany","y":47.6331,"x":7.9042},{"n":"Red Oak","c":"United States","y":32.5207,"x":-96.7864},{"n":"Olivehurst","c":"United States","y":39.0817,"x":-121.5549},{"n":"Big Bear City","c":"United States","y":34.2536,"x":-116.7903},{"n":"Aguilar","c":"Spain","y":37.5167,"x":-4.65},{"n":"Martinho Campos","c":"Brazil","y":-19.3319,"x":-45.2369},{"n":"Pont-Sainte-Maxence","c":"France","y":49.3011,"x":2.6036},{"n":"Brig-Glis","c":"Switzerland","y":46.3159,"x":7.9876},{"n":"Wernau","c":"Germany","y":48.6886,"x":9.4222},{"n":"Muisne","c":"Ecuador","y":0.61,"x":-80.02},{"n":"Rommerskirchen","c":"Germany","y":51.0347,"x":6.6914},{"n":"San Jacinto del Cauca","c":"Colombia","y":8.2497,"x":-74.72},{"n":"Alexandria","c":"United Kingdom","y":55.98,"x":-4.58},{"n":"Khoyniki","c":"Belarus","y":51.9,"x":29.9667},{"n":"Fortuna","c":"United States","y":40.5862,"x":-124.1419},{"n":"North Valley","c":"United States","y":35.1736,"x":-106.6231},{"n":"Chiampo","c":"Italy","y":45.55,"x":11.2833},{"n":"Schinnen","c":"Netherlands","y":50.9428,"x":5.8894},{"n":"Ruza","c":"Russia","y":55.6989,"x":36.1953},{"n":"Giporlos","c":"Philippines","y":11.1167,"x":125.45},{"n":"Lindale","c":"United States","y":32.4934,"x":-95.4069},{"n":"Oboyan","c":"Russia","y":51.2088,"x":36.2637},{"n":"Verona","c":"United States","y":40.8323,"x":-74.243},{"n":"Capaci","c":"Italy","y":38.1667,"x":13.2333},{"n":"Akhty","c":"Russia","y":41.4647,"x":47.74},{"n":"Keerbergen","c":"Belgium","y":51.0031,"x":4.6311},{"n":"Lakeland South","c":"United States","y":47.2784,"x":-122.283},{"n":"Le Relecq-Kerhuon","c":"France","y":48.4086,"x":-4.3969},{"n":"Golyshmanovo","c":"Russia","y":56.3819,"x":68.3715},{"n":"Balchik","c":"Bulgaria","y":43.4078,"x":28.1622},{"n":"Short Hills","c":"United States","y":40.7389,"x":-74.3278},{"n":"Calcinaia","c":"Italy","y":43.6835,"x":10.6165},{"n":"Huron","c":"United States","y":44.3622,"x":-98.2102},{"n":"Arroio do Tigre","c":"Brazil","y":-29.3328,"x":-53.0928},{"n":"Amilly","c":"France","y":47.9731,"x":2.7703},{"n":"Itapui","c":"Brazil","y":-22.2333,"x":-48.7192},{"n":"Tauberbischofsheim","c":"Germany","y":49.6225,"x":9.6628},{"n":"El Tabo","c":"Chile","y":-33.45,"x":-71.6667},{"n":"Sault Ste. Marie","c":"United States","y":46.4817,"x":-84.3723},{"n":"Nemours","c":"France","y":48.2686,"x":2.6936},{"n":"Bollnas","c":"Sweden","y":61.3484,"x":16.3883},{"n":"Te Awamutu","c":"New Zealand","y":-38.0083,"x":175.325},{"n":"Saka","c":"Japan","y":34.3414,"x":132.5139},{"n":"Serrolandia","c":"Brazil","y":-11.4158,"x":-40.3019},{"n":"Espita","c":"Mexico","y":21.0128,"x":-88.3047},{"n":"Qigexingcun","c":"China","y":42.0172,"x":86.3027},{"n":"Plattling","c":"Germany","y":48.7767,"x":12.8736},{"n":"Colac","c":"Australia","y":-38.3403,"x":143.5847},{"n":"Mijdrecht","c":"Netherlands","y":52.2072,"x":4.8594},{"n":"Paso de los Toros","c":"Uruguay","y":-32.8181,"x":-56.5064},{"n":"Rosas","c":"Colombia","y":2.26,"x":-76.74},{"n":"Santa Maria a Monte","c":"Italy","y":43.7,"x":10.6833},{"n":"Buchs","c":"Switzerland","y":47.1656,"x":9.4711},{"n":"Luis Antonio","c":"Brazil","y":-21.555,"x":-47.7044},{"n":"Dossenheim","c":"Germany","y":49.4492,"x":8.6722},{"n":"Gmunden","c":"Austria","y":47.9181,"x":13.7994},{"n":"Zelenodolsk","c":"Ukraine","y":47.5631,"x":33.6524},{"n":"Matsushima","c":"Japan","y":38.3736,"x":141.061},{"n":"Brookside","c":"United States","y":39.6666,"x":-75.7153},{"n":"Veyrier","c":"Switzerland","y":46.1667,"x":6.1833},{"n":"South Park Township","c":"United States","y":40.2989,"x":-79.9944},{"n":"South Park","c":"United States","y":40.2989,"x":-79.9944},{"n":"Arara","c":"Brazil","y":-6.8278,"x":-35.7578},{"n":"Tachov","c":"Czechia","y":49.7954,"x":12.6337},{"n":"Mountain Park","c":"United States","y":33.8458,"x":-84.1313},{"n":"Carpenedolo","c":"Italy","y":45.3654,"x":10.4323},{"n":"Ubstadt-Weiher","c":"Germany","y":49.1656,"x":8.625},{"n":"Varazze","c":"Italy","y":44.36,"x":8.5766},{"n":"Gourock","c":"United Kingdom","y":55.9538,"x":-4.8173},{"n":"Shanyincun","c":"China","y":37.9151,"x":114.4126},{"n":"Carpinteria","c":"United States","y":34.3962,"x":-119.5118},{"n":"Grimstad","c":"Norway","y":58.3405,"x":8.5934},{"n":"Gueret","c":"France","y":46.1706,"x":1.8683},{"n":"Mogeiro","c":"Brazil","y":-7.2989,"x":-35.4789},{"n":"Joaquin V. Gonzalez","c":"Argentina","y":-25.1171,"x":-64.1247},{"n":"San Jose de Maipo","c":"Chile","y":-33.6333,"x":-70.3667},{"n":"Besigheim","c":"Germany","y":48.9989,"x":9.1414},{"n":"Glenn Heights","c":"United States","y":32.5506,"x":-96.8548},{"n":"Pegnitz","c":"Germany","y":49.7564,"x":11.545},{"n":"Ribeira Brava","c":"Portugal","y":32.6722,"x":-17.0639},{"n":"Powell","c":"United States","y":40.1684,"x":-83.0826},{"n":"Sainte-Sophie","c":"Canada","y":45.82,"x":-73.9},{"n":"Itagi","c":"Brazil","y":-14.1628,"x":-40.0058},{"n":"Palombara Sabina","c":"Italy","y":42.0667,"x":12.7667},{"n":"Cavallino","c":"Italy","y":40.3102,"x":18.2022},{"n":"Autun","c":"France","y":46.9511,"x":4.2986},{"n":"Plouzane","c":"France","y":48.38,"x":-4.6006},{"n":"Friesenheim","c":"Germany","y":48.3731,"x":7.8833},{"n":"Rodental","c":"Germany","y":50.2883,"x":11.0276},{"n":"Wasserburg am Inn","c":"Germany","y":48.0608,"x":12.2333},{"n":"North Walsham","c":"United Kingdom","y":52.821,"x":1.387},{"n":"Cesky Krumlov","c":"Czechia","y":48.811,"x":14.3152},{"n":"Artondale","c":"United States","y":47.3024,"x":-122.6391},{"n":"Yakage","c":"Japan","y":34.6278,"x":133.5872},{"n":"Glenn Dale","c":"United States","y":38.9833,"x":-76.804},{"n":"Western Springs","c":"United States","y":41.8022,"x":-87.9006},{"n":"Okmulgee","c":"United States","y":35.6136,"x":-96.0069},{"n":"Luderitz","c":"Namibia","y":-26.6478,"x":15.1578},{"n":"Campo de Criptana","c":"Spain","y":39.4,"x":-3.1167},{"n":"DeRidder","c":"United States","y":30.8467,"x":-93.2931},{"n":"Sarria","c":"Spain","y":42.7833,"x":-7.4167},{"n":"Azle","c":"United States","y":32.8955,"x":-97.5379},{"n":"Bugugoucun","c":"China","y":41.6904,"x":117.4483},{"n":"Vidalia","c":"United States","y":32.2125,"x":-82.4019},{"n":"Moss Point","c":"United States","y":30.424,"x":-88.5289},{"n":"Nordestina","c":"Brazil","y":-10.8228,"x":-39.4278},{"n":"Fort Morgan","c":"United States","y":40.2538,"x":-103.7909},{"n":"Moissac","c":"France","y":44.1047,"x":1.0853},{"n":"Itirucu","c":"Brazil","y":-13.5319,"x":-40.15},{"n":"Dardenne Prairie","c":"United States","y":38.7566,"x":-90.732},{"n":"Tanagura","c":"Japan","y":37.0297,"x":140.3797},{"n":"Castiglion Fiorentino","c":"Italy","y":43.3439,"x":11.9189},{"n":"Bischwiller","c":"France","y":48.7664,"x":7.8569},{"n":"Bad Salzdetfurth","c":"Germany","y":52.0578,"x":10.0058},{"n":"Moorreesburg","c":"South Africa","y":-33.15,"x":18.6667},{"n":"Porto Recanati","c":"Italy","y":43.4299,"x":13.6649},{"n":"Jitauna","c":"Brazil","y":-14.0189,"x":-39.8889},{"n":"As","c":"Czechia","y":50.224,"x":12.1951},{"n":"Ubach over Worms","c":"Netherlands","y":50.9158,"x":6.0517},{"n":"Trebaseleghe","c":"Italy","y":45.5833,"x":12.05},{"n":"River Ridge","c":"United States","y":29.9593,"x":-90.2202},{"n":"Kasumkent","c":"Russia","y":41.6667,"x":48.1333},{"n":"Cremlingen","c":"Germany","y":52.2489,"x":10.6542},{"n":"Dinklage","c":"Germany","y":52.6622,"x":8.125},{"n":"Aubergenville","c":"France","y":48.9583,"x":1.855},{"n":"Sitio do Mato","c":"Brazil","y":-13.085,"x":-43.465},{"n":"Retirolandia","c":"Brazil","y":-11.495,"x":-39.4258},{"n":"Puerto San Martin","c":"Argentina","y":-32.7167,"x":-60.7333},{"n":"Buenos Aires","c":"Brazil","y":-7.7258,"x":-35.3269},{"n":"Nong Khae","c":"Thailand","y":14.3406,"x":100.8673},{"n":"Tocumbo","c":"Mexico","y":19.7,"x":-102.5333},{"n":"Medway","c":"United States","y":42.1535,"x":-71.4291},{"n":"Reggada","c":"Morocco","y":29.5716,"x":-9.6972},{"n":"Mounds View","c":"United States","y":45.1071,"x":-93.2076},{"n":"Dalby","c":"Australia","y":-27.1833,"x":151.2667},{"n":"Boudenib","c":"Morocco","y":31.9505,"x":-3.5973},{"n":"Chiroqchi","c":"Uzbekistan","y":39.0336,"x":66.5722},{"n":"Imbau","c":"Brazil","y":-24.445,"x":-50.7608},{"n":"Saint-Charles-Borromee","c":"Canada","y":46.05,"x":-73.4667},{"n":"Zella-Mehlis","c":"Germany","y":50.6597,"x":10.6669},{"n":"Kerepestarcsa","c":"Hungary","y":47.5478,"x":19.2633},{"n":"Capo d'Orlando","c":"Italy","y":38.15,"x":14.7333},{"n":"Hullhorst","c":"Germany","y":52.2833,"x":8.6667},{"n":"Velen","c":"Germany","y":51.8939,"x":6.9897},{"n":"Carros","c":"France","y":43.7725,"x":7.1933},{"n":"Nosivka","c":"Ukraine","y":50.93,"x":31.58},{"n":"Berkeley Heights","c":"United States","y":40.6764,"x":-74.4244},{"n":"Portage La Prairie","c":"Canada","y":49.9728,"x":-98.2919},{"n":"Cocotitlan","c":"Mexico","y":19.2167,"x":-98.85},{"n":"Ruti","c":"Switzerland","y":47.2614,"x":8.8556},{"n":"Wiesmoor","c":"Germany","y":53.4,"x":7.7333},{"n":"Usumatlan","c":"Guatemala","y":14.9489,"x":-89.7767},{"n":"Solana Beach","c":"United States","y":32.9942,"x":-117.2575},{"n":"Borodyanka","c":"Ukraine","y":50.6439,"x":29.9339},{"n":"Kiiminki","c":"Finland","y":65.1333,"x":25.775},{"n":"Sendenhorst","c":"Germany","y":51.8439,"x":7.8278},{"n":"Nesconset","c":"United States","y":40.8467,"x":-73.1522},{"n":"Richton Park","c":"United States","y":41.4816,"x":-87.7387},{"n":"Seravezza","c":"Italy","y":44,"x":10.2333},{"n":"Mogocha","c":"Russia","y":53.7333,"x":119.7667},{"n":"Montegranaro","c":"Italy","y":43.2332,"x":13.6322},{"n":"Slobozhanske","c":"Ukraine","y":48.5342,"x":35.0749},{"n":"Beyla","c":"Guinea","y":8.687,"x":-8.657},{"n":"Calcinato","c":"Italy","y":45.4581,"x":10.4146},{"n":"Svirsk","c":"Russia","y":53.0833,"x":103.3333},{"n":"Trzebnica","c":"Poland","y":51.305,"x":17.0614},{"n":"Comines","c":"France","y":50.7611,"x":3.0078},{"n":"Cairo Montenotte","c":"Italy","y":44.3979,"x":8.2778},{"n":"Herbrechtingen","c":"Germany","y":48.6253,"x":10.1739},{"n":"Mahao","c":"China","y":26.8675,"x":108.3267},{"n":"Palos Verdes Estates","c":"United States","y":33.7871,"x":-118.3976},{"n":"Pontecorvo","c":"Italy","y":41.4626,"x":13.6676},{"n":"Manching","c":"Germany","y":48.7186,"x":11.4972},{"n":"Chulumani","c":"Bolivia","y":-16.4102,"x":-67.5255},{"n":"Ulvila","c":"Finland","y":61.4292,"x":21.875},{"n":"Novouzensk","c":"Russia","y":50.45,"x":48.15},{"n":"Esneux","c":"Belgium","y":50.5333,"x":5.5667},{"n":"Gvardeysk","c":"Russia","y":54.65,"x":21.0667},{"n":"El Kansera","c":"Morocco","y":34.0419,"x":-5.9272},{"n":"San Biagio di Callalta","c":"Italy","y":45.6867,"x":12.3815},{"n":"Woodinville","c":"United States","y":47.7569,"x":-122.1478},{"n":"Serra Azul","c":"Brazil","y":-21.3108,"x":-47.5658},{"n":"Leonforte","c":"Italy","y":37.65,"x":14.4},{"n":"Sillamae","c":"Estonia","y":59.3931,"x":27.7742},{"n":"Ostringen","c":"Germany","y":49.2194,"x":8.7108},{"n":"Agdangan","c":"Philippines","y":13.8758,"x":121.9122},{"n":"Manorville","c":"United States","y":40.8575,"x":-72.7915},{"n":"Damaishan","c":"China","y":24.4891,"x":112.2693},{"n":"Tamahu","c":"Guatemala","y":15.3069,"x":-90.2342},{"n":"Apricena","c":"Italy","y":41.7846,"x":15.4436},{"n":"Beverungen","c":"Germany","y":51.6628,"x":9.3725},{"n":"Bellefontaine","c":"United States","y":40.3627,"x":-83.763},{"n":"Andkhoy","c":"Afghanistan","y":36.95,"x":65.1167},{"n":"Lapinig","c":"Philippines","y":12.315,"x":125.302},{"n":"Timberlake","c":"United States","y":37.3167,"x":-79.2482},{"n":"Morbegno","c":"Italy","y":46.1333,"x":9.5667},{"n":"Chigwell","c":"United Kingdom","y":51.6225,"x":0.0723},{"n":"Sabinov","c":"Slovakia","y":49.1,"x":21.1},{"n":"Ban Tat","c":"Thailand","y":17.2791,"x":102.8022},{"n":"Al Muzayrib","c":"Syria","y":32.7109,"x":36.0266},{"n":"Picana","c":"Spain","y":39.4361,"x":-0.435},{"n":"Channahon","c":"United States","y":41.4213,"x":-88.2593},{"n":"Port Royal","c":"United States","y":32.3557,"x":-80.7029},{"n":"Ceyu","c":"China","y":37.7939,"x":114.0905},{"n":"Plaza Huincul","c":"Argentina","y":-38.9338,"x":-69.1987},{"n":"Bensville","c":"United States","y":38.6176,"x":-77.0077},{"n":"Ocna Mures","c":"Romania","y":46.39,"x":23.86},{"n":"Bolintin Vale","c":"Romania","y":44.4472,"x":25.7572},{"n":"Rossdorf","c":"Germany","y":49.8583,"x":8.7556},{"n":"East Islip","c":"United States","y":40.7275,"x":-73.1861},{"n":"Affoltern am Albis","c":"Switzerland","y":47.2817,"x":8.4502},{"n":"Odoorn","c":"Netherlands","y":52.8508,"x":6.8481},{"n":"Razlog","c":"Bulgaria","y":41.8865,"x":23.468},{"n":"Raffadali","c":"Italy","y":37.4047,"x":13.5339},{"n":"Vila Pouca de Aguiar","c":"Portugal","y":41.4833,"x":-7.6333},{"n":"Weilburg","c":"Germany","y":50.4833,"x":8.25},{"n":"Vasylivka","c":"Ukraine","y":47.4344,"x":35.2808},{"n":"Uropa","c":"Brazil","y":-11.1406,"x":-62.3608},{"n":"Stamboliyski","c":"Bulgaria","y":42.1332,"x":24.5379},{"n":"Asjen","c":"Morocco","y":34.85,"x":-5.6167},{"n":"New Ulm","c":"United States","y":44.3121,"x":-94.4686},{"n":"La Queue-en-Brie","c":"France","y":48.7894,"x":2.5767},{"n":"Harrow on the Hill","c":"United Kingdom","y":51.5655,"x":-0.3327},{"n":"Nova Londrina","c":"Brazil","y":-22.7658,"x":-52.985},{"n":"Monteux","c":"France","y":44.0356,"x":4.9972},{"n":"Somain","c":"France","y":50.3575,"x":3.2803},{"n":"Barsbuttel","c":"Germany","y":53.5667,"x":10.1667},{"n":"Ansiao","c":"Portugal","y":39.9167,"x":-8.4333},{"n":"Bridgnorth","c":"United Kingdom","y":52.535,"x":-2.4195},{"n":"Miranda do Corvo","c":"Portugal","y":40.1,"x":-8.3333},{"n":"Barrafranca","c":"Italy","y":37.3667,"x":14.2},{"n":"Balatonfured","c":"Hungary","y":46.95,"x":17.8833},{"n":"Oncativo","c":"Argentina","y":-31.9134,"x":-63.6818},{"n":"Tatarikan","c":"Philippines","y":7.7333,"x":124.1167},{"n":"Jurua","c":"Brazil","y":-3.4808,"x":-66.0689},{"n":"Huguan Nongchang","c":"China","y":21.2015,"x":110.2459},{"n":"Yzeure","c":"France","y":46.5658,"x":3.3544},{"n":"Belev","c":"Russia","y":53.8,"x":36.1333},{"n":"Spilamberto","c":"Italy","y":44.5333,"x":11.0167},{"n":"Baker","c":"United States","y":30.5833,"x":-91.1581},{"n":"Mazatlan Villa de Flores","c":"Mexico","y":18.0167,"x":-96.9167},{"n":"Thames Centre","c":"Canada","y":43.03,"x":-81.08},{"n":"Alora","c":"Spain","y":36.8167,"x":-4.7},{"n":"Presidente Janio Quadros","c":"Brazil","y":-14.6889,"x":-41.6778},{"n":"Krasnozavodsk","c":"Russia","y":56.4381,"x":38.2294},{"n":"Ceuti","c":"Spain","y":38.0789,"x":-1.2722},{"n":"Yvetot","c":"France","y":49.6169,"x":0.7531},{"n":"Monte Belo","c":"Brazil","y":-21.3258,"x":-46.3678},{"n":"Cedar Lake","c":"United States","y":41.3697,"x":-87.4383},{"n":"Singuilucan","c":"Mexico","y":19.9675,"x":-98.5178},{"n":"Globe","c":"United States","y":33.3869,"x":-110.7515},{"n":"Uyar","c":"Russia","y":55.8167,"x":94.3167},{"n":"Wolfhagen","c":"Germany","y":51.3272,"x":9.1709},{"n":"Sankt Georgen im Schwarzwald","c":"Germany","y":48.1247,"x":8.3308},{"n":"Campiglia Marittima","c":"Italy","y":43.0667,"x":10.6167},{"n":"Warrenville","c":"United States","y":41.821,"x":-88.1857},{"n":"Banos","c":"Ecuador","y":-1.3964,"x":-78.4247},{"n":"Barentin","c":"France","y":49.5444,"x":0.9536},{"n":"Abrera","c":"Spain","y":41.5165,"x":1.9024},{"n":"Lower Moreland","c":"United States","y":40.1346,"x":-75.0542},{"n":"Terrasini Favarotta","c":"Italy","y":38.15,"x":13.0833},{"n":"Mississippi Mills","c":"Canada","y":45.2167,"x":-76.2},{"n":"Bonyhad","c":"Hungary","y":46.3,"x":18.53},{"n":"Schleiden","c":"Germany","y":50.5331,"x":6.4667},{"n":"Spreitenbach","c":"Switzerland","y":47.4181,"x":8.3661},{"n":"Monteprandone","c":"Italy","y":42.9203,"x":13.8355},{"n":"Zabaykalsk","c":"Russia","y":49.6514,"x":117.3269},{"n":"Luis Alves","c":"Brazil","y":-26.7208,"x":-48.9328},{"n":"Hockessin","c":"United States","y":39.7837,"x":-75.6815},{"n":"Powell River","c":"Canada","y":49.8353,"x":-124.5247},{"n":"Sete Barras","c":"Brazil","y":-24.3878,"x":-47.9258},{"n":"Waltershausen","c":"Germany","y":50.8975,"x":10.5558},{"n":"Velykodolynske","c":"Ukraine","y":46.3425,"x":30.5653},{"n":"Petushki","c":"Russia","y":55.9333,"x":39.4667},{"n":"L'Union","c":"France","y":43.6564,"x":1.4844},{"n":"Rendon","c":"United States","y":32.5789,"x":-97.235},{"n":"South Glengarry","c":"Canada","y":45.2,"x":-74.5833},{"n":"Adygeysk","c":"Russia","y":44.88,"x":39.19},{"n":"Noeux-les-Mines","c":"France","y":50.4797,"x":2.6647},{"n":"Sidi Yahia","c":"Morocco","y":30.4969,"x":-8.8211},{"n":"Hajdusamson","c":"Hungary","y":47.6,"x":21.7667},{"n":"Balneario do Rincao","c":"Brazil","y":-28.8344,"x":-49.2361},{"n":"Adi Keyh","c":"Eritrea","y":14.8333,"x":39.3667},{"n":"Sandpoint","c":"United States","y":48.2822,"x":-116.5613},{"n":"Missoes","c":"Brazil","y":-14.8839,"x":-44.0908},{"n":"Yavoriv","c":"Ukraine","y":49.9469,"x":23.3931},{"n":"Raymond Terrace","c":"Australia","y":-32.7615,"x":151.7441},{"n":"Bolsover","c":"United Kingdom","y":53.2304,"x":-1.2875},{"n":"Avigliana","c":"Italy","y":45.0794,"x":7.3961},{"n":"Sali","c":"Algeria","y":26.9833,"x":-0.0333},{"n":"Izium","c":"Ukraine","y":49.2238,"x":37.2915},{"n":"Tapiratiba","c":"Brazil","y":-21.4678,"x":-46.7489},{"n":"Qulan","c":"Kazakhstan","y":42.9204,"x":72.705},{"n":"Abaran","c":"Spain","y":38.2031,"x":-1.4003},{"n":"Strunino","c":"Russia","y":56.3733,"x":38.585},{"n":"Coolidge","c":"United States","y":32.9395,"x":-111.5261},{"n":"North Perth","c":"Canada","y":43.73,"x":-80.95},{"n":"Kaspiyskiy","c":"Russia","y":45.3833,"x":47.3667},{"n":"North Palm Beach","c":"United States","y":26.8216,"x":-80.0576},{"n":"Piratininga","c":"Brazil","y":-22.4128,"x":-49.135},{"n":"Schodack","c":"United States","y":42.5297,"x":-73.6858},{"n":"Balsa Nova","c":"Brazil","y":-25.5839,"x":-49.6358},{"n":"Seclin","c":"France","y":50.5483,"x":3.0294},{"n":"Pine","c":"United States","y":40.6437,"x":-80.0315},{"n":"Mercier","c":"Canada","y":45.32,"x":-73.75},{"n":"Milha","c":"Brazil","y":-5.675,"x":-39.1939},{"n":"South Stormont","c":"Canada","y":45.0833,"x":-74.9667},{"n":"Aubenas","c":"France","y":44.6197,"x":4.3903},{"n":"Warrensville Heights","c":"United States","y":41.4363,"x":-81.5222},{"n":"Nossa Senhora do Livramento","c":"Brazil","y":-15.775,"x":-56.3458},{"n":"Olen","c":"Belgium","y":51.1439,"x":4.8597},{"n":"Scheessel","c":"Germany","y":53.1706,"x":9.4831},{"n":"Barssel","c":"Germany","y":53.1703,"x":7.7467},{"n":"Plover","c":"United States","y":44.4614,"x":-89.5383},{"n":"Villecresnes","c":"France","y":48.7214,"x":2.5342},{"n":"Goiatins","c":"Brazil","y":-7.71,"x":-47.3139},{"n":"Arcachon","c":"France","y":44.6586,"x":-1.1689},{"n":"Ksar Sghir","c":"Morocco","y":35.8419,"x":-5.5586},{"n":"Honggu","c":"China","y":36.293,"x":102.9575},{"n":"Chos Malal","c":"Argentina","y":-37.3833,"x":-70.2667},{"n":"Wickede","c":"Germany","y":51.4964,"x":7.8658},{"n":"Song Phi Nong","c":"Thailand","y":14.2306,"x":100.0389},{"n":"Ciudad Insurgentes","c":"Mexico","y":25.2617,"x":-111.7744},{"n":"Mahomet","c":"United States","y":40.1885,"x":-88.3904},{"n":"Oftersheim","c":"Germany","y":49.3706,"x":8.5847},{"n":"Olfen","c":"Germany","y":51.7086,"x":7.38},{"n":"Lagoa Dourada","c":"Brazil","y":-20.9139,"x":-44.0778},{"n":"Tonosho","c":"Japan","y":34.4805,"x":134.1702},{"n":"Governador Dix-Sept Rosado","c":"Brazil","y":-5.4589,"x":-37.5208},{"n":"Sarrebourg","c":"France","y":48.7347,"x":7.0539},{"n":"Antonio Prado","c":"Brazil","y":-28.8578,"x":-51.2828},{"n":"Cusset","c":"France","y":46.1344,"x":3.4564},{"n":"Noceto","c":"Italy","y":44.8167,"x":10.1833},{"n":"Lone Tree","c":"United States","y":39.5309,"x":-104.871},{"n":"Montgomeryville","c":"United States","y":40.2502,"x":-75.2405},{"n":"Bagnolo Mella","c":"Italy","y":45.43,"x":10.1854},{"n":"East Greenwich","c":"United States","y":41.6362,"x":-71.5058},{"n":"South Daytona","c":"United States","y":29.1656,"x":-81.0056},{"n":"Saint-Colomban","c":"Canada","y":45.73,"x":-74.13},{"n":"Macara","c":"Ecuador","y":-4.3833,"x":-79.95},{"n":"Claye-Souilly","c":"France","y":48.945,"x":2.6867},{"n":"Pingtiancun","c":"China","y":25.2225,"x":114.6252},{"n":"Villas","c":"United States","y":26.5504,"x":-81.8679},{"n":"Brenes","c":"Spain","y":37.55,"x":-5.8667},{"n":"Herzberg am Harz","c":"Germany","y":51.6556,"x":10.3394},{"n":"Sebt Bni Garfett","c":"Morocco","y":35.25,"x":-5.8333},{"n":"Celakovice","c":"Czechia","y":50.1605,"x":14.7501},{"n":"Treuchtlingen","c":"Germany","y":48.9553,"x":10.9094},{"n":"Moody","c":"United States","y":33.5986,"x":-86.4963},{"n":"Chernigovka","c":"Russia","y":44.3333,"x":132.5667},{"n":"Notodden","c":"Norway","y":59.5617,"x":9.2658},{"n":"Frecheirinha","c":"Brazil","y":-3.76,"x":-40.8158},{"n":"McPherson","c":"United States","y":38.3714,"x":-97.6605},{"n":"Stolin","c":"Belarus","y":51.8897,"x":26.8507},{"n":"Alaverdi","c":"Armenia","y":41.095,"x":44.6558},{"n":"Tetiiv","c":"Ukraine","y":49.3708,"x":29.69},{"n":"Hersbruck","c":"Germany","y":49.5081,"x":11.4328},{"n":"Auriol","c":"France","y":43.3694,"x":5.6314},{"n":"Vieira do Minho","c":"Portugal","y":41.6333,"x":-8.1333},{"n":"Rothenbach an der Pegnitz","c":"Germany","y":49.4847,"x":11.2475},{"n":"Lacombe","c":"Canada","y":52.4683,"x":-113.7369},{"n":"Honiton","c":"United Kingdom","y":50.8,"x":-3.19},{"n":"Alcacer do Sal","c":"Portugal","y":38.3725,"x":-8.5133},{"n":"Fort Lewis","c":"United States","y":47.0955,"x":-122.5672},{"n":"Davidson","c":"United States","y":35.4846,"x":-80.8252},{"n":"Kaji","c":"China","y":26.0249,"x":102.7873},{"n":"Suamico","c":"United States","y":44.6352,"x":-88.0664},{"n":"Borgo San Dalmazzo","c":"Italy","y":44.3333,"x":7.4833},{"n":"La Chapelle-Saint-Luc","c":"France","y":48.3119,"x":4.0444},{"n":"San Marino","c":"United States","y":34.1224,"x":-118.1132},{"n":"Spring Garden","c":"United States","y":39.9454,"x":-76.7212},{"n":"Senador Jose Porfirio","c":"Brazil","y":-2.5908,"x":-51.9539},{"n":"Esperance","c":"Australia","y":-33.8611,"x":121.8919},{"n":"Turvo","c":"Brazil","y":-28.9258,"x":-49.6789},{"n":"Santo Stino di Livenza","c":"Italy","y":45.7333,"x":12.6833},{"n":"Parigi","c":"India","y":13.8929,"x":77.4598},{"n":"Muswellbrook","c":"Australia","y":-32.2654,"x":150.8885},{"n":"Carnaubeira da Penha","c":"Brazil","y":-8.3219,"x":-38.7439},{"n":"Capul","c":"Philippines","y":12.4167,"x":124.1833},{"n":"Tabocas do Brejo Velho","c":"Brazil","y":-12.7058,"x":-44.0069},{"n":"Gartringen","c":"Germany","y":48.6408,"x":8.9006},{"n":"Solofra","c":"Italy","y":40.8333,"x":14.85},{"n":"Trentham","c":"United Kingdom","y":52.9663,"x":-2.1899},{"n":"Argentona","c":"Spain","y":41.5558,"x":2.4025},{"n":"Bou Adel","c":"Morocco","y":34.5428,"x":-4.5075},{"n":"Maktar","c":"Tunisia","y":35.85,"x":9.2},{"n":"Shiwan","c":"China","y":37.4786,"x":109.423},{"n":"Anolaima","c":"Colombia","y":4.7633,"x":-74.4647},{"n":"Strand","c":"Norway","y":59.0633,"x":6.0278},{"n":"Palleja","c":"Spain","y":41.4242,"x":1.9978},{"n":"Morungaba","c":"Brazil","y":-22.88,"x":-46.7917},{"n":"Huai Yot","c":"Thailand","y":7.7892,"x":99.6329},{"n":"Fort Drum","c":"United States","y":44.0451,"x":-75.7847},{"n":"Bonneville","c":"France","y":46.0789,"x":6.4008},{"n":"Colesberg","c":"South Africa","y":-30.7167,"x":25.1},{"n":"Trezzo sull'Adda","c":"Italy","y":45.6,"x":9.5167},{"n":"West Bradford","c":"United States","y":39.9633,"x":-75.716},{"n":"Graulhet","c":"France","y":43.7608,"x":1.9886},{"n":"Bni Khloug","c":"Morocco","y":32.65,"x":-7.3833},{"n":"Wanderley","c":"Brazil","y":-12.12,"x":-43.8878},{"n":"Teror","c":"Spain","y":28.059,"x":-15.5476},{"n":"Chatham","c":"United States","y":39.6733,"x":-89.6938},{"n":"Divnoye","c":"Russia","y":45.9089,"x":43.3547},{"n":"Oulad Rahmoun","c":"Morocco","y":32.3278,"x":-6.5006},{"n":"Amity","c":"United States","y":40.2905,"x":-75.7477},{"n":"Chaiyo","c":"Thailand","y":14.6666,"x":100.4702},{"n":"Amboise","c":"France","y":47.4114,"x":0.9825},{"n":"Flexeiras","c":"Brazil","y":-9.2728,"x":-35.715},{"n":"Kanel","c":"Senegal","y":15.4833,"x":-13.1667},{"n":"Lakeland Village","c":"United States","y":33.648,"x":-117.3706},{"n":"Sooke","c":"Canada","y":48.3761,"x":-123.7378},{"n":"Bruay-sur-l'Escaut","c":"France","y":50.3983,"x":3.5394},{"n":"Borgaro Torinese","c":"Italy","y":45.15,"x":7.65},{"n":"Marianske Lazne","c":"Czechia","y":49.9647,"x":12.7012},{"n":"Bellefonte","c":"United States","y":40.9141,"x":-77.7683},{"n":"Kaufungen","c":"Germany","y":51.2811,"x":9.6186},{"n":"Rozhyshche","c":"Ukraine","y":50.9131,"x":25.27},{"n":"Haselunne","c":"Germany","y":52.6667,"x":7.4667},{"n":"Wolverton","c":"United Kingdom","y":52.0626,"x":-0.8102},{"n":"Teutschenthal","c":"Germany","y":51.45,"x":11.8},{"n":"Brzeg Dolny","c":"Poland","y":51.273,"x":16.7081},{"n":"Mercogliano","c":"Italy","y":40.9231,"x":14.7428},{"n":"Fene","c":"Spain","y":43.4667,"x":-8.1667},{"n":"Tapilula","c":"Mexico","y":17.25,"x":-93.0167},{"n":"Forest Hill","c":"United States","y":32.6619,"x":-97.2662},{"n":"Piketberg","c":"South Africa","y":-32.9,"x":18.7667},{"n":"Borgosesia","c":"Italy","y":45.7169,"x":8.2764},{"n":"Itayanagi","c":"Japan","y":40.6961,"x":140.4575},{"n":"Gornyak","c":"Russia","y":51,"x":81.4667},{"n":"Franeker","c":"Netherlands","y":53.1875,"x":5.54},{"n":"Montecorvino Rovella","c":"Italy","y":40.7,"x":14.9833},{"n":"Vail","c":"United States","y":32.0217,"x":-110.6937},{"n":"Licinio de Almeida","c":"Brazil","y":-14.6819,"x":-42.5078},{"n":"Peissenberg","c":"Germany","y":47.795,"x":11.0603},{"n":"Pola de Laviana","c":"Spain","y":43.2358,"x":-5.5563},{"n":"Pianiga","c":"Italy","y":45.4583,"x":12.008},{"n":"Cypress Lake","c":"United States","y":26.5391,"x":-81.9},{"n":"Dawson Creek","c":"Canada","y":55.7606,"x":-120.2356},{"n":"Gladeview","c":"United States","y":25.8395,"x":-80.2368},{"n":"Schongau","c":"Germany","y":47.8167,"x":10.9},{"n":"Maravilla Tenejapa","c":"Mexico","y":16.1333,"x":-91.2833},{"n":"Tarnos","c":"France","y":43.5406,"x":-1.4614},{"n":"Arrigorriaga","c":"Spain","y":43.2078,"x":-2.8861},{"n":"Tashi","c":"China","y":34.4977,"x":106.5281},{"n":"Ulubey","c":"Turkey","y":38.4216,"x":29.2895},{"n":"Arluno","c":"Italy","y":45.5,"x":8.9333},{"n":"Triel-sur-Seine","c":"France","y":48.9808,"x":2.0061},{"n":"Byala Slatina","c":"Bulgaria","y":43.4688,"x":23.9454},{"n":"Monte San Giovanni Campano","c":"Italy","y":41.6333,"x":13.5167},{"n":"Borger","c":"Netherlands","y":52.9236,"x":6.7922},{"n":"Grave","c":"Netherlands","y":51.7592,"x":5.7383},{"n":"Monfort Heights","c":"United States","y":39.1822,"x":-84.6075},{"n":"Lipari","c":"Italy","y":38.4673,"x":14.9554},{"n":"Braselton","c":"United States","y":34.1088,"x":-83.8128},{"n":"Syston","c":"United Kingdom","y":52.7,"x":-1.08},{"n":"Lapeer","c":"United States","y":43.0447,"x":-83.3254},{"n":"Sulingen","c":"Germany","y":52.6667,"x":8.8},{"n":"Yuza","c":"Japan","y":39.0147,"x":139.9075},{"n":"Herk-de-Stad","c":"Belgium","y":50.9406,"x":5.1672},{"n":"Oulad Ouchchih","c":"Morocco","y":35.0939,"x":-5.9453},{"n":"Dunmore","c":"United States","y":41.4152,"x":-75.6072},{"n":"Crayford","c":"United Kingdom","y":51.4491,"x":0.1812},{"n":"Cristais","c":"Brazil","y":-20.8758,"x":-45.5189},{"n":"Flitwick","c":"United Kingdom","y":52.0038,"x":-0.4966},{"n":"Kittanning","c":"United States","y":40.8279,"x":-79.5233},{"n":"Lucena","c":"Brazil","y":-6.9,"x":-34.8689},{"n":"Kushk","c":"Iran","y":32.6425,"x":51.4997},{"n":"Nova Crixas","c":"Brazil","y":-14.0989,"x":-50.3269},{"n":"Santa Margarita","c":"Spain","y":39.7033,"x":3.1036},{"n":"Castellbisbal","c":"Spain","y":41.4767,"x":1.9822},{"n":"Vocklabruck","c":"Austria","y":48.0086,"x":13.6558},{"n":"Ibaretama","c":"Brazil","y":-4.8039,"x":-38.7528},{"n":"Ribeirao Bonito","c":"Brazil","y":-22.0669,"x":-48.1758},{"n":"Pualas","c":"Philippines","y":7.8167,"x":124.0667},{"n":"Mar de Espanha","c":"Brazil","y":-21.8669,"x":-43.01},{"n":"Kapelle","c":"Netherlands","y":51.5,"x":3.95},{"n":"De Haan","c":"Belgium","y":51.2731,"x":3.0336},{"n":"Vinings","c":"United States","y":33.8608,"x":-84.4686},{"n":"Pien","c":"Brazil","y":-26.0978,"x":-49.4289},{"n":"Castel Goffredo","c":"Italy","y":45.2981,"x":10.475},{"n":"El Qaa","c":"Lebanon","y":34.3436,"x":36.4756},{"n":"Gerpinnes","c":"Belgium","y":50.3369,"x":4.5283},{"n":"Rivarolo Canavese","c":"Italy","y":45.3333,"x":7.7167},{"n":"Zhongling","c":"China","y":28.9391,"x":107.7073},{"n":"Fallsburg","c":"United States","y":41.7391,"x":-74.6038},{"n":"Brzeziny","c":"Poland","y":51.8,"x":19.75},{"n":"Lake Country","c":"Canada","y":50.0833,"x":-119.4142},{"n":"Vel'ky Krtis","c":"Slovakia","y":48.215,"x":19.3381},{"n":"Pfarrkirchen","c":"Germany","y":48.4419,"x":12.9443},{"n":"Sao Jose do Campestre","c":"Brazil","y":-6.3158,"x":-35.7139},{"n":"Chilca","c":"Peru","y":-12.5196,"x":-76.74},{"n":"Governador Lindenberg","c":"Brazil","y":-19.2519,"x":-40.4608},{"n":"Sim","c":"Russia","y":54.9931,"x":57.6983},{"n":"Tinglayan","c":"Philippines","y":17.2833,"x":121.1667},{"n":"Staryye Atagi","c":"Russia","y":43.1126,"x":45.7339},{"n":"Dorog","c":"Hungary","y":47.7194,"x":18.7292},{"n":"San Clemente","c":"Philippines","y":15.7167,"x":120.3667},{"n":"Michendorf","c":"Germany","y":52.3129,"x":13.0292},{"n":"Avrig","c":"Romania","y":45.7081,"x":24.4},{"n":"Ergolding","c":"Germany","y":48.5833,"x":12.1667},{"n":"Chiatura","c":"Georgia","y":42.2903,"x":43.2819},{"n":"Frutillar","c":"Chile","y":-41.1258,"x":-73.0605},{"n":"Ban Laem","c":"Thailand","y":13.2168,"x":99.9767},{"n":"Verde Village","c":"United States","y":34.7122,"x":-111.9943},{"n":"Uruoca","c":"Brazil","y":-3.3139,"x":-40.5569},{"n":"Malaryta","c":"Belarus","y":51.7972,"x":24.0808},{"n":"Trent Hills","c":"Canada","y":44.3142,"x":-77.8514},{"n":"Mockern","c":"Germany","y":52.1406,"x":11.9525},{"n":"Sidmouth","c":"United Kingdom","y":50.68,"x":-3.239},{"n":"Lubaczow","c":"Poland","y":50.1556,"x":23.123},{"n":"Kaeng Khoi","c":"Thailand","y":14.5864,"x":100.9967},{"n":"Le Chambon-Feugerolles","c":"France","y":45.3961,"x":4.325},{"n":"Puren","c":"Chile","y":-38.0121,"x":-73.0504},{"n":"Vyazemskiy","c":"Russia","y":47.5333,"x":134.75},{"n":"Lynnfield","c":"United States","y":42.5356,"x":-71.0382},{"n":"Irondale","c":"United States","y":33.544,"x":-86.6599},{"n":"Maglod","c":"Hungary","y":47.4439,"x":19.3525},{"n":"Tizgane","c":"Morocco","y":35.4136,"x":-5.0694},{"n":"Weinsberg","c":"Germany","y":49.1519,"x":9.2858},{"n":"Tierra Amarilla","c":"Chile","y":-27.4667,"x":-70.2667},{"n":"Sainte-Marie","c":"Canada","y":46.45,"x":-71.0333},{"n":"Dorking","c":"United Kingdom","y":51.234,"x":-0.3318},{"n":"Surkhakhi","c":"Russia","y":43.1875,"x":44.9019},{"n":"Kasba Tanora","c":"Morocco","y":32.475,"x":-6.1497},{"n":"Lake Wylie","c":"United States","y":35.0997,"x":-81.0677},{"n":"Agutaya","c":"Philippines","y":11.152,"x":120.9396},{"n":"Sturgis","c":"United States","y":41.7995,"x":-85.4182},{"n":"Loganville","c":"United States","y":33.8353,"x":-83.8957},{"n":"Brugg","c":"Switzerland","y":47.4864,"x":8.2083},{"n":"Bassersdorf","c":"Switzerland","y":47.4431,"x":8.6283},{"n":"Hemsbach","c":"Germany","y":49.5903,"x":8.6564},{"n":"San Bartolo","c":"Guatemala","y":15.0844,"x":-91.4558},{"n":"Novhorod-Siverskyi","c":"Ukraine","y":51.9833,"x":33.2667},{"n":"Jequeri","c":"Brazil","y":-20.4558,"x":-42.6658},{"n":"Salobrena","c":"Spain","y":36.7467,"x":-3.5869},{"n":"Sacacoyo","c":"El Salvador","y":13.7333,"x":-89.4667},{"n":"Choro","c":"Brazil","y":-4.8428,"x":-39.1408},{"n":"Chiquimulilla","c":"Guatemala","y":14.0858,"x":-90.3822},{"n":"Lakeland North","c":"United States","y":47.3374,"x":-122.2812},{"n":"Grumo Appula","c":"Italy","y":41.0167,"x":16.7},{"n":"Cambuquira","c":"Brazil","y":-21.8583,"x":-45.2911},{"n":"West Carrollton","c":"United States","y":39.6701,"x":-84.2542},{"n":"Itaipe","c":"Brazil","y":-17.4019,"x":-41.6689},{"n":"Kilindoni","c":"Tanzania","y":-7.9163,"x":39.65},{"n":"Chorleywood","c":"United Kingdom","y":51.65,"x":-0.51},{"n":"Oxapampa","c":"Peru","y":-10.58,"x":-75.4},{"n":"Costa de Caparica","c":"Portugal","y":38.6446,"x":-9.2356},{"n":"Finneytown","c":"United States","y":39.2159,"x":-84.5145},{"n":"Camabatela","c":"Angola","y":-8.1833,"x":15.3667},{"n":"Ridge","c":"United States","y":40.9068,"x":-72.8816},{"n":"Guelph/Eramosa","c":"Canada","y":43.63,"x":-80.22},{"n":"Mostardas","c":"Brazil","y":-31.1069,"x":-50.9208},{"n":"Mericourt","c":"France","y":50.4022,"x":2.8658},{"n":"Glen Carbon","c":"United States","y":38.758,"x":-89.983},{"n":"Arhribs","c":"Algeria","y":36.8022,"x":4.3227},{"n":"Sala Consilina","c":"Italy","y":40.4,"x":15.6},{"n":"Mutia","c":"Philippines","y":8.4176,"x":123.4771},{"n":"Locri","c":"Italy","y":38.2333,"x":16.2667},{"n":"Neuhausen auf den Fildern","c":"Germany","y":48.6844,"x":9.2744},{"n":"Bretzfeld","c":"Germany","y":49.1833,"x":9.4333},{"n":"Cuisnahuat","c":"El Salvador","y":13.6333,"x":-89.6},{"n":"Ifs","c":"France","y":49.1383,"x":-0.3531},{"n":"Kriftel","c":"Germany","y":50.0828,"x":8.4667},{"n":"Bershad","c":"Ukraine","y":48.3728,"x":29.5325},{"n":"Raismes","c":"France","y":50.3892,"x":3.4858},{"n":"New Hanover","c":"United States","y":40.3145,"x":-75.5566},{"n":"Medfield","c":"United States","y":42.1848,"x":-71.305},{"n":"Berwick-Upon-Tweed","c":"United Kingdom","y":55.771,"x":-2.007},{"n":"Jaromer","c":"Czechia","y":50.3562,"x":15.9214},{"n":"Syasstroy","c":"Russia","y":60.1333,"x":32.5667},{"n":"Lake Tapps","c":"United States","y":47.2307,"x":-122.1694},{"n":"Samashki","c":"Russia","y":43.2906,"x":45.3014},{"n":"Spearfish","c":"United States","y":44.4912,"x":-103.8167},{"n":"Silago","c":"Philippines","y":10.5291,"x":125.1618},{"n":"Mora","c":"Sweden","y":61.0096,"x":14.5635},{"n":"Limburgerhof","c":"Germany","y":49.4222,"x":8.3919},{"n":"Francofonte","c":"Italy","y":37.2333,"x":14.8833},{"n":"Plan-de-Cuques","c":"France","y":43.3469,"x":5.4631},{"n":"Ujfeherto","c":"Hungary","y":47.8,"x":21.6833},{"n":"Gyomaendrod","c":"Hungary","y":46.9361,"x":20.8233},{"n":"Los Lagos","c":"Chile","y":-39.85,"x":-72.8333},{"n":"Brignais","c":"France","y":45.6739,"x":4.7542},{"n":"Truro","c":"Canada","y":45.3647,"x":-63.28},{"n":"Steinheim","c":"Germany","y":51.8658,"x":9.0944},{"n":"Amos","c":"Canada","y":48.5667,"x":-78.1167},{"n":"Figline Valdarno","c":"Italy","y":43.6167,"x":11.4667},{"n":"Lawaan","c":"Philippines","y":11.15,"x":125.3},{"n":"Souakene","c":"Morocco","y":35.1167,"x":-5.95},{"n":"Cedartown","c":"United States","y":34.0223,"x":-85.2479},{"n":"Ban Tom Klang","c":"Thailand","y":19.1961,"x":99.8378},{"n":"Diebougou","c":"Burkina Faso","y":10.9667,"x":-3.25},{"n":"Perehinske","c":"Ukraine","y":48.8103,"x":24.1819},{"n":"Dubak","c":"India","y":18.1914,"x":78.6783},{"n":"Krupka","c":"Czechia","y":50.6846,"x":13.8583},{"n":"Pecica","c":"Romania","y":46.17,"x":21.07},{"n":"Zawiat Moulay Brahim","c":"Morocco","y":31.2858,"x":-7.9656},{"n":"Teroual","c":"Morocco","y":34.6667,"x":-5.2667},{"n":"Provins","c":"France","y":48.5589,"x":3.2994},{"n":"Gorokhovets","c":"Russia","y":56.2028,"x":42.6925},{"n":"Hajduhadhaz","c":"Hungary","y":47.6833,"x":21.6667},{"n":"Cloquet","c":"United States","y":46.7221,"x":-92.4923},{"n":"Weigelstown","c":"United States","y":39.9843,"x":-76.8315},{"n":"Rosario del Tala","c":"Argentina","y":-32.3008,"x":-59.1389},{"n":"Betma","c":"India","y":22.68,"x":75.62},{"n":"Lilburn","c":"United States","y":33.8887,"x":-84.1379},{"n":"South Sioux City","c":"United States","y":42.4627,"x":-96.4126},{"n":"Simeria","c":"Romania","y":45.85,"x":23.01},{"n":"Valverde del Camino","c":"Spain","y":37.5667,"x":-6.75},{"n":"The Nation / La Nation","c":"Canada","y":45.35,"x":-75.0333},{"n":"Taldom","c":"Russia","y":56.7333,"x":37.5333},{"n":"Bohmte","c":"Germany","y":52.3667,"x":8.3167},{"n":"Churchdown","c":"United Kingdom","y":51.88,"x":-2.17},{"n":"Cidade Gaucha","c":"Brazil","y":-23.38,"x":-52.945},{"n":"Olintla","c":"Mexico","y":20.1,"x":-97.6833},{"n":"Wawarsing","c":"United States","y":41.7526,"x":-74.4172},{"n":"Pichilemu","c":"Chile","y":-34.3851,"x":-72.0049},{"n":"Mikashevichy","c":"Belarus","y":52.2167,"x":27.4667},{"n":"Bamber Bridge","c":"United Kingdom","y":53.7281,"x":-2.6606},{"n":"Villafranca de los Barros","c":"Spain","y":38.5667,"x":-6.3333},{"n":"Iferhounene","c":"Algeria","y":36.5338,"x":4.3701},{"n":"Sankt Veit an der Glan","c":"Austria","y":46.7667,"x":14.3603},{"n":"Maizieres-les-Metz","c":"France","y":49.2122,"x":6.1611},{"n":"College","c":"United States","y":64.8694,"x":-147.8217},{"n":"Fontanafredda","c":"Italy","y":45.9667,"x":12.5667},{"n":"Ascot","c":"United Kingdom","y":51.4084,"x":-0.6707},{"n":"Ashibetsu","c":"Japan","y":43.5183,"x":142.1894},{"n":"Wachtersbach","c":"Germany","y":50.2667,"x":9.3},{"n":"L'Isle-Adam","c":"France","y":49.1111,"x":2.2228},{"n":"Pinheiro Machado","c":"Brazil","y":-31.5778,"x":-53.3808},{"n":"Linnich","c":"Germany","y":50.9789,"x":6.2678},{"n":"Kalyazin","c":"Russia","y":57.2333,"x":37.85},{"n":"Hadamar","c":"Germany","y":50.45,"x":8.05},{"n":"Santa Ana de Yacuma","c":"Bolivia","y":-13.7444,"x":-65.4269},{"n":"Laamarna","c":"Morocco","y":31.8944,"x":-8.9842},{"n":"Areal","c":"Brazil","y":-22.2308,"x":-43.1058},{"n":"Sao Sebastiao do Uatuma","c":"Brazil","y":-2.5719,"x":-57.8708},{"n":"Burj al `Arab","c":"Egypt","y":30.9167,"x":29.5333},{"n":"Lahaina","c":"United States","y":20.8848,"x":-156.6618},{"n":"Gibraleon","c":"Spain","y":37.3753,"x":-6.9694},{"n":"San Francisco de Mostazal","c":"Chile","y":-33.9799,"x":-70.7122},{"n":"Rognac","c":"France","y":43.4878,"x":5.2322},{"n":"Santiago Amoltepec","c":"Mexico","y":16.6167,"x":-97.5},{"n":"Peligros","c":"Spain","y":37.2333,"x":-3.6333},{"n":"Saint-Jean","c":"France","y":43.6653,"x":1.505},{"n":"Si Mustapha","c":"Algeria","y":36.7247,"x":3.6153},{"n":"Florange","c":"France","y":49.3214,"x":6.1183},{"n":"Lauria Inferiore","c":"Italy","y":40.0472,"x":15.8358},{"n":"Warsop","c":"United Kingdom","y":53.2,"x":-1.15},{"n":"Saude","c":"Brazil","y":-10.9408,"x":-40.4178},{"n":"Zag","c":"Morocco","y":28.0167,"x":-9.3333},{"n":"Terryville","c":"United States","y":40.909,"x":-73.0492},{"n":"Othello","c":"United States","y":46.8221,"x":-119.1652},{"n":"Santa Cruz da Baixa Verde","c":"Brazil","y":-7.8208,"x":-38.1528},{"n":"Mineiros do Tiete","c":"Brazil","y":-22.4089,"x":-48.4508},{"n":"Joanopolis","c":"Brazil","y":-22.9303,"x":-46.2756},{"n":"Sant'Agata di Militello","c":"Italy","y":38.0667,"x":14.6333},{"n":"Gulf Shores","c":"United States","y":30.2759,"x":-87.7013},{"n":"Ingersoll","c":"Canada","y":43.0392,"x":-80.8836},{"n":"Dorridge","c":"United Kingdom","y":52.372,"x":-1.7554},{"n":"Avanhandava","c":"Brazil","y":-21.4608,"x":-49.9497},{"n":"Khasanya","c":"Russia","y":43.4333,"x":43.575},{"n":"Simplicio Mendes","c":"Brazil","y":-7.8539,"x":-41.91},{"n":"Yulee","c":"United States","y":30.635,"x":-81.5678},{"n":"Jupiter Farms","c":"United States","y":26.9224,"x":-80.2187},{"n":"Tarboro","c":"United States","y":35.9046,"x":-77.5563},{"n":"Steinheim am der Murr","c":"Germany","y":48.9667,"x":9.2833},{"n":"San Salvador","c":"Argentina","y":-31.6167,"x":-58.5},{"n":"Brunsbuttel","c":"Germany","y":53.8964,"x":9.1386},{"n":"Wickliffe","c":"United States","y":41.6072,"x":-81.469},{"n":"Lamballe","c":"France","y":48.4686,"x":-2.5178},{"n":"Ban Muang Ngam","c":"Thailand","y":7.3536,"x":100.4898},{"n":"Jilava","c":"Romania","y":44.3333,"x":26.0833},{"n":"Snezhnogorsk","c":"Russia","y":69.1942,"x":33.2331},{"n":"Qiaotouba","c":"China","y":33.8116,"x":104.8493},{"n":"Librazhd-Qender","c":"Albania","y":41.1969,"x":20.3356},{"n":"Vrchlabi","c":"Czechia","y":50.627,"x":15.6095},{"n":"Kucove","c":"Albania","y":40.8039,"x":19.9144},{"n":"Sinalunga","c":"Italy","y":43.2167,"x":11.7333},{"n":"Altavilla Vicentina","c":"Italy","y":45.5164,"x":11.4597},{"n":"Canet-en-Roussillon","c":"France","y":42.7056,"x":3.0072},{"n":"Croxley Green","c":"United Kingdom","y":51.647,"x":-0.445},{"n":"Mercerville","c":"United States","y":40.236,"x":-74.6916},{"n":"Tacaimbo","c":"Brazil","y":-8.3158,"x":-36.2928},{"n":"La Homa","c":"United States","y":26.2773,"x":-98.3579},{"n":"Paullo","c":"Italy","y":45.4167,"x":9.4},{"n":"Spondon","c":"United Kingdom","y":52.92,"x":-1.401},{"n":"Dongyuancun","c":"China","y":28.317,"x":120.2316},{"n":"Neuenburg am Rhein","c":"Germany","y":47.8147,"x":7.5619},{"n":"Borger","c":"United States","y":35.6598,"x":-101.4012},{"n":"Alat","c":"Azerbaijan","y":39.9483,"x":49.4067},{"n":"Mato Verde","c":"Brazil","y":-15.3969,"x":-42.8658},{"n":"Zofingen","c":"Switzerland","y":47.2884,"x":7.9475},{"n":"Bonita","c":"United States","y":32.6652,"x":-117.0295},{"n":"Derventa","c":"Bosnia And Herzegovina","y":44.98,"x":17.91},{"n":"Albertirsa","c":"Hungary","y":47.24,"x":19.6067},{"n":"Chok Chai","c":"Thailand","y":14.7284,"x":102.1652},{"n":"Gangelt","c":"Germany","y":50.9831,"x":6},{"n":"Andernos-les-Bains","c":"France","y":44.7425,"x":-1.0903},{"n":"Broussard","c":"United States","y":30.1393,"x":-91.9538},{"n":"Saint-Esteve","c":"France","y":42.7133,"x":2.8419},{"n":"Los Santos","c":"Colombia","y":6.7561,"x":-73.1022},{"n":"Bad Urach","c":"Germany","y":48.4932,"x":9.3989},{"n":"Winterberg","c":"Germany","y":51.195,"x":8.53},{"n":"Beaconsfield","c":"United Kingdom","y":51.6009,"x":-0.6347},{"n":"Dorado","c":"Puerto Rico","y":18.4657,"x":-66.2724},{"n":"Olgiate Comasco","c":"Italy","y":45.7833,"x":8.9667},{"n":"Leibnitz","c":"Austria","y":46.7831,"x":15.545},{"n":"Horndean","c":"United Kingdom","y":50.9136,"x":-0.9961},{"n":"Pieve di Soligo","c":"Italy","y":45.8833,"x":12.1667},{"n":"Ait Youssef Ou Ali","c":"Morocco","y":31.9833,"x":-5.7833},{"n":"Gaimersheim","c":"Germany","y":48.8167,"x":11.3667},{"n":"Herrin","c":"United States","y":37.7983,"x":-89.0305},{"n":"Hungen","c":"Germany","y":50.4731,"x":8.8996},{"n":"Milovice","c":"Czechia","y":50.226,"x":14.8887},{"n":"Kamianka-Dniprovska","c":"Ukraine","y":47.4792,"x":34.4232},{"n":"Blaubeuren","c":"Germany","y":48.4119,"x":9.785},{"n":"Orzinuovi","c":"Italy","y":45.4,"x":9.9333},{"n":"San Miguel de Salcedo","c":"Ecuador","y":-1.05,"x":-78.5833},{"n":"Amesbury","c":"United Kingdom","y":51.17,"x":-1.77},{"n":"Hattem","c":"Netherlands","y":52.4744,"x":6.0697},{"n":"Pionerskiy","c":"Russia","y":54.95,"x":20.2167},{"n":"Kasaishi","c":"Japan","y":37.2528,"x":140.3436},{"n":"Choctaw","c":"United States","y":35.48,"x":-97.2666},{"n":"Vejer de la Frontera","c":"Spain","y":36.25,"x":-5.9667},{"n":"Alpen","c":"Germany","y":51.575,"x":6.5125},{"n":"Manvel","c":"United States","y":29.4793,"x":-95.3659},{"n":"Windsor Locks","c":"United States","y":41.9267,"x":-72.6544},{"n":"Ronchi dei Legionari","c":"Italy","y":45.8333,"x":13.5},{"n":"Shilka","c":"Russia","y":51.85,"x":116.0333},{"n":"Fonsorbes","c":"France","y":43.5361,"x":1.2311},{"n":"Chaval","c":"Brazil","y":-3.0339,"x":-41.2439},{"n":"Kantang","c":"Thailand","y":7.4067,"x":99.515},{"n":"Los Alamos","c":"United States","y":35.8926,"x":-106.2862},{"n":"Candelaria","c":"Colombia","y":10.4592,"x":-74.8806},{"n":"Albatera","c":"Spain","y":38.1786,"x":-0.8681},{"n":"Barbosa Ferraz","c":"Brazil","y":-24.03,"x":-52.0119},{"n":"Commerce","c":"United States","y":33.9963,"x":-118.1519},{"n":"Winkler","c":"Canada","y":49.1817,"x":-97.9397},{"n":"Fehmarnsund","c":"Germany","y":54.4454,"x":11.1702},{"n":"Chauny","c":"France","y":49.6156,"x":3.2192},{"n":"Taylorville","c":"United States","y":39.5328,"x":-89.2804},{"n":"Ibicuitinga","c":"Brazil","y":-4.9739,"x":-38.6389},{"n":"Porto","c":"Brazil","y":-3.8928,"x":-42.71},{"n":"Port Neches","c":"United States","y":29.9765,"x":-93.946},{"n":"Wetaskiwin","c":"Canada","y":52.9694,"x":-113.3769},{"n":"Shchastia","c":"Ukraine","y":48.7381,"x":39.2311},{"n":"Jataizinho","c":"Brazil","y":-23.2539,"x":-50.98},{"n":"Ounagha","c":"Morocco","y":31.5336,"x":-9.5536},{"n":"Prineville","c":"United States","y":44.2985,"x":-120.8607},{"n":"Oissel","c":"France","y":49.3419,"x":1.0914},{"n":"Anzola dell'Emilia","c":"Italy","y":44.5472,"x":11.1956},{"n":"El Adjiba","c":"Algeria","y":36.3333,"x":4.15},{"n":"Sao Goncalo do Para","c":"Brazil","y":-19.9828,"x":-44.8589},{"n":"Baykalsk","c":"Russia","y":51.5172,"x":104.1561},{"n":"Lauenburg","c":"Germany","y":53.3758,"x":10.5589},{"n":"Vakhrusheve","c":"Ukraine","y":48.1606,"x":38.8389},{"n":"Maxaranguape","c":"Brazil","y":-5.5158,"x":-35.2619},{"n":"Dalmatovo","c":"Russia","y":56.2667,"x":62.9167},{"n":"White House","c":"United States","y":36.4648,"x":-86.6665},{"n":"Niefern-Oschelbronn","c":"Germany","y":48.9164,"x":8.7842},{"n":"Santa Barbara de Pinto","c":"Colombia","y":9.4353,"x":-74.7017},{"n":"Keokuk","c":"United States","y":40.4095,"x":-91.403},{"n":"Kalajoki","c":"Finland","y":64.2597,"x":23.9486},{"n":"Greetland","c":"United Kingdom","y":53.6869,"x":-1.8714},{"n":"Yemva","c":"Russia","y":62.5833,"x":50.85},{"n":"Junin de los Andes","c":"Argentina","y":-39.9167,"x":-71.0667},{"n":"Sao Geraldo","c":"Brazil","y":-20.9228,"x":-42.8339},{"n":"St. Ann","c":"United States","y":38.7266,"x":-90.3872},{"n":"Monte Compatri","c":"Italy","y":41.8081,"x":12.7372},{"n":"Jaciara","c":"Brazil","y":-15.965,"x":-54.9678},{"n":"Mablethorpe","c":"United Kingdom","y":53.3409,"x":0.261},{"n":"Lana","c":"Italy","y":46.6167,"x":11.1667},{"n":"Hirschaid","c":"Germany","y":49.8167,"x":10.9833},{"n":"Durmersheim","c":"Germany","y":48.9383,"x":8.2769},{"n":"Cardoso Moreira","c":"Brazil","y":-21.4878,"x":-41.6158},{"n":"Oshikango","c":"Namibia","y":-17.4,"x":15.8833},{"n":"Wadhraf","c":"Tunisia","y":33.9851,"x":9.9699},{"n":"Newtown","c":"United Kingdom","y":52.5132,"x":-3.3141},{"n":"Itiquira","c":"Brazil","y":-17.2089,"x":-54.15},{"n":"Brandfort","c":"South Africa","y":-28.7,"x":26.4667},{"n":"Berja","c":"Spain","y":36.8453,"x":-2.9469},{"n":"Seringueiras","c":"Brazil","y":-11.7981,"x":-63.0311},{"n":"Cinisi","c":"Italy","y":38.1667,"x":13.1},{"n":"Darfield","c":"United Kingdom","y":53.538,"x":-1.3812},{"n":"San Mauro Pascoli","c":"Italy","y":44.1,"x":12.4167},{"n":"Alcudia de Carlet","c":"Spain","y":39.1958,"x":-0.5072},{"n":"Lavagna","c":"Italy","y":44.3122,"x":9.3417},{"n":"Wieringerwerf","c":"Netherlands","y":52.85,"x":5.03},{"n":"Duartina","c":"Brazil","y":-22.4144,"x":-49.4039},{"n":"Cananeia","c":"Brazil","y":-25.015,"x":-47.9269},{"n":"Calanasan","c":"Philippines","y":18.2583,"x":121.0406},{"n":"Yuzha","c":"Russia","y":56.5833,"x":42.0167},{"n":"Camposampiero","c":"Italy","y":45.5667,"x":11.9333},{"n":"Beniel","c":"Spain","y":38.0464,"x":-1.0014},{"n":"Moreira Sales","c":"Brazil","y":-24.0619,"x":-53.0069},{"n":"Tranent","c":"United Kingdom","y":55.945,"x":-2.954},{"n":"Galashiels","c":"United Kingdom","y":55.6194,"x":-2.8033},{"n":"Gorazde","c":"Bosnia And Herzegovina","y":43.6667,"x":18.9778},{"n":"Mastic Beach","c":"United States","y":40.7679,"x":-72.8375},{"n":"Rong Kwang","c":"Thailand","y":18.3392,"x":100.3172},{"n":"Santol","c":"Philippines","y":16.7667,"x":120.45},{"n":"Justice","c":"United States","y":41.7495,"x":-87.8345},{"n":"Spresiano","c":"Italy","y":45.7833,"x":12.25},{"n":"Central Elgin","c":"Canada","y":42.7667,"x":-81.1},{"n":"Tiszavasvari","c":"Hungary","y":47.9511,"x":21.3689},{"n":"Graben-Neudorf","c":"Germany","y":49.1592,"x":8.4894},{"n":"San Pietro in Casale","c":"Italy","y":44.7,"x":11.4},{"n":"Gavardo","c":"Italy","y":45.5875,"x":10.4389},{"n":"Taguai","c":"Brazil","y":-23.4519,"x":-49.4089},{"n":"Anklam","c":"Germany","y":53.85,"x":13.6833},{"n":"German Flatts","c":"United States","y":42.9868,"x":-74.9804},{"n":"Saint-Germain-les-Arpajon","c":"France","y":48.5953,"x":2.2556},{"n":"Cumpana","c":"Romania","y":44.1128,"x":28.5558},{"n":"Elfers","c":"United States","y":28.214,"x":-82.723},{"n":"Lewisboro","c":"United States","y":41.2697,"x":-73.5827},{"n":"Fuldatal","c":"Germany","y":51.3484,"x":9.5256},{"n":"Fulton","c":"United States","y":38.8551,"x":-91.9511},{"n":"Minneola","c":"United States","y":28.6067,"x":-81.7322},{"n":"Anna Regina","c":"Guyana","y":7.25,"x":-58.5167},{"n":"Valu lui Traian","c":"Romania","y":44.165,"x":28.455},{"n":"Oskaloosa","c":"United States","y":41.2922,"x":-92.6403},{"n":"Buchach","c":"Ukraine","y":49.0647,"x":25.3872},{"n":"Santa Ana Maya","c":"Mexico","y":20,"x":-101.0167},{"n":"Lienz","c":"Austria","y":46.8297,"x":12.7697},{"n":"Mecatlan","c":"Mexico","y":20.2135,"x":-97.6574},{"n":"Benifayo","c":"Spain","y":39.2847,"x":-0.4281},{"n":"Grand Terrace","c":"United States","y":34.0312,"x":-117.3132},{"n":"Rielasingen-Worblingen","c":"Germany","y":47.7314,"x":8.8386},{"n":"Panama City Beach","c":"United States","y":30.2369,"x":-85.8775},{"n":"Woodland Park","c":"United States","y":40.8905,"x":-74.1945},{"n":"Teixeira Soares","c":"Brazil","y":-25.3678,"x":-50.4608},{"n":"Menfi","c":"Italy","y":37.6078,"x":12.9686},{"n":"Rosbach vor der Hohe","c":"Germany","y":50.2986,"x":8.7006},{"n":"Beydag","c":"Turkey","y":38.0869,"x":28.2089},{"n":"Nelson Bay","c":"Australia","y":-32.715,"x":152.1511},{"n":"Russi","c":"Italy","y":44.3764,"x":12.0334},{"n":"Altenstadt","c":"Germany","y":50.2856,"x":8.945},{"n":"Kataysk","c":"Russia","y":56.3,"x":62.5667},{"n":"Quimperle","c":"France","y":47.8728,"x":-3.5497},{"n":"Saint-Andre-de-Cubzac","c":"France","y":44.9947,"x":-0.4458},{"n":"Pennsville","c":"United States","y":39.6266,"x":-75.5089},{"n":"Elland","c":"United Kingdom","y":53.683,"x":-1.84},{"n":"El'khotovo","c":"Russia","y":43.3333,"x":44.2},{"n":"Rottofreno","c":"Italy","y":45.0579,"x":9.5489},{"n":"Neerijnen","c":"Netherlands","y":51.8333,"x":5.2833},{"n":"Le Haillan","c":"France","y":44.8717,"x":-0.6769},{"n":"Carmiano","c":"Italy","y":40.3461,"x":18.0461},{"n":"Mira","c":"Portugal","y":40.4285,"x":-8.7363},{"n":"Revuca","c":"Slovakia","y":48.6833,"x":20.1167},{"n":"Muscoy","c":"United States","y":34.155,"x":-117.3477},{"n":"Mende","c":"France","y":44.5183,"x":3.5006},{"n":"Lila","c":"Philippines","y":9.6,"x":124.1},{"n":"Vysoke Myto","c":"Czechia","y":49.9532,"x":16.1618},{"n":"Estepa","c":"Spain","y":37.2917,"x":-4.8792},{"n":"Ubaporanga","c":"Brazil","y":-19.635,"x":-42.1058},{"n":"Koriukivka","c":"Ukraine","y":51.7833,"x":32.25},{"n":"Twistringen","c":"Germany","y":52.8,"x":8.65},{"n":"Petrov Val","c":"Russia","y":50.1333,"x":45.2167},{"n":"Edemissen","c":"Germany","y":52.3667,"x":10.2667},{"n":"Frohburg","c":"Germany","y":51.0561,"x":12.555},{"n":"Mwingi","c":"Kenya","y":-0.9296,"x":38.07},{"n":"Bolbec","c":"France","y":49.5722,"x":0.4725},{"n":"Bernalda","c":"Italy","y":40.4167,"x":16.6833},{"n":"Annapolis Neck","c":"United States","y":38.9408,"x":-76.4997},{"n":"Lachute","c":"Canada","y":45.65,"x":-74.3333},{"n":"Xavantes","c":"Brazil","y":-23.0389,"x":-49.7094},{"n":"Reshuijie","c":"China","y":24.458,"x":114.8282},{"n":"Woolwich","c":"United States","y":39.74,"x":-75.317},{"n":"Oberwil","c":"Switzerland","y":47.5135,"x":7.5546},{"n":"La Carlota","c":"Argentina","y":-33.4179,"x":-63.2935},{"n":"Nanzhai","c":"China","y":26.6299,"x":108.7645},{"n":"Culfa","c":"Azerbaijan","y":38.9558,"x":45.6308},{"n":"Brzeszcze","c":"Poland","y":50,"x":19.15},{"n":"Feuchtwangen","c":"Germany","y":49.1667,"x":10.3167},{"n":"Currimao","c":"Philippines","y":18.0167,"x":120.4833},{"n":"Bad Windsheim","c":"Germany","y":49.5,"x":10.4167},{"n":"Ebersberg","c":"Germany","y":48.0833,"x":11.9667},{"n":"Sheerness","c":"United Kingdom","y":51.441,"x":0.76},{"n":"Ugento","c":"Italy","y":39.9333,"x":18.1667},{"n":"Astley","c":"United Kingdom","y":53.5008,"x":-2.4454},{"n":"Sao Romao","c":"Brazil","y":-16.3689,"x":-45.0689},{"n":"Laguna Paiva","c":"Argentina","y":-31.3163,"x":-60.6573},{"n":"Alkhan-Kala","c":"Russia","y":43.2586,"x":45.5392},{"n":"Endicott","c":"United States","y":42.098,"x":-76.0639},{"n":"Tezoatlan de Segura y Luna","c":"Mexico","y":17.65,"x":-97.8167},{"n":"Grunwald","c":"Germany","y":48.0483,"x":11.5317},{"n":"Bad Abbach","c":"Germany","y":48.9333,"x":12.05},{"n":"Motta Sant'Anastasia","c":"Italy","y":37.5,"x":14.9667},{"n":"Culcheth","c":"United Kingdom","y":53.4517,"x":-2.5218},{"n":"Niel","c":"Belgium","y":51.11,"x":4.3303},{"n":"Erkner","c":"Germany","y":52.4167,"x":13.75},{"n":"Kamin-Kashyrskyi","c":"Ukraine","y":51.6242,"x":24.9606},{"n":"Jaidte Lbatma","c":"Morocco","y":31.6806,"x":-7.7281},{"n":"Kameshkovo","c":"Russia","y":56.3492,"x":40.9978},{"n":"Cheney","c":"United States","y":47.4901,"x":-117.579},{"n":"Valmadrera","c":"Italy","y":45.8463,"x":9.3582},{"n":"Lindenberg im Allgau","c":"Germany","y":47.6031,"x":9.8861},{"n":"Stainland","c":"United Kingdom","y":53.6728,"x":-1.8805},{"n":"Ocana","c":"Spain","y":39.9569,"x":-3.4967},{"n":"San Severino Marche","c":"Italy","y":43.2289,"x":13.1771},{"n":"Palos Heights","c":"United States","y":41.6637,"x":-87.7959},{"n":"Andrelandia","c":"Brazil","y":-21.74,"x":-44.3089},{"n":"West Grey","c":"Canada","y":44.1833,"x":-80.8167},{"n":"Kozloduy","c":"Bulgaria","y":43.7764,"x":23.7294},{"n":"Dom Basilio","c":"Brazil","y":-13.76,"x":-41.7708},{"n":"Beelitz","c":"Germany","y":52.2333,"x":12.9667},{"n":"Goor","c":"Netherlands","y":52.2333,"x":6.5861},{"n":"Charmahin","c":"Iran","y":32.3375,"x":51.1958},{"n":"Cedar Grove","c":"United States","y":40.8565,"x":-74.2287},{"n":"Xinyingheyan","c":"China","y":35.3369,"x":103.2681},{"n":"Parksville","c":"Canada","y":49.315,"x":-124.312},{"n":"Boumalne","c":"Morocco","y":31.3738,"x":-5.9956},{"n":"Taviano","c":"Italy","y":39.9833,"x":18.0833},{"n":"Nurmo","c":"Finland","y":62.8278,"x":22.9083},{"n":"Rainhill","c":"United Kingdom","y":53.4157,"x":-2.7625},{"n":"North St. Paul","c":"United States","y":45.0137,"x":-92.9995},{"n":"Satao","c":"Portugal","y":40.7333,"x":-7.7167},{"n":"Dokkum","c":"Netherlands","y":53.3253,"x":5.9989},{"n":"Nobeji","c":"Japan","y":40.8644,"x":141.1286},{"n":"Wadersloh","c":"Germany","y":51.7386,"x":8.2514},{"n":"Moglingen","c":"Germany","y":48.8883,"x":9.1292},{"n":"Bickenhill","c":"United Kingdom","y":52.439,"x":-1.725},{"n":"Ocean Pines","c":"United States","y":38.3825,"x":-75.1475},{"n":"Valentim Gentil","c":"Brazil","y":-20.4219,"x":-50.0878},{"n":"Le Pont-de-Claix","c":"France","y":45.1231,"x":5.6981},{"n":"Shichuanxiang","c":"China","y":34.5866,"x":104.3211},{"n":"Mortugaba","c":"Brazil","y":-15.0228,"x":-42.3678},{"n":"Arroyo Seco","c":"Mexico","y":21.5472,"x":-99.6883},{"n":"Axel","c":"Netherlands","y":51.2656,"x":3.9089},{"n":"Culaba","c":"Philippines","y":11.6578,"x":124.5425},{"n":"Gundelfingen","c":"Germany","y":48.0425,"x":7.8657},{"n":"Cornedo Vicentino","c":"Italy","y":45.6167,"x":11.35},{"n":"Zunil","c":"Guatemala","y":14.7836,"x":-91.4844},{"n":"Hinundayan","c":"Philippines","y":10.35,"x":125.25},{"n":"Cowansville","c":"Canada","y":45.2,"x":-72.75},{"n":"Rocca Priora","c":"Italy","y":41.7833,"x":12.7667},{"n":"Nina Rodrigues","c":"Brazil","y":-3.4658,"x":-43.905},{"n":"Xinchangcun","c":"China","y":26.4249,"x":107.5323},{"n":"Irmo","c":"United States","y":34.1018,"x":-81.1957},{"n":"Shuangxianxiang","c":"China","y":35.3299,"x":105.6963},{"n":"Hnivan","c":"Ukraine","y":49.0833,"x":28.35},{"n":"Bottesford","c":"United Kingdom","y":53.5521,"x":-0.6714},{"n":"Cecil","c":"United States","y":40.3147,"x":-80.1943},{"n":"Plan-les-Ouates","c":"Switzerland","y":46.1667,"x":6.1167},{"n":"Velten","c":"Germany","y":52.6833,"x":13.1833},{"n":"Ilicinia","c":"Brazil","y":-20.9358,"x":-45.8328},{"n":"Sulz am Neckar","c":"Germany","y":48.3628,"x":8.6317},{"n":"Epping","c":"United Kingdom","y":51.7004,"x":0.1087},{"n":"San Anselmo","c":"United States","y":37.9821,"x":-122.5699},{"n":"Hessisch Lichtenau","c":"Germany","y":51.2,"x":9.7167},{"n":"Aracas","c":"Brazil","y":-12.22,"x":-38.2028},{"n":"Edeia","c":"Brazil","y":-17.3389,"x":-49.9308},{"n":"Tsuruta","c":"Japan","y":40.7589,"x":140.4286},{"n":"Ulster","c":"United States","y":41.9699,"x":-74.0041},{"n":"Thame","c":"United Kingdom","y":51.75,"x":-0.97},{"n":"Oulad Fares","c":"Morocco","y":35.5167,"x":-5.9333},{"n":"Santany","c":"Spain","y":39.3542,"x":3.1283},{"n":"Bayona","c":"Spain","y":42.1178,"x":-8.8506},{"n":"Eyvanekey","c":"Iran","y":35.3433,"x":52.0675},{"n":"Oulad Aissa","c":"Morocco","y":30.558,"x":-8.614},{"n":"Cortes","c":"Brazil","y":-8.47,"x":-35.5436},{"n":"Woodhaven","c":"United States","y":42.132,"x":-83.2374},{"n":"Preussisch Oldendorf","c":"Germany","y":52.2833,"x":8.5},{"n":"Bni Drar","c":"Morocco","y":34.8281,"x":-1.9936},{"n":"Brejetuba","c":"Brazil","y":-20.1458,"x":-41.29},{"n":"Novalukoml'","c":"Belarus","y":54.6658,"x":29.1547},{"n":"Bad Freienwalde","c":"Germany","y":52.7856,"x":14.0325},{"n":"Sable-sur-Sarthe","c":"France","y":47.84,"x":-0.3342},{"n":"Cerro Grande","c":"Brazil","y":-30.59,"x":-51.7389},{"n":"Sever do Vouga","c":"Portugal","y":40.7167,"x":-8.3667},{"n":"Trophy Club","c":"United States","y":33.0038,"x":-97.1897},{"n":"Xinbocun","c":"China","y":42.3037,"x":117.7259},{"n":"Beryslav","c":"Ukraine","y":46.8333,"x":33.4167},{"n":"Romanshorn","c":"Switzerland","y":47.5635,"x":9.3564},{"n":"Rezvanshahr","c":"Iran","y":37.5511,"x":49.1394},{"n":"Cornwall","c":"United States","y":41.4195,"x":-74.054},{"n":"Santa Mariana","c":"Brazil","y":-23.15,"x":-50.55},{"n":"Niepolomice","c":"Poland","y":50.0339,"x":20.2172},{"n":"Shepherdsville","c":"United States","y":37.9806,"x":-85.6999},{"n":"Teotepeque","c":"El Salvador","y":13.5853,"x":-89.5183},{"n":"Teano","c":"Italy","y":41.25,"x":14.0667},{"n":"Kalymnos","c":"Greece","y":36.9512,"x":26.9832},{"n":"Becancour","c":"Canada","y":46.3333,"x":-72.4333},{"n":"Murnau am Staffelsee","c":"Germany","y":47.6833,"x":11.2},{"n":"Moldova Noua","c":"Romania","y":44.7347,"x":21.6664},{"n":"Maqu","c":"China","y":35.9451,"x":106.9953},{"n":"Terranuova Bracciolini","c":"Italy","y":43.5531,"x":11.5894},{"n":"Iaciara","c":"Brazil","y":-14.0958,"x":-46.6319},{"n":"Sao Luis do Curu","c":"Brazil","y":-3.67,"x":-39.2428},{"n":"Pidigan","c":"Philippines","y":17.5703,"x":120.5893},{"n":"Gladenbach","c":"Germany","y":50.7681,"x":8.5828},{"n":"Nagykata","c":"Hungary","y":47.4178,"x":19.7414},{"n":"Jardim do Serido","c":"Brazil","y":-6.5839,"x":-36.7739},{"n":"Waconia","c":"United States","y":44.8412,"x":-93.7927},{"n":"Stony Brook","c":"United States","y":40.906,"x":-73.1278},{"n":"Mesker-Yurt","c":"Russia","y":43.2514,"x":45.9072},{"n":"Vardenis","c":"Armenia","y":40.18,"x":45.72},{"n":"Saboya","c":"Colombia","y":5.6969,"x":-73.7631},{"n":"Taiynsha","c":"Kazakhstan","y":53.8478,"x":69.7639},{"n":"Pfaffikon","c":"Switzerland","y":47.3667,"x":8.7822},{"n":"Caapiranga","c":"Brazil","y":-3.3167,"x":-61.2},{"n":"St. Peter","c":"United States","y":44.3296,"x":-93.9659},{"n":"Possneck","c":"Germany","y":50.7,"x":11.6},{"n":"Kingsbury","c":"United States","y":43.344,"x":-73.5395},{"n":"Lymm","c":"United Kingdom","y":53.3834,"x":-2.475},{"n":"Kelso","c":"United States","y":46.1236,"x":-122.891},{"n":"Betton","c":"France","y":48.1825,"x":-1.6439},{"n":"Nevele","c":"Belgium","y":51.0342,"x":3.5475},{"n":"Villeneuve-les-Avignon","c":"France","y":43.9664,"x":4.7958},{"n":"Cuichapa","c":"Mexico","y":18.7667,"x":-96.8667},{"n":"North Smithfield","c":"United States","y":41.9727,"x":-71.5514},{"n":"Juvignac","c":"France","y":43.6131,"x":3.8097},{"n":"Bom Retiro do Sul","c":"Brazil","y":-29.6089,"x":-51.9428},{"n":"Titisee-Neustadt","c":"Germany","y":47.9122,"x":8.2147},{"n":"Gharbia","c":"Morocco","y":35.5153,"x":-5.9306},{"n":"Eraclea","c":"Italy","y":45.5833,"x":12.6833},{"n":"Khvalynsk","c":"Russia","y":52.4833,"x":48.1},{"n":"Sao Sebastiao da Grama","c":"Brazil","y":-21.7108,"x":-46.8208},{"n":"Elkhorn","c":"United States","y":42.6711,"x":-88.5377},{"n":"Ongwediva","c":"Namibia","y":-17.7833,"x":15.7667},{"n":"Lizzanello","c":"Italy","y":40.3047,"x":18.2228},{"n":"Sannicolau Mare","c":"Romania","y":46.0722,"x":20.6294},{"n":"Setubinha","c":"Brazil","y":-17.6,"x":-42.1589},{"n":"Gatesville","c":"United States","y":31.4419,"x":-97.7351},{"n":"Vobkent Shahri","c":"Uzbekistan","y":40.0233,"x":64.5139},{"n":"Kavarna","c":"Bulgaria","y":43.4333,"x":28.3389},{"n":"Las Parejas","c":"Argentina","y":-32.6833,"x":-61.5333},{"n":"Rankweil","c":"Austria","y":47.2667,"x":9.65},{"n":"Monte Sant'Angelo","c":"Italy","y":41.7,"x":15.9667},{"n":"Ludwigslust","c":"Germany","y":53.3332,"x":11.5023},{"n":"Lom Sak","c":"Thailand","y":16.7775,"x":101.2468},{"n":"Ried im Innkreis","c":"Austria","y":48.21,"x":13.4894},{"n":"Oulad Amrane el Mekki","c":"Morocco","y":35.2167,"x":-5.9667},{"n":"Perez","c":"Philippines","y":14.1833,"x":121.9333},{"n":"Goldenrod","c":"United States","y":28.6114,"x":-81.2916},{"n":"Budel","c":"Netherlands","y":51.2725,"x":5.5744},{"n":"Granarolo del l'Emilia","c":"Italy","y":44.5542,"x":11.4439},{"n":"Villa Literno","c":"Italy","y":41.0096,"x":14.0741},{"n":"Virginia","c":"United States","y":47.5169,"x":-92.5128},{"n":"Juterbog","c":"Germany","y":51.9933,"x":13.0728},{"n":"Capdepera","c":"Spain","y":39.7,"x":3.4333},{"n":"Jork","c":"Germany","y":53.5344,"x":9.6817},{"n":"Lontras","c":"Brazil","y":-27.1658,"x":-49.5419},{"n":"Monteforte Irpino","c":"Italy","y":40.8928,"x":14.7194},{"n":"Nkheila","c":"Morocco","y":32.9572,"x":-7.0731},{"n":"Chino Valley","c":"United States","y":34.7593,"x":-112.4107},{"n":"Inverell","c":"Australia","y":-29.7667,"x":151.1167},{"n":"Gisors","c":"France","y":49.2806,"x":1.7764},{"n":"Newington Forest","c":"United States","y":38.7371,"x":-77.2339},{"n":"Blue Ash","c":"United States","y":39.248,"x":-84.3827},{"n":"Alto do Rodrigues","c":"Brazil","y":-5.2878,"x":-36.7619},{"n":"Chateaubriant","c":"France","y":47.7169,"x":-1.3761},{"n":"Egelsbach","c":"Germany","y":49.9694,"x":8.6667},{"n":"Occhiobello","c":"Italy","y":44.9216,"x":11.5812},{"n":"Tyngsborough","c":"United States","y":42.6662,"x":-71.429},{"n":"Teningen","c":"Germany","y":48.1269,"x":7.8103},{"n":"Bitetto","c":"Italy","y":41.0333,"x":16.75},{"n":"Meze","c":"France","y":43.4267,"x":3.6053},{"n":"Yakouren","c":"Algeria","y":36.7348,"x":4.4386},{"n":"Holly Hill","c":"United States","y":29.2443,"x":-81.0463},{"n":"Heddesheim","c":"Germany","y":49.5053,"x":8.6033},{"n":"Jardim Alegre","c":"Brazil","y":-24.1789,"x":-51.6919},{"n":"Foca","c":"Bosnia And Herzegovina","y":43.5,"x":18.7833},{"n":"Hatillo de Loba","c":"Colombia","y":8.9556,"x":-74.0769},{"n":"Ain Kansara","c":"Morocco","y":34.15,"x":-4.8314},{"n":"Rushall","c":"United Kingdom","y":52.611,"x":-1.957},{"n":"Pont-du-Chateau","c":"France","y":45.7983,"x":3.2483},{"n":"Diosd","c":"Hungary","y":47.4042,"x":18.9458},{"n":"New Baltimore","c":"United States","y":42.6903,"x":-82.7398},{"n":"Rio Paranaiba","c":"Brazil","y":-19.1939,"x":-46.2469},{"n":"Palmares Paulista","c":"Brazil","y":-21.0828,"x":-48.8008},{"n":"Chambray-les-Tours","c":"France","y":47.3375,"x":0.7139},{"n":"Forestville","c":"United States","y":38.8518,"x":-76.8708},{"n":"Vidauban","c":"France","y":43.4272,"x":6.4319},{"n":"Kewanee","c":"United States","y":41.2399,"x":-89.9263},{"n":"Bueu","c":"Spain","y":42.3167,"x":-8.7833},{"n":"Orange City","c":"United States","y":28.9347,"x":-81.2881},{"n":"Sawadah","c":"Egypt","y":28.0775,"x":30.7953},{"n":"Malloussa","c":"Morocco","y":35.7333,"x":-5.6333},{"n":"Acala del Rio","c":"Spain","y":37.5167,"x":-5.9667},{"n":"Heythuysen","c":"Netherlands","y":51.2496,"x":5.8983},{"n":"Lakeland Highlands","c":"United States","y":27.9572,"x":-81.9496},{"n":"Jacinto","c":"Brazil","y":-16.1439,"x":-40.2928},{"n":"La Motte-Servolex","c":"France","y":45.5967,"x":5.8775},{"n":"Matina","c":"Brazil","y":-13.9089,"x":-42.8489},{"n":"Farciennes","c":"Belgium","y":50.4333,"x":4.55},{"n":"Ulverston","c":"United Kingdom","y":54.193,"x":-3.09},{"n":"Anama","c":"Brazil","y":-3.58,"x":-61.4039},{"n":"Zupanja","c":"Croatia","y":45.0667,"x":18.7},{"n":"Nordstemmen","c":"Germany","y":52.1605,"x":9.7839},{"n":"Sernovodsk","c":"Russia","y":43.3117,"x":45.1594},{"n":"Khem Karan","c":"India","y":31.16,"x":74.66},{"n":"Cookstown","c":"United Kingdom","y":54.647,"x":-6.745},{"n":"Uren","c":"Russia","y":57.4667,"x":45.7833},{"n":"Wietmarschen","c":"Germany","y":52.5331,"x":7.1331},{"n":"Berilo","c":"Brazil","y":-16.9519,"x":-42.4658},{"n":"Sant'Ambrogio di Valpolicella","c":"Italy","y":45.5209,"x":10.8362},{"n":"Spilimbergo","c":"Italy","y":46.1114,"x":12.9017},{"n":"Mirante da Serra","c":"Brazil","y":-11.0297,"x":-62.675},{"n":"Bibbiena","c":"Italy","y":43.6975,"x":11.8144},{"n":"Hagenow","c":"Germany","y":53.4317,"x":11.1931},{"n":"Bodaybo","c":"Russia","y":57.8506,"x":114.1933},{"n":"Teotlaltzingo","c":"Mexico","y":19.2322,"x":-98.5017},{"n":"Winnetka","c":"United States","y":42.1064,"x":-87.7421},{"n":"Markham","c":"United States","y":41.6,"x":-87.6905},{"n":"Mixtla de Altamirano","c":"Mexico","y":18.6,"x":-97},{"n":"Gravenhurst","c":"Canada","y":44.9167,"x":-79.3667},{"n":"Sakib","c":"Jordan","y":32.2843,"x":35.8092},{"n":"Torri di Quartesolo","c":"Italy","y":45.5167,"x":11.6167},{"n":"Aj Jourf","c":"Morocco","y":31.4903,"x":-4.4014},{"n":"`Anadan","c":"Syria","y":36.2936,"x":37.0444},{"n":"Leon Valley","c":"United States","y":29.4954,"x":-98.6143},{"n":"Joppatowne","c":"United States","y":39.4181,"x":-76.3516},{"n":"West Plains","c":"United States","y":36.7378,"x":-91.868},{"n":"Lehre","c":"Germany","y":52.3167,"x":10.6667},{"n":"Delhi","c":"United States","y":37.4306,"x":-120.7759},{"n":"Oosterbroek","c":"Netherlands","y":53.1299,"x":6.8738},{"n":"Leutenbach","c":"Germany","y":48.8883,"x":9.3914},{"n":"New Mills","c":"United Kingdom","y":53.367,"x":-2.007},{"n":"Enns","c":"Austria","y":48.2167,"x":14.475},{"n":"Marumori","c":"Japan","y":37.9167,"x":140.7667},{"n":"Linkenheim-Hochstetten","c":"Germany","y":49.1261,"x":8.41},{"n":"Saint-Saulve","c":"France","y":50.3697,"x":3.5547},{"n":"Hexham","c":"United Kingdom","y":54.971,"x":-2.101},{"n":"Darmanesti","c":"Romania","y":46.37,"x":26.4797},{"n":"Monovar","c":"Spain","y":38.4369,"x":-0.8381},{"n":"Newcastle","c":"United States","y":47.5303,"x":-122.1633},{"n":"New Kensington","c":"United States","y":40.5711,"x":-79.7521},{"n":"Maraial","c":"Brazil","y":-8.8028,"x":-35.8289},{"n":"Sakawa","c":"Japan","y":33.5008,"x":133.2867},{"n":"Nembro","c":"Italy","y":45.7439,"x":9.7594},{"n":"Stradella","c":"Italy","y":45.0833,"x":9.3},{"n":"Weinfelden","c":"Switzerland","y":47.5698,"x":9.112},{"n":"Beatrice","c":"United States","y":40.2737,"x":-96.7454},{"n":"Tzintzuntzan","c":"Mexico","y":19.6283,"x":-101.5789},{"n":"Zeuthen","c":"Germany","y":52.3667,"x":13.6167},{"n":"Brieselang","c":"Germany","y":52.5833,"x":13},{"n":"Prieska","c":"South Africa","y":-29.6683,"x":22.7439},{"n":"Poquoson","c":"United States","y":37.1318,"x":-76.3569},{"n":"Itanhomi","c":"Brazil","y":-19.1719,"x":-41.865},{"n":"Tortoreto","c":"Italy","y":42.8,"x":13.9167},{"n":"Tholey","c":"Germany","y":49.4833,"x":7.0333},{"n":"Arth","c":"Switzerland","y":47.0644,"x":8.5242},{"n":"Taurisano","c":"Italy","y":39.95,"x":18.1667},{"n":"Antonio Cardoso","c":"Brazil","y":-12.435,"x":-39.12},{"n":"Rovinari","c":"Romania","y":44.9125,"x":23.1622},{"n":"Piripa","c":"Brazil","y":-14.94,"x":-41.72},{"n":"Casier","c":"Italy","y":45.6436,"x":12.2953},{"n":"Iguaraci","c":"Brazil","y":-7.835,"x":-37.515},{"n":"Perth East","c":"Canada","y":43.47,"x":-80.95},{"n":"Vecchiano","c":"Italy","y":43.7833,"x":10.3833},{"n":"Gaildorf","c":"Germany","y":49,"x":9.7667},{"n":"Velddrif","c":"South Africa","y":-32.7667,"x":18.1667},{"n":"Bad Sassendorf","c":"Germany","y":51.5831,"x":8.1667},{"n":"Citlaltepec","c":"Mexico","y":21.3435,"x":-97.892},{"n":"Gotzis","c":"Austria","y":47.3342,"x":9.6453},{"n":"Na Wa","c":"Thailand","y":17.4897,"x":104.1006},{"n":"Larkspur","c":"United States","y":37.9393,"x":-122.5313},{"n":"Kampenhout","c":"Belgium","y":50.95,"x":4.55},{"n":"Cottonwood","c":"United States","y":34.7192,"x":-112.0014},{"n":"Mays Chapel","c":"United States","y":39.4343,"x":-76.6516},{"n":"Shady Hills","c":"United States","y":28.4042,"x":-82.5467},{"n":"Vulcanesti","c":"Moldova","y":45.6842,"x":28.4028},{"n":"Vilsbiburg","c":"Germany","y":48.4475,"x":12.3475},{"n":"Valenii de Munte","c":"Romania","y":45.1856,"x":26.0397},{"n":"Palestina","c":"Brazil","y":-20.39,"x":-49.4328},{"n":"Bankya","c":"Bulgaria","y":42.7069,"x":23.1472},{"n":"Wegorzewo","c":"Poland","y":54.2167,"x":21.75},{"n":"Boloso","c":"Congo (Brazzaville)","y":2.0337,"x":15.2167},{"n":"Lincolnwood","c":"United States","y":42.0054,"x":-87.7329},{"n":"Biri","c":"Philippines","y":12.6667,"x":124.3833},{"n":"Atripalda","c":"Italy","y":40.9167,"x":14.8256},{"n":"Burladingen","c":"Germany","y":48.2903,"x":9.1094},{"n":"Botlikh","c":"Russia","y":42.665,"x":46.22},{"n":"Axixa","c":"Brazil","y":-2.8369,"x":-44.0528},{"n":"Arkansas City","c":"United States","y":37.0726,"x":-97.0385},{"n":"Dabuleni","c":"Romania","y":43.8011,"x":24.0919},{"n":"Sapna","c":"Bosnia And Herzegovina","y":44.4917,"x":19.0028},{"n":"Saint-Ave","c":"France","y":47.6867,"x":-2.7344},{"n":"Saubara","c":"Brazil","y":-12.7378,"x":-38.7689},{"n":"Querencia do Norte","c":"Brazil","y":-23.0839,"x":-53.4839},{"n":"North Castle","c":"United States","y":41.1331,"x":-73.695},{"n":"Elon","c":"United States","y":36.1014,"x":-79.5085},{"n":"Emstek","c":"Germany","y":52.8167,"x":8.15},{"n":"Perleberg","c":"Germany","y":53.0667,"x":11.8667},{"n":"Massena","c":"United States","y":44.9609,"x":-74.8339},{"n":"Aleksandrovsk","c":"Russia","y":59.1667,"x":57.5833},{"n":"West Monroe","c":"United States","y":32.512,"x":-92.1513},{"n":"Chateau-Gontier","c":"France","y":47.8286,"x":-0.7028},{"n":"Antonio Goncalves","c":"Brazil","y":-10.5728,"x":-40.2739},{"n":"Fourmies","c":"France","y":50.0172,"x":4.0533},{"n":"Mulungu do Morro","c":"Brazil","y":-11.9658,"x":-41.6389},{"n":"Wolgast","c":"Germany","y":54.05,"x":13.7667},{"n":"Ebejico","c":"Colombia","y":6.3264,"x":-75.7661},{"n":"Parkes","c":"Australia","y":-33.095,"x":148.2628},{"n":"Gatumba","c":"Burundi","y":-3.3333,"x":29.25},{"n":"Ahram","c":"Iran","y":28.8825,"x":51.2744},{"n":"Krasnyy Yar","c":"Russia","y":46.5331,"x":48.3456},{"n":"Pedras de Maria da Cruz","c":"Brazil","y":-15.6069,"x":-44.3908},{"n":"Batesville","c":"United States","y":35.7687,"x":-91.6226},{"n":"Prince Rupert","c":"Canada","y":54.3122,"x":-130.3271},{"n":"Grenada","c":"United States","y":33.7816,"x":-89.813},{"n":"Mineral del Monte","c":"Mexico","y":20.1333,"x":-98.6667},{"n":"Balbalan","c":"Philippines","y":17.45,"x":121.15},{"n":"Loreto","c":"Brazil","y":-7.0839,"x":-45.1408},{"n":"Kibungo","c":"Rwanda","y":-2.1608,"x":30.5442},{"n":"Canapolis","c":"Brazil","y":-18.725,"x":-49.2039},{"n":"Osako","c":"Japan","y":31.4292,"x":131.0058},{"n":"Carmo da Cachoeira","c":"Brazil","y":-21.4608,"x":-45.2239},{"n":"Mettlach","c":"Germany","y":49.4917,"x":6.5972},{"n":"Neuenrade","c":"Germany","y":51.2839,"x":7.78},{"n":"Villamartin","c":"Spain","y":36.8667,"x":-5.65},{"n":"Portoferraio","c":"Italy","y":42.8167,"x":10.3167},{"n":"Castelnaudary","c":"France","y":43.3181,"x":1.9539},{"n":"Bellegarde-sur-Valserine","c":"France","y":46.1075,"x":5.8258},{"n":"Suchanino","c":"Poland","y":54.3566,"x":18.6056},{"n":"North Union","c":"United States","y":39.9102,"x":-79.6731},{"n":"Isola del Liri","c":"Italy","y":41.6833,"x":13.5667},{"n":"Ishpeming","c":"United States","y":46.4862,"x":-87.6658},{"n":"Jesup","c":"United States","y":31.5992,"x":-81.8895},{"n":"Ringwood","c":"United States","y":41.1064,"x":-74.2749},{"n":"Zhengdong","c":"China","y":22.4871,"x":101.5081},{"n":"Ullo","c":"Hungary","y":47.3842,"x":19.3444},{"n":"Oberschleissheim","c":"Germany","y":48.25,"x":11.5667},{"n":"Overlea","c":"United States","y":39.3642,"x":-76.5176},{"n":"Speedway","c":"United States","y":39.7937,"x":-86.2479},{"n":"Lagoa do Ouro","c":"Brazil","y":-9.1269,"x":-36.4589},{"n":"Montegrotto Terme","c":"Italy","y":45.3333,"x":11.7833},{"n":"Santa Fe","c":"Brazil","y":-23.0378,"x":-51.805},{"n":"Enumclaw","c":"United States","y":47.2017,"x":-121.9897},{"n":"Lonate Pozzolo","c":"Italy","y":45.6,"x":8.75},{"n":"Rijkevorsel","c":"Belgium","y":51.3489,"x":4.7597},{"n":"Santa Lucia","c":"Colombia","y":10.3247,"x":-74.9589},{"n":"Uzyn","c":"Ukraine","y":49.8242,"x":30.4425},{"n":"Roding","c":"Germany","y":49.1936,"x":12.5192},{"n":"Mettingen","c":"Germany","y":52.3167,"x":7.7806},{"n":"Ilmajoki","c":"Finland","y":62.7333,"x":22.5833},{"n":"Zwonitz","c":"Germany","y":50.6303,"x":12.8133},{"n":"Unterfohring","c":"Germany","y":48.1917,"x":11.6528},{"n":"Ban Bo Luang","c":"Thailand","y":18.1476,"x":98.3489},{"n":"Novy Bor","c":"Czechia","y":50.7577,"x":14.5557},{"n":"Neosho","c":"United States","y":36.8441,"x":-94.3756},{"n":"Wells Branch","c":"United States","y":30.4432,"x":-97.6792},{"n":"North Greenbush","c":"United States","y":42.6706,"x":-73.6632},{"n":"Leominster","c":"United Kingdom","y":52.2282,"x":-2.7385},{"n":"Hirao","c":"Japan","y":33.9381,"x":132.0733},{"n":"Rehoboth","c":"United States","y":41.8439,"x":-71.2456},{"n":"Laichingen","c":"Germany","y":48.4897,"x":9.6861},{"n":"Lincoln City","c":"United States","y":44.9751,"x":-124.0073},{"n":"Prevost","c":"Canada","y":45.87,"x":-74.08},{"n":"Essenbach","c":"Germany","y":48.6167,"x":12.2167},{"n":"Planegg","c":"Germany","y":48.1047,"x":11.4306},{"n":"Liperi","c":"Finland","y":62.5333,"x":29.3833},{"n":"Highlands","c":"United States","y":41.3601,"x":-74.0084},{"n":"Pace","c":"France","y":48.1478,"x":-1.7739},{"n":"Steha","c":"Morocco","y":35.3646,"x":-4.9306},{"n":"Northlake","c":"United States","y":41.9143,"x":-87.9054},{"n":"Guebwiller","c":"France","y":47.9075,"x":7.2103},{"n":"Nussloch","c":"Germany","y":49.3236,"x":8.6939},{"n":"Eatontown","c":"United States","y":40.2913,"x":-74.0558},{"n":"Bolanos de Calatrava","c":"Spain","y":38.8831,"x":-3.7167},{"n":"Belem de Maria","c":"Brazil","y":-8.6139,"x":-35.8089},{"n":"Issum","c":"Germany","y":51.5389,"x":6.4236},{"n":"Albox","c":"Spain","y":37.3833,"x":-2.1333},{"n":"Lauffen am Neckar","c":"Germany","y":49.0764,"x":9.1567},{"n":"New Garden","c":"United States","y":39.8119,"x":-75.7517},{"n":"Nova Gradiska","c":"Croatia","y":45.25,"x":17.3833},{"n":"Colares","c":"Brazil","y":-0.9369,"x":-48.2819},{"n":"Sao Francisco do Maranhao","c":"Brazil","y":-6.2508,"x":-42.8569},{"n":"Bad Voslau","c":"Austria","y":47.9669,"x":16.2144},{"n":"Eura","c":"Finland","y":61.1333,"x":22.0833},{"n":"Schwieberdingen","c":"Germany","y":48.8778,"x":9.075},{"n":"Boskovice","c":"Czechia","y":49.4875,"x":16.66},{"n":"Cesson","c":"France","y":48.5658,"x":2.6011},{"n":"Harwich","c":"United States","y":41.6957,"x":-70.0684},{"n":"Sollies-Pont","c":"France","y":43.19,"x":6.0411},{"n":"Ladenburg","c":"Germany","y":49.4719,"x":8.6092},{"n":"Aubiere","c":"France","y":45.7508,"x":3.1108},{"n":"Harrislee","c":"Germany","y":54.7972,"x":9.3764},{"n":"Mayate","c":"Morocco","y":32.2719,"x":-7.525},{"n":"Bajiao","c":"China","y":27.6573,"x":108.1937},{"n":"Congonhal","c":"Brazil","y":-22.1528,"x":-46.0389},{"n":"Cangas de Narcea","c":"Spain","y":43.1714,"x":-6.5389},{"n":"Tabapua","c":"Brazil","y":-20.9639,"x":-49.0319},{"n":"Vehkalahti","c":"Finland","y":60.5756,"x":27.1439},{"n":"Sainte-Adele","c":"Canada","y":45.95,"x":-74.13},{"n":"Capela do Alto Alegre","c":"Brazil","y":-11.6678,"x":-39.8378},{"n":"Webb City","c":"United States","y":37.1413,"x":-94.4676},{"n":"Pulsano","c":"Italy","y":40.3842,"x":17.3547},{"n":"Auchel","c":"France","y":50.5083,"x":2.4736},{"n":"Tabua","c":"Portugal","y":40.3667,"x":-8.0333},{"n":"Islamey","c":"Russia","y":43.7114,"x":43.4233},{"n":"San Valentino Torio","c":"Italy","y":40.7911,"x":14.6033},{"n":"Capela de Santana","c":"Brazil","y":-29.7,"x":-51.325},{"n":"Cherlak","c":"Russia","y":54.1605,"x":74.82},{"n":"Rosdorf","c":"Germany","y":51.5,"x":9.9},{"n":"Leingarten","c":"Germany","y":49.15,"x":9.1167},{"n":"Lebon Regis","c":"Brazil","y":-26.9289,"x":-50.695},{"n":"Saint-Cyr-sur-Mer","c":"France","y":43.1836,"x":5.7086},{"n":"Vedene","c":"France","y":43.9775,"x":4.9031},{"n":"Sassenage","c":"France","y":45.205,"x":5.665},{"n":"Nova Dubnica","c":"Slovakia","y":48.9333,"x":18.15},{"n":"Curiti","c":"Colombia","y":6.6044,"x":-73.0681},{"n":"Woodward","c":"United States","y":36.4247,"x":-99.4057},{"n":"Knowsley","c":"United Kingdom","y":53.4498,"x":-2.8501},{"n":"Bicske","c":"Hungary","y":47.4907,"x":18.6363},{"n":"Lower Pottsgrove","c":"United States","y":40.2538,"x":-75.5975},{"n":"Melissa","c":"United States","y":33.2891,"x":-96.5573},{"n":"Brock Hall","c":"United States","y":38.8617,"x":-76.7549},{"n":"Drouin","c":"Australia","y":-38.1333,"x":145.85},{"n":"Uacu Cungo","c":"Angola","y":-11.3583,"x":15.1194},{"n":"Rogerstone","c":"United Kingdom","y":51.5906,"x":-3.0537},{"n":"Socuellamos","c":"Spain","y":39.2933,"x":-2.7942},{"n":"James Island","c":"United States","y":32.7353,"x":-79.9396},{"n":"Kingsburg","c":"United States","y":36.5245,"x":-119.5602},{"n":"Oulad Daoud","c":"Morocco","y":34.4058,"x":-4.6939},{"n":"Palmacia","c":"Brazil","y":-4.15,"x":-38.8458},{"n":"Caimito","c":"Colombia","y":8.7894,"x":-75.1161},{"n":"San Carlos Yautepec","c":"Mexico","y":16.5,"x":-96.1},{"n":"Oiba","c":"Colombia","y":6.2639,"x":-73.2992},{"n":"Pepperell","c":"United States","y":42.6713,"x":-71.6043},{"n":"Brwinow","c":"Poland","y":52.1417,"x":20.7167},{"n":"Liuba","c":"China","y":38.1634,"x":102.1493},{"n":"Ventania","c":"Brazil","y":-24.2458,"x":-50.2428},{"n":"Comarnic","c":"Romania","y":45.2511,"x":25.6353},{"n":"Xichu","c":"Mexico","y":21.2997,"x":-100.0553},{"n":"Denkendorf","c":"Germany","y":48.6958,"x":9.3175},{"n":"Guimaraes","c":"Brazil","y":-2.1328,"x":-44.6008},{"n":"Margherita di Savoia","c":"Italy","y":41.3667,"x":16.15},{"n":"Vosselaar","c":"Belgium","y":51.3081,"x":4.8883},{"n":"Mestrino","c":"Italy","y":45.45,"x":11.7667},{"n":"Platteville","c":"United States","y":42.728,"x":-90.4676},{"n":"Nonoai","c":"Brazil","y":-27.3619,"x":-52.7708},{"n":"Susegana","c":"Italy","y":45.85,"x":12.25},{"n":"Rio do Pires","c":"Brazil","y":-13.1278,"x":-42.2919},{"n":"Laren","c":"Netherlands","y":52.2544,"x":5.2317},{"n":"Lovington","c":"United States","y":32.9125,"x":-103.3277},{"n":"Ban Bang Yai","c":"Thailand","y":13.8369,"x":100.3591},{"n":"Son Servera","c":"Spain","y":39.6208,"x":3.36},{"n":"Jacala","c":"Mexico","y":21.0053,"x":-99.1719},{"n":"Priolo Gargallo","c":"Italy","y":37.1667,"x":15.1833},{"n":"Kentville","c":"Canada","y":45.0775,"x":-64.4958},{"n":"Baohe","c":"China","y":33.2033,"x":106.9544},{"n":"Weiz","c":"Austria","y":47.2189,"x":15.6253},{"n":"Baxiangshan","c":"China","y":23.763,"x":115.9626},{"n":"Chevigny-Saint-Sauveur","c":"France","y":47.3017,"x":5.1356},{"n":"Gambettola","c":"Italy","y":44.1167,"x":12.3333},{"n":"Little Chute","c":"United States","y":44.2905,"x":-88.3206},{"n":"Bainbridge","c":"United States","y":30.9046,"x":-84.5727},{"n":"Tiszakecske","c":"Hungary","y":46.9311,"x":20.095},{"n":"Saint-Martin-Boulogne","c":"France","y":50.7258,"x":1.6322},{"n":"Welver","c":"Germany","y":51.6167,"x":7.9583},{"n":"Erfelek","c":"Turkey","y":41.8793,"x":34.9184},{"n":"Wang Saphung","c":"Thailand","y":17.2995,"x":101.7624},{"n":"San Andres de Llevaneras","c":"Spain","y":41.5733,"x":2.4828},{"n":"San Antonio Palopo","c":"Guatemala","y":14.7,"x":-91.1167},{"n":"Sedro-Woolley","c":"United States","y":48.5112,"x":-122.2321},{"n":"Minden","c":"United States","y":32.6187,"x":-93.2762},{"n":"Flores de Goias","c":"Brazil","y":-14.4489,"x":-47.05},{"n":"Ardanuc","c":"Turkey","y":41.1233,"x":42.0647},{"n":"Oestrich-Winkel","c":"Germany","y":50.0085,"x":8.0199},{"n":"Novoishimskiy","c":"Kazakhstan","y":53.1981,"x":66.7694},{"n":"Alfonsine","c":"Italy","y":44.5061,"x":12.0411},{"n":"Grantsville","c":"United States","y":40.6148,"x":-112.4777},{"n":"Middle Valley","c":"United States","y":35.1877,"x":-85.1958},{"n":"Sao Miguel das Matas","c":"Brazil","y":-13.0478,"x":-39.4558},{"n":"Oswaldtwistle","c":"United Kingdom","y":53.743,"x":-2.393},{"n":"Alavus","c":"Finland","y":62.5861,"x":23.6194},{"n":"Castelginest","c":"France","y":43.6936,"x":1.4328},{"n":"Fiume Veneto","c":"Italy","y":45.9333,"x":12.7333},{"n":"Loano","c":"Italy","y":44.129,"x":8.2598},{"n":"Opmeer","c":"Netherlands","y":52.7033,"x":4.9444},{"n":"Ait Amar","c":"Morocco","y":33.85,"x":-5.0667},{"n":"Toropets","c":"Russia","y":56.5,"x":31.6333},{"n":"Ipaumirim","c":"Brazil","y":-6.79,"x":-38.7189},{"n":"Dario Meira","c":"Brazil","y":-14.4358,"x":-39.9078},{"n":"Union Park","c":"United States","y":28.5645,"x":-81.2354},{"n":"Havixbeck","c":"Germany","y":51.9778,"x":7.4167},{"n":"Don Sak","c":"Thailand","y":9.3169,"x":99.6944},{"n":"Joaquim Tavora","c":"Brazil","y":-23.4989,"x":-49.905},{"n":"Martuni","c":"Armenia","y":40.14,"x":45.3064},{"n":"South Charleston","c":"United States","y":38.3482,"x":-81.711},{"n":"Fairfax Station","c":"United States","y":38.7942,"x":-77.3358},{"n":"Souq Jamaa Fdalate","c":"Morocco","y":33.5911,"x":-7.2792},{"n":"Sowerby Bridge","c":"United Kingdom","y":53.71,"x":-1.91},{"n":"Sao Pedro da Agua Branca","c":"Brazil","y":-5.085,"x":-48.4289},{"n":"Huite","c":"Guatemala","y":14.9175,"x":-89.7172},{"n":"Corbas","c":"France","y":45.6681,"x":4.9019},{"n":"Thiers","c":"France","y":45.8564,"x":3.5475},{"n":"Lanuza","c":"Philippines","y":9.2342,"x":126.0644},{"n":"Al Fayd","c":"Morocco","y":30.6167,"x":-8.2167},{"n":"Leeds","c":"United States","y":33.5429,"x":-86.5636},{"n":"Holiday City-Berkeley","c":"United States","y":39.9639,"x":-74.2787},{"n":"Beniajan","c":"Spain","y":37.9833,"x":-1.0667},{"n":"Bad Fallingbostel","c":"Germany","y":52.8675,"x":9.6967},{"n":"East Bethel","c":"United States","y":45.3557,"x":-93.2038},{"n":"Villefranche-de-Rouergue","c":"France","y":44.3525,"x":2.0342},{"n":"Festus","c":"United States","y":38.2192,"x":-90.4095},{"n":"Aperibe","c":"Brazil","y":-21.6208,"x":-42.1028},{"n":"Giffoni Valle Piana","c":"Italy","y":40.7167,"x":14.9333},{"n":"Valentigney","c":"France","y":47.4625,"x":6.8322},{"n":"Villepreux","c":"France","y":48.83,"x":2.0022},{"n":"Altstatten","c":"Switzerland","y":47.378,"x":9.5488},{"n":"Bath","c":"United States","y":42.3219,"x":-77.3083},{"n":"Saint-Gaudens","c":"France","y":43.1081,"x":0.7233},{"n":"Meitingen","c":"Germany","y":48.5333,"x":10.8333},{"n":"Nong Bua","c":"Thailand","y":15.8647,"x":100.5858},{"n":"Gainza","c":"Philippines","y":13.6167,"x":123.15},{"n":"Comasagua","c":"El Salvador","y":13.6333,"x":-89.3833},{"n":"Koszeg","c":"Hungary","y":47.3817,"x":16.5519},{"n":"Swan Hill","c":"Australia","y":-35.3333,"x":143.55},{"n":"Blaricum","c":"Netherlands","y":52.2728,"x":5.2422},{"n":"Korb","c":"Germany","y":48.8417,"x":9.3611},{"n":"Cave","c":"Italy","y":41.8167,"x":12.9333},{"n":"Galvarino","c":"Chile","y":-38.4,"x":-72.7833},{"n":"Mainvilliers","c":"France","y":48.4531,"x":1.4619},{"n":"Miller Place","c":"United States","y":40.9374,"x":-72.9864},{"n":"Bilovodsk","c":"Ukraine","y":49.1992,"x":39.5756},{"n":"Lichtenstein","c":"Germany","y":50.7564,"x":12.6317},{"n":"Longuenesse","c":"France","y":50.7356,"x":2.2372},{"n":"Sajoszentpeter","c":"Hungary","y":48.2169,"x":20.7183},{"n":"Ponteland","c":"United Kingdom","y":55.048,"x":-1.747},{"n":"Betania","c":"Brazil","y":-8.2767,"x":-38.0339},{"n":"El Arba Des Bir Lenni","c":"Morocco","y":34.3272,"x":-4.2039},{"n":"Rapho","c":"United States","y":40.1576,"x":-76.458},{"n":"Beauharnois","c":"Canada","y":45.32,"x":-73.87},{"n":"Anao","c":"Philippines","y":15.7304,"x":120.6264},{"n":"Ain Beida","c":"Morocco","y":31.585,"x":-8.608},{"n":"Les Iles-de-la-Madeleine","c":"Canada","y":47.3833,"x":-61.8667},{"n":"Zlate Moravce","c":"Slovakia","y":48.3781,"x":18.3964},{"n":"Issoudun","c":"France","y":46.9481,"x":1.9933},{"n":"Josefina","c":"Philippines","y":8.2,"x":123.5333},{"n":"Nyirbator","c":"Hungary","y":47.8353,"x":22.13},{"n":"Doesburg","c":"Netherlands","y":52.0167,"x":6.1333},{"n":"Princetown","c":"Guyana","y":5.9,"x":-57.17},{"n":"Kissing","c":"Germany","y":48.3,"x":10.9833},{"n":"Volosovo","c":"Russia","y":59.45,"x":29.4833},{"n":"Spring Lake","c":"United States","y":35.1842,"x":-78.9959},{"n":"Bomlo","c":"Norway","y":59.7794,"x":5.2183},{"n":"Poranga","c":"Brazil","y":-4.745,"x":-40.9258},{"n":"Holyhead","c":"United Kingdom","y":53.309,"x":-4.633},{"n":"Krasnousol'skiy","c":"Russia","y":53.8947,"x":56.4686},{"n":"Patu","c":"Brazil","y":-6.11,"x":-37.6369},{"n":"Folkston","c":"United States","y":30.8393,"x":-82.0073},{"n":"Sarbogard","c":"Hungary","y":46.8878,"x":18.6193},{"n":"Macedonia","c":"United States","y":41.3147,"x":-81.4989},{"n":"Casteldaccia","c":"Italy","y":38.05,"x":13.5333},{"n":"Hildburghausen","c":"Germany","y":50.4261,"x":10.7289},{"n":"Tlacolulan","c":"Mexico","y":19.6667,"x":-97},{"n":"Carnot-Moon","c":"United States","y":40.5187,"x":-80.2178},{"n":"Jerome","c":"United States","y":42.7183,"x":-114.5159},{"n":"Kasaji","c":"Congo (Kinshasa)","y":-10.3662,"x":23.45},{"n":"Pritzwalk","c":"Germany","y":53.1497,"x":12.1831},{"n":"Geisenheim","c":"Germany","y":49.9831,"x":7.9656},{"n":"Prairie Ridge","c":"United States","y":47.1443,"x":-122.1408},{"n":"Matmata","c":"Morocco","y":34.1,"x":-4.55},{"n":"Montrose","c":"United Kingdom","y":56.708,"x":-2.467},{"n":"Hamilton Square","c":"United States","y":40.2248,"x":-74.6526},{"n":"Erbaocun","c":"China","y":42.9633,"x":93.1714},{"n":"Abergele","c":"United Kingdom","y":53.28,"x":-3.58},{"n":"Moncks Corner","c":"United States","y":33.1631,"x":-80.0135},{"n":"Ghabaghib","c":"Syria","y":33.1839,"x":36.2264},{"n":"Goulds","c":"United States","y":25.5614,"x":-80.388},{"n":"Killarney","c":"Ireland","y":52.0588,"x":-9.5072},{"n":"Dinkelsbuhl","c":"Germany","y":49.0708,"x":10.3194},{"n":"Alijo","c":"Portugal","y":41.2764,"x":-7.4749},{"n":"Caldogno","c":"Italy","y":45.6118,"x":11.5076},{"n":"North Lebanon","c":"United States","y":40.3668,"x":-76.4215},{"n":"Palos de la Frontera","c":"Spain","y":37.2283,"x":-6.8944},{"n":"Santa Flavia","c":"Italy","y":38.0833,"x":13.5333},{"n":"Batonyterenye","c":"Hungary","y":47.9892,"x":19.8286},{"n":"Mykhailivka","c":"Ukraine","y":47.2717,"x":35.2248},{"n":"Chaumont-Gistoux","c":"Belgium","y":50.6839,"x":4.6947},{"n":"Santona","c":"Spain","y":43.4414,"x":-3.4575},{"n":"Janow Lubelski","c":"Poland","y":50.7,"x":22.4},{"n":"Maltby","c":"United States","y":47.8027,"x":-122.1044},{"n":"Jiajin","c":"China","y":25.6426,"x":108.3511},{"n":"Gardone Val Trompia","c":"Italy","y":45.6833,"x":10.1833},{"n":"Cogolin","c":"France","y":43.2525,"x":6.53},{"n":"Villebon-sur-Yvette","c":"France","y":48.7,"x":2.2278},{"n":"Somersworth","c":"United States","y":43.2534,"x":-70.8856},{"n":"Serravalle Pistoiese","c":"Italy","y":43.9,"x":10.8333},{"n":"Bordentown","c":"United States","y":40.142,"x":-74.7098},{"n":"Diez","c":"Germany","y":50.3708,"x":8.0158},{"n":"Bad Durrenberg","c":"Germany","y":51.2955,"x":12.0658},{"n":"Tigzirt","c":"Algeria","y":36.8931,"x":4.1225},{"n":"Ellwood City","c":"United States","y":40.8619,"x":-80.283},{"n":"Glenwood Springs","c":"United States","y":39.5455,"x":-107.3346},{"n":"Great Wyrley","c":"United Kingdom","y":52.6593,"x":-2.0102},{"n":"Tucson Estates","c":"United States","y":32.1792,"x":-111.1254},{"n":"Pavlikeni","c":"Bulgaria","y":43.2375,"x":25.3074},{"n":"Negresti-Oas","c":"Romania","y":47.8694,"x":23.4242},{"n":"Macclenny","c":"United States","y":30.281,"x":-82.1252},{"n":"Echelon","c":"United States","y":39.8482,"x":-74.9957},{"n":"East Grand Rapids","c":"United States","y":42.9464,"x":-85.6088},{"n":"Drolshagen","c":"Germany","y":51.0333,"x":7.7667},{"n":"Cernay","c":"France","y":47.8067,"x":7.1758},{"n":"Sidi Amer El Hadi","c":"Morocco","y":34.7992,"x":-5.8394},{"n":"Villeneuve-Tolosane","c":"France","y":43.5236,"x":1.3417},{"n":"La Puebla del Rio","c":"Spain","y":37.2667,"x":-6.05},{"n":"Chuquicamata","c":"Chile","y":-22.32,"x":-68.93},{"n":"Arenzano","c":"Italy","y":44.4035,"x":8.6827},{"n":"Cungus","c":"Turkey","y":38.2122,"x":39.2884},{"n":"Myjava","c":"Slovakia","y":48.7578,"x":17.5686},{"n":"Sandy","c":"United Kingdom","y":52.131,"x":-0.297},{"n":"Onet Village","c":"France","y":44.3656,"x":2.5936},{"n":"Tizi Nisly","c":"Morocco","y":32.4667,"x":-5.7667},{"n":"Campobello di Mazara","c":"Italy","y":37.6333,"x":12.75},{"n":"Mondai","c":"Brazil","y":-27.1028,"x":-53.4019},{"n":"Nowe Miasto Lubawskie","c":"Poland","y":53.4167,"x":19.5833},{"n":"Winfield","c":"United States","y":37.274,"x":-96.9499},{"n":"Finale Ligure","c":"Italy","y":44.1691,"x":8.3435},{"n":"Olivenza","c":"Spain","y":38.6858,"x":-7.1008},{"n":"Nambour","c":"Australia","y":-26.6269,"x":152.9592},{"n":"West Deer","c":"United States","y":40.635,"x":-79.8693},{"n":"Sassenburg","c":"Germany","y":52.5167,"x":10.6333},{"n":"Camp Pendleton South","c":"United States","y":33.2284,"x":-117.3791},{"n":"Clermont","c":"France","y":49.3789,"x":2.4125},{"n":"Qazmalar","c":"Azerbaijan","y":40.9814,"x":47.8458},{"n":"Belp","c":"Switzerland","y":46.8914,"x":7.4972},{"n":"Vaux-le-Penil","c":"France","y":48.5264,"x":2.6822},{"n":"Spencer","c":"United States","y":42.2471,"x":-71.9919},{"n":"Pozharan","c":"Kosovo","y":42.3648,"x":21.3372},{"n":"San Michele al Tagliamento","c":"Italy","y":45.7636,"x":12.9953},{"n":"Newport East","c":"United States","y":41.5158,"x":-71.2878},{"n":"Pilis","c":"Hungary","y":47.2858,"x":19.5469},{"n":"Portales","c":"United States","y":34.1753,"x":-103.3565},{"n":"Castenedolo","c":"Italy","y":45.4704,"x":10.2967},{"n":"Bechloul","c":"Algeria","y":36.3167,"x":4.0667},{"n":"Miesbach","c":"Germany","y":47.789,"x":11.8338},{"n":"Amelia","c":"Italy","y":42.5535,"x":12.4168},{"n":"Downham Market","c":"United Kingdom","y":52.6,"x":0.39},{"n":"Maniago","c":"Italy","y":46.1667,"x":12.7167},{"n":"Meghraj","c":"India","y":23.5,"x":73.5},{"n":"Wellington North","c":"Canada","y":43.9,"x":-80.57},{"n":"Ploufragan","c":"France","y":48.4894,"x":-2.7958},{"n":"St. Andrews","c":"Canada","y":50.27,"x":-96.9747},{"n":"Veurne","c":"Belgium","y":51.0722,"x":2.6622},{"n":"Torton","c":"United Kingdom","y":52.4522,"x":-2.1606},{"n":"Sao Sebastiao de Lagoa de Roca","c":"Brazil","y":-7.0828,"x":-35.835},{"n":"Somerville","c":"Australia","y":-38.226,"x":145.177},{"n":"Wootton","c":"United Kingdom","y":52.2007,"x":-0.8857},{"n":"Villa Aldama","c":"Mexico","y":19.65,"x":-97.2333},{"n":"Maxhutte-Haidhof","c":"Germany","y":49.2,"x":12.1},{"n":"Waimea","c":"United States","y":20.0124,"x":-155.6378},{"n":"Lendinara","c":"Italy","y":45.085,"x":11.6006},{"n":"Eijsden","c":"Netherlands","y":50.7778,"x":5.7108},{"n":"Arkadak","c":"Russia","y":51.9333,"x":43.5},{"n":"Green River","c":"United States","y":41.5124,"x":-109.4708},{"n":"Tremonton","c":"United States","y":41.7187,"x":-112.1891},{"n":"Ibira","c":"Brazil","y":-21.08,"x":-49.2408},{"n":"Terra Alta","c":"Brazil","y":-1.0378,"x":-47.9078},{"n":"Bitritto","c":"Italy","y":41.05,"x":16.8333},{"n":"Osterhofen","c":"Germany","y":48.7,"x":13.0167},{"n":"Carleton Place","c":"Canada","y":45.1333,"x":-76.1333},{"n":"Vendas Novas","c":"Portugal","y":38.6833,"x":-8.45},{"n":"Santa Cruz Itundujia","c":"Mexico","y":16.8667,"x":-97.65},{"n":"Ivybridge","c":"United Kingdom","y":50.389,"x":-3.921},{"n":"Palmilla","c":"Chile","y":-34.6,"x":-71.3667},{"n":"Ban Phan Don","c":"Thailand","y":17.129,"x":102.9618},{"n":"Pellezzano","c":"Italy","y":40.7333,"x":14.7667},{"n":"Ojuelos de Jalisco","c":"Mexico","y":21.8642,"x":-101.5933},{"n":"Ban Bang Lamung","c":"Thailand","y":13.047,"x":100.9289},{"n":"Neuville-en-Ferrain","c":"France","y":50.7467,"x":3.1581},{"n":"Inhangapi","c":"Brazil","y":-1.43,"x":-47.9169},{"n":"Upper","c":"United States","y":39.2563,"x":-74.727},{"n":"Budelsdorf","c":"Germany","y":54.3167,"x":9.6833},{"n":"Sarospatak","c":"Hungary","y":48.3189,"x":21.5661},{"n":"Macerata Campania","c":"Italy","y":41.0667,"x":14.2667},{"n":"Ukrainsk","c":"Ukraine","y":48.1,"x":37.3667},{"n":"Novaya Lyalya","c":"Russia","y":59.05,"x":60.6},{"n":"Mazzarino","c":"Italy","y":37.3,"x":14.2},{"n":"Guidel","c":"France","y":47.7906,"x":-3.4886},{"n":"Valley Falls","c":"United States","y":41.9234,"x":-71.3923},{"n":"El Palmar","c":"Guatemala","y":14.65,"x":-91.5833},{"n":"Ban Bang Toei","c":"Thailand","y":14.0656,"x":100.5226},{"n":"Bopfingen","c":"Germany","y":48.8569,"x":10.3522},{"n":"Nacozari Viejo","c":"Mexico","y":30.42,"x":-109.65},{"n":"Peixe","c":"Brazil","y":-12.025,"x":-48.5389},{"n":"Alamedin","c":"Kyrgyzstan","y":42.89,"x":74.63},{"n":"Robertsville","c":"United States","y":40.3395,"x":-74.2939},{"n":"Matino","c":"Italy","y":40.0333,"x":18.1333},{"n":"Saint-Pierre-du-Perray","c":"France","y":48.6131,"x":2.4953},{"n":"Delavan","c":"United States","y":42.6281,"x":-88.6324},{"n":"Langgons","c":"Germany","y":50.5,"x":8.6667},{"n":"Horodnia","c":"Ukraine","y":51.8833,"x":31.5833},{"n":"Sandown","c":"United Kingdom","y":50.6551,"x":-1.1541},{"n":"Kingston","c":"Australia","y":-42.9769,"x":147.3083},{"n":"Elgoibar","c":"Spain","y":43.2142,"x":-2.4169},{"n":"Sogndal","c":"Norway","y":61.2297,"x":7.1006},{"n":"Zetel","c":"Germany","y":53.4197,"x":7.9742},{"n":"Mulheim-Karlich","c":"Germany","y":50.3869,"x":7.4953},{"n":"Kuchinarai","c":"Thailand","y":16.5318,"x":104.044},{"n":"Ovidiopol","c":"Ukraine","y":46.2667,"x":30.4333},{"n":"Isperih","c":"Bulgaria","y":43.7204,"x":26.8281},{"n":"Port Lavaca","c":"United States","y":28.6181,"x":-96.6278},{"n":"Whistler","c":"Canada","y":50.1208,"x":-122.9544},{"n":"Macajuba","c":"Brazil","y":-12.1358,"x":-40.36},{"n":"Moulay Driss Zerhoun","c":"Morocco","y":34.0559,"x":-5.5183},{"n":"Malvern","c":"United States","y":34.3734,"x":-92.8205},{"n":"Cricova","c":"Moldova","y":47.1389,"x":28.8614},{"n":"Monschau","c":"Germany","y":50.55,"x":6.25},{"n":"Cadillac","c":"United States","y":44.2494,"x":-85.4163},{"n":"Holesov","c":"Czechia","y":49.3333,"x":17.5783},{"n":"Malargue","c":"Argentina","y":-35.4745,"x":-69.5853},{"n":"Worb","c":"Switzerland","y":46.9306,"x":7.5644},{"n":"Inzago","c":"Italy","y":45.5333,"x":9.4833},{"n":"Santiago","c":"Costa Rica","y":9.8291,"x":-84.3044},{"n":"Lake Station","c":"United States","y":41.5729,"x":-87.2599},{"n":"Healdsburg","c":"United States","y":38.6229,"x":-122.8651},{"n":"Brighton","c":"Canada","y":44.1222,"x":-77.7642},{"n":"Sao Felix do Araguaia","c":"Brazil","y":-11.6169,"x":-50.6689},{"n":"Tolcayuca","c":"Mexico","y":19.95,"x":-98.9167},{"n":"Bocaina","c":"Brazil","y":-22.1361,"x":-48.5181},{"n":"East Renton Highlands","c":"United States","y":47.4718,"x":-122.0854},{"n":"East Whiteland","c":"United States","y":40.0474,"x":-75.5547},{"n":"Rodenbach","c":"Germany","y":50.15,"x":9.0333},{"n":"Casino","c":"Australia","y":-28.8483,"x":153.0511},{"n":"Scornicesti","c":"Romania","y":44.57,"x":24.55},{"n":"Brown Deer","c":"United States","y":43.1743,"x":-87.975},{"n":"Ban Wiang Phan","c":"Thailand","y":20.4034,"x":99.8856},{"n":"Azcoitia","c":"Spain","y":43.1792,"x":-2.3106},{"n":"Crestwood","c":"United States","y":38.5569,"x":-90.3782},{"n":"Grants","c":"United States","y":35.1538,"x":-107.8335},{"n":"Wormer","c":"Netherlands","y":52.4972,"x":4.8089},{"n":"Gouvea","c":"Brazil","y":-18.4539,"x":-43.7408},{"n":"Opatija","c":"Croatia","y":45.3347,"x":14.3069},{"n":"Moldava nad Bodvou","c":"Slovakia","y":48.6156,"x":20.9992},{"n":"Rio dos Cedros","c":"Brazil","y":-26.7378,"x":-49.2739},{"n":"Ceu Azul","c":"Brazil","y":-25.1469,"x":-53.8489},{"n":"Dolo Bay","c":"Ethiopia","y":4.1833,"x":42.0833},{"n":"Caetanopolis","c":"Brazil","y":-19.295,"x":-44.4189},{"n":"Neuhausen am Rheinfall","c":"Switzerland","y":47.6831,"x":8.6167},{"n":"Chaplygin","c":"Russia","y":53.2417,"x":39.9667},{"n":"Wrentham","c":"United States","y":42.0513,"x":-71.3552},{"n":"Prudhoe","c":"United Kingdom","y":54.961,"x":-1.849},{"n":"Uberherrn","c":"Germany","y":49.25,"x":6.7},{"n":"Haradok","c":"Belarus","y":55.4667,"x":29.9833},{"n":"Malibu","c":"United States","y":34.0368,"x":-118.7845},{"n":"Porto-Vecchio","c":"France","y":41.5908,"x":9.2797},{"n":"Pornichet","c":"France","y":47.2658,"x":-2.34},{"n":"Alto Rio Doce","c":"Brazil","y":-21.0258,"x":-43.4108},{"n":"Castano Primo","c":"Italy","y":45.55,"x":8.7667},{"n":"Conceicao dos Ouros","c":"Brazil","y":-22.4128,"x":-45.7978},{"n":"Mudgee","c":"Australia","y":-32.6125,"x":149.5872},{"n":"Tifni","c":"Morocco","y":31.6281,"x":-6.9444},{"n":"Codigoro","c":"Italy","y":44.8333,"x":12.1167},{"n":"Obidos","c":"Portugal","y":39.3585,"x":-9.176},{"n":"Mareeba","c":"Australia","y":-16.9833,"x":145.4167},{"n":"Campagnano di Roma","c":"Italy","y":42.1333,"x":12.3833},{"n":"Cisneros","c":"Colombia","y":6.5383,"x":-75.0886},{"n":"Halasztelek","c":"Hungary","y":47.3608,"x":18.9878},{"n":"Benedito Novo","c":"Brazil","y":-26.7828,"x":-49.3639},{"n":"Baranivka","c":"Ukraine","y":50.3,"x":27.6667},{"n":"Market Drayton","c":"United Kingdom","y":52.9044,"x":-2.4848},{"n":"Labin","c":"Croatia","y":45.0833,"x":14.1167},{"n":"Venosa","c":"Italy","y":40.9667,"x":15.8167},{"n":"Bucyrus","c":"United States","y":40.8054,"x":-82.9719},{"n":"Mombris","c":"Germany","y":50.0667,"x":9.1667},{"n":"Zayukovo","c":"Russia","y":43.6161,"x":43.3339},{"n":"Santo Antonio do Jacinto","c":"Brazil","y":-16.5339,"x":-40.1758},{"n":"La Roche-sur-Foron","c":"France","y":46.0669,"x":6.3119},{"n":"Cafayate","c":"Argentina","y":-26.07,"x":-65.98},{"n":"Medina Sidonia","c":"Spain","y":36.4667,"x":-5.9167},{"n":"Valencia West","c":"United States","y":32.1355,"x":-111.1123},{"n":"Viera East","c":"United States","y":28.261,"x":-80.715},{"n":"Phon","c":"Thailand","y":15.816,"x":102.5998},{"n":"Lommedalen","c":"Norway","y":59.95,"x":10.4667},{"n":"San Pedro","c":"Belize","y":17.9214,"x":-87.9611},{"n":"Guspini","c":"Italy","y":39.54,"x":8.6267},{"n":"Targu Lapus","c":"Romania","y":47.4525,"x":23.8631},{"n":"Obernai","c":"France","y":48.4622,"x":7.4819},{"n":"Hauzenberg","c":"Germany","y":48.6517,"x":13.6236},{"n":"Cuers","c":"France","y":43.2375,"x":6.0708},{"n":"Sainte-Savine","c":"France","y":48.2947,"x":4.0489},{"n":"Tiny","c":"Canada","y":44.6833,"x":-79.95},{"n":"Irupi","c":"Brazil","y":-20.345,"x":-41.6408},{"n":"Kankaanpaa","c":"Finland","y":61.8042,"x":22.3944},{"n":"Sitio do Quinto","c":"Brazil","y":-10.35,"x":-38.2169},{"n":"Riolandia","c":"Brazil","y":-19.99,"x":-49.6808},{"n":"Trofarello","c":"Italy","y":44.9833,"x":7.7333},{"n":"Cologno al Serio","c":"Italy","y":45.5833,"x":9.7},{"n":"Tring","c":"United Kingdom","y":51.7962,"x":-0.6592},{"n":"Tomball","c":"United States","y":30.0951,"x":-95.6194},{"n":"Ganserndorf","c":"Austria","y":48.3406,"x":16.7175},{"n":"Hawera","c":"New Zealand","y":-39.5833,"x":174.2833},{"n":"Lieksa","c":"Finland","y":63.3167,"x":30.0167},{"n":"Dolinsk","c":"Russia","y":47.3167,"x":142.8},{"n":"Jaqueira","c":"Brazil","y":-8.7269,"x":-35.7928},{"n":"Vlasim","c":"Czechia","y":49.7064,"x":14.8989},{"n":"Padiham","c":"United Kingdom","y":53.797,"x":-2.311},{"n":"Florida City","c":"United States","y":25.4418,"x":-80.4685},{"n":"Etaples","c":"France","y":50.5178,"x":1.6406},{"n":"Arataca","c":"Brazil","y":-15.2628,"x":-39.4139},{"n":"Cisternino","c":"Italy","y":40.75,"x":17.4167},{"n":"Courrieres","c":"France","y":50.4581,"x":2.9472},{"n":"Zero Branco","c":"Italy","y":45.6,"x":12.1667},{"n":"Vasylkivka","c":"Ukraine","y":48.2084,"x":36.0253},{"n":"Wanaque","c":"United States","y":41.044,"x":-74.29},{"n":"Englefield Green","c":"United Kingdom","y":51.4301,"x":-0.5699},{"n":"Hollabrunn","c":"Austria","y":48.5667,"x":16.0833},{"n":"Scotts Valley","c":"United States","y":37.0555,"x":-122.0118},{"n":"Gora","c":"Poland","y":51.6667,"x":16.55},{"n":"Jarabulus","c":"Syria","y":36.8175,"x":38.0111},{"n":"Sao Joao do Manhuacu","c":"Brazil","y":-20.3939,"x":-42.1508},{"n":"Stokke","c":"Norway","y":59.24,"x":10.2708},{"n":"Jose Maria Morelos","c":"Mexico","y":19.75,"x":-88.7},{"n":"Darnetal","c":"France","y":49.4447,"x":1.1511},{"n":"Puente Nacional","c":"Colombia","y":5.8772,"x":-73.6786},{"n":"Robstown","c":"United States","y":27.7886,"x":-97.6685},{"n":"Mezdra","c":"Bulgaria","y":43.1425,"x":23.7142},{"n":"Sunninghill","c":"United Kingdom","y":51.405,"x":-0.656},{"n":"Kruje","c":"Albania","y":41.5178,"x":19.7978},{"n":"Rurrenabaque","c":"Bolivia","y":-14.4422,"x":-67.5283},{"n":"Apen","c":"Germany","y":53.2214,"x":7.8097},{"n":"Lake Los Angeles","c":"United States","y":34.6097,"x":-117.8339},{"n":"Aesch","c":"Switzerland","y":47.4694,"x":7.5942},{"n":"Choppington","c":"United Kingdom","y":55.145,"x":-1.601},{"n":"Sinzheim","c":"Germany","y":48.7619,"x":8.1669},{"n":"Wolnzach","c":"Germany","y":48.6,"x":11.6167},{"n":"Wolmirstedt","c":"Germany","y":52.25,"x":11.6167},{"n":"Ross on Wye","c":"United Kingdom","y":51.914,"x":-2.587},{"n":"Carbonera","c":"Italy","y":45.6833,"x":12.2833},{"n":"Raubling","c":"Germany","y":47.7881,"x":12.1047},{"n":"North Tidworth","c":"United Kingdom","y":51.237,"x":-1.664},{"n":"Wanderlandia","c":"Brazil","y":-6.8489,"x":-47.9628},{"n":"Magdagachi","c":"Russia","y":53.45,"x":125.8},{"n":"Teixeiras","c":"Brazil","y":-20.6508,"x":-42.8569},{"n":"Al M'aziz","c":"Morocco","y":33.7039,"x":-6.34},{"n":"Vauvert","c":"France","y":43.6933,"x":4.2761},{"n":"Pimenteiras","c":"Brazil","y":-6.245,"x":-41.4189},{"n":"Bonito de Santa Fe","c":"Brazil","y":-7.3128,"x":-38.515},{"n":"Nemyriv","c":"Ukraine","y":48.9794,"x":28.8439},{"n":"Rio Colorado","c":"Argentina","y":-38.9908,"x":-64.0958},{"n":"Velke Mezirici","c":"Czechia","y":49.3553,"x":16.0123},{"n":"Matca","c":"Romania","y":45.85,"x":27.5333},{"n":"Elma","c":"United States","y":42.8231,"x":-78.6371},{"n":"Excelsior Springs","c":"United States","y":39.339,"x":-94.24},{"n":"Diamond Springs","c":"United States","y":38.692,"x":-120.8391},{"n":"Lundazi","c":"Zambia","y":-12.2895,"x":33.17},{"n":"Gerstetten","c":"Germany","y":48.6225,"x":10.0206},{"n":"Kalaoa","c":"United States","y":19.7369,"x":-156.0122},{"n":"Deutschlandsberg","c":"Austria","y":46.8161,"x":15.215},{"n":"Grafenhainichen","c":"Germany","y":51.7292,"x":12.4556},{"n":"Sint Anthonis","c":"Netherlands","y":51.6258,"x":5.8811},{"n":"Laredo","c":"Spain","y":43.4144,"x":-3.41},{"n":"Saverne","c":"France","y":48.7414,"x":7.3619},{"n":"Dudley","c":"United States","y":42.055,"x":-71.9352},{"n":"Poggio a Caiano","c":"Italy","y":43.8167,"x":11.0667},{"n":"Portomaggiore","c":"Italy","y":44.7,"x":11.8},{"n":"Angicos","c":"Brazil","y":-5.6658,"x":-36.6008},{"n":"Carver","c":"United States","y":41.8739,"x":-70.7563},{"n":"Cordele","c":"United States","y":31.9563,"x":-83.7694},{"n":"Orchha","c":"India","y":25.35,"x":78.64},{"n":"Musile di Piave","c":"Italy","y":45.6178,"x":12.565},{"n":"Mendota","c":"United States","y":36.7555,"x":-120.3776},{"n":"Tegueste","c":"Spain","y":28.5233,"x":-16.3408},{"n":"Mohnesee","c":"Germany","y":51.4958,"x":8.1306},{"n":"Tamezmout","c":"Morocco","y":30.8075,"x":-6.1142},{"n":"Athol","c":"United States","y":42.5841,"x":-72.2177},{"n":"Jodar","c":"Spain","y":37.8333,"x":-3.35},{"n":"Pacoti","c":"Brazil","y":-4.225,"x":-38.9228},{"n":"Isola della Scala","c":"Italy","y":45.2667,"x":11.1333},{"n":"Eufaula","c":"United States","y":31.9102,"x":-85.1505},{"n":"Frenstat pod Radhostem","c":"Czechia","y":49.5483,"x":18.2108},{"n":"Glen Rock","c":"United States","y":40.9601,"x":-74.1249},{"n":"Cocoa Beach","c":"United States","y":28.3326,"x":-80.6274},{"n":"Altdorf","c":"Germany","y":48.5667,"x":12.1167},{"n":"Prymorsk","c":"Ukraine","y":46.7333,"x":36.3596},{"n":"Ravanusa","c":"Italy","y":37.2678,"x":13.9697},{"n":"Aniche","c":"France","y":50.33,"x":3.2511},{"n":"Taormina","c":"Italy","y":37.85,"x":15.3},{"n":"Benaguacil","c":"Spain","y":39.5933,"x":-0.5864},{"n":"Motegi","c":"Japan","y":36.5167,"x":140.1833},{"n":"Nossa Senhora dos Milagres","c":"Brazil","y":-12.87,"x":-39.8589},{"n":"Mena","c":"Ukraine","y":51.5167,"x":32.2167},{"n":"Ubai","c":"Brazil","y":-16.285,"x":-44.7778},{"n":"Bagamanoc","c":"Philippines","y":13.9408,"x":124.2888},{"n":"Oliva","c":"Argentina","y":-32.0416,"x":-63.5698},{"n":"Campo do Meio","c":"Brazil","y":-21.1069,"x":-45.83},{"n":"Bullas","c":"Spain","y":38.0497,"x":-1.6706},{"n":"Billerbeck","c":"Germany","y":51.9792,"x":7.295},{"n":"Nyazepetrovsk","c":"Russia","y":56.05,"x":59.6},{"n":"Mitai","c":"Japan","y":32.7117,"x":131.3078},{"n":"Clute","c":"United States","y":29.0256,"x":-95.3975},{"n":"Rodeio","c":"Brazil","y":-26.9228,"x":-49.3658},{"n":"Tamalpais-Homestead Valley","c":"United States","y":37.8793,"x":-122.5382},{"n":"Gander","c":"Canada","y":48.9569,"x":-54.6089},{"n":"Allonnes","c":"France","y":47.9686,"x":0.1606},{"n":"Ovada","c":"Italy","y":44.6392,"x":8.6464},{"n":"Port St. John","c":"United States","y":28.4771,"x":-80.7874},{"n":"Eningen unter Achalm","c":"Germany","y":48.4831,"x":9.2522},{"n":"Caorle","c":"Italy","y":45.6003,"x":12.8876},{"n":"Chantilly","c":"France","y":49.1869,"x":2.4608},{"n":"Hinwil","c":"Switzerland","y":47.3033,"x":8.8444},{"n":"Hazerswoude-Dorp","c":"Netherlands","y":52.1,"x":4.5833},{"n":"Southborough","c":"United Kingdom","y":51.1598,"x":0.2652},{"n":"Isaszeg","c":"Hungary","y":47.5333,"x":19.4},{"n":"Septemes-les-Vallons","c":"France","y":43.3983,"x":5.3658},{"n":"Serra do Salitre","c":"Brazil","y":-19.1108,"x":-46.69},{"n":"Endwell","c":"United States","y":42.1185,"x":-76.0219},{"n":"Udachnyy","c":"Russia","y":66.4,"x":112.3},{"n":"Guaicara","c":"Brazil","y":-21.6219,"x":-49.7986},{"n":"Xiaoba","c":"China","y":26.7217,"x":106.9236},{"n":"Salaya","c":"Thailand","y":13.8023,"x":100.3208},{"n":"Redentora","c":"Brazil","y":-27.6639,"x":-53.6378},{"n":"Iver","c":"United Kingdom","y":51.521,"x":-0.507},{"n":"Imarui","c":"Brazil","y":-28.3408,"x":-48.82},{"n":"Lyuban'","c":"Belarus","y":52.7819,"x":28.0525},{"n":"Diao'ecun","c":"China","y":40.7218,"x":115.8136},{"n":"Sant Joan de Vilatorrada","c":"Spain","y":41.7456,"x":1.8056},{"n":"Esquipulas Palo Gordo","c":"Guatemala","y":14.9333,"x":-91.8167},{"n":"Tabontabon","c":"Philippines","y":11.0333,"x":124.9667},{"n":"Port Morant","c":"Jamaica","y":17.891,"x":-76.329},{"n":"Huandacareo","c":"Mexico","y":19.9906,"x":-101.275},{"n":"Kurim","c":"Czechia","y":49.2985,"x":16.5315},{"n":"Rudersberg","c":"Germany","y":48.8856,"x":9.5281},{"n":"Guthrie","c":"United States","y":35.8428,"x":-97.4357},{"n":"Dranesville","c":"United States","y":38.9955,"x":-77.3693},{"n":"Royal Wootton Bassett","c":"United Kingdom","y":51.533,"x":-1.9},{"n":"Rothesay","c":"Canada","y":45.3831,"x":-65.9969},{"n":"Burgthann","c":"Germany","y":49.35,"x":11.3},{"n":"Schwaigern","c":"Germany","y":49.1333,"x":9.05},{"n":"El Campo","c":"United States","y":29.1987,"x":-96.2724},{"n":"Varzaneh","c":"Iran","y":32.4194,"x":52.6481},{"n":"Fortaleza dos Nogueiras","c":"Brazil","y":-6.9639,"x":-46.1769},{"n":"Trecastagni","c":"Italy","y":37.6167,"x":15.0833},{"n":"Videle","c":"Romania","y":44.2833,"x":25.5333},{"n":"Whitburn","c":"United Kingdom","y":55.8621,"x":-3.6872},{"n":"Annoeullin","c":"France","y":50.5294,"x":2.9328},{"n":"Mala Vyska","c":"Ukraine","y":48.65,"x":31.6333},{"n":"Bonate di Sopra","c":"Italy","y":45.6819,"x":9.5586},{"n":"Oulad Friha","c":"Morocco","y":32.6108,"x":-7.625},{"n":"Panajachel","c":"Guatemala","y":14.7361,"x":-91.1558},{"n":"Drawsko Pomorskie","c":"Poland","y":53.5333,"x":15.8},{"n":"Budakalasz","c":"Hungary","y":47.6215,"x":19.046},{"n":"Accokeek","c":"United States","y":38.6745,"x":-77.0023},{"n":"Mistelbach","c":"Austria","y":48.5667,"x":16.5667},{"n":"Gravatal","c":"Brazil","y":-28.3308,"x":-49.035},{"n":"Svidnik","c":"Slovakia","y":49.3056,"x":21.5678},{"n":"Saint Helena Bay","c":"South Africa","y":-32.7583,"x":18.0278},{"n":"Rangsdorf","c":"Germany","y":52.2831,"x":13.4331},{"n":"Krynica","c":"Poland","y":49.4222,"x":20.9594},{"n":"Doornspijk","c":"Netherlands","y":52.4192,"x":5.8161},{"n":"Kalmiuske","c":"Ukraine","y":47.6667,"x":38.0667},{"n":"Brock","c":"Canada","y":44.3167,"x":-79.0833},{"n":"Kirchhundem","c":"Germany","y":51.1,"x":8.0833},{"n":"Stupava","c":"Slovakia","y":48.2833,"x":17.0333},{"n":"Nzeto","c":"Angola","y":-7.229,"x":12.865},{"n":"Dautphe","c":"Germany","y":50.8583,"x":8.55},{"n":"Eccleston","c":"United Kingdom","y":53.4539,"x":-2.7748},{"n":"Randaberg","c":"Norway","y":59.0017,"x":5.6153},{"n":"Anatoli","c":"Greece","y":39.6386,"x":20.8661},{"n":"Hipperholme","c":"United Kingdom","y":53.7258,"x":-1.812},{"n":"Itabirinha de Mantena","c":"Brazil","y":-18.5658,"x":-41.2328},{"n":"Mohlin","c":"Switzerland","y":47.5583,"x":7.8458},{"n":"Sidi Moussa Ben Ali","c":"Morocco","y":33.5594,"x":-7.3817},{"n":"Bad Nenndorf","c":"Germany","y":52.3369,"x":9.3786},{"n":"Teulada","c":"Spain","y":38.7292,"x":0.1019},{"n":"Walldurn","c":"Germany","y":49.5831,"x":9.3681},{"n":"Schoningen","c":"Germany","y":52.138,"x":10.9674},{"n":"Bytca","c":"Slovakia","y":49.2228,"x":18.5581},{"n":"Calheta","c":"Portugal","y":32.7333,"x":-17.1667},{"n":"Pir Bakran","c":"Iran","y":32.4686,"x":51.5578},{"n":"Oignies","c":"France","y":50.4692,"x":2.9936},{"n":"Gravelines","c":"France","y":50.9864,"x":2.1275},{"n":"Belmonte Mezzagno","c":"Italy","y":38.05,"x":13.3833},{"n":"Camisano Vicentino","c":"Italy","y":45.5167,"x":11.7167},{"n":"Derdara","c":"Morocco","y":35.1167,"x":-5.2833},{"n":"Chegem Vtoroy","c":"Russia","y":43.6022,"x":43.6242},{"n":"Griswold","c":"United States","y":41.5852,"x":-71.9226},{"n":"Dingman","c":"United States","y":41.3226,"x":-74.9264},{"n":"Stonehaven","c":"United Kingdom","y":56.964,"x":-2.211},{"n":"Lenvik","c":"Norway","y":69.3836,"x":17.9675},{"n":"Cachoeira de Minas","c":"Brazil","y":-22.355,"x":-45.7789},{"n":"Sidi Kasem","c":"Morocco","y":35.5339,"x":-5.2183},{"n":"Paranatama","c":"Brazil","y":-8.9208,"x":-36.6581},{"n":"Summerland","c":"Canada","y":49.6006,"x":-119.6778},{"n":"Bradwell","c":"United Kingdom","y":52.05,"x":-0.787},{"n":"Kuruman","c":"South Africa","y":-27.4597,"x":23.4125},{"n":"Gold Canyon","c":"United States","y":33.3715,"x":-111.4369},{"n":"Selsey","c":"United Kingdom","y":50.735,"x":-0.7898},{"n":"Batemans Bay","c":"Australia","y":-35.7081,"x":150.1744},{"n":"Likhoslavl","c":"Russia","y":57.1167,"x":35.4667},{"n":"Den Chai","c":"Thailand","y":17.9835,"x":100.0519},{"n":"Firminopolis","c":"Brazil","y":-16.5819,"x":-50.305},{"n":"Boscotrecase","c":"Italy","y":40.7833,"x":14.4667},{"n":"Kem","c":"Russia","y":64.95,"x":34.6},{"n":"Antonio Carlos","c":"Brazil","y":-21.3178,"x":-43.7469},{"n":"Dzouz","c":"Morocco","y":31.8697,"x":-7.3097},{"n":"Ulricehamn","c":"Sweden","y":57.7917,"x":13.4186},{"n":"Shengping","c":"China","y":28.4865,"x":98.913},{"n":"Onate","c":"Spain","y":43.0333,"x":-2.4167},{"n":"Diepenveen","c":"Netherlands","y":52.2894,"x":6.15},{"n":"Cedarburg","c":"United States","y":43.2991,"x":-87.9887},{"n":"Sacueni","c":"Romania","y":47.3525,"x":22.0914},{"n":"Claiborne","c":"United States","y":32.5379,"x":-92.1981},{"n":"Temamatla","c":"Mexico","y":19.2028,"x":-98.87},{"n":"Kenzhe","c":"Russia","y":43.4975,"x":43.5539},{"n":"Sursee","c":"Switzerland","y":47.1742,"x":8.1081},{"n":"'Ain Roua","c":"Algeria","y":36.3344,"x":5.1806},{"n":"Putnam Valley","c":"United States","y":41.3979,"x":-73.8368},{"n":"La Riche","c":"France","y":47.3892,"x":0.6606},{"n":"Waltikon","c":"Switzerland","y":47.3667,"x":8.5833},{"n":"De Panne","c":"Belgium","y":51.1019,"x":2.5917},{"n":"Langelsheim","c":"Germany","y":51.9381,"x":10.335},{"n":"North Middleton","c":"United States","y":40.2462,"x":-77.2168},{"n":"Stollberg","c":"Germany","y":50.7083,"x":12.7783},{"n":"Werther","c":"Germany","y":52.075,"x":8.4125},{"n":"Ezanville","c":"France","y":49.0278,"x":2.3608},{"n":"Ghinda'e","c":"Eritrea","y":15.45,"x":39.0833},{"n":"Peiting","c":"Germany","y":47.8,"x":10.9333},{"n":"Beachwood","c":"United States","y":41.4759,"x":-81.503},{"n":"Seven Hills","c":"United States","y":41.3805,"x":-81.6737},{"n":"Siniscola","c":"Italy","y":40.5743,"x":9.6963},{"n":"Upper Montclair","c":"United States","y":40.8428,"x":-74.2014},{"n":"Rutesheim","c":"Germany","y":48.8097,"x":8.945},{"n":"Epazoyucan","c":"Mexico","y":20.0177,"x":-98.6361},{"n":"Hohenkirchen-Siegertsbrunn","c":"Germany","y":48.0167,"x":11.7333},{"n":"Tadley","c":"United Kingdom","y":51.3506,"x":-1.1376},{"n":"Ciechocinek","c":"Poland","y":52.8833,"x":18.7833},{"n":"Harsum","c":"Germany","y":52.2054,"x":9.96},{"n":"Sesto Calende","c":"Italy","y":45.7333,"x":8.6333},{"n":"Cranleigh","c":"United Kingdom","y":51.1363,"x":-0.4784},{"n":"Recke","c":"Germany","y":52.37,"x":7.7189},{"n":"Val-des-Monts","c":"Canada","y":45.65,"x":-75.6667},{"n":"Paranacity","c":"Brazil","y":-22.93,"x":-52.1508},{"n":"Jucati","c":"Brazil","y":-8.7058,"x":-36.4889},{"n":"Cerrillos","c":"Argentina","y":-24.9,"x":-65.4833},{"n":"Elk City","c":"United States","y":35.385,"x":-99.4331},{"n":"Bouabout","c":"Morocco","y":31.2655,"x":-9.1786},{"n":"Satuek","c":"Thailand","y":15.3008,"x":103.3013},{"n":"Tawnza","c":"Morocco","y":32.0944,"x":-6.6025},{"n":"Andraitx","c":"Spain","y":39.5746,"x":2.4206},{"n":"Riesi","c":"Italy","y":37.2833,"x":14.0833},{"n":"Holywood","c":"United Kingdom","y":54.636,"x":-5.845},{"n":"Mulungu","c":"Brazil","y":-4.3058,"x":-38.9958},{"n":"Leatherhead","c":"United Kingdom","y":51.295,"x":-0.329},{"n":"Yuasa","c":"Japan","y":34.0294,"x":135.1903},{"n":"Scottdale","c":"United States","y":33.795,"x":-84.2634},{"n":"Tache","c":"Canada","y":49.7081,"x":-96.6736},{"n":"Severnyy","c":"Russia","y":67.6083,"x":64.1233},{"n":"Grobbendonk","c":"Belgium","y":51.1919,"x":4.7386},{"n":"Sablan","c":"Philippines","y":16.5,"x":120.5167},{"n":"Raesfeld","c":"Germany","y":51.7667,"x":6.8333},{"n":"Prinsenbeek","c":"Netherlands","y":51.5981,"x":4.7136},{"n":"Silver City","c":"United States","y":32.7784,"x":-108.2698},{"n":"Upper Uwchlan","c":"United States","y":40.0817,"x":-75.7071},{"n":"Wambrechies","c":"France","y":50.6853,"x":3.0486},{"n":"Duas Barras","c":"Brazil","y":-22.0508,"x":-42.5219},{"n":"Resende Costa","c":"Brazil","y":-20.9219,"x":-44.2378},{"n":"Melito di Porto Salvo","c":"Italy","y":37.9167,"x":15.7833},{"n":"Agareb","c":"Tunisia","y":34.7414,"x":10.528},{"n":"Douar Trougout","c":"Morocco","y":35.1797,"x":-3.7714},{"n":"Gluckstadt","c":"Germany","y":53.7917,"x":9.4219},{"n":"Ferreiros","c":"Brazil","y":-7.4478,"x":-35.2439},{"n":"Wittingen","c":"Germany","y":52.7281,"x":10.7391},{"n":"Esil","c":"Kazakhstan","y":51.9556,"x":66.4042},{"n":"Montanhas","c":"Brazil","y":-6.4858,"x":-35.2878},{"n":"Drezna","c":"Russia","y":55.75,"x":38.8333},{"n":"Rheinau","c":"Germany","y":48.6678,"x":7.9347},{"n":"Omaruru","c":"Namibia","y":-21.4183,"x":15.9539},{"n":"Kin","c":"Japan","y":26.4561,"x":127.9261},{"n":"Mitchellville","c":"United States","y":38.9358,"x":-76.8146},{"n":"Lezignan-Corbieres","c":"France","y":43.2006,"x":2.7578},{"n":"Cholpon-Ata","c":"Kyrgyzstan","y":42.65,"x":77.0833},{"n":"Carmo da Mata","c":"Brazil","y":-20.5578,"x":-44.8708},{"n":"Bannewitz","c":"Germany","y":50.9931,"x":13.7167},{"n":"Suyo","c":"Philippines","y":16.9667,"x":120.55},{"n":"Roncador","c":"Brazil","y":-24.6028,"x":-52.275},{"n":"Plankstadt","c":"Germany","y":49.3933,"x":8.5942},{"n":"Alto Garcas","c":"Brazil","y":-16.9439,"x":-53.5278},{"n":"Santana","c":"Romania","y":46.35,"x":21.5},{"n":"Sebastiao Laranjeiras","c":"Brazil","y":-14.5728,"x":-42.94},{"n":"Normandia","c":"Brazil","y":3.8808,"x":-59.6228},{"n":"Targu Ocna","c":"Romania","y":46.2803,"x":26.6094},{"n":"Saint-Cyprien","c":"France","y":42.6181,"x":3.0064},{"n":"Kuriyama","c":"Japan","y":43.0564,"x":141.7842},{"n":"Castelvetro di Modena","c":"Italy","y":44.5067,"x":10.9472},{"n":"Spirit Lake","c":"United States","y":43.4176,"x":-95.1109},{"n":"Barbadanes","c":"Spain","y":42.3003,"x":-7.9064},{"n":"Masanasa","c":"Spain","y":39.4083,"x":-0.3989},{"n":"Largs","c":"United Kingdom","y":55.794,"x":-4.867},{"n":"Chorrocho","c":"Brazil","y":-8.98,"x":-39.0939},{"n":"Tagta","c":"Turkmenistan","y":41.65,"x":59.9},{"n":"Roca Sales","c":"Brazil","y":-29.2839,"x":-51.8678},{"n":"Scharbeutz","c":"Germany","y":54.0214,"x":10.7456},{"n":"Brattleboro","c":"United States","y":42.8618,"x":-72.6145},{"n":"Creazzo","c":"Italy","y":45.5333,"x":11.4833},{"n":"Xambioa","c":"Brazil","y":-6.4108,"x":-48.5358},{"n":"Panazol","c":"France","y":45.8389,"x":1.31},{"n":"Zvenigovo","c":"Russia","y":55.9667,"x":48.0167},{"n":"Valdez","c":"Ecuador","y":1.2671,"x":-78.9855},{"n":"Lower Gwynedd","c":"United States","y":40.188,"x":-75.2373},{"n":"Lokhvytsya","c":"Ukraine","y":50.361,"x":33.2652},{"n":"Montopoli in Val d'Arno","c":"Italy","y":43.6744,"x":10.7503},{"n":"Nova Laranjeiras","c":"Brazil","y":-25.3069,"x":-52.5408},{"n":"Mexico","c":"United States","y":39.1625,"x":-91.8711},{"n":"Guayabal","c":"Colombia","y":5.0306,"x":-74.8844},{"n":"Myronivka","c":"Ukraine","y":49.65,"x":30.9833},{"n":"Unicov","c":"Czechia","y":49.7709,"x":17.1215},{"n":"Blundellsands","c":"United Kingdom","y":53.48,"x":-3.05},{"n":"Archdale","c":"United States","y":35.9033,"x":-79.9592},{"n":"Balve","c":"Germany","y":51.3333,"x":7.8667},{"n":"Rothenburg ob der Tauber","c":"Germany","y":49.3772,"x":10.1789},{"n":"Coronel Dorrego","c":"Argentina","y":-38.7187,"x":-61.2873},{"n":"Scalea","c":"Italy","y":39.8167,"x":15.8},{"n":"Ostrhauderfehn","c":"Germany","y":53.1167,"x":7.6167},{"n":"Zierikzee","c":"Netherlands","y":51.6497,"x":3.9164},{"n":"Amneville","c":"France","y":49.2608,"x":6.1419},{"n":"Yakymivka","c":"Ukraine","y":46.6967,"x":35.1664},{"n":"Divinolandia","c":"Brazil","y":-21.6614,"x":-46.7392},{"n":"Marktheidenfeld","c":"Germany","y":49.85,"x":9.6},{"n":"Lurate Caccivio","c":"Italy","y":45.7667,"x":9},{"n":"Utiel","c":"Spain","y":39.5672,"x":-1.2067},{"n":"Crikvenica","c":"Croatia","y":45.1833,"x":14.7},{"n":"Lutry","c":"Switzerland","y":46.5151,"x":6.699},{"n":"Domazlice","c":"Czechia","y":49.4406,"x":12.9298},{"n":"Bogalusa","c":"United States","y":30.7812,"x":-89.8633},{"n":"Center","c":"United States","y":40.6483,"x":-80.2977},{"n":"Paceco","c":"Italy","y":37.9833,"x":12.55},{"n":"Lenzburg","c":"Switzerland","y":47.3875,"x":8.1803},{"n":"Poldasht","c":"Iran","y":39.3481,"x":45.0711},{"n":"Buriti do Tocantins","c":"Brazil","y":-5.3158,"x":-48.2289},{"n":"El Khemis des Beni Chegdal","c":"Morocco","y":32.4442,"x":-6.955},{"n":"Ain Legdah","c":"Morocco","y":34.1667,"x":-4.5},{"n":"Pfastatt","c":"France","y":47.7689,"x":7.3017},{"n":"Elwood","c":"United States","y":40.8462,"x":-73.3389},{"n":"Muquem de Sao Francisco","c":"Brazil","y":-12.065,"x":-43.5489},{"n":"Cerese","c":"Italy","y":45.1167,"x":10.7833},{"n":"Ochsenfurt","c":"Germany","y":49.6711,"x":10.0498},{"n":"Santiago del Teide","c":"Spain","y":28.2957,"x":-16.8145},{"n":"Laracha","c":"Spain","y":43.2486,"x":-8.5833},{"n":"Aginskoye","c":"Russia","y":51.1031,"x":114.5228},{"n":"Florham Park","c":"United States","y":40.7773,"x":-74.3953},{"n":"Florennes","c":"Belgium","y":50.2514,"x":4.6044},{"n":"Ahlaf","c":"Morocco","y":33.2833,"x":-7.2},{"n":"Trinity","c":"United States","y":28.1809,"x":-82.6581},{"n":"Mack","c":"United States","y":39.1503,"x":-84.6792},{"n":"Geisenfeld","c":"Germany","y":48.684,"x":11.6117},{"n":"Klyetsk","c":"Belarus","y":53.0636,"x":26.6372},{"n":"Lahfayr","c":"Morocco","y":30.57,"x":-8.4878},{"n":"Montmagny","c":"Canada","y":46.9833,"x":-70.55},{"n":"Kostinbrod","c":"Bulgaria","y":42.8101,"x":23.2168},{"n":"Glenfield","c":"United Kingdom","y":52.6491,"x":-1.2062},{"n":"Cornate d'Adda","c":"Italy","y":45.65,"x":9.4667},{"n":"Jaguari","c":"Brazil","y":-29.4969,"x":-54.69},{"n":"Roma","c":"United States","y":26.4166,"x":-99.006},{"n":"Acuitzio del Canje","c":"Mexico","y":19.5,"x":-101.3333},{"n":"Mountain Top","c":"United States","y":41.1353,"x":-75.9045},{"n":"Chkalovsk","c":"Russia","y":56.7667,"x":43.25},{"n":"Port Salerno","c":"United States","y":27.1461,"x":-80.1895},{"n":"Urai","c":"Brazil","y":-23.1978,"x":-50.7958},{"n":"Schipluiden","c":"Netherlands","y":51.9833,"x":4.3167},{"n":"Castelli Calepio","c":"Italy","y":45.6333,"x":9.9},{"n":"Avigliano","c":"Italy","y":40.7333,"x":15.7167},{"n":"Alto Paraguai","c":"Brazil","y":-14.5139,"x":-56.4828},{"n":"Briancon","c":"France","y":44.8958,"x":6.635},{"n":"Castel Mella","c":"Italy","y":45.5,"x":10.15},{"n":"Kyjov","c":"Czechia","y":49.0102,"x":17.1225},{"n":"Magalia","c":"United States","y":39.8228,"x":-121.6078},{"n":"Sales Oliveira","c":"Brazil","y":-20.7719,"x":-47.8378},{"n":"Nieuwenhagen","c":"Netherlands","y":50.9039,"x":6.04},{"n":"Retie","c":"Belgium","y":51.2658,"x":5.0828},{"n":"Duruma","c":"Saudi Arabia","y":24.6,"x":46.1333},{"n":"Gerasdorf bei Wien","c":"Austria","y":48.295,"x":16.4675},{"n":"Karlsdorf-Neuthard","c":"Germany","y":49.1364,"x":8.5439},{"n":"Welzheim","c":"Germany","y":48.8747,"x":9.6344},{"n":"Maxeville","c":"France","y":48.7114,"x":6.1631},{"n":"Phanat Nikhom","c":"Thailand","y":13.4458,"x":101.1844},{"n":"Naliya","c":"India","y":23.2611,"x":68.8267},{"n":"Egersund","c":"Norway","y":58.45,"x":6.0067},{"n":"Gelves","c":"Spain","y":37.3333,"x":-6.0167},{"n":"Magnolia","c":"United States","y":33.2774,"x":-93.2261},{"n":"Emmaus","c":"United States","y":40.5352,"x":-75.4978},{"n":"Holic","c":"Slovakia","y":48.8119,"x":17.1628},{"n":"Moita Bonita","c":"Brazil","y":-10.5778,"x":-37.3428},{"n":"Amdel","c":"Morocco","y":31.5617,"x":-8.8944},{"n":"Capitao de Campos","c":"Brazil","y":-4.4569,"x":-41.9439},{"n":"Bad Schwalbach","c":"Germany","y":50.1401,"x":8.0694},{"n":"Racale","c":"Italy","y":39.9667,"x":18.1},{"n":"Gracemere","c":"Australia","y":-23.4333,"x":150.45},{"n":"Piazzola sul Brenta","c":"Italy","y":45.5333,"x":11.7667},{"n":"Ban Bo Phlap","c":"Thailand","y":13.8439,"x":100.0686},{"n":"Nanakuli","c":"United States","y":21.3892,"x":-158.1445},{"n":"Byerazino","c":"Belarus","y":53.8333,"x":28.9833},{"n":"Hejiaji","c":"China","y":37.3539,"x":109.8377},{"n":"Boldesti-Scaeni","c":"Romania","y":45.03,"x":26.03},{"n":"Resende","c":"Portugal","y":41.1,"x":-7.95},{"n":"Ecaussinnes-Lalaing","c":"Belgium","y":50.5667,"x":4.1833},{"n":"Saint-Junien","c":"France","y":45.8872,"x":0.9011},{"n":"Lencois","c":"Brazil","y":-12.5628,"x":-41.39},{"n":"Mamakating","c":"United States","y":41.586,"x":-74.4951},{"n":"Riorges","c":"France","y":46.0428,"x":4.0406},{"n":"Venafro","c":"Italy","y":41.4833,"x":14.05},{"n":"Benisa","c":"Spain","y":38.7145,"x":0.0527},{"n":"Oravita","c":"Romania","y":45.0333,"x":21.6833},{"n":"La Maddalena","c":"Italy","y":41.2142,"x":9.4083},{"n":"Kormend","c":"Hungary","y":47.011,"x":16.606},{"n":"Fagundes","c":"Brazil","y":-7.355,"x":-35.775},{"n":"Hasbergen","c":"Germany","y":52.2167,"x":7.9167},{"n":"Douar Oulad Naoual","c":"Morocco","y":34.4936,"x":-5.7108},{"n":"Laqraqra","c":"Morocco","y":32.4333,"x":-7.4333},{"n":"Eidsberg","c":"Norway","y":59.5369,"x":11.3603},{"n":"Mancha Real","c":"Spain","y":37.7833,"x":-3.6},{"n":"Botticino Sera","c":"Italy","y":45.5339,"x":10.3078},{"n":"Stelle","c":"Germany","y":53.3667,"x":10.1167},{"n":"Dinard","c":"France","y":48.6325,"x":-2.0617},{"n":"Show Low","c":"United States","y":34.2671,"x":-110.0384},{"n":"Nikel","c":"Russia","y":69.4081,"x":30.2206},{"n":"Trostberg an der Alz","c":"Germany","y":48.0167,"x":12.55},{"n":"Erin","c":"Canada","y":43.7667,"x":-80.0667},{"n":"Jimani","c":"Dominican Republic","y":18.4833,"x":-71.85},{"n":"Aratuba","c":"Brazil","y":-4.4178,"x":-39.045},{"n":"Duque Bacelar","c":"Brazil","y":-4.1558,"x":-42.9439},{"n":"Wildau","c":"Germany","y":52.3167,"x":13.6333},{"n":"Acate","c":"Italy","y":37.0253,"x":14.4925},{"n":"Cadolzburg","c":"Germany","y":49.45,"x":10.8667},{"n":"Kall","c":"Germany","y":50.5497,"x":6.5497},{"n":"Flawil","c":"Switzerland","y":47.4053,"x":9.1977},{"n":"Lamsabih","c":"Morocco","y":32.2933,"x":-8.6889},{"n":"Estiva","c":"Brazil","y":-22.4628,"x":-46.0169},{"n":"Douchy-les-Mines","c":"France","y":50.3014,"x":3.3933},{"n":"Douar Sgarta","c":"Morocco","y":32.1667,"x":-7.6333},{"n":"Woods Cross","c":"United States","y":40.8731,"x":-111.917},{"n":"Curimata","c":"Brazil","y":-10.0358,"x":-44.3058},{"n":"Baldock","c":"United Kingdom","y":51.99,"x":-0.19},{"n":"Belen","c":"Paraguay","y":-23.4695,"x":-57.24},{"n":"Byram","c":"United States","y":32.189,"x":-90.2861},{"n":"North Bellport","c":"United States","y":40.7868,"x":-72.9457},{"n":"Chapantongo","c":"Mexico","y":20.2833,"x":-99.4},{"n":"Fort Bliss","c":"United States","y":31.8137,"x":-106.4119},{"n":"Gentio do Ouro","c":"Brazil","y":-11.4289,"x":-42.5058},{"n":"Sorsk","c":"Russia","y":54,"x":90.25},{"n":"Yuryuzan","c":"Russia","y":54.8667,"x":58.4333},{"n":"Timahdit","c":"Morocco","y":33.2517,"x":-5.0259},{"n":"Kastav","c":"Croatia","y":45.3726,"x":14.349},{"n":"Kennebunk","c":"United States","y":43.3972,"x":-70.5707},{"n":"Lyndon","c":"United States","y":38.2644,"x":-85.5891},{"n":"Adendorf","c":"Germany","y":53.2833,"x":10.45},{"n":"Cazzago San Martino","c":"Italy","y":45.5817,"x":10.0258},{"n":"Covenas","c":"Colombia","y":9.4014,"x":-75.68},{"n":"Eckington","c":"United Kingdom","y":53.308,"x":-1.3643},{"n":"Abaiara","c":"Brazil","y":-7.3589,"x":-39.0458},{"n":"Waidhofen an der Ybbs","c":"Austria","y":47.9596,"x":14.7745},{"n":"Alassio","c":"Italy","y":44.0079,"x":8.173},{"n":"Horbury","c":"United Kingdom","y":53.6595,"x":-1.5566},{"n":"Hailey","c":"United States","y":43.5141,"x":-114.3},{"n":"Snovsk","c":"Ukraine","y":51.8167,"x":31.95},{"n":"Jamaat Shaim","c":"Morocco","y":32.3516,"x":-8.8744},{"n":"Scottsburg","c":"United States","y":38.6851,"x":-85.783},{"n":"Saint-Hilaire-de-Riez","c":"France","y":46.7211,"x":-1.9456},{"n":"Suhr","c":"Switzerland","y":47.3747,"x":8.0806},{"n":"Chassieu","c":"France","y":45.7444,"x":4.9664},{"n":"Portes-les-Valence","c":"France","y":44.8733,"x":4.8764},{"n":"Sant'Ilario d'Enza","c":"Italy","y":44.7667,"x":10.45},{"n":"Schonaich","c":"Germany","y":48.6569,"x":9.0628},{"n":"Kingsnorth","c":"United Kingdom","y":51.1178,"x":0.8615},{"n":"Lijiacha","c":"China","y":37.2467,"x":109.4061},{"n":"Schiller Park","c":"United States","y":41.9586,"x":-87.8693},{"n":"Fenton","c":"United States","y":42.7994,"x":-83.7144},{"n":"Louvres","c":"France","y":49.0439,"x":2.5053},{"n":"Lajosmizse","c":"Hungary","y":47.0264,"x":19.5575},{"n":"Alcantaras","c":"Brazil","y":-3.5889,"x":-40.5458},{"n":"Lunenburg","c":"United States","y":42.5897,"x":-71.7199},{"n":"Bayou Blue","c":"United States","y":29.6341,"x":-90.6732},{"n":"Chekmagush","c":"Russia","y":55.1411,"x":54.65},{"n":"Los Alamitos","c":"United States","y":33.7972,"x":-118.0594},{"n":"Destrehan","c":"United States","y":29.9627,"x":-90.3676},{"n":"Shevington","c":"United Kingdom","y":53.572,"x":-2.69},{"n":"Minooka","c":"United States","y":41.4507,"x":-88.2792},{"n":"Cividale del Friuli","c":"Italy","y":46.0905,"x":13.435},{"n":"Burrel","c":"Albania","y":41.6,"x":20},{"n":"Terra de Areia","c":"Brazil","y":-29.585,"x":-50.0708},{"n":"Gardere","c":"United States","y":30.3582,"x":-91.1345},{"n":"Talaigua Nuevo","c":"Colombia","y":9.3028,"x":-74.5678},{"n":"Calan","c":"Romania","y":45.7361,"x":23.0086},{"n":"Tilmi","c":"Morocco","y":31.8189,"x":-5.7718},{"n":"Kiato","c":"Greece","y":38.0117,"x":22.7467},{"n":"Monte Quemado","c":"Argentina","y":-25.8072,"x":-62.8278},{"n":"Cascades","c":"United States","y":39.0464,"x":-77.3874},{"n":"Kincardine","c":"Canada","y":44.1667,"x":-81.6333},{"n":"Porto Firme","c":"Brazil","y":-20.6728,"x":-43.0839},{"n":"El Ghourdane","c":"Morocco","y":32.34,"x":-8.7728},{"n":"Onoto","c":"Venezuela","y":9.5958,"x":-65.1897},{"n":"Tsqaltubo","c":"Georgia","y":42.3264,"x":42.6006},{"n":"Gardony","c":"Hungary","y":47.1973,"x":18.6091},{"n":"Gardnerville Ranchos","c":"United States","y":38.8872,"x":-119.7426},{"n":"Sankt Johann im Pongau","c":"Austria","y":47.35,"x":13.2},{"n":"Gornozavodsk","c":"Russia","y":58.3833,"x":58.3167},{"n":"Collegedale","c":"United States","y":35.0525,"x":-85.0487},{"n":"Herbolzheim","c":"Germany","y":48.2219,"x":7.7775},{"n":"Great Harwood","c":"United Kingdom","y":53.786,"x":-2.408},{"n":"Nueva Helvecia","c":"Uruguay","y":-34.2889,"x":-57.2333},{"n":"Agcogon","c":"Philippines","y":12.0667,"x":121.9333},{"n":"Humahuaca","c":"Argentina","y":-23.2054,"x":-65.3505},{"n":"Vila Franca do Campo","c":"Portugal","y":37.7167,"x":-25.4333},{"n":"Oxted","c":"United Kingdom","y":51.257,"x":-0.006},{"n":"Lang Suan","c":"Thailand","y":9.9519,"x":99.0813},{"n":"Yangirabot","c":"Uzbekistan","y":40.0333,"x":65.9667},{"n":"Caotan","c":"China","y":36.2501,"x":105.1742},{"n":"Cepagatti","c":"Italy","y":42.3658,"x":14.0767},{"n":"Soham","c":"United Kingdom","y":52.3338,"x":0.3361},{"n":"Snyder","c":"United States","y":32.7133,"x":-100.9113},{"n":"Anguera","c":"Brazil","y":-12.1508,"x":-39.2458},{"n":"Tarrytown","c":"United States","y":41.0647,"x":-73.8673},{"n":"South Normanton","c":"United Kingdom","y":53.107,"x":-1.343},{"n":"Viera West","c":"United States","y":28.243,"x":-80.7368},{"n":"Bang Ban","c":"Thailand","y":14.3739,"x":100.4853},{"n":"Wyandanch","c":"United States","y":40.7467,"x":-73.3769},{"n":"Eugenopolis","c":"Brazil","y":-21.0989,"x":-42.1869},{"n":"Mount Sterling","c":"United States","y":38.0648,"x":-83.9472},{"n":"Pocao","c":"Brazil","y":-8.1858,"x":-36.705},{"n":"Belen","c":"Argentina","y":-27.6496,"x":-67.0333},{"n":"Granby","c":"United States","y":41.9694,"x":-72.8346},{"n":"Ravenna","c":"United States","y":41.1613,"x":-81.2421},{"n":"Catskill","c":"United States","y":42.2063,"x":-73.9435},{"n":"Ipaporanga","c":"Brazil","y":-4.9,"x":-40.7589},{"n":"Bellmawr","c":"United States","y":39.8665,"x":-75.0941},{"n":"Makoua","c":"Congo (Brazzaville)","y":-0.0047,"x":15.6228},{"n":"Touama","c":"Morocco","y":31.5339,"x":-7.4872},{"n":"Campos del Puerto","c":"Spain","y":39.4306,"x":3.0194},{"n":"Bojaca","c":"Colombia","y":4.7336,"x":-74.3422},{"n":"Ouaklim Oukider","c":"Morocco","y":31.45,"x":-5.55},{"n":"Tortoli","c":"Italy","y":39.9333,"x":9.65},{"n":"Sidi Abdellah Ben Taazizt","c":"Morocco","y":34.0019,"x":-5.3694},{"n":"Lardero","c":"Spain","y":42.4261,"x":-2.4614},{"n":"San Giustino","c":"Italy","y":43.55,"x":12.1833},{"n":"Angola","c":"United States","y":41.6433,"x":-85.0051},{"n":"Alatyr","c":"Russia","y":54.85,"x":46.5833},{"n":"Sao Jeronimo da Serra","c":"Brazil","y":-23.7278,"x":-50.7408},{"n":"Charouine","c":"Algeria","y":29.0167,"x":-0.2667},{"n":"Usmate Velate","c":"Italy","y":45.65,"x":9.35},{"n":"Aramari","c":"Brazil","y":-12.0819,"x":-38.4989},{"n":"Coshocton","c":"United States","y":40.2618,"x":-81.848},{"n":"Floresta Azul","c":"Brazil","y":-14.86,"x":-39.66},{"n":"Rumburk","c":"Czechia","y":50.9516,"x":14.5571},{"n":"La Chapelle-Saint-Mesmin","c":"France","y":47.8897,"x":1.8397},{"n":"Campo Redondo","c":"Brazil","y":-6.2428,"x":-36.1828},{"n":"Tarare","c":"France","y":45.8961,"x":4.4331},{"n":"Neede","c":"Netherlands","y":52.1333,"x":6.6167},{"n":"Passy","c":"France","y":45.9236,"x":6.6864},{"n":"Mendota Heights","c":"United States","y":44.8815,"x":-93.14},{"n":"Palmares do Sul","c":"Brazil","y":-30.2578,"x":-50.51},{"n":"Iuiu","c":"Brazil","y":-14.4139,"x":-43.5539},{"n":"Bleiswijk","c":"Netherlands","y":52.01,"x":4.54},{"n":"Gross-Enzersdorf","c":"Austria","y":48.2,"x":16.55},{"n":"Wantage","c":"United Kingdom","y":51.589,"x":-1.427},{"n":"Haysville","c":"United States","y":37.5649,"x":-97.3527},{"n":"Nauheim","c":"Germany","y":49.9447,"x":8.4548},{"n":"Mulsen","c":"Germany","y":50.7447,"x":12.5747},{"n":"Avelino Lopes","c":"Brazil","y":-10.1369,"x":-43.9489},{"n":"Tega Cay","c":"United States","y":35.039,"x":-81.011},{"n":"Zelhem","c":"Netherlands","y":52.0067,"x":6.3486},{"n":"Ichinohe","c":"Japan","y":40.2197,"x":141.2897},{"n":"Dammartin-en-Goele","c":"France","y":49.0542,"x":2.6814},{"n":"Dent","c":"United States","y":39.1922,"x":-84.6593},{"n":"Paramoti","c":"Brazil","y":-4.0969,"x":-39.2389},{"n":"Chantepie","c":"France","y":48.0886,"x":-1.6164},{"n":"Sogne","c":"Norway","y":58.0942,"x":7.7725},{"n":"Cislago","c":"Italy","y":45.65,"x":8.9667},{"n":"Krosno Odrzanskie","c":"Poland","y":52.0542,"x":15.1},{"n":"Sant'Agata de' Goti","c":"Italy","y":41.0893,"x":14.4974},{"n":"Eisenberg","c":"Germany","y":50.9667,"x":11.9},{"n":"Imuris","c":"Mexico","y":30.7667,"x":-110.8333},{"n":"Villerupt","c":"France","y":49.4697,"x":5.9286},{"n":"Hucclecote","c":"United Kingdom","y":51.85,"x":-2.18},{"n":"Etropole","c":"Bulgaria","y":42.8333,"x":24},{"n":"Angelim","c":"Brazil","y":-8.8833,"x":-36.2833},{"n":"Maryport","c":"United Kingdom","y":54.7128,"x":-3.4926},{"n":"Burtonwood","c":"United Kingdom","y":53.4302,"x":-2.6614},{"n":"Bailin","c":"China","y":33.485,"x":105.0034},{"n":"Haddonfield","c":"United States","y":39.8955,"x":-75.0346},{"n":"Abjij","c":"Egypt","y":29.2861,"x":30.8152},{"n":"Sao Domingos","c":"Brazil","y":-10.7908,"x":-37.5678},{"n":"Iazizatene","c":"Morocco","y":35.2544,"x":-3.115},{"n":"Fil'akovo","c":"Slovakia","y":48.2719,"x":19.8286},{"n":"Westerkappeln","c":"Germany","y":52.3153,"x":7.8806},{"n":"Illintsi","c":"Ukraine","y":49.1,"x":29.2},{"n":"Vieux-Conde","c":"France","y":50.4594,"x":3.5683},{"n":"Bradford","c":"United States","y":41.9604,"x":-78.6414},{"n":"Prien am Chiemsee","c":"Germany","y":47.856,"x":12.3462},{"n":"North Vernon","c":"United States","y":39.017,"x":-85.6317},{"n":"Samford","c":"Australia","y":-27.3667,"x":152.8833},{"n":"Kaset Wisai","c":"Thailand","y":15.6556,"x":103.5836},{"n":"Nhandeara","c":"Brazil","y":-20.6939,"x":-50.0378},{"n":"Irineopolis","c":"Brazil","y":-26.2389,"x":-50.8},{"n":"Sturovo","c":"Slovakia","y":47.7992,"x":18.7181},{"n":"Leicester","c":"United States","y":42.24,"x":-71.912},{"n":"Getulina","c":"Brazil","y":-21.7986,"x":-49.9286},{"n":"Travilah","c":"United States","y":39.0571,"x":-77.2458},{"n":"Saire","c":"Brazil","y":-8.3278,"x":-35.7058},{"n":"Le Pradet","c":"France","y":43.1056,"x":6.0233},{"n":"Kaneohe Station","c":"United States","y":21.4451,"x":-157.7515},{"n":"Winton","c":"United States","y":37.3854,"x":-120.6173},{"n":"Boguchar","c":"Russia","y":49.9333,"x":40.55},{"n":"Magurele","c":"Romania","y":44.3461,"x":25.9999},{"n":"Presidente Vargas","c":"Brazil","y":-3.4069,"x":-44.0239},{"n":"Kleinblittersdorf","c":"Germany","y":49.1583,"x":7.0381},{"n":"Urubici","c":"Brazil","y":-28.015,"x":-49.5919},{"n":"Tha Chang","c":"Thailand","y":9.2674,"x":99.1922},{"n":"Sant'Antioco","c":"Italy","y":39.0654,"x":8.454},{"n":"North Dundas","c":"Canada","y":45.0833,"x":-75.35},{"n":"Aulla","c":"Italy","y":44.2167,"x":9.9667},{"n":"El Playon","c":"Colombia","y":7.4703,"x":-73.2033},{"n":"Marcali","c":"Hungary","y":46.5831,"x":17.4064},{"n":"Oberderdingen","c":"Germany","y":49.0625,"x":8.8019},{"n":"Krizevci","c":"Croatia","y":46.0333,"x":16.5333},{"n":"Drochtersen","c":"Germany","y":53.7,"x":9.3833},{"n":"Pirangi","c":"Brazil","y":-21.0914,"x":-48.6578},{"n":"Ulrum","c":"Netherlands","y":53.3589,"x":6.3331},{"n":"Burkburnett","c":"United States","y":34.0746,"x":-98.5672},{"n":"Lighthouse Point","c":"United States","y":26.2785,"x":-80.0891},{"n":"Eunice","c":"United States","y":30.4904,"x":-92.4191},{"n":"Monmouth","c":"United Kingdom","y":51.81,"x":-2.72},{"n":"Tetyushi","c":"Russia","y":54.9333,"x":48.8333},{"n":"Sonseca","c":"Spain","y":39.7,"x":-3.95},{"n":"Joquicingo","c":"Mexico","y":19.0556,"x":-99.5467},{"n":"Mineral de Angangueo","c":"Mexico","y":19.6178,"x":-100.2856},{"n":"Montlouis-sur-Loire","c":"France","y":47.3883,"x":0.8272},{"n":"Matias Cardoso","c":"Brazil","y":-14.855,"x":-43.9219},{"n":"Hallbergmoos","c":"Germany","y":48.3333,"x":11.75},{"n":"Jesenik","c":"Czechia","y":50.2294,"x":17.2047},{"n":"Santa Cruz","c":"Ecuador","y":-0.5333,"x":-90.35},{"n":"Edd","c":"Eritrea","y":13.9333,"x":41.7},{"n":"Douar Jwalla","c":"Morocco","y":31.8878,"x":-7.4411},{"n":"Saint-Jean-de-Vedas","c":"France","y":43.5764,"x":3.8239},{"n":"Greentree","c":"United States","y":39.8989,"x":-74.9614},{"n":"Engenheiro Caldas","c":"Brazil","y":-19.2189,"x":-42.0458},{"n":"Beaumont-sur-Oise","c":"France","y":49.1425,"x":2.2864},{"n":"Draksharama","c":"India","y":16.7928,"x":82.0635},{"n":"Sagada","c":"Philippines","y":17.0833,"x":120.9},{"n":"Zaouiet Says","c":"Morocco","y":32.7931,"x":-8.6506},{"n":"Friedrichsthal","c":"Germany","y":49.3256,"x":7.0961},{"n":"Saltcoats","c":"United Kingdom","y":55.6352,"x":-4.7896},{"n":"Wellesley","c":"Canada","y":43.55,"x":-80.7167},{"n":"Capilla del Monte","c":"Argentina","y":-30.85,"x":-64.5167},{"n":"Apt","c":"France","y":43.8761,"x":5.3964},{"n":"Estevan","c":"Canada","y":49.1392,"x":-102.9861},{"n":"Le Luc","c":"France","y":43.3947,"x":6.3128},{"n":"Polistena","c":"Italy","y":38.4,"x":16.0667},{"n":"Portland","c":"Australia","y":-38.3333,"x":141.6},{"n":"Barton upon Humber","c":"United Kingdom","y":53.6833,"x":-0.45},{"n":"Therwil","c":"Switzerland","y":47.4997,"x":7.55},{"n":"North Saanich","c":"Canada","y":48.6142,"x":-123.42},{"n":"Lauingen","c":"Germany","y":48.5667,"x":10.4333},{"n":"Westview","c":"United States","y":25.8826,"x":-80.2415},{"n":"Otar","c":"Kazakhstan","y":43.5346,"x":75.2139},{"n":"San Francisco","c":"Honduras","y":15.6667,"x":-87.0333},{"n":"Bewdley","c":"United Kingdom","y":52.3752,"x":-2.3162},{"n":"Sanjiaocheng","c":"China","y":36.8993,"x":100.9872},{"n":"Hericourt","c":"France","y":47.5775,"x":6.7617},{"n":"Majdal Shams","c":"Israel","y":33.2692,"x":35.7706},{"n":"Balingoan","c":"Philippines","y":9,"x":124.85},{"n":"DuBois","c":"United States","y":41.1225,"x":-78.7564},{"n":"Lamesa","c":"United States","y":32.7333,"x":-101.9542},{"n":"Vire","c":"France","y":48.8386,"x":-0.8892},{"n":"Korablino","c":"Russia","y":53.9167,"x":40.0167},{"n":"North Logan","c":"United States","y":41.7759,"x":-111.8066},{"n":"Goldach","c":"Switzerland","y":47.4831,"x":9.4664},{"n":"Morazan","c":"Guatemala","y":14.9322,"x":-90.1433},{"n":"Cerreto Guidi","c":"Italy","y":43.7617,"x":10.8771},{"n":"Boguchany","c":"Russia","y":58.3667,"x":97.45},{"n":"Boujediane","c":"Morocco","y":35.1114,"x":-5.7822},{"n":"Waupun","c":"United States","y":43.6315,"x":-88.738},{"n":"Jeumont","c":"France","y":50.2944,"x":4.1014},{"n":"Kursavka","c":"Russia","y":44.46,"x":42.4953},{"n":"Tyrnavos","c":"Greece","y":39.7353,"x":22.2869},{"n":"Fino Mornasco","c":"Italy","y":45.75,"x":9.0333},{"n":"Florestopolis","c":"Brazil","y":-22.8628,"x":-51.3869},{"n":"Big Lake","c":"United States","y":45.3416,"x":-93.7431},{"n":"Hillsdale","c":"United States","y":41.9266,"x":-84.6356},{"n":"Divisopolis","c":"Brazil","y":-15.7258,"x":-41},{"n":"Calcado","c":"Brazil","y":-8.7419,"x":-36.3339},{"n":"Broomall","c":"United States","y":39.9694,"x":-75.3529},{"n":"San Jose de Aerocuar","c":"Venezuela","y":10.6014,"x":-63.3278},{"n":"Santa Croce Camerina","c":"Italy","y":36.8272,"x":14.5239},{"n":"Jamapa","c":"Mexico","y":19.04,"x":-96.24},{"n":"Eichenzell","c":"Germany","y":50.4934,"x":9.6961},{"n":"Gloucester City","c":"United States","y":39.8924,"x":-75.1172},{"n":"Chulym","c":"Russia","y":55.1,"x":80.9667},{"n":"Sansare","c":"Guatemala","y":14.7478,"x":-90.1158},{"n":"Armstrong","c":"Argentina","y":-32.7819,"x":-61.6019},{"n":"Cabestany","c":"France","y":42.6806,"x":2.9428},{"n":"Qasr-e Shirin","c":"Iran","y":34.5156,"x":45.5792},{"n":"Herrsching am Ammersee","c":"Germany","y":48,"x":11.1833},{"n":"Shahmirzad","c":"Iran","y":35.7728,"x":53.3286},{"n":"Alto Parnaiba","c":"Brazil","y":-9.1108,"x":-45.93},{"n":"Staryya Darohi","c":"Belarus","y":53.0394,"x":28.265},{"n":"Emsworth","c":"United Kingdom","y":50.849,"x":-0.938},{"n":"Santa Ana Huista","c":"Guatemala","y":15.6833,"x":-91.8167},{"n":"Rychnov nad Kneznou","c":"Czechia","y":50.1629,"x":16.275},{"n":"Bondoufle","c":"France","y":48.6133,"x":2.3806},{"n":"Braunfels","c":"Germany","y":50.5175,"x":8.3889},{"n":"Valkeala","c":"Finland","y":60.9389,"x":26.7972},{"n":"Lorch","c":"Germany","y":48.7983,"x":9.6883},{"n":"Xintianfeng","c":"China","y":24.4575,"x":115.5205},{"n":"Montechiarugolo","c":"Italy","y":44.6934,"x":10.4224},{"n":"Gengenbach","c":"Germany","y":48.4042,"x":8.0153},{"n":"Trofaiach","c":"Austria","y":47.4261,"x":15.0067},{"n":"Hawaiian Paradise Park","c":"United States","y":19.5828,"x":-154.9693},{"n":"Rianxo","c":"Spain","y":42.65,"x":-8.8167},{"n":"Arizona City","c":"United States","y":32.7506,"x":-111.6707},{"n":"Barros Cassal","c":"Brazil","y":-29.0928,"x":-52.5828},{"n":"Kirchseeon","c":"Germany","y":48.0731,"x":11.8861},{"n":"Susice","c":"Czechia","y":49.2312,"x":13.5202},{"n":"Centenario do Sul","c":"Brazil","y":-22.8208,"x":-51.595},{"n":"Ebreichsdorf","c":"Austria","y":47.9611,"x":16.4047},{"n":"Belzig","c":"Germany","y":52.1422,"x":12.5956},{"n":"Kariat Ben Aouda","c":"Morocco","y":34.7667,"x":-5.95},{"n":"Hormigueros","c":"Puerto Rico","y":18.1437,"x":-67.12},{"n":"Congaz","c":"Moldova","y":46.1092,"x":28.6044},{"n":"Humpolec","c":"Czechia","y":49.5416,"x":15.3594},{"n":"Camp Verde","c":"United States","y":34.5699,"x":-111.8573},{"n":"Ilfracombe","c":"United Kingdom","y":51.208,"x":-4.12},{"n":"Handewitt","c":"Germany","y":54.7667,"x":9.3167},{"n":"Weddington","c":"United States","y":35.0228,"x":-80.7383},{"n":"Si Wilai","c":"Thailand","y":18.1865,"x":103.7408},{"n":"Cameri","c":"Italy","y":45.5,"x":8.65},{"n":"Areiopolis","c":"Brazil","y":-22.6681,"x":-48.665},{"n":"Corleone","c":"Italy","y":37.8167,"x":13.3},{"n":"Harlau","c":"Romania","y":47.4278,"x":26.9114},{"n":"Ogose","c":"Japan","y":35.9644,"x":139.2942},{"n":"Vore","c":"Albania","y":41.3939,"x":19.6544},{"n":"Regen","c":"Germany","y":48.97,"x":13.1264},{"n":"Cunha Pora","c":"Brazil","y":-26.8939,"x":-53.1678},{"n":"Knezha","c":"Bulgaria","y":43.4931,"x":24.0806},{"n":"Poulsbo","c":"United States","y":47.7417,"x":-122.6407},{"n":"Nantucket","c":"United States","y":41.2831,"x":-70.0692},{"n":"Miastko","c":"Poland","y":54,"x":16.9833},{"n":"Zakamensk","c":"Russia","y":50.3833,"x":103.2833},{"n":"Stayton","c":"United States","y":44.8033,"x":-122.7983},{"n":"Enebakk","c":"Norway","y":59.7639,"x":11.1444},{"n":"Trevignano","c":"Italy","y":45.7335,"x":12.094},{"n":"Capena","c":"Italy","y":42.1403,"x":12.5403},{"n":"Varre-Sai","c":"Brazil","y":-20.9308,"x":-41.8689},{"n":"Byelaazyorsk","c":"Belarus","y":52.45,"x":25.1667},{"n":"Tinchlik","c":"Uzbekistan","y":40.4264,"x":71.4956},{"n":"Peschiera del Garda","c":"Italy","y":45.4386,"x":10.6886},{"n":"Xinyaoshang","c":"China","y":26.835,"x":106.8403},{"n":"Tres Cachoeiras","c":"Brazil","y":-29.4558,"x":-49.9239},{"n":"Aizoain","c":"Spain","y":42.8356,"x":-1.6394},{"n":"Osterwieck","c":"Germany","y":51.9667,"x":10.7167},{"n":"Betzdorf","c":"Germany","y":50.7856,"x":7.8728},{"n":"Baley","c":"Russia","y":51.5833,"x":116.6333},{"n":"Red Hook","c":"United States","y":42.0188,"x":-73.8788},{"n":"Shepperton","c":"United Kingdom","y":51.39,"x":-0.46},{"n":"Floha","c":"Germany","y":50.8558,"x":13.0714},{"n":"Wisla","c":"Poland","y":49.6563,"x":18.8591},{"n":"Khlung","c":"Thailand","y":12.4547,"x":102.2214},{"n":"Takad Sahel","c":"Morocco","y":30.25,"x":-9.55},{"n":"Longtaixiang","c":"China","y":34.5988,"x":104.8963},{"n":"Buxerolles","c":"France","y":46.5975,"x":0.3492},{"n":"Sa'in Qal`eh","c":"Iran","y":36.2994,"x":49.0744},{"n":"Fuller Heights","c":"United States","y":27.9226,"x":-81.9978},{"n":"Bir Ghbalou","c":"Algeria","y":36.2631,"x":3.5866},{"n":"Gucheng","c":"China","y":34.4545,"x":105.2064},{"n":"Tolna","c":"Hungary","y":46.4167,"x":18.7833},{"n":"Leers","c":"France","y":50.6817,"x":3.2439},{"n":"Hikawadai","c":"Japan","y":32.5825,"x":130.6736},{"n":"Kirensk","c":"Russia","y":57.7833,"x":108.1},{"n":"Acari","c":"Brazil","y":-6.4358,"x":-36.6389},{"n":"Potengi","c":"Brazil","y":-7.0908,"x":-40.0269},{"n":"Bertinoro","c":"Italy","y":44.15,"x":12.1333},{"n":"Mango","c":"United States","y":27.9915,"x":-82.307},{"n":"Primeiro de Maio","c":"Brazil","y":-22.8508,"x":-51.0278},{"n":"Fitzgerald","c":"United States","y":31.7135,"x":-83.2515},{"n":"Barra do Sul","c":"Brazil","y":-26.4558,"x":-48.6119},{"n":"Parthenay","c":"France","y":46.6486,"x":-0.2469},{"n":"Huntingdon","c":"United States","y":40.5,"x":-78.0097},{"n":"Hagen im Bremischen","c":"Germany","y":53.3577,"x":8.6456},{"n":"Inacio Martins","c":"Brazil","y":-25.5708,"x":-51.0789},{"n":"Warka","c":"Poland","y":51.7833,"x":21.2},{"n":"Fronteiras","c":"Brazil","y":-7.0878,"x":-40.6158},{"n":"Campolongo Maggiore","c":"Italy","y":45.3305,"x":12.0483},{"n":"Satellite Beach","c":"United States","y":28.1782,"x":-80.6019},{"n":"Wangjiabian","c":"China","y":38.2412,"x":110.2353},{"n":"Wen'anyi","c":"China","y":36.8658,"x":110.0553},{"n":"Mawu","c":"China","y":34.4307,"x":104.9176},{"n":"Agua de Dios","c":"Colombia","y":4.3781,"x":-74.6683},{"n":"El Aguila","c":"Colombia","y":4.9081,"x":-76.0422},{"n":"Hammelburg","c":"Germany","y":50.1167,"x":9.9},{"n":"Charlton Kings","c":"United Kingdom","y":51.8877,"x":-2.0413},{"n":"Campinorte","c":"Brazil","y":-14.3139,"x":-49.1519},{"n":"Mayfield","c":"United States","y":36.737,"x":-88.6446},{"n":"Aydincik","c":"Turkey","y":36.1667,"x":33.35},{"n":"Lanham","c":"United States","y":38.9621,"x":-76.8421},{"n":"Sosnivka","c":"Ukraine","y":50.2946,"x":24.2525},{"n":"Franklin Lakes","c":"United States","y":41.0086,"x":-74.2083},{"n":"Bischofswerda","c":"Germany","y":51.1275,"x":14.1797},{"n":"Gulf Gate Estates","c":"United States","y":27.2587,"x":-82.5065},{"n":"De Pinte","c":"Belgium","y":50.9919,"x":3.6478},{"n":"Chicureo Abajo","c":"Chile","y":-33.2808,"x":-70.6366},{"n":"Skelton","c":"United Kingdom","y":54.5619,"x":-0.9874},{"n":"Montale","c":"Italy","y":43.9333,"x":11.0167},{"n":"Veseli nad Moravou","c":"Czechia","y":48.9536,"x":17.3765},{"n":"Town and Country","c":"United States","y":38.6317,"x":-90.479},{"n":"Gottmadingen","c":"Germany","y":47.7356,"x":8.7767},{"n":"Monte San Pietro","c":"Italy","y":44.4578,"x":11.199},{"n":"Miyato","c":"Japan","y":36.1833,"x":139.183},{"n":"Nazyvayevsk","c":"Russia","y":55.5667,"x":71.35},{"n":"Parapua","c":"Brazil","y":-21.7681,"x":-50.7717},{"n":"Ostbevern","c":"Germany","y":52.0389,"x":7.8458},{"n":"Bollullos de la Mitacion","c":"Spain","y":37.3333,"x":-6.1333},{"n":"Fao Rai","c":"Thailand","y":18.0175,"x":103.3057},{"n":"Beius","c":"Romania","y":46.65,"x":22.35},{"n":"Panguipulli","c":"Chile","y":-39.6419,"x":-72.3334},{"n":"Tournon-sur-Rhone","c":"France","y":45.0672,"x":4.8328},{"n":"Giardini","c":"Italy","y":37.8333,"x":15.2667},{"n":"Mount Sinai","c":"United States","y":40.9372,"x":-73.018},{"n":"Princess Anne","c":"United States","y":38.2054,"x":-75.6969},{"n":"Jefferson Hills","c":"United States","y":40.2927,"x":-79.9329},{"n":"Pedernales","c":"Dominican Republic","y":18.038,"x":-71.741},{"n":"Lindon","c":"United States","y":40.3414,"x":-111.7187},{"n":"Stannington","c":"United Kingdom","y":53.396,"x":-1.536},{"n":"Al `Amadiyah","c":"Iraq","y":37.0922,"x":43.4878},{"n":"Pedersore","c":"Finland","y":63.6,"x":22.7917},{"n":"Induno Olona","c":"Italy","y":45.85,"x":8.8333},{"n":"Vilyuysk","c":"Russia","y":63.75,"x":121.6167},{"n":"Feldkirchen-Westerham","c":"Germany","y":47.9,"x":11.85},{"n":"Maysville","c":"United States","y":38.6454,"x":-83.7911},{"n":"Sao Jose do Jacuipe","c":"Brazil","y":-11.4119,"x":-39.8669},{"n":"South Yarmouth","c":"United States","y":41.6692,"x":-70.2005},{"n":"Campton Hills","c":"United States","y":41.9499,"x":-88.4166},{"n":"Tysvaer","c":"Norway","y":59.3617,"x":5.5428},{"n":"Rifle","c":"United States","y":39.5362,"x":-107.7729},{"n":"Motta di Livenza","c":"Italy","y":45.7797,"x":12.6086},{"n":"Narimanov","c":"Russia","y":46.6833,"x":47.85},{"n":"Iacanga","c":"Brazil","y":-21.89,"x":-49.0247},{"n":"Bennettsville","c":"United States","y":34.6303,"x":-79.6874},{"n":"Stropkov","c":"Slovakia","y":49.205,"x":21.6514},{"n":"Walden","c":"United States","y":41.5603,"x":-74.1879},{"n":"Fervedouro","c":"Brazil","y":-20.7258,"x":-42.2789},{"n":"Burgstadt","c":"Germany","y":50.9167,"x":12.8167},{"n":"San Nicolas Buenos Aires","c":"Mexico","y":19.1433,"x":-97.4767},{"n":"Tepetlan","c":"Mexico","y":19.6667,"x":-96.8},{"n":"Lexington Park","c":"United States","y":38.2543,"x":-76.4415},{"n":"Canandaigua","c":"United States","y":42.8607,"x":-77.3183},{"n":"Merriam","c":"United States","y":39.0186,"x":-94.6933},{"n":"Jandaira","c":"Brazil","y":-11.5639,"x":-37.7839},{"n":"Sao Pedro do Ivai","c":"Brazil","y":-23.865,"x":-51.8558},{"n":"Andacollo","c":"Chile","y":-30.2167,"x":-71.0833},{"n":"Olbernhau","c":"Germany","y":50.6667,"x":13.3333},{"n":"Guilherand","c":"France","y":44.9344,"x":4.8747},{"n":"Altamira do Maranhao","c":"Brazil","y":-4.165,"x":-45.47},{"n":"Lower Burrell","c":"United States","y":40.5818,"x":-79.7141},{"n":"Iapu","c":"Brazil","y":-19.4369,"x":-42.2178},{"n":"Valley Center","c":"United States","y":33.233,"x":-117.0157},{"n":"Nova Ubirata","c":"Brazil","y":-12.9908,"x":-55.255},{"n":"Brotas de Macaubas","c":"Brazil","y":-11.9989,"x":-42.6258},{"n":"East Hanover","c":"United States","y":40.8192,"x":-74.3638},{"n":"Sigatoka","c":"Fiji","y":-18.15,"x":177.5},{"n":"Silverton","c":"United States","y":45.0031,"x":-122.7809},{"n":"Villa La Angostura","c":"Argentina","y":-40.7616,"x":-71.6448},{"n":"Wahpeton","c":"United States","y":46.2722,"x":-96.6118},{"n":"Bolivar","c":"United States","y":37.6057,"x":-93.4174},{"n":"Storm Lake","c":"United States","y":42.6431,"x":-95.1969},{"n":"Costesti","c":"Moldova","y":46.8678,"x":28.8022},{"n":"Onna","c":"Japan","y":26.4975,"x":127.8536},{"n":"Thouare-sur-Loire","c":"France","y":47.2675,"x":-1.4406},{"n":"Gemona del Friuli","c":"Italy","y":46.2833,"x":13.1333},{"n":"Biganos","c":"France","y":44.6442,"x":-0.9783},{"n":"Rostraver","c":"United States","y":40.1686,"x":-79.8086},{"n":"Galimuyod","c":"Philippines","y":17.1833,"x":120.4667},{"n":"Sosnovka","c":"Russia","y":56.25,"x":51.2833},{"n":"Obuse","c":"Japan","y":36.6978,"x":138.3122},{"n":"Santana do Mundau","c":"Brazil","y":-9.1678,"x":-36.2219},{"n":"Et Tira","c":"Israel","y":32.2328,"x":34.9503},{"n":"Urdorf","c":"Switzerland","y":47.3867,"x":8.4278},{"n":"Pingtouchuanxiang","c":"China","y":35.8763,"x":105.3241},{"n":"Lake Grove","c":"United States","y":40.8586,"x":-73.1168},{"n":"Itzer","c":"Morocco","y":32.8808,"x":-5.0542},{"n":"Igaratinga","c":"Brazil","y":-19.955,"x":-44.7089},{"n":"Moss Bluff","c":"United States","y":30.3039,"x":-93.2051},{"n":"Nieder-Olm","c":"Germany","y":49.9083,"x":8.2028},{"n":"Young","c":"Australia","y":-34.3,"x":148.3},{"n":"Norwell","c":"United States","y":42.1608,"x":-70.8177},{"n":"Shalushka","c":"Russia","y":43.5261,"x":43.5594},{"n":"Ponte Serrada","c":"Brazil","y":-26.8719,"x":-52.0158},{"n":"Grosse Pointe Park","c":"United States","y":42.3794,"x":-82.9288},{"n":"Sao Goncalo do Rio Abaixo","c":"Brazil","y":-19.8258,"x":-43.3619},{"n":"Afonso Bezerra","c":"Brazil","y":-5.4978,"x":-36.5058},{"n":"Schleusingen","c":"Germany","y":50.5117,"x":10.7506},{"n":"Grand Haven","c":"United States","y":43.0553,"x":-86.2201},{"n":"Snodland","c":"United Kingdom","y":51.328,"x":0.4467},{"n":"Borovsk","c":"Russia","y":55.2,"x":36.4833},{"n":"Igarape Grande","c":"Brazil","y":-4.585,"x":-44.8528},{"n":"Dek'emhare","c":"Eritrea","y":15.07,"x":39.0475},{"n":"Hakone","c":"Japan","y":35.1894,"x":139.0264},{"n":"Two Rivers","c":"United States","y":44.1564,"x":-87.5824},{"n":"Botupora","c":"Brazil","y":-13.3819,"x":-42.5228},{"n":"Gleisdorf","c":"Austria","y":47.1039,"x":15.7083},{"n":"Martinengo","c":"Italy","y":45.5704,"x":9.7674},{"n":"Methil","c":"United Kingdom","y":56.1844,"x":-3.0223},{"n":"Siano","c":"Italy","y":40.8025,"x":14.6944},{"n":"Jafra","c":"Morocco","y":31.5145,"x":-8.7555},{"n":"Mossley","c":"United Kingdom","y":53.5147,"x":-2.0387},{"n":"Draganesti-Olt","c":"Romania","y":44.1697,"x":24.53},{"n":"Zhydachiv","c":"Ukraine","y":49.3833,"x":24.1333},{"n":"Dobbs Ferry","c":"United States","y":41.0127,"x":-73.8698},{"n":"Ruthen","c":"Germany","y":51.4933,"x":8.4333},{"n":"Locate di Triulzi","c":"Italy","y":45.35,"x":9.2167},{"n":"Volkermarkt","c":"Austria","y":46.6622,"x":14.6344},{"n":"Chiltiupan","c":"El Salvador","y":13.5833,"x":-89.4667},{"n":"Grezzana","c":"Italy","y":45.5167,"x":11.0167},{"n":"Bernex","c":"Switzerland","y":46.1784,"x":6.0684},{"n":"Bueno Brandao","c":"Brazil","y":-22.4408,"x":-46.3508},{"n":"Zasechnoye","c":"Russia","y":53.1142,"x":45.0601},{"n":"Cori","c":"Italy","y":41.65,"x":12.9167},{"n":"Estiva Gerbi","c":"Brazil","y":-22.2708,"x":-46.945},{"n":"Warman","c":"Canada","y":52.3219,"x":-106.5842},{"n":"Karabash","c":"Russia","y":55.4833,"x":60.2},{"n":"Kingaroy","c":"Australia","y":-26.5333,"x":151.8333},{"n":"Kiskunmajsa","c":"Hungary","y":46.4922,"x":19.7367},{"n":"Celano","c":"Italy","y":42.0843,"x":13.5478},{"n":"Zumaia","c":"Spain","y":43.2972,"x":-2.2569},{"n":"Xudat","c":"Azerbaijan","y":41.6339,"x":48.6772},{"n":"Akyaka","c":"Turkey","y":40.7397,"x":43.6253},{"n":"Grove","c":"Spain","y":42.494,"x":-8.865},{"n":"Montecchio Emilia","c":"Italy","y":44.6986,"x":10.4486},{"n":"San Felice sul Panaro","c":"Italy","y":44.8393,"x":11.1413},{"n":"Knowle","c":"United Kingdom","y":52.3881,"x":-1.7318},{"n":"Verkhniy Tagil","c":"Russia","y":57.3833,"x":59.9333},{"n":"Barberino di Mugello","c":"Italy","y":44,"x":11.2333},{"n":"Munhall","c":"United States","y":40.3937,"x":-79.9004},{"n":"Wiener Neudorf","c":"Austria","y":48.0856,"x":16.3131},{"n":"Texcatepec","c":"Mexico","y":20.5833,"x":-98.3667},{"n":"Los Corrales de Buelna","c":"Spain","y":43.2617,"x":-4.0653},{"n":"Ma'ai","c":"China","y":34.5937,"x":102.4814},{"n":"Altensteig","c":"Germany","y":48.5864,"x":8.6047},{"n":"Solymar","c":"Hungary","y":47.591,"x":18.929},{"n":"Lake Morton-Berrydale","c":"United States","y":47.3325,"x":-122.1032},{"n":"La Tuque","c":"Canada","y":48.0652,"x":-74.0528},{"n":"Norwich","c":"Canada","y":42.9833,"x":-80.6},{"n":"Bocaiuva do Sul","c":"Brazil","y":-25.2058,"x":-49.115},{"n":"Loyalsock","c":"United States","y":41.2743,"x":-76.984},{"n":"Shagonar","c":"Russia","y":51.5333,"x":92.9},{"n":"Browns Mills","c":"United States","y":39.9737,"x":-74.5689},{"n":"Cristuru Secuiesc","c":"Romania","y":46.2917,"x":25.0353},{"n":"Guymon","c":"United States","y":36.6901,"x":-101.4776},{"n":"Alberobello","c":"Italy","y":40.7841,"x":17.2375},{"n":"Phibun Mangsahan","c":"Thailand","y":15.2482,"x":105.2296},{"n":"Meaford","c":"Canada","y":44.58,"x":-80.73},{"n":"La Puebla de Cazalla","c":"Spain","y":37.2222,"x":-5.3125},{"n":"Al Atarib","c":"Syria","y":36.1389,"x":36.83},{"n":"Pike Creek Valley","c":"United States","y":39.7296,"x":-75.6993},{"n":"Sussen","c":"Germany","y":48.6797,"x":9.7575},{"n":"Caracol","c":"Brazil","y":-9.2789,"x":-43.33},{"n":"Oued Amlil","c":"Morocco","y":34.2,"x":-4.2833},{"n":"Estanzuela","c":"Guatemala","y":14.9979,"x":-89.5705},{"n":"Marck","c":"France","y":50.9481,"x":1.9503},{"n":"Mondeville","c":"France","y":49.1739,"x":-0.3211},{"n":"Pompton Lakes","c":"United States","y":41.0024,"x":-74.2859},{"n":"Millsboro","c":"United States","y":38.593,"x":-75.3118},{"n":"Pedro de Toledo","c":"Brazil","y":-24.275,"x":-47.2328},{"n":"General Salgado","c":"Brazil","y":-20.6478,"x":-50.3608},{"n":"Phrai Bueng","c":"Thailand","y":14.749,"x":104.3574},{"n":"Kings Mountain","c":"United States","y":35.2348,"x":-81.3501},{"n":"Prachatice","c":"Czechia","y":49.013,"x":13.9975},{"n":"Sussex","c":"United States","y":43.1341,"x":-88.2232},{"n":"El Tarra","c":"Colombia","y":8.5756,"x":-73.0944},{"n":"Sao Tiago","c":"Brazil","y":-20.9128,"x":-44.5089},{"n":"Schkopau","c":"Germany","y":51.3833,"x":11.9667},{"n":"Rokytne","c":"Ukraine","y":49.6897,"x":30.4751},{"n":"La Palma del Condado","c":"Spain","y":37.3842,"x":-6.5517},{"n":"Saint-Laurent-de-la-Salanque","c":"France","y":42.7736,"x":2.9908},{"n":"Rio do Fogo","c":"Brazil","y":-5.2728,"x":-35.3828},{"n":"Lomazzo","c":"Italy","y":45.7,"x":9.0333},{"n":"Keila","c":"Estonia","y":59.3081,"x":24.4264},{"n":"Ballston","c":"United States","y":42.9542,"x":-73.8794},{"n":"Adjala-Tosorontio","c":"Canada","y":44.1333,"x":-79.9333},{"n":"Pearsall","c":"United States","y":28.8885,"x":-99.0988},{"n":"Medesano","c":"Italy","y":44.7568,"x":10.1403},{"n":"Barmstedt","c":"Germany","y":53.7833,"x":9.7667},{"n":"Ocean City","c":"United States","y":39.2682,"x":-74.6019},{"n":"Astorga","c":"Spain","y":42.4589,"x":-6.0633},{"n":"Matsuda-soryo","c":"Japan","y":35.3483,"x":139.1394},{"n":"Chambly","c":"France","y":49.1667,"x":2.2481},{"n":"Punitaqui","c":"Chile","y":-30.9,"x":-71.2667},{"n":"Pontchateau","c":"France","y":47.4369,"x":-2.0878},{"n":"Wooburn","c":"United Kingdom","y":51.581,"x":-0.691},{"n":"Neuhof","c":"Germany","y":50.4333,"x":9.6167},{"n":"Hurzuf","c":"Ukraine","y":44.5528,"x":34.2875},{"n":"Neman","c":"Russia","y":55.0333,"x":22.0333},{"n":"Salo","c":"Italy","y":45.6,"x":10.5333},{"n":"Pont-Saint-Esprit","c":"France","y":44.2564,"x":4.6483},{"n":"Canelli","c":"Italy","y":44.7208,"x":8.2928},{"n":"Springbok","c":"South Africa","y":-29.6667,"x":17.8833},{"n":"West Point","c":"United States","y":41.122,"x":-112.0994},{"n":"Gonzales","c":"United States","y":30.2132,"x":-90.9234},{"n":"Sultanhani","c":"Turkey","y":38.2481,"x":33.5465},{"n":"Sidi Namane","c":"Algeria","y":36.7581,"x":3.9839},{"n":"Liberty Lake","c":"United States","y":47.6687,"x":-117.1032},{"n":"Bad Iburg","c":"Germany","y":52.1592,"x":8.0472},{"n":"Earlestown","c":"United Kingdom","y":53.45,"x":-2.65},{"n":"Ardrossan","c":"United Kingdom","y":55.6432,"x":-4.8097},{"n":"Chalco","c":"United States","y":41.1817,"x":-96.1353},{"n":"Herxheim","c":"Germany","y":49.1469,"x":8.22},{"n":"Aylesford","c":"United Kingdom","y":51.3033,"x":0.4796},{"n":"Zwettl","c":"Austria","y":48.6033,"x":15.1689},{"n":"Donzdorf","c":"Germany","y":48.6833,"x":9.8167},{"n":"Boizenburg","c":"Germany","y":53.3743,"x":10.7231},{"n":"Arceburgo","c":"Brazil","y":-21.3639,"x":-46.94},{"n":"Ripoll","c":"Spain","y":42.2011,"x":2.1903},{"n":"Elhovo","c":"Bulgaria","y":42.1719,"x":26.5658},{"n":"Engen","c":"Germany","y":47.8528,"x":8.7714},{"n":"Gerzat","c":"France","y":45.8258,"x":3.1447},{"n":"Pelissanne","c":"France","y":43.6314,"x":5.1506},{"n":"Willistown","c":"United States","y":40.001,"x":-75.4915},{"n":"Desborough","c":"United Kingdom","y":52.4398,"x":-0.8172},{"n":"Saddlebrooke","c":"United States","y":32.5385,"x":-110.8582},{"n":"Isselburg","c":"Germany","y":51.8331,"x":6.4667},{"n":"Heath","c":"United States","y":40.0241,"x":-82.4412},{"n":"Hamilton Township","c":"Canada","y":44.054,"x":-78.2164},{"n":"Lagoa do Mato","c":"Brazil","y":-6.0469,"x":-43.5258},{"n":"Kandry","c":"Russia","y":54.5667,"x":54.1167},{"n":"Kaufering","c":"Germany","y":48.0833,"x":10.8833},{"n":"Serido","c":"Brazil","y":-6.9339,"x":-36.4019},{"n":"Villers-la-Ville","c":"Belgium","y":50.5833,"x":4.5333},{"n":"Pirauba","c":"Brazil","y":-21.2758,"x":-43.0258},{"n":"Trabia","c":"Italy","y":38,"x":13.65},{"n":"Cacimbinhas","c":"Brazil","y":-9.4,"x":-36.99},{"n":"Guantingzhan","c":"China","y":40.2492,"x":115.578},{"n":"Cadelbosco di Sopra","c":"Italy","y":44.7667,"x":10.6},{"n":"Alella","c":"Spain","y":41.4953,"x":2.2958},{"n":"Sanjiangkou","c":"China","y":24.7579,"x":104.5901},{"n":"Seberi","c":"Brazil","y":-27.4778,"x":-53.4028},{"n":"Ilvesheim","c":"Germany","y":49.4725,"x":8.5675},{"n":"Villers-Cotterets","c":"France","y":49.2531,"x":3.0903},{"n":"Massa Lombarda","c":"Italy","y":44.45,"x":11.8167},{"n":"Alburquerque","c":"Philippines","y":9.6104,"x":123.9549},{"n":"Malente","c":"Germany","y":54.1667,"x":10.55},{"n":"Casaluce","c":"Italy","y":41.002,"x":14.1983},{"n":"Montignoso","c":"Italy","y":44.0167,"x":10.1667},{"n":"Figuig","c":"Morocco","y":32.1167,"x":-1.2269},{"n":"Vermillion","c":"United States","y":42.7811,"x":-96.9255},{"n":"Weinbohla","c":"Germany","y":51.1667,"x":13.5667},{"n":"Stephanskirchen","c":"Germany","y":47.85,"x":12.1833},{"n":"Wantage","c":"United States","y":41.2431,"x":-74.6258},{"n":"Westtown","c":"United States","y":39.9417,"x":-75.5565},{"n":"Novgorodskoye","c":"Ukraine","y":48.3156,"x":37.8839},{"n":"Hagondange","c":"France","y":49.2542,"x":6.1681},{"n":"Kisujszallas","c":"Hungary","y":47.2167,"x":20.7667},{"n":"Pau Brasil","c":"Brazil","y":-15.4639,"x":-39.6508},{"n":"Prudente de Morais","c":"Brazil","y":-19.4819,"x":-44.155},{"n":"Kamen'-Rybolov","c":"Russia","y":44.7667,"x":132.0167},{"n":"Bobrovytsia","c":"Ukraine","y":50.7333,"x":31.3833},{"n":"Itarana","c":"Brazil","y":-19.8739,"x":-40.875},{"n":"Bobrynets","c":"Ukraine","y":48.0578,"x":32.1581},{"n":"Sagarejo","c":"Georgia","y":41.7333,"x":45.3333},{"n":"Erstein","c":"France","y":48.4219,"x":7.6611},{"n":"Ville-la-Grand","c":"France","y":46.2022,"x":6.2469},{"n":"Barano d'Ischia","c":"Italy","y":40.7167,"x":13.9167},{"n":"Alberique","c":"Spain","y":39.1167,"x":-0.5211},{"n":"Le Cres","c":"France","y":43.6472,"x":3.9392},{"n":"Pocono","c":"United States","y":41.0612,"x":-75.3102},{"n":"Ban Lueak","c":"Thailand","y":13.7065,"x":99.8902},{"n":"Goldbach","c":"Germany","y":49.9889,"x":9.1864},{"n":"Yungay","c":"Chile","y":-37.1194,"x":-72.0189},{"n":"Braine-le-Chateau","c":"Belgium","y":50.6833,"x":4.2667},{"n":"Sao Bento do Sapucai","c":"Brazil","y":-22.6889,"x":-45.7308},{"n":"Cusseta","c":"United States","y":32.347,"x":-84.787},{"n":"San Maurizio Canavese","c":"Italy","y":45.2171,"x":7.6305},{"n":"Borgloon","c":"Belgium","y":50.8022,"x":5.3433},{"n":"Surazh","c":"Russia","y":53.0167,"x":32.4},{"n":"Tenango del Aire","c":"Mexico","y":19.1575,"x":-98.8581},{"n":"Felton","c":"United Kingdom","y":51.51,"x":-2.574},{"n":"Walker Mill","c":"United States","y":38.8754,"x":-76.8862},{"n":"Feyzin","c":"France","y":45.6728,"x":4.8589},{"n":"Dourdan","c":"France","y":48.5289,"x":2.0108},{"n":"Tenente Ananias","c":"Brazil","y":-6.465,"x":-38.18},{"n":"Ramacca","c":"Italy","y":37.3833,"x":14.7},{"n":"Davos","c":"Switzerland","y":46.8091,"x":9.8398},{"n":"Elkins","c":"United States","y":38.9237,"x":-79.854},{"n":"Halfway","c":"United States","y":39.6163,"x":-77.77},{"n":"Pua","c":"Thailand","y":19.1799,"x":100.9089},{"n":"Nivala","c":"Finland","y":63.9292,"x":24.9778},{"n":"Bofete","c":"Brazil","y":-23.1022,"x":-48.2578},{"n":"San Juanito de Escobedo","c":"Mexico","y":20.8,"x":-104},{"n":"Langenzenn","c":"Germany","y":49.4944,"x":10.7947},{"n":"Boekel","c":"Netherlands","y":51.6011,"x":5.6742},{"n":"Court-Saint-Etienne","c":"Belgium","y":50.6333,"x":4.5667},{"n":"Dayr as Sanquriyah","c":"Egypt","y":28.4833,"x":30.65},{"n":"Itapebi","c":"Brazil","y":-15.9508,"x":-39.5339},{"n":"Mesyagutovo","c":"Russia","y":55.5322,"x":58.255},{"n":"Krzeszowice","c":"Poland","y":50.1333,"x":19.6333},{"n":"Carnaubais","c":"Brazil","y":-5.3408,"x":-36.8328},{"n":"Kangaroo Flat","c":"Australia","y":-36.8,"x":144.25},{"n":"Beni Abbes","c":"Algeria","y":30.08,"x":-2.1},{"n":"Kursenai","c":"Lithuania","y":55.9979,"x":22.9415},{"n":"Le Locle","c":"Switzerland","y":47.0532,"x":6.7482},{"n":"Kranuan","c":"Thailand","y":16.7081,"x":103.0811},{"n":"Soquel","c":"United States","y":36.9978,"x":-121.9482},{"n":"Mogotes","c":"Colombia","y":6.4764,"x":-72.9703},{"n":"Lollar","c":"Germany","y":50.6497,"x":8.7044},{"n":"Scartho","c":"United Kingdom","y":53.5399,"x":-0.0926},{"n":"Koronowo","c":"Poland","y":53.3137,"x":17.937},{"n":"Sprendlingen","c":"Germany","y":50.0808,"x":8.5186},{"n":"Tosagua","c":"Ecuador","y":-0.7864,"x":-80.2342},{"n":"Amioun","c":"Lebanon","y":34.2994,"x":35.8097},{"n":"Holbeach","c":"United Kingdom","y":52.8037,"x":0.0154},{"n":"St. Clements","c":"Canada","y":50.2689,"x":-96.6742},{"n":"Khorol","c":"Russia","y":44.425,"x":132.075},{"n":"Santa Maria de Itabira","c":"Brazil","y":-19.4489,"x":-43.1128},{"n":"Omurtag","c":"Bulgaria","y":43.1072,"x":26.4192},{"n":"Fort Meade","c":"United States","y":39.1058,"x":-76.7438},{"n":"Sam Ko","c":"Thailand","y":14.6013,"x":100.2602},{"n":"La Escala","c":"Spain","y":42.1136,"x":3.135},{"n":"Serris","c":"France","y":48.8564,"x":2.7861},{"n":"Apiuna","c":"Brazil","y":-27.0358,"x":-49.39},{"n":"Saint-Amable","c":"Canada","y":45.65,"x":-73.3},{"n":"Weyburn","c":"Canada","y":49.6611,"x":-103.8525},{"n":"Strasshof an der Nordbahn","c":"Austria","y":48.3194,"x":16.6475},{"n":"Lauterach","c":"Austria","y":47.4772,"x":9.7314},{"n":"Itri","c":"Italy","y":41.2833,"x":13.5333},{"n":"Tacima","c":"Brazil","y":-6.4878,"x":-35.6369},{"n":"Beclean","c":"Romania","y":47.1797,"x":24.1797},{"n":"Lake Monticello","c":"United States","y":37.921,"x":-78.3295},{"n":"Jordania","c":"Brazil","y":-15.9,"x":-40.1778},{"n":"Lowes Island","c":"United States","y":39.0471,"x":-77.3524},{"n":"Sarmiento","c":"Argentina","y":-45.6,"x":-69.0833},{"n":"Manabo","c":"Philippines","y":17.4331,"x":120.7048},{"n":"West Caldwell","c":"United States","y":40.8489,"x":-74.2971},{"n":"Bacliff","c":"United States","y":29.5077,"x":-94.988},{"n":"Erlenbach am Main","c":"Germany","y":49.8039,"x":9.1639},{"n":"Essex Junction","c":"United States","y":44.4902,"x":-73.114},{"n":"Grigiskes","c":"Lithuania","y":54.6694,"x":25.0944},{"n":"Reguengos de Monsaraz","c":"Portugal","y":38.4167,"x":-7.5333},{"n":"Raeren","c":"Belgium","y":50.6833,"x":6.1167},{"n":"Manevychi","c":"Ukraine","y":51.2925,"x":25.5503},{"n":"Amatura","c":"Brazil","y":-3.3639,"x":-68.1978},{"n":"Celldomolk","c":"Hungary","y":47.2575,"x":17.1525},{"n":"Ngorongoro","c":"Tanzania","y":-3.2496,"x":35.52},{"n":"Ferros","c":"Brazil","y":-19.2319,"x":-43.0228},{"n":"Ban Ko","c":"Thailand","y":13.6486,"x":100.0063},{"n":"Hrebinka","c":"Ukraine","y":50.118,"x":32.4396},{"n":"Kitee","c":"Finland","y":62.0986,"x":30.1375},{"n":"Bestwig","c":"Germany","y":51.3667,"x":8.4},{"n":"Winchendon","c":"United States","y":42.6667,"x":-72.0487},{"n":"Lavaur","c":"France","y":43.6989,"x":1.8189},{"n":"Pleasant View","c":"United States","y":41.3249,"x":-112.0011},{"n":"Wasilla","c":"United States","y":61.577,"x":-149.466},{"n":"Orsta","c":"Norway","y":62.2003,"x":6.1322},{"n":"Sharg`un","c":"Uzbekistan","y":38.46,"x":67.9669},{"n":"Xiaozui","c":"China","y":35.6912,"x":108.0779},{"n":"Forest","c":"United States","y":37.3728,"x":-79.2831},{"n":"Cantillana","c":"Spain","y":37.6,"x":-5.8167},{"n":"Baryshivka","c":"Ukraine","y":50.3703,"x":31.3286},{"n":"Maur","c":"Switzerland","y":47.3417,"x":8.6703},{"n":"Gaohucun","c":"China","y":28.3367,"x":120.2178},{"n":"South Dundas","c":"Canada","y":44.9167,"x":-75.2667},{"n":"Aberbargoed","c":"United Kingdom","y":51.6968,"x":-3.224},{"n":"Weeze","c":"Germany","y":51.6267,"x":6.1967},{"n":"Kingsteignton","c":"United Kingdom","y":50.5458,"x":-3.5962},{"n":"Rincao","c":"Brazil","y":-21.5869,"x":-48.0708},{"n":"Fiuggi","c":"Italy","y":41.8,"x":13.2167},{"n":"Pirapetinga","c":"Brazil","y":-21.6558,"x":-42.3458},{"n":"Itapitanga","c":"Brazil","y":-14.4228,"x":-39.565},{"n":"Sevilla","c":"Philippines","y":9.7,"x":124.05},{"n":"Diavata","c":"Greece","y":40.6883,"x":22.8583},{"n":"Imi Mokorn","c":"Morocco","y":30.1675,"x":-9.2322},{"n":"Zhatay","c":"Russia","y":62.1641,"x":129.8431},{"n":"Parnagua","c":"Brazil","y":-10.2269,"x":-44.6389},{"n":"Mae Ai","c":"Thailand","y":20.0296,"x":99.2847},{"n":"Braunsbedra","c":"Germany","y":51.2833,"x":11.9},{"n":"Khrystynivka","c":"Ukraine","y":48.8333,"x":29.9667},{"n":"River Forest","c":"United States","y":41.895,"x":-87.8194},{"n":"Randazzo","c":"Italy","y":37.8833,"x":14.95},{"n":"Ogano","c":"Japan","y":36.0172,"x":139.0086},{"n":"Fontaine-les-Dijon","c":"France","y":47.3433,"x":5.0192},{"n":"Soyaniquilpan","c":"Mexico","y":19.9892,"x":-99.4361},{"n":"Wang Sombun","c":"Thailand","y":13.3515,"x":102.1833},{"n":"Tecoh","c":"Mexico","y":20.7419,"x":-89.4744},{"n":"Kolno","c":"Poland","y":53.4106,"x":21.9339},{"n":"Pont-Audemer","c":"France","y":49.3542,"x":0.5139},{"n":"La Baneza","c":"Spain","y":42.2975,"x":-5.9017},{"n":"Villiersdorp","c":"South Africa","y":-33.9833,"x":19.2833},{"n":"Haigerloch","c":"Germany","y":48.3647,"x":8.805},{"n":"Cheval","c":"United States","y":28.1459,"x":-82.5185},{"n":"Ararenda","c":"Brazil","y":-4.7528,"x":-40.8328},{"n":"The Pinery","c":"United States","y":39.4462,"x":-104.7591},{"n":"Poiana Mare","c":"Romania","y":43.9127,"x":23.094},{"n":"Tiszafoldvar","c":"Hungary","y":46.9833,"x":20.25},{"n":"Juripiranga","c":"Brazil","y":-7.3728,"x":-35.2378},{"n":"Tezontepec","c":"Mexico","y":19.8833,"x":-98.8167},{"n":"Dali","c":"Cyprus","y":35.024,"x":33.4226},{"n":"Uzda","c":"Belarus","y":53.4661,"x":27.2244},{"n":"Panthersville","c":"United States","y":33.7059,"x":-84.2764},{"n":"Santo Domingo","c":"Colombia","y":6.4708,"x":-75.1658},{"n":"Tiszafured","c":"Hungary","y":47.619,"x":20.76},{"n":"Smithville","c":"United States","y":39.3921,"x":-94.5748},{"n":"Mount Kisco","c":"United States","y":41.2018,"x":-73.7282},{"n":"Guaraci","c":"Brazil","y":-20.4986,"x":-48.9447},{"n":"Orlu","c":"Nigeria","y":5.7837,"x":7.0333},{"n":"Douar Bouchfaa","c":"Morocco","y":34.1014,"x":-4.2939},{"n":"Sierra Madre","c":"United States","y":34.1687,"x":-118.0504},{"n":"Bananal","c":"Brazil","y":-22.6839,"x":-44.3228},{"n":"Lower Saucon","c":"United States","y":40.5881,"x":-75.3188},{"n":"Totowa","c":"United States","y":40.9039,"x":-74.2213},{"n":"Zuchwil","c":"Switzerland","y":47.2056,"x":7.5597},{"n":"Messstetten","c":"Germany","y":48.1806,"x":8.9625},{"n":"Totolapan","c":"Mexico","y":18.9869,"x":-98.9197},{"n":"Blandford Forum","c":"United Kingdom","y":50.856,"x":-2.1648},{"n":"Merces","c":"Brazil","y":-21.1939,"x":-43.3408},{"n":"Bleicherode","c":"Germany","y":51.4167,"x":10.5667},{"n":"Marasesti","c":"Romania","y":45.88,"x":27.23},{"n":"Demmin","c":"Germany","y":53.905,"x":13.0439},{"n":"Hochdorf","c":"Switzerland","y":47.1664,"x":8.2889},{"n":"Abram","c":"United Kingdom","y":53.508,"x":-2.588},{"n":"Mery-sur-Oise","c":"France","y":49.0636,"x":2.1864},{"n":"Le Taillan-Medoc","c":"France","y":44.9044,"x":-0.6697},{"n":"Oloron-Sainte-Marie","c":"France","y":43.1942,"x":-0.6067},{"n":"Diedorf","c":"Germany","y":48.35,"x":10.7667},{"n":"Urlati","c":"Romania","y":44.9911,"x":26.2306},{"n":"Wald-Michelbach","c":"Germany","y":49.5724,"x":8.8243},{"n":"San German","c":"Puerto Rico","y":18.0827,"x":-67.046},{"n":"Magny-le-Hongre","c":"France","y":48.8631,"x":2.8136},{"n":"Pencoed","c":"United Kingdom","y":51.5228,"x":-3.5047},{"n":"Castleton","c":"United Kingdom","y":53.5907,"x":-2.1737},{"n":"Wittelsheim","c":"France","y":47.8053,"x":7.2375},{"n":"Hanson","c":"United States","y":42.0558,"x":-70.8723},{"n":"Orono","c":"United States","y":44.8867,"x":-68.7166},{"n":"Yeghvard","c":"Armenia","y":40.3167,"x":44.4833},{"n":"Birkenfeld","c":"Germany","y":48.8697,"x":8.6361},{"n":"Vigonovo","c":"Italy","y":45.3852,"x":12.0074},{"n":"Foum Jam'a","c":"Morocco","y":31.96,"x":-6.98},{"n":"Tanant","c":"Morocco","y":31.8667,"x":-6.95},{"n":"Otsuchi","c":"Japan","y":39.3667,"x":141.9},{"n":"Kongen","c":"Germany","y":48.6819,"x":9.3667},{"n":"Yuzhno-Sukhokumsk","c":"Russia","y":44.6667,"x":45.65},{"n":"Rackeve","c":"Hungary","y":47.1608,"x":18.9456},{"n":"Kranenburg","c":"Germany","y":51.7897,"x":6.0072},{"n":"Tlachichilco","c":"Mexico","y":20.6217,"x":-98.1994},{"n":"North Branch","c":"United States","y":45.5137,"x":-92.9601},{"n":"Rebola","c":"Equatorial Guinea","y":3.7192,"x":8.8531},{"n":"Lerici","c":"Italy","y":44.0763,"x":9.9111},{"n":"Winnemucca","c":"United States","y":40.9645,"x":-117.7247},{"n":"Castle Pines","c":"United States","y":39.4625,"x":-104.8706},{"n":"Iwai","c":"Japan","y":35.5758,"x":134.3319},{"n":"Pintadas","c":"Brazil","y":-11.8128,"x":-39.9089},{"n":"Shannon","c":"Ireland","y":52.7137,"x":-8.8686},{"n":"Arbaa Sahel","c":"Morocco","y":29.5993,"x":-9.877},{"n":"Goianapolis","c":"Brazil","y":-16.5108,"x":-49.0239},{"n":"Nizza Monferrato","c":"Italy","y":44.7747,"x":8.355},{"n":"Taouloukoult","c":"Morocco","y":31.2167,"x":-9.0833},{"n":"Burr Ridge","c":"United States","y":41.7485,"x":-87.9198},{"n":"Galena Park","c":"United States","y":29.7452,"x":-95.2333},{"n":"L'Ile-Perrot","c":"Canada","y":45.3833,"x":-73.95},{"n":"Notre-Dame-de-l'Ile-Perrot","c":"Canada","y":45.3667,"x":-73.9333},{"n":"Felsberg","c":"Germany","y":51.1346,"x":9.4215},{"n":"Tangerhutte","c":"Germany","y":52.4333,"x":11.8},{"n":"Maynard","c":"United States","y":42.4264,"x":-71.4561},{"n":"Williams Lake","c":"Canada","y":52.1294,"x":-122.1383},{"n":"Bischofshofen","c":"Austria","y":47.4172,"x":13.2194},{"n":"Quincy-sous-Senart","c":"France","y":48.6711,"x":2.5339},{"n":"Ludington","c":"United States","y":43.9573,"x":-86.4434},{"n":"Santa Catarina Ayotzingo","c":"Mexico","y":19.2647,"x":-98.8975},{"n":"Vanzago","c":"Italy","y":45.5333,"x":9},{"n":"Sao Luis do Paraitinga","c":"Brazil","y":-23.2219,"x":-45.31},{"n":"Aigle","c":"Switzerland","y":46.3173,"x":6.9646},{"n":"Nadezhda","c":"Russia","y":45.0448,"x":42.1104},{"n":"Coriano","c":"Italy","y":43.9691,"x":12.6006},{"n":"Orthez","c":"France","y":43.4881,"x":-0.7708},{"n":"Bellmead","c":"United States","y":31.6025,"x":-97.0896},{"n":"Mount Evelyn","c":"Australia","y":-37.7833,"x":145.3833},{"n":"Caslav","c":"Czechia","y":49.911,"x":15.3898},{"n":"Southwater","c":"United Kingdom","y":51.0238,"x":-0.3526},{"n":"Elliot Lake","c":"Canada","y":46.3833,"x":-82.65},{"n":"Aguadilla","c":"Puerto Rico","y":18.4382,"x":-67.1536},{"n":"Praskoveya","c":"Russia","y":44.7444,"x":44.2031},{"n":"Fontoura Xavier","c":"Brazil","y":-28.9828,"x":-52.3458},{"n":"Bourg-de-Peage","c":"France","y":45.0378,"x":5.05},{"n":"Muskegon Heights","c":"United States","y":43.2024,"x":-86.242},{"n":"Pola de Lena","c":"Spain","y":43.1583,"x":-5.8292},{"n":"Balderton","c":"United Kingdom","y":53.0549,"x":-0.7727},{"n":"Cedral","c":"Brazil","y":-2,"x":-44.5358},{"n":"Sao Bras de Alportel","c":"Portugal","y":37.15,"x":-7.8833},{"n":"Mapleton","c":"United States","y":40.1188,"x":-111.5742},{"n":"Fruitland Park","c":"United States","y":28.86,"x":-81.919},{"n":"Murtosa","c":"Portugal","y":40.7369,"x":-8.6386},{"n":"Juruaia","c":"Brazil","y":-21.2528,"x":-46.5769},{"n":"Tafalla","c":"Spain","y":42.5289,"x":-1.6736},{"n":"Ichnia","c":"Ukraine","y":50.85,"x":32.4},{"n":"Penarroya-Pueblonuevo","c":"Spain","y":38.3,"x":-5.2667},{"n":"Al Musayfirah","c":"Syria","y":32.6322,"x":36.3386},{"n":"Diessen am Ammersee","c":"Germany","y":47.95,"x":11.1},{"n":"Tamanar","c":"Morocco","y":31.0833,"x":-9.6756},{"n":"Arkadelphia","c":"United States","y":34.1255,"x":-93.0725},{"n":"Zavitinsk","c":"Russia","y":50.1167,"x":129.4333},{"n":"San Pablo Huixtepec","c":"Mexico","y":16.8167,"x":-96.7833},{"n":"Bondues","c":"France","y":50.7017,"x":3.0933},{"n":"Leognan","c":"France","y":44.7286,"x":-0.6008},{"n":"Waiuku","c":"New Zealand","y":-37.25,"x":174.7333},{"n":"Rochelle","c":"United States","y":41.9195,"x":-89.0632},{"n":"Abadou","c":"Morocco","y":31.5792,"x":-7.3131},{"n":"Gignac-la-Nerthe","c":"France","y":43.3932,"x":5.2356},{"n":"Gig Harbor","c":"United States","y":47.3353,"x":-122.5964},{"n":"Poirino","c":"Italy","y":44.9167,"x":7.85},{"n":"Bentley","c":"Australia","y":-32.001,"x":115.924},{"n":"Frodsham","c":"United Kingdom","y":53.295,"x":-2.725},{"n":"San Ricardo","c":"Philippines","y":9.9167,"x":125.2833},{"n":"Sidi Bousber","c":"Morocco","y":34.5628,"x":-5.3621},{"n":"Nakayama","c":"Japan","y":38.3333,"x":140.2831},{"n":"Garrucha","c":"Spain","y":37.1833,"x":-1.8167},{"n":"Villa Purificacion","c":"Mexico","y":19.7858,"x":-104.7078},{"n":"Umarizal","c":"Brazil","y":-5.9908,"x":-37.8139},{"n":"Dinagat","c":"Philippines","y":9.9561,"x":125.5933},{"n":"Salemi","c":"Italy","y":37.8167,"x":12.8},{"n":"Farmersville","c":"United States","y":36.3053,"x":-119.2083},{"n":"Brejolandia","c":"Brazil","y":-12.4828,"x":-43.9658},{"n":"Gateway","c":"United States","y":26.5804,"x":-81.7453},{"n":"Chenango","c":"United States","y":42.1954,"x":-75.8989},{"n":"Silea","c":"Italy","y":45.6547,"x":12.2967},{"n":"Cantley","c":"Canada","y":45.5667,"x":-75.7833},{"n":"Torre Santa Susanna","c":"Italy","y":40.4667,"x":17.7333},{"n":"Had Laaounate","c":"Morocco","y":32.6128,"x":-8.2256},{"n":"Raceland","c":"United States","y":29.7282,"x":-90.6362},{"n":"Jibou","c":"Romania","y":47.2583,"x":23.2583},{"n":"Gilbues","c":"Brazil","y":-9.8319,"x":-45.3439},{"n":"Sweet Home","c":"United States","y":44.4023,"x":-122.7028},{"n":"Ribeirao Claro","c":"Brazil","y":-23.1939,"x":-49.7578},{"n":"Inkerman","c":"Ukraine","y":44.6142,"x":33.6083},{"n":"Ickenham","c":"United Kingdom","y":51.558,"x":-0.4484},{"n":"Pariconia","c":"Brazil","y":-9.2539,"x":-38.0058},{"n":"DeForest","c":"United States","y":43.2301,"x":-89.3437},{"n":"Riedlingen","c":"Germany","y":48.1553,"x":9.4728},{"n":"Avon Park","c":"United States","y":27.5908,"x":-81.5081},{"n":"Hameenkyro","c":"Finland","y":61.6333,"x":23.2},{"n":"Agdz","c":"Morocco","y":30.6978,"x":-6.4497},{"n":"Cowra","c":"Australia","y":-33.8183,"x":148.6578},{"n":"Lichtenau","c":"Germany","y":51.6,"x":8.8833},{"n":"Rhosllanerchrugog","c":"United Kingdom","y":53.011,"x":-3.052},{"n":"Burgkirchen an der Alz","c":"Germany","y":48.1667,"x":12.7167},{"n":"Szigetvar","c":"Hungary","y":46.0481,"x":17.8125},{"n":"Nossen","c":"Germany","y":51.05,"x":13.3},{"n":"Gernsheim","c":"Germany","y":49.7517,"x":8.485},{"n":"Fondettes","c":"France","y":47.4042,"x":0.5989},{"n":"Itaueira","c":"Brazil","y":-7.6028,"x":-43.0258},{"n":"Aver-o-Mar","c":"Portugal","y":41.4039,"x":-8.769},{"n":"Branquinha","c":"Brazil","y":-9.2458,"x":-36.015},{"n":"Darling","c":"South Africa","y":-33.3833,"x":18.3833},{"n":"Merchweiler","c":"Germany","y":49.3603,"x":7.06},{"n":"Villacarrillo","c":"Spain","y":38.1,"x":-3.0833},{"n":"Hetane","c":"Morocco","y":32.8403,"x":-6.8025},{"n":"Van Wert","c":"United States","y":40.865,"x":-84.5879},{"n":"Almoloya","c":"Mexico","y":19.7,"x":-98.4},{"n":"Atessa","c":"Italy","y":42.0667,"x":14.45},{"n":"Otelu Rosu","c":"Romania","y":45.5333,"x":22.3667},{"n":"Rombas","c":"France","y":49.2494,"x":6.0947},{"n":"Recco","c":"Italy","y":44.3621,"x":9.1435},{"n":"Canelinha","c":"Brazil","y":-27.265,"x":-48.7678},{"n":"Orsova","c":"Romania","y":44.7253,"x":22.3961},{"n":"Baraclandia","c":"Brazil","y":-7.205,"x":-47.7569},{"n":"Amtar","c":"Morocco","y":35.2385,"x":-4.7943},{"n":"Faxinal dos Guedes","c":"Brazil","y":-26.8528,"x":-52.26},{"n":"Chuqung","c":"China","y":33.3743,"x":97.0637},{"n":"Zawyat Ahancal","c":"Morocco","y":31.8325,"x":-6.1056},{"n":"Newburn","c":"United Kingdom","y":54.983,"x":-1.743},{"n":"Roccapiemonte","c":"Italy","y":40.7617,"x":14.6933},{"n":"Sao Sebastiao do Maranhao","c":"Brazil","y":-18.0839,"x":-42.5708},{"n":"Borculo","c":"Netherlands","y":52.1167,"x":6.5167},{"n":"Waldkirchen","c":"Germany","y":48.7306,"x":13.6011},{"n":"Paimio","c":"Finland","y":60.4569,"x":22.6861},{"n":"Nelson","c":"Canada","y":49.5,"x":-117.2833},{"n":"Knin","c":"Croatia","y":44.0333,"x":16.1833},{"n":"Weilheim an der Teck","c":"Germany","y":48.615,"x":9.5386},{"n":"Tubara","c":"Colombia","y":10.8742,"x":-74.9786},{"n":"Querfurt","c":"Germany","y":51.3833,"x":11.6},{"n":"Hornell","c":"United States","y":42.3332,"x":-77.6633},{"n":"Pacific","c":"United States","y":38.4805,"x":-90.7541},{"n":"Huetor-Tajar","c":"Spain","y":37.1947,"x":-4.0464},{"n":"Trajano de Morais","c":"Brazil","y":-22.0628,"x":-42.0658},{"n":"Castrolibero","c":"Italy","y":39.3167,"x":16.2},{"n":"Altotting","c":"Germany","y":48.2264,"x":12.6759},{"n":"Mara Rosa","c":"Brazil","y":-14.0169,"x":-49.1778},{"n":"La Trinite","c":"France","y":43.7408,"x":7.3142},{"n":"Sosenskiy","c":"Russia","y":54.05,"x":35.9667},{"n":"Tnine Sidi Lyamani","c":"Morocco","y":35.37,"x":-5.97},{"n":"Vysokovsk","c":"Russia","y":56.3167,"x":36.55},{"n":"Bargas","c":"Spain","y":39.94,"x":-4.0194},{"n":"Ketchikan","c":"United States","y":55.3556,"x":-131.6698},{"n":"Alamosa","c":"United States","y":37.4751,"x":-105.8769},{"n":"Gudofredo Viana","c":"Brazil","y":-1.4028,"x":-45.78},{"n":"Kuiyibagecun","c":"China","y":38.0836,"x":77.1529},{"n":"Castelletto sopra Ticino","c":"Italy","y":45.7167,"x":8.6333},{"n":"Trets","c":"France","y":43.4469,"x":5.6858},{"n":"Toccoa","c":"United States","y":34.5807,"x":-83.3256},{"n":"Arraias","c":"Brazil","y":-12.9308,"x":-46.9378},{"n":"Souq Sebt Says","c":"Morocco","y":32.7772,"x":-8.6433},{"n":"Saks","c":"United States","y":33.7118,"x":-85.8536},{"n":"Vittuone","c":"Italy","y":45.4833,"x":8.95},{"n":"Conselve","c":"Italy","y":45.2333,"x":11.8667},{"n":"Kolarovo","c":"Slovakia","y":47.9153,"x":17.9972},{"n":"Mouans-Sartoux","c":"France","y":43.62,"x":6.9719},{"n":"Sucupira do Norte","c":"Brazil","y":-6.4769,"x":-44.1919},{"n":"Corcuera","c":"Philippines","y":12.8,"x":122.05},{"n":"Millington","c":"United States","y":35.335,"x":-89.8991},{"n":"Iretama","c":"Brazil","y":-24.4239,"x":-52.1058},{"n":"Cassa de la Selva","c":"Spain","y":41.8893,"x":2.8742},{"n":"Murata","c":"Japan","y":38.1186,"x":140.7225},{"n":"Lazaro Cardenas","c":"Mexico","y":28.3897,"x":-105.6236},{"n":"Birchington","c":"United Kingdom","y":51.377,"x":1.305},{"n":"Urrugne","c":"France","y":43.3622,"x":-1.7},{"n":"Ogdensburg","c":"United States","y":44.7088,"x":-75.4717},{"n":"Bobenheim-Roxheim","c":"Germany","y":49.5839,"x":8.3611},{"n":"Ain Zora","c":"Morocco","y":34.6575,"x":-3.5331},{"n":"Geneseo","c":"United States","y":42.8038,"x":-77.7783},{"n":"Wyomissing","c":"United States","y":40.3317,"x":-75.9703},{"n":"Jacinto Machado","c":"Brazil","y":-28.9969,"x":-49.7639},{"n":"Petal","c":"United States","y":31.3477,"x":-89.2359},{"n":"Lambton Shores","c":"Canada","y":43.1833,"x":-81.9},{"n":"Santiago Suchilquitongo","c":"Mexico","y":17.25,"x":-96.8833},{"n":"Isola Vicentina","c":"Italy","y":45.6333,"x":11.45},{"n":"Villeneuve-les-Maguelone","c":"France","y":43.5322,"x":3.8608},{"n":"Sao Joao","c":"Brazil","y":-25.8278,"x":-52.725},{"n":"Toundout","c":"Morocco","y":31.2647,"x":-6.5906},{"n":"Mokrisset","c":"Morocco","y":34.91,"x":-5.3536},{"n":"Hochberg","c":"Germany","y":49.7831,"x":9.8817},{"n":"Mussomeli","c":"Italy","y":37.5833,"x":13.75},{"n":"Monte Alegre do Piaui","c":"Brazil","y":-9.7539,"x":-45.3039},{"n":"Bovingdon","c":"United Kingdom","y":51.7231,"x":-0.5367},{"n":"Easttown","c":"United States","y":40.0281,"x":-75.4403},{"n":"Norvenich","c":"Germany","y":50.8,"x":6.65},{"n":"Monnickendam","c":"Netherlands","y":52.4547,"x":5.0353},{"n":"Ozieri","c":"Italy","y":40.5849,"x":9.0033},{"n":"Jablanica","c":"Bosnia And Herzegovina","y":43.6583,"x":17.7583},{"n":"Tourza","c":"Morocco","y":29.3885,"x":-9.9607},{"n":"Atchison","c":"United States","y":39.5625,"x":-95.1367},{"n":"Benito Juarez","c":"Argentina","y":-37.6833,"x":-59.8},{"n":"Escaudain","c":"France","y":50.3344,"x":3.3428},{"n":"Schalksmuhle","c":"Germany","y":51.2403,"x":7.5333},{"n":"Kimpese","c":"Congo (Kinshasa)","y":-5.55,"x":14.43},{"n":"Aerzen","c":"Germany","y":52.0496,"x":9.2638},{"n":"Peschanokopskoye","c":"Russia","y":46.1961,"x":41.0775},{"n":"Khilok","c":"Russia","y":51.35,"x":110.45},{"n":"Biskupiec","c":"Poland","y":53.8647,"x":20.9569},{"n":"Gommern","c":"Germany","y":52.0739,"x":11.8231},{"n":"Mold","c":"United Kingdom","y":53.166,"x":-3.133},{"n":"Malaya Vishera","c":"Russia","y":58.85,"x":32.2167},{"n":"Cajapio","c":"Brazil","y":-2.9667,"x":-44.8},{"n":"Bibbiano","c":"Italy","y":44.6629,"x":10.4739},{"n":"Pinto","c":"Chile","y":-36.7,"x":-71.9},{"n":"Strehaia","c":"Romania","y":44.6222,"x":23.1972},{"n":"Songo","c":"Angola","y":-7.3496,"x":14.85},{"n":"Highland City","c":"United States","y":27.9633,"x":-81.8781},{"n":"Ait Hani","c":"Morocco","y":31.7483,"x":-5.5735},{"n":"Saint-Gely-du-Fesc","c":"France","y":43.6922,"x":3.8061},{"n":"Mildenhall","c":"United Kingdom","y":52.3446,"x":0.5089},{"n":"Tarazona de Aragon","c":"Spain","y":41.9044,"x":-1.7225},{"n":"Santa Teresinha","c":"Brazil","y":-12.7719,"x":-39.5228},{"n":"Imst","c":"Austria","y":47.2394,"x":10.7381},{"n":"Virginopolis","c":"Brazil","y":-18.8228,"x":-42.7039},{"n":"Rignano Flaminio","c":"Italy","y":42.2,"x":12.4833},{"n":"Santa Margarita de Mombuy","c":"Spain","y":41.5756,"x":1.6092},{"n":"Porto Xavier","c":"Brazil","y":-27.9058,"x":-55.1378},{"n":"Ludlow","c":"United Kingdom","y":52.368,"x":-2.718},{"n":"Lavinia","c":"Brazil","y":-21.1683,"x":-51.0397},{"n":"Markt Indersdorf","c":"Germany","y":48.3667,"x":11.3667},{"n":"Kraluv Dvur","c":"Czechia","y":49.9499,"x":14.0345},{"n":"Canteras","c":"Spain","y":37.6121,"x":-1.0437},{"n":"Baran'","c":"Belarus","y":54.4833,"x":30.3333},{"n":"Pirpirituba","c":"Brazil","y":-6.78,"x":-35.4989},{"n":"Bohl-Iggelheim","c":"Germany","y":49.3714,"x":8.3086},{"n":"Scherpenzeel","c":"Netherlands","y":52.0667,"x":5.4833},{"n":"Barcs","c":"Hungary","y":45.96,"x":17.46},{"n":"Serra Caiada","c":"Brazil","y":-6.1058,"x":-35.7128},{"n":"Bangshang","c":"China","y":32.2575,"x":108.1119},{"n":"Bom Repouso","c":"Brazil","y":-22.4708,"x":-46.145},{"n":"Vorsma","c":"Russia","y":55.9833,"x":43.2667},{"n":"Morbach","c":"Germany","y":49.8167,"x":7.1167},{"n":"Castelnovo ne' Monti","c":"Italy","y":44.4333,"x":10.4},{"n":"Badia Polesine","c":"Italy","y":45.094,"x":11.4934},{"n":"Kapaa","c":"United States","y":22.091,"x":-159.352},{"n":"Bom Jesus da Serra","c":"Brazil","y":-14.3719,"x":-40.5039},{"n":"Doorn","c":"Netherlands","y":52.0333,"x":5.35},{"n":"Urgnano","c":"Italy","y":45.5972,"x":9.695},{"n":"Wyndham","c":"United States","y":37.6924,"x":-77.6123},{"n":"Montividiu","c":"Brazil","y":-17.4439,"x":-51.175},{"n":"Naganuma","c":"Japan","y":43.0103,"x":141.6953},{"n":"Ruppichteroth","c":"Germany","y":50.8456,"x":7.4881},{"n":"Sortland","c":"Norway","y":68.6962,"x":15.4117},{"n":"Borjomi","c":"Georgia","y":41.8389,"x":43.3792},{"n":"San Pedro La Laguna","c":"Guatemala","y":14.6918,"x":-91.273},{"n":"Ban Bang Phlap","c":"Thailand","y":13.9241,"x":100.4684},{"n":"Tilougguit","c":"Morocco","y":32.0333,"x":-6.2},{"n":"Jesenice","c":"Czechia","y":49.9682,"x":14.5136},{"n":"Greencastle","c":"United States","y":39.6431,"x":-86.8419},{"n":"Santa Teresa di Riva","c":"Italy","y":37.94,"x":15.3625},{"n":"Three Rivers","c":"United States","y":41.9465,"x":-85.6281},{"n":"Dombasle-sur-Meurthe","c":"France","y":48.625,"x":6.3497},{"n":"Hilter","c":"Germany","y":52.1357,"x":8.1471},{"n":"Armanaz","c":"Syria","y":36.0833,"x":36.5},{"n":"Timonium","c":"United States","y":39.4463,"x":-76.6083},{"n":"Chateaugiron","c":"France","y":48.0481,"x":-1.5031},{"n":"Wilkau-Hasslau","c":"Germany","y":50.6667,"x":12.5167},{"n":"East Cocalico","c":"United States","y":40.2242,"x":-76.1057},{"n":"Castalla","c":"Spain","y":38.5967,"x":-0.6708},{"n":"Grevesmuhlen","c":"Germany","y":53.8667,"x":11.1667},{"n":"Veitshochheim","c":"Germany","y":49.8328,"x":9.8817},{"n":"Partanna","c":"Italy","y":37.7289,"x":12.8894},{"n":"Frontera","c":"Argentina","y":-31.4278,"x":-62.0619},{"n":"Campi Salentina","c":"Italy","y":40.4,"x":18.0167},{"n":"Litomysl","c":"Czechia","y":49.8721,"x":16.3106},{"n":"Grossos","c":"Brazil","y":-4.98,"x":-37.155},{"n":"Torotoro","c":"Bolivia","y":-18.1339,"x":-65.7628},{"n":"Kamifurano","c":"Japan","y":43.4556,"x":142.4672},{"n":"Aragoiania","c":"Brazil","y":-16.9119,"x":-49.4508},{"n":"Ben N'Choud","c":"Algeria","y":36.8624,"x":3.8806},{"n":"Morro Bay","c":"United States","y":35.3681,"x":-120.8481},{"n":"Argeles-sur-Mer","c":"France","y":42.5461,"x":3.0239},{"n":"Bordj Okhriss","c":"Algeria","y":36.0833,"x":3.9667},{"n":"Trescore Balneario","c":"Italy","y":45.7,"x":9.85},{"n":"Cutro","c":"Italy","y":39.0342,"x":16.9819},{"n":"Zmeinogorsk","c":"Russia","y":51.158,"x":82.1874},{"n":"Ban Thung Khao Phuang","c":"Thailand","y":19.5342,"x":98.9621},{"n":"La Ferte-sous-Jouarre","c":"France","y":48.9492,"x":3.1294},{"n":"Dnestrovsc","c":"Moldova","y":46.6222,"x":29.9133},{"n":"Ironton","c":"United States","y":38.5319,"x":-82.6777},{"n":"Star","c":"United States","y":43.7013,"x":-116.4934},{"n":"Kauniainen","c":"Finland","y":60.2097,"x":24.7264},{"n":"Pasadena Hills","c":"United States","y":28.2881,"x":-82.238},{"n":"Ibiassuce","c":"Brazil","y":-14.2589,"x":-42.2569},{"n":"Acushnet","c":"United States","y":41.7139,"x":-70.9012},{"n":"Concordia Sagittaria","c":"Italy","y":45.7667,"x":12.85},{"n":"Arlesheim","c":"Switzerland","y":47.4922,"x":7.6203},{"n":"Bagnara Calabra","c":"Italy","y":38.2833,"x":15.8167},{"n":"Alcaudete","c":"Spain","y":37.5833,"x":-4.1},{"n":"Mapleton","c":"Canada","y":43.7358,"x":-80.6681},{"n":"Sidi Abdallah","c":"Morocco","y":32.5783,"x":-7.8108},{"n":"Sotkamo","c":"Finland","y":64.1333,"x":28.3833},{"n":"Alcora","c":"Spain","y":40.0667,"x":-0.2},{"n":"Sinaia","c":"Romania","y":45.35,"x":25.5514},{"n":"Appenweier","c":"Germany","y":48.5397,"x":7.98},{"n":"Sangao","c":"Brazil","y":-28.6378,"x":-49.1289},{"n":"Shumanay","c":"Uzbekistan","y":42.6386,"x":58.9172},{"n":"Villanueva de Arosa","c":"Spain","y":42.5628,"x":-8.8278},{"n":"Prakhon Chai","c":"Thailand","y":14.6058,"x":103.1208},{"n":"Topoloveni","c":"Romania","y":44.8069,"x":25.0839},{"n":"Albert","c":"France","y":50.0019,"x":2.6522},{"n":"La Londe-les-Maures","c":"France","y":43.1381,"x":6.2344},{"n":"Hochst im Odenwald","c":"Germany","y":49.7992,"x":8.9942},{"n":"Bad Lauterberg","c":"Germany","y":51.6317,"x":10.4706},{"n":"Regidor","c":"Colombia","y":8.6664,"x":-73.8222},{"n":"Vaals","c":"Netherlands","y":50.7694,"x":6.0181},{"n":"San Giorgio del Sannio","c":"Italy","y":41.0667,"x":14.85},{"n":"La Guardia","c":"Spain","y":41.9017,"x":-8.8753},{"n":"Lloyd","c":"United States","y":41.7286,"x":-73.9962},{"n":"San Diego Country Estates","c":"United States","y":33.0093,"x":-116.7874},{"n":"Valdobbiadene","c":"Italy","y":45.9,"x":11.9167},{"n":"Phai Sali","c":"Thailand","y":15.6,"x":100.6494},{"n":"Senhora dos Remedios","c":"Brazil","y":-21.0278,"x":-43.5828},{"n":"Bolekhiv","c":"Ukraine","y":49.0669,"x":23.8514},{"n":"Hockley","c":"United Kingdom","y":51.6014,"x":0.6363},{"n":"Altenholz","c":"Germany","y":54.4,"x":10.1333},{"n":"Roscoe","c":"United States","y":42.4256,"x":-89.0083},{"n":"Targu Frumos","c":"Romania","y":47.2097,"x":27.0131},{"n":"Schwaikheim","c":"Germany","y":48.8714,"x":9.3531},{"n":"Guadalupe","c":"Brazil","y":-6.7869,"x":-43.5689},{"n":"Altofonte","c":"Italy","y":38.05,"x":13.3},{"n":"Douglass","c":"United States","y":40.3438,"x":-75.5909},{"n":"Natuba","c":"Brazil","y":-7.6408,"x":-35.55},{"n":"Maria Enzersdorf","c":"Austria","y":48.1,"x":16.2833},{"n":"Nova Europa","c":"Brazil","y":-21.7783,"x":-48.5608},{"n":"Tiztoutine","c":"Morocco","y":34.9833,"x":-3.15},{"n":"Little Canada","c":"United States","y":45.0244,"x":-93.0863},{"n":"Rosaryville","c":"United States","y":38.7672,"x":-76.8266},{"n":"Wapakoneta","c":"United States","y":40.5663,"x":-84.1915},{"n":"Cavriago","c":"Italy","y":44.6956,"x":10.5274},{"n":"Hambuhren","c":"Germany","y":52.6333,"x":9.9833},{"n":"Perols","c":"France","y":43.565,"x":3.9506},{"n":"Lahstedt","c":"Germany","y":52.25,"x":10.2167},{"n":"San Vendemiano","c":"Italy","y":45.8914,"x":12.3389},{"n":"Fuveau","c":"France","y":43.4522,"x":5.5617},{"n":"Reiskirchen","c":"Germany","y":50.6,"x":8.8333},{"n":"Iramaia","c":"Brazil","y":-13.2858,"x":-40.9508},{"n":"Huittinen","c":"Finland","y":61.1764,"x":22.6986},{"n":"Lyuboml'","c":"Ukraine","y":51.2158,"x":24.0408},{"n":"Langhirano","c":"Italy","y":44.6167,"x":10.2667},{"n":"Ivangorod","c":"Russia","y":59.375,"x":28.2053},{"n":"Douar Echbanat","c":"Morocco","y":34.2167,"x":-5.35},{"n":"Olekminsk","c":"Russia","y":60.3833,"x":120.4333},{"n":"Volda","c":"Norway","y":62.1468,"x":6.068},{"n":"Doctor Phillips","c":"United States","y":28.4476,"x":-81.4922},{"n":"Costesti","c":"Romania","y":44.6697,"x":24.88},{"n":"Beneditinos","c":"Brazil","y":-5.455,"x":-42.36},{"n":"Karkamis","c":"Turkey","y":36.8345,"x":37.9983},{"n":"Wittenbach","c":"Switzerland","y":47.4667,"x":9.3795},{"n":"Martin","c":"United States","y":36.3386,"x":-88.8513},{"n":"Pitkyaranta","c":"Russia","y":61.5667,"x":31.4833},{"n":"Gifford","c":"United States","y":27.6747,"x":-80.4102},{"n":"Georgian Bluffs","c":"Canada","y":44.65,"x":-81.0333},{"n":"Wendeburg","c":"Germany","y":52.3167,"x":10.4},{"n":"Bernalillo","c":"United States","y":35.3127,"x":-106.5537},{"n":"Oelsnitz","c":"Germany","y":50.4167,"x":12.1667},{"n":"Kangning","c":"China","y":38.0176,"x":102.352},{"n":"Olevsk","c":"Ukraine","y":51.2278,"x":27.6481},{"n":"Jaltocan","c":"Mexico","y":21.1333,"x":-98.5383},{"n":"Great Missenden","c":"United Kingdom","y":51.7042,"x":-0.7078},{"n":"Minobu","c":"Japan","y":35.4675,"x":138.4425},{"n":"Aradeo","c":"Italy","y":40.1333,"x":18.1333},{"n":"Pine Castle","c":"United States","y":28.4651,"x":-81.374},{"n":"Mios","c":"France","y":44.605,"x":-0.9369},{"n":"La Farlede","c":"France","y":43.1678,"x":6.0431},{"n":"Tomblaine","c":"France","y":48.6856,"x":6.2117},{"n":"Cape Canaveral","c":"United States","y":28.3933,"x":-80.605},{"n":"Bogen","c":"Germany","y":48.9167,"x":12.6833},{"n":"Brikcha","c":"Morocco","y":34.9667,"x":-5.5833},{"n":"Neuenhof","c":"Switzerland","y":47.4469,"x":8.3292},{"n":"Fairview Shores","c":"United States","y":28.602,"x":-81.3948},{"n":"Worth","c":"United States","y":41.6877,"x":-87.7916},{"n":"Pulpi","c":"Spain","y":37.4019,"x":-1.7508},{"n":"Rio Acima","c":"Brazil","y":-20.0878,"x":-43.7889},{"n":"Shenjiaba","c":"China","y":32.9441,"x":108.6414},{"n":"Tanaina","c":"United States","y":61.656,"x":-149.4272},{"n":"Vigasio","c":"Italy","y":45.3167,"x":10.9333},{"n":"Salanso","c":"Burkina Faso","y":12.1833,"x":-4.0833},{"n":"Arvorezinha","c":"Brazil","y":-28.8719,"x":-52.175},{"n":"Fort William","c":"United Kingdom","y":56.8198,"x":-5.1052},{"n":"Sudogda","c":"Russia","y":55.95,"x":40.8667},{"n":"Haikoucun","c":"China","y":28.3237,"x":120.0853},{"n":"Santiago","c":"Peru","y":-14.1896,"x":-75.74},{"n":"Bedford Heights","c":"United States","y":41.4042,"x":-81.5053},{"n":"Bujari","c":"Brazil","y":-9.8308,"x":-67.9519},{"n":"Altenberge","c":"Germany","y":52.0458,"x":7.4653},{"n":"Candas","c":"Spain","y":43.5486,"x":-5.7897},{"n":"Zuyevka","c":"Russia","y":58.4033,"x":51.1304},{"n":"Hull","c":"United States","y":42.2861,"x":-70.8835},{"n":"Nanfang","c":"China","y":23.3568,"x":115.5167},{"n":"Miribel","c":"France","y":45.8244,"x":4.9531},{"n":"Sylva","c":"Russia","y":57.3139,"x":58.7889},{"n":"Bogue","c":"Mauritania","y":16.5904,"x":-14.27},{"n":"Morlenbach","c":"Germany","y":49.599,"x":8.7369},{"n":"Phon Charoen","c":"Thailand","y":18.025,"x":103.706},{"n":"Oulad Slim","c":"Morocco","y":32.7775,"x":-7.7725},{"n":"Fox Lake","c":"United States","y":42.4239,"x":-88.1844},{"n":"Cittanova","c":"Italy","y":38.35,"x":16.0833},{"n":"Pembroke Dock","c":"United Kingdom","y":51.6933,"x":-4.9458},{"n":"Sovata","c":"Romania","y":46.5961,"x":25.0744},{"n":"Ivankiv","c":"Ukraine","y":50.9333,"x":29.9},{"n":"Cristino Castro","c":"Brazil","y":-8.8178,"x":-44.2239},{"n":"San Juan La Laguna","c":"Guatemala","y":14.7,"x":-91.2833},{"n":"Millstone","c":"United States","y":40.2123,"x":-74.4302},{"n":"Tiddas","c":"Morocco","y":33.5667,"x":-6.2658},{"n":"Linthicum","c":"United States","y":39.2088,"x":-76.6625},{"n":"Schwaig","c":"Germany","y":49.4692,"x":11.2008},{"n":"Fountain Inn","c":"United States","y":34.6994,"x":-82.1999},{"n":"Cabanaquinta","c":"Spain","y":43.1,"x":-5.5833},{"n":"Grossburgwedel","c":"Germany","y":52.492,"x":9.8567},{"n":"Parana","c":"Brazil","y":-12.615,"x":-47.8828},{"n":"Beni Oulid","c":"Morocco","y":34.5897,"x":-4.4514},{"n":"Awfouss","c":"Morocco","y":31.7,"x":-4.1167},{"n":"Quinto di Treviso","c":"Italy","y":45.65,"x":12.1667},{"n":"Nevelsk","c":"Russia","y":46.65,"x":141.8667},{"n":"Kendallville","c":"United States","y":41.4441,"x":-85.2578},{"n":"Krasnoilsk","c":"Ukraine","y":48.0167,"x":25.5833},{"n":"Bomporto","c":"Italy","y":44.7333,"x":11.0333},{"n":"Coroneo","c":"Mexico","y":20.1333,"x":-100.3333},{"n":"Raymond","c":"United States","y":43.0322,"x":-71.1994},{"n":"Molango","c":"Mexico","y":20.7844,"x":-98.7175},{"n":"Panaon","c":"Philippines","y":8.3667,"x":123.8333},{"n":"Sumner","c":"United States","y":47.2189,"x":-122.2338},{"n":"Volpago del Montello","c":"Italy","y":45.7833,"x":12.1167},{"n":"Felling","c":"United Kingdom","y":54.95,"x":-1.564},{"n":"Hughenden","c":"United Kingdom","y":51.6558,"x":-0.749},{"n":"Tangermunde","c":"Germany","y":52.5408,"x":11.9689},{"n":"Limoux","c":"France","y":43.0569,"x":2.2186},{"n":"Roseira","c":"Brazil","y":-22.8978,"x":-45.305},{"n":"Ban Klang","c":"Thailand","y":18.5791,"x":99.0686},{"n":"Werlte","c":"Germany","y":52.85,"x":7.6833},{"n":"Corral de Bustos","c":"Argentina","y":-33.2833,"x":-62.2},{"n":"Pine Hill","c":"United States","y":39.7879,"x":-74.9857},{"n":"Planura","c":"Brazil","y":-20.1378,"x":-48.7019},{"n":"Rawdon","c":"Canada","y":46.05,"x":-73.7167},{"n":"Riachuelo","c":"Brazil","y":-10.7278,"x":-37.1869},{"n":"Tha Muang","c":"Thailand","y":13.9611,"x":99.6411},{"n":"Anrochte","c":"Germany","y":51.5667,"x":8.3333},{"n":"Shasta Lake","c":"United States","y":40.679,"x":-122.3775},{"n":"Kragero","c":"Norway","y":58.8869,"x":9.3469},{"n":"Bordighera","c":"Italy","y":43.7789,"x":7.6721},{"n":"Hamilton","c":"Australia","y":-37.7333,"x":142.0167},{"n":"Lehigh","c":"United States","y":40.7679,"x":-75.5394},{"n":"Campbellton","c":"Canada","y":48.005,"x":-66.6731},{"n":"Appleton","c":"United Kingdom","y":53.3508,"x":-2.5441},{"n":"Belaya Kholunitsa","c":"Russia","y":58.8333,"x":50.85},{"n":"Rodeo","c":"United States","y":38.0368,"x":-122.2526},{"n":"View Royal","c":"Canada","y":48.4517,"x":-123.4339},{"n":"Luanco","c":"Spain","y":43.61,"x":-5.79},{"n":"Te Puke","c":"New Zealand","y":-37.7833,"x":176.3167},{"n":"Pirai do Norte","c":"Brazil","y":-13.7619,"x":-39.3789},{"n":"Vidor","c":"United States","y":30.1291,"x":-93.9967},{"n":"Leones","c":"Argentina","y":-32.6617,"x":-62.2967},{"n":"Tutrakan","c":"Bulgaria","y":44.0481,"x":26.6044},{"n":"Weil im Schonbuch","c":"Germany","y":48.6214,"x":9.0611},{"n":"Terralba","c":"Italy","y":39.7197,"x":8.6363},{"n":"Jaguaribara","c":"Brazil","y":-5.6578,"x":-38.62},{"n":"Cajobi","c":"Brazil","y":-20.88,"x":-48.8089},{"n":"Pasewalk","c":"Germany","y":53.5063,"x":13.99},{"n":"Ianca","c":"Romania","y":45.135,"x":27.4747},{"n":"Jaqma","c":"Morocco","y":33.2925,"x":-7.4406},{"n":"New Port Richey East","c":"United States","y":28.2605,"x":-82.693},{"n":"Bellefontaine Neighbors","c":"United States","y":38.7529,"x":-90.228},{"n":"Portet-sur-Garonne","c":"France","y":43.5219,"x":1.4061},{"n":"Salinas","c":"Uruguay","y":-34.7751,"x":-55.8402},{"n":"Dar El Kebdani","c":"Morocco","y":35.1203,"x":-3.3322},{"n":"Vermilion","c":"United States","y":41.4103,"x":-82.3214},{"n":"Lyngdal","c":"Norway","y":58.1333,"x":7.0833},{"n":"South Union","c":"United States","y":39.8706,"x":-79.7221},{"n":"Itamogi","c":"Brazil","y":-21.0778,"x":-47.0478},{"n":"Puerto Quijarro","c":"Bolivia","y":-17.7796,"x":-57.77},{"n":"Morsbach","c":"Germany","y":50.8667,"x":7.7167},{"n":"El Realejo","c":"Nicaragua","y":12.5431,"x":-87.1647},{"n":"Quetigny","c":"France","y":47.3144,"x":5.1061},{"n":"Dolhasca","c":"Romania","y":47.4303,"x":26.6094},{"n":"Lipova","c":"Romania","y":46.0894,"x":21.6914},{"n":"Catunda","c":"Brazil","y":-4.6478,"x":-40.2008},{"n":"Harfleur","c":"France","y":49.5067,"x":0.1981},{"n":"Vaprio d'Adda","c":"Italy","y":45.5667,"x":9.5333},{"n":"Roche-la-Moliere","c":"France","y":45.4339,"x":4.3236},{"n":"Kapuvar","c":"Hungary","y":47.6,"x":17.0331},{"n":"Bonham","c":"United States","y":33.588,"x":-96.1901},{"n":"Kapyl'","c":"Belarus","y":53.15,"x":27.0917},{"n":"Bad Frankenhausen","c":"Germany","y":51.3558,"x":11.1011},{"n":"Bowen","c":"Australia","y":-20.0167,"x":148.2333},{"n":"Frydlant nad Ostravici","c":"Czechia","y":49.5928,"x":18.3597},{"n":"Kennett","c":"United States","y":36.2403,"x":-90.0481},{"n":"Tokol","c":"Hungary","y":47.3219,"x":18.9619},{"n":"Verucchio","c":"Italy","y":43.9833,"x":12.4215},{"n":"Heves","c":"Hungary","y":47.6,"x":20.2833},{"n":"Prestonpans","c":"United Kingdom","y":55.9597,"x":-2.961},{"n":"Verkhnodniprovsk","c":"Ukraine","y":48.6561,"x":34.3283},{"n":"Qiushanxiang","c":"China","y":34.3562,"x":104.8983},{"n":"Fort Bragg","c":"United States","y":39.4399,"x":-123.8013},{"n":"Madridejos","c":"Spain","y":39.4667,"x":-3.5333},{"n":"Koflach","c":"Austria","y":47.0639,"x":15.0889},{"n":"Biot","c":"France","y":43.6286,"x":7.0956},{"n":"Steinau an der Strasse","c":"Germany","y":50.3167,"x":9.4667},{"n":"Klipphausen","c":"Germany","y":51.0833,"x":13.5333},{"n":"Borgosatollo","c":"Italy","y":45.4761,"x":10.24},{"n":"Lyons","c":"United States","y":41.8121,"x":-87.8192},{"n":"Corumba de Goias","c":"Brazil","y":-15.9239,"x":-48.8089},{"n":"Amurrio","c":"Spain","y":43.0528,"x":-3.0014},{"n":"Werneck","c":"Germany","y":49.9833,"x":10.1},{"n":"Maria Pinto","c":"Chile","y":-33.5333,"x":-71.1333},{"n":"Kut Chap","c":"Thailand","y":17.4262,"x":102.5646},{"n":"Neuenstadt am Kocher","c":"Germany","y":49.2333,"x":9.3333},{"n":"Bounaamane","c":"Morocco","y":29.5283,"x":-9.8044},{"n":"Ardino","c":"Bulgaria","y":41.5829,"x":25.1332},{"n":"Urucania","c":"Brazil","y":-20.3508,"x":-42.7389},{"n":"Wells","c":"United States","y":43.3268,"x":-70.6335},{"n":"Bernay","c":"France","y":49.0886,"x":0.5983},{"n":"Miami Shores","c":"United States","y":25.867,"x":-80.1779},{"n":"Letychiv","c":"Ukraine","y":49.3833,"x":27.6167},{"n":"Shamva","c":"Zimbabwe","y":-17.3196,"x":31.57},{"n":"Murfatlar","c":"Romania","y":44.1736,"x":28.4083},{"n":"Munchberg","c":"Germany","y":50.1831,"x":11.7857},{"n":"Vaiano","c":"Italy","y":43.9667,"x":11.1167},{"n":"Bethanie","c":"Namibia","y":-26.4995,"x":17.15},{"n":"Levanger","c":"Norway","y":63.7464,"x":11.2996},{"n":"Kenzingen","c":"Germany","y":48.1917,"x":7.7683},{"n":"San Felice Circeo","c":"Italy","y":41.2353,"x":13.0956},{"n":"Forde","c":"Norway","y":61.4519,"x":5.8569},{"n":"Kirkel","c":"Germany","y":49.2833,"x":7.2333},{"n":"Capriolo","c":"Italy","y":45.6373,"x":9.9336},{"n":"Essey-les-Nancy","c":"France","y":48.7058,"x":6.2222},{"n":"Taksimo","c":"Russia","y":56.3315,"x":114.89},{"n":"Buenopolis","c":"Brazil","y":-17.8728,"x":-44.18},{"n":"Fortuna","c":"Spain","y":38.1789,"x":-1.1233},{"n":"Korolevo","c":"Ukraine","y":48.15,"x":23.1333},{"n":"Aydarken","c":"Kyrgyzstan","y":39.9333,"x":71.3333},{"n":"Nagyatad","c":"Hungary","y":46.2294,"x":17.3575},{"n":"Bela Vista de Minas","c":"Brazil","y":-19.83,"x":-43.0908},{"n":"Aulendorf","c":"Germany","y":47.9542,"x":9.6389},{"n":"Oostzaan","c":"Netherlands","y":52.4406,"x":4.8789},{"n":"Lukovit","c":"Bulgaria","y":43.2102,"x":24.1629},{"n":"Payerne","c":"Switzerland","y":46.8167,"x":6.9333},{"n":"Vignate","c":"Italy","y":45.5,"x":9.3667},{"n":"West Hanover","c":"United States","y":40.3635,"x":-76.7467},{"n":"Conceicao da Aparecida","c":"Brazil","y":-21.0939,"x":-46.2039},{"n":"Sobral de Monte Agraco","c":"Portugal","y":39.0167,"x":-9.15},{"n":"Goito","c":"Italy","y":45.25,"x":10.6667},{"n":"Konigsbach-Stein","c":"Germany","y":48.9664,"x":8.6089},{"n":"Neuenhaus","c":"Germany","y":52.5,"x":6.9667},{"n":"Teocuitatlan de Corona","c":"Mexico","y":20.0918,"x":-103.3785},{"n":"Buzdyak","c":"Russia","y":54.5711,"x":54.5308},{"n":"Ban Bong Tai","c":"Thailand","y":17.4057,"x":103.2992},{"n":"Csorna","c":"Hungary","y":47.6167,"x":17.25},{"n":"Mariluz","c":"Brazil","y":-24.0019,"x":-53.1458},{"n":"Marpingen","c":"Germany","y":49.45,"x":7.05},{"n":"Sedona","c":"United States","y":34.8574,"x":-111.7951},{"n":"San Vicente de Castellet","c":"Spain","y":41.6655,"x":1.8641},{"n":"Ksar Lmajaz","c":"Morocco","y":35.8428,"x":-5.5586},{"n":"Ben Nasseur","c":"Algeria","y":33.1107,"x":6.441},{"n":"Biandanshan","c":"China","y":26.0409,"x":105.6351},{"n":"Ninheira","c":"Brazil","y":-15.3208,"x":-41.7539},{"n":"Santa Teresa","c":"Brazil","y":-25.0519,"x":-53.6328},{"n":"Lenguazaque","c":"Colombia","y":5.3069,"x":-73.7117},{"n":"Santa Maria Madalena","c":"Brazil","y":-21.955,"x":-42.0078},{"n":"Ottendorf-Okrilla","c":"Germany","y":51.1792,"x":13.8261},{"n":"Volterra","c":"Italy","y":43.4,"x":10.8667},{"n":"Crosia","c":"Italy","y":39.5667,"x":16.7667},{"n":"Januario Cicco","c":"Brazil","y":-6.1578,"x":-35.6008},{"n":"Saint-Gregoire","c":"France","y":48.1511,"x":-1.6861},{"n":"Bieber","c":"Germany","y":50.6,"x":8.5833},{"n":"Francisco Badaro","c":"Brazil","y":-16.9928,"x":-42.3519},{"n":"Dettingen an der Erms","c":"Germany","y":48.53,"x":9.3472},{"n":"Vytegra","c":"Russia","y":61,"x":36.45},{"n":"Chavinda","c":"Mexico","y":20.0167,"x":-102.45},{"n":"Welkenraedt","c":"Belgium","y":50.6606,"x":5.9714},{"n":"Aghbalou n'Kerdous","c":"Morocco","y":31.7611,"x":-5.3169},{"n":"South Huntington","c":"United States","y":40.8225,"x":-73.3921},{"n":"Carmaux","c":"France","y":44.0492,"x":2.1581},{"n":"Fort Madison","c":"United States","y":40.6207,"x":-91.3509},{"n":"Aich","c":"Germany","y":48.6228,"x":9.2372},{"n":"Nor Hachn","c":"Armenia","y":40.3,"x":44.58},{"n":"Santa Cruz do Arari","c":"Brazil","y":-0.6639,"x":-49.1628},{"n":"Campos Lindos","c":"Brazil","y":-7.9939,"x":-46.8678},{"n":"Tyukalinsk","c":"Russia","y":55.8667,"x":72.2},{"n":"Banska Stiavnica","c":"Slovakia","y":48.4586,"x":18.8931},{"n":"Frouzins","c":"France","y":43.5161,"x":1.3247},{"n":"Montemarciano","c":"Italy","y":43.6399,"x":13.3104},{"n":"Coldstream","c":"Canada","y":50.22,"x":-119.2481},{"n":"Mandello del Lario","c":"Italy","y":45.9167,"x":9.3167},{"n":"Natonin","c":"Philippines","y":17.1,"x":121.2833},{"n":"Bowdon","c":"United Kingdom","y":53.376,"x":-2.366},{"n":"Nanticoke","c":"United States","y":41.2004,"x":-76.0003},{"n":"Bad Ems","c":"Germany","y":50.3381,"x":7.7106},{"n":"Santa Terezinha de Goias","c":"Brazil","y":-14.4378,"x":-49.7058},{"n":"Blairgowrie","c":"United Kingdom","y":56.5916,"x":-3.3405},{"n":"Cermenate","c":"Italy","y":45.7,"x":9.0833},{"n":"Chester","c":"Canada","y":44.65,"x":-64.3},{"n":"Sgamna","c":"Morocco","y":32.7342,"x":-7.2033},{"n":"Argayash","c":"Russia","y":55.4889,"x":60.8767},{"n":"Brumath","c":"France","y":48.7319,"x":7.7083},{"n":"Teteven","c":"Bulgaria","y":42.9177,"x":24.2574},{"n":"Santo Stefano di Magra","c":"Italy","y":44.1625,"x":9.9151},{"n":"Queens","c":"Canada","y":44.0333,"x":-64.7167},{"n":"Kambarka","c":"Russia","y":56.2667,"x":54.2},{"n":"Bilenke","c":"Ukraine","y":48.7664,"x":37.6314},{"n":"Comstock Park","c":"United States","y":43.0438,"x":-85.6779},{"n":"Burgau","c":"Germany","y":48.4322,"x":10.4069},{"n":"El Alamo","c":"Spain","y":40.2306,"x":-3.9944},{"n":"Dores de Campos","c":"Brazil","y":-21.1089,"x":-44.0228},{"n":"Fredonia","c":"United States","y":42.4407,"x":-79.3319},{"n":"Rayen","c":"Iran","y":29.5978,"x":57.4386},{"n":"Petrolina de Goias","c":"Brazil","y":-16.095,"x":-49.3378},{"n":"Novi di Modena","c":"Italy","y":44.8934,"x":10.901},{"n":"Soyaux","c":"France","y":45.6403,"x":0.1978},{"n":"Sermoneta","c":"Italy","y":41.55,"x":12.9833},{"n":"Rouvroy","c":"France","y":50.3936,"x":2.9039},{"n":"Helena-West Helena","c":"United States","y":34.5314,"x":-90.6201},{"n":"Park Forest Village","c":"United States","y":40.7996,"x":-77.9084},{"n":"Nehoiu","c":"Romania","y":45.4153,"x":26.3082},{"n":"Forest Acres","c":"United States","y":34.0324,"x":-80.9716},{"n":"Oakengates","c":"United Kingdom","y":52.695,"x":-2.451},{"n":"Coal","c":"United States","y":40.7876,"x":-76.5489},{"n":"Tha Mai","c":"Thailand","y":12.6196,"x":102.0112},{"n":"Zaozernyy","c":"Russia","y":55.9667,"x":94.7},{"n":"Sixaola","c":"Costa Rica","y":9.5083,"x":-82.6147},{"n":"Groairas","c":"Brazil","y":-3.9128,"x":-40.3828},{"n":"Hecelchakan","c":"Mexico","y":20.1667,"x":-90.1333},{"n":"Morrovalle","c":"Italy","y":43.3146,"x":13.5806},{"n":"London Colney","c":"United Kingdom","y":51.726,"x":-0.3},{"n":"Santa Clara La Laguna","c":"Guatemala","y":14.7167,"x":-91.3},{"n":"Vashon","c":"United States","y":47.4122,"x":-122.4726},{"n":"Grand-Couronne","c":"France","y":49.3575,"x":1.0072},{"n":"Nieuw-Lekkerland","c":"Netherlands","y":51.8833,"x":4.6833},{"n":"Alvorada do Sul","c":"Brazil","y":-22.78,"x":-51.2308},{"n":"Coroaci","c":"Brazil","y":-18.6219,"x":-42.2858},{"n":"San Jose de Feliciano","c":"Argentina","y":-30.3833,"x":-58.75},{"n":"Fiumefreddo di Sicilia","c":"Italy","y":37.7915,"x":15.2092},{"n":"Miradouro","c":"Brazil","y":-20.8908,"x":-42.3428},{"n":"Kilkunda","c":"India","y":11.2569,"x":76.6697},{"n":"Augustdorf","c":"Germany","y":51.9094,"x":8.7317},{"n":"Sant'Egidio alla Vibrata","c":"Italy","y":42.8333,"x":13.7167},{"n":"Corfe Mullen","c":"United Kingdom","y":50.7701,"x":-2.0175},{"n":"Pliezhausen","c":"Germany","y":48.5586,"x":9.2058},{"n":"Ertil","c":"Russia","y":51.8333,"x":40.8},{"n":"Chivhu","c":"Zimbabwe","y":-19.0211,"x":30.8922},{"n":"Arden Hills","c":"United States","y":45.0721,"x":-93.167},{"n":"Sidi Rahhal","c":"Morocco","y":31.6667,"x":-7.4833},{"n":"Lillers","c":"France","y":50.5636,"x":2.4819},{"n":"Pine Ridge","c":"United States","y":28.933,"x":-82.4761},{"n":"Selkirk","c":"Canada","y":50.1436,"x":-96.8839},{"n":"Saint-Felicien","c":"Canada","y":48.65,"x":-72.45},{"n":"Haelen","c":"Netherlands","y":51.2358,"x":5.9547},{"n":"Marano Vicentino","c":"Italy","y":45.7,"x":11.4333},{"n":"Medulla","c":"United States","y":27.957,"x":-81.9866},{"n":"Lanskroun","c":"Czechia","y":49.9122,"x":16.612},{"n":"Slatina","c":"Croatia","y":45.7,"x":17.7},{"n":"Liphook","c":"United Kingdom","y":51.076,"x":-0.803},{"n":"Rubim","c":"Brazil","y":-16.375,"x":-40.5378},{"n":"Doraville","c":"United States","y":33.9072,"x":-84.2711},{"n":"Oster","c":"Ukraine","y":50.9486,"x":30.8811},{"n":"Rum","c":"Austria","y":47.2872,"x":11.4581},{"n":"Busca","c":"Italy","y":44.5167,"x":7.4667},{"n":"Steinen","c":"Germany","y":47.6453,"x":7.7403},{"n":"Caldera","c":"Chile","y":-27.0667,"x":-70.8167},{"n":"Hawkesbury","c":"Canada","y":45.6,"x":-74.6},{"n":"Soverato Marina","c":"Italy","y":38.6833,"x":16.55},{"n":"La'tamna","c":"Morocco","y":31.9117,"x":-7.335},{"n":"Sao Joao d'Alianca","c":"Brazil","y":-14.7058,"x":-47.525},{"n":"Moimenta da Beira","c":"Portugal","y":40.9819,"x":-7.6158},{"n":"Santa Isabel Cholula","c":"Mexico","y":19,"x":-98.3667},{"n":"Birkenau","c":"Germany","y":49.5607,"x":8.7061},{"n":"Coronel Freitas","c":"Brazil","y":-26.9089,"x":-52.7028},{"n":"Nordkirchen","c":"Germany","y":51.7381,"x":7.5256},{"n":"Plattekill","c":"United States","y":41.6478,"x":-74.0717},{"n":"Lonquimay","c":"Chile","y":-38.4333,"x":-71.2333},{"n":"Meuselwitz","c":"Germany","y":51.05,"x":12.3},{"n":"Cypress Gardens","c":"United States","y":28.0036,"x":-81.6857},{"n":"Itape","c":"Brazil","y":-14.8978,"x":-39.4208},{"n":"Eumseong","c":"Korea, South","y":36.9353,"x":127.6897},{"n":"Lugovoy","c":"Kazakhstan","y":42.9472,"x":72.7644},{"n":"Pebble Creek","c":"United States","y":28.1583,"x":-82.3411},{"n":"Martinopole","c":"Brazil","y":-3.2258,"x":-40.6969},{"n":"Mucuge","c":"Brazil","y":-13.005,"x":-41.3708},{"n":"Melvindale","c":"United States","y":42.2802,"x":-83.1782},{"n":"Fanzhao","c":"China","y":26.6615,"x":108.3834},{"n":"Wildberg","c":"Germany","y":48.6239,"x":8.7472},{"n":"Elmas","c":"Italy","y":39.2679,"x":9.05},{"n":"Sauk Village","c":"United States","y":41.4905,"x":-87.5706},{"n":"Bisignano","c":"Italy","y":39.5073,"x":16.2811},{"n":"Ronda Alta","c":"Brazil","y":-27.7669,"x":-52.8019},{"n":"Marawi","c":"Sudan","y":18.4833,"x":31.8167},{"n":"Pescaria Brava","c":"Brazil","y":-28.3833,"x":-48.8833},{"n":"Andergrove","c":"Australia","y":-21.0931,"x":149.186},{"n":"Radyvyliv","c":"Ukraine","y":50.1333,"x":25.25},{"n":"Pella","c":"United States","y":41.4051,"x":-92.9177},{"n":"Charala","c":"Colombia","y":6.2875,"x":-73.1467},{"n":"Luza","c":"Russia","y":60.6167,"x":47.2833},{"n":"Terra Nova","c":"Brazil","y":-8.23,"x":-39.3758},{"n":"Calasparra","c":"Spain","y":38.2306,"x":-1.7},{"n":"Tarashcha","c":"Ukraine","y":49.55,"x":30.5},{"n":"Cuorgne","c":"Italy","y":45.3833,"x":7.65},{"n":"Oppeano","c":"Italy","y":45.3,"x":11.1833},{"n":"Vetraz-Monthoux","c":"France","y":46.1742,"x":6.255},{"n":"Wingles","c":"France","y":50.4942,"x":2.8553},{"n":"Sedico","c":"Italy","y":46.1167,"x":12.1},{"n":"Blumberg","c":"Germany","y":47.8392,"x":8.5342},{"n":"Bad Orb","c":"Germany","y":50.2167,"x":9.35},{"n":"Pires Ferreira","c":"Brazil","y":-4.2469,"x":-40.645},{"n":"Flamanzi","c":"Romania","y":47.5644,"x":26.8728},{"n":"Box Elder","c":"United States","y":44.1121,"x":-103.0827},{"n":"Middle Island","c":"United States","y":40.8857,"x":-72.9454},{"n":"Friedeburg","c":"Germany","y":53.45,"x":7.8333},{"n":"Roberval","c":"Canada","y":48.52,"x":-72.23},{"n":"Bad Wildbad","c":"Germany","y":48.7503,"x":8.5506},{"n":"Borzna","c":"Ukraine","y":51.2333,"x":32.4167},{"n":"Brandizzo","c":"Italy","y":45.1833,"x":7.8333},{"n":"Jemaat Oulad Mhamed","c":"Morocco","y":33.0939,"x":-7.0519},{"n":"Shyroke","c":"Ukraine","y":47.6882,"x":33.2654},{"n":"Sniatyn","c":"Ukraine","y":48.45,"x":25.5667},{"n":"Sainte-Agathe-des-Monts","c":"Canada","y":46.05,"x":-74.28},{"n":"Qovlar","c":"Azerbaijan","y":40.9419,"x":45.7358},{"n":"Pithiviers","c":"France","y":48.1719,"x":2.2519},{"n":"Steinfeld","c":"Germany","y":52.6,"x":8.2167},{"n":"Emsburen","c":"Germany","y":52.3925,"x":7.2914},{"n":"Catanduvas","c":"Brazil","y":-25.2028,"x":-53.1569},{"n":"Teplodar","c":"Ukraine","y":46.5036,"x":30.3244},{"n":"Kenafif","c":"Morocco","y":30.4167,"x":-9.0333},{"n":"Mstsislaw","c":"Belarus","y":54.0196,"x":31.7247},{"n":"Launaguet","c":"France","y":43.6739,"x":1.4569},{"n":"Oggiono","c":"Italy","y":45.7833,"x":9.35},{"n":"North Dumfries","c":"Canada","y":43.32,"x":-80.38},{"n":"Carqueiranne","c":"France","y":43.095,"x":6.0736},{"n":"Medina","c":"Colombia","y":4.5092,"x":-73.3494},{"n":"Tutzing","c":"Germany","y":47.9089,"x":11.2814},{"n":"Houthulst","c":"Belgium","y":50.9783,"x":2.9506},{"n":"Rehburg-Loccum","c":"Germany","y":52.4508,"x":9.2078},{"n":"Pechea","c":"Romania","y":45.6333,"x":27.8},{"n":"Csomor","c":"Hungary","y":47.5467,"x":19.2244},{"n":"Governador Archer","c":"Brazil","y":-5.0219,"x":-44.2708},{"n":"Ainring","c":"Germany","y":47.8136,"x":12.9428},{"n":"Fort Lupton","c":"United States","y":40.0831,"x":-104.8024},{"n":"Nong Ki","c":"Thailand","y":14.6867,"x":102.5325},{"n":"Simbach am Inn","c":"Germany","y":48.2656,"x":13.0231},{"n":"Rideau Lakes","c":"Canada","y":44.6667,"x":-76.2167},{"n":"Luis Gomes","c":"Brazil","y":-6.4139,"x":-38.3889},{"n":"Tolmezzo","c":"Italy","y":46.4,"x":13.0167},{"n":"Asola","c":"Italy","y":45.2167,"x":10.4167},{"n":"Alesd","c":"Romania","y":47.0572,"x":22.3969},{"n":"Goytapa","c":"Azerbaijan","y":39.1167,"x":48.5953},{"n":"Wahlstedt","c":"Germany","y":53.95,"x":10.2167},{"n":"Niebull","c":"Germany","y":54.7881,"x":8.8297},{"n":"Castellamonte","c":"Italy","y":45.3819,"x":7.7106},{"n":"Za'roura","c":"Morocco","y":35.2167,"x":-5.6667},{"n":"Gunbarrel","c":"United States","y":40.0634,"x":-105.1714},{"n":"Lizzano","c":"Italy","y":40.3919,"x":17.4483},{"n":"Kushijima","c":"Japan","y":32.74,"x":130.7572},{"n":"Kirchzarten","c":"Germany","y":47.9667,"x":7.95},{"n":"Sechelt","c":"Canada","y":49.4742,"x":-123.7542},{"n":"Cetraro","c":"Italy","y":39.5,"x":15.95},{"n":"Santa Maria de Palautordera","c":"Spain","y":41.6953,"x":2.4458},{"n":"Prelouc","c":"Czechia","y":50.0399,"x":15.5604},{"n":"Pullach im Isartal","c":"Germany","y":48.05,"x":11.5167},{"n":"Altusried","c":"Germany","y":47.8,"x":10.2167},{"n":"Aldenham","c":"United Kingdom","y":51.6723,"x":-0.3546},{"n":"Tissaf","c":"Morocco","y":33.4,"x":-3.5833},{"n":"Molsheim","c":"France","y":48.5428,"x":7.4922},{"n":"Jocoro","c":"El Salvador","y":13.6167,"x":-88.0167},{"n":"Mikhaylov","c":"Russia","y":54.2333,"x":39.0333},{"n":"Skidal'","c":"Belarus","y":53.5833,"x":24.25},{"n":"Beccles","c":"United Kingdom","y":52.458,"x":1.563},{"n":"Souama","c":"Algeria","y":36.6417,"x":4.3416},{"n":"Cingoli","c":"Italy","y":43.3742,"x":13.2164},{"n":"Alto Piquiri","c":"Brazil","y":-24.0278,"x":-53.4408},{"n":"Fife","c":"United States","y":47.2328,"x":-122.3518},{"n":"Lehman","c":"United States","y":41.1518,"x":-74.9924},{"n":"Phak Hai","c":"Thailand","y":14.4626,"x":100.3667},{"n":"Sinimbu","c":"Brazil","y":-29.5389,"x":-52.5219},{"n":"Caatiba","c":"Brazil","y":-14.9769,"x":-40.4078},{"n":"Almoloya del Rio","c":"Mexico","y":19.1586,"x":-99.4886},{"n":"Le Passage","c":"France","y":44.2014,"x":0.6033},{"n":"Ouistreham","c":"France","y":49.2792,"x":-0.2583},{"n":"Kokoszki","c":"Poland","y":54.3541,"x":18.4915},{"n":"Kawara","c":"Japan","y":33.6681,"x":130.8472},{"n":"Assendelft","c":"Netherlands","y":52.4667,"x":4.75},{"n":"Kampong Tunah Jambu","c":"Brunei","y":4.9957,"x":115.0019},{"n":"Sofiivka","c":"Ukraine","y":48.2683,"x":38.1847},{"n":"Covasna","c":"Romania","y":45.8492,"x":26.1853},{"n":"Somers Point","c":"United States","y":39.3167,"x":-74.6066},{"n":"Balangkayan","c":"Philippines","y":11.4667,"x":125.5},{"n":"Naters","c":"Switzerland","y":46.3237,"x":7.9886},{"n":"Granada","c":"Colombia","y":6.1442,"x":-75.1853},{"n":"Alguazas","c":"Spain","y":38.0514,"x":-1.2414},{"n":"Mazamet","c":"France","y":43.4917,"x":2.3733},{"n":"Seye","c":"Mexico","y":20.8372,"x":-89.3719},{"n":"Pernes-les-Fontaines","c":"France","y":43.9978,"x":5.0592},{"n":"Nove Mesto na Morave","c":"Czechia","y":49.5615,"x":16.0742},{"n":"Yermolino","c":"Russia","y":55.2,"x":36.6},{"n":"Moree","c":"Australia","y":-29.465,"x":149.8344},{"n":"Ban Bu Sung","c":"Thailand","y":14.9602,"x":104.1657},{"n":"Cachoeira dos Indios","c":"Brazil","y":-6.9269,"x":-38.6739},{"n":"Willstatt","c":"Germany","y":48.5417,"x":7.8964},{"n":"Racconigi","c":"Italy","y":44.7667,"x":7.6833},{"n":"Byarozawka","c":"Belarus","y":53.7167,"x":25.5},{"n":"Pogliano Milanese","c":"Italy","y":45.5333,"x":9},{"n":"Laakirchen","c":"Austria","y":47.9828,"x":13.8242},{"n":"Calcoene","c":"Brazil","y":2.4978,"x":-50.9489},{"n":"Bucine","c":"Italy","y":43.4775,"x":11.6158},{"n":"Magstadt","c":"Germany","y":48.7422,"x":8.965},{"n":"Tocina","c":"Spain","y":37.6,"x":-5.7333},{"n":"Caem","c":"Brazil","y":-11.1,"x":-40.4333},{"n":"Sung Noen","c":"Thailand","y":14.8992,"x":101.8208},{"n":"Gages Lake","c":"United States","y":42.3519,"x":-87.9828},{"n":"Embrach","c":"Switzerland","y":47.5103,"x":8.5933},{"n":"Haxby","c":"United Kingdom","y":54.016,"x":-1.075},{"n":"Asbury Lake","c":"United States","y":30.0472,"x":-81.7855},{"n":"Saint-Loubes","c":"France","y":44.9172,"x":-0.4281},{"n":"Pike Road","c":"United States","y":32.2934,"x":-86.0902},{"n":"Mainaschaff","c":"Germany","y":49.9833,"x":9.0833},{"n":"Mengibar","c":"Spain","y":37.9683,"x":-3.8089},{"n":"Ozimek","c":"Poland","y":50.6731,"x":18.2131},{"n":"Opochka","c":"Russia","y":56.7167,"x":28.65},{"n":"Jucurucu","c":"Brazil","y":-16.8428,"x":-40.1589},{"n":"Havre","c":"United States","y":48.5427,"x":-109.6803},{"n":"Gavirate","c":"Italy","y":45.85,"x":8.7167},{"n":"Snohomish","c":"United States","y":47.9276,"x":-122.0968},{"n":"Heubach","c":"Germany","y":48.7833,"x":9.9333},{"n":"Singera","c":"Moldova","y":46.9131,"x":28.9775},{"n":"La Mision","c":"Mexico","y":21.1,"x":-99.1333},{"n":"Ipuiuna","c":"Brazil","y":-22.0989,"x":-46.19},{"n":"Salvatierra de Mino","c":"Spain","y":42.0833,"x":-8.5},{"n":"Welwyn","c":"United Kingdom","y":51.831,"x":-0.215},{"n":"Paranaiguana","c":"Brazil","y":-18.9158,"x":-50.6539},{"n":"Yaotsu","c":"Japan","y":35.4761,"x":137.1417},{"n":"Choele Choel","c":"Argentina","y":-39.2858,"x":-65.6542},{"n":"Argelato","c":"Italy","y":44.6425,"x":11.3486},{"n":"Ech Chaibat","c":"Morocco","y":31.6,"x":-7.85},{"n":"Wald","c":"Switzerland","y":47.2753,"x":8.9144},{"n":"Al Wafrah","c":"Kuwait","y":28.6392,"x":47.9306},{"n":"Bruino","c":"Italy","y":45.0167,"x":7.4667},{"n":"Waynesville","c":"United States","y":35.4854,"x":-82.9995},{"n":"Glocester","c":"United States","y":41.8934,"x":-71.6889},{"n":"Rinopolis","c":"Brazil","y":-21.7258,"x":-50.7219},{"n":"Auterive","c":"France","y":43.3503,"x":1.4747},{"n":"Clarion","c":"United States","y":41.2106,"x":-79.3803},{"n":"Kutztown","c":"United States","y":40.5213,"x":-75.7772},{"n":"Zavolzhsk","c":"Russia","y":57.4833,"x":42.1333},{"n":"Iwashita","c":"Japan","y":32.6514,"x":130.8117},{"n":"Schotten","c":"Germany","y":50.5,"x":9.1167},{"n":"Tolbazy","c":"Russia","y":54.006,"x":55.8942},{"n":"Steinhaus","c":"Switzerland","y":47.1969,"x":8.4861},{"n":"Binefar","c":"Spain","y":41.85,"x":0.3},{"n":"Salaverry","c":"Peru","y":-8.22,"x":-78.99},{"n":"Sovicille","c":"Italy","y":43.2833,"x":11.2333},{"n":"Southport","c":"United States","y":42.04,"x":-76.8774},{"n":"Keuruu","c":"Finland","y":62.2597,"x":24.7069},{"n":"Ipupiara","c":"Brazil","y":-11.82,"x":-42.6139},{"n":"Grosshansdorf","c":"Germany","y":53.6667,"x":10.2667},{"n":"Manville","c":"United States","y":40.5421,"x":-74.5892},{"n":"Southborough","c":"United States","y":42.3012,"x":-71.5297},{"n":"Bel Air","c":"United States","y":39.5348,"x":-76.346},{"n":"Warr Acres","c":"United States","y":35.5285,"x":-97.6182},{"n":"Lysa nad Labem","c":"Czechia","y":50.2015,"x":14.8329},{"n":"Rudesheim am Rhein","c":"Germany","y":49.979,"x":7.9234},{"n":"Judenburg","c":"Austria","y":47.1725,"x":14.6603},{"n":"Illora","c":"Spain","y":37.2883,"x":-3.8797},{"n":"Foz","c":"Spain","y":43.5694,"x":-7.2583},{"n":"Tipp City","c":"United States","y":39.9643,"x":-84.1858},{"n":"Aruana","c":"Brazil","y":-14.92,"x":-51.0828},{"n":"Klotze","c":"Germany","y":52.6272,"x":11.1642},{"n":"Struthers","c":"United States","y":41.051,"x":-80.592},{"n":"Chapel en le Frith","c":"United Kingdom","y":53.322,"x":-1.917},{"n":"North Glengarry","c":"Canada","y":45.3333,"x":-74.7333},{"n":"Kurort Steinbach-Hallenberg","c":"Germany","y":50.7006,"x":10.5667},{"n":"Satipo","c":"Peru","y":-11.2522,"x":-74.6386},{"n":"Puentes de Garcia Rodriguez","c":"Spain","y":43.45,"x":-7.8333},{"n":"Zaggota","c":"Morocco","y":34.1667,"x":-5.5333},{"n":"Kamalasai","c":"Thailand","y":16.3383,"x":103.5756},{"n":"Digora","c":"Russia","y":43.15,"x":44.15},{"n":"Waldwick","c":"United States","y":41.0134,"x":-74.1259},{"n":"Gambolo","c":"Italy","y":45.2586,"x":8.8647},{"n":"Melendugno","c":"Italy","y":40.2667,"x":18.3333},{"n":"Conde-sur-l'Escaut","c":"France","y":50.4492,"x":3.5906},{"n":"Shawano","c":"United States","y":44.7748,"x":-88.5843},{"n":"Poienile de sub Munte","c":"Romania","y":47.8167,"x":24.4333},{"n":"Mountsorrel","c":"United Kingdom","y":52.7167,"x":-1.15},{"n":"Meldola","c":"Italy","y":44.1333,"x":12.0667},{"n":"Cabries","c":"France","y":43.4411,"x":5.3797},{"n":"Maiquinique","c":"Brazil","y":-15.6208,"x":-40.2658},{"n":"Lescar","c":"France","y":43.325,"x":-0.4161},{"n":"Macomer","c":"Italy","y":40.2644,"x":8.7751},{"n":"Alfredo Wagner","c":"Brazil","y":-27.7,"x":-49.3339},{"n":"Krivodanovka","c":"Russia","y":55.0914,"x":82.6489},{"n":"Nova Veneza","c":"Brazil","y":-16.3708,"x":-49.3228},{"n":"Oberhausen-Rheinhausen","c":"Germany","y":49.2606,"x":8.485},{"n":"Nogliki","c":"Russia","y":51.8333,"x":143.1667},{"n":"Nideggen","c":"Germany","y":50.7,"x":6.4833},{"n":"South Huron","c":"Canada","y":43.32,"x":-81.5},{"n":"Dylym","c":"Russia","y":43.0714,"x":46.6316},{"n":"Mengen","c":"Germany","y":48.0497,"x":9.33},{"n":"Brembate","c":"Italy","y":45.6,"x":9.55},{"n":"Progress","c":"United States","y":40.2905,"x":-76.8382},{"n":"Marieville","c":"Canada","y":45.4333,"x":-73.1667},{"n":"Wiang Sa","c":"Thailand","y":8.6358,"x":99.3667},{"n":"Fairmount","c":"United States","y":43.0414,"x":-76.2485},{"n":"Pintuyan","c":"Philippines","y":9.95,"x":125.25},{"n":"Mori","c":"Italy","y":45.8513,"x":10.9817},{"n":"Wolfersheim","c":"Germany","y":50.3975,"x":8.8114},{"n":"Bou Nouh","c":"Algeria","y":36.5,"x":3.9333},{"n":"Rosstal","c":"Germany","y":49.4,"x":10.8833},{"n":"Old Saybrook","c":"United States","y":41.3017,"x":-72.3857},{"n":"'Ain Leuh","c":"Morocco","y":33.2833,"x":-5.3833},{"n":"Arques","c":"France","y":50.7356,"x":2.3025},{"n":"Hongliuwan","c":"China","y":39.6348,"x":94.3386},{"n":"Cedar Hills","c":"United States","y":40.4135,"x":-111.753},{"n":"Dallgow-Doberitz","c":"Germany","y":52.5331,"x":13.05},{"n":"Le Mars","c":"United States","y":42.7809,"x":-96.1743},{"n":"Radisani","c":"Macedonia","y":42.0611,"x":21.4478},{"n":"Caudete","c":"Spain","y":38.7044,"x":-0.9881},{"n":"Crigglestone","c":"United Kingdom","y":53.644,"x":-1.5226},{"n":"Acucena","c":"Brazil","y":-19.0728,"x":-42.5458},{"n":"Cresson","c":"United States","y":40.4626,"x":-78.5866},{"n":"Standish","c":"United States","y":43.7811,"x":-70.5685},{"n":"Harrisonville","c":"United States","y":38.6529,"x":-94.3467},{"n":"Makale","c":"Indonesia","y":-3.086,"x":119.8469},{"n":"Sannicandro di Bari","c":"Italy","y":41,"x":16.8},{"n":"Divonne-les-Bains","c":"France","y":46.3567,"x":6.1428},{"n":"Kummersbruck","c":"Germany","y":49.4167,"x":11.8833},{"n":"Asagi Ayibli","c":"Azerbaijan","y":40.9347,"x":45.8261},{"n":"San Agustin de las Juntas","c":"Mexico","y":17,"x":-96.7167},{"n":"Kosching","c":"Germany","y":48.8167,"x":11.5},{"n":"Metsamor","c":"Armenia","y":40.1428,"x":44.1164},{"n":"Carneirinho","c":"Brazil","y":-19.6978,"x":-50.6878},{"n":"Ikryanoye","c":"Russia","y":46.0903,"x":47.7306},{"n":"Tsuno","c":"Japan","y":32.2567,"x":131.5597},{"n":"Lenggries","c":"Germany","y":47.6803,"x":11.5739},{"n":"Aire-sur-la-Lys","c":"France","y":50.6386,"x":2.3967},{"n":"Taghbalt","c":"Morocco","y":30.6281,"x":-5.3556},{"n":"Tiana","c":"Spain","y":41.4831,"x":2.2697},{"n":"Tarnok","c":"Hungary","y":47.3597,"x":18.8586},{"n":"Le Beausset","c":"France","y":43.1983,"x":5.8028},{"n":"Nolensville","c":"United States","y":35.9572,"x":-86.672},{"n":"Kosh-Agach","c":"Russia","y":49.9927,"x":88.676},{"n":"Inverigo","c":"Italy","y":45.7333,"x":9.2167},{"n":"Ivancice","c":"Czechia","y":49.1015,"x":16.3775},{"n":"Kargopol","c":"Russia","y":61.5,"x":38.9333},{"n":"San Pancrazio Salentino","c":"Italy","y":40.4167,"x":17.8333},{"n":"Figeac","c":"France","y":44.6086,"x":2.0317},{"n":"Garlasco","c":"Italy","y":45.2,"x":8.9167},{"n":"Rodinghausen","c":"Germany","y":52.255,"x":8.4817},{"n":"Isabela","c":"Puerto Rico","y":18.4991,"x":-67.022},{"n":"Wood River","c":"United States","y":38.8631,"x":-90.0773},{"n":"Friendly","c":"United States","y":38.7601,"x":-76.9642},{"n":"Ban Ratchakrut","c":"Thailand","y":9.7571,"x":98.5915},{"n":"Hoek van Holland","c":"Netherlands","y":51.9763,"x":4.1323},{"n":"Ollerton","c":"United Kingdom","y":53.2,"x":-1.02},{"n":"Barga","c":"Italy","y":44.075,"x":10.4817},{"n":"Kubrat","c":"Bulgaria","y":43.7967,"x":26.5011},{"n":"Sleepy Hollow","c":"United States","y":41.0936,"x":-73.8724},{"n":"Caspe","c":"Spain","y":41.2333,"x":-0.0333},{"n":"Euxton","c":"United Kingdom","y":53.662,"x":-2.674},{"n":"Colindres","c":"Spain","y":43.3967,"x":-3.4483},{"n":"Sankt Andra","c":"Austria","y":46.7667,"x":14.8167},{"n":"Surany","c":"Slovakia","y":48.0833,"x":18.1833},{"n":"Fair Oaks Ranch","c":"United States","y":29.7468,"x":-98.6375},{"n":"Robore","c":"Bolivia","y":-18.3295,"x":-59.76},{"n":"Sipacate","c":"Guatemala","y":13.9333,"x":-91.15},{"n":"Heteren","c":"Netherlands","y":51.9575,"x":5.755},{"n":"Bou'nane","c":"Morocco","y":32.0275,"x":-3.0397},{"n":"North Versailles","c":"United States","y":40.3784,"x":-79.8083},{"n":"Nohfelden","c":"Germany","y":49.5867,"x":7.1428},{"n":"Valea lui Mihai","c":"Romania","y":47.52,"x":22.13},{"n":"Monteriggioni","c":"Italy","y":43.4,"x":11.2167},{"n":"Lentvaris","c":"Lithuania","y":54.6436,"x":25.0517},{"n":"Merzenich","c":"Germany","y":50.8262,"x":6.5267},{"n":"Moba","c":"Congo (Kinshasa)","y":-7.0596,"x":29.72},{"n":"Holmen","c":"United States","y":43.9699,"x":-91.2661},{"n":"Croydon","c":"United States","y":40.0911,"x":-74.8975},{"n":"San Pedro Huamelula","c":"Mexico","y":16.0167,"x":-95.6667},{"n":"Santa Maria Ajoloapan","c":"Mexico","y":19.9692,"x":-99.0353},{"n":"Tay","c":"Canada","y":44.7167,"x":-79.7667},{"n":"Santa Margherita Ligure","c":"Italy","y":44.3349,"x":9.2101},{"n":"Coweta","c":"United States","y":35.968,"x":-95.6543},{"n":"Suaita","c":"Colombia","y":6.1019,"x":-73.4406},{"n":"Dubove","c":"Ukraine","y":48.1781,"x":23.8863},{"n":"Villamarchante","c":"Spain","y":39.5678,"x":-0.6225},{"n":"Ohrdruf","c":"Germany","y":50.8281,"x":10.7328},{"n":"Coycoyan de las Flores","c":"Mexico","y":17.2713,"x":-98.2741},{"n":"Valozhyn","c":"Belarus","y":54.0833,"x":26.5167},{"n":"Moravska Trebova","c":"Czechia","y":49.758,"x":16.6643},{"n":"Warrenton","c":"United States","y":38.7176,"x":-77.7975},{"n":"Volodarsk","c":"Russia","y":56.2333,"x":43.2},{"n":"Gassino Torinese","c":"Italy","y":45.1333,"x":7.8167},{"n":"Caraibas","c":"Brazil","y":-14.6,"x":-41.335},{"n":"Wielsbeke","c":"Belgium","y":50.9089,"x":3.3697},{"n":"Purkersdorf","c":"Austria","y":48.2092,"x":16.1792},{"n":"Kami-kawabe","c":"Japan","y":35.4867,"x":137.0706},{"n":"Tafersit","c":"Morocco","y":35.0192,"x":-3.5684},{"n":"Progress Village","c":"United States","y":27.8832,"x":-82.3593},{"n":"Nogent-le-Rotrou","c":"France","y":48.3217,"x":0.8217},{"n":"Galleh Dar","c":"Iran","y":27.6594,"x":52.6575},{"n":"Taltal","c":"Chile","y":-25.4,"x":-70.47},{"n":"Vuktyl","c":"Russia","y":63.8667,"x":57.3167},{"n":"Senanga","c":"Zambia","y":-16.1196,"x":23.27},{"n":"Maisenhausen","c":"Germany","y":50.0172,"x":8.9915},{"n":"Waggaman","c":"United States","y":29.9373,"x":-90.2354},{"n":"Alajarvi","c":"Finland","y":63,"x":23.8167},{"n":"Aveley","c":"United Kingdom","y":51.5018,"x":0.2534},{"n":"Kirchlinteln","c":"Germany","y":52.9428,"x":9.3183},{"n":"Non Sung","c":"Thailand","y":15.1788,"x":102.2514},{"n":"Buckie","c":"United Kingdom","y":57.676,"x":-2.965},{"n":"Hiranai","c":"Japan","y":40.9261,"x":140.9561},{"n":"Jerez","c":"Guatemala","y":14.1,"x":-89.75},{"n":"Laurens","c":"United States","y":34.5022,"x":-82.0207},{"n":"Hoeselt","c":"Belgium","y":50.85,"x":5.4833},{"n":"Uchoa","c":"Brazil","y":-20.9528,"x":-49.175},{"n":"Bull Mountain","c":"United States","y":45.4126,"x":-122.8322},{"n":"Flat Rock","c":"United States","y":42.0991,"x":-83.2716},{"n":"Saint-Amand-Montrond","c":"France","y":46.7228,"x":2.505},{"n":"Quartz Hill","c":"United States","y":34.6527,"x":-118.2163},{"n":"Niederhasli","c":"Switzerland","y":47.4822,"x":8.4861},{"n":"Molalla","c":"United States","y":45.1502,"x":-122.5844},{"n":"Gar","c":"China","y":32.2004,"x":79.9833},{"n":"Bonfinopolis","c":"Brazil","y":-16.6178,"x":-48.9628},{"n":"Bude","c":"United Kingdom","y":50.824,"x":-4.542},{"n":"Hlinsko","c":"Czechia","y":49.7622,"x":15.9076},{"n":"Scotchtown","c":"United States","y":41.4759,"x":-74.3682},{"n":"Pyetrykaw","c":"Belarus","y":52.1333,"x":28.5},{"n":"Giesen","c":"Germany","y":52.2,"x":9.8833},{"n":"Alden","c":"United States","y":42.9114,"x":-78.5211},{"n":"River Vale","c":"United States","y":41.0136,"x":-74.008},{"n":"Fort Oglethorpe","c":"United States","y":34.9319,"x":-85.246},{"n":"Pinos Puente","c":"Spain","y":37.25,"x":-3.75},{"n":"Visbek","c":"Germany","y":52.8333,"x":8.3167},{"n":"Ratne","c":"Ukraine","y":51.65,"x":24.5333},{"n":"Saint-Pierre-du-Mont","c":"France","y":43.8825,"x":-0.5194},{"n":"Lapinlahti","c":"Finland","y":63.3667,"x":27.3833},{"n":"Alkhan-Yurt","c":"Russia","y":43.2317,"x":45.5722},{"n":"Tarhjicht","c":"Morocco","y":29.0565,"x":-9.428},{"n":"Darabani","c":"Romania","y":48.1864,"x":26.5892},{"n":"Ruffano","c":"Italy","y":39.9833,"x":18.25},{"n":"Magnago","c":"Italy","y":45.5792,"x":8.8025},{"n":"Campobello di Licata","c":"Italy","y":37.2594,"x":13.9192},{"n":"Boves","c":"Italy","y":44.3333,"x":7.55},{"n":"Alcoa","c":"United States","y":35.8073,"x":-83.9752},{"n":"Vlist","c":"Netherlands","y":51.9867,"x":4.7889},{"n":"Boudinar","c":"Morocco","y":35.2001,"x":-3.6429},{"n":"Fernan-Nunez","c":"Spain","y":37.6667,"x":-4.7167},{"n":"Lake Arbor","c":"United States","y":38.907,"x":-76.8299},{"n":"Rute","c":"Spain","y":37.3167,"x":-4.3667},{"n":"Ii","c":"Finland","y":65.3167,"x":25.3722},{"n":"Garden Acres","c":"United States","y":37.9637,"x":-121.2296},{"n":"Toging am Inn","c":"Germany","y":48.272,"x":12.6059},{"n":"Miandasht","c":"Iran","y":33.0736,"x":50.1647},{"n":"Bad Konig","c":"Germany","y":49.7413,"x":9.0071},{"n":"Pasian di Prato","c":"Italy","y":46.05,"x":13.2},{"n":"Oued Laou","c":"Morocco","y":35.45,"x":-5.0833},{"n":"Mont-Saint-Martin","c":"France","y":49.5406,"x":5.7794},{"n":"Blain","c":"France","y":47.4761,"x":-1.7636},{"n":"Pereshchepyne","c":"Ukraine","y":49.0179,"x":35.3598},{"n":"Anisio de Abreu","c":"Brazil","y":-9.1889,"x":-43.0458},{"n":"Daruvar","c":"Croatia","y":45.6,"x":17.2167},{"n":"Santa Cruz Atizapan","c":"Mexico","y":19.1756,"x":-99.4886},{"n":"Dongcha","c":"China","y":34.38,"x":106.6623},{"n":"Goldenstedt","c":"Germany","y":52.7833,"x":8.4167},{"n":"Liesveld","c":"Netherlands","y":51.9156,"x":4.8456},{"n":"Orland","c":"United States","y":39.7461,"x":-122.1856},{"n":"Cuicatlan","c":"Mexico","y":17.7255,"x":-96.9222},{"n":"Fouesnant","c":"France","y":47.8933,"x":-4.0122},{"n":"Itatiaiucu","c":"Brazil","y":-20.1969,"x":-44.4208},{"n":"Helotes","c":"United States","y":29.5693,"x":-98.6956},{"n":"Saint-Jean-le-Blanc","c":"France","y":47.8919,"x":1.9172},{"n":"Sorkheh","c":"Iran","y":35.4633,"x":53.2139},{"n":"Leppavirta","c":"Finland","y":62.4917,"x":27.7875},{"n":"Mareno di Piave","c":"Italy","y":45.8409,"x":12.352},{"n":"Aytre","c":"France","y":46.1342,"x":-1.1144},{"n":"Bee Ridge","c":"United States","y":27.2855,"x":-82.4731},{"n":"Gessate","c":"Italy","y":45.55,"x":9.4333},{"n":"Ploermel","c":"France","y":47.9317,"x":-2.3975},{"n":"Haddington","c":"United Kingdom","y":55.958,"x":-2.774},{"n":"Constantina","c":"Brazil","y":-27.735,"x":-52.9919},{"n":"Frickenhausen","c":"Germany","y":48.5928,"x":9.3611},{"n":"Monte Escobedo","c":"Mexico","y":22.3,"x":-103.5667},{"n":"Amatenango del Valle","c":"Mexico","y":16.5333,"x":-92.4333},{"n":"Sande","c":"Norway","y":59.5936,"x":10.2076},{"n":"Merville","c":"France","y":50.6439,"x":2.6403},{"n":"Liminka","c":"Finland","y":64.8083,"x":25.4167},{"n":"Estavayer-le-Lac","c":"Switzerland","y":46.85,"x":6.8472},{"n":"Key Largo","c":"United States","y":25.1224,"x":-80.412},{"n":"Masquefa","c":"Spain","y":41.5036,"x":1.8136},{"n":"Kourimat","c":"Morocco","y":31.4569,"x":-9.3131},{"n":"Ribadeo","c":"Spain","y":43.5336,"x":-7.0403},{"n":"Lambesc","c":"France","y":43.6539,"x":5.2619},{"n":"Piedras Blancas","c":"Spain","y":43.56,"x":-5.976},{"n":"Boucau","c":"France","y":43.5236,"x":-1.4867},{"n":"Saint-Doulchard","c":"France","y":47.0997,"x":2.3728},{"n":"Nea Moudania","c":"Greece","y":40.2386,"x":23.2814},{"n":"Outa Bouabane","c":"Morocco","y":34.2606,"x":-4.4139},{"n":"Westphalia","c":"United States","y":38.8385,"x":-76.8231},{"n":"Worth","c":"United Kingdom","y":51.113,"x":-0.147},{"n":"Umburetama","c":"Brazil","y":-7.6958,"x":-35.6639},{"n":"Conselice","c":"Italy","y":44.5167,"x":11.8333},{"n":"Foix","c":"France","y":42.9653,"x":1.6069},{"n":"Wabash","c":"United States","y":40.8034,"x":-85.8301},{"n":"Pokrovske","c":"Ukraine","y":47.9853,"x":36.2367},{"n":"Saint-Remy-de-Provence","c":"France","y":43.7894,"x":4.8317},{"n":"Zell am See","c":"Austria","y":47.3233,"x":12.7981},{"n":"Gunnedah","c":"Australia","y":-30.9667,"x":150.25},{"n":"Zaozersk","c":"Russia","y":69.4,"x":32.45},{"n":"East Bradford","c":"United States","y":39.959,"x":-75.6469},{"n":"Novyye Atagi","c":"Russia","y":43.1328,"x":45.7797},{"n":"Bad Breisig","c":"Germany","y":50.5092,"x":7.2964},{"n":"Saint-Lys","c":"France","y":43.5142,"x":1.1775},{"n":"Montescaglioso","c":"Italy","y":40.55,"x":16.6667},{"n":"Garliava","c":"Lithuania","y":54.8167,"x":23.8667},{"n":"Bad Gandersheim","c":"Germany","y":51.8719,"x":10.0253},{"n":"Deruta","c":"Italy","y":42.9833,"x":12.4167},{"n":"Winterville","c":"United States","y":35.5287,"x":-77.3994},{"n":"Capim Branco","c":"Brazil","y":-19.5489,"x":-44.1169},{"n":"Ilsfeld","c":"Germany","y":49.05,"x":9.25},{"n":"Pia","c":"France","y":42.7447,"x":2.9208},{"n":"Bogande","c":"Burkina Faso","y":12.9714,"x":-0.1436},{"n":"Urzhum","c":"Russia","y":57.1167,"x":50},{"n":"Byalynichy","c":"Belarus","y":53.9956,"x":29.7096},{"n":"Ramsey","c":"United Kingdom","y":52.45,"x":-0.12},{"n":"Castel Bolognese","c":"Italy","y":44.3167,"x":11.8},{"n":"Porto Rafti","c":"Greece","y":37.8844,"x":24.0125},{"n":"Cosne sur Loire","c":"France","y":47.4103,"x":2.925},{"n":"Jilotlan de los Dolores","c":"Mexico","y":19.3708,"x":-103.0197},{"n":"Vargem","c":"Brazil","y":-22.8889,"x":-46.4139},{"n":"Celebration","c":"United States","y":28.3102,"x":-81.551},{"n":"Saarijarvi","c":"Finland","y":62.7056,"x":25.2569},{"n":"Arteaga","c":"Mexico","y":25.4453,"x":-100.8467},{"n":"Temiskaming Shores","c":"Canada","y":47.5167,"x":-79.6833},{"n":"Wilnecote","c":"United Kingdom","y":52.6081,"x":-1.6677},{"n":"Carregal do Sal","c":"Portugal","y":40.4333,"x":-8},{"n":"Towcester","c":"United Kingdom","y":52.13,"x":-0.99},{"n":"Caldas de Reyes","c":"Spain","y":42.6028,"x":-8.6383},{"n":"St. Albans","c":"United States","y":38.3769,"x":-81.8198},{"n":"Altmunster","c":"Austria","y":47.9,"x":13.7667},{"n":"Talachyn","c":"Belarus","y":54.4167,"x":29.7},{"n":"Berd","c":"Armenia","y":40.8808,"x":45.3917},{"n":"Poggio Renatico","c":"Italy","y":44.765,"x":11.4833},{"n":"Fallanden","c":"Switzerland","y":47.3717,"x":8.64},{"n":"Mirante","c":"Brazil","y":-14.2419,"x":-40.7728},{"n":"Margarita","c":"Colombia","y":9.1531,"x":-74.2881},{"n":"Monticello Conte Otto","c":"Italy","y":45.6,"x":11.5833},{"n":"Osthofen","c":"Germany","y":49.7078,"x":8.3289},{"n":"Pantano Grande","c":"Brazil","y":-30.1908,"x":-52.3739},{"n":"Trancoso","c":"Portugal","y":40.7833,"x":-7.35},{"n":"Oulunsalo","c":"Finland","y":64.9333,"x":25.4167},{"n":"Berwick","c":"United States","y":41.0555,"x":-76.2492},{"n":"Grossrohrsdorf","c":"Germany","y":51.1419,"x":14.0139},{"n":"Lago Ranco","c":"Chile","y":-40.3167,"x":-72.5},{"n":"Nong Wua So","c":"Thailand","y":17.1625,"x":102.5728},{"n":"Alachua","c":"United States","y":29.7778,"x":-82.4831},{"n":"Magny-les-Hameaux","c":"France","y":48.7239,"x":2.0842},{"n":"Aarburg","c":"Switzerland","y":47.3206,"x":7.9014},{"n":"San Giovanni in Marignano","c":"Italy","y":43.9393,"x":12.7137},{"n":"Nea Artaki","c":"Greece","y":38.5167,"x":23.6333},{"n":"Kinnelon","c":"United States","y":40.9847,"x":-74.3862},{"n":"Worsborough","c":"United Kingdom","y":53.52,"x":-1.47},{"n":"Ventnor City","c":"United States","y":39.3457,"x":-74.486},{"n":"Colts Neck","c":"United States","y":40.2928,"x":-74.168},{"n":"Fuente Palmera","c":"Spain","y":37.7,"x":-5.1},{"n":"Rockcreek","c":"United States","y":45.5525,"x":-122.8757},{"n":"Bellinzago Novarese","c":"Italy","y":45.5833,"x":8.6333},{"n":"Qiziltepa","c":"Uzbekistan","y":40.0319,"x":64.8492},{"n":"Mezobereny","c":"Hungary","y":46.8256,"x":21.0289},{"n":"Resana","c":"Italy","y":45.6333,"x":11.95},{"n":"Chimay","c":"Belgium","y":50.0479,"x":4.3173},{"n":"Rothrist","c":"Switzerland","y":47.3028,"x":7.8833},{"n":"Emmett","c":"United States","y":43.8685,"x":-116.489},{"n":"Brandis","c":"Germany","y":51.3347,"x":12.6089},{"n":"Sugar Grove","c":"United States","y":41.7758,"x":-88.448},{"n":"Kushnarenkovo","c":"Russia","y":55.1049,"x":55.3479},{"n":"Beuvry","c":"France","y":50.5197,"x":2.6794},{"n":"Bockenem","c":"Germany","y":52.0117,"x":10.1319},{"n":"River Grove","c":"United States","y":41.9243,"x":-87.8379},{"n":"Toudja","c":"Algeria","y":36.7586,"x":4.8933},{"n":"Revel","c":"France","y":43.4586,"x":2.0042},{"n":"Hinton","c":"Canada","y":53.4114,"x":-117.5639},{"n":"Zinkiv","c":"Ukraine","y":50.2081,"x":34.3668},{"n":"Saint-Sauveur","c":"Canada","y":45.9,"x":-74.17},{"n":"Great Billing","c":"United Kingdom","y":52.2577,"x":-0.8222},{"n":"Titu","c":"Romania","y":44.6622,"x":25.5736},{"n":"Lucon","c":"France","y":46.4547,"x":-1.1658},{"n":"Quesnel","c":"Canada","y":52.9784,"x":-122.4927},{"n":"South Lebanon","c":"United States","y":40.3058,"x":-76.3708},{"n":"Torrinha","c":"Brazil","y":-22.4258,"x":-48.1689},{"n":"Mora","c":"Spain","y":39.684,"x":-3.777},{"n":"Varna","c":"Russia","y":53.3819,"x":60.9747},{"n":"Ruoqiang","c":"China","y":39.0181,"x":88.1681},{"n":"Pierrelaye","c":"France","y":49.0225,"x":2.1503},{"n":"Ashukino","c":"Russia","y":56.1667,"x":37.95},{"n":"Norosi","c":"Colombia","y":8.5261,"x":-74.0378},{"n":"Dodworth","c":"United Kingdom","y":53.5417,"x":-1.5214},{"n":"Pingree Grove","c":"United States","y":42.0857,"x":-88.4362},{"n":"Ellon","c":"United Kingdom","y":57.366,"x":-2.086},{"n":"Fort Irwin","c":"United States","y":35.2476,"x":-116.6834},{"n":"Sherborne","c":"United Kingdom","y":50.9469,"x":-2.5171},{"n":"Ananas","c":"Brazil","y":-6.3658,"x":-48.0728},{"n":"Vries","c":"Netherlands","y":53.0733,"x":6.5769},{"n":"Matadepera","c":"Spain","y":41.6036,"x":2.0244},{"n":"Serafimovskiy","c":"Russia","y":54.4242,"x":53.7964},{"n":"Nueva Guadalupe","c":"El Salvador","y":13.5333,"x":-88.35},{"n":"Bueng Khong Long","c":"Thailand","y":17.9684,"x":104.0484},{"n":"Kobeliaky","c":"Ukraine","y":49.1474,"x":34.1993},{"n":"Beilngries","c":"Germany","y":49.0342,"x":11.4726},{"n":"Berezivka","c":"Ukraine","y":47.2039,"x":30.9125},{"n":"Gudensberg","c":"Germany","y":51.1762,"x":9.3575},{"n":"Makariv","c":"Ukraine","y":50.4667,"x":29.8167},{"n":"Sarapui","c":"Brazil","y":-23.6408,"x":-47.825},{"n":"Belomorsk","c":"Russia","y":64.5167,"x":34.7667},{"n":"Broni","c":"Italy","y":45.0619,"x":9.2611},{"n":"Ellisville","c":"United States","y":38.5897,"x":-90.5884},{"n":"Piombino Dese","c":"Italy","y":45.6,"x":11.9333},{"n":"Muurame","c":"Finland","y":62.1292,"x":25.6722},{"n":"Litovel","c":"Czechia","y":49.7012,"x":17.0762},{"n":"La Salvetat-Saint-Gilles","c":"France","y":43.5761,"x":1.2714},{"n":"Madera Acres","c":"United States","y":37.0123,"x":-120.0799},{"n":"Bad Liebenzell","c":"Germany","y":48.7742,"x":8.7314},{"n":"Roztoky","c":"Czechia","y":50.1585,"x":14.3977},{"n":"Gloucester Point","c":"United States","y":37.2767,"x":-76.5043},{"n":"Elizabethtown-Kitley","c":"Canada","y":44.7,"x":-75.8833},{"n":"Photharam","c":"Thailand","y":13.6918,"x":99.8531},{"n":"Pluderhausen","c":"Germany","y":48.795,"x":9.6011},{"n":"Brandywine","c":"United States","y":38.6963,"x":-76.8846},{"n":"Morinville","c":"Canada","y":53.8022,"x":-113.6497},{"n":"Chom Thong","c":"Thailand","y":18.418,"x":98.6758},{"n":"Hohr-Grenzhausen","c":"Germany","y":50.435,"x":7.6711},{"n":"La Tour-du-Pin","c":"France","y":45.5658,"x":5.445},{"n":"Mikun","c":"Russia","y":62.35,"x":50.0667},{"n":"Hateg","c":"Romania","y":45.6075,"x":22.95},{"n":"Veauche","c":"France","y":45.5619,"x":4.2781},{"n":"Brewster","c":"United States","y":41.7463,"x":-70.0675},{"n":"T'q'ibuli","c":"Georgia","y":42.3503,"x":42.9983},{"n":"Artigues-pres-Bordeaux","c":"France","y":44.8606,"x":-0.4936},{"n":"Oldenburg in Holstein","c":"Germany","y":54.2922,"x":10.8867},{"n":"Nersingen","c":"Germany","y":48.4289,"x":10.1219},{"n":"Saint-Barthelemy-d'Anjou","c":"France","y":47.4675,"x":-0.495},{"n":"Matamata","c":"New Zealand","y":-37.8097,"x":175.7733},{"n":"Carroll","c":"United States","y":42.0699,"x":-94.8647},{"n":"Carlton Colville","c":"United Kingdom","y":52.454,"x":1.691},{"n":"Schlitz","c":"Germany","y":50.6759,"x":9.5593},{"n":"Zorneding","c":"Germany","y":48.0833,"x":11.8333},{"n":"Port Townsend","c":"United States","y":48.122,"x":-122.7872},{"n":"Ban Krot","c":"Thailand","y":14.3121,"x":100.6005},{"n":"Coffeyville","c":"United States","y":37.0518,"x":-95.618},{"n":"Suntar","c":"Russia","y":62.1575,"x":117.6442},{"n":"Heilsbronn","c":"Germany","y":49.3386,"x":10.7908},{"n":"Osterburg","c":"Germany","y":52.7833,"x":11.7667},{"n":"Lake Barcroft","c":"United States","y":38.8514,"x":-77.1579},{"n":"Burtonsville","c":"United States","y":39.1166,"x":-76.9356},{"n":"Skopin","c":"Russia","y":53.8167,"x":39.55},{"n":"Wamel","c":"Netherlands","y":51.88,"x":5.4692},{"n":"Robertsdale","c":"United States","y":30.5534,"x":-87.7023},{"n":"Halikko","c":"Finland","y":60.3972,"x":23.0778},{"n":"Triuggio","c":"Italy","y":45.6667,"x":9.2667},{"n":"Aizenay","c":"France","y":46.74,"x":-1.6083},{"n":"Almusafes","c":"Spain","y":39.2903,"x":-0.4147},{"n":"Dolianova","c":"Italy","y":39.3785,"x":9.1784},{"n":"Mozzate","c":"Italy","y":45.6833,"x":8.95},{"n":"Masku","c":"Finland","y":60.5708,"x":22.1},{"n":"Baker City","c":"United States","y":44.7749,"x":-117.832},{"n":"Dorogobuzh","c":"Russia","y":54.92,"x":33.3078},{"n":"Tisnov","c":"Czechia","y":49.3487,"x":16.4244},{"n":"Totma","c":"Russia","y":59.9833,"x":42.7667},{"n":"Sorbolo","c":"Italy","y":44.8463,"x":10.4486},{"n":"Everswinkel","c":"Germany","y":51.925,"x":7.8478},{"n":"Vardenik","c":"Armenia","y":40.135,"x":45.4364},{"n":"Florania","c":"Brazil","y":-6.1269,"x":-36.8178},{"n":"Cobham","c":"United Kingdom","y":51.329,"x":-0.409},{"n":"Chiang Klang","c":"Thailand","y":19.2939,"x":100.8617},{"n":"Itasca","c":"United States","y":41.9773,"x":-88.0182},{"n":"Grey Highlands","c":"Canada","y":44.3333,"x":-80.5},{"n":"Atherstone","c":"United Kingdom","y":52.5787,"x":-1.5462},{"n":"Sidi Bou Othmane","c":"Morocco","y":31.9033,"x":-7.9422},{"n":"Ware","c":"United States","y":42.2806,"x":-72.2843},{"n":"Margny-les-Compiegne","c":"France","y":49.4261,"x":2.8208},{"n":"Folignano","c":"Italy","y":42.821,"x":13.6329},{"n":"Axixa do Tocantins","c":"Brazil","y":-5.6169,"x":-47.7689},{"n":"Thap Khlo","c":"Thailand","y":16.16,"x":100.5967},{"n":"Guntramsdorf","c":"Austria","y":48.0483,"x":16.315},{"n":"Villarrubia de los Ojos","c":"Spain","y":39.2167,"x":-3.6},{"n":"Tadla","c":"Morocco","y":32.4408,"x":-8.3708},{"n":"Leeton","c":"Australia","y":-34.5483,"x":146.4011},{"n":"Mentone","c":"United States","y":34.0609,"x":-117.1108},{"n":"Little River","c":"United States","y":33.8787,"x":-78.6393},{"n":"Alcarraz","c":"Spain","y":41.5638,"x":0.5241},{"n":"Mittagong","c":"Australia","y":-34.45,"x":150.45},{"n":"Biei","c":"Japan","y":43.5883,"x":142.4669},{"n":"Spelle","c":"Germany","y":52.3667,"x":7.4667},{"n":"Vega Alta","c":"Puerto Rico","y":18.4152,"x":-66.3211},{"n":"Cody","c":"United States","y":44.5212,"x":-109.0549},{"n":"Nyurba","c":"Russia","y":63.2833,"x":118.3333},{"n":"Conning Towers Nautilus Park","c":"United States","y":41.3855,"x":-72.0686},{"n":"Albano Sant'Alessandro","c":"Italy","y":45.6858,"x":9.7678},{"n":"Mae Rim","c":"Thailand","y":18.9163,"x":98.9605},{"n":"Ostercappeln","c":"Germany","y":52.35,"x":8.2333},{"n":"Treillieres","c":"France","y":47.3308,"x":-1.6267},{"n":"Matelica","c":"Italy","y":43.2566,"x":13.0096},{"n":"Aklim","c":"Morocco","y":34.9167,"x":-2.4333},{"n":"Flero","c":"Italy","y":45.4835,"x":10.1745},{"n":"Sorisole","c":"Italy","y":45.7375,"x":9.6564},{"n":"Souffelweyersheim","c":"France","y":48.635,"x":7.7408},{"n":"Aulnoye-Aymeries","c":"France","y":50.2047,"x":3.8356},{"n":"Aghbalou Aqourar","c":"Morocco","y":33.9342,"x":-4.7381},{"n":"Suzdal","c":"Russia","y":56.4211,"x":40.4489},{"n":"Kemberg","c":"Germany","y":51.7736,"x":12.6359},{"n":"George Mason","c":"United States","y":38.8355,"x":-77.3185},{"n":"Caturama","c":"Brazil","y":-13.3289,"x":-42.2908},{"n":"Hostotipaquillo","c":"Mexico","y":21.0588,"x":-104.0508},{"n":"Fort Salonga","c":"United States","y":40.906,"x":-73.2992},{"n":"Studenka","c":"Czechia","y":49.7234,"x":18.0786},{"n":"Tweed Heads","c":"Australia","y":-28.1833,"x":153.55},{"n":"Annan","c":"United Kingdom","y":54.983,"x":-3.266},{"n":"Podu Iloaiei","c":"Romania","y":47.2167,"x":27.2667},{"n":"Hattula","c":"Finland","y":61.0556,"x":24.3708},{"n":"Nordwalde","c":"Germany","y":52.0833,"x":7.4833},{"n":"Mendicino","c":"Italy","y":39.2628,"x":16.1945},{"n":"Sevilla La Nueva","c":"Spain","y":40.3475,"x":-4.0272},{"n":"North Bend","c":"United States","y":43.4075,"x":-124.2364},{"n":"Grimmen","c":"Germany","y":54.11,"x":13.0414},{"n":"Loria","c":"Italy","y":45.7333,"x":11.8667},{"n":"Redon","c":"France","y":47.6514,"x":-2.0847},{"n":"Basse-Goulaine","c":"France","y":47.2153,"x":-1.4656},{"n":"Wagner","c":"Brazil","y":-12.2869,"x":-41.1678},{"n":"Sarkad","c":"Hungary","y":46.74,"x":21.3778},{"n":"Philipsburg","c":"United States","y":40.8952,"x":-78.2145},{"n":"Denham Springs","c":"United States","y":30.4743,"x":-90.9594},{"n":"Cardeal da Silva","c":"Brazil","y":-11.9419,"x":-37.9489},{"n":"Glencoe","c":"New Zealand","y":-46.192,"x":168.646},{"n":"Scaggsville","c":"United States","y":39.1416,"x":-76.8843},{"n":"Corte Madera","c":"United States","y":37.9238,"x":-122.5129},{"n":"Umbrete","c":"Spain","y":37.3667,"x":-6.15},{"n":"Douar Lehouifrat","c":"Morocco","y":32.28,"x":-8.31},{"n":"Oberstdorf","c":"Germany","y":47.4097,"x":10.2792},{"n":"Akhuryan","c":"Armenia","y":40.781,"x":43.9001},{"n":"Jewett City","c":"United States","y":41.607,"x":-71.9807},{"n":"Cuero","c":"United States","y":29.1024,"x":-97.2871},{"n":"Fauske","c":"Norway","y":67.2596,"x":15.3941},{"n":"Argostoli","c":"Greece","y":38.1739,"x":20.4883},{"n":"Grado","c":"Spain","y":43.3881,"x":-6.0736},{"n":"Felpham","c":"United Kingdom","y":50.7905,"x":-0.6539},{"n":"Nopaltepec","c":"Mexico","y":19.7819,"x":-98.7125},{"n":"Sangeorz-Bai","c":"Romania","y":47.37,"x":24.68},{"n":"Ussel","c":"France","y":45.5481,"x":2.3092},{"n":"Sidi Ahmed El Khadir","c":"Morocco","y":32.5167,"x":-7.3833},{"n":"Budd Lake","c":"United States","y":40.8733,"x":-74.7374},{"n":"La Ravoire","c":"France","y":45.5569,"x":5.9664},{"n":"San Pedro","c":"Chile","y":-33.9,"x":-71.4667},{"n":"Vesele","c":"Ukraine","y":47.016,"x":34.9124},{"n":"Pizzo","c":"Italy","y":38.7333,"x":16.1667},{"n":"Nakao","c":"Japan","y":35.3308,"x":139.2189},{"n":"Columbia City","c":"United States","y":41.1612,"x":-85.4855},{"n":"Aleksandrov Gay","c":"Russia","y":50.1333,"x":48.55},{"n":"Punta del Este","c":"Uruguay","y":-34.9786,"x":-54.9331},{"n":"Voitsberg","c":"Austria","y":47.0483,"x":15.1503},{"n":"Yalaguina","c":"Nicaragua","y":13.4833,"x":-86.4833},{"n":"Zafferana Etnea","c":"Italy","y":37.6833,"x":15.1},{"n":"Kittery","c":"United States","y":43.0998,"x":-70.7126},{"n":"Nolinsk","c":"Russia","y":57.5572,"x":49.9342},{"n":"Ingre","c":"France","y":47.9206,"x":1.8242},{"n":"Liteni","c":"Romania","y":47.52,"x":26.5319},{"n":"Blacklick Estates","c":"United States","y":39.9049,"x":-82.8655},{"n":"Alsbach-Hahnlein","c":"Germany","y":49.7413,"x":8.6225},{"n":"Huaniqueo de Morales","c":"Mexico","y":19.8946,"x":-101.5122},{"n":"Idanha-a-Nova","c":"Portugal","y":39.9167,"x":-7.2333},{"n":"Bearsted","c":"United Kingdom","y":51.2738,"x":0.5789},{"n":"Farsund","c":"Norway","y":58.0828,"x":6.7528},{"n":"Halen","c":"Belgium","y":50.9481,"x":5.1144},{"n":"Bni Boufrah","c":"Morocco","y":35.0675,"x":-4.3206},{"n":"East Aurora","c":"United States","y":42.7666,"x":-78.6172},{"n":"Southwick","c":"United States","y":42.0544,"x":-72.7785},{"n":"Nove Mesto nad Metuji","c":"Czechia","y":50.3446,"x":16.1515},{"n":"Loudeac","c":"France","y":48.1778,"x":-2.7533},{"n":"Heiligenhafen","c":"Germany","y":54.3739,"x":10.9797},{"n":"Shchuchye","c":"Russia","y":55.2167,"x":62.7667},{"n":"Akabira","c":"Japan","y":43.5581,"x":142.0442},{"n":"Rio Vista","c":"United States","y":38.1763,"x":-121.7025},{"n":"Imias","c":"Cuba","y":20.0767,"x":-74.6519},{"n":"Dungarvan","c":"Ireland","y":52.0845,"x":-7.6397},{"n":"Herkimer","c":"United States","y":43.061,"x":-74.9894},{"n":"Philipstown","c":"United States","y":41.4188,"x":-73.9152},{"n":"Wehrheim","c":"Germany","y":50.3033,"x":8.571},{"n":"Eidson Road","c":"United States","y":28.6677,"x":-100.4787},{"n":"Dushanove","c":"Kosovo","y":42.2347,"x":20.7091},{"n":"Bisingen","c":"Germany","y":48.3119,"x":8.9178},{"n":"Ehningen","c":"Germany","y":48.6589,"x":8.9403},{"n":"Leguevin","c":"France","y":43.5989,"x":1.2331},{"n":"San Marzano di San Giuseppe","c":"Italy","y":40.45,"x":17.5},{"n":"Saint-Aubin-les-Elbeuf","c":"France","y":49.3003,"x":1.0111},{"n":"Lavis","c":"Italy","y":46.139,"x":11.1123},{"n":"Prospect","c":"United States","y":41.4993,"x":-72.976},{"n":"Plains","c":"United States","y":41.2658,"x":-75.8145},{"n":"Boaz","c":"United States","y":34.1985,"x":-86.1529},{"n":"Cuellar","c":"Spain","y":41.4009,"x":-4.3136},{"n":"Kawanishicho","c":"Japan","y":34.5844,"x":135.7742},{"n":"Benalla","c":"Australia","y":-36.5519,"x":145.9817},{"n":"Pleasant Valley","c":"United States","y":41.7697,"x":-73.805},{"n":"Foiano della Chiana","c":"Italy","y":43.2567,"x":11.8164},{"n":"Chesapeake Ranch Estates","c":"United States","y":38.3574,"x":-76.4147},{"n":"La Matanza de Acentejo","c":"Spain","y":28.4403,"x":-16.4389},{"n":"Countryside","c":"United States","y":39.0518,"x":-77.4124},{"n":"Porto Tolle","c":"Italy","y":44.95,"x":12.3167},{"n":"Matlock","c":"United Kingdom","y":53.14,"x":-1.55},{"n":"Cavriglia","c":"Italy","y":43.5216,"x":11.4864},{"n":"Maserada sul Piave","c":"Italy","y":45.75,"x":12.3167},{"n":"St. Francis","c":"United States","y":42.9716,"x":-87.8729},{"n":"Awans","c":"Belgium","y":50.6669,"x":5.4633},{"n":"Holywell","c":"United Kingdom","y":53.274,"x":-3.223},{"n":"Alhendin","c":"Spain","y":37.1167,"x":-3.65},{"n":"Pasil","c":"Philippines","y":17.3833,"x":121.15},{"n":"Schmitten","c":"Germany","y":50.2697,"x":8.4443},{"n":"Kola","c":"Russia","y":68.8831,"x":33.0219},{"n":"Hohenmolsen","c":"Germany","y":51.1564,"x":12.0981},{"n":"Seysses","c":"France","y":43.4981,"x":1.3125},{"n":"Formoso","c":"Brazil","y":-14.9469,"x":-46.2319},{"n":"Tzitzio","c":"Mexico","y":19.4449,"x":-100.9085},{"n":"Visselhovede","c":"Germany","y":52.9833,"x":9.6},{"n":"Dassel","c":"Germany","y":51.8033,"x":9.6903},{"n":"Holualoa","c":"United States","y":19.6238,"x":-155.9269},{"n":"Immingham","c":"United Kingdom","y":53.6139,"x":-0.2183},{"n":"Bersted","c":"United Kingdom","y":50.797,"x":-0.689},{"n":"Swanage","c":"United Kingdom","y":50.608,"x":-1.96},{"n":"East Rutherford","c":"United States","y":40.8179,"x":-74.0854},{"n":"Pechory","c":"Russia","y":57.8167,"x":27.6},{"n":"Frei Inocencio","c":"Brazil","y":-18.545,"x":-41.9219},{"n":"Valerik","c":"Russia","y":43.1797,"x":45.4081},{"n":"Fort Valley","c":"United States","y":32.552,"x":-83.8819},{"n":"Joigny","c":"France","y":47.9822,"x":3.3972},{"n":"Castelleone","c":"Italy","y":45.2958,"x":9.7609},{"n":"Laubach","c":"Germany","y":50.5426,"x":8.9891},{"n":"Alfred and Plantagenet","c":"Canada","y":45.5667,"x":-74.9167},{"n":"West Tawakoni","c":"United States","y":32.8976,"x":-96.0217},{"n":"Irigny","c":"France","y":45.6731,"x":4.8225},{"n":"Ilsenburg","c":"Germany","y":51.8667,"x":10.6833},{"n":"Tryavna","c":"Bulgaria","y":42.8667,"x":25.4919},{"n":"Olivares","c":"Spain","y":37.4167,"x":-6.15},{"n":"Schonwalde-Siedlung","c":"Germany","y":52.65,"x":12.9833},{"n":"Monte Porzio Catone","c":"Italy","y":41.8167,"x":12.7167},{"n":"Khodoriv","c":"Ukraine","y":49.41,"x":24.3094},{"n":"Antonio Dias","c":"Brazil","y":-19.6528,"x":-42.8719},{"n":"Marlton","c":"United States","y":39.9016,"x":-74.9297},{"n":"Attnang-Puchheim","c":"Austria","y":48.0167,"x":13.7167},{"n":"Ledbury","c":"United Kingdom","y":52.0339,"x":-2.4235},{"n":"Krasnogvardeyskoye","c":"Russia","y":45.1278,"x":39.5725},{"n":"Ayntap","c":"Armenia","y":40.0986,"x":44.4681},{"n":"Nepi","c":"Italy","y":42.2436,"x":12.3464},{"n":"Fiesso d'Artico","c":"Italy","y":45.4167,"x":12.0333},{"n":"Douar Messassa","c":"Morocco","y":34.2803,"x":-4.5336},{"n":"Lesquin","c":"France","y":50.5897,"x":3.1111},{"n":"Alfaro","c":"Spain","y":42.1783,"x":-1.7492},{"n":"Stary Sacz","c":"Poland","y":49.5625,"x":20.6364},{"n":"Candiota","c":"Brazil","y":-31.5578,"x":-53.6728},{"n":"Rio del Mar","c":"United States","y":36.9607,"x":-121.8807},{"n":"La Victoria de Acentejo","c":"Spain","y":28.4348,"x":-16.4682},{"n":"Brand-Erbisdorf","c":"Germany","y":50.8689,"x":13.3219},{"n":"Harsova","c":"Romania","y":44.6833,"x":27.9519},{"n":"Couzeix","c":"France","y":45.8761,"x":1.2386},{"n":"Solsona","c":"Spain","y":41.9944,"x":1.5178},{"n":"Oulad Imloul","c":"Morocco","y":32.0333,"x":-7.7167},{"n":"Picture Rocks","c":"United States","y":32.3274,"x":-111.2557},{"n":"Aguia Branca","c":"Brazil","y":-18.9828,"x":-40.74},{"n":"Besozzo","c":"Italy","y":45.85,"x":8.6667},{"n":"Zwiesel","c":"Germany","y":49.0167,"x":13.2333},{"n":"Cameron","c":"United States","y":39.7469,"x":-94.2364},{"n":"Pinhel","c":"Portugal","y":40.7833,"x":-7.0667},{"n":"Traversetolo","c":"Italy","y":44.6399,"x":10.3818},{"n":"Masera di Padova","c":"Italy","y":45.3167,"x":11.8667},{"n":"Mont-Tremblant","c":"Canada","y":46.1167,"x":-74.6},{"n":"Martensville","c":"Canada","y":52.2897,"x":-106.6667},{"n":"Barleben","c":"Germany","y":52.2,"x":11.6333},{"n":"Fort Stewart","c":"United States","y":31.8818,"x":-81.6105},{"n":"Costa Volpino","c":"Italy","y":45.8306,"x":10.0992},{"n":"Port Wentworth","c":"United States","y":32.1942,"x":-81.1984},{"n":"Yorkshire","c":"United States","y":38.7882,"x":-77.4495},{"n":"Uracoa","c":"Venezuela","y":8.9996,"x":-62.3516},{"n":"Scionzier","c":"France","y":46.0572,"x":6.55},{"n":"Hermantown","c":"United States","y":46.8058,"x":-92.2407},{"n":"Zadonsk","c":"Russia","y":52.3833,"x":38.9167},{"n":"Irthlingborough","c":"United Kingdom","y":52.324,"x":-0.614},{"n":"Striano","c":"Italy","y":40.8167,"x":14.5667},{"n":"Twist","c":"Germany","y":52.6167,"x":7.0333},{"n":"Alcanar","c":"Spain","y":40.543,"x":0.4808},{"n":"Manduri","c":"Brazil","y":-23.0033,"x":-49.3219},{"n":"Coleford","c":"United Kingdom","y":51.791,"x":-2.6162},{"n":"Cold Springs","c":"United States","y":39.6927,"x":-119.9775},{"n":"Golbey","c":"France","y":48.1958,"x":6.4372},{"n":"Powdersville","c":"United States","y":34.7825,"x":-82.4958},{"n":"La Plata","c":"United States","y":38.5352,"x":-76.9701},{"n":"Merrill","c":"United States","y":45.182,"x":-89.6995},{"n":"Luckau","c":"Germany","y":51.85,"x":13.7167},{"n":"Oststeinbek","c":"Germany","y":53.5442,"x":10.1664},{"n":"Bithlo","c":"United States","y":28.5644,"x":-81.1074},{"n":"Penn Forest","c":"United States","y":40.9571,"x":-75.6313},{"n":"Rondon","c":"Brazil","y":-23.4108,"x":-52.7608},{"n":"Gatteo","c":"Italy","y":44.1,"x":12.3833},{"n":"Landivisiau","c":"France","y":48.5092,"x":-4.0683},{"n":"Santa Lucia di Piave","c":"Italy","y":45.85,"x":12.2833},{"n":"Chevy Chase","c":"United States","y":38.9943,"x":-77.0737},{"n":"Borogani","c":"Moldova","y":46.5028,"x":28.5442},{"n":"Wadebridge","c":"United Kingdom","y":50.517,"x":-4.835},{"n":"San Juan del Puerto","c":"Spain","y":37.3167,"x":-6.8333},{"n":"Paula Candido","c":"Brazil","y":-20.8739,"x":-42.98},{"n":"Worpswede","c":"Germany","y":53.2222,"x":8.9278},{"n":"Elsenfeld","c":"Germany","y":49.85,"x":9.1667},{"n":"Zschopau","c":"Germany","y":50.75,"x":13.0667},{"n":"Trebbin","c":"Germany","y":52.2167,"x":13.1997},{"n":"Valsequillo de Gran Canaria","c":"Spain","y":27.9808,"x":-15.4989},{"n":"Sierning","c":"Austria","y":48.0447,"x":14.31},{"n":"Wilmore","c":"United States","y":37.8786,"x":-84.6545},{"n":"Saint-Raymond","c":"Canada","y":46.9,"x":-71.8333},{"n":"Bilozerka","c":"Ukraine","y":46.6333,"x":32.4333},{"n":"San Pedro Ixtlahuaca","c":"Mexico","y":17.05,"x":-96.8167},{"n":"Audley","c":"United Kingdom","y":53.053,"x":-2.304},{"n":"Saint-Sulpice-la-Pointe","c":"France","y":43.7742,"x":1.6864},{"n":"Rainbow City","c":"United States","y":33.9337,"x":-86.0922},{"n":"Levokumskoye","c":"Russia","y":44.8225,"x":44.6611},{"n":"Saint-Pierre-les-Elbeuf","c":"France","y":49.2775,"x":1.0406},{"n":"Brugnera","c":"Italy","y":45.9,"x":12.5333},{"n":"Mizhhiria","c":"Ukraine","y":48.5286,"x":23.5019},{"n":"Velyka Dymerka","c":"Ukraine","y":50.5928,"x":30.9103},{"n":"Miajadas","c":"Spain","y":39.15,"x":-6.0667},{"n":"Santiponce","c":"Spain","y":37.4353,"x":-6.0433},{"n":"Blackhawk","c":"United States","y":37.816,"x":-121.9071},{"n":"Palmeira d'Oeste","c":"Brazil","y":-20.4158,"x":-50.7619},{"n":"Libercourt","c":"France","y":50.4839,"x":3.0139},{"n":"Emu Plains","c":"Australia","y":-33.7483,"x":150.6678},{"n":"Ubbergen","c":"Netherlands","y":51.8333,"x":5.9167},{"n":"Hope","c":"United States","y":33.6682,"x":-93.5895},{"n":"Roxboro","c":"United States","y":36.3879,"x":-78.9812},{"n":"Cebazat","c":"France","y":45.8314,"x":3.1},{"n":"Sarahs","c":"Turkmenistan","y":36.5167,"x":61.2167},{"n":"Bishop","c":"United States","y":37.3665,"x":-118.3958},{"n":"Kanchanadit","c":"Thailand","y":9.1653,"x":99.4706},{"n":"Breuillet","c":"France","y":48.5661,"x":2.1714},{"n":"Tatoufet","c":"Morocco","y":35.0339,"x":-5.7706},{"n":"Pizarra","c":"Spain","y":36.7667,"x":-4.7},{"n":"Puebla del Caraminal","c":"Spain","y":42.6,"x":-8.933},{"n":"Cepin","c":"Croatia","y":45.5236,"x":18.5633},{"n":"Obersiggenthal","c":"Switzerland","y":47.4869,"x":8.2921},{"n":"Valreas","c":"France","y":44.3842,"x":4.9903},{"n":"Sankt Johann in Tirol","c":"Austria","y":47.5225,"x":12.4256},{"n":"St. Pete Beach","c":"United States","y":27.7235,"x":-82.7387},{"n":"Rice Lake","c":"United States","y":45.4863,"x":-91.7447},{"n":"Lototla","c":"Mexico","y":20.8392,"x":-98.7178},{"n":"Hayle","c":"United Kingdom","y":50.183,"x":-5.416},{"n":"Zawyat Sidi Ben Hamdoun","c":"Morocco","y":33.045,"x":-7.9292},{"n":"Bang Khla","c":"Thailand","y":13.7268,"x":101.2105},{"n":"Bakaly","c":"Russia","y":55.1764,"x":53.8026},{"n":"Bunol","c":"Spain","y":39.4194,"x":-0.7906},{"n":"La Grande-Motte","c":"France","y":43.5606,"x":4.085},{"n":"Manuel Urbano","c":"Brazil","y":-8.8389,"x":-69.26},{"n":"North Gates","c":"United States","y":43.1718,"x":-77.7064},{"n":"Bezliudivka","c":"Ukraine","y":49.8694,"x":36.2719},{"n":"Vares","c":"Bosnia And Herzegovina","y":44.1644,"x":18.3283},{"n":"Reinfeld","c":"Germany","y":53.8333,"x":10.4833},{"n":"Gore","c":"Ethiopia","y":8.149,"x":35.537},{"n":"Altlandsberg","c":"Germany","y":52.5667,"x":13.7331},{"n":"Alderwood Manor","c":"United States","y":47.8147,"x":-122.2672},{"n":"Thurso","c":"United Kingdom","y":58.596,"x":-3.521},{"n":"Ingenbohl","c":"Switzerland","y":47.0028,"x":8.6117},{"n":"Niesky","c":"Germany","y":51.2897,"x":14.83},{"n":"Lwowek Slaski","c":"Poland","y":51.1167,"x":15.5833},{"n":"Capriate San Gervasio","c":"Italy","y":45.6089,"x":9.5281},{"n":"Bni Gmil","c":"Morocco","y":35.0675,"x":-4.4242},{"n":"Paray-le-Monial","c":"France","y":46.4511,"x":4.1194},{"n":"Sugbongkogon","c":"Philippines","y":8.95,"x":124.7833},{"n":"El Campo","c":"Spain","y":36.7522,"x":-2.6839},{"n":"Ehringshausen","c":"Germany","y":50.6,"x":8.3833},{"n":"Yamakita","c":"Japan","y":35.3606,"x":139.0839},{"n":"Casorate Primo","c":"Italy","y":45.3167,"x":9.0167},{"n":"Tombos","c":"Brazil","y":-20.905,"x":-42.0228},{"n":"Ecorse","c":"United States","y":42.2489,"x":-83.1399},{"n":"Ouroeste","c":"Brazil","y":-20.0008,"x":-50.3719},{"n":"Harleysville","c":"United States","y":40.2791,"x":-75.3872},{"n":"Schubelbach","c":"Switzerland","y":47.1733,"x":8.9264},{"n":"Reichenbach an der Fils","c":"Germany","y":48.71,"x":9.4661},{"n":"Tanudan","c":"Philippines","y":17.3,"x":121.2333},{"n":"Treorchy","c":"United Kingdom","y":51.6594,"x":-3.5055},{"n":"The Village","c":"United States","y":35.5706,"x":-97.5567},{"n":"Oudenburg","c":"Belgium","y":51.1833,"x":3},{"n":"Langnau","c":"Switzerland","y":46.9433,"x":7.7853},{"n":"Furstenau","c":"Germany","y":52.5167,"x":7.6667},{"n":"Japura","c":"Brazil","y":-23.47,"x":-52.5528},{"n":"Senmanat","c":"Spain","y":41.6086,"x":2.1358},{"n":"Burela de Cabo","c":"Spain","y":43.65,"x":-7.4},{"n":"Chita","c":"Colombia","y":6.1878,"x":-72.4725},{"n":"Edeleny","c":"Hungary","y":48.2967,"x":20.7442},{"n":"Eagle Point","c":"United States","y":42.4677,"x":-122.8016},{"n":"Alayor","c":"Spain","y":39.9342,"x":4.14},{"n":"Craig","c":"United States","y":40.517,"x":-107.5555},{"n":"Willoughby Hills","c":"United States","y":41.5873,"x":-81.4333},{"n":"Nalbach","c":"Germany","y":49.3833,"x":6.7833},{"n":"Voreppe","c":"France","y":45.2978,"x":5.6369},{"n":"Castel Gandolfo","c":"Italy","y":41.7469,"x":12.6519},{"n":"Pohrebyshche","c":"Ukraine","y":49.4869,"x":29.2733},{"n":"Walterboro","c":"United States","y":32.901,"x":-80.676},{"n":"Hazle","c":"United States","y":40.9561,"x":-75.9992},{"n":"Amherst","c":"Canada","y":45.8167,"x":-64.2167},{"n":"Arenys de Munt","c":"Spain","y":41.6128,"x":2.5403},{"n":"Legnaro","c":"Italy","y":45.35,"x":11.9667},{"n":"White Meadow Lake","c":"United States","y":40.924,"x":-74.5121},{"n":"Sankt Valentin","c":"Austria","y":48.1747,"x":14.5333},{"n":"Istrana","c":"Italy","y":45.6833,"x":12.1},{"n":"Mount Vista","c":"United States","y":45.7373,"x":-122.6315},{"n":"Luchow","c":"Germany","y":52.9667,"x":11.15},{"n":"Fossombrone","c":"Italy","y":43.689,"x":12.8061},{"n":"El Amim","c":"Morocco","y":32.2064,"x":-7.2431},{"n":"Neuried","c":"Germany","y":48.0933,"x":11.4658},{"n":"Rehau","c":"Germany","y":50.2486,"x":12.0354},{"n":"Ecatzingo","c":"Mexico","y":18.95,"x":-98.75},{"n":"Ban Tha Phra","c":"Thailand","y":16.3298,"x":102.7998},{"n":"Silsbee","c":"United States","y":30.3456,"x":-94.1764},{"n":"Tadworth","c":"United Kingdom","y":51.294,"x":-0.242},{"n":"Sturbridge","c":"United States","y":42.1076,"x":-72.0904},{"n":"Sebnitz","c":"Germany","y":50.9667,"x":14.2833},{"n":"Viagrande","c":"Italy","y":37.6167,"x":15.1},{"n":"Orchies","c":"France","y":50.4747,"x":3.2442},{"n":"Burayevo","c":"Russia","y":55.8407,"x":55.4083},{"n":"Aragona","c":"Italy","y":37.4074,"x":13.6189},{"n":"Usworth","c":"United Kingdom","y":54.94,"x":-1.55},{"n":"Coulaines","c":"France","y":48.0267,"x":0.2042},{"n":"Harvard","c":"United States","y":42.43,"x":-88.6217},{"n":"Pagqen","c":"China","y":33.9739,"x":99.9083},{"n":"Villa Castelli","c":"Italy","y":40.5833,"x":17.4833},{"n":"Hostivice","c":"Czechia","y":50.0817,"x":14.2586},{"n":"Marnate","c":"Italy","y":45.6333,"x":8.9},{"n":"La Loggia","c":"Italy","y":44.9667,"x":7.6667},{"n":"Central City","c":"United States","y":37.2962,"x":-87.128},{"n":"Elne","c":"France","y":42.6003,"x":2.9711},{"n":"Shanklin","c":"United Kingdom","y":50.631,"x":-1.1734},{"n":"Obernkirchen","c":"Germany","y":52.2664,"x":9.1178},{"n":"Tell City","c":"United States","y":37.9528,"x":-86.7597},{"n":"Belley","c":"France","y":45.7592,"x":5.6881},{"n":"Odobesti","c":"Romania","y":45.7497,"x":27.1155},{"n":"Oberentfelden","c":"Switzerland","y":47.3597,"x":8.0486},{"n":"Sawbridgeworth","c":"United Kingdom","y":51.814,"x":0.15},{"n":"Aschheim","c":"Germany","y":48.1733,"x":11.7178},{"n":"Bansko","c":"Bulgaria","y":41.8385,"x":23.4888},{"n":"Neu Bleckede","c":"Germany","y":53.3,"x":10.7333},{"n":"Nueva Era","c":"Philippines","y":17.9167,"x":120.6667},{"n":"Lambertville","c":"United States","y":41.7502,"x":-83.625},{"n":"San Fausto de Campcentellas","c":"Spain","y":41.5061,"x":2.24},{"n":"Palomares del Rio","c":"Spain","y":37.3167,"x":-6.05},{"n":"Roxborough Park","c":"United States","y":39.4492,"x":-105.0746},{"n":"Colmenarejo","c":"Spain","y":40.5608,"x":-4.0169},{"n":"Rye Brook","c":"United States","y":41.0303,"x":-73.6865},{"n":"Reedsburg","c":"United States","y":43.5347,"x":-89.9965},{"n":"Gomaringen","c":"Germany","y":48.4519,"x":9.0997},{"n":"Cervera","c":"Spain","y":41.6657,"x":1.271},{"n":"Agudos do Sul","c":"Brazil","y":-25.9928,"x":-49.335},{"n":"Sassnitz","c":"Germany","y":54.5164,"x":13.6411},{"n":"Gonfreville-l'Orcher","c":"France","y":49.5053,"x":0.2331},{"n":"Zacualpan de Amilpas","c":"Mexico","y":18.7836,"x":-98.7594},{"n":"DuPont","c":"United States","y":47.1079,"x":-122.6496},{"n":"Runkel","c":"Germany","y":50.4053,"x":8.155},{"n":"Schaafheim","c":"Germany","y":49.9242,"x":9.0094},{"n":"Hebron","c":"United States","y":41.6594,"x":-72.3905},{"n":"Miltenberg","c":"Germany","y":49.7039,"x":9.2644},{"n":"Nyzhnohirskyi","c":"Ukraine","y":45.4464,"x":34.7344},{"n":"Mound","c":"United States","y":44.9328,"x":-93.6591},{"n":"Jessup","c":"United States","y":39.1457,"x":-76.7745},{"n":"Mosciano Sant'Angelo","c":"Italy","y":42.75,"x":13.8833},{"n":"Boiling Springs","c":"United States","y":35.045,"x":-81.9779},{"n":"Nakoushi","c":"Japan","y":26.6825,"x":127.9728},{"n":"Aleksandrovsk-Sakhalinskiy","c":"Russia","y":50.9,"x":142.15},{"n":"Wallerfangen","c":"Germany","y":49.3278,"x":6.7208},{"n":"Puerto Morelos","c":"Mexico","y":20.8536,"x":-86.8753},{"n":"Wakefield-Peacedale","c":"United States","y":41.4461,"x":-71.5004},{"n":"Erwin","c":"United States","y":36.1456,"x":-82.4115},{"n":"Savignano sul Panaro","c":"Italy","y":44.4833,"x":11.0333},{"n":"Huedin","c":"Romania","y":46.8738,"x":23.0041},{"n":"Waltenhofen","c":"Germany","y":47.6667,"x":10.3},{"n":"Rigby","c":"United States","y":43.6735,"x":-111.9126},{"n":"Rudnya","c":"Russia","y":54.95,"x":31.0667},{"n":"Aniskino","c":"Russia","y":55.9417,"x":38.15},{"n":"Martano","c":"Italy","y":40.2,"x":18.3},{"n":"Caracuaro","c":"Mexico","y":18.9851,"x":-101.0416},{"n":"Fort Stockton","c":"United States","y":30.8926,"x":-102.8844},{"n":"Buriti Alegre","c":"Brazil","y":-18.1439,"x":-49.0439},{"n":"Gaggiano","c":"Italy","y":45.4048,"x":9.0349},{"n":"Onnaing","c":"France","y":50.3878,"x":3.5981},{"n":"Iseo","c":"Italy","y":45.6586,"x":10.0536},{"n":"Le Mesnil-Esnard","c":"France","y":49.4108,"x":1.1419},{"n":"Dietlikon","c":"Switzerland","y":47.42,"x":8.6192},{"n":"Lesnoy Gorodok","c":"Russia","y":55.6389,"x":37.2083},{"n":"Belvedere Marittimo","c":"Italy","y":39.6167,"x":15.8667},{"n":"Ramara","c":"Canada","y":44.6333,"x":-79.2167},{"n":"Aadorf","c":"Switzerland","y":47.4939,"x":8.8975},{"n":"Lamarao","c":"Brazil","y":-11.7828,"x":-38.9},{"n":"Airway Heights","c":"United States","y":47.646,"x":-117.5792},{"n":"Minano","c":"Japan","y":36.0708,"x":139.0989},{"n":"Sindos","c":"Greece","y":40.6667,"x":22.8},{"n":"Riacho dos Machados","c":"Brazil","y":-16.0058,"x":-43.0489},{"n":"Planaltino","c":"Brazil","y":-13.2589,"x":-40.3689},{"n":"Juraqan","c":"Iran","y":34.8847,"x":48.5544},{"n":"Vettweiss","c":"Germany","y":50.7389,"x":6.5972},{"n":"Olst","c":"Netherlands","y":52.3378,"x":6.1108},{"n":"Yutsa","c":"Russia","y":43.9625,"x":42.9875},{"n":"Santanopolis","c":"Brazil","y":-12.0169,"x":-38.8669},{"n":"Castellabate","c":"Italy","y":40.2792,"x":14.9517},{"n":"Wustermark","c":"Germany","y":52.5497,"x":12.9497},{"n":"Tanfield","c":"United Kingdom","y":54.897,"x":-1.703},{"n":"Parsons","c":"United States","y":37.3405,"x":-95.2959},{"n":"Parabita","c":"Italy","y":40.05,"x":18.1333},{"n":"Rauenberg","c":"Germany","y":49.2678,"x":8.7036},{"n":"Zwenkau","c":"Germany","y":51.2175,"x":12.3242},{"n":"Ortuella","c":"Spain","y":43.3103,"x":-3.0569},{"n":"Wertingen","c":"Germany","y":48.5333,"x":10.6667},{"n":"Townsend","c":"United States","y":42.6671,"x":-71.7115},{"n":"Larmor-Plage","c":"France","y":47.7064,"x":-3.3842},{"n":"El Molar","c":"Spain","y":40.7336,"x":-3.5814},{"n":"Polinya","c":"Spain","y":41.5575,"x":2.1562},{"n":"Gooik","c":"Belgium","y":50.8,"x":4.1167},{"n":"Sidi El Hattab","c":"Morocco","y":32.3528,"x":-7.3245},{"n":"Olho d'Agua do Casado","c":"Brazil","y":-9.5,"x":-37.8167},{"n":"Chiasso","c":"Switzerland","y":45.8353,"x":9.032},{"n":"Lititz","c":"United States","y":40.154,"x":-76.3044},{"n":"Marcy","c":"United States","y":43.1732,"x":-75.2662},{"n":"Leeds and the Thousand Islands","c":"Canada","y":44.45,"x":-76.08},{"n":"Siler City","c":"United States","y":35.7252,"x":-79.4561},{"n":"Filottrano","c":"Italy","y":43.4344,"x":13.3503},{"n":"Varzea do Poco","c":"Brazil","y":-11.5289,"x":-40.32},{"n":"Platte City","c":"United States","y":39.3576,"x":-94.7655},{"n":"Carignan","c":"Canada","y":45.45,"x":-73.3},{"n":"La Chapelle d'Armentieres","c":"France","y":50.6728,"x":2.895},{"n":"Dunblane","c":"United Kingdom","y":56.1838,"x":-3.9674},{"n":"Brockton","c":"Canada","y":44.1667,"x":-81.2167},{"n":"Bezhetsk","c":"Russia","y":57.7833,"x":36.7},{"n":"Woodfield","c":"United States","y":34.0587,"x":-80.9309},{"n":"Codsall","c":"United Kingdom","y":52.6267,"x":-2.1924},{"n":"Mhajar","c":"Morocco","y":35.1169,"x":-3.4917},{"n":"Farsala","c":"Greece","y":39.2833,"x":22.3833},{"n":"Carignano","c":"Italy","y":44.9058,"x":7.6725},{"n":"Ter Aar","c":"Netherlands","y":52.1667,"x":4.7167},{"n":"Budenheim","c":"Germany","y":50.0167,"x":8.1667},{"n":"Kirs","c":"Russia","y":59.3372,"x":52.2455},{"n":"Andre Fernandes","c":"Brazil","y":-15.9658,"x":-41.4978},{"n":"Mohelnice","c":"Czechia","y":49.777,"x":16.9195},{"n":"Missaglia","c":"Italy","y":45.7,"x":9.3333},{"n":"Cervello","c":"Spain","y":41.3962,"x":1.9589},{"n":"Shira","c":"Russia","y":54.4911,"x":89.9597},{"n":"Sudlohn","c":"Germany","y":51.9436,"x":6.8664},{"n":"Maravilha","c":"Brazil","y":-9.2358,"x":-37.35},{"n":"Aniva","c":"Russia","y":46.7167,"x":142.5167},{"n":"Dubrovytsya","c":"Ukraine","y":51.5667,"x":26.5667},{"n":"Carencro","c":"United States","y":30.3126,"x":-92.0387},{"n":"Au","c":"Switzerland","y":47.4331,"x":9.6333},{"n":"Lillebonne","c":"France","y":49.5208,"x":0.5375},{"n":"Lovosice","c":"Czechia","y":50.5151,"x":14.0511},{"n":"Asolo","c":"Italy","y":45.8,"x":11.9167},{"n":"Sabangan","c":"Philippines","y":16.95,"x":120.9167},{"n":"Sutton","c":"United States","y":42.1337,"x":-71.7503},{"n":"La Ferte-Bernard","c":"France","y":48.1867,"x":0.6544},{"n":"Ruidoso","c":"United States","y":33.3647,"x":-105.6432},{"n":"Laghzawna","c":"Morocco","y":33.1914,"x":-7.6701},{"n":"Pandino","c":"Italy","y":45.4,"x":9.55},{"n":"Gramsh","c":"Albania","y":40.8667,"x":20.1833},{"n":"South Strabane","c":"United States","y":40.1756,"x":-80.191},{"n":"Araujos","c":"Brazil","y":-19.9478,"x":-45.1658},{"n":"Ocsa","c":"Hungary","y":47.2933,"x":19.2258},{"n":"Tissint","c":"Morocco","y":29.9,"x":-7.3167},{"n":"Hunduan","c":"Philippines","y":16.8333,"x":121},{"n":"Hondo","c":"United States","y":29.3531,"x":-99.162},{"n":"Miles City","c":"United States","y":46.4059,"x":-105.8385},{"n":"Grigoriopol","c":"Moldova","y":47.1536,"x":29.2964},{"n":"Trebisacce","c":"Italy","y":39.8667,"x":16.5333},{"n":"Harqalah","c":"Tunisia","y":36.0333,"x":10.5},{"n":"Wallan","c":"Australia","y":-37.4167,"x":144.9833},{"n":"Maidencreek","c":"United States","y":40.4618,"x":-75.8927},{"n":"Cullar-Vega","c":"Spain","y":37.1531,"x":-3.6706},{"n":"Manistee","c":"United States","y":44.244,"x":-86.3242},{"n":"Teisendorf","c":"Germany","y":47.85,"x":12.8167},{"n":"Rayne","c":"United States","y":30.2403,"x":-92.2668},{"n":"Sauzal","c":"Spain","y":28.4799,"x":-16.4357},{"n":"Wunsiedel","c":"Germany","y":50.0374,"x":11.9994},{"n":"Dielheim","c":"Germany","y":49.2825,"x":8.7347},{"n":"Bad Laer","c":"Germany","y":52.1031,"x":8.0892},{"n":"Castelli","c":"Argentina","y":-25.95,"x":-60.6167},{"n":"Carbonita","c":"Brazil","y":-17.5269,"x":-43.0158},{"n":"Le Muy","c":"France","y":43.4725,"x":6.5664},{"n":"Gammasa","c":"Morocco","y":31.4175,"x":-8.4117},{"n":"Orivesi","c":"Finland","y":61.6778,"x":24.3569},{"n":"Varzedo","c":"Brazil","y":-12.9708,"x":-39.3939},{"n":"Spata","c":"Greece","y":37.9667,"x":23.9167},{"n":"Ichenhausen","c":"Germany","y":48.3712,"x":10.3071},{"n":"New Richmond","c":"United States","y":45.1249,"x":-92.5377},{"n":"Ameskroud","c":"Morocco","y":30.5308,"x":-9.3283},{"n":"Laufenburg (Baden)","c":"Germany","y":47.5656,"x":8.0647},{"n":"Gouvieux","c":"France","y":49.1878,"x":2.4161},{"n":"Sao Sebastiao do Alto","c":"Brazil","y":-21.9569,"x":-42.135},{"n":"Krichim","c":"Bulgaria","y":42.0426,"x":24.4646},{"n":"Lidzbark","c":"Poland","y":53.2603,"x":19.8211},{"n":"Tenabo","c":"Mexico","y":20.0333,"x":-90.2167},{"n":"Noventa Vicentina","c":"Italy","y":45.2833,"x":11.5333},{"n":"Treia","c":"Italy","y":43.3114,"x":13.3131},{"n":"St. Stephens","c":"United States","y":35.7641,"x":-81.2746},{"n":"Santa Comba","c":"Spain","y":43.0383,"x":-8.8142},{"n":"Panganiban","c":"Philippines","y":13.9,"x":124.3},{"n":"Great Dunmow","c":"United Kingdom","y":51.873,"x":0.3617},{"n":"Braslaw","c":"Belarus","y":55.6397,"x":27.0397},{"n":"Pirambu","c":"Brazil","y":-10.7378,"x":-36.8558},{"n":"Verkhneyarkeyevo","c":"Russia","y":55.4458,"x":54.3168},{"n":"Kandel","c":"Germany","y":49.0828,"x":8.1964},{"n":"La Bruyere","c":"Belgium","y":50.5,"x":4.8},{"n":"Groenlo","c":"Netherlands","y":52.05,"x":6.6167},{"n":"Amityville","c":"United States","y":40.6696,"x":-73.4156},{"n":"Lamorlaye","c":"France","y":49.155,"x":2.4408},{"n":"Porcari","c":"Italy","y":43.8415,"x":10.6163},{"n":"Tomah","c":"United States","y":43.9879,"x":-90.4999},{"n":"Narpes","c":"Finland","y":62.4736,"x":21.3375},{"n":"Tysmenytsia","c":"Ukraine","y":48.9008,"x":24.8492},{"n":"Sene","c":"France","y":47.6197,"x":-2.7372},{"n":"Douar Ezzerarda","c":"Morocco","y":34.7667,"x":-5.8333},{"n":"Cavalcante","c":"Brazil","y":-13.7978,"x":-47.4578},{"n":"Le Mont-sur-Lausanne","c":"Switzerland","y":46.55,"x":6.6333},{"n":"Usakos","c":"Namibia","y":-22,"x":15.6},{"n":"Bovalino Marina","c":"Italy","y":38.15,"x":16.1667},{"n":"Morieres-les-Avignon","c":"France","y":43.9417,"x":4.9047},{"n":"Campo Ere","c":"Brazil","y":-26.3939,"x":-53.0778},{"n":"Navoloki","c":"Russia","y":57.4667,"x":41.9667},{"n":"Sompting","c":"United Kingdom","y":50.8303,"x":-0.3395},{"n":"Unieux","c":"France","y":45.4017,"x":4.2614},{"n":"Argoncilhe","c":"Portugal","y":41.0167,"x":-8.55},{"n":"Francisville","c":"United States","y":39.1067,"x":-84.7277},{"n":"Hickam Housing","c":"United States","y":21.3311,"x":-157.9474},{"n":"Laurentian Valley","c":"Canada","y":45.7681,"x":-77.2239},{"n":"Muro del Alcoy","c":"Spain","y":38.7797,"x":-0.4361},{"n":"Navasota","c":"United States","y":30.3874,"x":-96.0895},{"n":"Le Rheu","c":"France","y":48.1019,"x":-1.7956},{"n":"Erdokertes","c":"Hungary","y":47.6749,"x":19.3158},{"n":"Calusco d'Adda","c":"Italy","y":45.6833,"x":9.4833},{"n":"Eemnes","c":"Netherlands","y":52.2539,"x":5.2572},{"n":"Elsloo","c":"Netherlands","y":50.971,"x":5.7541},{"n":"Coccaglio","c":"Italy","y":45.5633,"x":9.9783},{"n":"Schlangen","c":"Germany","y":51.8167,"x":8.8331},{"n":"Bandol","c":"France","y":43.1364,"x":5.7533},{"n":"Irshava","c":"Ukraine","y":48.3172,"x":23.0375},{"n":"Igarata","c":"Brazil","y":-23.2044,"x":-46.1561},{"n":"Livron-sur-Drome","c":"France","y":44.7728,"x":4.8431},{"n":"Flowood","c":"United States","y":32.3359,"x":-90.0802},{"n":"Pryor Creek","c":"United States","y":36.2998,"x":-95.3102},{"n":"Ouled Rached","c":"Algeria","y":36.2119,"x":4.1106},{"n":"Hingyon","c":"Philippines","y":16.8333,"x":121.1167},{"n":"Parempuyre","c":"France","y":44.9492,"x":-0.605},{"n":"Kargat","c":"Russia","y":55.2,"x":80.2833},{"n":"Nea Peramos","c":"Greece","y":38,"x":23.4167},{"n":"Currumbin","c":"Australia","y":-28.158,"x":153.469},{"n":"Bardmoor","c":"United States","y":27.8575,"x":-82.7534},{"n":"East St. Paul","c":"Canada","y":49.9772,"x":-97.0103},{"n":"Crissier","c":"Switzerland","y":46.55,"x":6.5833},{"n":"Perigny","c":"France","y":46.1528,"x":-1.0964},{"n":"Santa Coloma de Cervello","c":"Spain","y":41.3687,"x":2.0175},{"n":"Ifigha","c":"Algeria","y":36.6667,"x":4.4167},{"n":"Cairo","c":"United States","y":30.8791,"x":-84.205},{"n":"Tonneins","c":"France","y":44.3897,"x":0.3083},{"n":"Rafelbunol","c":"Spain","y":39.5922,"x":-0.3342},{"n":"Castegnato","c":"Italy","y":45.5631,"x":10.115},{"n":"Tayr Ma`lah","c":"Syria","y":34.8022,"x":36.7069},{"n":"Aidlingen","c":"Germany","y":48.6792,"x":8.8969},{"n":"Rio das Flores","c":"Brazil","y":-22.1678,"x":-43.5858},{"n":"Siteia","c":"Greece","y":35.2,"x":26.1},{"n":"Kyritz","c":"Germany","y":52.9422,"x":12.3972},{"n":"Boonville","c":"United States","y":38.9588,"x":-92.7471},{"n":"Les Sorinieres","c":"France","y":47.1464,"x":-1.53},{"n":"Richterich","c":"Germany","y":50.8086,"x":6.0625},{"n":"Putnam","c":"United States","y":41.9093,"x":-71.8711},{"n":"Bli Bli","c":"Australia","y":-26.618,"x":153.037},{"n":"Baia Formosa","c":"Brazil","y":-6.3689,"x":-35.0078},{"n":"Nova Paka","c":"Czechia","y":50.4945,"x":15.5151},{"n":"Nieuwleusen","c":"Netherlands","y":52.5833,"x":6.2833},{"n":"Brownfield","c":"United States","y":33.1757,"x":-102.273},{"n":"Tvrdosin","c":"Slovakia","y":49.3369,"x":19.5503},{"n":"Clay Cross","c":"United Kingdom","y":53.1637,"x":-1.4128},{"n":"Caputira","c":"Brazil","y":-20.1719,"x":-42.2708},{"n":"Cappelle-la-Grande","c":"France","y":50.9983,"x":2.3642},{"n":"Santa Maria de Cayon","c":"Spain","y":43.3114,"x":-3.8525},{"n":"Hackettstown","c":"United States","y":40.854,"x":-74.8257},{"n":"Pesca","c":"Colombia","y":5.5589,"x":-73.0503},{"n":"Stuarts Draft","c":"United States","y":38.0245,"x":-79.0308},{"n":"Bay Minette","c":"United States","y":30.893,"x":-87.7912},{"n":"Isbergues","c":"France","y":50.6233,"x":2.4567},{"n":"Monteforte d'Alpone","c":"Italy","y":45.4167,"x":11.2833},{"n":"Lorraine","c":"Canada","y":45.6833,"x":-73.7833},{"n":"Khotyn","c":"Ukraine","y":48.5078,"x":26.486},{"n":"Golden Hills","c":"United States","y":35.1512,"x":-118.5024},{"n":"Verkhneuralsk","c":"Russia","y":53.8833,"x":59.2167},{"n":"Podenzano","c":"Italy","y":44.95,"x":9.6833},{"n":"Edwards","c":"United States","y":39.6215,"x":-106.6183},{"n":"Nagykallo","c":"Hungary","y":47.8831,"x":21.85},{"n":"Ariranha","c":"Brazil","y":-21.1878,"x":-48.7869},{"n":"Masandra","c":"Ukraine","y":44.5167,"x":34.1833},{"n":"Woodmoor","c":"United States","y":39.1063,"x":-104.8456},{"n":"Ipiranga do Piaui","c":"Brazil","y":-6.8278,"x":-41.7408},{"n":"Pfedelbach","c":"Germany","y":49.175,"x":9.5056},{"n":"Vendin-le-Vieil","c":"France","y":50.4739,"x":2.8661},{"n":"Segni","c":"Italy","y":41.6833,"x":13.0167},{"n":"Saline","c":"United States","y":42.1741,"x":-83.778},{"n":"Catral","c":"Spain","y":38.1594,"x":-0.805},{"n":"Villars","c":"France","y":45.4689,"x":4.3544},{"n":"Courcelles-les-Lens","c":"France","y":50.4181,"x":3.0181},{"n":"St. Augustine Shores","c":"United States","y":29.8039,"x":-81.3086},{"n":"Madras","c":"United States","y":44.6425,"x":-121.1315},{"n":"Ineu","c":"Romania","y":46.4258,"x":21.8369},{"n":"San Sebastian de la Gomera","c":"Spain","y":28.0922,"x":-17.11},{"n":"Pietra Ligure","c":"Italy","y":44.1487,"x":8.2828},{"n":"Catuipe","c":"Brazil","y":-28.25,"x":-54.0119},{"n":"Caluco","c":"El Salvador","y":13.7167,"x":-89.6667},{"n":"Kaleybar","c":"Iran","y":38.8667,"x":47.0333},{"n":"Vallet","c":"France","y":47.1617,"x":-1.2669},{"n":"Cherasco","c":"Italy","y":44.65,"x":7.8667},{"n":"Vallendar","c":"Germany","y":50.4003,"x":7.6172},{"n":"Porangaba","c":"Brazil","y":-23.1758,"x":-48.125},{"n":"Banaruyeh","c":"Iran","y":28.0839,"x":54.0483},{"n":"Hohenhameln","c":"Germany","y":52.26,"x":10.0664},{"n":"Ngaruawahia","c":"New Zealand","y":-37.668,"x":175.147},{"n":"Lacchiarella","c":"Italy","y":45.325,"x":9.14},{"n":"Le Petit-Couronne","c":"France","y":49.3856,"x":1.0275},{"n":"Sainte-Julienne","c":"Canada","y":45.97,"x":-73.72},{"n":"Claymont","c":"United States","y":39.8032,"x":-75.4606},{"n":"Tirano","c":"Italy","y":46.2164,"x":10.1689},{"n":"Zanica","c":"Italy","y":45.6394,"x":9.6842},{"n":"Chaponost","c":"France","y":45.7103,"x":4.7422},{"n":"Shimizu","c":"Japan","y":43.0111,"x":142.8847},{"n":"Blackfalds","c":"Canada","y":52.3833,"x":-113.8},{"n":"Stansbury Park","c":"United States","y":40.6356,"x":-112.3054},{"n":"Rotonda","c":"United States","y":26.8845,"x":-82.2791},{"n":"Marlboro Village","c":"United States","y":38.8307,"x":-76.7699},{"n":"Luzzi","c":"Italy","y":39.45,"x":16.2833},{"n":"Belousovo","c":"Russia","y":55.0917,"x":36.6667},{"n":"Lenoir City","c":"United States","y":35.811,"x":-84.2818},{"n":"Reggiolo","c":"Italy","y":44.9167,"x":10.8167},{"n":"Birch Bay","c":"United States","y":48.923,"x":-122.7543},{"n":"Edingerhof","c":"Germany","y":49.4483,"x":8.6121},{"n":"Smilde","c":"Netherlands","y":52.9486,"x":6.4483},{"n":"Coqueiral","c":"Brazil","y":-21.1889,"x":-45.4408},{"n":"Hartland","c":"United States","y":43.1027,"x":-88.3399},{"n":"Nakhon Thai","c":"Thailand","y":17.1011,"x":100.8296},{"n":"Waihee-Waiehu","c":"United States","y":20.9188,"x":-156.5063},{"n":"Landquart","c":"Switzerland","y":46.9497,"x":9.5667},{"n":"Sint-Martens-Lennik","c":"Belgium","y":50.8,"x":4.15},{"n":"College Place","c":"United States","y":46.0419,"x":-118.3879},{"n":"Svit","c":"Slovakia","y":49.0583,"x":20.2025},{"n":"Inveruno","c":"Italy","y":45.5167,"x":8.85},{"n":"Trumpington","c":"United Kingdom","y":52.174,"x":0.109},{"n":"Bad Bevensen","c":"Germany","y":53.0792,"x":10.5833},{"n":"Stevenston","c":"United Kingdom","y":55.645,"x":-4.758},{"n":"Montoro","c":"Spain","y":38.0167,"x":-4.3833},{"n":"Vel'ke Kapusany","c":"Slovakia","y":48.55,"x":22.0833},{"n":"Nong Kung Si","c":"Thailand","y":16.65,"x":103.3},{"n":"Teolo","c":"Italy","y":45.35,"x":11.6667},{"n":"Holten","c":"Netherlands","y":52.2814,"x":6.4186},{"n":"Velykyi Bychkiv","c":"Ukraine","y":47.9714,"x":24.0047},{"n":"Capbreton","c":"France","y":43.6419,"x":-1.4322},{"n":"Cisterniga","c":"Spain","y":41.6167,"x":-4.6833},{"n":"Hombrechtikon","c":"Switzerland","y":47.2533,"x":8.7703},{"n":"Zimmerman","c":"United States","y":45.4416,"x":-93.5981},{"n":"Hemau","c":"Germany","y":49.0519,"x":11.7828},{"n":"Freetown","c":"United States","y":41.7714,"x":-71.0157},{"n":"Hohenbrunn","c":"Germany","y":48.05,"x":11.7},{"n":"Biblis","c":"Germany","y":49.6841,"x":8.4508},{"n":"Zorbig","c":"Germany","y":51.6167,"x":12.1167},{"n":"Newfane","c":"United States","y":43.2818,"x":-78.6932},{"n":"Dardilly","c":"France","y":45.8056,"x":4.7531},{"n":"Burscough","c":"United Kingdom","y":53.596,"x":-2.843},{"n":"Malahide","c":"Canada","y":42.7928,"x":-80.9361},{"n":"Shijak","c":"Albania","y":41.3456,"x":19.5672},{"n":"Urbach","c":"Germany","y":48.8133,"x":9.5789},{"n":"Suwannaphum","c":"Thailand","y":15.6078,"x":103.8},{"n":"Didymoteicho","c":"Greece","y":41.35,"x":26.5},{"n":"Seddouk Oufella","c":"Algeria","y":36.6061,"x":4.6389},{"n":"Detroit Lakes","c":"United States","y":46.806,"x":-95.8449},{"n":"Gerstungen","c":"Germany","y":50.9625,"x":10.0597},{"n":"La Fare-les-Oliviers","c":"France","y":43.5517,"x":5.1947},{"n":"Gonzaga","c":"Italy","y":44.95,"x":10.8167},{"n":"Hunenberg","c":"Switzerland","y":47.1761,"x":8.4264},{"n":"Fultondale","c":"United States","y":33.6177,"x":-86.8015},{"n":"Tlahuiltepa","c":"Mexico","y":20.9233,"x":-98.9497},{"n":"North College Hill","c":"United States","y":39.2174,"x":-84.552},{"n":"Sao Jose do Cerrito","c":"Brazil","y":-27.6628,"x":-50.58},{"n":"Herculandia","c":"Brazil","y":-22.0036,"x":-50.3853},{"n":"Torgelow","c":"Germany","y":53.6167,"x":14},{"n":"Gnarrenburg","c":"Germany","y":53.3864,"x":9.005},{"n":"Pozo Almonte","c":"Chile","y":-20.2597,"x":-69.7862},{"n":"Tanakoub","c":"Morocco","y":35.1091,"x":-5.4577},{"n":"Westerland","c":"Germany","y":54.91,"x":8.3075},{"n":"Casteloes de Cepeda","c":"Portugal","y":41.2008,"x":-8.3306},{"n":"Horodenka","c":"Ukraine","y":48.6675,"x":25.5003},{"n":"Cape Elizabeth","c":"United States","y":43.5891,"x":-70.238},{"n":"Tecklenburg","c":"Germany","y":52.2194,"x":7.8125},{"n":"Cross Lanes","c":"United States","y":38.4351,"x":-81.7706},{"n":"Lo Miranda","c":"Chile","y":-34.1957,"x":-70.8891},{"n":"Benner","c":"United States","y":40.8698,"x":-77.8154},{"n":"Fuldabruck","c":"Germany","y":51.2667,"x":9.4833},{"n":"Zavyalovo","c":"Russia","y":56.7903,"x":53.3806},{"n":"Wolfurt","c":"Austria","y":47.4731,"x":9.7539},{"n":"Oulad Cherif","c":"Morocco","y":31.7667,"x":-7.7833},{"n":"Santa Maria del Tule","c":"Mexico","y":17.0465,"x":-96.6363},{"n":"Chotebor","c":"Czechia","y":49.7208,"x":15.6702},{"n":"Marathon","c":"United States","y":24.7262,"x":-81.0376},{"n":"Sidi Lahsene","c":"Morocco","y":34.0999,"x":-2.6219},{"n":"Mendig","c":"Germany","y":50.3744,"x":7.2808},{"n":"Valky","c":"Ukraine","y":49.8386,"x":35.6217},{"n":"Altenbeken","c":"Germany","y":51.7667,"x":8.9333},{"n":"Salto Grande","c":"Brazil","y":-22.8928,"x":-49.9858},{"n":"Biberist","c":"Switzerland","y":47.1828,"x":7.5586},{"n":"Kolkwitz","c":"Germany","y":51.75,"x":14.25},{"n":"Blackstone","c":"United States","y":42.0399,"x":-71.5313},{"n":"Bohemia","c":"United States","y":40.7717,"x":-73.1271},{"n":"Dumont","c":"Brazil","y":-21.2364,"x":-47.9733},{"n":"Hawkinge","c":"United Kingdom","y":51.117,"x":1.1638},{"n":"Pokrovsk","c":"Russia","y":61.4833,"x":129.15},{"n":"Troina","c":"Italy","y":37.7833,"x":14.6},{"n":"Malalbergo","c":"Italy","y":44.7194,"x":11.5331},{"n":"Nizhniye Sergi","c":"Russia","y":56.6667,"x":59.3},{"n":"Bad Liebenwerda","c":"Germany","y":51.5167,"x":13.4},{"n":"Neshannock","c":"United States","y":41.051,"x":-80.352},{"n":"Natividade","c":"Brazil","y":-11.71,"x":-47.7228},{"n":"Currie","c":"United Kingdom","y":55.896,"x":-3.3074},{"n":"Kalanchak","c":"Ukraine","y":46.255,"x":33.2906},{"n":"Melgaco","c":"Portugal","y":42.1167,"x":-8.2667},{"n":"Cheat Lake","c":"United States","y":39.6672,"x":-79.8565},{"n":"Harahan","c":"United States","y":29.9374,"x":-90.203},{"n":"Paszto","c":"Hungary","y":47.9194,"x":19.6978},{"n":"Sredets","c":"Bulgaria","y":42.3461,"x":27.1808},{"n":"Le Thor","c":"France","y":43.9292,"x":4.9944},{"n":"Washington Terrace","c":"United States","y":41.1683,"x":-111.9783},{"n":"Salzhemmendorf","c":"Germany","y":52.0667,"x":9.5833},{"n":"Sultan","c":"United States","y":47.871,"x":-121.8043},{"n":"Wendover","c":"United Kingdom","y":51.768,"x":-0.7463},{"n":"Pong Nam Ron","c":"Thailand","y":12.9058,"x":102.2622},{"n":"Muncy","c":"United States","y":41.2021,"x":-76.7854},{"n":"Madeira","c":"United States","y":39.1856,"x":-84.3734},{"n":"Colorno","c":"Italy","y":44.93,"x":10.3758},{"n":"Princes Risborough","c":"United Kingdom","y":51.724,"x":-0.8344},{"n":"Saidia","c":"Morocco","y":35.085,"x":-2.2392},{"n":"Abaira","c":"Brazil","y":-13.25,"x":-41.6639},{"n":"Valldoreix","c":"Spain","y":41.4678,"x":2.0647},{"n":"Carneiros","c":"Brazil","y":-9.4828,"x":-37.3769},{"n":"Anthony","c":"United States","y":32.0132,"x":-106.5984},{"n":"Obukhivka","c":"Ukraine","y":48.5442,"x":34.8664},{"n":"Rosario do Catete","c":"Brazil","y":-10.6958,"x":-37.0308},{"n":"Clermont-l'Herault","c":"France","y":43.6272,"x":3.4322},{"n":"Lempdes","c":"France","y":45.7711,"x":3.1936},{"n":"Gridley","c":"United States","y":39.3622,"x":-121.6971},{"n":"Saint-Paul-Trois-Chateaux","c":"France","y":44.3489,"x":4.7686},{"n":"Heroldsberg","c":"Germany","y":49.5333,"x":11.15},{"n":"San Fructuoso de Bages","c":"Spain","y":41.7507,"x":1.8727},{"n":"Ziebice","c":"Poland","y":50.6,"x":17.0444},{"n":"Veliki Preslav","c":"Bulgaria","y":43.1614,"x":26.8125},{"n":"Kendall Park","c":"United States","y":40.4138,"x":-74.5626},{"n":"Douar Snada","c":"Morocco","y":35.0764,"x":-4.2167},{"n":"Haram","c":"Norway","y":62.5675,"x":6.3722},{"n":"Saint-Claude","c":"France","y":46.3872,"x":5.8633},{"n":"Skovorodino","c":"Russia","y":53.9833,"x":123.9333},{"n":"Mittenwalde","c":"Germany","y":52.2667,"x":13.5333},{"n":"Roquevaire","c":"France","y":43.3494,"x":5.6047},{"n":"Furth im Wald","c":"Germany","y":49.3097,"x":12.84},{"n":"Walworth","c":"United States","y":43.1633,"x":-77.3132},{"n":"Kamien Pomorski","c":"Poland","y":53.9697,"x":14.7858},{"n":"Soresina","c":"Italy","y":45.2865,"x":9.857},{"n":"Girard","c":"United States","y":41.1666,"x":-80.6963},{"n":"Montagnana","c":"Italy","y":45.2333,"x":11.4658},{"n":"Coronel Murta","c":"Brazil","y":-16.6189,"x":-42.1819},{"n":"Hirayama","c":"Japan","y":33.6467,"x":130.5},{"n":"Moss Vale","c":"Australia","y":-34.5483,"x":150.3678},{"n":"I-n-Amenas","c":"Algeria","y":28.05,"x":9.55},{"n":"Hillview","c":"United States","y":38.0563,"x":-85.6848},{"n":"Stryzhavka","c":"Ukraine","y":49.3103,"x":28.4808},{"n":"Almargem","c":"Portugal","y":38.8475,"x":-9.2714},{"n":"Baluntaicun","c":"China","y":42.7499,"x":86.3119},{"n":"Oromocto","c":"Canada","y":45.8488,"x":-66.4788},{"n":"La Cruz","c":"Costa Rica","y":11.0742,"x":-85.6294},{"n":"Ponte Buggianese","c":"Italy","y":43.8408,"x":10.7475},{"n":"Steger","c":"United States","y":41.4723,"x":-87.6176},{"n":"Sans Souci","c":"United States","y":34.8901,"x":-82.4241},{"n":"Serramanna","c":"Italy","y":39.4228,"x":8.9217},{"n":"Tarcento","c":"Italy","y":46.2167,"x":13.2167},{"n":"Tineo","c":"Spain","y":43.3333,"x":-6.4167},{"n":"White Marsh","c":"United States","y":39.3819,"x":-76.4573},{"n":"Yaxley","c":"United Kingdom","y":52.52,"x":-0.26},{"n":"Sidi Ouassay","c":"Morocco","y":30.05,"x":-9.6833},{"n":"Spanish Fort","c":"United States","y":30.7257,"x":-87.8601},{"n":"Krompachy","c":"Slovakia","y":48.9167,"x":20.8744},{"n":"Savenay","c":"France","y":47.3607,"x":-1.9422},{"n":"Longvic","c":"France","y":47.2878,"x":5.0636},{"n":"Windisch","c":"Switzerland","y":47.4803,"x":8.2222},{"n":"Wanaka","c":"New Zealand","y":-44.7081,"x":169.1239},{"n":"Notre-Dame-de-Gravenchon","c":"France","y":49.4892,"x":0.5711},{"n":"Chtiba","c":"Morocco","y":32.2,"x":-7.3},{"n":"Lake Elmo","c":"United States","y":44.9944,"x":-92.9031},{"n":"Bethalto","c":"United States","y":38.9014,"x":-90.0467},{"n":"Obyachevo","c":"Russia","y":60.3386,"x":49.6092},{"n":"Brewood","c":"United Kingdom","y":52.6769,"x":-2.1738},{"n":"Trittau","c":"Germany","y":53.6167,"x":10.4},{"n":"Bir Tam Tam","c":"Morocco","y":33.9831,"x":-4.6397},{"n":"Cloverdale","c":"United States","y":38.7961,"x":-123.0151},{"n":"Copceac","c":"Moldova","y":45.85,"x":28.6947},{"n":"Achicourt","c":"France","y":50.2733,"x":2.7594},{"n":"Borgoricco","c":"Italy","y":45.5336,"x":11.9659},{"n":"Independent Hill","c":"United States","y":38.6404,"x":-77.409},{"n":"Mendon","c":"United States","y":42.9859,"x":-77.5479},{"n":"Crawford","c":"United States","y":41.5685,"x":-74.3168},{"n":"Malzeville","c":"France","y":48.7103,"x":6.1864},{"n":"Furtwangen im Schwarzwald","c":"Germany","y":48.0503,"x":8.2092},{"n":"Sabinanigo","c":"Spain","y":42.5186,"x":-0.3643},{"n":"Gretz-Armainvilliers","c":"France","y":48.7411,"x":2.7342},{"n":"Unterageri","c":"Switzerland","y":47.1386,"x":8.5844},{"n":"Santo Domingo Petapa","c":"Mexico","y":16.8167,"x":-95.1333},{"n":"Abdurahmoni Jomi","c":"Tajikistan","y":37.9794,"x":68.689},{"n":"Good Hope","c":"United States","y":33.7706,"x":-117.2772},{"n":"Luzzara","c":"Italy","y":44.9667,"x":10.6833},{"n":"Checy","c":"France","y":47.8936,"x":2.0269},{"n":"Basalt","c":"United States","y":39.3663,"x":-107.0414},{"n":"Ivins","c":"United States","y":37.1742,"x":-113.6809},{"n":"Egg","c":"Switzerland","y":47.3019,"x":8.6906},{"n":"Neuhaus am Rennweg","c":"Germany","y":50.51,"x":11.1378},{"n":"Tibana","c":"Colombia","y":5.3172,"x":-73.3969},{"n":"Fujisawacho-niinuma","c":"Japan","y":38.8585,"x":141.3493},{"n":"Suances","c":"Spain","y":43.4333,"x":-4.05},{"n":"Curno","c":"Italy","y":45.6911,"x":9.6125},{"n":"Wagoner","c":"United States","y":35.9641,"x":-95.379},{"n":"Elsfleth","c":"Germany","y":53.2333,"x":8.4667},{"n":"Nagaoki","c":"Japan","y":32.9781,"x":130.6058},{"n":"Olds","c":"Canada","y":51.7928,"x":-114.1067},{"n":"Piriapolis","c":"Uruguay","y":-34.8661,"x":-55.2747},{"n":"Verdello","c":"Italy","y":45.605,"x":9.6297},{"n":"Zychlin","c":"Poland","y":52.2453,"x":19.6236},{"n":"Brimington","c":"United Kingdom","y":53.258,"x":-1.3905},{"n":"Segorbe","c":"Spain","y":39.8519,"x":-0.4896},{"n":"Mwaline al Oued","c":"Morocco","y":33.4467,"x":-7.3283},{"n":"Roussillon","c":"France","y":45.3719,"x":4.8117},{"n":"Zogno","c":"Italy","y":45.7939,"x":9.6656},{"n":"Waldheim","c":"Germany","y":51.0667,"x":13.0167},{"n":"Horokhiv","c":"Ukraine","y":50.4994,"x":24.765},{"n":"San Cesario di Lecce","c":"Italy","y":40.3,"x":18.1667},{"n":"Aratuipe","c":"Brazil","y":-13.0789,"x":-39.0019},{"n":"Karis","c":"Finland","y":60.0708,"x":23.6625},{"n":"Salcea","c":"Romania","y":47.65,"x":26.37},{"n":"Timmendorfer Strand","c":"Germany","y":53.9944,"x":10.7825},{"n":"Sitio Novo de Goias","c":"Brazil","y":-5.6008,"x":-47.6378},{"n":"Neuotting","c":"Germany","y":48.2167,"x":12.6833},{"n":"Parakar","c":"Armenia","y":40.1639,"x":44.4058},{"n":"Rensselaer","c":"United States","y":42.6465,"x":-73.7328},{"n":"Clifton Springs","c":"Australia","y":-38.15,"x":144.5667},{"n":"Tournan-en-Brie","c":"France","y":48.7406,"x":2.7681},{"n":"Tinajdad","c":"Morocco","y":31.5,"x":-5.035},{"n":"Ortenberg","c":"Germany","y":50.3558,"x":9.0553},{"n":"Petilia Policastro","c":"Italy","y":39.1167,"x":16.7833},{"n":"Hallstadt","c":"Germany","y":49.9333,"x":10.8833},{"n":"Woltersdorf","c":"Germany","y":52.4478,"x":13.7572},{"n":"Memmelsdorf","c":"Germany","y":49.9328,"x":10.9533},{"n":"Akat Amnuai","c":"Thailand","y":17.5898,"x":103.9859},{"n":"Bingham","c":"United Kingdom","y":52.952,"x":-0.953},{"n":"Abalessa","c":"Algeria","y":22.89,"x":4.8472},{"n":"Perkiomen","c":"United States","y":40.2315,"x":-75.4644},{"n":"Verdejante","c":"Brazil","y":-7.9256,"x":-38.9717},{"n":"Aviano","c":"Italy","y":46.0667,"x":12.5833},{"n":"Calimesa","c":"United States","y":33.9874,"x":-117.0542},{"n":"Dunn Loring","c":"United States","y":38.8945,"x":-77.2316},{"n":"Modra","c":"Slovakia","y":48.3331,"x":17.3069},{"n":"Plon","c":"Germany","y":54.1622,"x":10.4214},{"n":"Monteroni d'Arbia","c":"Italy","y":43.2333,"x":11.4167},{"n":"Flossmoor","c":"United States","y":41.5391,"x":-87.6857},{"n":"Beckett Ridge","c":"United States","y":39.3448,"x":-84.4381},{"n":"Bruchhausen-Vilsen","c":"Germany","y":52.8333,"x":9},{"n":"Shaftesbury","c":"United Kingdom","y":51.0059,"x":-2.1969},{"n":"Hooper","c":"United States","y":41.1599,"x":-112.2871},{"n":"Castagneto Carducci","c":"Italy","y":43.1667,"x":10.6},{"n":"Tombolo","c":"Italy","y":45.6469,"x":11.8281},{"n":"Minyar","c":"Russia","y":55.0667,"x":57.55},{"n":"Rathdrum","c":"United States","y":47.7995,"x":-116.8908},{"n":"Bichura","c":"Russia","y":50.5864,"x":107.5975},{"n":"Villa Chalcatongo de Hidalgo","c":"Mexico","y":17.0322,"x":-97.5709},{"n":"Thief River Falls","c":"United States","y":48.1112,"x":-96.1771},{"n":"Kressbronn am Bodensee","c":"Germany","y":47.5958,"x":9.6},{"n":"Canilla","c":"Guatemala","y":15.1671,"x":-90.8481},{"n":"Thorigne-Fouillard","c":"France","y":48.1597,"x":-1.5797},{"n":"San Zenon","c":"Colombia","y":9.245,"x":-74.4992},{"n":"Devnya","c":"Bulgaria","y":43.218,"x":27.558},{"n":"Saint-Philbert-de-Grand-Lieu","c":"France","y":47.035,"x":-1.64},{"n":"Pa'in Chaf","c":"Iran","y":37.2294,"x":50.2539},{"n":"Oudover","c":"Netherlands","y":52.2,"x":5.1333},{"n":"Katoomba","c":"Australia","y":-33.715,"x":150.312},{"n":"Ystradgynlais","c":"United Kingdom","y":51.781,"x":-3.7511},{"n":"Terra Roxa","c":"Brazil","y":-20.7889,"x":-48.33},{"n":"Urania","c":"Brazil","y":-20.2458,"x":-50.6428},{"n":"Chadan","c":"Russia","y":51.2833,"x":91.5667},{"n":"Iijima","c":"Japan","y":35.6764,"x":137.9194},{"n":"Whitnash","c":"United Kingdom","y":52.268,"x":-1.524},{"n":"Kisslegg","c":"Germany","y":47.79,"x":9.8842},{"n":"Lorgues","c":"France","y":43.4933,"x":6.3611},{"n":"Estanzuelas","c":"El Salvador","y":13.65,"x":-88.5},{"n":"Anaconda","c":"United States","y":46.0607,"x":-113.0679},{"n":"Seini","c":"Romania","y":47.7478,"x":23.2853},{"n":"Duchcov","c":"Czechia","y":50.6039,"x":13.7463},{"n":"Waziers","c":"France","y":50.3872,"x":3.1131},{"n":"Nangis","c":"France","y":48.555,"x":3.0147},{"n":"Huron East","c":"Canada","y":43.63,"x":-81.28},{"n":"Castelnuovo Berardenga","c":"Italy","y":43.3472,"x":11.5042},{"n":"Murrells Inlet","c":"United States","y":33.5566,"x":-79.0593},{"n":"Kaeng Khro","c":"Thailand","y":16.1083,"x":102.2576},{"n":"Oberriet","c":"Switzerland","y":47.3164,"x":9.5664},{"n":"Tulbagh","c":"South Africa","y":-33.285,"x":19.1378},{"n":"Gtarna","c":"Morocco","y":32.9608,"x":-7.9222},{"n":"Borgholzhausen","c":"Germany","y":52.1,"x":8.3},{"n":"Cockermouth","c":"United Kingdom","y":54.6613,"x":-3.362},{"n":"Grabels","c":"France","y":43.6481,"x":3.8017},{"n":"Velyki Luchky","c":"Ukraine","y":48.42,"x":22.5611},{"n":"Binasco","c":"Italy","y":45.3333,"x":9.1},{"n":"Boukhralfa","c":"Algeria","y":36.6144,"x":5.0872},{"n":"El Espinar","c":"Spain","y":40.7186,"x":-4.2478},{"n":"Iguidiy","c":"Morocco","y":30.7467,"x":-7.9258},{"n":"Coutances","c":"France","y":49.0453,"x":-1.4453},{"n":"Lachen","c":"Switzerland","y":47.1911,"x":8.8567},{"n":"Le Teil","c":"France","y":44.5453,"x":4.6822},{"n":"Challapata","c":"Bolivia","y":-18.9,"x":-66.7667},{"n":"Elze","c":"Germany","y":52.1167,"x":9.7333},{"n":"Schulzendorf","c":"Germany","y":52.3667,"x":13.5831},{"n":"Civitella in Val di Chiana","c":"Italy","y":43.4053,"x":11.7706},{"n":"Freystadt","c":"Germany","y":49.1989,"x":11.3292},{"n":"Guardiagrele","c":"Italy","y":42.1892,"x":14.2216},{"n":"Monett","c":"United States","y":36.922,"x":-93.9261},{"n":"Cogoleto","c":"Italy","y":44.3896,"x":8.6462},{"n":"Doberlug-Kirchhain","c":"Germany","y":51.6167,"x":13.5667},{"n":"Tarusa","c":"Russia","y":54.7167,"x":37.1833},{"n":"Velden am Worthersee","c":"Austria","y":46.6125,"x":14.0419},{"n":"Bolokhovo","c":"Russia","y":54.0833,"x":37.8167},{"n":"Embalse","c":"Argentina","y":-32.1833,"x":-64.4167},{"n":"Sangeorgiu de Mures","c":"Romania","y":46.5764,"x":24.6042},{"n":"Almagro","c":"Philippines","y":11.9108,"x":124.2852},{"n":"Mnichovo Hradiste","c":"Czechia","y":50.5273,"x":14.9714},{"n":"Grinnell","c":"United States","y":41.7361,"x":-92.7244},{"n":"Jersey Shore","c":"United States","y":41.2012,"x":-77.2666},{"n":"Cutrofiano","c":"Italy","y":40.1333,"x":18.2},{"n":"Grosse Pointe Farms","c":"United States","y":42.4067,"x":-82.8992},{"n":"Rapid Valley","c":"United States","y":44.0674,"x":-103.1223},{"n":"Thung Sai","c":"Thailand","y":16.2955,"x":99.8089},{"n":"Tiachiv","c":"Ukraine","y":48.0114,"x":23.5722},{"n":"Kosum Phisai","c":"Thailand","y":16.243,"x":103.0627},{"n":"Linganore","c":"United States","y":39.4111,"x":-77.3026},{"n":"Vergiate","c":"Italy","y":45.7167,"x":8.7},{"n":"Nittenau","c":"Germany","y":49.1964,"x":12.2686},{"n":"Sao Jorge d'Oeste","c":"Brazil","y":-25.7058,"x":-52.9178},{"n":"Farra di Soligo","c":"Italy","y":45.8833,"x":12.1167},{"n":"Stara Tura","c":"Slovakia","y":48.7772,"x":17.6956},{"n":"Atmore","c":"United States","y":31.0927,"x":-87.4763},{"n":"Somero","c":"Finland","y":60.6292,"x":23.5139},{"n":"Roccastrada","c":"Italy","y":43.0097,"x":11.1683},{"n":"Trissino","c":"Italy","y":45.5667,"x":11.3667},{"n":"Whitwick","c":"United Kingdom","y":52.7403,"x":-1.3556},{"n":"Felino","c":"Italy","y":44.6953,"x":10.2416},{"n":"Guananico","c":"Dominican Republic","y":19.72,"x":-70.92},{"n":"Kharovsk","c":"Russia","y":59.9642,"x":40.1912},{"n":"Dzhalka","c":"Russia","y":43.3186,"x":45.9878},{"n":"West Caln","c":"United States","y":40.0237,"x":-75.8866},{"n":"Waldenbuch","c":"Germany","y":48.6372,"x":9.1317},{"n":"Loeches","c":"Spain","y":40.3833,"x":-3.4},{"n":"Rada Tilly","c":"Argentina","y":-45.9257,"x":-67.5526},{"n":"Economy","c":"United States","y":40.641,"x":-80.184},{"n":"Kratovo","c":"Russia","y":55.5911,"x":38.1803},{"n":"Emerainville","c":"France","y":48.81,"x":2.6228},{"n":"Villa Morelos","c":"Mexico","y":20.0033,"x":-101.4144},{"n":"Chitcani","c":"Moldova","y":46.7856,"x":29.6086},{"n":"Berthoud","c":"United States","y":40.307,"x":-105.0419},{"n":"Bellerive-sur-Allier","c":"France","y":46.1164,"x":3.4042},{"n":"Epanomi","c":"Greece","y":40.4261,"x":22.9281},{"n":"Galbiate","c":"Italy","y":45.8,"x":9.3833},{"n":"Portlethen","c":"United Kingdom","y":57.061,"x":-2.13},{"n":"Queven","c":"France","y":47.7886,"x":-3.4153},{"n":"Breckerfeld","c":"Germany","y":51.2611,"x":7.4667},{"n":"San Elizario","c":"United States","y":31.5793,"x":-106.2632},{"n":"Dillon","c":"United States","y":34.4233,"x":-79.3689},{"n":"L'Isle-Jourdain","c":"France","y":43.6136,"x":1.0808},{"n":"Herzberg","c":"Germany","y":51.6831,"x":13.2331},{"n":"Siklos","c":"Hungary","y":45.8519,"x":18.2986},{"n":"Tha Luang","c":"Thailand","y":15.0697,"x":101.1182},{"n":"Livno","c":"Bosnia And Herzegovina","y":43.8269,"x":17.0081},{"n":"Casca","c":"Brazil","y":-28.5608,"x":-51.9778},{"n":"Tiburon","c":"United States","y":37.8854,"x":-122.4637},{"n":"Silves","c":"Brazil","y":-2.8389,"x":-58.2092},{"n":"Queensferry","c":"United Kingdom","y":55.99,"x":-3.398},{"n":"Sugarmill Woods","c":"United States","y":28.7321,"x":-82.4986},{"n":"Grenade","c":"France","y":43.7714,"x":1.2931},{"n":"Dorverden","c":"Germany","y":52.85,"x":9.2333},{"n":"Vinhais","c":"Portugal","y":41.8167,"x":-7},{"n":"Verkhnyaya Tura","c":"Russia","y":58.3574,"x":59.8224},{"n":"Northwest Harborcreek","c":"United States","y":42.1494,"x":-79.9946},{"n":"Lancon-Provence","c":"France","y":43.5925,"x":5.1281},{"n":"Hoevelaken","c":"Netherlands","y":52.175,"x":5.4583},{"n":"Erzhausen","c":"Germany","y":49.9533,"x":8.6297},{"n":"Kuvshinovo","c":"Russia","y":57.0333,"x":34.1667},{"n":"Lunner","c":"Norway","y":60.2528,"x":10.6672},{"n":"Chrysoupoli","c":"Greece","y":40.9833,"x":24.7},{"n":"Muhos","c":"Finland","y":64.8,"x":26},{"n":"Waldfeucht","c":"Germany","y":51.0667,"x":5.9831},{"n":"Jeannette","c":"United States","y":40.3277,"x":-79.6139},{"n":"Policka","c":"Czechia","y":49.7147,"x":16.2655},{"n":"Rafard","c":"Brazil","y":-23.0117,"x":-47.5269},{"n":"Bellheim","c":"Germany","y":49.1981,"x":8.2792},{"n":"Werneuchen","c":"Germany","y":52.6331,"x":13.7331},{"n":"Guerrero","c":"Mexico","y":28.5478,"x":-107.4856},{"n":"Armadale","c":"United Kingdom","y":55.8978,"x":-3.7047},{"n":"Swalmen","c":"Netherlands","y":51.2333,"x":6.0333},{"n":"Windermere","c":"United Kingdom","y":54.376,"x":-2.907},{"n":"Sutherlin","c":"United States","y":43.3884,"x":-123.3231},{"n":"Had Dra","c":"Morocco","y":31.5833,"x":-9.5333},{"n":"Bolnisi","c":"Georgia","y":41.45,"x":44.5333},{"n":"Abcoude","c":"Netherlands","y":52.2719,"x":4.9703},{"n":"Khoni","c":"Georgia","y":42.3167,"x":42.4333},{"n":"Wollert","c":"Australia","y":-37.597,"x":145.033},{"n":"Picnic Point","c":"United States","y":47.8744,"x":-122.3078},{"n":"Villafranca Tirrena","c":"Italy","y":38.2333,"x":15.4333},{"n":"Obernburg am Main","c":"Germany","y":49.84,"x":9.1414},{"n":"Newmarket","c":"United States","y":43.0691,"x":-70.9516},{"n":"Villa Guardia","c":"Italy","y":45.7833,"x":9.0167},{"n":"Hirson","c":"France","y":49.9217,"x":4.0839},{"n":"Rivesaltes","c":"France","y":42.7689,"x":2.8739},{"n":"Nort-sur-Erdre","c":"France","y":47.4394,"x":-1.4983},{"n":"Sint-Martens-Latem","c":"Belgium","y":51.0186,"x":3.6378},{"n":"Kelso","c":"Australia","y":-33.4186,"x":149.6056},{"n":"Subiaco","c":"Italy","y":41.9333,"x":13.1},{"n":"Ceprano","c":"Italy","y":41.55,"x":13.5167},{"n":"Campogalliano","c":"Italy","y":44.6904,"x":10.8389},{"n":"Merrimac","c":"Australia","y":-28.05,"x":153.3667},{"n":"Laveno-Mombello","c":"Italy","y":45.9089,"x":8.6204},{"n":"Privas","c":"France","y":44.735,"x":4.5992},{"n":"North Codorus","c":"United States","y":39.8646,"x":-76.8189},{"n":"Volvera","c":"Italy","y":44.95,"x":7.5},{"n":"Binisalem","c":"Spain","y":39.6831,"x":2.8333},{"n":"Morlupo","c":"Italy","y":42.1435,"x":12.5047},{"n":"Neves Paulista","c":"Brazil","y":-20.8458,"x":-49.63},{"n":"Entraigues-sur-la-Sorgue","c":"France","y":44.0031,"x":4.9267},{"n":"Fort Polk South","c":"United States","y":31.0512,"x":-93.2159},{"n":"Cherry Hinton","c":"United Kingdom","y":52.1849,"x":0.176},{"n":"Micco","c":"United States","y":27.8683,"x":-80.51},{"n":"Hornsea","c":"United Kingdom","y":53.9108,"x":-0.1676},{"n":"Santa Rita de Caldas","c":"Brazil","y":-22.0289,"x":-46.3369},{"n":"Flekkefjord","c":"Norway","y":58.3272,"x":6.6667},{"n":"Kozova","c":"Ukraine","y":49.4318,"x":25.1544},{"n":"Puig","c":"Spain","y":39.5896,"x":-0.3031},{"n":"Ballenstedt","c":"Germany","y":51.72,"x":11.2375},{"n":"Chanute","c":"United States","y":37.6695,"x":-95.4621},{"n":"Beecher","c":"United States","y":43.0903,"x":-83.7039},{"n":"Linselles","c":"France","y":50.7372,"x":3.0794},{"n":"Rakitovo","c":"Bulgaria","y":41.99,"x":24.0872},{"n":"Libonik","c":"Albania","y":40.75,"x":20.7167},{"n":"Ayr","c":"Australia","y":-19.5744,"x":147.4066},{"n":"Stanley","c":"Canada","y":49.1331,"x":-98.0656},{"n":"Monistrol-sur-Loire","c":"France","y":45.2925,"x":4.1722},{"n":"San Giorgio di Piano","c":"Italy","y":44.65,"x":11.3833},{"n":"Ferryhill","c":"United Kingdom","y":54.69,"x":-1.55},{"n":"Uspenka","c":"Ukraine","y":48.3939,"x":39.1536},{"n":"Brewer","c":"United States","y":44.7835,"x":-68.7352},{"n":"Sande","c":"Germany","y":53.5022,"x":8.0139},{"n":"Candeal","c":"Brazil","y":-11.8078,"x":-39.1189},{"n":"Albinea","c":"Italy","y":44.6167,"x":10.6},{"n":"Corozal","c":"Puerto Rico","y":18.3411,"x":-66.3124},{"n":"Silver Springs Shores","c":"United States","y":29.1031,"x":-82.005},{"n":"Weare","c":"United States","y":43.0813,"x":-71.7219},{"n":"Rhymney","c":"United Kingdom","y":51.759,"x":-3.283},{"n":"Wervershoof","c":"Netherlands","y":52.7347,"x":5.1492},{"n":"Thap Than","c":"Thailand","y":15.457,"x":99.8961},{"n":"Tregueux","c":"France","y":48.4906,"x":-2.7381},{"n":"Montalto di Castro","c":"Italy","y":42.3514,"x":11.6078},{"n":"Sint-Amands","c":"Belgium","y":51.0525,"x":4.205},{"n":"Cavenago di Brianza","c":"Italy","y":45.5847,"x":9.4158},{"n":"La Ricamarie","c":"France","y":45.4031,"x":4.3644},{"n":"Woodway","c":"United States","y":31.4988,"x":-97.2314},{"n":"Queimada Nova","c":"Brazil","y":-8.5789,"x":-41.4189},{"n":"Oakbrook","c":"United States","y":38.9996,"x":-84.6797},{"n":"Valley Cottage","c":"United States","y":41.116,"x":-73.9436},{"n":"Lindstrom","c":"United States","y":45.387,"x":-92.8477},{"n":"Littleport","c":"United Kingdom","y":52.4568,"x":0.3046},{"n":"Pomichna","c":"Ukraine","y":48.25,"x":31.4167},{"n":"Shiprock","c":"United States","y":36.7924,"x":-108.7005},{"n":"Zawyat Sidi al Mekki","c":"Morocco","y":33.2122,"x":-7.7164},{"n":"Cinderford","c":"United Kingdom","y":51.8225,"x":-2.4989},{"n":"Babadag","c":"Romania","y":44.8933,"x":28.7119},{"n":"St. Anthony","c":"United States","y":45.0278,"x":-93.2174},{"n":"Busteni","c":"Romania","y":45.4153,"x":25.5375},{"n":"Peymeinade","c":"France","y":43.6422,"x":6.8758},{"n":"Jauru","c":"Brazil","y":-15.3419,"x":-58.8658},{"n":"Koekelare","c":"Belgium","y":51.0906,"x":2.9803},{"n":"Uricani","c":"Romania","y":45.3364,"x":23.1525},{"n":"Presque Isle","c":"United States","y":46.6868,"x":-67.9874},{"n":"East Haddam","c":"United States","y":41.4798,"x":-72.3943},{"n":"Manzanares el Real","c":"Spain","y":40.7272,"x":-3.8611},{"n":"Worplesdon","c":"United Kingdom","y":51.272,"x":-0.612},{"n":"Volkach","c":"Germany","y":49.8641,"x":10.2269},{"n":"Karkkila","c":"Finland","y":60.5347,"x":24.2097},{"n":"Puerto Octay","c":"Chile","y":-40.9667,"x":-72.9},{"n":"Engerwitzdorf","c":"Austria","y":48.3397,"x":14.4256},{"n":"Ochsenhausen","c":"Germany","y":48.0722,"x":9.9481},{"n":"Hamlin","c":"United States","y":43.3213,"x":-77.9135},{"n":"Santa Venerina","c":"Italy","y":37.6833,"x":15.1333},{"n":"San Francisco Ixhuatan","c":"Mexico","y":16.3514,"x":-94.4836},{"n":"Saint-Germain-les-Corbeil","c":"France","y":48.6206,"x":2.4892},{"n":"Manteno","c":"United States","y":41.2471,"x":-87.8457},{"n":"Yelnya","c":"Russia","y":54.5667,"x":33.1667},{"n":"Vera Cruz do Oeste","c":"Brazil","y":-25.0578,"x":-53.8769},{"n":"Pocrane","c":"Brazil","y":-19.62,"x":-41.6369},{"n":"Lake Mohawk","c":"United States","y":41.015,"x":-74.6639},{"n":"Crest","c":"France","y":44.7283,"x":5.0222},{"n":"Wenzenbach","c":"Germany","y":49.0747,"x":12.1944},{"n":"Mbamba Bay","c":"Tanzania","y":-11.2833,"x":34.7667},{"n":"Dexter","c":"United States","y":36.7928,"x":-89.9634},{"n":"Diss","c":"United Kingdom","y":52.3812,"x":1.1079},{"n":"Delta","c":"United States","y":38.756,"x":-108.0772},{"n":"Szentgotthard","c":"Hungary","y":46.9525,"x":16.2736},{"n":"Foum Zguid","c":"Morocco","y":30.0861,"x":-6.8736},{"n":"Smimou","c":"Morocco","y":31.2136,"x":-9.7058},{"n":"Dobris","c":"Czechia","y":49.7812,"x":14.1672},{"n":"Chamical","c":"Argentina","y":-30.3592,"x":-66.3133},{"n":"Chop","c":"Ukraine","y":48.4333,"x":22.2},{"n":"Fully","c":"Switzerland","y":46.1333,"x":7.1167},{"n":"Piovene Rocchette","c":"Italy","y":45.7667,"x":11.4333},{"n":"Mechanicsburg","c":"United States","y":40.2115,"x":-77.006},{"n":"Albion","c":"United States","y":42.2478,"x":-84.7572},{"n":"Chyhyryn","c":"Ukraine","y":49.0833,"x":32.6667},{"n":"Merstham","c":"United Kingdom","y":51.264,"x":-0.153},{"n":"Domerat","c":"France","y":46.3603,"x":2.5344},{"n":"Tepechitlan","c":"Mexico","y":21.6667,"x":-103.3333},{"n":"Banak","c":"Iran","y":27.8708,"x":52.0272},{"n":"Haiku-Pauwela","c":"United States","y":20.9156,"x":-156.3022},{"n":"Vel'ky Meder","c":"Slovakia","y":47.85,"x":17.7667},{"n":"Skidaway Island","c":"United States","y":31.9372,"x":-81.0449},{"n":"LaSalle","c":"United States","y":41.3575,"x":-89.0718},{"n":"Fairfield Glade","c":"United States","y":36.0028,"x":-84.8711},{"n":"Belleville","c":"France","y":46.1086,"x":4.7492},{"n":"Waseca","c":"United States","y":44.0826,"x":-93.5025},{"n":"Fehrbellin","c":"Germany","y":52.7997,"x":12.7667},{"n":"Breganze","c":"Italy","y":45.7,"x":11.5667},{"n":"Psyzh","c":"Russia","y":44.2231,"x":42.0225},{"n":"Chocen","c":"Czechia","y":50.0016,"x":16.2231},{"n":"Sarlat-la-Caneda","c":"France","y":44.89,"x":1.2167},{"n":"Great Cornard","c":"United Kingdom","y":52.0245,"x":0.7497},{"n":"Terville","c":"France","y":49.3444,"x":6.1342},{"n":"Potiragua","c":"Brazil","y":-15.595,"x":-39.8769},{"n":"Monastyryshche","c":"Ukraine","y":48.99,"x":29.8011},{"n":"Marguerittes","c":"France","y":43.86,"x":4.4439},{"n":"Garching an der Alz","c":"Germany","y":48.1167,"x":12.5833},{"n":"Murphysboro","c":"United States","y":37.7679,"x":-89.3321},{"n":"Santo Tomas de los Platanos","c":"Mexico","y":19.1817,"x":-100.2589},{"n":"East Nottingham","c":"United States","y":39.7621,"x":-75.9705},{"n":"Bumbesti-Jiu","c":"Romania","y":45.1786,"x":23.3814},{"n":"Florstadt","c":"Germany","y":50.3158,"x":8.8631},{"n":"Nuqui","c":"Colombia","y":5.7069,"x":-77.2703},{"n":"Noisy-le-Roi","c":"France","y":48.8464,"x":2.06},{"n":"Morpara","c":"Brazil","y":-11.5589,"x":-43.2808},{"n":"Fallston","c":"United States","y":39.5332,"x":-76.4452},{"n":"Triangle","c":"United States","y":38.5483,"x":-77.3195},{"n":"Saint-Vallier","c":"France","y":46.6419,"x":4.3711},{"n":"San Pablo Villa de Mitla","c":"Mexico","y":16.917,"x":-96.4},{"n":"Kui Buri","c":"Thailand","y":12.0702,"x":99.8667},{"n":"Kiskunlachaza","c":"Hungary","y":47.2,"x":19.0167},{"n":"Borgo","c":"France","y":42.5539,"x":9.4275},{"n":"Sabaoani","c":"Romania","y":47.0131,"x":26.8657},{"n":"Horden","c":"United Kingdom","y":54.764,"x":-1.315},{"n":"Vicopisano","c":"Italy","y":43.6991,"x":10.5831},{"n":"Minerbio","c":"Italy","y":44.6175,"x":11.4717},{"n":"Parque del Plata","c":"Uruguay","y":-34.7667,"x":-55.7167},{"n":"Penetanguishene","c":"Canada","y":44.7667,"x":-79.9333},{"n":"Byfleet","c":"United Kingdom","y":51.34,"x":-0.47},{"n":"Ala","c":"Italy","y":45.75,"x":11},{"n":"Schleiz","c":"Germany","y":50.5833,"x":11.8167},{"n":"Lacombe","c":"United States","y":30.3141,"x":-89.9311},{"n":"Povarovo","c":"Russia","y":56.0767,"x":37.0622},{"n":"Felida","c":"United States","y":45.7138,"x":-122.7104},{"n":"Dashouping","c":"China","y":23.639,"x":111.6875},{"n":"Velaux","c":"France","y":43.5225,"x":5.2539},{"n":"Tlumach","c":"Ukraine","y":48.8669,"x":25.0012},{"n":"Macedon","c":"United States","y":43.0792,"x":-77.3095},{"n":"Naunhof","c":"Germany","y":51.2778,"x":12.5883},{"n":"Entre Ijuis","c":"Brazil","y":-28.36,"x":-54.2678},{"n":"Airola","c":"Italy","y":41.0587,"x":14.5592},{"n":"Kusterdingen","c":"Germany","y":48.5222,"x":9.1208},{"n":"Thames","c":"New Zealand","y":-37.1383,"x":175.5375},{"n":"Rain","c":"Germany","y":48.6833,"x":10.9167},{"n":"Eslohe","c":"Germany","y":51.25,"x":8.1667},{"n":"Hermsdorf","c":"Germany","y":50.8981,"x":11.8567},{"n":"Salach","c":"Germany","y":48.6889,"x":9.7358},{"n":"Qualicum Beach","c":"Canada","y":49.35,"x":-124.4333},{"n":"Tepetitlan","c":"Mexico","y":20.1842,"x":-99.3808},{"n":"Floro","c":"Norway","y":61.5986,"x":5.0172},{"n":"Neuville-sur-Saone","c":"France","y":45.8761,"x":4.8411},{"n":"San Ramon","c":"Uruguay","y":-34.2914,"x":-55.9542},{"n":"Almagro","c":"Spain","y":38.8878,"x":-3.7122},{"n":"Sautron","c":"France","y":47.2636,"x":-1.6683},{"n":"Hanko","c":"Finland","y":59.8236,"x":22.9681},{"n":"Lake Arrowhead","c":"United States","y":34.2531,"x":-117.1945},{"n":"Clusone","c":"Italy","y":45.8833,"x":9.95},{"n":"Paulo de Faria","c":"Brazil","y":-20.0308,"x":-49.3828},{"n":"Iskourane","c":"Morocco","y":30.8434,"x":-9.8186},{"n":"Oakwood","c":"United States","y":39.7202,"x":-84.1733},{"n":"Bockhorn","c":"Germany","y":53.4,"x":8.0167},{"n":"Sturgeon Bay","c":"United States","y":44.8228,"x":-87.366},{"n":"Deutsch-Wagram","c":"Austria","y":48.2994,"x":16.5644},{"n":"Liman","c":"Azerbaijan","y":38.8733,"x":48.8139},{"n":"Eceabat","c":"Turkey","y":40.1842,"x":26.3575},{"n":"Meine","c":"Germany","y":52.3833,"x":10.5333},{"n":"Quibala","c":"Angola","y":-10.7336,"x":14.98},{"n":"Taxkorgan","c":"China","y":37.7729,"x":75.2272},{"n":"Jouy-en-Josas","c":"France","y":48.7681,"x":2.1669},{"n":"Lequile","c":"Italy","y":40.3,"x":18.1333},{"n":"Forestdale","c":"United States","y":33.5737,"x":-86.9002},{"n":"San Giuseppe Iato","c":"Italy","y":37.9667,"x":13.1833},{"n":"Capri","c":"Italy","y":40.5556,"x":14.2403},{"n":"Achacachi","c":"Bolivia","y":-16.0444,"x":-68.685},{"n":"Orte","c":"Italy","y":42.4603,"x":12.3861},{"n":"Suoyarvi","c":"Russia","y":62.0833,"x":32.3667},{"n":"Nordheim","c":"Germany","y":49.1167,"x":9.1333},{"n":"Serafimovich","c":"Russia","y":49.5833,"x":42.7333},{"n":"Hilzingen","c":"Germany","y":47.7653,"x":8.7844},{"n":"Boonton","c":"United States","y":40.9047,"x":-74.4048},{"n":"Penig","c":"Germany","y":50.9336,"x":12.7058},{"n":"Camenca","c":"Moldova","y":48.0333,"x":28.7},{"n":"Ilarionove","c":"Ukraine","y":48.4059,"x":35.2734},{"n":"Harrodsburg","c":"United States","y":37.7654,"x":-84.8474},{"n":"Sheffield Lake","c":"United States","y":41.4884,"x":-82.0978},{"n":"Saint-Chamas","c":"France","y":43.5503,"x":5.0347},{"n":"Pedrinhas","c":"Brazil","y":-11.1919,"x":-37.6739},{"n":"Morada Nova de Minas","c":"Brazil","y":-18.6039,"x":-45.3569},{"n":"Silleda","c":"Spain","y":42.7,"x":-8.2333},{"n":"Tarrafas","c":"Brazil","y":-6.6839,"x":-39.7608},{"n":"Topchikha","c":"Russia","y":52.8211,"x":83.1197},{"n":"Malhada de Pedras","c":"Brazil","y":-14.3878,"x":-41.8789},{"n":"Szerencs","c":"Hungary","y":48.1622,"x":21.205},{"n":"Baia da Traicao","c":"Brazil","y":-6.6878,"x":-34.9358},{"n":"Belsh","c":"Albania","y":40.9833,"x":19.8833},{"n":"Upper Leacock","c":"United States","y":40.0801,"x":-76.1854},{"n":"Ararat","c":"Australia","y":-37.2833,"x":142.9167},{"n":"Kozlovka","c":"Russia","y":55.8333,"x":48.25},{"n":"Ait Ouaoumana","c":"Morocco","y":32.7128,"x":-5.8042},{"n":"Aledo","c":"United States","y":32.6973,"x":-97.607},{"n":"Makhambet","c":"Kazakhstan","y":47.6714,"x":51.5798},{"n":"Sellersburg","c":"United States","y":38.4028,"x":-85.7706},{"n":"Cordisburgo","c":"Brazil","y":-19.125,"x":-44.3208},{"n":"Charters Towers","c":"Australia","y":-20.1,"x":146.2667},{"n":"Stadtilm","c":"Germany","y":50.7758,"x":11.0825},{"n":"Blanchard","c":"United States","y":35.1523,"x":-97.6613},{"n":"Wattwil","c":"Switzerland","y":47.2957,"x":9.083},{"n":"San Jose de Gracia","c":"Mexico","y":22.15,"x":-102.4167},{"n":"Takua Pa","c":"Thailand","y":8.8658,"x":98.3413},{"n":"Lisbon","c":"United States","y":44.0265,"x":-70.09},{"n":"Southside","c":"United States","y":33.9007,"x":-86.0238},{"n":"Whitehouse","c":"United States","y":32.2222,"x":-95.2217},{"n":"Sadanga","c":"Philippines","y":17.1667,"x":121.0333},{"n":"Merrydale","c":"United States","y":30.4998,"x":-91.1081},{"n":"Polaniec","c":"Poland","y":50.4333,"x":21.2833},{"n":"South Abington","c":"United States","y":41.4901,"x":-75.6891},{"n":"Castelnuovo di Magra","c":"Italy","y":44.0994,"x":10.0178},{"n":"Alvarado","c":"Colombia","y":4.5672,"x":-74.9533},{"n":"Ait Ikkou","c":"Morocco","y":33.5667,"x":-5.65},{"n":"Caister-on-Sea","c":"United Kingdom","y":52.651,"x":1.733},{"n":"Sheffield","c":"United States","y":34.757,"x":-87.6977},{"n":"Brejao","c":"Brazil","y":-9.03,"x":-36.5689},{"n":"Msemrir","c":"Morocco","y":31.7025,"x":-5.8119},{"n":"Pudozh","c":"Russia","y":61.8,"x":36.5333},{"n":"Minervino Murge","c":"Italy","y":41.1,"x":16.0833},{"n":"Pittsgrove","c":"United States","y":39.5404,"x":-75.1291},{"n":"Sao Sebastiao da Amoreira","c":"Brazil","y":-23.465,"x":-50.7608},{"n":"Langenzersdorf","c":"Austria","y":48.3069,"x":16.3553},{"n":"Rossano Veneto","c":"Italy","y":45.7067,"x":11.8069},{"n":"Ouricangas","c":"Brazil","y":-12.0169,"x":-38.6169},{"n":"Rainworth","c":"United Kingdom","y":53.1197,"x":-1.1235},{"n":"Koror","c":"Palau","y":7.3433,"x":134.4804},{"n":"Septemvri","c":"Bulgaria","y":42.2164,"x":24.125},{"n":"Rye","c":"Australia","y":-38.377,"x":144.838},{"n":"Santa Maria Xadani","c":"Mexico","y":16.3667,"x":-95.0167},{"n":"Bad Schussenried","c":"Germany","y":48.0067,"x":9.6586},{"n":"Landstuhl","c":"Germany","y":49.4122,"x":7.5722},{"n":"O'Hara","c":"United States","y":40.5092,"x":-79.895},{"n":"West Haven-Sylvan","c":"United States","y":45.5164,"x":-122.7654},{"n":"Innsbrook","c":"United States","y":37.6552,"x":-77.5775},{"n":"Rodelas","c":"Brazil","y":-8.8508,"x":-38.7558},{"n":"Imilchil","c":"Morocco","y":32.155,"x":-5.6347},{"n":"Marilandia do Sul","c":"Brazil","y":-23.745,"x":-51.3078},{"n":"Palhano","c":"Brazil","y":-4.745,"x":-37.9589},{"n":"Bad Lauchstadt","c":"Germany","y":51.3865,"x":11.8696},{"n":"Anaurilandia","c":"Brazil","y":-22.1878,"x":-52.7178},{"n":"Evergreen","c":"United States","y":39.6349,"x":-105.3356},{"n":"Kolbuszowa","c":"Poland","y":50.25,"x":21.7667},{"n":"Vif","c":"France","y":45.0553,"x":5.67},{"n":"San Joaquin","c":"Mexico","y":20.9833,"x":-99.5},{"n":"Bad Bergzabern","c":"Germany","y":49.1021,"x":7.993},{"n":"Vrable","c":"Slovakia","y":48.25,"x":18.3167},{"n":"Gilgit","c":"Pakistan","y":35.9208,"x":74.3144},{"n":"Nova Bassano","c":"Brazil","y":-28.7239,"x":-51.705},{"n":"Ak'ordat","c":"Eritrea","y":15.55,"x":37.8833},{"n":"El Chol","c":"Guatemala","y":14.9611,"x":-90.4878},{"n":"Nierstein","c":"Germany","y":49.8694,"x":8.3375},{"n":"Rignano sull'Arno","c":"Italy","y":43.7237,"x":11.4507},{"n":"Piliscsaba","c":"Hungary","y":47.6336,"x":18.8269},{"n":"Ciudad Cerralvo","c":"Mexico","y":26.0899,"x":-99.6147},{"n":"Lenox","c":"United States","y":43.1113,"x":-75.7582},{"n":"Gresham Park","c":"United States","y":33.7053,"x":-84.3155},{"n":"Foritz","c":"Germany","y":50.35,"x":11.2417},{"n":"Oulad Rahal","c":"Morocco","y":32.9175,"x":-7.2652},{"n":"Loenen","c":"Netherlands","y":52.2419,"x":5.0275},{"n":"Bang Mun Nak","c":"Thailand","y":16.0278,"x":100.3792},{"n":"Bom Jardim de Goias","c":"Brazil","y":-16.21,"x":-52.1719},{"n":"Congonhinhas","c":"Brazil","y":-23.5508,"x":-50.5539},{"n":"Bussy","c":"Switzerland","y":46.55,"x":6.55},{"n":"Bouhlou","c":"Morocco","y":34.1333,"x":-4.4},{"n":"Buda-Kashalyova","c":"Belarus","y":52.7167,"x":30.5667},{"n":"Neya","c":"Russia","y":58.2833,"x":43.8667},{"n":"Barth","c":"Germany","y":54.3667,"x":12.7167},{"n":"Iaboutene","c":"Morocco","y":35.067,"x":-3.967},{"n":"Notre-Dame-des-Prairies","c":"Canada","y":46.05,"x":-73.4333},{"n":"Polesworth","c":"United Kingdom","y":52.6152,"x":-1.6174},{"n":"Vallecrosia","c":"Italy","y":43.7931,"x":7.6439},{"n":"Weilmunster","c":"Germany","y":50.4333,"x":8.3667},{"n":"Brecon","c":"United Kingdom","y":51.948,"x":-3.391},{"n":"Hemmoor","c":"Germany","y":53.7025,"x":9.1394},{"n":"Erchie","c":"Italy","y":40.4333,"x":17.7333},{"n":"West Perth","c":"Canada","y":43.47,"x":-81.2},{"n":"Vestigne","c":"Italy","y":45.3833,"x":7.95},{"n":"Poteau","c":"United States","y":35.043,"x":-94.6357},{"n":"Tona","c":"Spain","y":41.8506,"x":2.2292},{"n":"Ponta do Sol","c":"Portugal","y":32.6811,"x":-17.1042},{"n":"Old Orchard Beach","c":"United States","y":43.5239,"x":-70.3904},{"n":"Taftanaz","c":"Syria","y":35.9981,"x":36.7847},{"n":"Moe","c":"Australia","y":-38.1722,"x":146.2678},{"n":"Roetgen","c":"Germany","y":50.65,"x":6.2},{"n":"Cabo Rojo","c":"Puerto Rico","y":18.0867,"x":-67.1482},{"n":"Agadir Melloul","c":"Morocco","y":30.2249,"x":-7.796},{"n":"New Prague","c":"United States","y":44.5459,"x":-93.5758},{"n":"Cheste","c":"Spain","y":39.4797,"x":-0.6844},{"n":"Lajedo do Tabocal","c":"Brazil","y":-13.475,"x":-40.2239},{"n":"Vaujours","c":"France","y":48.9339,"x":2.5719},{"n":"Sao Jose da Bela Vista","c":"Brazil","y":-20.5928,"x":-47.64},{"n":"Rreshen","c":"Albania","y":41.7667,"x":19.8833},{"n":"Pa Sang","c":"Thailand","y":18.5177,"x":98.9394},{"n":"Taragi","c":"Japan","y":32.2642,"x":130.9358},{"n":"Soeda","c":"Japan","y":33.5717,"x":130.8542},{"n":"Icaraima","c":"Brazil","y":-23.3958,"x":-53.6139},{"n":"Kodiak","c":"United States","y":57.7934,"x":-152.406},{"n":"Kirk of Shotts","c":"United Kingdom","y":55.823,"x":-3.804},{"n":"Schwarzenbruck","c":"Germany","y":49.35,"x":11.2333},{"n":"Cordeiros","c":"Brazil","y":-15.0389,"x":-41.935},{"n":"San Lorenzo de Descardazar","c":"Spain","y":39.609,"x":3.2853},{"n":"Pratapolis","c":"Brazil","y":-20.745,"x":-46.8608},{"n":"Guichen","c":"France","y":47.9675,"x":-1.795},{"n":"Deniliquin","c":"Australia","y":-35.5317,"x":144.9344},{"n":"Pibrac","c":"France","y":43.6169,"x":1.2847},{"n":"Cuggiono","c":"Italy","y":45.5,"x":8.8167},{"n":"Guamiranga","c":"Brazil","y":-25.1908,"x":-50.805},{"n":"Altenerding","c":"Germany","y":48.2932,"x":11.9054},{"n":"Castelnuovo di Porto","c":"Italy","y":42.1278,"x":12.5},{"n":"Aliquippa","c":"United States","y":40.6155,"x":-80.2547},{"n":"Valle de Guadalupe","c":"Mexico","y":21,"x":-102.6167},{"n":"Grossbottwar","c":"Germany","y":49.0014,"x":9.2931},{"n":"Crolles","c":"France","y":45.285,"x":5.8828},{"n":"Dinxperlo","c":"Netherlands","y":51.8667,"x":6.4833},{"n":"Efringen-Kirchen","c":"Germany","y":47.6556,"x":7.5658},{"n":"Santa Barbara do Sul","c":"Brazil","y":-28.3578,"x":-53.2469},{"n":"Phimai","c":"Thailand","y":15.2167,"x":102.5},{"n":"Darley","c":"Australia","y":-37.6547,"x":144.437},{"n":"Lower Swatara","c":"United States","y":40.2188,"x":-76.7602},{"n":"Coutras","c":"France","y":45.0408,"x":-0.1289},{"n":"Amarzgane","c":"Morocco","y":31.05,"x":-7.2167},{"n":"Shopokov","c":"Kyrgyzstan","y":42.8167,"x":74.2333},{"n":"Pianella","c":"Italy","y":42.4,"x":14.05},{"n":"Uhldingen-Muhlhofen","c":"Germany","y":47.7333,"x":9.2458},{"n":"Zoeterwoude","c":"Netherlands","y":52.1136,"x":4.5058},{"n":"Barlin","c":"France","y":50.4553,"x":2.6186},{"n":"Horice","c":"Czechia","y":50.3661,"x":15.6319},{"n":"Dornstadt","c":"Germany","y":48.4692,"x":9.9417},{"n":"Mkazi","c":"Comoros","y":-11.7323,"x":43.2671},{"n":"Sonsbeck","c":"Germany","y":51.6089,"x":6.3769},{"n":"Balsamo","c":"Brazil","y":-20.735,"x":-49.5839},{"n":"Castelbuono","c":"Italy","y":37.9306,"x":14.0883},{"n":"El Marmouta","c":"Morocco","y":32.0989,"x":-7.3861},{"n":"Rhinelander","c":"United States","y":45.6361,"x":-89.4256},{"n":"San Jacinto","c":"Uruguay","y":-34.5444,"x":-55.8719},{"n":"Otaki","c":"Japan","y":35.285,"x":140.2456},{"n":"Chartres-de-Bretagne","c":"France","y":48.0394,"x":-1.7039},{"n":"Ville Platte","c":"United States","y":30.6901,"x":-92.2744},{"n":"Cavan Monaghan","c":"Canada","y":44.2,"x":-78.4667},{"n":"Olmsted Falls","c":"United States","y":41.3658,"x":-81.9042},{"n":"Boville Ernica","c":"Italy","y":41.6425,"x":13.474},{"n":"Mansfeld","c":"Germany","y":51.5942,"x":11.4547},{"n":"Glencoe","c":"United States","y":42.1347,"x":-87.7641},{"n":"Lyaskovets","c":"Bulgaria","y":43.1081,"x":25.7132},{"n":"Kryzhopil","c":"Ukraine","y":48.3842,"x":28.8625},{"n":"Poisy","c":"France","y":45.9222,"x":6.0631},{"n":"Orange Park","c":"United States","y":30.1706,"x":-81.7041},{"n":"Agnita","c":"Romania","y":45.9733,"x":24.6172},{"n":"Murzzuschlag","c":"Austria","y":47.6075,"x":15.6731},{"n":"Kumphawapi","c":"Thailand","y":17.1151,"x":103.0186},{"n":"Semily","c":"Czechia","y":50.602,"x":15.3356},{"n":"Krumovgrad","c":"Bulgaria","y":41.4709,"x":25.6546},{"n":"Guajeru","c":"Brazil","y":-14.5469,"x":-41.94},{"n":"Canal Winchester","c":"United States","y":39.8432,"x":-82.8121},{"n":"Absecon","c":"United States","y":39.4228,"x":-74.4944},{"n":"Kappeln","c":"Germany","y":54.6614,"x":9.9311},{"n":"Yacimiento Rio Turbio","c":"Argentina","y":-51.5333,"x":-72.3},{"n":"Yang Talat","c":"Thailand","y":16.3997,"x":103.3678},{"n":"Mazingarbe","c":"France","y":50.4731,"x":2.7181},{"n":"Glens Falls North","c":"United States","y":43.335,"x":-73.6824},{"n":"Palm Beach","c":"United States","y":26.6932,"x":-80.0406},{"n":"Origgio","c":"Italy","y":45.5969,"x":9.0183},{"n":"Venelles","c":"France","y":43.5983,"x":5.4825},{"n":"Casarsa della Delizia","c":"Italy","y":45.95,"x":12.85},{"n":"Soltsy","c":"Russia","y":58.1167,"x":30.3167},{"n":"Caimanera","c":"Cuba","y":19.9947,"x":-75.16},{"n":"West Donegal","c":"United States","y":40.1297,"x":-76.6227},{"n":"Gorodovikovsk","c":"Russia","y":46.0833,"x":41.9333},{"n":"Ban Na","c":"Thailand","y":12.827,"x":101.6692},{"n":"Balatonalmadi","c":"Hungary","y":47.0292,"x":18.0219},{"n":"Rochford","c":"United Kingdom","y":51.5821,"x":0.7065},{"n":"Nam Som","c":"Thailand","y":17.7703,"x":102.1894},{"n":"Molbergen","c":"Germany","y":52.8667,"x":7.9333},{"n":"Old Colwyn","c":"United Kingdom","y":53.291,"x":-3.704},{"n":"Dentergem","c":"Belgium","y":50.9636,"x":3.4153},{"n":"Topsham","c":"United States","y":43.9615,"x":-69.9588},{"n":"Tiqqi","c":"Morocco","y":29.7,"x":-9.0667},{"n":"Armazem","c":"Brazil","y":-28.2619,"x":-49.0178},{"n":"Pribor","c":"Czechia","y":49.6409,"x":18.145},{"n":"Saint-Jean-de-Monts","c":"France","y":46.7928,"x":-2.0603},{"n":"Nanzhangcheng","c":"China","y":37.9108,"x":114.0749},{"n":"Kuhmo","c":"Finland","y":64.125,"x":29.5167},{"n":"Sidi Dahbi","c":"Morocco","y":33.05,"x":-7.1833},{"n":"Heek","c":"Germany","y":52.1167,"x":7.0997},{"n":"Tordesillas","c":"Spain","y":41.5,"x":-5},{"n":"North Sarasota","c":"United States","y":27.3711,"x":-82.5177},{"n":"Tomazina","c":"Brazil","y":-23.7778,"x":-49.95},{"n":"Hurtgenwald","c":"Germany","y":50.7172,"x":6.3797},{"n":"Hassi Berkane","c":"Morocco","y":34.8333,"x":-2.8667},{"n":"Iles","c":"Colombia","y":0.9706,"x":-77.5208},{"n":"Flieden","c":"Germany","y":50.4231,"x":9.5658},{"n":"Redencao do Gurgueia","c":"Brazil","y":-9.4869,"x":-44.5858},{"n":"Kukrahill","c":"Nicaragua","y":12.25,"x":-83.75},{"n":"Santa Barbara","c":"Mexico","y":26.8133,"x":-105.8203},{"n":"Arnprior","c":"Canada","y":45.4333,"x":-76.35},{"n":"Clanton","c":"United States","y":32.844,"x":-86.623},{"n":"Borsdorf","c":"Germany","y":51.3469,"x":12.5383},{"n":"Conthey","c":"Switzerland","y":46.2725,"x":7.2548},{"n":"Prata di Pordenone","c":"Italy","y":45.8944,"x":12.5886},{"n":"Bad Sooden-Allendorf","c":"Germany","y":51.2667,"x":9.9667},{"n":"Heel","c":"Netherlands","y":51.1806,"x":5.8964},{"n":"Padul","c":"Spain","y":37.0244,"x":-3.6267},{"n":"Roznov","c":"Romania","y":46.8356,"x":26.5117},{"n":"Mariinskiy Posad","c":"Russia","y":56.1167,"x":47.7167},{"n":"Tirschenreuth","c":"Germany","y":49.8789,"x":12.3369},{"n":"Kuppenheim","c":"Germany","y":48.8275,"x":8.2544},{"n":"Belozersk","c":"Russia","y":60.0333,"x":37.7833},{"n":"Saint-Marcellin","c":"France","y":45.1517,"x":5.3197},{"n":"Araguacu","c":"Brazil","y":-12.9308,"x":-49.8258},{"n":"Iernut","c":"Romania","y":46.4533,"x":24.2333},{"n":"Zapatoca","c":"Colombia","y":6.815,"x":-73.2683},{"n":"Airmont","c":"United States","y":41.0992,"x":-74.099},{"n":"Quakertown","c":"United States","y":40.4398,"x":-75.3456},{"n":"Walmer","c":"United Kingdom","y":51.2043,"x":1.3985},{"n":"Hausham","c":"Germany","y":47.75,"x":11.85},{"n":"Tleta Taghramt","c":"Morocco","y":35.7878,"x":-5.4678},{"n":"Kleinostheim","c":"Germany","y":50,"x":9.0667},{"n":"Sodankyla","c":"Finland","y":67.4149,"x":26.5907},{"n":"Jacou","c":"France","y":43.6608,"x":3.9103},{"n":"Les Angles","c":"France","y":43.9544,"x":4.7667},{"n":"Esopus","c":"United States","y":41.8425,"x":-73.9936},{"n":"Castiglione Olona","c":"Italy","y":45.7531,"x":8.8744},{"n":"Smiths Falls","c":"Canada","y":44.9,"x":-76.0167},{"n":"Monson","c":"United States","y":42.0934,"x":-72.3261},{"n":"Citrus Springs","c":"United States","y":28.9931,"x":-82.4595},{"n":"Villamediana de Iregua","c":"Spain","y":42.4264,"x":-2.4181},{"n":"San Esteban","c":"Philippines","y":17.3333,"x":120.45},{"n":"Miyada","c":"Japan","y":35.7689,"x":137.9442},{"n":"Seebad Heringsdorf","c":"Germany","y":53.9667,"x":14.1667},{"n":"Bad Rothenfelde","c":"Germany","y":52.1117,"x":8.1606},{"n":"Jarny","c":"France","y":49.1589,"x":5.8772},{"n":"Monte San Savino","c":"Italy","y":43.3303,"x":11.7308},{"n":"Azandarian","c":"Iran","y":34.5089,"x":48.6867},{"n":"Lubuagan","c":"Philippines","y":17.35,"x":121.1833},{"n":"Redovan","c":"Spain","y":38.1139,"x":-0.9056},{"n":"Mucheln","c":"Germany","y":51.3,"x":11.8},{"n":"Falaise","c":"France","y":48.8972,"x":-0.1975},{"n":"Jesus Nazareno","c":"Argentina","y":-32.9111,"x":-68.79},{"n":"Berching","c":"Germany","y":49.1064,"x":11.4394},{"n":"Tagapul-an","c":"Philippines","y":12.05,"x":124.15},{"n":"Frankfort Square","c":"United States","y":41.5221,"x":-87.8033},{"n":"Monsenhor Paulo","c":"Brazil","y":-21.7578,"x":-45.5408},{"n":"Santa Isabel do Ivai","c":"Brazil","y":-23.0053,"x":-53.1878},{"n":"Upholland","c":"United Kingdom","y":53.541,"x":-2.728},{"n":"Pont-l'Abbe","c":"France","y":47.8672,"x":-4.2231},{"n":"Wharton","c":"United States","y":29.3138,"x":-96.1044},{"n":"Dionisio","c":"Brazil","y":-19.8428,"x":-42.7769},{"n":"Hajdudorog","c":"Hungary","y":47.8167,"x":21.5},{"n":"South Kensington","c":"United States","y":39.0188,"x":-77.0785},{"n":"Calbe","c":"Germany","y":51.9033,"x":11.7758},{"n":"Tashir","c":"Armenia","y":41.1144,"x":44.2906},{"n":"Llagostera","c":"Spain","y":41.8292,"x":2.8933},{"n":"Fara Gera d'Adda","c":"Italy","y":45.55,"x":9.5333},{"n":"Canonsburg","c":"United States","y":40.2643,"x":-80.1868},{"n":"Sandrigo","c":"Italy","y":45.6667,"x":11.6},{"n":"Seyssins","c":"France","y":45.1561,"x":5.6797},{"n":"Tifra","c":"Algeria","y":36.6664,"x":4.6972},{"n":"Solarino","c":"Italy","y":37.1,"x":15.1167},{"n":"Hainichen","c":"Germany","y":50.9697,"x":13.1253},{"n":"Serra dos Aimores","c":"Brazil","y":-17.7828,"x":-40.2478},{"n":"Clarendon Hills","c":"United States","y":41.7981,"x":-87.9569},{"n":"Needles","c":"United States","y":34.8164,"x":-114.6189},{"n":"Hausjarvi","c":"Finland","y":60.7884,"x":25.0247},{"n":"Uzes","c":"France","y":44.0125,"x":4.4197},{"n":"Forst","c":"Germany","y":49.1533,"x":8.5842},{"n":"Saint-Jean-d'Illac","c":"France","y":44.8097,"x":-0.7836},{"n":"Porkhov","c":"Russia","y":57.7667,"x":29.55},{"n":"Amalou","c":"Algeria","y":36.4778,"x":4.6333},{"n":"Vasarosnameny","c":"Hungary","y":48.1267,"x":22.3183},{"n":"Pino Troinese","c":"Italy","y":45.0435,"x":7.7726},{"n":"Norton Canes","c":"United Kingdom","y":52.6833,"x":-1.9666},{"n":"Nossa Senhora dos Remedios","c":"Brazil","y":-3.9789,"x":-42.6208},{"n":"Roverbella","c":"Italy","y":45.2667,"x":10.7667},{"n":"Stainz","c":"Austria","y":46.8942,"x":15.2639},{"n":"Hernani","c":"Philippines","y":11.3333,"x":125.5833},{"n":"Ibirapua","c":"Brazil","y":-17.6878,"x":-40.1089},{"n":"Junin","c":"Colombia","y":4.7903,"x":-73.6633},{"n":"Obertraubling","c":"Germany","y":48.9658,"x":12.1669},{"n":"Ripponden","c":"United Kingdom","y":53.672,"x":-1.946},{"n":"Santa Lucia","c":"Brazil","y":-21.685,"x":-48.0839},{"n":"Steti","c":"Czechia","y":50.4531,"x":14.3743},{"n":"Volchansk","c":"Russia","y":59.9333,"x":60.05},{"n":"Belo Pole","c":"Bulgaria","y":42.0328,"x":23.05},{"n":"Lincoln","c":"New Zealand","y":-43.64,"x":172.486},{"n":"Gremyachinsk","c":"Russia","y":58.5667,"x":57.8333},{"n":"Pitman","c":"United States","y":39.7335,"x":-75.1306},{"n":"Rock Falls","c":"United States","y":41.7723,"x":-89.6928},{"n":"Baraolt","c":"Romania","y":46.075,"x":25.6},{"n":"Sao Vicente do Sul","c":"Brazil","y":-29.6919,"x":-54.6789},{"n":"Motta Visconti","c":"Italy","y":45.2833,"x":9},{"n":"Heikendorf","c":"Germany","y":54.3722,"x":10.2081},{"n":"Palazzolo Acreide","c":"Italy","y":37.0617,"x":14.9028},{"n":"Perkasie","c":"United States","y":40.3719,"x":-75.292},{"n":"Moranbah","c":"Australia","y":-22.0016,"x":148.0533},{"n":"Forbes","c":"Australia","y":-33.3833,"x":148.0167},{"n":"Guiricema","c":"Brazil","y":-21.0078,"x":-42.7178},{"n":"Cortez","c":"United States","y":37.3505,"x":-108.5766},{"n":"Sileby","c":"United Kingdom","y":52.731,"x":-1.106},{"n":"Bembibre","c":"Spain","y":42.6154,"x":-6.417},{"n":"Calvisano","c":"Italy","y":45.3489,"x":10.3458},{"n":"Evron","c":"France","y":48.1556,"x":-0.4025},{"n":"Saint-Renan","c":"France","y":48.4339,"x":-4.6214},{"n":"Rava-Rus'ka","c":"Ukraine","y":50.25,"x":23.6167},{"n":"Barntrup","c":"Germany","y":51.9831,"x":9.1167},{"n":"Ban Buak Khang","c":"Thailand","y":18.7057,"x":99.1068},{"n":"Cape St. Claire","c":"United States","y":39.0433,"x":-76.4471},{"n":"Reichelsheim","c":"Germany","y":49.7149,"x":8.8396},{"n":"Steinheim am Albuch","c":"Germany","y":48.6922,"x":10.0642},{"n":"Modelu","c":"Romania","y":44.1962,"x":27.3852},{"n":"Koscielisko","c":"Poland","y":49.2907,"x":19.8893},{"n":"Solotvyno","c":"Ukraine","y":47.9597,"x":23.8669},{"n":"Paray-Vieille-Poste","c":"France","y":48.7081,"x":2.3628},{"n":"Seneca Falls","c":"United States","y":42.9136,"x":-76.7904},{"n":"Kirby","c":"United States","y":29.4611,"x":-98.3861},{"n":"Pont-Rouge","c":"Canada","y":46.75,"x":-71.7},{"n":"Staufenberg","c":"Germany","y":50.6667,"x":8.7167},{"n":"El Corrillo","c":"Spain","y":43.2142,"x":-3.1311},{"n":"Chamonix-Mont-Blanc","c":"France","y":45.9222,"x":6.8689},{"n":"Vado Ligure","c":"Italy","y":44.2692,"x":8.4361},{"n":"Tasnad","c":"Romania","y":47.4772,"x":22.5833},{"n":"Szeghalom","c":"Hungary","y":47.0239,"x":21.1678},{"n":"Furstenfeld","c":"Austria","y":47.05,"x":16.0833},{"n":"Tlanalapa","c":"Mexico","y":19.8167,"x":-98.6},{"n":"Smizany","c":"Slovakia","y":48.9584,"x":20.5177},{"n":"Glenwood","c":"United States","y":41.5409,"x":-87.6116},{"n":"Dumbarton","c":"United States","y":37.613,"x":-77.5065},{"n":"Grunheide","c":"Germany","y":52.4167,"x":13.8167},{"n":"Alvorada do Norte","c":"Brazil","y":-14.4808,"x":-46.4919},{"n":"Kirchen","c":"Germany","y":50.8086,"x":7.8833},{"n":"Baillargues","c":"France","y":43.6611,"x":4.0128},{"n":"Monte Urano","c":"Italy","y":43.206,"x":13.6721},{"n":"Crestline","c":"United States","y":34.2486,"x":-117.289},{"n":"Gyumai","c":"China","y":33.7561,"x":99.65},{"n":"Jerseyville","c":"United States","y":39.1175,"x":-90.3271},{"n":"Corella","c":"Philippines","y":9.6833,"x":123.9167},{"n":"Piranguinho","c":"Brazil","y":-22.4008,"x":-45.5319},{"n":"Bessancourt","c":"France","y":49.0378,"x":2.2133},{"n":"Champlain","c":"Canada","y":45.5333,"x":-74.65},{"n":"Perg","c":"Austria","y":48.2503,"x":14.6336},{"n":"Chiusi","c":"Italy","y":43.0167,"x":11.95},{"n":"Citrusdal","c":"South Africa","y":-32.5894,"x":19.0147},{"n":"New Scotland","c":"United States","y":42.6047,"x":-73.9413},{"n":"Spello","c":"Italy","y":42.9833,"x":12.6667},{"n":"Weida","c":"Germany","y":50.7667,"x":12.0667},{"n":"Ulstein","c":"Norway","y":62.3564,"x":5.8539},{"n":"Thompsonville","c":"United States","y":41.9916,"x":-72.5965},{"n":"Bersenbruck","c":"Germany","y":52.5553,"x":7.9472},{"n":"Castelnovo di Sotto","c":"Italy","y":44.8167,"x":10.5667},{"n":"Pegomas","c":"France","y":43.5967,"x":6.9333},{"n":"Feldkirchen","c":"Germany","y":48.15,"x":11.7333},{"n":"Mrakovo","c":"Russia","y":52.7139,"x":56.6269},{"n":"Secovce","c":"Slovakia","y":48.7,"x":21.65},{"n":"Ronciglione","c":"Italy","y":42.2894,"x":12.2147},{"n":"Babeni","c":"Romania","y":44.975,"x":24.2311},{"n":"Nevada","c":"United States","y":37.8445,"x":-94.3492},{"n":"Bonnybridge","c":"United Kingdom","y":55.999,"x":-3.887},{"n":"Tuneiras do Oeste","c":"Brazil","y":-23.8708,"x":-52.8758},{"n":"Coaticook","c":"Canada","y":45.1333,"x":-71.8},{"n":"Des Peres","c":"United States","y":38.5973,"x":-90.448},{"n":"Raunds","c":"United Kingdom","y":52.345,"x":-0.537},{"n":"Tangara","c":"Brazil","y":-27.105,"x":-51.2469},{"n":"Perryville","c":"United States","y":37.7263,"x":-89.8759},{"n":"Corrales","c":"United States","y":35.2366,"x":-106.6191},{"n":"London Grove","c":"United States","y":39.8327,"x":-75.8155},{"n":"Tibro","c":"Sweden","y":58.419,"x":14.158},{"n":"Kortessem","c":"Belgium","y":50.8667,"x":5.3833},{"n":"Fort Knox","c":"United States","y":37.8915,"x":-85.9636},{"n":"Nakhon Chai Si","c":"Thailand","y":13.8005,"x":100.1869},{"n":"Fern Park","c":"United States","y":28.6484,"x":-81.3458},{"n":"Uglegorsk","c":"Russia","y":49.0667,"x":142.0333},{"n":"San Gavino Monreale","c":"Italy","y":39.5499,"x":8.7916},{"n":"Edgewater Park","c":"United States","y":40.054,"x":-74.9117},{"n":"Santana do Manhuacu","c":"Brazil","y":-20.1078,"x":-41.925},{"n":"Toro","c":"Spain","y":41.52,"x":-5.3947},{"n":"Villanueva de Cordoba","c":"Spain","y":38.3167,"x":-4.6167},{"n":"Chikhli","c":"India","y":20.75,"x":73.07},{"n":"Ueckermunde","c":"Germany","y":53.7333,"x":14.0333},{"n":"Altavilla Milicia","c":"Italy","y":38.0422,"x":13.5503},{"n":"La Colle-sur-Loup","c":"France","y":43.6864,"x":7.1039},{"n":"Virginia","c":"Brazil","y":-22.3328,"x":-45.0919},{"n":"Pickering","c":"United Kingdom","y":54.2439,"x":-0.776},{"n":"Waltham Cross","c":"United Kingdom","y":51.686,"x":-0.0331},{"n":"Kirn","c":"Germany","y":49.7881,"x":7.4572},{"n":"Monte Alegre de Goias","c":"Brazil","y":-13.2558,"x":-46.9008},{"n":"Nazareno","c":"Brazil","y":-21.2158,"x":-44.6108},{"n":"Montesano","c":"United States","y":47.0102,"x":-123.5857},{"n":"Zomergem","c":"Belgium","y":51.1167,"x":3.5667},{"n":"Bicaz","c":"Romania","y":46.9108,"x":26.0911},{"n":"Gubden","c":"Russia","y":42.5658,"x":47.5631},{"n":"Vallo della Lucania","c":"Italy","y":40.2333,"x":15.2667},{"n":"Mels","c":"Switzerland","y":47.0497,"x":9.4167},{"n":"Mata Verde","c":"Brazil","y":-15.6858,"x":-40.7408},{"n":"Aureilhan","c":"France","y":43.2439,"x":0.0967},{"n":"Perl","c":"Germany","y":49.4667,"x":6.3667},{"n":"Andalusia","c":"United States","y":31.3101,"x":-86.4781},{"n":"Zoutleeuw","c":"Belgium","y":50.8333,"x":5.1036},{"n":"Capitolio","c":"Brazil","y":-20.615,"x":-46.05},{"n":"Ballsh","c":"Albania","y":40.5991,"x":19.7359},{"n":"El Espinal","c":"Mexico","y":16.4906,"x":-95.0444},{"n":"Cerveny Kostelec","c":"Czechia","y":50.4763,"x":16.093},{"n":"Busk","c":"Ukraine","y":49.9667,"x":24.6167},{"n":"Polegate","c":"United Kingdom","y":50.8216,"x":0.2442},{"n":"Grossraschen","c":"Germany","y":51.5831,"x":14},{"n":"Barvynkove","c":"Ukraine","y":48.9067,"x":37.0131},{"n":"Fermignano","c":"Italy","y":43.6766,"x":12.645},{"n":"Nogara","c":"Italy","y":45.1833,"x":11.0667},{"n":"Newstead","c":"United States","y":43.0196,"x":-78.5223},{"n":"Nadudvar","c":"Hungary","y":47.4167,"x":21.1667},{"n":"Harlington","c":"United Kingdom","y":53.481,"x":-1.182},{"n":"Westampton","c":"United States","y":40.0168,"x":-74.8213},{"n":"Minto","c":"Canada","y":43.9167,"x":-80.8667},{"n":"Dunafoldvar","c":"Hungary","y":46.8,"x":18.9167},{"n":"Zoppola","c":"Italy","y":45.9667,"x":12.7667},{"n":"Binfield","c":"United Kingdom","y":51.432,"x":-0.792},{"n":"Incline Village","c":"United States","y":39.2639,"x":-119.9453},{"n":"Glenshaw","c":"United States","y":40.5391,"x":-79.9735},{"n":"Cresskill","c":"United States","y":40.9405,"x":-73.9596},{"n":"Earlimart","c":"United States","y":35.8824,"x":-119.2715},{"n":"Morden","c":"Canada","y":49.1919,"x":-98.1006},{"n":"Hakubacho","c":"Japan","y":36.7,"x":137.8667},{"n":"Hawthorn Woods","c":"United States","y":42.2313,"x":-88.0623},{"n":"Cologna Veneta","c":"Italy","y":45.3167,"x":11.3833},{"n":"Unterwellenborn","c":"Germany","y":50.6586,"x":11.4419},{"n":"Ferreira do Zezere","c":"Portugal","y":39.7,"x":-8.2833},{"n":"La Libertad","c":"Guatemala","y":16.7804,"x":-90.12},{"n":"Lakhzazra","c":"Morocco","y":33.0333,"x":-7.05},{"n":"Caerano di San Marco","c":"Italy","y":45.7853,"x":12.0042},{"n":"Reocin","c":"Spain","y":43.3611,"x":-4.0864},{"n":"Bientina","c":"Italy","y":43.7072,"x":10.6206},{"n":"Reginopolis","c":"Brazil","y":-21.8878,"x":-49.225},{"n":"Middlebury","c":"United States","y":44.0043,"x":-73.1223},{"n":"Nishiowa","c":"Japan","y":36.022,"x":139.6543},{"n":"Tihna al Jabal","c":"Egypt","y":28.1889,"x":30.7694},{"n":"Vigliano Biellese","c":"Italy","y":45.5617,"x":8.1117},{"n":"Marcoussis","c":"France","y":48.6417,"x":2.2297},{"n":"Klingenthal","c":"Germany","y":50.3669,"x":12.4686},{"n":"Comendador Levy Gasparian","c":"Brazil","y":-22.0289,"x":-43.205},{"n":"Santhia","c":"Italy","y":45.3667,"x":8.1667},{"n":"Bushtyno","c":"Ukraine","y":48.0503,"x":23.4894},{"n":"Hoquiam","c":"United States","y":46.9863,"x":-123.9022},{"n":"Lambarkiyine","c":"Morocco","y":33.2,"x":-7.5},{"n":"Sortino","c":"Italy","y":37.1667,"x":15.0333},{"n":"Penkridge","c":"United Kingdom","y":52.7252,"x":-2.1164},{"n":"Brigantine","c":"United States","y":39.4138,"x":-74.3787},{"n":"Teterow","c":"Germany","y":53.7667,"x":12.5667},{"n":"Elimaki","c":"Finland","y":60.7208,"x":26.4514},{"n":"Dobrada","c":"Brazil","y":-21.5167,"x":-48.3939},{"n":"Le Poire-sur-Vie","c":"France","y":46.7686,"x":-1.5083},{"n":"Fishersville","c":"United States","y":38.1005,"x":-78.9687},{"n":"Kings Grant","c":"United States","y":34.2665,"x":-77.8659},{"n":"Concordia sulla Secchia","c":"Italy","y":44.9124,"x":10.9826},{"n":"Kennedale","c":"United States","y":32.6434,"x":-97.2173},{"n":"Brightlingsea","c":"United Kingdom","y":51.81,"x":1.03},{"n":"Biederitz","c":"Germany","y":52.1608,"x":11.7178},{"n":"Usiacuri","c":"Colombia","y":10.7428,"x":-74.9758},{"n":"Gross Kreutz","c":"Germany","y":52.3997,"x":12.7831},{"n":"Lienen","c":"Germany","y":52.1461,"x":7.9739},{"n":"Andrushivka","c":"Ukraine","y":50.0167,"x":29.0167},{"n":"San Sebastian","c":"Puerto Rico","y":18.3356,"x":-66.9949},{"n":"Matawan","c":"United States","y":40.4127,"x":-74.2365},{"n":"Premnitz","c":"Germany","y":52.5331,"x":12.3331},{"n":"Monahans","c":"United States","y":31.6289,"x":-103.0403},{"n":"Elz","c":"Germany","y":50.4167,"x":8.0333},{"n":"Skewen","c":"United Kingdom","y":51.6609,"x":-3.8399},{"n":"Grossenluder","c":"Germany","y":50.5925,"x":9.5423},{"n":"Bigastro","c":"Spain","y":38.0631,"x":-0.8956},{"n":"San Sperate","c":"Italy","y":39.3575,"x":9.0083},{"n":"Iksane","c":"Morocco","y":35.1333,"x":-3.0333},{"n":"Dorgali","c":"Italy","y":40.2916,"x":9.5876},{"n":"Santa Eulalia","c":"Mexico","y":28.5939,"x":-105.8878},{"n":"Plabennec","c":"France","y":48.5019,"x":-4.4261},{"n":"Springwood","c":"Australia","y":-33.6967,"x":150.5683},{"n":"Ferrandina","c":"Italy","y":40.5,"x":16.45},{"n":"Nefasit","c":"Eritrea","y":15.3333,"x":39.0619},{"n":"Langueux","c":"France","y":48.495,"x":-2.7175},{"n":"Adelsdorf","c":"Germany","y":49.7112,"x":10.8935},{"n":"North Madison","c":"United States","y":41.8298,"x":-81.0511},{"n":"Bang Len","c":"Thailand","y":14.0219,"x":100.1719},{"n":"Laishevo","c":"Russia","y":55.4,"x":49.55},{"n":"Sarzeau","c":"France","y":47.5272,"x":-2.7697},{"n":"Oppenheim","c":"Germany","y":49.8556,"x":8.3603},{"n":"Ustyuzhna","c":"Russia","y":58.8333,"x":36.4333},{"n":"Prairie du Sac","c":"United States","y":43.292,"x":-89.7353},{"n":"Yasinia","c":"Ukraine","y":48.2728,"x":24.3747},{"n":"Nazaria","c":"Brazil","y":-5.3608,"x":-42.8083},{"n":"Lutzen","c":"Germany","y":51.2583,"x":12.1417},{"n":"La Belleza","c":"Colombia","y":5.8575,"x":-73.9656},{"n":"Oulad Khallouf","c":"Morocco","y":34.7167,"x":-2.5833},{"n":"Amapa","c":"Brazil","y":2.0528,"x":-50.7928},{"n":"Hampstead","c":"United States","y":42.8821,"x":-71.1709},{"n":"Highfields","c":"Australia","y":-27.4581,"x":151.9492},{"n":"Paddock Wood","c":"United Kingdom","y":51.1756,"x":0.3955},{"n":"Canford Cliffs","c":"United Kingdom","y":50.7,"x":-1.93},{"n":"Byureghavan","c":"Armenia","y":40.3147,"x":44.5936},{"n":"Colmeia","c":"Brazil","y":-8.7289,"x":-48.765},{"n":"Saint-Remy-les-Chevreuse","c":"France","y":48.7058,"x":2.0719},{"n":"Gavorrano","c":"Italy","y":42.925,"x":10.9083},{"n":"Hyrum","c":"United States","y":41.6311,"x":-111.8418},{"n":"Lipki","c":"Russia","y":53.95,"x":37.7},{"n":"Kahl am Main","c":"Germany","y":50.0681,"x":9.0067},{"n":"Richlands","c":"United States","y":37.0878,"x":-81.808},{"n":"Ittiri","c":"Italy","y":40.5908,"x":8.5695},{"n":"Schieder-Schwalenberg","c":"Germany","y":51.8831,"x":9.1831},{"n":"Vorden","c":"Netherlands","y":52.1,"x":6.3167},{"n":"Ladue","c":"United States","y":38.6378,"x":-90.3815},{"n":"Caerleon","c":"United Kingdom","y":51.615,"x":-2.959},{"n":"Verkhoturye","c":"Russia","y":58.8667,"x":60.8},{"n":"Simmern","c":"Germany","y":49.9833,"x":7.5167},{"n":"Kosiv","c":"Ukraine","y":48.315,"x":25.0953},{"n":"Takieta","c":"Niger","y":13.6806,"x":8.5292},{"n":"Alamo Heights","c":"United States","y":29.4828,"x":-98.4682},{"n":"Leporano","c":"Italy","y":40.3822,"x":17.3343},{"n":"Sawang Daen Din","c":"Thailand","y":17.475,"x":103.4569},{"n":"Le Grau-du-Roi","c":"France","y":43.5372,"x":4.1367},{"n":"Schuylkill","c":"United States","y":40.1086,"x":-75.4982},{"n":"Reserve","c":"United States","y":30.0741,"x":-90.5557},{"n":"Takaharu","c":"Japan","y":31.9283,"x":131.0078},{"n":"Osternienburg","c":"Germany","y":51.8,"x":12.0167},{"n":"Lauta","c":"Germany","y":51.4481,"x":14.0997},{"n":"Camutanga","c":"Brazil","y":-7.4069,"x":-35.2739},{"n":"Orting","c":"United States","y":47.0966,"x":-122.2111},{"n":"Ponte di Piave","c":"Italy","y":45.7167,"x":12.4667},{"n":"Tuba City","c":"United States","y":36.125,"x":-111.2468},{"n":"Mono","c":"Canada","y":44.0167,"x":-80.0667},{"n":"Rulzheim","c":"Germany","y":49.1556,"x":8.2936},{"n":"Untergruppenbach","c":"Germany","y":49.0833,"x":9.2667},{"n":"Wattens","c":"Austria","y":47.2914,"x":11.5925},{"n":"Francisco Santos","c":"Brazil","y":-6.9928,"x":-41.1378},{"n":"Cabezon de la Sal","c":"Spain","y":43.3075,"x":-4.2325},{"n":"Kiuruvesi","c":"Finland","y":63.6528,"x":26.6194},{"n":"Martins Soares","c":"Brazil","y":-20.2569,"x":-41.8769},{"n":"Muzo","c":"Colombia","y":5.5297,"x":-74.1044},{"n":"Signal Mountain","c":"United States","y":35.1449,"x":-85.3457},{"n":"Goundam","c":"Mali","y":16.4167,"x":-3.6667},{"n":"Nonnweiler","c":"Germany","y":49.6065,"x":6.9694},{"n":"Mauleon","c":"France","y":46.9228,"x":-0.7497},{"n":"Geroskipou","c":"Cyprus","y":34.7609,"x":32.4484},{"n":"Orrville","c":"United States","y":40.848,"x":-81.7743},{"n":"Niederwerrn","c":"Germany","y":50.0667,"x":10.1831},{"n":"Aigues-Mortes","c":"France","y":43.5667,"x":4.1925},{"n":"East Brandywine","c":"United States","y":40.0364,"x":-75.7505},{"n":"Foyos","c":"Spain","y":39.5386,"x":-0.3567},{"n":"Itaucu","c":"Brazil","y":-16.2008,"x":-49.6078},{"n":"Riacho dos Cavalos","c":"Brazil","y":-6.4428,"x":-37.6508},{"n":"Aksakovo","c":"Bulgaria","y":43.2608,"x":27.8159},{"n":"Farmville","c":"United States","y":37.2959,"x":-78.4002},{"n":"Schnaittach","c":"Germany","y":49.5592,"x":11.3431},{"n":"Wissen","c":"Germany","y":50.7825,"x":7.735},{"n":"Bovezzo","c":"Italy","y":45.5833,"x":10.25},{"n":"Bompas","c":"France","y":42.7311,"x":2.9333},{"n":"Tanquinho","c":"Brazil","y":-11.9789,"x":-39.1039},{"n":"Feurs","c":"France","y":45.7408,"x":4.2258},{"n":"Saint-Maixent-l'Ecole","c":"France","y":46.4128,"x":-0.2081},{"n":"Long Hill","c":"United States","y":40.6838,"x":-74.4878},{"n":"Innisfail","c":"Australia","y":-17.5236,"x":146.0292},{"n":"Hengelo","c":"Netherlands","y":52.05,"x":6.3},{"n":"Torre de Moncorvo","c":"Portugal","y":41.2,"x":-7.1333},{"n":"Sanatoga","c":"United States","y":40.2498,"x":-75.5886},{"n":"Bad Endorf","c":"Germany","y":47.9,"x":12.3},{"n":"Tuparendi","c":"Brazil","y":-27.7558,"x":-54.4819},{"n":"Borgentreich","c":"Germany","y":51.5692,"x":9.2411},{"n":"Tasso Fragoso","c":"Brazil","y":-8.475,"x":-45.7428},{"n":"Cagli","c":"Italy","y":43.547,"x":12.6473},{"n":"Birkenwerder","c":"Germany","y":52.6833,"x":13.2833},{"n":"Simeonovgrad","c":"Bulgaria","y":42.0324,"x":25.8345},{"n":"Kalifornsky","c":"United States","y":60.4417,"x":-151.1972},{"n":"Strathaven","c":"United Kingdom","y":55.677,"x":-4.065},{"n":"Isaias Coelho","c":"Brazil","y":-7.7378,"x":-41.6758},{"n":"Itamari","c":"Brazil","y":-13.7778,"x":-39.6839},{"n":"Olleria","c":"Spain","y":38.9142,"x":-0.5494},{"n":"Whitworth","c":"United Kingdom","y":53.663,"x":-2.177},{"n":"Verkhniy Mamon","c":"Russia","y":50.1678,"x":40.3967},{"n":"Green Cove Springs","c":"United States","y":29.9904,"x":-81.6807},{"n":"Solebury","c":"United States","y":40.3676,"x":-75.0031},{"n":"Caprino Veronese","c":"Italy","y":45.6,"x":10.8},{"n":"White Horse","c":"United States","y":40.192,"x":-74.7022},{"n":"Meltham","c":"United Kingdom","y":53.592,"x":-1.85},{"n":"Perry Heights","c":"United States","y":40.7977,"x":-81.468},{"n":"Kellinghusen","c":"Germany","y":53.95,"x":9.7167},{"n":"Poytya","c":"Finland","y":60.7167,"x":22.6},{"n":"Rhos-on-Sea","c":"United Kingdom","y":53.309,"x":-3.738},{"n":"Urom","c":"Hungary","y":47.6,"x":19.0167},{"n":"Lake Villa","c":"United States","y":42.4184,"x":-88.0836},{"n":"Joia","c":"Brazil","y":-28.6469,"x":-54.1219},{"n":"Colditz","c":"Germany","y":51.1167,"x":12.8167},{"n":"Guntersville","c":"United States","y":34.367,"x":-86.2638},{"n":"Krupki","c":"Belarus","y":54.325,"x":29.1361},{"n":"Grosskrotzenburg","c":"Germany","y":50.0833,"x":8.9833},{"n":"Oualidia","c":"Morocco","y":32.7333,"x":-9.0167},{"n":"Karmaskaly","c":"Russia","y":54.3694,"x":56.1778},{"n":"Montvale","c":"United States","y":41.0529,"x":-74.0499},{"n":"Rumlang","c":"Switzerland","y":47.4533,"x":8.5331},{"n":"Aspen","c":"United States","y":39.195,"x":-106.8369},{"n":"Tunga","c":"Philippines","y":11.25,"x":124.75},{"n":"Ione","c":"United States","y":38.3613,"x":-120.9422},{"n":"Hoeven","c":"Netherlands","y":51.5775,"x":4.5808},{"n":"Joane","c":"Portugal","y":41.4333,"x":-8.4167},{"n":"Litchfield","c":"United States","y":42.843,"x":-71.455},{"n":"Paverama","c":"Brazil","y":-29.5519,"x":-51.7328},{"n":"Sanluri","c":"Italy","y":39.5611,"x":8.9},{"n":"Brooksville","c":"United States","y":28.5404,"x":-82.3903},{"n":"Buhlertal","c":"Germany","y":48.6933,"x":8.1786},{"n":"Staufen im Breisgau","c":"Germany","y":47.8814,"x":7.7314},{"n":"West Frankfort","c":"United States","y":37.8997,"x":-88.9301},{"n":"Yasnohirka","c":"Ukraine","y":48.7725,"x":37.5506},{"n":"Novoselitskoye","c":"Russia","y":44.7508,"x":43.4369},{"n":"Non Sang","c":"Thailand","y":16.8699,"x":102.564},{"n":"Mamurras","c":"Albania","y":41.5775,"x":19.6922},{"n":"Iwaizumi","c":"Japan","y":39.8431,"x":141.7967},{"n":"Pochinok","c":"Russia","y":54.4,"x":32.45},{"n":"Indian Harbour Beach","c":"United States","y":28.153,"x":-80.5976},{"n":"Dzhebel","c":"Bulgaria","y":41.5,"x":25.3},{"n":"Helmbrechts","c":"Germany","y":50.2368,"x":11.7159},{"n":"Lake Park","c":"United States","y":26.7998,"x":-80.068},{"n":"Sala Bolognese","c":"Italy","y":44.6303,"x":11.2761},{"n":"Murten","c":"Switzerland","y":46.9281,"x":7.1169},{"n":"Marcolandia","c":"Brazil","y":-7.4428,"x":-40.6608},{"n":"Lanco","c":"Chile","y":-39.4523,"x":-72.7755},{"n":"Kildare","c":"Ireland","y":53.1569,"x":-6.909},{"n":"Lucas","c":"United States","y":33.0942,"x":-96.5803},{"n":"Japaratinga","c":"Brazil","y":-9.2544,"x":-35.2578},{"n":"Araponga","c":"Brazil","y":-20.6669,"x":-42.5208},{"n":"Dubovskoye","c":"Russia","y":47.4092,"x":42.7575},{"n":"Minusio","c":"Switzerland","y":46.1833,"x":8.8167},{"n":"Itaquara","c":"Brazil","y":-13.4508,"x":-39.9408},{"n":"Talnique","c":"El Salvador","y":13.6667,"x":-89.4},{"n":"Talambote","c":"Morocco","y":35.25,"x":-5.1833},{"n":"Bad Grund","c":"Germany","y":51.8089,"x":10.2368},{"n":"Chumsaeng","c":"Thailand","y":15.898,"x":100.311},{"n":"Canet de Berenguer","c":"Spain","y":39.6794,"x":-0.2206},{"n":"Habo","c":"Sweden","y":57.9066,"x":14.0856},{"n":"Moordrecht","c":"Netherlands","y":51.9861,"x":4.6681},{"n":"Grossbeeren","c":"Germany","y":52.3544,"x":13.3061},{"n":"Obluchye","c":"Russia","y":49,"x":131.05},{"n":"Conover","c":"United States","y":35.7155,"x":-81.217},{"n":"Mournies","c":"Greece","y":35.485,"x":24.013},{"n":"Gingelom","c":"Belgium","y":50.7492,"x":5.1328},{"n":"Dulovo","c":"Bulgaria","y":43.8229,"x":27.1412},{"n":"Padron","c":"Spain","y":42.7381,"x":-8.6603},{"n":"Wetumpka","c":"United States","y":32.5407,"x":-86.2052},{"n":"Port-Saint-Louis-du-Rhone","c":"France","y":43.3875,"x":4.8044},{"n":"Lossnitz","c":"Germany","y":50.6214,"x":12.7317},{"n":"Vietri sul Mare","c":"Italy","y":40.6722,"x":14.7278},{"n":"Ladysmith","c":"Canada","y":48.9975,"x":-123.8203},{"n":"Conkal","c":"Mexico","y":21.0733,"x":-89.5208},{"n":"Laitila","c":"Finland","y":60.8792,"x":21.6931},{"n":"Divjake","c":"Albania","y":40.9964,"x":19.5327},{"n":"East Grand Forks","c":"United States","y":47.9284,"x":-97.0138},{"n":"Bridgewater","c":"Canada","y":44.37,"x":-64.52},{"n":"Ottobeuren","c":"Germany","y":47.9414,"x":10.2994},{"n":"Decimomannu","c":"Italy","y":39.3112,"x":8.9703},{"n":"Janze","c":"France","y":47.9606,"x":-1.4992},{"n":"Agua Blanca Iturbide","c":"Mexico","y":20.35,"x":-98.35},{"n":"Guaracai","c":"Brazil","y":-21.0283,"x":-51.2067},{"n":"Park Hills","c":"United States","y":37.8211,"x":-90.505},{"n":"Nova Gloria","c":"Brazil","y":-15.1428,"x":-49.5708},{"n":"Messkirch","c":"Germany","y":47.9928,"x":9.1125},{"n":"Edgemere","c":"United States","y":39.2273,"x":-76.459},{"n":"Cullompton","c":"United Kingdom","y":50.855,"x":-3.393},{"n":"Ilha das Flores","c":"Brazil","y":-10.4358,"x":-36.54},{"n":"Freistadt","c":"Austria","y":48.5117,"x":14.5061},{"n":"Berg","c":"Germany","y":47.9675,"x":11.3558},{"n":"Laanoussar","c":"Morocco","y":33.6833,"x":-4.8167},{"n":"Ergue-Gaberic","c":"France","y":47.9961,"x":-4.0225},{"n":"Mooroopna","c":"Australia","y":-36.3833,"x":145.35},{"n":"Dirksland","c":"Netherlands","y":51.75,"x":4.1},{"n":"San Damiano d'Asti","c":"Italy","y":44.8344,"x":8.0647},{"n":"Rawlins","c":"United States","y":41.7849,"x":-107.2265},{"n":"Tizoual","c":"Morocco","y":30.9925,"x":-7.8167},{"n":"Legazpia","c":"Spain","y":43.055,"x":-2.335},{"n":"Negresti","c":"Romania","y":46.8403,"x":27.4417},{"n":"Saint-Gilles-Croix-de-Vie","c":"France","y":46.6975,"x":-1.9444},{"n":"Narrabri","c":"Australia","y":-30.3317,"x":149.7678},{"n":"Succasunna","c":"United States","y":40.8507,"x":-74.6596},{"n":"Ait Ali Mimoune","c":"Morocco","y":33.7808,"x":-5.7822},{"n":"Ouderkerk aan de Amstel","c":"Netherlands","y":52.2972,"x":4.9117},{"n":"Plumsted","c":"United States","y":40.0468,"x":-74.4852},{"n":"Perryton","c":"United States","y":36.393,"x":-100.7976},{"n":"Yatton","c":"United Kingdom","y":51.3855,"x":-2.8256},{"n":"Bordesholm","c":"Germany","y":54.1833,"x":10.0167},{"n":"Closter","c":"United States","y":40.9733,"x":-73.9604},{"n":"Le Loroux-Bottereau","c":"France","y":47.2381,"x":-1.3492},{"n":"Barra de Sao Miguel","c":"Brazil","y":-9.8333,"x":-35.9},{"n":"St. Johns","c":"United States","y":43.0005,"x":-84.5555},{"n":"Trooz","c":"Belgium","y":50.5667,"x":5.6833},{"n":"Terrace Heights","c":"United States","y":46.6024,"x":-120.4482},{"n":"Siegsdorf","c":"Germany","y":47.8167,"x":12.65},{"n":"Worrstadt","c":"Germany","y":49.8431,"x":8.1156},{"n":"Frostburg","c":"United States","y":39.6506,"x":-78.9269},{"n":"Kingscliff","c":"Australia","y":-28.2564,"x":153.5781},{"n":"Moritzburg","c":"Germany","y":51.165,"x":13.6794},{"n":"Moulay Bou 'azza","c":"Morocco","y":33.2565,"x":-6.1319},{"n":"Lypovets","c":"Ukraine","y":49.2161,"x":29.0561},{"n":"Dunavarsany","c":"Hungary","y":47.2828,"x":19.0661},{"n":"Boured","c":"Morocco","y":34.7344,"x":-4.0947},{"n":"Le Soler","c":"France","y":42.6819,"x":2.7933},{"n":"Rolesville","c":"United States","y":35.9224,"x":-78.4656},{"n":"Stra","c":"Italy","y":45.4167,"x":12.25},{"n":"Sorbiers","c":"France","y":45.4878,"x":4.4503},{"n":"Biryusinsk","c":"Russia","y":55.95,"x":97.8167},{"n":"Bo`ston","c":"Uzbekistan","y":41.8478,"x":60.93},{"n":"Mina Clavero","c":"Argentina","y":-31.7239,"x":-65.005},{"n":"Viechtach","c":"Germany","y":49.0792,"x":12.8847},{"n":"Heuchelheim","c":"Germany","y":50.5833,"x":8.6333},{"n":"Turkeve","c":"Hungary","y":47.1,"x":20.75},{"n":"Neuenburg","c":"Germany","y":48.8461,"x":8.5889},{"n":"Booneville","c":"United States","y":34.6643,"x":-88.5684},{"n":"Sallisaw","c":"United States","y":35.4605,"x":-94.807},{"n":"Fusignano","c":"Italy","y":44.4667,"x":11.95},{"n":"Vohburg an der Donau","c":"Germany","y":48.7667,"x":11.6167},{"n":"East York","c":"United States","y":39.9687,"x":-76.6759},{"n":"Cabrils","c":"Spain","y":41.5283,"x":2.3692},{"n":"Owani","c":"Japan","y":40.5183,"x":140.5678},{"n":"Herencia","c":"Spain","y":39.35,"x":-3.3667},{"n":"Fabrica di Roma","c":"Italy","y":42.3347,"x":12.3003},{"n":"Sitka","c":"United States","y":57.2401,"x":-135.3153},{"n":"Verolanuova","c":"Italy","y":45.3258,"x":10.0758},{"n":"Campo Maior","c":"Portugal","y":39.0167,"x":-7.0667},{"n":"Stuttgart","c":"United States","y":34.495,"x":-91.5485},{"n":"Bolgar","c":"Russia","y":54.9667,"x":49.0333},{"n":"Visp","c":"Switzerland","y":46.2922,"x":7.8828},{"n":"Namsos","c":"Norway","y":64.467,"x":11.494},{"n":"Billingshurst","c":"United Kingdom","y":51.0226,"x":-0.4508},{"n":"Pocklington","c":"United Kingdom","y":53.9309,"x":-0.7781},{"n":"Bouaye","c":"France","y":47.1436,"x":-1.6889},{"n":"Coxsackie","c":"United States","y":42.3465,"x":-73.8624},{"n":"Guatape","c":"Colombia","y":6.2325,"x":-75.1586},{"n":"Derecske","c":"Hungary","y":47.3537,"x":21.5718},{"n":"Mystic Island","c":"United States","y":39.5659,"x":-74.3831},{"n":"Cohasset","c":"United States","y":42.2363,"x":-70.8189},{"n":"Titz","c":"Germany","y":51.0062,"x":6.4248},{"n":"Geri","c":"Cyprus","y":35.1062,"x":33.4195},{"n":"Shinfield","c":"United Kingdom","y":51.408,"x":-0.947},{"n":"Trevi","c":"Italy","y":42.8933,"x":12.7617},{"n":"Kecel","c":"Hungary","y":46.525,"x":19.2547},{"n":"Steenwijkerwold","c":"Netherlands","y":52.8036,"x":6.0617},{"n":"Willow Street","c":"United States","y":39.9809,"x":-76.2705},{"n":"Trignac","c":"France","y":47.3181,"x":-2.1892},{"n":"Allersberg","c":"Germany","y":49.25,"x":11.2333},{"n":"Elisio Medrado","c":"Brazil","y":-12.9458,"x":-39.5219},{"n":"Summit View","c":"United States","y":47.1343,"x":-122.3468},{"n":"Vedano Olona","c":"Italy","y":45.7769,"x":8.8869},{"n":"Corona de Tucson","c":"United States","y":31.9495,"x":-110.7836},{"n":"Habay-la-Vieille","c":"Belgium","y":49.7303,"x":5.6464},{"n":"Novoli","c":"Italy","y":40.3833,"x":18.05},{"n":"Cacalchen","c":"Mexico","y":20.9822,"x":-89.2278},{"n":"Carnoux-en-Provence","c":"France","y":43.2564,"x":5.5644},{"n":"Bushkill","c":"United States","y":40.7976,"x":-75.3281},{"n":"Estrela d'Oeste","c":"Brazil","y":-20.2878,"x":-50.4008},{"n":"Lure","c":"France","y":47.6831,"x":6.4967},{"n":"General Camara","c":"Brazil","y":-29.905,"x":-51.76},{"n":"L'Aigle","c":"France","y":48.765,"x":0.6275},{"n":"Douar Mezaoura","c":"Morocco","y":34.5406,"x":-4.7294},{"n":"Oude Pekela","c":"Netherlands","y":53.1,"x":7.0167},{"n":"Lege-Cap-Ferret","c":"France","y":44.7931,"x":-1.1464},{"n":"Toritto","c":"Italy","y":41,"x":16.6833},{"n":"Orocue","c":"Colombia","y":4.7897,"x":-71.3392},{"n":"San Pablo Huitzo","c":"Mexico","y":17.2764,"x":-96.8825},{"n":"Bretowo","c":"Poland","y":54.3667,"x":18.5667},{"n":"Moyeuvre-Grande","c":"France","y":49.2528,"x":6.0458},{"n":"Tuscumbia","c":"United States","y":34.7204,"x":-87.7035},{"n":"Vetluga","c":"Russia","y":57.8556,"x":45.7811},{"n":"Nzalat Bni Amar","c":"Morocco","y":34.0981,"x":-5.4161},{"n":"Tobyhanna","c":"United States","y":41.1113,"x":-75.5211},{"n":"As Sallum","c":"Egypt","y":31.5525,"x":25.1575},{"n":"Ghassat","c":"Morocco","y":31.1697,"x":-6.8042},{"n":"Vern-sur-Seiche","c":"France","y":48.0447,"x":-1.6003},{"n":"Norten-Hardenberg","c":"Germany","y":51.6288,"x":9.9359},{"n":"Dauphin","c":"Canada","y":51.1992,"x":-100.0633},{"n":"Houplines","c":"France","y":50.6908,"x":2.9092},{"n":"Humboldt","c":"United States","y":35.8254,"x":-88.9043},{"n":"Baiersdorf","c":"Germany","y":49.6564,"x":11.0328},{"n":"Barton","c":"United States","y":42.0812,"x":-76.4982},{"n":"Chantonnay","c":"France","y":46.6869,"x":-1.0506},{"n":"Stockstadt am Main","c":"Germany","y":49.9797,"x":9.0639},{"n":"Navia","c":"Spain","y":43.5333,"x":-6.7167},{"n":"Lesmurdie","c":"Australia","y":-31.994,"x":116.05},{"n":"Fontaniva","c":"Italy","y":45.6376,"x":11.7522},{"n":"Deliatyn","c":"Ukraine","y":48.5286,"x":24.6236},{"n":"North Londonderry","c":"United States","y":40.3227,"x":-76.5867},{"n":"Monforte del Cid","c":"Spain","y":38.3792,"x":-0.7303},{"n":"Kirchberg","c":"Germany","y":50.6222,"x":12.5256},{"n":"Otterburn Park","c":"Canada","y":45.5333,"x":-73.2167},{"n":"Barby","c":"Germany","y":51.9667,"x":11.8667},{"n":"Bremgarten","c":"Switzerland","y":47.3528,"x":8.34},{"n":"Helena Valley Southeast","c":"United States","y":46.6175,"x":-111.9186},{"n":"Limena","c":"Italy","y":45.4667,"x":11.85},{"n":"Sunset Hills","c":"United States","y":38.531,"x":-90.4087},{"n":"Ibiai","c":"Brazil","y":-16.8608,"x":-44.9139},{"n":"Lanivtsi","c":"Ukraine","y":49.8644,"x":26.0782},{"n":"Sand Lake","c":"United States","y":42.6284,"x":-73.5477},{"n":"Tha Maka","c":"Thailand","y":13.9203,"x":99.7667},{"n":"Aughton","c":"United Kingdom","y":53.542,"x":-2.912},{"n":"Imoulas","c":"Morocco","y":30.7436,"x":-8.7633},{"n":"University of Virginia","c":"United States","y":38.0405,"x":-78.5163},{"n":"Zazeran","c":"Iran","y":32.6025,"x":51.4969},{"n":"Gravellona Toce","c":"Italy","y":45.9333,"x":8.4333},{"n":"Neulengbach","c":"Austria","y":48.1833,"x":15.9},{"n":"Cariati","c":"Italy","y":39.4963,"x":16.955},{"n":"Bad Feilnbach","c":"Germany","y":47.7833,"x":12.0167},{"n":"Zwingenberg","c":"Germany","y":49.7225,"x":8.6139},{"n":"Audenge","c":"France","y":44.6836,"x":-1.0133},{"n":"Vyetka","c":"Belarus","y":52.5592,"x":31.1808},{"n":"Bulaevo","c":"Kazakhstan","y":54.9056,"x":70.4439},{"n":"Prien","c":"United States","y":30.1601,"x":-93.2611},{"n":"Guabito","c":"Panama","y":9.4949,"x":-82.6117},{"n":"Noyelles-sous-Lens","c":"France","y":50.4306,"x":2.8728},{"n":"Macin","c":"Romania","y":45.2456,"x":28.1231},{"n":"Bystrice pod Hostynem","c":"Czechia","y":49.3992,"x":17.674},{"n":"Campillos","c":"Spain","y":37.05,"x":-4.85},{"n":"Tumbiscatio de Ruiz","c":"Mexico","y":18.5167,"x":-102.383},{"n":"Lontra","c":"Brazil","y":-15.9073,"x":-44.3038},{"n":"Marcacao","c":"Brazil","y":-6.77,"x":-35.015},{"n":"Taber","c":"Canada","y":49.7847,"x":-112.1508},{"n":"U Thong","c":"Thailand","y":14.3761,"x":99.8922},{"n":"Pine Lake Park","c":"United States","y":40.0017,"x":-74.2595},{"n":"Kerrouchen","c":"Morocco","y":32.7986,"x":-5.3225},{"n":"West Manheim","c":"United States","y":39.7458,"x":-76.943},{"n":"Mrizig","c":"Morocco","y":32.8467,"x":-7.1319},{"n":"Phayakkhaphum Phisai","c":"Thailand","y":15.5183,"x":103.1921},{"n":"Pezenas","c":"France","y":43.4594,"x":3.4228},{"n":"Los Altos Hills","c":"United States","y":37.3671,"x":-122.139},{"n":"Witley","c":"United Kingdom","y":51.15,"x":-0.646},{"n":"Tomesti","c":"Romania","y":47.1333,"x":27.7},{"n":"Yadrin","c":"Russia","y":55.95,"x":46.2},{"n":"Jaszapati","c":"Hungary","y":47.5125,"x":20.1417},{"n":"Meximieux","c":"France","y":45.9044,"x":5.1944},{"n":"Magtymguly","c":"Turkmenistan","y":38.4333,"x":56.2833},{"n":"Aspach","c":"Germany","y":48.9667,"x":9.3975},{"n":"Upper Makefield","c":"United States","y":40.2942,"x":-74.925},{"n":"Uedem","c":"Germany","y":51.6675,"x":6.275},{"n":"Oranienbaum","c":"Germany","y":51.8036,"x":12.4064},{"n":"South Bruce Peninsula","c":"Canada","y":44.7333,"x":-81.2},{"n":"Vyshkovo","c":"Ukraine","y":48.0581,"x":23.4164},{"n":"Kitzbuhel","c":"Austria","y":47.4464,"x":12.3919},{"n":"Liancourt","c":"France","y":49.3308,"x":2.4653},{"n":"Gigmoto","c":"Philippines","y":13.7833,"x":124.3833},{"n":"Edson","c":"Canada","y":53.5817,"x":-116.4344},{"n":"Neunburg vorm Wald","c":"Germany","y":49.3467,"x":12.3908},{"n":"Bonnigheim","c":"Germany","y":49.0408,"x":9.095},{"n":"Seaton","c":"United Kingdom","y":50.705,"x":-3.078},{"n":"Gewane","c":"Ethiopia","y":10.1664,"x":40.6453},{"n":"Tuscania","c":"Italy","y":42.4214,"x":11.8719},{"n":"Brejo Grande","c":"Brazil","y":-10.4289,"x":-36.4658},{"n":"Guilers","c":"France","y":48.4256,"x":-4.5581},{"n":"Rivolta d'Adda","c":"Italy","y":45.4667,"x":9.5167},{"n":"Oberstenfeld","c":"Germany","y":49.0239,"x":9.3194},{"n":"Damnoen Saduak","c":"Thailand","y":13.5183,"x":99.9547},{"n":"Wollerau","c":"Switzerland","y":47.1956,"x":8.7194},{"n":"Lake of the Woods","c":"United States","y":38.3342,"x":-77.7599},{"n":"Congers","c":"United States","y":41.1484,"x":-73.9456},{"n":"Cairate","c":"Italy","y":45.6833,"x":8.8667},{"n":"La Verpilliere","c":"France","y":45.6369,"x":5.1428},{"n":"Agdara","c":"Azerbaijan","y":40.2153,"x":46.8128},{"n":"Makaha","c":"United States","y":21.4734,"x":-158.2103},{"n":"Villard-Bonnot","c":"France","y":45.2381,"x":5.8883},{"n":"Spring Valley Lake","c":"United States","y":34.4987,"x":-117.2683},{"n":"San Juan Talpa","c":"El Salvador","y":13.5,"x":-89.0833},{"n":"Reichertshofen","c":"Germany","y":48.6667,"x":11.4667},{"n":"Bayport","c":"United States","y":40.746,"x":-73.0546},{"n":"Keminmaa","c":"Finland","y":65.799,"x":24.5426},{"n":"Wietze","c":"Germany","y":52.65,"x":9.8333},{"n":"Savoy","c":"United States","y":40.06,"x":-88.2552},{"n":"Yuryevets","c":"Russia","y":57.3167,"x":43.1},{"n":"Pfronten","c":"Germany","y":47.5833,"x":10.55},{"n":"Janoshalma","c":"Hungary","y":46.2967,"x":19.3228},{"n":"Fair Lakes","c":"United States","y":38.853,"x":-77.3885},{"n":"Kahriz Sang","c":"Iran","y":32.6267,"x":51.4808},{"n":"Tecumseh","c":"United States","y":42.0065,"x":-83.945},{"n":"Moser","c":"Germany","y":52.2167,"x":11.8},{"n":"Soriano nel Cimino","c":"Italy","y":42.4194,"x":12.2342},{"n":"North Haledon","c":"United States","y":40.9628,"x":-74.1844},{"n":"Leforest","c":"France","y":50.4372,"x":3.0642},{"n":"Coxhoe","c":"United Kingdom","y":54.714,"x":-1.503},{"n":"Dornstetten","c":"Germany","y":48.47,"x":8.4994},{"n":"La Bassee","c":"France","y":50.5336,"x":2.8072},{"n":"Sirnach","c":"Switzerland","y":47.4664,"x":8.9997},{"n":"Serramazzoni","c":"Italy","y":44.4167,"x":10.8},{"n":"Ponte nell'Alpi","c":"Italy","y":46.183,"x":12.2791},{"n":"Hochst","c":"Austria","y":47.4592,"x":9.64},{"n":"Salice Salentino","c":"Italy","y":40.3833,"x":17.9667},{"n":"El Porvenir","c":"El Salvador","y":14.0207,"x":-89.6471},{"n":"Gaylord","c":"United States","y":45.0213,"x":-84.6803},{"n":"Aransas Pass","c":"United States","y":27.8877,"x":-97.1134},{"n":"East Cowes","c":"United Kingdom","y":50.757,"x":-1.2865},{"n":"Grafenau","c":"Germany","y":48.8561,"x":13.3969},{"n":"Champagnole","c":"France","y":46.7472,"x":5.9072},{"n":"Ostseebad Kuhlungsborn","c":"Germany","y":54.1333,"x":11.75},{"n":"Ellicott","c":"United States","y":42.133,"x":-79.2361},{"n":"Arab","c":"United States","y":34.3309,"x":-86.4991},{"n":"Monte San Giusto","c":"Italy","y":43.2379,"x":13.5946},{"n":"Kandern","c":"Germany","y":47.7144,"x":7.6608},{"n":"Chateauneuf-sur-Loire","c":"France","y":47.8653,"x":2.2222},{"n":"Quarto d'Altino","c":"Italy","y":45.5786,"x":12.3727},{"n":"Peebles","c":"United Kingdom","y":55.65,"x":-3.18},{"n":"San Miguel del Puerto","c":"Mexico","y":15.9167,"x":-96.1667},{"n":"Neusiedl am See","c":"Austria","y":47.9486,"x":16.8431},{"n":"Fairless Hills","c":"United States","y":40.1784,"x":-74.8524},{"n":"Milevsko","c":"Czechia","y":49.451,"x":14.36},{"n":"Althengstett","c":"Germany","y":48.7233,"x":8.7939},{"n":"Sao Pedro dos Ferros","c":"Brazil","y":-20.17,"x":-42.5239},{"n":"Ahrensbok","c":"Germany","y":54.0167,"x":10.5833},{"n":"Venegono Superiore","c":"Italy","y":45.75,"x":8.9},{"n":"Taglio di Po","c":"Italy","y":45,"x":12.2167},{"n":"Khanu Woralaksaburi","c":"Thailand","y":16.074,"x":99.8574},{"n":"San Sebastian Tecomaxtlahuaca","c":"Mexico","y":17.35,"x":-98.0333},{"n":"Ventanas","c":"Chile","y":-32.7419,"x":-71.4839},{"n":"Lugau","c":"Germany","y":50.7383,"x":12.7464},{"n":"Bolano","c":"Italy","y":44.1891,"x":9.8954},{"n":"Saint-Nicolas-de-Port","c":"France","y":48.6308,"x":6.3022},{"n":"Highland Heights","c":"United States","y":41.5518,"x":-81.4691},{"n":"Recas","c":"Romania","y":45.8014,"x":21.5133},{"n":"Hassocks","c":"United Kingdom","y":50.9233,"x":-0.1509},{"n":"Narowlya","c":"Belarus","y":51.8,"x":29.5},{"n":"Kamyanyets","c":"Belarus","y":52.4028,"x":23.8083},{"n":"Charlestown","c":"United States","y":38.427,"x":-85.6677},{"n":"Santa Luzia D'Oeste","c":"Brazil","y":-11.9081,"x":-61.7789},{"n":"Fletcher","c":"United States","y":35.4316,"x":-82.5038},{"n":"Blankenheim","c":"Germany","y":50.4331,"x":6.65},{"n":"Domat/Ems","c":"Switzerland","y":46.8198,"x":9.4545},{"n":"Louveciennes","c":"France","y":48.8603,"x":2.1164},{"n":"Macurure","c":"Brazil","y":-9.1678,"x":-39.0578},{"n":"Santiago Yosondua","c":"Mexico","y":16.8833,"x":-97.5667},{"n":"Wettringen","c":"Germany","y":52.2083,"x":7.3167},{"n":"Tubajon","c":"Philippines","y":10.3253,"x":125.5572},{"n":"Monserrat","c":"Spain","y":39.3575,"x":-0.6031},{"n":"Arealva","c":"Brazil","y":-22.0286,"x":-48.9111},{"n":"Warsash","c":"United Kingdom","y":50.8532,"x":-1.301},{"n":"Langnau am Albis","c":"Switzerland","y":47.2894,"x":8.5414},{"n":"Kilmore","c":"Australia","y":-37.2833,"x":144.95},{"n":"Druid Hills","c":"United States","y":33.7842,"x":-84.3273},{"n":"Baxter","c":"United States","y":46.3426,"x":-94.2793},{"n":"Puget-sur-Argens","c":"France","y":43.4558,"x":6.6842},{"n":"Peasedown Saint John","c":"United Kingdom","y":51.315,"x":-2.424},{"n":"Sauerlach","c":"Germany","y":47.9667,"x":11.65},{"n":"Leisnig","c":"Germany","y":51.1667,"x":12.9167},{"n":"Vert-Saint-Denis","c":"France","y":48.5669,"x":2.6219},{"n":"Seffner","c":"United States","y":27.9981,"x":-82.2735},{"n":"Petrosino","c":"Italy","y":37.7127,"x":12.4996},{"n":"Vila Vicosa","c":"Portugal","y":38.75,"x":-7.4333},{"n":"Ouro Verde","c":"Brazil","y":-21.4894,"x":-51.7003},{"n":"Marcelino Vieira","c":"Brazil","y":-6.2939,"x":-38.1669},{"n":"Ballan-Mire","c":"France","y":47.3417,"x":0.6131},{"n":"Millersville","c":"United States","y":40.0047,"x":-76.3522},{"n":"Rottenburg an der Laaber","c":"Germany","y":48.7019,"x":12.0272},{"n":"Wimauma","c":"United States","y":27.6964,"x":-82.3034},{"n":"Figueira","c":"Brazil","y":-23.8489,"x":-50.4028},{"n":"Hirslen","c":"Switzerland","y":47.3646,"x":8.5663},{"n":"Brasileira","c":"Brazil","y":-4.1308,"x":-41.7819},{"n":"Miramar Beach","c":"United States","y":30.3854,"x":-86.3443},{"n":"Appiano Gentile","c":"Italy","y":45.7383,"x":8.9797},{"n":"Gargenville","c":"France","y":48.9919,"x":1.8103},{"n":"Garrni","c":"Armenia","y":40.1194,"x":44.7231},{"n":"Chinon","c":"France","y":47.1669,"x":0.2428},{"n":"Wognum","c":"Netherlands","y":52.6819,"x":5.0228},{"n":"Reignier","c":"France","y":46.1344,"x":6.2683},{"n":"Knittlingen","c":"Germany","y":49.0239,"x":8.7569},{"n":"Anahawan","c":"Philippines","y":10.2742,"x":125.2584},{"n":"Hohberg","c":"Germany","y":48.4239,"x":7.9083},{"n":"Gulf Hills","c":"United States","y":30.4365,"x":-88.8149},{"n":"Buckhannon","c":"United States","y":38.9927,"x":-80.2282},{"n":"Saint-Jean-de-Maurienne","c":"France","y":45.2767,"x":6.345},{"n":"Texmelucan","c":"Mexico","y":16.5833,"x":-97.2},{"n":"Ransbach-Baumbach","c":"Germany","y":50.4661,"x":7.7253},{"n":"Kulpsville","c":"United States","y":40.244,"x":-75.3407},{"n":"Akhalkalaki","c":"Georgia","y":41.4056,"x":43.4861},{"n":"West Livingston","c":"United States","y":30.6957,"x":-95.0097},{"n":"Toton","c":"United Kingdom","y":52.907,"x":-1.254},{"n":"Tallulah","c":"United States","y":32.4067,"x":-91.1915},{"n":"Talalora","c":"Philippines","y":11.5167,"x":124.85},{"n":"Northam","c":"United Kingdom","y":51.0393,"x":-4.2104},{"n":"Messancy","c":"Belgium","y":49.595,"x":5.8183},{"n":"Ikata-cho","c":"Japan","y":33.4883,"x":132.3542},{"n":"None","c":"Italy","y":44.9333,"x":7.5333},{"n":"Heiden","c":"Germany","y":51.8258,"x":6.9331},{"n":"Thann","c":"France","y":47.8067,"x":7.1044},{"n":"Highworth","c":"United Kingdom","y":51.631,"x":-1.712},{"n":"Oostvoorne","c":"Netherlands","y":51.9119,"x":4.1008},{"n":"Suomussalmi","c":"Finland","y":64.8833,"x":28.9167},{"n":"Rodeiro","c":"Brazil","y":-21.2,"x":-42.865},{"n":"Mala Danylivka","c":"Ukraine","y":50.0614,"x":36.1675},{"n":"Bailly-Romainvilliers","c":"France","y":48.8469,"x":2.8231},{"n":"Proenca-a-Nova","c":"Portugal","y":39.75,"x":-7.9167},{"n":"Kalampaka","c":"Greece","y":39.7044,"x":21.6269},{"n":"Clover","c":"United States","y":35.1125,"x":-81.2203},{"n":"Zell am Harmersbach","c":"Germany","y":48.3467,"x":8.0639},{"n":"Petoskey","c":"United States","y":45.365,"x":-84.9887},{"n":"Boiano","c":"Italy","y":41.4833,"x":14.4667},{"n":"Gettorf","c":"Germany","y":54.4078,"x":9.9742},{"n":"Beaver Falls","c":"United States","y":40.762,"x":-80.3225},{"n":"Ait Tagalla","c":"Morocco","y":31.9167,"x":-6.7167},{"n":"Nova Itarana","c":"Brazil","y":-13.0269,"x":-40.0689},{"n":"Farnham","c":"Canada","y":45.2833,"x":-72.9833},{"n":"Cristalandia do Piaui","c":"Brazil","y":-10.6528,"x":-45.185},{"n":"Chaboksar","c":"Iran","y":36.9736,"x":50.57},{"n":"Lauchringen","c":"Germany","y":47.6306,"x":8.3044},{"n":"L'Arbresle","c":"France","y":45.8356,"x":4.6169},{"n":"Tillamook","c":"United States","y":45.4562,"x":-123.8331},{"n":"Saint-Apollinaire","c":"France","y":47.3317,"x":5.0842},{"n":"Dietmannsried","c":"Germany","y":47.7833,"x":10.2667},{"n":"Konnern","c":"Germany","y":51.6697,"x":11.7708},{"n":"Oak Hills Place","c":"United States","y":30.369,"x":-91.0887},{"n":"Westwego","c":"United States","y":29.9058,"x":-90.1434},{"n":"Ketovo","c":"Russia","y":55.3525,"x":65.3281},{"n":"Bulqize","c":"Albania","y":41.5,"x":20.2167},{"n":"Aratoca","c":"Colombia","y":6.6956,"x":-73.0175},{"n":"Flowery Branch","c":"United States","y":34.1713,"x":-83.9142},{"n":"Montezuma","c":"Brazil","y":-15.1719,"x":-42.4969},{"n":"Falkenstein","c":"Germany","y":50.4667,"x":12.3667},{"n":"Dalton in Furness","c":"United Kingdom","y":54.1544,"x":-3.1814},{"n":"Durrington","c":"United Kingdom","y":51.199,"x":-1.775},{"n":"Houdain","c":"France","y":50.4522,"x":2.5372},{"n":"Massa Marittima","c":"Italy","y":43.05,"x":10.8936},{"n":"Yarrawonga","c":"Australia","y":-36.0167,"x":146},{"n":"Holly","c":"United States","y":42.7987,"x":-83.6235},{"n":"Bodenheim","c":"Germany","y":49.9297,"x":8.3133},{"n":"Larkfield-Wikiup","c":"United States","y":38.513,"x":-122.7536},{"n":"Frostproof","c":"United States","y":27.7493,"x":-81.5252},{"n":"Egremont","c":"United Kingdom","y":54.484,"x":-3.5306},{"n":"Bohorodchany","c":"Ukraine","y":48.8,"x":24.5333},{"n":"West Earl","c":"United States","y":40.126,"x":-76.1774},{"n":"Giannouli","c":"Greece","y":39.6672,"x":22.3958},{"n":"Comercinho","c":"Brazil","y":-16.2958,"x":-41.7928},{"n":"Myskhako","c":"Russia","y":44.6592,"x":37.7631},{"n":"Dalhart","c":"United States","y":36.0579,"x":-102.5123},{"n":"East Donegal","c":"United States","y":40.0823,"x":-76.5631},{"n":"Rorschacherberg","c":"Switzerland","y":47.4664,"x":9.5},{"n":"Strullendorf","c":"Germany","y":49.8333,"x":10.9667},{"n":"Garrison","c":"United States","y":39.4023,"x":-76.7514},{"n":"Niala Kondapalle","c":"India","y":17.1,"x":80.0506},{"n":"Dannenberg","c":"Germany","y":53.0833,"x":11.0833},{"n":"Bormes-les-Mimosas","c":"France","y":43.1517,"x":6.3431},{"n":"Wroughton","c":"United Kingdom","y":51.525,"x":-1.792},{"n":"Zirl","c":"Austria","y":47.2733,"x":11.2414},{"n":"San Francisco","c":"Colombia","y":4.9711,"x":-74.2892},{"n":"Agua Caliente","c":"El Salvador","y":14.1667,"x":-89.2167},{"n":"Chonnabot","c":"Thailand","y":16.084,"x":102.6193},{"n":"Meinersen","c":"Germany","y":52.4667,"x":10.3667},{"n":"Cleator Moor","c":"United Kingdom","y":54.5211,"x":-3.5119},{"n":"Orosi","c":"United States","y":36.5434,"x":-119.2903},{"n":"Runnemede","c":"United States","y":39.8521,"x":-75.0739},{"n":"Bel Aire","c":"United States","y":37.7749,"x":-97.2457},{"n":"Aracena","c":"Spain","y":37.8911,"x":-6.5611},{"n":"Le Teich","c":"France","y":44.6339,"x":-1.0236},{"n":"Cervaro","c":"Italy","y":41.4828,"x":13.9022},{"n":"Tazeh Shahr","c":"Iran","y":38.1756,"x":44.6919},{"n":"Dodji","c":"Senegal","y":15.5167,"x":-14.9333},{"n":"Silsden","c":"United Kingdom","y":53.914,"x":-1.937},{"n":"Firebaugh","c":"United States","y":36.8534,"x":-120.4536},{"n":"Kunszentmiklos","c":"Hungary","y":47.0264,"x":19.1228},{"n":"Whitefish","c":"United States","y":48.4329,"x":-114.3591},{"n":"Lopatcong","c":"United States","y":40.7091,"x":-75.1552},{"n":"Goffs Oak","c":"United Kingdom","y":51.7109,"x":-0.0825},{"n":"Eckbolsheim","c":"France","y":48.5789,"x":7.6897},{"n":"Mahtomedi","c":"United States","y":45.0619,"x":-92.966},{"n":"Lowenberg","c":"Germany","y":52.8833,"x":13.15},{"n":"Altrip","c":"Germany","y":49.4325,"x":8.5036},{"n":"Wavrin","c":"France","y":50.5739,"x":2.9389},{"n":"West Vero Corridor","c":"United States","y":27.6378,"x":-80.4855},{"n":"Kapuskasing","c":"Canada","y":49.4167,"x":-82.4333},{"n":"Les Andelys","c":"France","y":49.2456,"x":1.4117},{"n":"Floris","c":"United States","y":38.9347,"x":-77.4083},{"n":"Aparecida","c":"Brazil","y":-6.7839,"x":-38.0869},{"n":"Coleshill","c":"United Kingdom","y":52.499,"x":-1.708},{"n":"Bargara","c":"Australia","y":-24.8205,"x":152.4625},{"n":"Tolstoy-Yurt","c":"Russia","y":43.4456,"x":45.7789},{"n":"Prabuty","c":"Poland","y":53.7558,"x":19.1975},{"n":"Le Coteau","c":"France","y":46.0272,"x":4.0867},{"n":"Uramita","c":"Colombia","y":6.8986,"x":-76.1736},{"n":"Grossrosseln","c":"Germany","y":49.203,"x":6.8415},{"n":"Najera","c":"Spain","y":42.4167,"x":-2.7333},{"n":"Deizisau","c":"Germany","y":48.7133,"x":9.3892},{"n":"Wachtendonk","c":"Germany","y":51.4092,"x":6.3378},{"n":"Hongwansi","c":"China","y":38.8384,"x":99.6159},{"n":"Bismark","c":"Germany","y":52.6667,"x":11.55},{"n":"Seiersberg","c":"Austria","y":47.01,"x":15.3989},{"n":"Tonnay-Charente","c":"France","y":45.9436,"x":-0.8914},{"n":"Boxford","c":"United States","y":42.6815,"x":-71.0189},{"n":"Guapua","c":"Brazil","y":-20.3972,"x":-47.4203},{"n":"Ron Phibun","c":"Thailand","y":8.1722,"x":99.8533},{"n":"Liezen","c":"Austria","y":47.5667,"x":14.2333},{"n":"Montague","c":"United States","y":42.5549,"x":-72.5177},{"n":"Grottaminarda","c":"Italy","y":41.0708,"x":15.0597},{"n":"Paliano","c":"Italy","y":41.8,"x":13.05},{"n":"Mount Joy","c":"United States","y":40.1105,"x":-76.5065},{"n":"McRae-Helena","c":"United States","y":32.0635,"x":-82.8968},{"n":"Trinidad","c":"United States","y":37.175,"x":-104.4908},{"n":"Kenton","c":"United States","y":40.6448,"x":-83.6095},{"n":"Campo Florido","c":"Brazil","y":-19.7608,"x":-48.5719},{"n":"Bahnemir","c":"Iran","y":36.6639,"x":52.7631},{"n":"Auby","c":"France","y":50.4153,"x":3.0544},{"n":"Racalmuto","c":"Italy","y":37.4083,"x":13.7347},{"n":"Carl Junction","c":"United States","y":37.1668,"x":-94.5468},{"n":"Bad Schmiedeberg","c":"Germany","y":51.6881,"x":12.7375},{"n":"Rakkestad","c":"Norway","y":59.3731,"x":11.4203},{"n":"Carnauba dos Dantas","c":"Brazil","y":-6.5558,"x":-36.595},{"n":"Agira","c":"Italy","y":37.65,"x":14.5167},{"n":"Southeast Arcadia","c":"United States","y":27.1862,"x":-81.8521},{"n":"Sausset-les-Pins","c":"France","y":43.3322,"x":5.1139},{"n":"Kinderhook","c":"United States","y":42.4116,"x":-73.6823},{"n":"La Malbaie","c":"Canada","y":47.65,"x":-70.15},{"n":"Thedinghausen","c":"Germany","y":52.9622,"x":9.0208},{"n":"Boulemane","c":"Morocco","y":33.366,"x":-4.733},{"n":"Paw Paw","c":"United States","y":42.2147,"x":-85.8918},{"n":"Cachoeira Dourada","c":"Brazil","y":-18.4919,"x":-49.475},{"n":"Kiunga","c":"Papua New Guinea","y":-6.1167,"x":141.3},{"n":"Tidaholm","c":"Sweden","y":58.1794,"x":13.9599},{"n":"Buriti dos Montes","c":"Brazil","y":-5.3119,"x":-41.0978},{"n":"Ballancourt","c":"France","y":48.5256,"x":2.3856},{"n":"Ribeirao do Largo","c":"Brazil","y":-15.4589,"x":-40.7389},{"n":"Mataraca","c":"Brazil","y":-6.6008,"x":-35.0508},{"n":"Radcliffe on Trent","c":"United Kingdom","y":52.947,"x":-1.04},{"n":"Vobarno","c":"Italy","y":45.641,"x":10.5045},{"n":"San Sebastian","c":"Philippines","y":11.7,"x":125.0167},{"n":"Lanark","c":"United Kingdom","y":55.6749,"x":-3.777},{"n":"Skowhegan","c":"United States","y":44.7554,"x":-69.6657},{"n":"Furstenzell","c":"Germany","y":48.5225,"x":13.3178},{"n":"Moengo","c":"Suriname","y":5.6167,"x":-54.4},{"n":"Pudasjarvi","c":"Finland","y":65.3583,"x":27},{"n":"Courtry","c":"France","y":48.9175,"x":2.6031},{"n":"Krailling","c":"Germany","y":48.1,"x":11.4},{"n":"Colorado City","c":"United States","y":36.9774,"x":-112.983},{"n":"Karumai","c":"Japan","y":40.3267,"x":141.4606},{"n":"Biguglia","c":"France","y":42.6183,"x":9.4361},{"n":"La Penne-sur-Huveaune","c":"France","y":43.2806,"x":5.5158},{"n":"Pawling","c":"United States","y":41.5661,"x":-73.5971},{"n":"Romagnat","c":"France","y":45.7294,"x":3.1006},{"n":"Seuzach","c":"Switzerland","y":47.5358,"x":8.7294},{"n":"Kosterevo","c":"Russia","y":55.9333,"x":39.6333},{"n":"Kiama","c":"Australia","y":-34.6708,"x":150.8542},{"n":"Shengjin","c":"Albania","y":41.8136,"x":19.5939},{"n":"Durnten","c":"Switzerland","y":47.2789,"x":8.8433},{"n":"Souk Khmis Bni Arouss","c":"Morocco","y":35.325,"x":-5.6422},{"n":"Cintruenigo","c":"Spain","y":42.08,"x":-1.805},{"n":"Moundsville","c":"United States","y":39.9221,"x":-80.7422},{"n":"Campoformido","c":"Italy","y":46.0167,"x":13.1667},{"n":"Villa di Serio","c":"Italy","y":45.7217,"x":9.735},{"n":"Pereiras","c":"Brazil","y":-23.0761,"x":-47.9758},{"n":"Claix","c":"France","y":45.1197,"x":5.6717},{"n":"Cumberland Hill","c":"United States","y":41.9736,"x":-71.4605},{"n":"Santana da Boa Vista","c":"Brazil","y":-30.8719,"x":-53.115},{"n":"Sawang Wirawong","c":"Thailand","y":15.2417,"x":105.0922},{"n":"Schierling","c":"Germany","y":48.8347,"x":12.1397},{"n":"Warlingham","c":"United Kingdom","y":51.3095,"x":-0.0574},{"n":"San Giovanni Gemini","c":"Italy","y":37.6292,"x":13.6417},{"n":"Montecito","c":"United States","y":34.4382,"x":-119.6286},{"n":"Almirante","c":"Panama","y":9.3,"x":-82.4},{"n":"Pena Forte","c":"Brazil","y":-7.8289,"x":-39.0769},{"n":"Sirmione","c":"Italy","y":45.4694,"x":10.6061},{"n":"Locust Grove","c":"United States","y":33.3442,"x":-84.1071},{"n":"Buxton","c":"United States","y":43.6428,"x":-70.5376},{"n":"Half Moon","c":"United States","y":34.8298,"x":-77.4591},{"n":"Lugoff","c":"United States","y":34.2216,"x":-80.6849},{"n":"Vicchio","c":"Italy","y":43.9333,"x":11.4667},{"n":"Fuscaldo","c":"Italy","y":39.4167,"x":16.0333},{"n":"Costabissara","c":"Italy","y":45.5833,"x":11.4833},{"n":"Fort Mitchell","c":"United States","y":39.0459,"x":-84.5563},{"n":"Conewago","c":"United States","y":40.0657,"x":-76.7932},{"n":"Palmeirina","c":"Brazil","y":-9.0039,"x":-36.3258},{"n":"Mockmuhl","c":"Germany","y":49.3167,"x":9.35},{"n":"Honey Brook","c":"United States","y":40.0902,"x":-75.8886},{"n":"Sibilia","c":"Guatemala","y":15,"x":-91.6167},{"n":"North Weeki Wachee","c":"United States","y":28.5591,"x":-82.5537},{"n":"Crowthorne","c":"United Kingdom","y":51.37,"x":-0.792},{"n":"Mammoth Lakes","c":"United States","y":37.6273,"x":-118.99},{"n":"Akranes","c":"Iceland","y":64.3167,"x":-22.1},{"n":"Bongaree","c":"Australia","y":-27.0814,"x":153.1633},{"n":"Meggen","c":"Switzerland","y":47.0464,"x":8.3744},{"n":"Bayabas","c":"Philippines","y":8.9667,"x":126.2667},{"n":"Millis","c":"United States","y":42.1693,"x":-71.3626},{"n":"Trebon","c":"Czechia","y":49.0037,"x":14.7707},{"n":"Ruurlo","c":"Netherlands","y":52.0833,"x":6.45},{"n":"Oberkochen","c":"Germany","y":48.7839,"x":10.1053},{"n":"Slapanice","c":"Czechia","y":49.1687,"x":16.7273},{"n":"Le Mesnil-le-Roi","c":"France","y":48.9281,"x":2.1225},{"n":"Spotswood","c":"United States","y":40.3949,"x":-74.392},{"n":"Sychevka","c":"Russia","y":55.8253,"x":34.2736},{"n":"Oulad Chbana","c":"Morocco","y":33.05,"x":-7.3833},{"n":"Haddam","c":"United States","y":41.4677,"x":-72.5458},{"n":"Waynesburg","c":"United States","y":39.8983,"x":-80.1855},{"n":"Langenargen","c":"Germany","y":47.6,"x":9.5417},{"n":"Shankoucun","c":"China","y":28.0657,"x":120.3143},{"n":"Irapuru","c":"Brazil","y":-21.5708,"x":-51.345},{"n":"Thomson","c":"United States","y":33.4666,"x":-82.4992},{"n":"Gattinara","c":"Italy","y":45.6167,"x":8.3667},{"n":"Meghraoua","c":"Morocco","y":33.9322,"x":-4.0456},{"n":"Prim Decembrie","c":"Romania","y":44.2881,"x":26.06},{"n":"Renfrew","c":"Canada","y":45.4717,"x":-76.6831},{"n":"Hongmao","c":"China","y":19.0258,"x":109.6664},{"n":"Guenange","c":"France","y":49.2978,"x":6.1978},{"n":"Bruck an der Leitha","c":"Austria","y":48.0255,"x":16.779},{"n":"Dudingen","c":"Switzerland","y":46.8461,"x":7.1906},{"n":"Stornoway","c":"United Kingdom","y":58.209,"x":-6.387},{"n":"Novaya Ladoga","c":"Russia","y":60.1,"x":32.3},{"n":"Westlake Village","c":"United States","y":34.1369,"x":-118.822},{"n":"Hasselt","c":"Netherlands","y":52.5908,"x":6.0911},{"n":"San Daniele del Friuli","c":"Italy","y":46.15,"x":13.0167},{"n":"Mirleft","c":"Morocco","y":29.5782,"x":-10.034},{"n":"Passa Tempo","c":"Brazil","y":-20.6508,"x":-44.4958},{"n":"Harmelen","c":"Netherlands","y":52.0894,"x":4.9608},{"n":"Castle Shannon","c":"United States","y":40.3664,"x":-80.0194},{"n":"Catarina","c":"Nicaragua","y":11.9119,"x":-86.0751},{"n":"North Elba","c":"United States","y":44.2394,"x":-73.9969},{"n":"Coaldale","c":"Canada","y":49.7333,"x":-112.6167},{"n":"Rymarov","c":"Czechia","y":49.9318,"x":17.2718},{"n":"Zhanibek","c":"Kazakhstan","y":49.4221,"x":46.8471},{"n":"Zavodske","c":"Ukraine","y":50.4002,"x":33.3908},{"n":"Lipnik nad Becvou","c":"Czechia","y":49.5275,"x":17.5863},{"n":"Archidona","c":"Spain","y":37.1,"x":-4.3833},{"n":"Landeck","c":"Austria","y":47.1333,"x":10.5667},{"n":"Endirey","c":"Russia","y":43.1681,"x":46.6529},{"n":"Pagsanghan","c":"Philippines","y":11.9651,"x":124.7213},{"n":"Napoleon","c":"United States","y":41.3978,"x":-84.1244},{"n":"Vau i Dejes","c":"Albania","y":42,"x":19.6333},{"n":"Schomberg","c":"Germany","y":48.7867,"x":8.6442},{"n":"Willebadessen","c":"Germany","y":51.6331,"x":9.0331},{"n":"Komsomolsk","c":"Russia","y":57.0333,"x":40.3833},{"n":"Novi Sanzhary","c":"Ukraine","y":49.3354,"x":34.3162},{"n":"Upper Saddle River","c":"United States","y":41.0633,"x":-74.0986},{"n":"Chinique","c":"Guatemala","y":15.0411,"x":-91.0269},{"n":"Melqa el Ouidane","c":"Morocco","y":34.5667,"x":-3.0167},{"n":"Donges","c":"France","y":47.3231,"x":-2.0761},{"n":"Chantada","c":"Spain","y":42.6167,"x":-7.7667},{"n":"Mahopac","c":"United States","y":41.3684,"x":-73.7401},{"n":"Tarfaya","c":"Morocco","y":27.9133,"x":-12.9317},{"n":"Temperance","c":"United States","y":41.7653,"x":-83.5755},{"n":"Maxdorf","c":"Germany","y":49.4819,"x":8.29},{"n":"Corella","c":"Spain","y":42.1147,"x":-1.7867},{"n":"Oberlin","c":"United States","y":41.2857,"x":-82.2197},{"n":"Thaon-les-Vosges","c":"France","y":48.2506,"x":6.42},{"n":"Taourga","c":"Algeria","y":36.7938,"x":3.9463},{"n":"High Ackworth","c":"United Kingdom","y":53.6408,"x":-1.3364},{"n":"Arnstein","c":"Germany","y":49.9667,"x":9.9833},{"n":"Motavita","c":"Colombia","y":5.5772,"x":-73.3672},{"n":"Cernosice","c":"Czechia","y":49.9602,"x":14.3199},{"n":"Reusel","c":"Netherlands","y":51.3617,"x":5.1631},{"n":"Vineuil","c":"France","y":47.5806,"x":1.3725},{"n":"Lake Norman of Catawba","c":"United States","y":35.5995,"x":-80.984},{"n":"Country Club Estates","c":"United States","y":31.2113,"x":-81.4622},{"n":"Lysianka","c":"Ukraine","y":49.2542,"x":30.8207},{"n":"Kirawsk","c":"Belarus","y":53.2686,"x":29.4736},{"n":"Kvasyliv","c":"Ukraine","y":50.5569,"x":26.2675},{"n":"Harefield","c":"United Kingdom","y":51.6034,"x":-0.478},{"n":"Rhoon","c":"Netherlands","y":51.8667,"x":4.4333},{"n":"Kenilworth","c":"United States","y":40.6781,"x":-74.2889},{"n":"Eguilles","c":"France","y":43.5686,"x":5.3542},{"n":"Carboneras","c":"Spain","y":36.9992,"x":-1.8922},{"n":"Chiaramonte Gulfi","c":"Italy","y":37.0333,"x":14.7},{"n":"Bad Herrenalb","c":"Germany","y":48.8006,"x":8.4408},{"n":"Ercsi","c":"Hungary","y":47.2496,"x":18.891},{"n":"Loppi","c":"Finland","y":60.7181,"x":24.4417},{"n":"Albarradas","c":"Mexico","y":17.0667,"x":-96.2},{"n":"Krasnopillya","c":"Ukraine","y":50.7732,"x":35.2717},{"n":"Beauzelle","c":"France","y":43.6653,"x":1.3775},{"n":"Fifi","c":"Morocco","y":34.95,"x":-5.25},{"n":"Jesteburg","c":"Germany","y":53.3078,"x":9.9542},{"n":"Corumbaiba","c":"Brazil","y":-18.1419,"x":-48.5619},{"n":"Bedekovcina","c":"Croatia","y":46.0333,"x":16},{"n":"Gleize","c":"France","y":45.9892,"x":4.6969},{"n":"Schroeppel","c":"United States","y":43.265,"x":-76.2748},{"n":"Thuir","c":"France","y":42.6319,"x":2.7564},{"n":"Caccamo","c":"Italy","y":37.9333,"x":13.6667},{"n":"Granichen","c":"Switzerland","y":47.3583,"x":8.0997},{"n":"Porto de Pedras","c":"Brazil","y":-9.1578,"x":-35.295},{"n":"Uribe","c":"Colombia","y":3.2408,"x":-74.3536},{"n":"Mikasa","c":"Japan","y":43.2458,"x":141.8756},{"n":"Cortlandville","c":"United States","y":42.5892,"x":-76.1615},{"n":"Ellsworth","c":"United States","y":44.5847,"x":-68.4875},{"n":"Wedgefield","c":"United States","y":28.4847,"x":-81.0808},{"n":"Luisant","c":"France","y":48.4317,"x":1.4764},{"n":"Campomarino","c":"Italy","y":41.9567,"x":15.0344},{"n":"Itamarati","c":"Brazil","y":-6.425,"x":-68.2528},{"n":"Ergoldsbach","c":"Germany","y":48.6833,"x":12.2},{"n":"Clanwilliam","c":"South Africa","y":-32.1786,"x":18.8911},{"n":"Vrutky","c":"Slovakia","y":49.1117,"x":18.9236},{"n":"Nova Fatima","c":"Brazil","y":-23.4319,"x":-50.5639},{"n":"Vetschau/Spreewald","c":"Germany","y":51.7831,"x":14.0667},{"n":"Teuchern","c":"Germany","y":51.1167,"x":12.0167},{"n":"Monona","c":"United States","y":43.054,"x":-89.3334},{"n":"Grumello del Monte","c":"Italy","y":45.6333,"x":9.8667},{"n":"South Londonderry","c":"United States","y":40.2424,"x":-76.5432},{"n":"Verkhnyaya Khava","c":"Russia","y":51.8406,"x":39.9414},{"n":"West Thurrock","c":"United Kingdom","y":51.4836,"x":0.282},{"n":"Manali","c":"India","y":32.2044,"x":77.17},{"n":"Kef el Rhar","c":"Morocco","y":34.5329,"x":-4.2941},{"n":"Fresnes-sur-Escaut","c":"France","y":50.4336,"x":3.5769},{"n":"Major Vieira","c":"Brazil","y":-26.3678,"x":-50.3278},{"n":"Center Line","c":"United States","y":42.4805,"x":-83.0274},{"n":"Venice Gardens","c":"United States","y":27.0694,"x":-82.4054},{"n":"Domnesti","c":"Romania","y":44.3979,"x":25.9175},{"n":"Pismo Beach","c":"United States","y":35.1484,"x":-120.6492},{"n":"Beebe","c":"United States","y":35.0712,"x":-91.8996},{"n":"Bramcote","c":"United Kingdom","y":52.934,"x":-1.242},{"n":"Isle","c":"France","y":45.8042,"x":1.2264},{"n":"Milliken","c":"United States","y":40.3115,"x":-104.8561},{"n":"Montorio al Vomano","c":"Italy","y":42.5833,"x":13.6333},{"n":"Black Mountain","c":"United States","y":35.6142,"x":-82.3275},{"n":"Cenes de la Vega","c":"Spain","y":37.15,"x":-3.5333},{"n":"Hettange-Grande","c":"France","y":49.4058,"x":6.1531},{"n":"Charnay-les-Macon","c":"France","y":46.3092,"x":4.7844},{"n":"Dzidzantun","c":"Mexico","y":21.2472,"x":-89.0417},{"n":"Siret","c":"Romania","y":47.95,"x":26.06},{"n":"San Miguel Quetzaltepec","c":"Mexico","y":16.9667,"x":-95.8167},{"n":"Kerikeri","c":"New Zealand","y":-35.2244,"x":173.9514},{"n":"Pasching","c":"Austria","y":48.2589,"x":14.2028},{"n":"Arico el Nuevo","c":"Spain","y":28.1904,"x":-16.4977},{"n":"Belene","c":"Bulgaria","y":43.6456,"x":25.1258},{"n":"Crestwood Village","c":"United States","y":39.9568,"x":-74.3524},{"n":"Todos Santos","c":"Mexico","y":23.4486,"x":-110.2233},{"n":"Cellole","c":"Italy","y":41.2,"x":13.85},{"n":"Imi n-Tlit","c":"Morocco","y":31.2156,"x":-9.5461},{"n":"El Divisadero","c":"El Salvador","y":13.6,"x":-88.05},{"n":"Neuves-Maisons","c":"France","y":48.6161,"x":6.1036},{"n":"Venhuizen","c":"Netherlands","y":52.6624,"x":5.2},{"n":"Niagara","c":"United States","y":43.1154,"x":-78.981},{"n":"Tavullia","c":"Italy","y":43.898,"x":12.7532},{"n":"Los Santos de Maimona","c":"Spain","y":38.4489,"x":-6.3839},{"n":"Watton","c":"United Kingdom","y":52.5713,"x":0.8259},{"n":"Meadow Lakes","c":"United States","y":61.638,"x":-149.608},{"n":"Selters","c":"Germany","y":50.35,"x":8.2667},{"n":"Sogel","c":"Germany","y":52.85,"x":7.5167},{"n":"Pedreguer","c":"Spain","y":38.7933,"x":0.0342},{"n":"Center Moriches","c":"United States","y":40.8015,"x":-72.796},{"n":"Portugal Cove-St. Philip's","c":"Canada","y":47.6272,"x":-52.8506},{"n":"Vale do Paraiso","c":"Brazil","y":-10.4478,"x":-62.1342},{"n":"Beeskow","c":"Germany","y":52.1667,"x":14.25},{"n":"Tarutyne","c":"Ukraine","y":46.1846,"x":29.1495},{"n":"Port Jefferson","c":"United States","y":40.9465,"x":-73.0579},{"n":"Middleport","c":"United States","y":38.9948,"x":-82.0643},{"n":"Eaton","c":"United States","y":39.7506,"x":-84.6343},{"n":"Heino","c":"Netherlands","y":52.4358,"x":6.2339},{"n":"Pisogne","c":"Italy","y":45.8108,"x":10.1081},{"n":"Beloslav","c":"Bulgaria","y":43.1892,"x":27.705},{"n":"Guarani das Missoes","c":"Brazil","y":-28.1408,"x":-54.5578},{"n":"Tuskegee","c":"United States","y":32.4395,"x":-85.7139},{"n":"Quinchao","c":"Chile","y":-42.5333,"x":-73.4167},{"n":"Breda di Piave","c":"Italy","y":45.7245,"x":12.331},{"n":"Bonsecours","c":"France","y":49.4278,"x":1.1278},{"n":"Roquetas","c":"Spain","y":40.8206,"x":0.5025},{"n":"Zorra","c":"Canada","y":43.15,"x":-80.95},{"n":"Daun","c":"Germany","y":50.1986,"x":6.8319},{"n":"Soustons","c":"France","y":43.7514,"x":-1.3294},{"n":"Rockwood","c":"United States","y":37.463,"x":-77.5744},{"n":"Kindberg","c":"Austria","y":47.5044,"x":15.4489},{"n":"Nagykovacsi","c":"Hungary","y":47.58,"x":18.88},{"n":"Fehergyarmat","c":"Hungary","y":47.985,"x":22.5169},{"n":"Neuendettelsau","c":"Germany","y":49.2667,"x":10.7667},{"n":"Bystrice nad Pernstejnem","c":"Czechia","y":49.523,"x":16.2615},{"n":"Vorselaar","c":"Belgium","y":51.2019,"x":4.7717},{"n":"Leesville","c":"United States","y":31.1397,"x":-93.2741},{"n":"Cosala","c":"Mexico","y":24.4125,"x":-106.6917},{"n":"Peronne","c":"France","y":49.9322,"x":2.9364},{"n":"Oradell","c":"United States","y":40.9562,"x":-74.0314},{"n":"Kitimat","c":"Canada","y":54,"x":-128.7},{"n":"Minnetrista","c":"United States","y":44.9356,"x":-93.7103},{"n":"Templeton","c":"United States","y":42.5686,"x":-72.0736},{"n":"Merrow","c":"United Kingdom","y":51.2463,"x":-0.5279},{"n":"Tarouca","c":"Portugal","y":41.0167,"x":-7.7833},{"n":"Gering","c":"United States","y":41.8275,"x":-103.6649},{"n":"Manhush","c":"Ukraine","y":47.05,"x":37.3},{"n":"Sanctuary Point","c":"Australia","y":-35.1036,"x":150.6267},{"n":"Levico Terme","c":"Italy","y":46.0167,"x":11.3},{"n":"Kyabram","c":"Australia","y":-36.3167,"x":145.05},{"n":"Bad Endbach","c":"Germany","y":50.75,"x":8.5},{"n":"Guimarania","c":"Brazil","y":-18.8439,"x":-46.7928},{"n":"Sidi 'Ali Bou Aqba","c":"Morocco","y":34.8167,"x":-3.7286},{"n":"Shelburne","c":"Canada","y":44.0833,"x":-80.2},{"n":"Bagnes","c":"Switzerland","y":46.0833,"x":7.2167},{"n":"Serra Ricco","c":"Italy","y":44.5078,"x":8.936},{"n":"Bassens","c":"France","y":44.9033,"x":-0.5169},{"n":"Villanueva del Arzobispo","c":"Spain","y":38.1667,"x":-3},{"n":"Gongogi","c":"Brazil","y":-14.3219,"x":-39.465},{"n":"Irai","c":"Brazil","y":-27.1939,"x":-53.2508},{"n":"Monts","c":"France","y":47.2747,"x":0.6428},{"n":"Leao","c":"Brazil","y":-30.1269,"x":-52.0478},{"n":"Tricesimo","c":"Italy","y":46.15,"x":13.2167},{"n":"Alnwick","c":"United Kingdom","y":55.4134,"x":-1.7069},{"n":"Healesville","c":"Australia","y":-37.6561,"x":145.5139},{"n":"Medyn","c":"Russia","y":54.9667,"x":35.8667},{"n":"Gratkorn","c":"Austria","y":47.1356,"x":15.3392},{"n":"Bad Lausick","c":"Germany","y":51.1447,"x":12.6453},{"n":"Kennedy","c":"United States","y":40.4767,"x":-80.1028},{"n":"Medebach","c":"Germany","y":51.1972,"x":8.7069},{"n":"Remiremont","c":"France","y":48.0169,"x":6.59},{"n":"Hazard","c":"United States","y":37.2583,"x":-83.1977},{"n":"Summit Park","c":"United States","y":40.7432,"x":-111.5814},{"n":"Ponte Alta do Tocantins","c":"Brazil","y":-10.7439,"x":-47.5358},{"n":"Gray","c":"United States","y":43.8877,"x":-70.3494},{"n":"Vidreras","c":"Spain","y":41.7889,"x":2.7793},{"n":"Nor Kharberd","c":"Armenia","y":40.0892,"x":44.4778},{"n":"Cherry Valley","c":"United States","y":33.9797,"x":-116.9694},{"n":"Untersiggenthal","c":"Switzerland","y":47.502,"x":8.2538},{"n":"Omak","c":"United States","y":48.4228,"x":-119.5159},{"n":"Vandenberg Village","c":"United States","y":34.7111,"x":-120.4623},{"n":"Vityazevo","c":"Russia","y":44.9833,"x":37.2667},{"n":"West Dundee","c":"United States","y":42.0985,"x":-88.3073},{"n":"Loreggia","c":"Italy","y":45.6,"x":11.95},{"n":"Totnes","c":"United Kingdom","y":50.432,"x":-3.684},{"n":"Blandon","c":"United States","y":40.4446,"x":-75.8799},{"n":"San Esteban Sasroviras","c":"Spain","y":41.495,"x":1.8744},{"n":"El Meghassine","c":"Morocco","y":34.0142,"x":-5.4619},{"n":"Winterbach","c":"Germany","y":48.7992,"x":9.48},{"n":"Borgonovo Val Tidone","c":"Italy","y":45.0167,"x":9.45},{"n":"Duvall","c":"United States","y":47.7354,"x":-121.9726},{"n":"Serra Negra do Norte","c":"Brazil","y":-6.6658,"x":-37.3969},{"n":"Saint-Affrique","c":"France","y":43.9583,"x":2.8864},{"n":"Yaremche","c":"Ukraine","y":48.4536,"x":24.5564},{"n":"Laihia","c":"Finland","y":62.9764,"x":22.0111},{"n":"Collier","c":"United States","y":40.3991,"x":-80.132},{"n":"Ayer","c":"United States","y":42.5628,"x":-71.5718},{"n":"Oederan","c":"Germany","y":50.8617,"x":13.1672},{"n":"Mezguitem","c":"Morocco","y":34.5019,"x":-3.6428},{"n":"Solosuchiapa","c":"Mexico","y":17.4,"x":-93.0167},{"n":"Ananiv","c":"Ukraine","y":47.7225,"x":29.96},{"n":"Vinton","c":"United States","y":37.2746,"x":-79.8887},{"n":"Gurjaani","c":"Georgia","y":41.7444,"x":45.8},{"n":"Olvera","c":"Spain","y":36.9344,"x":-5.2597},{"n":"Kawerau","c":"New Zealand","y":-38.0847,"x":176.6996},{"n":"Notre-Dame-de-Bondeville","c":"France","y":49.4883,"x":1.0483},{"n":"Wissous","c":"France","y":48.7308,"x":2.3272},{"n":"Joshua","c":"United States","y":32.458,"x":-97.3849},{"n":"Livadia","c":"Cyprus","y":34.9551,"x":33.6273},{"n":"Melton","c":"Australia","y":-37.6833,"x":144.5833},{"n":"Peixe-Boi","c":"Brazil","y":-1.1919,"x":-47.3139},{"n":"Clausthal","c":"Germany","y":51.8036,"x":10.3331},{"n":"Kirchheimbolanden","c":"Germany","y":49.6664,"x":8.0117},{"n":"Oak Hill","c":"United States","y":37.9844,"x":-81.1277},{"n":"Santa Cruz do Monte Castelo","c":"Brazil","y":-22.9528,"x":-53.2969},{"n":"Burpengary","c":"Australia","y":-27.1442,"x":153},{"n":"Herrieden","c":"Germany","y":49.233,"x":10.5064},{"n":"Hadfield","c":"United Kingdom","y":53.46,"x":-1.97},{"n":"Monument","c":"United States","y":39.0735,"x":-104.8467},{"n":"Reilingen","c":"Germany","y":49.2947,"x":8.5692},{"n":"Turbigo","c":"Italy","y":45.5333,"x":8.7333},{"n":"Bosel","c":"Germany","y":53.0058,"x":7.9542},{"n":"Monachil","c":"Spain","y":37.1319,"x":-3.5389},{"n":"Orizania","c":"Brazil","y":-20.5058,"x":-42.21},{"n":"Algermissen","c":"Germany","y":52.2544,"x":9.9711},{"n":"Croton-on-Hudson","c":"United States","y":41.2005,"x":-73.9002},{"n":"Zapadnaya Dvina","c":"Russia","y":56.2667,"x":32.0833},{"n":"Saint-Julien-les-Villas","c":"France","y":48.2714,"x":4.0975},{"n":"Briarcliff Manor","c":"United States","y":41.14,"x":-73.844},{"n":"Sodus","c":"United States","y":43.2199,"x":-77.0516},{"n":"Olonets","c":"Russia","y":60.9833,"x":32.9667},{"n":"Targu Carbunesti","c":"Romania","y":44.9583,"x":23.5064},{"n":"Carmignano di Brenta","c":"Italy","y":45.6333,"x":11.7},{"n":"Wickenburg","c":"United States","y":33.9837,"x":-112.7668},{"n":"Heimberg","c":"Switzerland","y":46.7831,"x":7.5997},{"n":"Allegheny","c":"United States","y":40.6151,"x":-79.6439},{"n":"Reppenstedt","c":"Germany","y":53.25,"x":10.3531},{"n":"Kunszentmarton","c":"Hungary","y":46.84,"x":20.29},{"n":"Moraujo","c":"Brazil","y":-3.4669,"x":-40.6808},{"n":"Teteringen","c":"Netherlands","y":51.6086,"x":4.8206},{"n":"Pinoso","c":"Spain","y":38.4033,"x":-1.0422},{"n":"Trevoux","c":"France","y":45.9408,"x":4.775},{"n":"Valencina de la Concepcion","c":"Spain","y":37.4167,"x":-6.0667},{"n":"Selah","c":"United States","y":46.6482,"x":-120.539},{"n":"Tafraoutane","c":"Morocco","y":30.7047,"x":-8.8819},{"n":"Ecouen","c":"France","y":49.0186,"x":2.3811},{"n":"Vista Alegre do Alto","c":"Brazil","y":-21.1708,"x":-48.6289},{"n":"Kushuhum","c":"Ukraine","y":47.7106,"x":35.2192},{"n":"Hammerfest","c":"Norway","y":70.6634,"x":23.6821},{"n":"Pedraza","c":"Colombia","y":10.1886,"x":-74.9156},{"n":"Languidic","c":"France","y":47.8333,"x":-3.1578},{"n":"Bruchmuhlbach-Miesau","c":"Germany","y":49.3861,"x":7.4408},{"n":"Agerola","c":"Italy","y":40.6333,"x":14.55},{"n":"Saint-Hippolyte","c":"Canada","y":45.93,"x":-74.02},{"n":"California","c":"Brazil","y":-23.65,"x":-51.355},{"n":"Postbauer-Heng","c":"Germany","y":49.3028,"x":11.35},{"n":"Helena Valley West Central","c":"United States","y":46.6634,"x":-112.0604},{"n":"Aguas da Prata","c":"Brazil","y":-21.9369,"x":-46.7169},{"n":"Applewood","c":"United States","y":39.7524,"x":-105.1605},{"n":"Aguelhok","c":"Mali","y":19.4614,"x":0.8589},{"n":"Cologne","c":"Italy","y":45.5849,"x":9.9434},{"n":"Soisy-sur-Seine","c":"France","y":48.6469,"x":2.4522},{"n":"Yungay","c":"Peru","y":-9.1389,"x":-77.7444},{"n":"Kronenwetter","c":"United States","y":44.8164,"x":-89.5807},{"n":"Schweich","c":"Germany","y":49.82,"x":6.7522},{"n":"Publier","c":"France","y":46.3878,"x":6.5442},{"n":"Dzyatlava","c":"Belarus","y":53.45,"x":25.4},{"n":"Maravilhas","c":"Brazil","y":-19.5158,"x":-44.6758},{"n":"Saint-Priest-en-Jarez","c":"France","y":45.4742,"x":4.3781},{"n":"Gilberts","c":"United States","y":42.1096,"x":-88.3716},{"n":"Bargersville","c":"United States","y":39.5412,"x":-86.2004},{"n":"Avella","c":"Italy","y":40.96,"x":14.6014},{"n":"Colico","c":"Italy","y":46.1333,"x":9.3667},{"n":"Treuen","c":"Germany","y":50.5425,"x":12.3022},{"n":"Sacrofano","c":"Italy","y":42.1,"x":12.45},{"n":"Sudden Valley","c":"United States","y":48.7199,"x":-122.3468},{"n":"Freisen","c":"Germany","y":49.5493,"x":7.252},{"n":"Campo do Tenente","c":"Brazil","y":-25.9778,"x":-49.6828},{"n":"Hollymead","c":"United States","y":38.1266,"x":-78.4386},{"n":"Rockmart","c":"United States","y":34.0103,"x":-85.0441},{"n":"Tyn nad Vltavou","c":"Czechia","y":49.2235,"x":14.4206},{"n":"Sankt Andra vor dem Hagenthale","c":"Austria","y":48.3278,"x":16.2094},{"n":"Valmaseda","c":"Spain","y":43.1958,"x":-3.1928},{"n":"Monte do Carmo","c":"Brazil","y":-10.7628,"x":-48.1089},{"n":"Schellerten","c":"Germany","y":52.1667,"x":10.0833},{"n":"Lake Carmel","c":"United States","y":41.4612,"x":-73.6681},{"n":"Lockwood","c":"United States","y":45.8199,"x":-108.4072},{"n":"Montreuil-Juigne","c":"France","y":47.5283,"x":-0.6119},{"n":"Semenivka","c":"Ukraine","y":52.1772,"x":32.5797},{"n":"Jockgrim","c":"Germany","y":49.095,"x":8.2783},{"n":"Beynes","c":"France","y":48.8564,"x":1.8728},{"n":"Lake Dallas","c":"United States","y":33.1277,"x":-97.0234},{"n":"Banayoyo","c":"Philippines","y":17.2333,"x":120.4833},{"n":"Sampedor","c":"Spain","y":41.7836,"x":1.8392},{"n":"Pravia","c":"Spain","y":43.4833,"x":-6.1},{"n":"Schoonebeek","c":"Netherlands","y":52.6617,"x":6.8831},{"n":"Rothenburg","c":"Switzerland","y":47.0939,"x":8.2717},{"n":"Arevalo","c":"Spain","y":41.0667,"x":-4.7167},{"n":"Manziana","c":"Italy","y":42.1333,"x":12.1333},{"n":"Ramstein-Miesenbach","c":"Germany","y":49.4461,"x":7.5547},{"n":"Maracalagonis","c":"Italy","y":39.2862,"x":9.2289},{"n":"Rolling Hills Estates","c":"United States","y":33.7783,"x":-118.3509},{"n":"Tapirai","c":"Brazil","y":-23.9639,"x":-47.5069},{"n":"El Metline","c":"Tunisia","y":37.2454,"x":10.0498},{"n":"Moirans","c":"France","y":45.325,"x":5.5644},{"n":"Tamasi","c":"Hungary","y":46.6167,"x":18.3},{"n":"Uckange","c":"France","y":49.3025,"x":6.1553},{"n":"Lisses","c":"France","y":48.5978,"x":2.4264},{"n":"Bestensee","c":"Germany","y":52.25,"x":13.65},{"n":"South Cleveland","c":"United States","y":35.1097,"x":-84.9097},{"n":"Casteltermini","c":"Italy","y":37.5417,"x":13.6453},{"n":"Willits","c":"United States","y":39.4047,"x":-123.3494},{"n":"Kottingbrunn","c":"Austria","y":47.9519,"x":16.2292},{"n":"Chisineu Cris","c":"Romania","y":46.5225,"x":21.5158},{"n":"Clisson","c":"France","y":47.0869,"x":-1.2836},{"n":"Willerby","c":"United Kingdom","y":53.7633,"x":-0.4504},{"n":"Namestovo","c":"Slovakia","y":49.41,"x":19.48},{"n":"Melnikovo","c":"Russia","y":56.55,"x":84.0667},{"n":"Skiatook","c":"United States","y":36.3694,"x":-95.9819},{"n":"Alpestre","c":"Brazil","y":-27.2489,"x":-53.035},{"n":"Decorah","c":"United States","y":43.3015,"x":-91.7844},{"n":"Itanagra","c":"Brazil","y":-12.2628,"x":-38.0419},{"n":"Elsterwerda","c":"Germany","y":51.4578,"x":13.5239},{"n":"Iepe","c":"Brazil","y":-22.6606,"x":-51.0761},{"n":"Ascurra","c":"Brazil","y":-26.955,"x":-49.3758},{"n":"Clydach","c":"United Kingdom","y":51.69,"x":-3.91},{"n":"Macaubal","c":"Brazil","y":-20.8058,"x":-49.9639},{"n":"Delligsen","c":"Germany","y":51.9412,"x":9.8027},{"n":"Diamondhead","c":"United States","y":30.3791,"x":-89.3708},{"n":"Akrehamn","c":"Norway","y":59.2603,"x":5.1856},{"n":"Candelo","c":"Italy","y":45.5478,"x":8.1069},{"n":"Floresville","c":"United States","y":29.14,"x":-98.163},{"n":"Bedminster","c":"United States","y":40.6693,"x":-74.6824},{"n":"Ripley","c":"United States","y":35.7449,"x":-89.5358},{"n":"Wintzenheim","c":"France","y":48.0731,"x":7.29},{"n":"Chardon","c":"United States","y":41.5803,"x":-81.2082},{"n":"Morehead","c":"United States","y":38.1906,"x":-83.4467},{"n":"Langres","c":"France","y":47.8625,"x":5.3331},{"n":"Arazane","c":"Morocco","y":30.5035,"x":-8.6064},{"n":"Kups","c":"Germany","y":50.1933,"x":11.2728},{"n":"Arcugnano","c":"Italy","y":45.5004,"x":11.5353},{"n":"Iguatama","c":"Brazil","y":-20.1739,"x":-45.7108},{"n":"Angmering","c":"United Kingdom","y":50.8288,"x":-0.4846},{"n":"Arta","c":"Spain","y":39.6952,"x":3.3512},{"n":"Dubi","c":"Czechia","y":50.6811,"x":13.7889},{"n":"Rheinsberg","c":"Germany","y":53.0983,"x":12.8958},{"n":"Taseyevo","c":"Russia","y":57.2119,"x":94.8958},{"n":"Castlegar","c":"Canada","y":49.3256,"x":-117.6661},{"n":"Mihailesti","c":"Romania","y":44.3239,"x":25.9069},{"n":"Titchfield","c":"United Kingdom","y":50.8491,"x":-1.2344},{"n":"Krasnokholmskiy","c":"Russia","y":55.9861,"x":55.0448},{"n":"Anacapri","c":"Italy","y":40.5514,"x":14.2167},{"n":"Bad Duben","c":"Germany","y":51.5919,"x":12.5853},{"n":"Saint-Victoret","c":"France","y":43.4208,"x":5.2333},{"n":"Jermuk","c":"Armenia","y":39.85,"x":45.6833},{"n":"Saint-Vincent-de-Tyrosse","c":"France","y":43.6611,"x":-1.3042},{"n":"Treze Tilias","c":"Brazil","y":-27.0019,"x":-51.4058},{"n":"Villaverde del Rio","c":"Spain","y":37.5833,"x":-5.8667},{"n":"Mayo","c":"United States","y":38.9041,"x":-76.518},{"n":"Lodi Vecchio","c":"Italy","y":45.3033,"x":9.4186},{"n":"Tropea","c":"Italy","y":38.6781,"x":15.8969},{"n":"Altomunster","c":"Germany","y":48.3833,"x":11.25},{"n":"Menominee","c":"United States","y":45.122,"x":-87.6234},{"n":"Brion","c":"Spain","y":42.867,"x":-8.678},{"n":"Lagoa Alegre","c":"Brazil","y":-4.5158,"x":-42.625},{"n":"La Couronne","c":"France","y":45.6075,"x":0.1},{"n":"Berango","c":"Spain","y":43.365,"x":-2.99},{"n":"Heyin","c":"China","y":36.0451,"x":101.4242},{"n":"Ceret","c":"France","y":42.4881,"x":2.7514},{"n":"Svoge","c":"Bulgaria","y":42.9594,"x":23.3477},{"n":"Pidvolochysk","c":"Ukraine","y":49.5311,"x":26.1467},{"n":"Sezimovo Usti","c":"Czechia","y":49.3853,"x":14.6848},{"n":"Pleasant Hills","c":"United States","y":40.3298,"x":-79.9596},{"n":"Pahokee","c":"United States","y":26.8202,"x":-80.662},{"n":"Moulay Abdelkader","c":"Morocco","y":34.4,"x":-4.7167},{"n":"Insar","c":"Russia","y":53.8667,"x":44.3667},{"n":"Ahuimanu","c":"United States","y":21.4379,"x":-157.8404},{"n":"Crete","c":"United States","y":41.44,"x":-87.6236},{"n":"Saint-Prix","c":"France","y":49.0067,"x":2.2625},{"n":"Lagkadas","c":"Greece","y":40.75,"x":23.0667},{"n":"Topolobampo","c":"Mexico","y":25.6056,"x":-109.05},{"n":"Mamonovo","c":"Russia","y":54.4667,"x":19.9333},{"n":"Loudoun Valley Estates","c":"United States","y":38.9801,"x":-77.5082},{"n":"Chestnut Ridge","c":"United States","y":41.0829,"x":-74.0551},{"n":"Laurel Hill","c":"United States","y":38.7026,"x":-77.2422},{"n":"Island Lake","c":"United States","y":42.2783,"x":-88.1999},{"n":"Icem","c":"Brazil","y":-20.3333,"x":-49.1833},{"n":"Estrela do Sul","c":"Brazil","y":-18.7458,"x":-47.6928},{"n":"Seasalter","c":"United Kingdom","y":51.3456,"x":0.9981},{"n":"Puentedeume","c":"Spain","y":43.4125,"x":-8.1703},{"n":"Church Point","c":"Canada","y":44.3333,"x":-66.1167},{"n":"Lesneven","c":"France","y":48.5719,"x":-4.3222},{"n":"Lochgelly","c":"United Kingdom","y":56.1282,"x":-3.3111},{"n":"Rychvald","c":"Czechia","y":49.8662,"x":18.3763},{"n":"Lagord","c":"France","y":46.1894,"x":-1.1542},{"n":"Puerto Parra","c":"Colombia","y":6.6514,"x":-74.0569},{"n":"Ida Ou Azza","c":"Morocco","y":31.1533,"x":-9.7333},{"n":"Oak Brook","c":"United States","y":41.8372,"x":-87.9513},{"n":"Santana de Pirapama","c":"Brazil","y":-19.0058,"x":-44.0428},{"n":"Penalva do Castelo","c":"Portugal","y":40.6667,"x":-7.6833},{"n":"Kozhevnikovo","c":"Russia","y":56.25,"x":83.9667},{"n":"Zeltweg","c":"Austria","y":47.1906,"x":14.7511},{"n":"Palagianello","c":"Italy","y":40.6167,"x":16.9667},{"n":"Neresheim","c":"Germany","y":48.7542,"x":10.3344},{"n":"Jequitai","c":"Brazil","y":-17.2358,"x":-44.4458},{"n":"Narre Warren North","c":"Australia","y":-37.9833,"x":145.3167},{"n":"Rommelshausen","c":"Germany","y":48.8067,"x":9.3217},{"n":"Cruzeta","c":"Brazil","y":-6.4119,"x":-36.79},{"n":"Tara","c":"Japan","y":33.0194,"x":130.1792},{"n":"Caldas de Malavella","c":"Spain","y":41.8387,"x":2.8089},{"n":"Antoing","c":"Belgium","y":50.5669,"x":3.4494},{"n":"Centellas","c":"Spain","y":41.7994,"x":2.2217},{"n":"Millom","c":"United Kingdom","y":54.2096,"x":-3.2702},{"n":"Loftus","c":"United Kingdom","y":54.5569,"x":-0.8919},{"n":"Pedra Lavrada","c":"Brazil","y":-6.7569,"x":-36.48},{"n":"Crediton","c":"United Kingdom","y":50.791,"x":-3.656},{"n":"Cumiana","c":"Italy","y":44.9833,"x":7.3667},{"n":"Pershore","c":"United Kingdom","y":52.114,"x":-2.08},{"n":"Nurmes","c":"Finland","y":63.5444,"x":29.1333},{"n":"Digoin","c":"France","y":46.4819,"x":3.9806},{"n":"Helvecia","c":"Argentina","y":-31.1,"x":-60.0833},{"n":"Berchtesgaden","c":"Germany","y":47.6314,"x":13.0042},{"n":"Vizille","c":"France","y":45.0783,"x":5.7719},{"n":"Butzow","c":"Germany","y":53.85,"x":11.9833},{"n":"Cartoceto","c":"Italy","y":43.7643,"x":12.8832},{"n":"Clementina","c":"Brazil","y":-21.5597,"x":-50.4492},{"n":"Mascoutah","c":"United States","y":38.5192,"x":-89.8044},{"n":"Almyros","c":"Greece","y":39.1803,"x":22.7606},{"n":"Brazil","c":"United States","y":39.5226,"x":-87.124},{"n":"Chiavenna","c":"Italy","y":46.3167,"x":9.4},{"n":"Vertentes do Lerio","c":"Brazil","y":-7.7708,"x":-35.85},{"n":"Goring by Sea","c":"United Kingdom","y":50.8122,"x":-0.4244},{"n":"Iaras","c":"Brazil","y":-22.8667,"x":-49.1667},{"n":"Bosa","c":"Italy","y":40.299,"x":8.4978},{"n":"Lanchyn","c":"Ukraine","y":48.5475,"x":24.7517},{"n":"North Coventry","c":"United States","y":40.2199,"x":-75.6817},{"n":"Jennings Lodge","c":"United States","y":45.3926,"x":-122.6153},{"n":"Tullins","c":"France","y":45.2975,"x":5.4833},{"n":"Kozelets","c":"Ukraine","y":50.9164,"x":31.1147},{"n":"Saint-Denis-en-Val","c":"France","y":47.8772,"x":1.96},{"n":"Manhasset","c":"United States","y":40.7884,"x":-73.6943},{"n":"Santa Maria di Licodia","c":"Italy","y":37.6167,"x":14.9},{"n":"Torrile","c":"Italy","y":44.9209,"x":10.3264},{"n":"Mineral del Chico","c":"Mexico","y":20.2031,"x":-98.7478},{"n":"Lillesand","c":"Norway","y":58.2488,"x":8.3778},{"n":"Lampasas","c":"United States","y":31.064,"x":-98.1824},{"n":"Drumheller","c":"Canada","y":51.4636,"x":-112.7194},{"n":"La Montagne","c":"France","y":47.19,"x":-1.6839},{"n":"Kirkland Lake","c":"Canada","y":48.15,"x":-80.0333},{"n":"Firuraq","c":"Iran","y":38.58,"x":44.8358},{"n":"Village Green-Green Ridge","c":"United States","y":39.8638,"x":-75.4256},{"n":"Liebenburg","c":"Germany","y":52.0242,"x":10.4339},{"n":"Krupina","c":"Slovakia","y":48.35,"x":19.0669},{"n":"Almodovar del Rio","c":"Spain","y":37.8,"x":-5.0167},{"n":"Rizziconi","c":"Italy","y":38.4122,"x":15.9589},{"n":"Marmirolo","c":"Italy","y":45.2193,"x":10.7561},{"n":"Hengersberg","c":"Germany","y":48.7736,"x":13.0517},{"n":"Dabnou","c":"Niger","y":14.1571,"x":5.3626},{"n":"Koufalia","c":"Greece","y":40.7792,"x":22.5767},{"n":"Toscolano","c":"Italy","y":45.6398,"x":10.6076},{"n":"Polgar","c":"Hungary","y":47.8663,"x":21.1242},{"n":"Wittem","c":"Netherlands","y":50.8133,"x":5.9122},{"n":"Willisau","c":"Switzerland","y":47.1206,"x":7.9928},{"n":"Artemivsk","c":"Ukraine","y":48.4403,"x":38.7422},{"n":"Tuparetama","c":"Brazil","y":-7.6019,"x":-37.3108},{"n":"Domene","c":"France","y":45.2025,"x":5.8389},{"n":"Fort Belvoir","c":"United States","y":38.7119,"x":-77.1459},{"n":"West Boylston","c":"United States","y":42.369,"x":-71.7846},{"n":"Cambira","c":"Brazil","y":-23.5828,"x":-51.5778},{"n":"Chalford","c":"United Kingdom","y":51.7238,"x":-2.1491},{"n":"Laughlin","c":"United States","y":35.1316,"x":-114.689},{"n":"San Felipe Tejalapan","c":"Mexico","y":17.1111,"x":-96.8542},{"n":"Muniz Ferreira","c":"Brazil","y":-13.0028,"x":-39.11},{"n":"Mozzecane","c":"Italy","y":45.3,"x":10.8167},{"n":"Abatskoye","c":"Russia","y":56.2872,"x":70.4542},{"n":"Chartiers","c":"United States","y":40.2504,"x":-80.2495},{"n":"Aztec","c":"United States","y":36.819,"x":-107.9826},{"n":"St. Martin","c":"United States","y":30.4399,"x":-88.8651},{"n":"La Junta","c":"United States","y":37.9792,"x":-103.5473},{"n":"Kinchil","c":"Mexico","y":20.9161,"x":-89.9469},{"n":"Altenberg","c":"Germany","y":50.7644,"x":13.7578},{"n":"Alfonso Castaneda","c":"Philippines","y":15.794,"x":121.3},{"n":"Brockworth","c":"United Kingdom","y":51.85,"x":-2.15},{"n":"Gieres","c":"France","y":45.1819,"x":5.7919},{"n":"Leck","c":"Germany","y":54.7744,"x":8.9736},{"n":"Yahiko","c":"Japan","y":37.6833,"x":138.85},{"n":"Denny","c":"United Kingdom","y":56.018,"x":-3.907},{"n":"Gelida","c":"Spain","y":41.4409,"x":1.8647},{"n":"Bosanski Petrovac","c":"Bosnia And Herzegovina","y":44.55,"x":16.3667},{"n":"Southwest Ranches","c":"United States","y":26.0476,"x":-80.375},{"n":"Numansdorp","c":"Netherlands","y":51.7331,"x":4.4381},{"n":"Tukan","c":"Russia","y":53.8419,"x":57.4611},{"n":"Timbo Grande","c":"Brazil","y":-26.615,"x":-50.6739},{"n":"Tonila","c":"Mexico","y":19.4261,"x":-103.5319},{"n":"San Luis de Palenque","c":"Colombia","y":5.4222,"x":-71.7314},{"n":"Richland Hills","c":"United States","y":32.8095,"x":-97.2273},{"n":"Dannstadt-Schauernheim","c":"Germany","y":49.4281,"x":8.3161},{"n":"Hellenthal","c":"Germany","y":50.4831,"x":6.4331},{"n":"Mogosoaia","c":"Romania","y":44.5324,"x":26},{"n":"Geispolsheim","c":"France","y":48.515,"x":7.6464},{"n":"Sohlde","c":"Germany","y":52.2,"x":10.2333},{"n":"Santa Eulalia de Ronsana","c":"Spain","y":41.6531,"x":2.2261},{"n":"Dornach","c":"Switzerland","y":47.4789,"x":7.6181},{"n":"Meta","c":"Italy","y":40.6417,"x":14.4167},{"n":"Cavalaire-sur-Mer","c":"France","y":43.1711,"x":6.5292},{"n":"Bad Liebenstein","c":"Germany","y":50.8144,"x":10.3542},{"n":"Fouquieres-les-Lens","c":"France","y":50.4286,"x":2.9128},{"n":"Gerardmer","c":"France","y":48.0722,"x":6.8786},{"n":"Baltimore Highlands","c":"United States","y":39.2355,"x":-76.6367},{"n":"Dolores","c":"Spain","y":38.1389,"x":-0.77},{"n":"Porterville","c":"South Africa","y":-33,"x":18.9833},{"n":"Mrkonjic Grad","c":"Bosnia And Herzegovina","y":44.4167,"x":17.0833},{"n":"Sao Joao do Oriente","c":"Brazil","y":-19.3389,"x":-42.1578},{"n":"Tignieu","c":"France","y":45.7339,"x":5.1872},{"n":"Herzogenburg","c":"Austria","y":48.2833,"x":15.6833},{"n":"Nejdek","c":"Czechia","y":50.3225,"x":12.7294},{"n":"Saint-Peray","c":"France","y":44.9486,"x":4.845},{"n":"Liptovsky Hradok","c":"Slovakia","y":49.0394,"x":19.7244},{"n":"Slawharad","c":"Belarus","y":53.4453,"x":30.9964},{"n":"Villmergen","c":"Switzerland","y":47.3483,"x":8.2456},{"n":"Vols","c":"Austria","y":47.25,"x":11.3333},{"n":"Newport-On-Tay","c":"United Kingdom","y":56.4402,"x":-2.941},{"n":"Leegebruch","c":"Germany","y":52.7167,"x":13.2},{"n":"Marseillan","c":"France","y":43.3564,"x":3.5278},{"n":"Higham Ferrers","c":"United Kingdom","y":52.3057,"x":-0.5844},{"n":"Bous","c":"Germany","y":49.2667,"x":6.7833},{"n":"Hufingen","c":"Germany","y":47.9261,"x":8.49},{"n":"Anse","c":"France","y":45.9356,"x":4.7194},{"n":"Columbiana","c":"United States","y":40.8871,"x":-80.675},{"n":"Marchamalo","c":"Spain","y":40.6706,"x":-3.2006},{"n":"Galliera Veneta","c":"Italy","y":45.6667,"x":11.8333},{"n":"Herzogenbuchsee","c":"Switzerland","y":47.1884,"x":7.7062},{"n":"Glastonbury Center","c":"United States","y":41.7019,"x":-72.6001},{"n":"Vorzel","c":"Ukraine","y":50.55,"x":30.15},{"n":"Malemort-sur-Correze","c":"France","y":45.1708,"x":1.5639},{"n":"Trigueros","c":"Spain","y":37.3833,"x":-6.8333},{"n":"Sao Joao do Jaguaribe","c":"Brazil","y":-5.2708,"x":-38.2739},{"n":"Arkhipo-Osipovka","c":"Russia","y":44.363,"x":38.5337},{"n":"Chaiya","c":"Thailand","y":9.3778,"x":99.2728},{"n":"Nasice","c":"Croatia","y":45.4833,"x":18.1},{"n":"Baldim","c":"Brazil","y":-19.2878,"x":-43.9569},{"n":"Rethel","c":"France","y":49.5097,"x":4.3675},{"n":"Sheboygan Falls","c":"United States","y":43.729,"x":-87.8266},{"n":"Ruelle-sur-Touvre","c":"France","y":45.6778,"x":0.2203},{"n":"Dumbravita","c":"Romania","y":45.8019,"x":21.2475},{"n":"Cherykaw","c":"Belarus","y":53.5667,"x":31.3667},{"n":"Lyubimets","c":"Bulgaria","y":41.8445,"x":26.081},{"n":"Cambiago","c":"Italy","y":45.5667,"x":9.4167},{"n":"Salzbergen","c":"Germany","y":52.3244,"x":7.3481},{"n":"Uetikon am See","c":"Switzerland","y":47.2669,"x":8.6772},{"n":"Wytheville","c":"United States","y":36.953,"x":-81.0881},{"n":"Viladecaballs","c":"Spain","y":41.5578,"x":1.9558},{"n":"Teggiano","c":"Italy","y":40.3833,"x":15.5333},{"n":"Hipadpad","c":"Philippines","y":12.2833,"x":125.2333},{"n":"Hollis","c":"United States","y":42.7494,"x":-71.5834},{"n":"Peresecina","c":"Moldova","y":47.2522,"x":28.7689},{"n":"Degache","c":"Tunisia","y":33.9858,"x":8.2203},{"n":"Sidi Ahmed Ben Aissa","c":"Morocco","y":34.7114,"x":-5.815},{"n":"Hitchcock","c":"United States","y":29.2945,"x":-95.025},{"n":"La Puebla de Montalban","c":"Spain","y":39.8722,"x":-4.3589},{"n":"Colombelles","c":"France","y":49.2042,"x":-0.2972},{"n":"Had Kourt","c":"Morocco","y":34.6167,"x":-5.7333},{"n":"Nieppe","c":"France","y":50.7031,"x":2.8389},{"n":"Bollington","c":"United Kingdom","y":53.298,"x":-2.093},{"n":"Langon","c":"France","y":44.5531,"x":-0.2494},{"n":"Toulouges","c":"France","y":42.6706,"x":2.8319},{"n":"Mandurah","c":"Australia","y":-32.5289,"x":115.7231},{"n":"Catalina","c":"United States","y":32.4848,"x":-110.8998},{"n":"Gorodishche","c":"Russia","y":53.2667,"x":45.7},{"n":"Sontra","c":"Germany","y":51.0667,"x":9.9333},{"n":"Villa Cortese","c":"Italy","y":45.5667,"x":8.8833},{"n":"Villanueva del Ariscal","c":"Spain","y":37.3833,"x":-6.1333},{"n":"Talat-n-Ya'qoub","c":"Morocco","y":30.9903,"x":-8.1772},{"n":"Dryanovo","c":"Bulgaria","y":42.9736,"x":25.4747},{"n":"Annfield Plain","c":"United Kingdom","y":54.857,"x":-1.737},{"n":"Grasberg","c":"Germany","y":53.1833,"x":8.9833},{"n":"Durande","c":"Brazil","y":-20.2028,"x":-41.7978},{"n":"Bonner Springs","c":"United States","y":39.0817,"x":-94.8776},{"n":"Pasiano","c":"Italy","y":45.8686,"x":12.6444},{"n":"Wachtebeke","c":"Belgium","y":51.17,"x":3.8594},{"n":"Senador Firmino","c":"Brazil","y":-20.9119,"x":-43.0969},{"n":"Long Grove","c":"United States","y":42.1968,"x":-88.0057},{"n":"Camp Hill","c":"United States","y":40.2423,"x":-76.9274},{"n":"Mansfield Center","c":"United States","y":42.0225,"x":-71.218},{"n":"Sao Joao da Pesqueira","c":"Portugal","y":41.1333,"x":-7.4},{"n":"Hradek nad Nisou","c":"Czechia","y":50.8529,"x":14.8447},{"n":"Itaicaba","c":"Brazil","y":-4.6739,"x":-37.8219},{"n":"Vere","c":"Brazil","y":-25.8808,"x":-52.9078},{"n":"Wilmington Manor","c":"United States","y":39.6858,"x":-75.5849},{"n":"Malagon","c":"Spain","y":39.1833,"x":-3.8667},{"n":"Olginate","c":"Italy","y":45.8,"x":9.4167},{"n":"Borrazopolis","c":"Brazil","y":-23.9408,"x":-51.5878},{"n":"Nazario","c":"Brazil","y":-16.5819,"x":-49.8819},{"n":"Xiaoshengcun","c":"China","y":24.0668,"x":116.4547},{"n":"Doue-la-Fontaine","c":"France","y":47.1931,"x":-0.2756},{"n":"Topanga","c":"United States","y":34.0964,"x":-118.6053},{"n":"Tura","c":"Hungary","y":47.6067,"x":19.5967},{"n":"Erval Seco","c":"Brazil","y":-27.5489,"x":-53.5039},{"n":"Bergkirchen","c":"Germany","y":48.25,"x":11.3667},{"n":"Argyle","c":"Canada","y":43.8,"x":-65.85},{"n":"Torbay","c":"Canada","y":47.65,"x":-52.7333},{"n":"Leopoldo de Bulhoes","c":"Brazil","y":-16.6189,"x":-48.7439},{"n":"Downingtown","c":"United States","y":40.0076,"x":-75.7019},{"n":"Grand Ledge","c":"United States","y":42.7534,"x":-84.7448},{"n":"Aldingen","c":"Germany","y":48.0944,"x":8.7058},{"n":"Nong Phai","c":"Thailand","y":15.9972,"x":101.0652},{"n":"Stony Stratford","c":"United Kingdom","y":52.0567,"x":-0.8526},{"n":"Saltinho","c":"Brazil","y":-22.8469,"x":-47.6769},{"n":"Sandorfalva","c":"Hungary","y":46.3667,"x":20.1},{"n":"San Julian","c":"Argentina","y":-49.307,"x":-67.7298},{"n":"Jalasjarvi","c":"Finland","y":62.4917,"x":22.7667},{"n":"Meland","c":"Norway","y":60.5642,"x":5.1186},{"n":"Old Forge","c":"United States","y":41.3705,"x":-75.7409},{"n":"Upton","c":"United States","y":42.1771,"x":-71.6043},{"n":"Tenampa","c":"Mexico","y":19.25,"x":-96.8833},{"n":"Pelago","c":"Italy","y":43.7739,"x":11.5047},{"n":"Lincolnshire","c":"United States","y":42.1957,"x":-87.9182},{"n":"Kinmel","c":"United Kingdom","y":53.31,"x":-3.519},{"n":"Cormontreuil","c":"France","y":49.2228,"x":4.0519},{"n":"Blair","c":"United States","y":41.5417,"x":-96.1361},{"n":"Naila","c":"Germany","y":50.3299,"x":11.7083},{"n":"Jersey Village","c":"United States","y":29.8903,"x":-95.5721},{"n":"Tavernelle in Val di Pesa","c":"Italy","y":43.5614,"x":11.1729},{"n":"Itobi","c":"Brazil","y":-21.7369,"x":-46.975},{"n":"Ancenis","c":"France","y":47.3728,"x":-1.1783},{"n":"Liffre","c":"France","y":48.2136,"x":-1.5081},{"n":"Bouffemont","c":"France","y":49.0433,"x":2.2992},{"n":"Kyneton","c":"Australia","y":-37.2333,"x":144.45},{"n":"West Long Branch","c":"United States","y":40.2883,"x":-74.0185},{"n":"Dilolo","c":"Congo (Kinshasa)","y":-10.6833,"x":22.3333},{"n":"Flushing","c":"United States","y":43.0637,"x":-83.8403},{"n":"Trzemeszno","c":"Poland","y":52.5614,"x":17.8231},{"n":"Vratimov","c":"Czechia","y":49.7699,"x":18.3102},{"n":"Sao Miguel dos Milagres","c":"Brazil","y":-9.2658,"x":-35.3728},{"n":"Dorentrup","c":"Germany","y":52.0331,"x":9},{"n":"Guaraquecaba","c":"Brazil","y":-25.3069,"x":-48.3289},{"n":"Juarez Tavora","c":"Brazil","y":-7.1719,"x":-35.5828},{"n":"Mably","c":"France","y":46.0858,"x":4.0647},{"n":"Fruitvale","c":"United States","y":39.0933,"x":-108.4789},{"n":"Mynamaki","c":"Finland","y":60.6833,"x":21.9833},{"n":"Petrvald","c":"Czechia","y":49.831,"x":18.3894},{"n":"Burley in Wharfedale","c":"United Kingdom","y":53.9137,"x":-1.748},{"n":"Temax","c":"Mexico","y":21.1511,"x":-88.9403},{"n":"Flein","c":"Germany","y":49.1,"x":9.2167},{"n":"Grand Blanc","c":"United States","y":42.9258,"x":-83.6181},{"n":"Abadiano Celayeta","c":"Spain","y":43.1525,"x":-2.6075},{"n":"Schonungen","c":"Germany","y":50.05,"x":10.3167},{"n":"Zingem","c":"Belgium","y":50.9042,"x":3.6536},{"n":"Abingdon","c":"United States","y":36.7089,"x":-81.9713},{"n":"Ide","c":"Japan","y":34.7986,"x":135.8033},{"n":"Wilmington","c":"United Kingdom","y":51.4309,"x":0.1876},{"n":"Kelty","c":"United Kingdom","y":56.133,"x":-3.38},{"n":"Willesborough","c":"United Kingdom","y":51.1386,"x":0.8957},{"n":"Lesigny","c":"France","y":48.7442,"x":2.6158},{"n":"La Peche","c":"Canada","y":45.6833,"x":-75.9833},{"n":"Edenbridge","c":"United Kingdom","y":51.197,"x":0.065},{"n":"Gendt","c":"Netherlands","y":51.8769,"x":5.9725},{"n":"Bridge City","c":"United States","y":30.0298,"x":-93.8406},{"n":"Bow","c":"United States","y":43.1308,"x":-71.5307},{"n":"Crescentino","c":"Italy","y":45.1833,"x":8.1},{"n":"Madeira","c":"Brazil","y":-3.4828,"x":-42.5039},{"n":"Altach","c":"Austria","y":47.35,"x":9.65},{"n":"Weissach","c":"Germany","y":48.8481,"x":8.9203},{"n":"Thung Saliam","c":"Thailand","y":17.324,"x":99.5671},{"n":"Myory","c":"Belarus","y":55.6167,"x":27.6167},{"n":"Carpaneto Piacentino","c":"Italy","y":44.9167,"x":9.7833},{"n":"Bol'sheust'ikinskoye","c":"Russia","y":55.9453,"x":58.2679},{"n":"Rimpar","c":"Germany","y":49.85,"x":9.95},{"n":"Khondab","c":"Iran","y":34.3928,"x":49.1839},{"n":"Woodlake","c":"United States","y":36.4124,"x":-119.0999},{"n":"Timezgadiouine","c":"Morocco","y":30.8833,"x":-9.05},{"n":"Hastings-on-Hudson","c":"United States","y":40.9902,"x":-73.8801},{"n":"Fieni","c":"Romania","y":45.1222,"x":25.4183},{"n":"Fremantle","c":"Australia","y":-32.0569,"x":115.7439},{"n":"Bex","c":"Switzerland","y":46.25,"x":7.0167},{"n":"Pantelleria","c":"Italy","y":36.7875,"x":11.9925},{"n":"Pivdenne","c":"Ukraine","y":49.8849,"x":36.0687},{"n":"Pontcharra","c":"France","y":45.4331,"x":6.0153},{"n":"Boostedt","c":"Germany","y":54.0089,"x":10.0258},{"n":"Hardyston","c":"United States","y":41.1206,"x":-74.5598},{"n":"Rohatyn","c":"Ukraine","y":49.4167,"x":24.6167},{"n":"Stribro","c":"Czechia","y":49.753,"x":13.0041},{"n":"Bryans Road","c":"United States","y":38.6144,"x":-77.085},{"n":"Banff","c":"Canada","y":51.1781,"x":-115.5719},{"n":"Innisfail","c":"Canada","y":52.0333,"x":-113.95},{"n":"Waterboro","c":"United States","y":43.5972,"x":-70.7302},{"n":"Cobena","c":"Spain","y":40.5669,"x":-3.5069},{"n":"Paratebueno","c":"Colombia","y":4.3753,"x":-73.2131},{"n":"Courdimanche","c":"France","y":49.0344,"x":2.0014},{"n":"Lalla Takerkoust","c":"Morocco","y":31.3669,"x":-8.1331},{"n":"Halifax","c":"United States","y":41.9914,"x":-70.8633},{"n":"San Colombano al Lambro","c":"Italy","y":45.1833,"x":9.4833},{"n":"Sangaree","c":"United States","y":33.0328,"x":-80.1253},{"n":"La Talaudiere","c":"France","y":45.4814,"x":4.4319},{"n":"Questembert","c":"France","y":47.6614,"x":-2.4531},{"n":"Bosteri","c":"Kyrgyzstan","y":42.65,"x":77.18},{"n":"Itapirapua","c":"Brazil","y":-15.8228,"x":-50.6128},{"n":"North Cornwall","c":"United States","y":40.3134,"x":-76.4515},{"n":"Fakenham","c":"United Kingdom","y":52.8356,"x":0.851},{"n":"Frenkendorf","c":"Switzerland","y":47.5031,"x":7.7144},{"n":"Los Fresnos","c":"United States","y":26.075,"x":-97.4877},{"n":"South Weber","c":"United States","y":41.1334,"x":-111.9392},{"n":"Barra do Turvo","c":"Brazil","y":-24.7564,"x":-48.5047},{"n":"Mazapa","c":"Mexico","y":15.3833,"x":-92.1833},{"n":"Watford City","c":"United States","y":47.8028,"x":-103.2678},{"n":"Crookston","c":"United States","y":47.7747,"x":-96.6062},{"n":"Sao Vicente de Minas","c":"Brazil","y":-21.7128,"x":-44.4439},{"n":"Chastre-Villeroux-Blanmont","c":"Belgium","y":50.6,"x":4.6333},{"n":"Talmont-Saint-Hilaire","c":"France","y":46.4672,"x":-1.6183},{"n":"Madison Park","c":"United States","y":40.4461,"x":-74.2959},{"n":"Fohnsdorf","c":"Austria","y":47.2083,"x":14.6794},{"n":"Farington","c":"United Kingdom","y":53.703,"x":-2.685},{"n":"Oberstaufen","c":"Germany","y":47.5544,"x":10.0211},{"n":"Cox","c":"Spain","y":38.1394,"x":-0.8847},{"n":"Khon Buri","c":"Thailand","y":14.5686,"x":102.1564},{"n":"Nemishayeve","c":"Ukraine","y":50.5624,"x":30.0925},{"n":"San Gimignano","c":"Italy","y":43.4677,"x":11.0432},{"n":"Latrobe","c":"United States","y":40.3125,"x":-79.3826},{"n":"Lamporecchio","c":"Italy","y":43.8167,"x":10.9},{"n":"Nicolet","c":"Canada","y":46.2167,"x":-72.6167},{"n":"Saint-Yrieix-sur-Charente","c":"France","y":45.6753,"x":0.1275},{"n":"Soeng Sang","c":"Thailand","y":14.4242,"x":102.4584},{"n":"Nuevo Cuscatlan","c":"El Salvador","y":13.65,"x":-89.2667},{"n":"Rrogozhine","c":"Albania","y":41.0761,"x":19.6667},{"n":"DeFuniak Springs","c":"United States","y":30.7123,"x":-86.1208},{"n":"Rockwood","c":"Canada","y":50.2856,"x":-97.2869},{"n":"Olivette","c":"United States","y":38.6724,"x":-90.3786},{"n":"Baldwinsville","c":"United States","y":43.157,"x":-76.3318},{"n":"Sound Beach","c":"United States","y":40.9578,"x":-72.9726},{"n":"Saviese","c":"Switzerland","y":46.25,"x":7.3333},{"n":"Kral'ovsky Chlmec","c":"Slovakia","y":48.4233,"x":21.9797},{"n":"Aibonito","c":"Puerto Rico","y":18.1398,"x":-66.2659},{"n":"Winters","c":"United States","y":38.532,"x":-121.9781},{"n":"Ruschlikon","c":"Switzerland","y":47.3081,"x":8.5542},{"n":"Breckenridge","c":"United States","y":39.4995,"x":-106.0433},{"n":"Interlaken","c":"United States","y":36.9505,"x":-121.7363},{"n":"Soncino","c":"Italy","y":45.4,"x":9.8667},{"n":"Sarandi del Yi","c":"Uruguay","y":-33.3442,"x":-55.6313},{"n":"Calau","c":"Germany","y":51.7458,"x":13.9508},{"n":"Makushino","c":"Russia","y":55.2,"x":67.25},{"n":"Strathmore","c":"United States","y":40.4018,"x":-74.2193},{"n":"Bubikon","c":"Switzerland","y":47.2694,"x":8.8203},{"n":"Curtarolo","c":"Italy","y":45.5167,"x":11.8333},{"n":"Apuarema","c":"Brazil","y":-13.8558,"x":-39.7439},{"n":"Ban Phue","c":"Thailand","y":17.6874,"x":102.4756},{"n":"Curral de Dentro","c":"Brazil","y":-15.9378,"x":-41.8439},{"n":"Seville","c":"United States","y":41.0208,"x":-81.8671},{"n":"Reisbach","c":"Germany","y":48.5667,"x":12.6333},{"n":"Rainford","c":"United Kingdom","y":53.503,"x":-2.783},{"n":"Contes","c":"France","y":43.8119,"x":7.3139},{"n":"Zavareh","c":"Iran","y":33.4486,"x":52.4933},{"n":"Umm Walad","c":"Syria","y":32.6578,"x":36.4319},{"n":"Ibirajuba","c":"Brazil","y":-8.5808,"x":-36.1789},{"n":"Budesti","c":"Romania","y":44.23,"x":26.45},{"n":"Collie","c":"Australia","y":-33.363,"x":116.156},{"n":"Villa General Belgrano","c":"Argentina","y":-31.9667,"x":-64.5667},{"n":"San Zenone","c":"Italy","y":45.7833,"x":11.8333},{"n":"Benningen am Neckar","c":"Germany","y":48.945,"x":9.2425},{"n":"Kenai","c":"United States","y":60.5619,"x":-151.1985},{"n":"Santana","c":"Colombia","y":6.0572,"x":-73.4811},{"n":"Carnegie","c":"United States","y":40.408,"x":-80.0861},{"n":"Aubrey","c":"United States","y":33.2872,"x":-96.9622},{"n":"Monte Alegre do Sul","c":"Brazil","y":-22.68,"x":-46.68},{"n":"Carnago","c":"Italy","y":45.7167,"x":8.8333},{"n":"Irapua","c":"Brazil","y":-21.2794,"x":-49.4089},{"n":"Oberglatt","c":"Switzerland","y":47.4775,"x":8.52},{"n":"Sarandi Grande","c":"Uruguay","y":-33.725,"x":-56.3303},{"n":"Hook","c":"United Kingdom","y":51.2773,"x":-0.9633},{"n":"Castro del Rio","c":"Spain","y":37.6833,"x":-4.4667},{"n":"Pittston","c":"United States","y":41.3274,"x":-75.7885},{"n":"Marcellina","c":"Italy","y":42.0236,"x":12.8069},{"n":"Coulounieix","c":"France","y":45.1864,"x":0.6914},{"n":"Benahavis","c":"Spain","y":36.519,"x":-5.0454},{"n":"Saint-Benoit","c":"France","y":46.5497,"x":0.3417},{"n":"Kinvere","c":"United Kingdom","y":52.4488,"x":-2.228},{"n":"Santana","c":"Portugal","y":32.8,"x":-16.8667},{"n":"Santa Ana","c":"Guatemala","y":16.8069,"x":-89.8272},{"n":"Castellalto","c":"Italy","y":42.6771,"x":13.8178},{"n":"Santa Maria del Oro","c":"Mexico","y":25.9333,"x":-105.3667},{"n":"Abatia","c":"Brazil","y":-23.3039,"x":-50.3128},{"n":"Deols","c":"France","y":46.83,"x":1.7058},{"n":"Pyhaselka","c":"Finland","y":62.4333,"x":29.9694},{"n":"Allstedt","c":"Germany","y":51.4,"x":11.3833},{"n":"Rochefort-du-Gard","c":"France","y":43.9744,"x":4.6903},{"n":"Waltham","c":"United Kingdom","y":53.5165,"x":-0.1021},{"n":"Auxonne","c":"France","y":47.1939,"x":5.3878},{"n":"Behren-les-Forbach","c":"France","y":49.1739,"x":6.9347},{"n":"Mirabella Eclano","c":"Italy","y":41.0458,"x":14.9997},{"n":"Gerolstein","c":"Germany","y":50.2239,"x":6.6614},{"n":"Bornos","c":"Spain","y":36.8167,"x":-5.7333},{"n":"Malaya Purga","c":"Russia","y":56.5542,"x":52.9953},{"n":"Vergato","c":"Italy","y":44.2833,"x":11.1167},{"n":"Barge","c":"Italy","y":44.7333,"x":7.3167},{"n":"Reinsdorf","c":"Germany","y":50.6975,"x":12.5589},{"n":"Harzgerode","c":"Germany","y":51.6417,"x":11.1428},{"n":"Parai","c":"Brazil","y":-28.5939,"x":-51.7858},{"n":"Eisfeld","c":"Germany","y":50.4167,"x":10.9167},{"n":"Jaszarokszallas","c":"Hungary","y":47.6333,"x":19.9833},{"n":"Pratola Peligna","c":"Italy","y":42.0992,"x":13.8747},{"n":"San Jose de Buan","c":"Philippines","y":12.05,"x":125.0667},{"n":"Withamsville","c":"United States","y":39.0628,"x":-84.2808},{"n":"Benatky nad Jizerou","c":"Czechia","y":50.2909,"x":14.8235},{"n":"Mattighofen","c":"Austria","y":48.1067,"x":13.1494},{"n":"Kaufman","c":"United States","y":32.5769,"x":-96.316},{"n":"Panciu","c":"Romania","y":45.91,"x":27.09},{"n":"Saarburg","c":"Germany","y":49.6092,"x":6.5503},{"n":"Araguapaz","c":"Brazil","y":-15.0908,"x":-50.6319},{"n":"Claro dos Pocoes","c":"Brazil","y":-17.08,"x":-44.2089},{"n":"Neuhofen","c":"Germany","y":49.4225,"x":8.4281},{"n":"Saint-Didier-au-Mont-d'Or","c":"France","y":45.8106,"x":4.7986},{"n":"Mhlume","c":"Swaziland","y":-26.0333,"x":31.85},{"n":"Ouirgane","c":"Morocco","y":31.1755,"x":-8.0782},{"n":"Alpiarca","c":"Portugal","y":39.2593,"x":-8.585},{"n":"Martignas-sur-Jalle","c":"France","y":44.8406,"x":-0.7756},{"n":"Dongping","c":"China","y":24.7352,"x":113.1849},{"n":"Jouamaa","c":"Morocco","y":35.65,"x":-5.6833},{"n":"Escalquens","c":"France","y":43.5178,"x":1.5608},{"n":"Lodeve","c":"France","y":43.7317,"x":3.3194},{"n":"Peniscola","c":"Spain","y":40.3592,"x":0.4075},{"n":"Oberwart","c":"Austria","y":47.2878,"x":16.2031},{"n":"Rubelita","c":"Brazil","y":-16.4078,"x":-42.2628},{"n":"Chobham","c":"United Kingdom","y":51.348,"x":-0.604},{"n":"Arneiroz","c":"Brazil","y":-6.3239,"x":-40.1608},{"n":"Milan","c":"United States","y":42.0816,"x":-83.6853},{"n":"Crewkerne","c":"United Kingdom","y":50.8803,"x":-2.7939},{"n":"Q'vareli","c":"Georgia","y":41.95,"x":45.8167},{"n":"Turzovka","c":"Slovakia","y":49.405,"x":18.6253},{"n":"Ertis","c":"Kazakhstan","y":53.3167,"x":75.45},{"n":"Drummond/North Elmsley","c":"Canada","y":44.9667,"x":-76.2},{"n":"Vigarano Mainarda","c":"Italy","y":44.85,"x":11.5},{"n":"Fivizzano","c":"Italy","y":44.2333,"x":10.1167},{"n":"Rhinebeck","c":"United States","y":41.9276,"x":-73.898},{"n":"Oroville East","c":"United States","y":39.4947,"x":-121.4866},{"n":"Estes Park","c":"United States","y":40.3699,"x":-105.5216},{"n":"Gerbrunn","c":"Germany","y":49.7753,"x":9.9936},{"n":"Santa Rosa de Rio Primero","c":"Argentina","y":-31.15,"x":-63.3833},{"n":"Vega de San Mateo","c":"Spain","y":28.0106,"x":-15.5325},{"n":"Kemijarvi","c":"Finland","y":66.715,"x":27.4306},{"n":"Waite Park","c":"United States","y":45.5313,"x":-94.2528},{"n":"Reszel","c":"Poland","y":54.0504,"x":21.1458},{"n":"Beaugency","c":"France","y":47.7783,"x":1.6317},{"n":"Antigo","c":"United States","y":45.1413,"x":-89.1556},{"n":"Jamsankoski","c":"Finland","y":61.9181,"x":25.1708},{"n":"Rosporden","c":"France","y":47.9606,"x":-3.8347},{"n":"Coronel Bicaco","c":"Brazil","y":-27.7158,"x":-53.7008},{"n":"Zelo Buon Persico","c":"Italy","y":45.4133,"x":9.4336},{"n":"Loffingen","c":"Germany","y":47.8839,"x":8.3436},{"n":"Azuaga","c":"Spain","y":38.2589,"x":-5.6778},{"n":"Binuangan","c":"Philippines","y":8.9167,"x":124.8},{"n":"Longridge","c":"United Kingdom","y":53.831,"x":-2.597},{"n":"Saint-Thibault-des-Vignes","c":"France","y":48.8692,"x":2.6886},{"n":"Forsyth","c":"United States","y":36.686,"x":-93.1016},{"n":"San Diego","c":"Guatemala","y":14.7833,"x":-89.7833},{"n":"Jerico","c":"Brazil","y":-6.5539,"x":-37.8089},{"n":"McGregor","c":"United States","y":26.5611,"x":-81.9134},{"n":"Tenterden","c":"United Kingdom","y":51.0696,"x":0.6898},{"n":"San Giorgio di Nogaro","c":"Italy","y":45.8333,"x":13.2},{"n":"Vitulazio","c":"Italy","y":41.1667,"x":14.2167},{"n":"Al Orjane","c":"Morocco","y":33.4,"x":-3.7167},{"n":"Cheraw","c":"United States","y":34.6955,"x":-79.9085},{"n":"Swainsboro","c":"United States","y":32.5866,"x":-82.3345},{"n":"Onil","c":"Spain","y":38.6333,"x":-0.6667},{"n":"Ebensee","c":"Austria","y":47.8122,"x":13.7731},{"n":"Nyiradony","c":"Hungary","y":47.6833,"x":21.9167},{"n":"Ondara","c":"Spain","y":38.8261,"x":0.0169},{"n":"Citta della Pieve","c":"Italy","y":42.9539,"x":12.0078},{"n":"Moutier","c":"Switzerland","y":47.2803,"x":7.3708},{"n":"Paulo Jacinto","c":"Brazil","y":-9.3658,"x":-36.37},{"n":"Ruisbroek","c":"Belgium","y":50.7903,"x":4.2975},{"n":"Wynne","c":"United States","y":35.2322,"x":-90.7894},{"n":"Dryden","c":"Canada","y":49.7833,"x":-92.8333},{"n":"Altbach","c":"Germany","y":48.7239,"x":9.3797},{"n":"Kryve Ozero","c":"Ukraine","y":47.9333,"x":30.3333},{"n":"Round Lake Park","c":"United States","y":42.3309,"x":-88.075},{"n":"Neufchateau","c":"Belgium","y":49.8411,"x":5.4353},{"n":"Villers-Saint-Paul","c":"France","y":49.2889,"x":2.4872},{"n":"Pulsnitz","c":"Germany","y":51.1817,"x":14.0131},{"n":"Gallneukirchen","c":"Austria","y":48.3531,"x":14.4158},{"n":"Lekkerkerk","c":"Netherlands","y":51.8972,"x":4.6828},{"n":"Korkmaskala","c":"Russia","y":43.0281,"x":47.2919},{"n":"Pium","c":"Brazil","y":-10.4428,"x":-49.1819},{"n":"Vico del Gargano","c":"Italy","y":41.85,"x":15.9564},{"n":"Quarryville","c":"United States","y":39.8957,"x":-76.1617},{"n":"Zlatograd","c":"Bulgaria","y":41.3797,"x":25.0928},{"n":"Belo Vale","c":"Brazil","y":-20.4078,"x":-44.0239},{"n":"Pedro Gomes","c":"Brazil","y":-18.1008,"x":-54.5519},{"n":"South Boston","c":"United States","y":36.7132,"x":-78.9135},{"n":"Callosa de Ensarria","c":"Spain","y":38.6514,"x":-0.1228},{"n":"Citrus Hills","c":"United States","y":28.887,"x":-82.4312},{"n":"Fort Frances","c":"Canada","y":48.6167,"x":-93.4},{"n":"Bad Wimpfen","c":"Germany","y":49.2306,"x":9.1631},{"n":"Zinat","c":"Morocco","y":35.4333,"x":-5.4},{"n":"Bang Pa-in","c":"Thailand","y":14.22,"x":100.5813},{"n":"Rosswein","c":"Germany","y":51.0667,"x":13.1833},{"n":"Khoroshiv","c":"Ukraine","y":50.6,"x":28.45},{"n":"Al Kafr","c":"Syria","y":32.6333,"x":36.6417},{"n":"Carneys Point","c":"United States","y":39.6967,"x":-75.4475},{"n":"Gerena","c":"Spain","y":37.517,"x":-6.15},{"n":"East Huntingdon","c":"United States","y":40.1416,"x":-79.5999},{"n":"Wading River","c":"United States","y":40.9464,"x":-72.823},{"n":"Tobarra","c":"Spain","y":38.5831,"x":-1.6831},{"n":"Fosso","c":"Italy","y":45.3833,"x":12.05},{"n":"Boqueirao do Leao","c":"Brazil","y":-29.3039,"x":-52.4289},{"n":"San Marco Evangelista","c":"Italy","y":41.0333,"x":14.3333},{"n":"Bilac","c":"Brazil","y":-21.4033,"x":-50.4706},{"n":"Barvikha","c":"Russia","y":55.7411,"x":37.2761},{"n":"Dighton","c":"United States","y":41.836,"x":-71.1552},{"n":"Sisteron","c":"France","y":44.19,"x":5.9464},{"n":"Branesti","c":"Romania","y":44.4576,"x":26.335},{"n":"Dolgoderevenskoye","c":"Russia","y":55.3444,"x":61.3422},{"n":"Lorqui","c":"Spain","y":38.0817,"x":-1.255},{"n":"Ensisheim","c":"France","y":47.8656,"x":7.3525},{"n":"Pluvigner","c":"France","y":47.7758,"x":-3.0103},{"n":"Payette","c":"United States","y":44.0788,"x":-116.9255},{"n":"Vlahita","c":"Romania","y":46.35,"x":25.53},{"n":"North Tamborine","c":"Australia","y":-27.9694,"x":153.1992},{"n":"Grove","c":"United States","y":36.593,"x":-94.7879},{"n":"Celorico da Beira","c":"Portugal","y":40.6333,"x":-7.4},{"n":"Gettysburg","c":"United States","y":39.8304,"x":-77.2339},{"n":"Sotomayor","c":"Spain","y":42.333,"x":-8.567},{"n":"Montecristo","c":"Mexico","y":15.7,"x":-92.6},{"n":"Langenlois","c":"Austria","y":48.4667,"x":15.6833},{"n":"Trostianets","c":"Ukraine","y":48.512,"x":29.2137},{"n":"Linas","c":"France","y":48.6333,"x":2.2672},{"n":"Chirnogi","c":"Romania","y":44.1167,"x":26.5833},{"n":"Welcome","c":"United States","y":34.8204,"x":-82.46},{"n":"La Sarre","c":"Canada","y":48.8,"x":-79.2},{"n":"Wick","c":"United Kingdom","y":58.454,"x":-3.089},{"n":"Vezzano Ligure","c":"Italy","y":44.1412,"x":9.8849},{"n":"Upper Milford","c":"United States","y":40.4934,"x":-75.5192},{"n":"Solesino","c":"Italy","y":45.1667,"x":11.75},{"n":"Campeni","c":"Romania","y":46.3625,"x":23.0456},{"n":"Shelburne","c":"United States","y":44.3905,"x":-73.2413},{"n":"Corte Franca","c":"Italy","y":45.6333,"x":9.9833},{"n":"Kasson","c":"United States","y":44.0333,"x":-92.7482},{"n":"Frydlant","c":"Czechia","y":50.9215,"x":15.0799},{"n":"Granite Falls","c":"United States","y":48.0874,"x":-121.9706},{"n":"Creston","c":"United States","y":41.0597,"x":-94.365},{"n":"Kingsbridge","c":"United Kingdom","y":50.2833,"x":-3.7765},{"n":"Clear Lake","c":"United States","y":43.1346,"x":-93.374},{"n":"Jacui","c":"Brazil","y":-21.0169,"x":-46.7408},{"n":"Bad Fussing","c":"Germany","y":48.3508,"x":13.3136},{"n":"Aussonne","c":"France","y":43.6839,"x":1.3197},{"n":"Murwillumbah","c":"Australia","y":-28.3333,"x":153.3833},{"n":"Trail","c":"Canada","y":49.095,"x":-117.71},{"n":"Senador Sa","c":"Brazil","y":-3.3508,"x":-40.4628},{"n":"Belinskiy","c":"Russia","y":52.9667,"x":43.4167},{"n":"Nicolosi","c":"Italy","y":37.6167,"x":15.0167},{"n":"Quievrechain","c":"France","y":50.3953,"x":3.6669},{"n":"Serrania","c":"Brazil","y":-21.5478,"x":-46.04},{"n":"Dittelbrunn","c":"Germany","y":50.095,"x":10.2094},{"n":"Steele Creek","c":"United States","y":64.9295,"x":-147.3955},{"n":"Omer","c":"Israel","y":31.2683,"x":34.8489},{"n":"San Filippo della Mela","c":"Italy","y":38.1667,"x":15.2667},{"n":"Oundle","c":"United Kingdom","y":52.48,"x":-0.472},{"n":"Chandler","c":"Canada","y":48.35,"x":-64.6833},{"n":"Pignan","c":"France","y":43.5842,"x":3.7619},{"n":"Stone Mills","c":"Canada","y":44.45,"x":-76.9167},{"n":"Villa d'Alme","c":"Italy","y":45.75,"x":9.6167},{"n":"Thornbury","c":"United States","y":39.9182,"x":-75.5164},{"n":"Sao Jose da Lagoa Tapada","c":"Brazil","y":-6.9408,"x":-38.1619},{"n":"Spinetoli","c":"Italy","y":42.8887,"x":13.7731},{"n":"Novoselytsia","c":"Ukraine","y":48.2167,"x":26.2667},{"n":"Melissano","c":"Italy","y":39.9667,"x":18.1333},{"n":"Fort Scott","c":"United States","y":37.8283,"x":-94.7038},{"n":"Baienfurt","c":"Germany","y":47.8269,"x":9.6517},{"n":"Pukalani","c":"United States","y":20.8329,"x":-156.3415},{"n":"Calimanesti","c":"Romania","y":45.2392,"x":24.3433},{"n":"Cee","c":"Spain","y":42.95,"x":-9.1667},{"n":"Hornsby Bend","c":"United States","y":30.245,"x":-97.5833},{"n":"Dermbach","c":"Germany","y":50.7164,"x":10.1197},{"n":"Loten","c":"Norway","y":60.8253,"x":11.3908},{"n":"Kremmen","c":"Germany","y":52.7667,"x":13.0331},{"n":"Markneukirchen","c":"Germany","y":50.3167,"x":12.3167},{"n":"Kingsbury","c":"United Kingdom","y":52.5614,"x":-1.6917},{"n":"Sarnico","c":"Italy","y":45.6667,"x":9.95},{"n":"Cotignola","c":"Italy","y":44.3833,"x":11.9333},{"n":"Cootamundra","c":"Australia","y":-34.6483,"x":148.0344},{"n":"Chapultenango","c":"Mexico","y":17.3333,"x":-93.1333},{"n":"Alto Paraiso de Goias","c":"Brazil","y":-14.1328,"x":-47.51},{"n":"Conego Marinho","c":"Brazil","y":-15.2939,"x":-44.4178},{"n":"Dykanka","c":"Ukraine","y":49.8222,"x":34.5341},{"n":"Plaistow","c":"United States","y":42.8403,"x":-71.096},{"n":"Lamarque","c":"Argentina","y":-39.4236,"x":-65.7},{"n":"Munnerstadt","c":"Germany","y":50.2526,"x":10.1966},{"n":"Calden","c":"Germany","y":51.4094,"x":9.4019},{"n":"Pressbaum","c":"Austria","y":48.1833,"x":16.0825},{"n":"Kahla","c":"Germany","y":50.8008,"x":11.5875},{"n":"Treherbert","c":"United Kingdom","y":51.6722,"x":-3.5306},{"n":"Polk","c":"United States","y":40.9291,"x":-75.5022},{"n":"Caluso","c":"Italy","y":45.3,"x":7.8833},{"n":"Las Lomitas","c":"Argentina","y":-24.7072,"x":-60.5944},{"n":"Charikot","c":"Nepal","y":27.6667,"x":86.0333},{"n":"Robbiate","c":"Italy","y":45.6833,"x":9.4333},{"n":"Sao Miguel das Missoes","c":"Brazil","y":-28.5471,"x":-54.5506},{"n":"Jati","c":"Brazil","y":-7.6858,"x":-39.0158},{"n":"Boultham","c":"United Kingdom","y":53.214,"x":-0.5561},{"n":"Migennes","c":"France","y":47.9647,"x":3.5167},{"n":"Robinwood","c":"United States","y":39.6266,"x":-77.663},{"n":"Staritsa","c":"Russia","y":56.5075,"x":34.9356},{"n":"Xavantina","c":"Brazil","y":-21.3028,"x":-52.8308},{"n":"Sant'Angelo di Piove di Sacco","c":"Italy","y":45.3456,"x":12.0072},{"n":"Teresva","c":"Ukraine","y":48,"x":23.6992},{"n":"Lavras do Sul","c":"Brazil","y":-30.8128,"x":-53.895},{"n":"Palmeiropolis","c":"Brazil","y":-13.0439,"x":-48.4019},{"n":"El Paso","c":"Spain","y":28.6513,"x":-17.8806},{"n":"Sonnino","c":"Italy","y":41.4145,"x":13.2414},{"n":"Manazuru","c":"Japan","y":35.1583,"x":139.1372},{"n":"Hardegsen","c":"Germany","y":51.6528,"x":9.8322},{"n":"Jassans-Riottier","c":"France","y":45.9856,"x":4.7567},{"n":"Ankum","c":"Germany","y":52.5433,"x":7.8708},{"n":"San Miguel Siguila","c":"Guatemala","y":14.9,"x":-91.6167},{"n":"Hopsten","c":"Germany","y":52.3806,"x":7.6},{"n":"Wissembourg","c":"France","y":49.0375,"x":7.9461},{"n":"Hongliuyuan","c":"China","y":41.103,"x":95.5036},{"n":"Sebastopol","c":"United States","y":38.4001,"x":-122.8276},{"n":"Santa Giustina in Colle","c":"Italy","y":45.5667,"x":11.9},{"n":"Coromoro","c":"Colombia","y":6.295,"x":-73.0406},{"n":"Upper Hanover","c":"United States","y":40.3954,"x":-75.5106},{"n":"Ilminster","c":"United Kingdom","y":50.9262,"x":-2.9114},{"n":"Mezzolombardo","c":"Italy","y":46.2097,"x":11.0978},{"n":"Carosino","c":"Italy","y":40.4667,"x":17.4},{"n":"Webster City","c":"United States","y":42.4623,"x":-93.8167},{"n":"Treharris","c":"United Kingdom","y":51.6689,"x":-3.31},{"n":"Wivenhoe","c":"United Kingdom","y":51.8667,"x":0.9625},{"n":"Adro","c":"Italy","y":45.6179,"x":9.9625},{"n":"Plain City","c":"United States","y":41.307,"x":-112.0877},{"n":"Indiantown","c":"United States","y":27.0375,"x":-80.4913},{"n":"Staranzano","c":"Italy","y":45.8,"x":13.5},{"n":"Fort Dix","c":"United States","y":40.006,"x":-74.6089},{"n":"Gali","c":"Georgia","y":42.6333,"x":41.7333},{"n":"Paty","c":"Hungary","y":47.5167,"x":18.8333},{"n":"Horovice","c":"Czechia","y":49.8361,"x":13.9027},{"n":"Southwell","c":"United Kingdom","y":53.078,"x":-0.955},{"n":"Coimbra","c":"Brazil","y":-20.8569,"x":-42.8028},{"n":"South-West Oxford","c":"Canada","y":42.95,"x":-80.8},{"n":"Acton Vale","c":"Canada","y":45.65,"x":-72.5667},{"n":"Uvaly","c":"Czechia","y":50.074,"x":14.7309},{"n":"Saltara","c":"Italy","y":43.7534,"x":12.8976},{"n":"Inakadate","c":"Japan","y":40.6317,"x":140.55},{"n":"Juranda","c":"Brazil","y":-24.42,"x":-52.8428},{"n":"Villamayor","c":"Spain","y":41.0008,"x":-5.6897},{"n":"Tervel","c":"Bulgaria","y":43.75,"x":27.4},{"n":"Cognin","c":"France","y":45.5619,"x":5.8972},{"n":"Boulazac","c":"France","y":45.1819,"x":0.7631},{"n":"Pinon Hills","c":"United States","y":34.4438,"x":-117.6214},{"n":"Jrvezh","c":"Armenia","y":40.19,"x":44.59},{"n":"Honfleur","c":"France","y":49.4189,"x":0.2331},{"n":"Balaruc-les-Bains","c":"France","y":43.4408,"x":3.6772},{"n":"Lagoa Salgada","c":"Brazil","y":-6.1339,"x":-35.4939},{"n":"Thurmont","c":"United States","y":39.621,"x":-77.4076},{"n":"Old Jefferson","c":"United States","y":30.3776,"x":-91.006},{"n":"Donje Zabare","c":"Kosovo","y":42.8714,"x":20.8411},{"n":"Groitzsch","c":"Germany","y":51.1556,"x":12.2806},{"n":"Borgetto","c":"Italy","y":38.05,"x":13.15},{"n":"Beaupreau","c":"France","y":47.2019,"x":-0.9944},{"n":"North Patchogue","c":"United States","y":40.7833,"x":-73.0234},{"n":"Vosendorf","c":"Austria","y":48.1167,"x":16.3333},{"n":"Homecourt","c":"France","y":49.2231,"x":5.9928},{"n":"San Antonio","c":"Puerto Rico","y":18.4468,"x":-66.3002},{"n":"Lamar","c":"United States","y":38.0739,"x":-102.6153},{"n":"Catigua","c":"Brazil","y":-21.05,"x":-49.0667},{"n":"Chehalis","c":"United States","y":46.6638,"x":-122.965},{"n":"Roccasecca","c":"Italy","y":41.55,"x":13.6667},{"n":"Al Mazra`ah","c":"Syria","y":32.7828,"x":36.4833},{"n":"Vapniarka","c":"Ukraine","y":48.5333,"x":28.75},{"n":"Etowah","c":"United States","y":35.3061,"x":-82.5902},{"n":"Villa Diaz Ordaz","c":"Mexico","y":16.9981,"x":-96.4314},{"n":"Intorsura Buzaului","c":"Romania","y":45.6728,"x":26.0342},{"n":"Solone","c":"Ukraine","y":48.2054,"x":34.8686},{"n":"Ipumirim","c":"Brazil","y":-27.0769,"x":-52.1358},{"n":"Sieghartskirchen","c":"Austria","y":48.2539,"x":16.0125},{"n":"Bromont","c":"Canada","y":45.3167,"x":-72.65},{"n":"Guisona","c":"Spain","y":41.7847,"x":1.288},{"n":"Sykkylven","c":"Norway","y":62.3756,"x":6.6442},{"n":"Seefeld","c":"Germany","y":48.0333,"x":11.2},{"n":"Waller","c":"United States","y":47.2035,"x":-122.3699},{"n":"Sao Jose dos Brasilios","c":"Brazil","y":-5.0508,"x":-44.5839},{"n":"Askarovo","c":"Russia","y":53.3333,"x":58.5167},{"n":"Mikulov","c":"Czechia","y":48.8056,"x":16.6378},{"n":"Chippewa","c":"United States","y":40.7614,"x":-80.3791},{"n":"Beckwith","c":"Canada","y":45.0833,"x":-76.0667},{"n":"Flintbek","c":"Germany","y":54.2433,"x":10.0633},{"n":"Inocencia","c":"Brazil","y":-19.7258,"x":-51.93},{"n":"Scotia","c":"United States","y":42.8321,"x":-73.9607},{"n":"Big Flats","c":"United States","y":42.1387,"x":-76.9138},{"n":"Ferno","c":"Italy","y":45.6203,"x":8.7636},{"n":"East Manchester","c":"United States","y":40.0567,"x":-76.7019},{"n":"Tecuanipan","c":"Mexico","y":19.0167,"x":-98.4},{"n":"Porec","c":"Croatia","y":45.2167,"x":13.5833},{"n":"Orbottyan","c":"Hungary","y":47.6872,"x":19.2832},{"n":"Lindoia","c":"Brazil","y":-22.5231,"x":-46.65},{"n":"Oroso","c":"Spain","y":42.9833,"x":-8.4333},{"n":"Egly","c":"France","y":48.5806,"x":2.2239},{"n":"Derendingen","c":"Switzerland","y":47.1919,"x":7.5899},{"n":"Calimera","c":"Italy","y":40.25,"x":18.2833},{"n":"Saint-Alban","c":"France","y":43.6919,"x":1.4147},{"n":"Sahuaripa","c":"Mexico","y":29.05,"x":-109.2333},{"n":"Vorchdorf","c":"Austria","y":48.0042,"x":13.9242},{"n":"Devils Lake","c":"United States","y":48.1131,"x":-98.875},{"n":"River Oaks","c":"United States","y":32.7767,"x":-97.3984},{"n":"Mapello","c":"Italy","y":45.7089,"x":9.5478},{"n":"Mitsamiouli","c":"Comoros","y":-11.3819,"x":43.3},{"n":"Bairnsdale","c":"Australia","y":-37.8333,"x":147.6167},{"n":"Beni Aissi","c":"Algeria","y":29.6,"x":0.25},{"n":"Saint-Aubin-de-Medoc","c":"France","y":44.9119,"x":-0.7253},{"n":"Goderich","c":"Canada","y":43.7333,"x":-81.7},{"n":"Inden","c":"Germany","y":50.8467,"x":6.3578},{"n":"Waupaca","c":"United States","y":44.3506,"x":-89.0719},{"n":"Wapato","c":"United States","y":46.4435,"x":-120.4215},{"n":"Sappemeer","c":"Netherlands","y":53.1633,"x":6.7767},{"n":"Chernyy Yar","c":"Russia","y":48.0603,"x":46.1086},{"n":"Saint Agnes","c":"United Kingdom","y":50.312,"x":-5.204},{"n":"Dzilam Gonzalez","c":"Mexico","y":21.28,"x":-88.9292},{"n":"South Beloit","c":"United States","y":42.4822,"x":-89.0248},{"n":"Povegliano Veronese","c":"Italy","y":45.3473,"x":10.8806},{"n":"Ollon","c":"Switzerland","y":46.2973,"x":6.9935},{"n":"Oulainen","c":"Finland","y":64.2667,"x":24.8167},{"n":"Pederobba","c":"Italy","y":45.8739,"x":11.9475},{"n":"Kula","c":"United States","y":20.7706,"x":-156.3284},{"n":"Yenotayevka","c":"Russia","y":47.2436,"x":47.0328},{"n":"Tocantinia","c":"Brazil","y":-9.5639,"x":-48.3769},{"n":"Broadview","c":"United States","y":41.8584,"x":-87.8562},{"n":"Brisighella","c":"Italy","y":44.2167,"x":11.7667},{"n":"Naro","c":"Italy","y":37.2925,"x":13.7934},{"n":"Cushing","c":"United States","y":35.9798,"x":-96.7602},{"n":"Astigarraga","c":"Spain","y":43.2833,"x":-1.95},{"n":"La Tronche","c":"France","y":45.2064,"x":5.7403},{"n":"Divion","c":"France","y":50.4722,"x":2.5014},{"n":"Pike Creek","c":"United States","y":39.7485,"x":-75.6953},{"n":"Allegany","c":"United States","y":42.0869,"x":-78.5212},{"n":"Pedrao","c":"Brazil","y":-12.15,"x":-38.65},{"n":"Teublitz","c":"Germany","y":49.2208,"x":12.0853},{"n":"Gaoual","c":"Guinea","y":11.754,"x":-13.213},{"n":"Senatobia","c":"United States","y":34.6081,"x":-89.9762},{"n":"Mattersburg","c":"Austria","y":47.7381,"x":16.3969},{"n":"Lajeado Novo","c":"Brazil","y":-6.1889,"x":-47.035},{"n":"Pleinfeld","c":"Germany","y":49.1,"x":10.9667},{"n":"Kokemaki","c":"Finland","y":61.2556,"x":22.3486},{"n":"Tarso","c":"Colombia","y":5.865,"x":-75.8225},{"n":"Sioux Center","c":"United States","y":43.0748,"x":-96.1707},{"n":"Mordelles","c":"France","y":48.0747,"x":-1.8458},{"n":"Lagoa de Pedra","c":"Brazil","y":-6.1489,"x":-35.4378},{"n":"Escalon","c":"United States","y":37.7912,"x":-120.9982},{"n":"Abira","c":"Japan","y":42.7628,"x":141.8181},{"n":"Hnust'a","c":"Slovakia","y":48.5736,"x":19.9531},{"n":"Stromstad","c":"Sweden","y":58.9441,"x":11.1864},{"n":"Turkheim","c":"Germany","y":48.0667,"x":10.6167},{"n":"Broumov","c":"Czechia","y":50.5857,"x":16.3319},{"n":"Omitlan de Juarez","c":"Mexico","y":20.1697,"x":-98.6478},{"n":"Emerson","c":"United States","y":40.9748,"x":-74.0239},{"n":"Dolni Chiflik","c":"Bulgaria","y":42.9931,"x":27.7158},{"n":"Mglin","c":"Russia","y":53.0611,"x":32.8483},{"n":"Hrinova","c":"Slovakia","y":48.5667,"x":19.5167},{"n":"Ambalema","c":"Colombia","y":4.7817,"x":-74.7639},{"n":"Bernardsville","c":"United States","y":40.7268,"x":-74.5918},{"n":"Hurbanovo","c":"Slovakia","y":47.8761,"x":18.1972},{"n":"Beni Oual Sehira","c":"Morocco","y":34.4333,"x":-5.4},{"n":"Caribou","c":"United States","y":46.8662,"x":-67.9919},{"n":"Tuttle","c":"United States","y":35.3069,"x":-97.7562},{"n":"Sulzbach am Main","c":"Germany","y":49.9078,"x":9.1567},{"n":"Uthumphon Phisai","c":"Thailand","y":15.097,"x":104.1643},{"n":"Velykyy Bereznyy","c":"Ukraine","y":48.8922,"x":22.4586},{"n":"Mhamid el Rhozlane","c":"Morocco","y":29.8222,"x":-5.7208},{"n":"Cavaria","c":"Italy","y":45.7,"x":8.8},{"n":"Grosskarolinenfeld","c":"Germany","y":47.8908,"x":12.0797},{"n":"Renchen","c":"Germany","y":48.5858,"x":8.0106},{"n":"Stolzenau","c":"Germany","y":52.5167,"x":9.0667},{"n":"Hang Dong","c":"Thailand","y":18.6886,"x":98.9193},{"n":"Bilovec","c":"Czechia","y":49.7564,"x":18.0159},{"n":"Palmyra","c":"United States","y":43.0834,"x":-77.1917},{"n":"LaFayette","c":"United States","y":34.7088,"x":-85.2815},{"n":"Romaniv","c":"Ukraine","y":50.1517,"x":27.9392},{"n":"Amerongen","c":"Netherlands","y":52.0025,"x":5.4608},{"n":"Almas","c":"Brazil","y":-11.5739,"x":-47.17},{"n":"Jenbach","c":"Austria","y":47.3933,"x":11.7767},{"n":"Strasswalchen","c":"Austria","y":47.98,"x":13.2547},{"n":"Castello di Godego","c":"Italy","y":45.7,"x":11.8833},{"n":"Paulo Lopes","c":"Brazil","y":-27.9619,"x":-48.6839},{"n":"Denham","c":"United Kingdom","y":51.563,"x":-0.499},{"n":"La Rambla","c":"Spain","y":37.6,"x":-4.7333},{"n":"Castel Madama","c":"Italy","y":41.9747,"x":12.8672},{"n":"Ait Hammou","c":"Morocco","y":32.2156,"x":-8.1733},{"n":"Ipuacu","c":"Brazil","y":-26.6308,"x":-52.455},{"n":"Joshua Tree","c":"United States","y":34.1236,"x":-116.3128},{"n":"Pakefield","c":"United Kingdom","y":52.451,"x":1.728},{"n":"Passirano","c":"Italy","y":45.6,"x":10.0667},{"n":"Ras Kebdana","c":"Morocco","y":35.1333,"x":-2.4167},{"n":"Burton Latimer","c":"United Kingdom","y":52.365,"x":-0.678},{"n":"Camerano","c":"Italy","y":43.5277,"x":13.5526},{"n":"Grodig","c":"Austria","y":47.7394,"x":13.0361},{"n":"Sao Pedro do Turvo","c":"Brazil","y":-22.7469,"x":-49.74},{"n":"Kotake","c":"Japan","y":33.6925,"x":130.7128},{"n":"Saint-Berthevin","c":"France","y":48.0683,"x":-0.8258},{"n":"Ait Hadi","c":"Morocco","y":31.3942,"x":-8.7725},{"n":"Leola","c":"United States","y":40.0915,"x":-76.1891},{"n":"Plympton-Wyoming","c":"Canada","y":43.0167,"x":-82.0833},{"n":"Central Huron","c":"Canada","y":43.63,"x":-81.57},{"n":"Le Mesnil-Saint-Denis","c":"France","y":48.7436,"x":1.9631},{"n":"Nykarleby","c":"Finland","y":63.5167,"x":22.5333},{"n":"Inimutaba","c":"Brazil","y":-18.7289,"x":-44.3608},{"n":"Petite-Rosselle","c":"France","y":49.2117,"x":6.8575},{"n":"Umari","c":"Brazil","y":-6.6478,"x":-38.7},{"n":"Plumas Lake","c":"United States","y":38.9924,"x":-121.558},{"n":"Elorrio","c":"Spain","y":43.1306,"x":-2.5428},{"n":"Banchory","c":"United Kingdom","y":57.055,"x":-2.49},{"n":"Fuzesabony","c":"Hungary","y":47.751,"x":20.409},{"n":"Florestal","c":"Brazil","y":-19.8889,"x":-44.4328},{"n":"Kunhegyes","c":"Hungary","y":47.37,"x":20.6308},{"n":"Rade","c":"Norway","y":59.3489,"x":10.855},{"n":"Barr","c":"France","y":48.4081,"x":7.4497},{"n":"San Nicolas","c":"Spain","y":27.9826,"x":-15.7799},{"n":"Nakata","c":"Japan","y":30.5331,"x":130.9586},{"n":"Gaillon","c":"France","y":49.1603,"x":1.3358},{"n":"Bad Sachsa","c":"Germany","y":51.5969,"x":10.5522},{"n":"Hales Corners","c":"United States","y":42.941,"x":-88.0491},{"n":"Orbe","c":"Switzerland","y":46.7245,"x":6.5322},{"n":"Schaghticoke","c":"United States","y":42.885,"x":-73.6115},{"n":"Rigaud","c":"Canada","y":45.4833,"x":-74.3},{"n":"Hughson","c":"United States","y":37.602,"x":-120.866},{"n":"Kleinmond","c":"South Africa","y":-34.35,"x":19.0333},{"n":"Scappoose","c":"United States","y":45.7564,"x":-122.8771},{"n":"Perros-Guirec","c":"France","y":48.8133,"x":-3.4433},{"n":"Inami","c":"Japan","y":33.8183,"x":135.2181},{"n":"Urraween","c":"Australia","y":-25.2955,"x":152.8219},{"n":"McCook","c":"United States","y":40.2046,"x":-100.6214},{"n":"East Fallowfield","c":"United States","y":39.9508,"x":-75.8185},{"n":"La Alianza","c":"Honduras","y":13.5167,"x":-87.7167},{"n":"Campofelice di Roccella","c":"Italy","y":37.9833,"x":13.8833},{"n":"Brejinho","c":"Brazil","y":-6.1917,"x":-35.3583},{"n":"Dairago","c":"Italy","y":45.57,"x":8.8664},{"n":"Schutterwald","c":"Germany","y":48.4583,"x":7.8831},{"n":"Sinzing","c":"Germany","y":48.9911,"x":12.0347},{"n":"Moema","c":"Brazil","y":-19.8428,"x":-45.4108},{"n":"Cormons","c":"Italy","y":45.95,"x":13.4667},{"n":"Lago Vista","c":"United States","y":30.4519,"x":-97.9908},{"n":"Columbia Falls","c":"United States","y":48.3708,"x":-114.1903},{"n":"Khoshk Bijar","c":"Iran","y":37.3747,"x":49.7575},{"n":"Curtici","c":"Romania","y":46.3419,"x":21.3061},{"n":"Sant'Agata Bolognese","c":"Italy","y":44.6667,"x":11.1333},{"n":"Dry Run","c":"United States","y":39.1049,"x":-84.3312},{"n":"Granito","c":"Brazil","y":-7.7158,"x":-39.615},{"n":"Rio d'Oeste","c":"Brazil","y":-27.1928,"x":-49.7969},{"n":"Durach","c":"Germany","y":47.7,"x":10.3333},{"n":"Shiranuka","c":"Japan","y":42.9561,"x":144.0717},{"n":"Sa Bot","c":"Thailand","y":15.2084,"x":100.834},{"n":"Kruhlaye","c":"Belarus","y":54.2479,"x":29.7966},{"n":"Nettersheim","c":"Germany","y":50.4925,"x":6.6297},{"n":"Lower Windsor","c":"United States","y":39.962,"x":-76.5362},{"n":"Quatigua","c":"Brazil","y":-23.5669,"x":-49.9139},{"n":"Meldorf","c":"Germany","y":54.0833,"x":9.0667},{"n":"Market Deeping","c":"United Kingdom","y":52.6776,"x":-0.3173},{"n":"Saujon","c":"France","y":45.6714,"x":-0.9278},{"n":"Llandudno Junction","c":"United Kingdom","y":53.284,"x":-3.809},{"n":"Porters Neck","c":"United States","y":34.2942,"x":-77.7695},{"n":"Gold River","c":"United States","y":38.6268,"x":-121.2488},{"n":"Assis Brasil","c":"Brazil","y":-10.9114,"x":-69.5825},{"n":"Sidi al Ghandour","c":"Morocco","y":33.8536,"x":-6.0597},{"n":"Magnanville","c":"France","y":48.9672,"x":1.6819},{"n":"Mondim de Basto","c":"Portugal","y":41.4,"x":-7.95},{"n":"Anina","c":"Romania","y":45.0917,"x":21.8533},{"n":"Barao do Triunfo","c":"Brazil","y":-30.3878,"x":-51.7339},{"n":"Delafield","c":"United States","y":43.072,"x":-88.3913},{"n":"Lossburg","c":"Germany","y":48.4111,"x":8.4514},{"n":"Nea Kallikrateia","c":"Greece","y":40.3139,"x":23.0633},{"n":"Burkardroth","c":"Germany","y":50.2719,"x":9.9894},{"n":"Dno","c":"Russia","y":57.8333,"x":29.9667},{"n":"Montecosaro","c":"Italy","y":43.3169,"x":13.6354},{"n":"Mount Horeb","c":"United States","y":43.006,"x":-89.7317},{"n":"Big Stone Gap","c":"United States","y":36.8626,"x":-82.7769},{"n":"Royalton","c":"United States","y":43.1522,"x":-78.5434},{"n":"Zane","c":"Italy","y":45.7167,"x":11.4667},{"n":"Brecknock","c":"United States","y":40.1977,"x":-76.027},{"n":"Pikeville","c":"United States","y":37.4807,"x":-82.5262},{"n":"Teteles de Avila Castillo","c":"Mexico","y":19.85,"x":-97.45},{"n":"Fehring","c":"Austria","y":46.9364,"x":16.0106},{"n":"Himberg","c":"Austria","y":48.0667,"x":16.4333},{"n":"Chauray","c":"France","y":46.3606,"x":-0.3772},{"n":"Baurci","c":"Moldova","y":46.0939,"x":28.6758},{"n":"Haddon Heights","c":"United States","y":39.8791,"x":-75.0645},{"n":"Page","c":"United States","y":36.9426,"x":-111.5071},{"n":"Maripi","c":"Colombia","y":5.5489,"x":-74.0067},{"n":"Bindlach","c":"Germany","y":49.9811,"x":11.6114},{"n":"Saint-Andre-de-la-Roche","c":"France","y":43.74,"x":7.2878},{"n":"Ortenburg","c":"Germany","y":48.5455,"x":13.2183},{"n":"North Hanover","c":"United States","y":40.0799,"x":-74.5869},{"n":"Phu Kradueng","c":"Thailand","y":16.8842,"x":101.8847},{"n":"La Ferte-Saint-Aubin","c":"France","y":47.7172,"x":1.9414},{"n":"Dummerstorf","c":"Germany","y":54.0167,"x":12.2167},{"n":"Abtsgmund","c":"Germany","y":48.8942,"x":10.0039},{"n":"Dumbraveni","c":"Romania","y":46.2275,"x":24.5758},{"n":"Konigsee","c":"Germany","y":50.6613,"x":11.0974},{"n":"Longpont-sur-Orge","c":"France","y":48.6428,"x":2.2917},{"n":"Albbruck","c":"Germany","y":47.5892,"x":8.1292},{"n":"Zlatna","c":"Romania","y":46.1589,"x":23.2211},{"n":"Drvar","c":"Bosnia And Herzegovina","y":44.3739,"x":16.3808},{"n":"Corte","c":"France","y":42.3056,"x":9.1506},{"n":"Yreka","c":"United States","y":41.7292,"x":-122.6312},{"n":"Peseux","c":"Switzerland","y":46.9955,"x":6.8895},{"n":"Marengo","c":"United States","y":42.2312,"x":-88.6153},{"n":"Louiseville","c":"Canada","y":46.25,"x":-72.95},{"n":"Laje de Muriae","c":"Brazil","y":-21.2058,"x":-42.1228},{"n":"Douar Brarba","c":"Morocco","y":34.45,"x":-4.2972},{"n":"Felizburgo","c":"Brazil","y":-16.6389,"x":-40.7608},{"n":"Slavkov u Brna","c":"Czechia","y":49.1533,"x":16.8765},{"n":"Bad Goisern","c":"Austria","y":47.6417,"x":13.6167},{"n":"Fairlawn","c":"United States","y":41.127,"x":-81.6215},{"n":"Goioxim","c":"Brazil","y":-25.195,"x":-51.9928},{"n":"Bischofswiesen","c":"Germany","y":47.6494,"x":12.9639},{"n":"Sao Joao Batista do Gloria","c":"Brazil","y":-20.6408,"x":-46.5058},{"n":"Pieve di Cento","c":"Italy","y":44.7131,"x":11.3083},{"n":"El Centenario","c":"Mexico","y":24.1025,"x":-110.4144},{"n":"Bernolakovo","c":"Slovakia","y":48.1992,"x":17.3003},{"n":"Adassil","c":"Morocco","y":31.1,"x":-8.4833},{"n":"Saintry-sur-Seine","c":"France","y":48.5908,"x":2.4969},{"n":"Crozon","c":"France","y":48.2453,"x":-4.4889},{"n":"Trombudo Central","c":"Brazil","y":-27.2989,"x":-49.79},{"n":"Tyrone","c":"United States","y":33.4753,"x":-84.5941},{"n":"Castlemaine","c":"Australia","y":-37.0636,"x":144.2172},{"n":"Chibougamau","c":"Canada","y":49.9167,"x":-74.3667},{"n":"Alpercata","c":"Brazil","y":-18.9739,"x":-41.97},{"n":"Swaffham","c":"United Kingdom","y":52.6529,"x":0.6843},{"n":"North Star","c":"United States","y":39.755,"x":-75.7331},{"n":"Nole","c":"Italy","y":45.25,"x":7.5833},{"n":"Purcell","c":"United States","y":35.018,"x":-97.3747},{"n":"Lambsheim","c":"Germany","y":49.5133,"x":8.2875},{"n":"Landen","c":"United States","y":39.3153,"x":-84.277},{"n":"Canicattini Bagni","c":"Italy","y":37.0333,"x":15.0667},{"n":"Sparanise","c":"Italy","y":41.1833,"x":14.1},{"n":"Vohenstrauss","c":"Germany","y":49.6167,"x":12.3333},{"n":"Tazoult","c":"Morocco","y":30.8075,"x":-7.7883},{"n":"Saint-Ismier","c":"France","y":45.2486,"x":5.8269},{"n":"Miranda do Douro","c":"Portugal","y":41.5,"x":-6.2667},{"n":"Villarejo de Salvanes","c":"Spain","y":40.1833,"x":-3.3167},{"n":"Curarrehue","c":"Chile","y":-39.35,"x":-71.5833},{"n":"Longiano","c":"Italy","y":44.0833,"x":12.3333},{"n":"Maracaja","c":"Brazil","y":-28.8469,"x":-49.4528},{"n":"Haslach im Kinzigtal","c":"Germany","y":48.2778,"x":8.0869},{"n":"Dos Palos","c":"United States","y":36.9854,"x":-120.6336},{"n":"Saint-Juery","c":"France","y":43.9486,"x":2.2094},{"n":"Chateaubourg","c":"France","y":48.1111,"x":-1.4033},{"n":"Loreto Aprutino","c":"Italy","y":42.4347,"x":13.9836},{"n":"Vimperk","c":"Czechia","y":49.0525,"x":13.7743},{"n":"Sahy","c":"Slovakia","y":48.0667,"x":18.9667},{"n":"Valverde de la Virgen","c":"Spain","y":42.5667,"x":-5.6833},{"n":"Aylmer","c":"Canada","y":42.7667,"x":-80.9833},{"n":"Irajuba","c":"Brazil","y":-13.2508,"x":-40.0839},{"n":"Louvroil","c":"France","y":50.265,"x":3.96},{"n":"Campo Belo do Sul","c":"Brazil","y":-27.8989,"x":-50.7608},{"n":"Peqin","c":"Albania","y":41.05,"x":19.75},{"n":"Tafetachte","c":"Morocco","y":31.5853,"x":-9.2519},{"n":"Park Street","c":"United Kingdom","y":51.722,"x":-0.339},{"n":"Oceano","c":"United States","y":35.1019,"x":-120.609},{"n":"Kirgiz-Miyaki","c":"Russia","y":53.6345,"x":54.8008},{"n":"Napajedla","c":"Czechia","y":49.1716,"x":17.512},{"n":"Grossmehring","c":"Germany","y":48.7667,"x":11.5331},{"n":"Krasnokutsk","c":"Ukraine","y":50.0567,"x":35.1492},{"n":"Volta Mantovana","c":"Italy","y":45.3194,"x":10.6594},{"n":"Nova Bana","c":"Slovakia","y":48.4267,"x":18.6394},{"n":"Piikkio","c":"Finland","y":60.425,"x":22.5167},{"n":"Asbach","c":"Germany","y":50.6667,"x":7.4258},{"n":"Homberg","c":"Germany","y":50.7333,"x":9},{"n":"Sappington","c":"United States","y":38.526,"x":-90.373},{"n":"Maurice River","c":"United States","y":39.3057,"x":-74.9349},{"n":"Torregrotta","c":"Italy","y":38.2,"x":15.35},{"n":"Serranopolis","c":"Brazil","y":-18.3058,"x":-51.9619},{"n":"Brena Alta","c":"Spain","y":28.6333,"x":-17.7667},{"n":"Paimpol","c":"France","y":48.7778,"x":-3.0464},{"n":"Malchin","c":"Germany","y":53.7333,"x":12.7833},{"n":"Blaxland","c":"Australia","y":-33.7453,"x":150.6175},{"n":"Killi","c":"Syria","y":36.1103,"x":36.6939},{"n":"Askawn","c":"Morocco","y":30.7687,"x":-7.7729},{"n":"Chonan","c":"Japan","y":35.3867,"x":140.2372},{"n":"Bilisht","c":"Albania","y":40.6275,"x":20.99},{"n":"Sao Jose da Barra","c":"Brazil","y":-20.7178,"x":-46.3108},{"n":"Brugine","c":"Italy","y":45.3,"x":11.9925},{"n":"Taznakht","c":"Morocco","y":30.5736,"x":-7.2028},{"n":"McCordsville","c":"United States","y":39.8967,"x":-85.9209},{"n":"Librazhd","c":"Albania","y":41.1833,"x":20.3167},{"n":"Le Peage-de-Roussillon","c":"France","y":45.3731,"x":4.7975},{"n":"Jurancon","c":"France","y":43.2872,"x":-0.3881},{"n":"Silvis","c":"United States","y":41.4976,"x":-90.4101},{"n":"Kampong Mata Mata","c":"Brunei","y":4.9017,"x":114.8958},{"n":"Bilton","c":"United Kingdom","y":52.3594,"x":-1.29},{"n":"Anna Paulowna","c":"Netherlands","y":52.85,"x":4.8167},{"n":"Southwood Acres","c":"United States","y":41.961,"x":-72.5719},{"n":"Friedrichroda","c":"Germany","y":50.8575,"x":10.5651},{"n":"Mount Shasta","c":"United States","y":41.3206,"x":-122.315},{"n":"San Marco Argentano","c":"Italy","y":39.55,"x":16.1167},{"n":"Salair","c":"Russia","y":54.2333,"x":85.8},{"n":"Kirillov","c":"Russia","y":59.8667,"x":38.3833},{"n":"Buttapietra","c":"Italy","y":45.35,"x":10.9333},{"n":"West Brandywine","c":"United States","y":40.0413,"x":-75.8121},{"n":"Ojai","c":"United States","y":34.4487,"x":-119.2469},{"n":"South Berwick","c":"United States","y":43.2388,"x":-70.7478},{"n":"Albunol","c":"Spain","y":36.8,"x":-3.2},{"n":"Kriz","c":"Croatia","y":45.65,"x":16.5167},{"n":"Lennox Head","c":"Australia","y":-28.7983,"x":153.5844},{"n":"Alstahaug","c":"Norway","y":65.9567,"x":12.5728},{"n":"Douar Oulad Boussaken","c":"Morocco","y":32.5703,"x":-8.1217},{"n":"Francisco Leon","c":"Mexico","y":17.3167,"x":-93.25},{"n":"Guatapara","c":"Brazil","y":-21.4967,"x":-48.0378},{"n":"Cha Preta","c":"Brazil","y":-9.255,"x":-36.2958},{"n":"Nisa","c":"Portugal","y":39.5167,"x":-7.65},{"n":"Ra-ngae","c":"Thailand","y":6.2942,"x":101.7238},{"n":"Lahouarta","c":"Morocco","y":32.9139,"x":-7.7019},{"n":"Delson","c":"Canada","y":45.37,"x":-73.55},{"n":"Villa Hills","c":"United States","y":39.0656,"x":-84.595},{"n":"South Heidelberg","c":"United States","y":40.3122,"x":-76.0969},{"n":"Radeburg","c":"Germany","y":51.2125,"x":13.7256},{"n":"Montblanch","c":"Spain","y":41.3764,"x":1.1639},{"n":"St. Gabriel","c":"United States","y":30.2537,"x":-91.1013},{"n":"Pillaro","c":"Ecuador","y":-1.1667,"x":-78.5333},{"n":"San Emilio","c":"Philippines","y":17.2333,"x":120.6167},{"n":"Bidart","c":"France","y":43.4369,"x":-1.5931},{"n":"Almodovar","c":"Portugal","y":37.5114,"x":-8.0603},{"n":"Tito","c":"Italy","y":40.5833,"x":15.6833},{"n":"Lander","c":"United States","y":42.8313,"x":-108.7599},{"n":"Trstena","c":"Slovakia","y":49.3667,"x":19.6167},{"n":"Wabern","c":"Germany","y":51.1,"x":9.3333},{"n":"Sheringham","c":"United Kingdom","y":52.94,"x":1.213},{"n":"Itacaja","c":"Brazil","y":-8.3919,"x":-47.7678},{"n":"Dock Junction","c":"United States","y":31.2031,"x":-81.5156},{"n":"Otterndorf","c":"Germany","y":53.8081,"x":8.8997},{"n":"Nadlac","c":"Romania","y":46.1667,"x":20.75},{"n":"Pelinia","c":"Moldova","y":47.8758,"x":27.8314},{"n":"Bomaderry","c":"Australia","y":-34.848,"x":150.605},{"n":"Poviglio","c":"Italy","y":44.8333,"x":10.55},{"n":"Thung Fon","c":"Thailand","y":17.4722,"x":103.2626},{"n":"Ten Boer","c":"Netherlands","y":53.2833,"x":6.6833},{"n":"Moravske Budejovice","c":"Czechia","y":49.0521,"x":15.8087},{"n":"Sevenum","c":"Netherlands","y":51.4167,"x":6.0333},{"n":"Techirghiol","c":"Romania","y":44.0575,"x":28.5958},{"n":"Amara","c":"Romania","y":44.62,"x":27.32},{"n":"Kottmarsdorf","c":"Germany","y":51.0108,"x":14.6558},{"n":"Keystone Heights","c":"United States","y":29.7812,"x":-82.034},{"n":"Balestrate","c":"Italy","y":38.0513,"x":13.0072},{"n":"West Cocalico","c":"United States","y":40.2658,"x":-76.163},{"n":"Haapajarvi","c":"Finland","y":63.7486,"x":25.3181},{"n":"Ceriano Laghetto","c":"Italy","y":45.6333,"x":9.0833},{"n":"Benacazon","c":"Spain","y":37.35,"x":-6.1833},{"n":"Lenti","c":"Hungary","y":46.6236,"x":16.5458},{"n":"Begas","c":"Spain","y":41.3319,"x":1.9228},{"n":"Braunton","c":"United Kingdom","y":51.11,"x":-4.162},{"n":"Tsarychanka","c":"Ukraine","y":48.9432,"x":34.4748},{"n":"Altaneira","c":"Brazil","y":-7.0019,"x":-39.7408},{"n":"Bain-de-Bretagne","c":"France","y":47.8422,"x":-1.6819},{"n":"Legden","c":"Germany","y":52.0331,"x":7.0997},{"n":"Sidi 'Allal al Mcader","c":"Morocco","y":33.8897,"x":-6.1503},{"n":"Pordic","c":"France","y":48.5703,"x":-2.8171},{"n":"Douar Tassift","c":"Morocco","y":35.5099,"x":-5.2263},{"n":"Gundelsheim","c":"Germany","y":49.2833,"x":9.1667},{"n":"Carhaix-Plouguer","c":"France","y":48.2758,"x":-3.5744},{"n":"Erlenbach","c":"Switzerland","y":47.3044,"x":8.5922},{"n":"Rockton","c":"United States","y":42.45,"x":-89.0629},{"n":"Tha Ruea","c":"Thailand","y":14.5596,"x":100.7226},{"n":"Treuenbrietzen","c":"Germany","y":52.0972,"x":12.8711},{"n":"Yubari","c":"Japan","y":43.0569,"x":141.9739},{"n":"Gedern","c":"Germany","y":50.4244,"x":9.1997},{"n":"Markelo","c":"Netherlands","y":52.2342,"x":6.4953},{"n":"Nyergesujfalu","c":"Hungary","y":47.7603,"x":18.5567},{"n":"Lagnieu","c":"France","y":45.9036,"x":5.3492},{"n":"Geisenhausen","c":"Germany","y":48.4667,"x":12.25},{"n":"Holdorf","c":"Germany","y":52.5883,"x":8.1286},{"n":"Rhoose","c":"United Kingdom","y":51.3906,"x":-3.3524},{"n":"Muribeca","c":"Brazil","y":-10.4269,"x":-36.9589},{"n":"Eibenstock","c":"Germany","y":50.4956,"x":12.5975},{"n":"Bernkastel-Kues","c":"Germany","y":49.9161,"x":7.0694},{"n":"Bellegarde","c":"France","y":43.7536,"x":4.5144},{"n":"Arconate","c":"Italy","y":45.5333,"x":8.85},{"n":"Malmyzh","c":"Russia","y":56.5167,"x":50.6667},{"n":"Leipheim","c":"Germany","y":48.4489,"x":10.2208},{"n":"Wingerworth","c":"United Kingdom","y":53.2033,"x":-1.4347},{"n":"Coracora","c":"Peru","y":-15.017,"x":-73.7804},{"n":"Sissach","c":"Switzerland","y":47.4644,"x":7.8106},{"n":"Old Town","c":"United States","y":44.9491,"x":-68.7249},{"n":"Edgerton","c":"United States","y":42.8385,"x":-89.0699},{"n":"Lautern","c":"Germany","y":49.7124,"x":8.6928},{"n":"Kuchl","c":"Austria","y":47.6278,"x":13.1472},{"n":"Shibecha","c":"Japan","y":43.3033,"x":144.6008},{"n":"Audun-le-Tiche","c":"France","y":49.4733,"x":5.9578},{"n":"Altendorf","c":"Switzerland","y":47.1922,"x":8.83},{"n":"Talayuela","c":"Spain","y":39.9667,"x":-5.6},{"n":"Stratham","c":"United States","y":43.0157,"x":-70.9006},{"n":"Saint-Etienne-de-Montluc","c":"France","y":47.2764,"x":-1.7803},{"n":"Oulad Cherki","c":"Morocco","y":32.3333,"x":-7.75},{"n":"Isyangulovo","c":"Russia","y":52.1925,"x":56.5803},{"n":"Emlichheim","c":"Germany","y":52.6167,"x":6.85},{"n":"Pfaffenhofen an der Roth","c":"Germany","y":48.3547,"x":10.1608},{"n":"Waldstetten","c":"Germany","y":48.7667,"x":9.8203},{"n":"Oued El Makhazine","c":"Morocco","y":34.9333,"x":-5.85},{"n":"Shenfield","c":"United Kingdom","y":51.6297,"x":0.3192},{"n":"Kimberley","c":"Canada","y":49.6697,"x":-115.9775},{"n":"Cesky Brod","c":"Czechia","y":50.0743,"x":14.8609},{"n":"Rufina","c":"Italy","y":43.8167,"x":11.4833},{"n":"Kargasok","c":"Russia","y":59.0578,"x":80.8711},{"n":"Weikersheim","c":"Germany","y":49.4817,"x":9.8992},{"n":"Laguna Carapa","c":"Brazil","y":-22.5458,"x":-55.15},{"n":"Mutlangen","c":"Germany","y":48.8228,"x":9.7947},{"n":"Norg","c":"Netherlands","y":53.0661,"x":6.4594},{"n":"Shenstone","c":"United Kingdom","y":52.637,"x":-1.841},{"n":"Soave","c":"Italy","y":45.4196,"x":11.2459},{"n":"Hiawatha","c":"United States","y":42.0547,"x":-91.6911},{"n":"Mansoa","c":"Guinea-Bissau","y":12.0667,"x":-15.3167},{"n":"Sennori","c":"Italy","y":40.7899,"x":8.5952},{"n":"Collado Mediano","c":"Spain","y":40.6939,"x":-4.0231},{"n":"Hubbard","c":"United States","y":41.1595,"x":-80.5672},{"n":"River Rouge","c":"United States","y":42.2731,"x":-83.1246},{"n":"Joviania","c":"Brazil","y":-17.805,"x":-49.6139},{"n":"Kaplice","c":"Czechia","y":48.7386,"x":14.4963},{"n":"Oebisfelde","c":"Germany","y":52.4333,"x":10.9833},{"n":"Maripipi","c":"Philippines","y":11.7833,"x":124.35},{"n":"Belen","c":"United States","y":34.7115,"x":-106.7985},{"n":"Kalsdorf bei Graz","c":"Austria","y":46.9661,"x":15.4817},{"n":"Inverness","c":"United States","y":28.8397,"x":-82.3437},{"n":"Waitara","c":"New Zealand","y":-38.9958,"x":174.2331},{"n":"Elassona","c":"Greece","y":39.8947,"x":22.1886},{"n":"Great Bookham","c":"United Kingdom","y":51.278,"x":-0.373},{"n":"Cotati","c":"United States","y":38.3279,"x":-122.7092},{"n":"Wauseon","c":"United States","y":41.5532,"x":-84.141},{"n":"Soltvadkert","c":"Hungary","y":46.5808,"x":19.3936},{"n":"Beauvechain","c":"Belgium","y":50.7833,"x":4.7667},{"n":"Cranves-Sales","c":"France","y":46.1867,"x":6.2914},{"n":"Atherton","c":"Australia","y":-17.2658,"x":145.478},{"n":"Ouro","c":"Brazil","y":-27.3408,"x":-51.6178},{"n":"Inconfidentes","c":"Brazil","y":-22.3169,"x":-46.3278},{"n":"Paulo Frontin","c":"Brazil","y":-26.04,"x":-50.8358},{"n":"Victoria","c":"Romania","y":45.6466,"x":24.7059},{"n":"Cercedilla","c":"Spain","y":40.7411,"x":-4.0569},{"n":"Mills River","c":"United States","y":35.3853,"x":-82.5854},{"n":"Salete","c":"Brazil","y":-26.98,"x":-50},{"n":"Untermeitingen","c":"Germany","y":48.1667,"x":10.8},{"n":"Calverton","c":"United Kingdom","y":53.037,"x":-1.083},{"n":"Saranac Lake","c":"United States","y":44.3245,"x":-74.1314},{"n":"Rzhyshchiv","c":"Ukraine","y":49.9611,"x":31.0436},{"n":"Sanibel","c":"United States","y":26.4534,"x":-82.1023},{"n":"Bou Iferda","c":"Morocco","y":32.3567,"x":-5.835},{"n":"Torrita di Siena","c":"Italy","y":43.1667,"x":11.7667},{"n":"Teya","c":"Spain","y":41.4986,"x":2.3242},{"n":"Auvers-sur-Oise","c":"France","y":49.0717,"x":2.1742},{"n":"Mezhova","c":"Ukraine","y":48.2563,"x":36.7313},{"n":"Suonenjoki","c":"Finland","y":62.625,"x":27.1222},{"n":"Blandford-Blenheim","c":"Canada","y":43.2333,"x":-80.6},{"n":"Simacota","c":"Colombia","y":6.4431,"x":-73.3375},{"n":"Santa Terezinha","c":"Brazil","y":-10.47,"x":-50.5028},{"n":"Soldotna","c":"United States","y":60.4862,"x":-151.0672},{"n":"Simitli","c":"Bulgaria","y":41.8914,"x":23.1117},{"n":"Pirdop","c":"Bulgaria","y":42.7,"x":24.1833},{"n":"Trimbach","c":"Switzerland","y":47.3636,"x":7.9},{"n":"Devavanya","c":"Hungary","y":47.03,"x":20.9589},{"n":"Andorra","c":"Spain","y":40.9775,"x":-0.4483},{"n":"Port Jefferson Station","c":"United States","y":40.926,"x":-73.0651},{"n":"Monsenhor Hipolito","c":"Brazil","y":-6.9958,"x":-41.03},{"n":"Old Lyme","c":"United States","y":41.32,"x":-72.3034},{"n":"Bayham","c":"Canada","y":42.7333,"x":-80.7833},{"n":"Ivolginsk","c":"Russia","y":51.7492,"x":107.2836},{"n":"Tain-l'Hermitage","c":"France","y":45.0706,"x":4.8425},{"n":"Reiden","c":"Switzerland","y":47.2431,"x":7.9683},{"n":"Patarlagele","c":"Romania","y":45.3189,"x":26.3597},{"n":"Loos-en-Gohelle","c":"France","y":50.4578,"x":2.7933},{"n":"Murr","c":"Germany","y":48.9636,"x":9.2589},{"n":"West Concord","c":"United States","y":42.4518,"x":-71.4035},{"n":"New Bremen","c":"United States","y":40.4356,"x":-84.3777},{"n":"Betheny","c":"France","y":49.2847,"x":4.0569},{"n":"Neugersdorf","c":"Germany","y":50.9789,"x":14.6108},{"n":"Mittenwald","c":"Germany","y":47.4167,"x":11.25},{"n":"Lignano Sabbiadoro","c":"Italy","y":45.655,"x":13.0931},{"n":"Buchrain","c":"Switzerland","y":47.0953,"x":8.3475},{"n":"Mentor-on-the-Lake","c":"United States","y":41.7135,"x":-81.365},{"n":"Saint-Christol-lez-Ales","c":"France","y":44.0844,"x":4.0769},{"n":"Aiquile","c":"Bolivia","y":-18.1667,"x":-65.1667},{"n":"Villa del Rio","c":"Spain","y":37.9833,"x":-4.2833},{"n":"East Marlborough","c":"United States","y":39.8798,"x":-75.7231},{"n":"Arbaa Ayacha","c":"Morocco","y":35.383,"x":-5.8333},{"n":"Ancient Oaks","c":"United States","y":40.536,"x":-75.5852},{"n":"Tuncurry","c":"Australia","y":-32.175,"x":152.4989},{"n":"Farr West","c":"United States","y":41.3015,"x":-112.0318},{"n":"Odry","c":"Czechia","y":49.6625,"x":17.8309},{"n":"Morteau","c":"France","y":47.0581,"x":6.6061},{"n":"Syanno","c":"Belarus","y":54.8,"x":29.7},{"n":"Homun","c":"Mexico","y":20.7386,"x":-89.285},{"n":"Livramento","c":"Brazil","y":-7.3739,"x":-36.9458},{"n":"South Apopka","c":"United States","y":28.6569,"x":-81.5057},{"n":"Komijan","c":"Iran","y":34.7192,"x":49.3267},{"n":"Nobitz","c":"Germany","y":50.9762,"x":12.4861},{"n":"Robeson","c":"United States","y":40.2363,"x":-75.8724},{"n":"Upper Deerfield","c":"United States","y":39.4936,"x":-75.2158},{"n":"Bujalance","c":"Spain","y":37.9,"x":-4.3833},{"n":"Militello in Val di Catania","c":"Italy","y":37.2742,"x":14.7933},{"n":"Ibirarema","c":"Brazil","y":-22.8175,"x":-50.0725},{"n":"Gromitz","c":"Germany","y":54.1536,"x":10.9575},{"n":"Tornal'a","c":"Slovakia","y":48.4167,"x":20.3333},{"n":"Reyes","c":"Bolivia","y":-14.2958,"x":-67.3353},{"n":"Sericita","c":"Brazil","y":-20.4833,"x":-42.4833},{"n":"Canovanas","c":"Puerto Rico","y":18.3782,"x":-65.9056},{"n":"Providence Village","c":"United States","y":33.2363,"x":-96.9611},{"n":"Esashi","c":"Japan","y":41.8694,"x":140.1275},{"n":"Murg","c":"Germany","y":47.5547,"x":8.0242},{"n":"Cazorla","c":"Spain","y":37.9,"x":-3},{"n":"Le Roy","c":"United States","y":42.9937,"x":-77.972},{"n":"Gypsum","c":"United States","y":39.6285,"x":-106.9334},{"n":"Segre","c":"France","y":47.6864,"x":-0.8725},{"n":"Arraiolos","c":"Portugal","y":38.7229,"x":-7.9843},{"n":"Bruzual","c":"Venezuela","y":8.0519,"x":-69.3292},{"n":"Canova","c":"Italy","y":45.7333,"x":9.4},{"n":"Tolleson","c":"United States","y":33.4484,"x":-112.2561},{"n":"Groditz","c":"Germany","y":51.4142,"x":13.4464},{"n":"Luserna San Giovanni","c":"Italy","y":44.8167,"x":7.25},{"n":"Carinola","c":"Italy","y":41.1833,"x":13.9833},{"n":"New Roads","c":"United States","y":30.6959,"x":-91.4537},{"n":"San Diego de Alejandria","c":"Mexico","y":20.8667,"x":-101.9},{"n":"Fabregues","c":"France","y":43.5503,"x":3.7761},{"n":"Ponchatoula","c":"United States","y":30.4402,"x":-90.4428},{"n":"La Concordia","c":"Nicaragua","y":13.1833,"x":-86.1667},{"n":"Strathalbyn","c":"Australia","y":-35.2667,"x":138.9},{"n":"Mapimi","c":"Mexico","y":25.8331,"x":-103.8478},{"n":"Slivnitsa","c":"Bulgaria","y":42.8515,"x":23.0383},{"n":"Poiares","c":"Portugal","y":40.2167,"x":-8.25},{"n":"Camp Pendleton North","c":"United States","y":33.3148,"x":-117.3162},{"n":"Santa Marta de Penaguiao","c":"Portugal","y":41.2,"x":-7.7833},{"n":"Antonio Olinto","c":"Brazil","y":-25.9858,"x":-50.1969},{"n":"Humberston","c":"United Kingdom","y":53.5281,"x":-0.0249},{"n":"Roggiano Gravina","c":"Italy","y":39.6167,"x":16.15},{"n":"East Pikeland","c":"United States","y":40.1326,"x":-75.5631},{"n":"Eden Isle","c":"United States","y":30.2268,"x":-89.8043},{"n":"Ban Chan","c":"Thailand","y":17.3595,"x":102.817},{"n":"Bannockburn","c":"United Kingdom","y":56.09,"x":-3.91},{"n":"Wolkersdorf im Weinviertel","c":"Austria","y":48.3667,"x":16.5167},{"n":"Uyskoye","c":"Russia","y":54.375,"x":60},{"n":"Pontevico","c":"Italy","y":45.2722,"x":10.0917},{"n":"Houston","c":"United Kingdom","y":55.867,"x":-4.5521},{"n":"Cabeceiras","c":"Brazil","y":-15.8008,"x":-46.9269},{"n":"Nazarezinho","c":"Brazil","y":-6.9158,"x":-38.325},{"n":"Itagimirim","c":"Brazil","y":-16.0869,"x":-39.6139},{"n":"Stegaurach","c":"Germany","y":49.87,"x":10.7822},{"n":"Itaju do Colonia","c":"Brazil","y":-15.1428,"x":-39.7239},{"n":"Derio","c":"Spain","y":43.2917,"x":-2.8858},{"n":"Charles City","c":"United States","y":43.0644,"x":-92.6745},{"n":"Dettelbach","c":"Germany","y":49.8017,"x":10.1618},{"n":"Herne","c":"United Kingdom","y":51.3492,"x":1.1331},{"n":"Ulmeni","c":"Romania","y":47.4656,"x":23.3003},{"n":"Longueau","c":"France","y":49.8703,"x":2.3561},{"n":"Villemandeur","c":"France","y":47.9903,"x":2.7094},{"n":"Paraiso do Sul","c":"Brazil","y":-29.7333,"x":-53.1833},{"n":"Bourbourg","c":"France","y":50.9464,"x":2.1978},{"n":"Turceni","c":"Romania","y":44.6794,"x":23.3731},{"n":"Nakhon Luang","c":"Thailand","y":14.4701,"x":100.6135},{"n":"Pedro Munoz","c":"Spain","y":39.4,"x":-2.95},{"n":"Rednitzhembach","c":"Germany","y":49.3053,"x":11.0703},{"n":"Passo do Sertao","c":"Brazil","y":-29.2228,"x":-49.81},{"n":"Harjavalta","c":"Finland","y":61.3139,"x":22.1417},{"n":"Allensbach","c":"Germany","y":47.7153,"x":9.0714},{"n":"Stanwood","c":"United States","y":48.2449,"x":-122.3425},{"n":"Si Chiang Mai","c":"Thailand","y":17.9564,"x":102.5867},{"n":"Noventa di Piave","c":"Italy","y":45.6667,"x":12.5333},{"n":"Augusta","c":"Canada","y":44.7511,"x":-75.6003},{"n":"St. Rose","c":"United States","y":29.9649,"x":-90.3088},{"n":"Saint-Pierre","c":"France","y":46.0597,"x":6.3725},{"n":"Borova","c":"Ukraine","y":50.1733,"x":30.1039},{"n":"Caicara","c":"Brazil","y":-6.5539,"x":-35.4108},{"n":"Abersychan","c":"United Kingdom","y":51.7239,"x":-3.0587},{"n":"San Fior di Sopra","c":"Italy","y":45.9222,"x":12.3614},{"n":"Lallaing","c":"France","y":50.39,"x":3.1681},{"n":"Arechavaleta","c":"Spain","y":43.0361,"x":-2.5044},{"n":"Sergeevka","c":"Kazakhstan","y":53.88,"x":67.4158},{"n":"Crumlin","c":"United Kingdom","y":51.6798,"x":-3.1368},{"n":"Hudsonville","c":"United States","y":42.8631,"x":-85.8628},{"n":"Saint-Julien-de-Concelles","c":"France","y":47.2533,"x":-1.3856},{"n":"Chemille","c":"France","y":47.2131,"x":-0.7258},{"n":"Ebern","c":"Germany","y":50.1,"x":10.7936},{"n":"Indaiabira","c":"Brazil","y":-15.4919,"x":-42.1969},{"n":"San Antonino Monteverde","c":"Mexico","y":17.5322,"x":-97.7208},{"n":"Claygate","c":"United Kingdom","y":51.36,"x":-0.342},{"n":"Tall Tamr","c":"Syria","y":36.6606,"x":40.3714},{"n":"Chalastra","c":"Greece","y":40.6267,"x":22.7322},{"n":"Monteiropolis","c":"Brazil","y":-9.6028,"x":-37.2478},{"n":"Bellbrook","c":"United States","y":39.6384,"x":-84.0863},{"n":"Mexia","c":"United States","y":31.6809,"x":-96.4833},{"n":"Kenwood","c":"United States","y":39.2067,"x":-84.3746},{"n":"Middleborough Center","c":"United States","y":41.8945,"x":-70.926},{"n":"Montoir-de-Bretagne","c":"France","y":47.3283,"x":-2.1492},{"n":"Iwye","c":"Belarus","y":53.9307,"x":25.7703},{"n":"Zbaszyn","c":"Poland","y":52.2531,"x":15.9178},{"n":"Portalegre","c":"Brazil","y":-6.0239,"x":-37.9878},{"n":"Mourenx","c":"France","y":43.3706,"x":-0.6294},{"n":"Makawao","c":"United States","y":20.848,"x":-156.319},{"n":"Frankstown","c":"United States","y":40.4453,"x":-78.3185},{"n":"Seymour","c":"Australia","y":-37.03,"x":145.13},{"n":"Gibsonville","c":"United States","y":36.0991,"x":-79.5417},{"n":"Parsberg","c":"Germany","y":49.15,"x":11.7167},{"n":"Elzach","c":"Germany","y":48.1747,"x":8.0717},{"n":"Dade City","c":"United States","y":28.3568,"x":-82.1942},{"n":"Fresia","c":"Chile","y":-41.1531,"x":-73.4223},{"n":"Duba-Yurt","c":"Russia","y":43.0353,"x":45.7306},{"n":"Cuincy","c":"France","y":50.3822,"x":3.0467},{"n":"Caraa","c":"Brazil","y":-29.79,"x":-50.435},{"n":"Nortorf","c":"Germany","y":54.1667,"x":9.8667},{"n":"La Gaude","c":"France","y":43.7219,"x":7.1531},{"n":"Puslinch","c":"Canada","y":43.45,"x":-80.1667},{"n":"Schesslitz","c":"Germany","y":49.9767,"x":11.0339},{"n":"Forte dei Marmi","c":"Italy","y":43.95,"x":10.1833},{"n":"Red Chute","c":"United States","y":32.5732,"x":-93.606},{"n":"Yssingeaux","c":"France","y":45.1428,"x":4.1236},{"n":"Pogoanele","c":"Romania","y":44.9167,"x":27},{"n":"Lavrio","c":"Greece","y":37.7,"x":24.05},{"n":"Village St. George","c":"United States","y":30.3598,"x":-91.0672},{"n":"Winooski","c":"United States","y":44.4951,"x":-73.1843},{"n":"Alvaiazere","c":"Portugal","y":39.8333,"x":-8.3833},{"n":"Morciano di Romagna","c":"Italy","y":43.9167,"x":12.65},{"n":"Rudno","c":"Ukraine","y":49.8404,"x":23.8747},{"n":"Belem do Brejo do Cruz","c":"Brazil","y":-6.1889,"x":-37.5358},{"n":"Whaley Bridge","c":"United Kingdom","y":53.3304,"x":-1.9838},{"n":"Kuklen","c":"Bulgaria","y":42.0343,"x":24.7878},{"n":"Bourg-Saint-Andeol","c":"France","y":44.3733,"x":4.6442},{"n":"Wriezen","c":"Germany","y":52.7167,"x":14.1331},{"n":"Matuguinao","c":"Philippines","y":12.15,"x":124.8833},{"n":"Maxatawny","c":"United States","y":40.526,"x":-75.7444},{"n":"Zapotitlan","c":"Mexico","y":20.0028,"x":-97.6917},{"n":"Coeymans","c":"United States","y":42.4936,"x":-73.8835},{"n":"Manciano","c":"Italy","y":42.5875,"x":11.515},{"n":"Sturry","c":"United Kingdom","y":51.3036,"x":1.1211},{"n":"Rabaul","c":"Papua New Guinea","y":-4.1981,"x":152.1681},{"n":"Nazare do Piaui","c":"Brazil","y":-6.9728,"x":-42.6719},{"n":"Prestice","c":"Czechia","y":49.5731,"x":13.3335},{"n":"Emmering","c":"Germany","y":48.1833,"x":11.2833},{"n":"Santa Luzia do Norte","c":"Brazil","y":-9.6028,"x":-35.8219},{"n":"Tyrvaa","c":"Finland","y":61.3556,"x":22.9402},{"n":"Castiglione della Pescaia","c":"Italy","y":42.7656,"x":10.8808},{"n":"Luisiana","c":"Brazil","y":-24.2858,"x":-52.2758},{"n":"Vila Nova da Barquinha","c":"Portugal","y":39.45,"x":-8.4333},{"n":"Menziken","c":"Switzerland","y":47.24,"x":8.1917},{"n":"Cannington","c":"Australia","y":-32.0167,"x":115.95},{"n":"Enkenbach-Alsenborn","c":"Germany","y":49.4906,"x":7.9025},{"n":"Santo Domingo de Guzman","c":"El Salvador","y":13.7161,"x":-89.7978},{"n":"Umatilla","c":"United States","y":45.912,"x":-119.3145},{"n":"Cehu Silvaniei","c":"Romania","y":47.412,"x":23.18},{"n":"Strasburg","c":"United States","y":38.9961,"x":-78.3548},{"n":"Wauchope","c":"Australia","y":-31.465,"x":152.7344},{"n":"Vanrhynsdorp","c":"South Africa","y":-31.6167,"x":18.7167},{"n":"Klichaw","c":"Belarus","y":53.4828,"x":29.3411},{"n":"Menucourt","c":"France","y":49.0272,"x":1.9814},{"n":"Namborn","c":"Germany","y":49.5167,"x":7.1333},{"n":"Bardowick","c":"Germany","y":53.2935,"x":10.3881},{"n":"Immenhausen","c":"Germany","y":51.4167,"x":9.5},{"n":"Gau-Algesheim","c":"Germany","y":49.95,"x":8.0167},{"n":"Whiteville","c":"United States","y":34.3306,"x":-78.7013},{"n":"Novolakskoye","c":"Russia","y":43.1167,"x":46.4833},{"n":"Freyung","c":"Germany","y":48.8075,"x":13.5475},{"n":"Manuel Viana","c":"Brazil","y":-29.5889,"x":-55.4828},{"n":"Vila Nova de Foz Coa","c":"Portugal","y":41.0833,"x":-7.1333},{"n":"University of California-Davis","c":"United States","y":38.5374,"x":-121.7576},{"n":"Serignan","c":"France","y":43.28,"x":3.2775},{"n":"Nailsworth","c":"United Kingdom","y":51.6954,"x":-2.2234},{"n":"Soata","c":"Colombia","y":6.3328,"x":-72.6839},{"n":"Farnham Royal","c":"United Kingdom","y":51.5386,"x":-0.6164},{"n":"Ephraim","c":"United States","y":39.3564,"x":-111.5847},{"n":"Campagna Lupia","c":"Italy","y":45.35,"x":12.1},{"n":"Karpenisi","c":"Greece","y":38.9203,"x":21.7833},{"n":"Santo Antonio do Retiro","c":"Brazil","y":-15.3389,"x":-42.6239},{"n":"Cavle","c":"Croatia","y":45.35,"x":14.48},{"n":"Ruddington","c":"United Kingdom","y":52.893,"x":-1.15},{"n":"Heringen","c":"Germany","y":50.8872,"x":10.0056},{"n":"Lochbuie","c":"United States","y":40.0119,"x":-104.7271},{"n":"North Springfield","c":"United States","y":38.8024,"x":-77.2028},{"n":"Faringdon","c":"United Kingdom","y":51.657,"x":-1.586},{"n":"Torreperogil","c":"Spain","y":38.0417,"x":-3.2844},{"n":"Teteghem","c":"France","y":51.0186,"x":2.4439},{"n":"Pfalzgrafenweiler","c":"Germany","y":48.5283,"x":8.5678},{"n":"Dacice","c":"Czechia","y":49.0816,"x":15.4373},{"n":"Rosales","c":"Mexico","y":28.2,"x":-105.55},{"n":"Briton Ferry","c":"United Kingdom","y":51.64,"x":-3.83},{"n":"Lakhdenpokhya","c":"Russia","y":61.5167,"x":30.2},{"n":"Soultz-Haut-Rhin","c":"France","y":47.8858,"x":7.2292},{"n":"Uddingston","c":"United Kingdom","y":55.8183,"x":-4.0827},{"n":"Longboat Key","c":"United States","y":27.3926,"x":-82.6341},{"n":"Saint-Bonnet-de-Mure","c":"France","y":45.6906,"x":5.0292},{"n":"Taga","c":"Japan","y":35.2219,"x":136.2922},{"n":"Tseri","c":"Cyprus","y":35.0725,"x":33.3243},{"n":"Buena Vista","c":"United States","y":39.515,"x":-74.8883},{"n":"Dahlonega","c":"United States","y":34.5309,"x":-83.9804},{"n":"Cavezzo","c":"Italy","y":44.837,"x":11.0307},{"n":"Bourg-Saint-Maurice","c":"France","y":45.6167,"x":6.7686},{"n":"Montecassiano","c":"Italy","y":43.3637,"x":13.4359},{"n":"Nebraska City","c":"United States","y":40.6762,"x":-95.8613},{"n":"Cordignano","c":"Italy","y":45.95,"x":12.4167},{"n":"Hiraizumi","c":"Japan","y":38.9867,"x":141.1142},{"n":"Lymanske","c":"Ukraine","y":46.6639,"x":29.9708},{"n":"Konigsbronn","c":"Germany","y":48.7428,"x":10.1136},{"n":"Hardeeville","c":"United States","y":32.2951,"x":-81.0318},{"n":"Connellsville","c":"United States","y":40.0158,"x":-79.5899},{"n":"Novafeltria","c":"Italy","y":43.8954,"x":12.2904},{"n":"Castro Verde","c":"Portugal","y":37.6976,"x":-8.0819},{"n":"Cassis","c":"France","y":43.2156,"x":5.5372},{"n":"Quesnoy-sur-Deule","c":"France","y":50.7125,"x":2.9994},{"n":"Helensburgh","c":"Australia","y":-34.1833,"x":151},{"n":"New Cumberland","c":"United States","y":40.2298,"x":-76.8763},{"n":"Putzbrunn","c":"Germany","y":48.0758,"x":11.7157},{"n":"Nyrany","c":"Czechia","y":49.7116,"x":13.2119},{"n":"Saint-Macaire-en-Mauges","c":"France","y":47.1239,"x":-0.9917},{"n":"Pompey","c":"United States","y":42.9229,"x":-75.9803},{"n":"Altofts","c":"United Kingdom","y":53.697,"x":-1.416},{"n":"Cristalandia","c":"Brazil","y":-10.6,"x":-49.1928},{"n":"Beauport","c":"Canada","y":46.9667,"x":-71.3},{"n":"Petropavlovka","c":"Russia","y":50.608,"x":105.3218},{"n":"Yass","c":"Australia","y":-34.8203,"x":148.9136},{"n":"Quiliano","c":"Italy","y":44.2931,"x":8.4103},{"n":"Alta Sierra","c":"United States","y":39.1237,"x":-121.0523},{"n":"Hitzendorf","c":"Austria","y":47.0353,"x":15.3008},{"n":"Mertola","c":"Portugal","y":37.6333,"x":-7.65},{"n":"Wagenfeld","c":"Germany","y":52.55,"x":8.5833},{"n":"Terras de Bouro","c":"Portugal","y":41.7167,"x":-8.3},{"n":"Northridge","c":"United States","y":39.9971,"x":-83.777},{"n":"Moab","c":"United States","y":38.5701,"x":-109.5477},{"n":"Gluszyca","c":"Poland","y":50.6874,"x":16.3717},{"n":"Ajuricaba","c":"Brazil","y":-28.2389,"x":-53.7708},{"n":"Arpino","c":"Italy","y":41.6471,"x":13.6115},{"n":"New Sewickley","c":"United States","y":40.7215,"x":-80.1979},{"n":"Nuporanga","c":"Brazil","y":-20.7308,"x":-47.7306},{"n":"Baywood","c":"United States","y":40.7533,"x":-73.29},{"n":"Cupcini","c":"Moldova","y":48.1108,"x":27.3853},{"n":"Desterro de Entre Rios","c":"Brazil","y":-20.66,"x":-44.3328},{"n":"Sobeslav","c":"Czechia","y":49.26,"x":14.7186},{"n":"Cotgrave","c":"United Kingdom","y":52.914,"x":-1.042},{"n":"Ralston","c":"United States","y":41.2005,"x":-96.0354},{"n":"Santana da Vargem","c":"Brazil","y":-21.2489,"x":-45.5069},{"n":"Sedziszow Malopolski","c":"Poland","y":50.0694,"x":21.7014},{"n":"Bardolino","c":"Italy","y":45.5517,"x":10.7214},{"n":"Finestrat","c":"Spain","y":38.5669,"x":-0.2125},{"n":"Tautii Magherus","c":"Romania","y":47.6678,"x":23.4722},{"n":"Tanglewilde","c":"United States","y":47.0512,"x":-122.781},{"n":"Lengenfeld","c":"Germany","y":50.5667,"x":12.3667},{"n":"Salles","c":"France","y":44.5519,"x":-0.8694},{"n":"Montelabbate","c":"Italy","y":43.8489,"x":12.7909},{"n":"Ormond-by-the-Sea","c":"United States","y":29.3436,"x":-81.0677},{"n":"Wawayanda","c":"United States","y":41.3843,"x":-74.4618},{"n":"Jaraguari","c":"Brazil","y":-20.1419,"x":-54.3989},{"n":"Delphos","c":"United States","y":40.8481,"x":-84.3368},{"n":"Stevensville","c":"United States","y":38.9745,"x":-76.3184},{"n":"Lihue","c":"United States","y":21.9728,"x":-159.3541},{"n":"Gatton","c":"Australia","y":-27.5611,"x":152.2755},{"n":"North Berwick","c":"United Kingdom","y":56.058,"x":-2.717},{"n":"Hasparren","c":"France","y":43.3844,"x":-1.3047},{"n":"Murillo","c":"United States","y":26.2642,"x":-98.1233},{"n":"Uznach","c":"Switzerland","y":47.2242,"x":8.9839},{"n":"Frielendorf","c":"Germany","y":50.9833,"x":9.3333},{"n":"Wissmar","c":"Germany","y":50.75,"x":8.7},{"n":"Hinte","c":"Germany","y":53.4167,"x":7.2},{"n":"Cernobbio","c":"Italy","y":45.8381,"x":9.0758},{"n":"Saint-Remi","c":"Canada","y":45.2667,"x":-73.6167},{"n":"St. Marys","c":"Canada","y":43.2583,"x":-81.1333},{"n":"Valognes","c":"France","y":49.5092,"x":-1.4692},{"n":"Gerolzhofen","c":"Germany","y":49.9,"x":10.35},{"n":"Muxton","c":"United Kingdom","y":52.72,"x":-2.421},{"n":"Douar Drissiine","c":"Morocco","y":32.0242,"x":-7.2811},{"n":"Montalbano Ionico","c":"Italy","y":40.2833,"x":16.5667},{"n":"Tona","c":"Colombia","y":7.2019,"x":-72.9664},{"n":"Starokucherganovka","c":"Russia","y":46.325,"x":47.9581},{"n":"Saerbeck","c":"Germany","y":52.175,"x":7.6333},{"n":"Neptune Beach","c":"United States","y":30.3165,"x":-81.4118},{"n":"Annweiler am Trifels","c":"Germany","y":49.2033,"x":7.9667},{"n":"Suce-sur-Erdre","c":"France","y":47.3333,"x":-1.5333},{"n":"Ash Vale","c":"United Kingdom","y":51.27,"x":-0.72},{"n":"Shyriaieve","c":"Ukraine","y":47.3878,"x":30.1911},{"n":"Almeida","c":"Portugal","y":40.7259,"x":-6.9056},{"n":"Othis","c":"France","y":49.0764,"x":2.6764},{"n":"Crystal City","c":"United States","y":28.6909,"x":-99.8257},{"n":"Antonina do Norte","c":"Brazil","y":-6.775,"x":-39.9889},{"n":"Gioiosa Ionica","c":"Italy","y":38.3333,"x":16.3},{"n":"Saint-Remy","c":"France","y":46.7633,"x":4.8375},{"n":"Tuntenhausen","c":"Germany","y":47.9333,"x":12.0167},{"n":"Koshekhabl","c":"Russia","y":44.9,"x":40.4833},{"n":"Saint-Jean-d'Angely","c":"France","y":45.9442,"x":-0.5211},{"n":"Engenheiro Navarro","c":"Brazil","y":-17.28,"x":-43.95},{"n":"Colipa","c":"Mexico","y":19.9167,"x":-96.7},{"n":"Guidoval","c":"Brazil","y":-21.1519,"x":-42.7969},{"n":"Union Grove","c":"United States","y":42.6863,"x":-88.0495},{"n":"Thal","c":"Switzerland","y":47.4664,"x":9.5667},{"n":"Lichtenwalde","c":"Germany","y":50.9083,"x":12.9917},{"n":"Absam","c":"Austria","y":47.2833,"x":11.5},{"n":"San Vicente de Mont-Alt","c":"Spain","y":41.5803,"x":2.5086},{"n":"Reduto","c":"Brazil","y":-20.24,"x":-41.9828},{"n":"Busti","c":"United States","y":42.0459,"x":-79.312},{"n":"Cubati","c":"Brazil","y":-6.8678,"x":-36.3508},{"n":"Kapoeta","c":"South Sudan","y":4.7721,"x":33.5902},{"n":"Grove","c":"United Kingdom","y":51.612,"x":-1.421},{"n":"Jussiape","c":"Brazil","y":-13.5169,"x":-41.5928},{"n":"Chianciano Terme","c":"Italy","y":43.0667,"x":11.8333},{"n":"Elin Pelin","c":"Bulgaria","y":42.6689,"x":23.6025},{"n":"Ouardana","c":"Morocco","y":35.0708,"x":-3.4217},{"n":"Bernau am Chiemsee","c":"Germany","y":47.8167,"x":12.3667},{"n":"Fordingbridge","c":"United Kingdom","y":50.9275,"x":-1.7901},{"n":"Bamnet Narong","c":"Thailand","y":15.5034,"x":101.681},{"n":"Belle Isle","c":"United States","y":28.4724,"x":-81.3491},{"n":"Poninka","c":"Ukraine","y":50.1833,"x":27.5333},{"n":"Immenstaad am Bodensee","c":"Germany","y":47.6667,"x":9.3667},{"n":"Vazzola","c":"Italy","y":45.8333,"x":12.3833},{"n":"Cagnano Varano","c":"Italy","y":41.8333,"x":15.7667},{"n":"Willow Oak","c":"United States","y":27.9216,"x":-82.0244},{"n":"Lith","c":"Netherlands","y":51.8042,"x":5.4408},{"n":"Chipping Ongar","c":"United Kingdom","y":51.703,"x":0.244},{"n":"Emmitsburg","c":"United States","y":39.7051,"x":-77.3216},{"n":"Drayton Valley","c":"Canada","y":53.2222,"x":-114.9769},{"n":"Sao Jose de Uba","c":"Brazil","y":-21.3578,"x":-41.9428},{"n":"Willows","c":"United States","y":39.5149,"x":-122.1995},{"n":"East Hills","c":"United States","y":40.7958,"x":-73.6292},{"n":"Pontremoli","c":"Italy","y":44.3761,"x":9.8799},{"n":"Regalbuto","c":"Italy","y":37.65,"x":14.6333},{"n":"Saint-Pathus","c":"France","y":49.0706,"x":2.7997},{"n":"Dingelstadt","c":"Germany","y":51.3156,"x":10.3194},{"n":"La Feria","c":"United States","y":26.1544,"x":-97.8255},{"n":"Darganata","c":"Turkmenistan","y":40.4833,"x":62.1667},{"n":"Wolfschlugen","c":"Germany","y":48.6531,"x":9.2889},{"n":"Kurri Kurri","c":"Australia","y":-32.8167,"x":151.4833},{"n":"Rovello Porro","c":"Italy","y":45.65,"x":9.0333},{"n":"Stavelot","c":"Belgium","y":50.3947,"x":5.9297},{"n":"Cornebarrieu","c":"France","y":43.6494,"x":1.3264},{"n":"Ponoka","c":"Canada","y":52.6833,"x":-113.5667},{"n":"West Byfleet","c":"United Kingdom","y":51.338,"x":-0.5033},{"n":"Steinenbronn","c":"Germany","y":48.6647,"x":9.1225},{"n":"Rivergaro","c":"Italy","y":44.9,"x":9.6},{"n":"Varallo","c":"Italy","y":45.8138,"x":8.2581},{"n":"Tappan","c":"United States","y":41.0269,"x":-73.952},{"n":"Roccadaspide","c":"Italy","y":40.4333,"x":15.2},{"n":"Pottendorf","c":"Austria","y":47.9064,"x":16.3908},{"n":"Cochituate","c":"United States","y":42.329,"x":-71.3576},{"n":"Ferrol","c":"Philippines","y":12.3383,"x":121.9386},{"n":"Amarkantak","c":"India","y":22.6751,"x":81.7596},{"n":"St. Johnsbury","c":"United States","y":44.4552,"x":-72.0115},{"n":"Saint-Just-sur-Loire","c":"France","y":45.5003,"x":4.2406},{"n":"Yakshur-Bod'ya","c":"Russia","y":57.1883,"x":53.1592},{"n":"Pelluhue","c":"Chile","y":-35.8333,"x":-72.6333},{"n":"Massanet de la Selva","c":"Spain","y":41.734,"x":2.673},{"n":"Whitinsville","c":"United States","y":42.1146,"x":-71.6688},{"n":"Labrador City","c":"Canada","y":52.95,"x":-66.9167},{"n":"Feignies","c":"France","y":50.3022,"x":3.9181},{"n":"Altavilla Silentina","c":"Italy","y":40.5333,"x":15.1333},{"n":"Neckartenzlingen","c":"Germany","y":48.5892,"x":9.2461},{"n":"Lake Lorraine","c":"United States","y":30.4407,"x":-86.5657},{"n":"Chichimila","c":"Mexico","y":20.6308,"x":-88.2172},{"n":"Coundon","c":"United Kingdom","y":54.6637,"x":-1.6341},{"n":"Ikaalinen","c":"Finland","y":61.7694,"x":23.0681},{"n":"Spino d'Adda","c":"Italy","y":45.4,"x":9.5},{"n":"Seward","c":"United States","y":40.9099,"x":-97.0957},{"n":"Midland Park","c":"United States","y":40.9952,"x":-74.1411},{"n":"Beaumont","c":"Belgium","y":50.2355,"x":4.2383},{"n":"Moapa Valley","c":"United States","y":36.6078,"x":-114.4566},{"n":"Algarrobo","c":"Spain","y":36.7667,"x":-4.0333},{"n":"Faverges","c":"France","y":45.7467,"x":6.2939},{"n":"Ensdorf","c":"Germany","y":49.3,"x":6.7667},{"n":"Huescar","c":"Spain","y":37.8,"x":-2.5333},{"n":"Rives","c":"France","y":45.3508,"x":5.5022},{"n":"Asnes","c":"Norway","y":60.6536,"x":12.1531},{"n":"West Mersea","c":"United Kingdom","y":51.7784,"x":0.9168},{"n":"Camerota","c":"Italy","y":40.033,"x":15.3699},{"n":"Campli","c":"Italy","y":42.7261,"x":13.6861},{"n":"Lemwerder","c":"Germany","y":53.1667,"x":8.6167},{"n":"Klawer","c":"South Africa","y":-31.7833,"x":18.6167},{"n":"Fukaura","c":"Japan","y":40.6481,"x":139.9278},{"n":"Gioiosa Marea","c":"Italy","y":38.1667,"x":14.9},{"n":"Durcal","c":"Spain","y":36.9833,"x":-3.5667},{"n":"Tarabai","c":"Brazil","y":-22.3028,"x":-51.5589},{"n":"Corbin","c":"United States","y":36.9321,"x":-84.1004},{"n":"Ferlach","c":"Austria","y":46.5269,"x":14.3019},{"n":"Marathonas","c":"Greece","y":38.155,"x":23.9636},{"n":"Arnoldstein","c":"Austria","y":46.5506,"x":13.7039},{"n":"Skaneateles","c":"United States","y":42.9321,"x":-76.4131},{"n":"Cooma","c":"Australia","y":-36.235,"x":149.1258},{"n":"Riverdale Park","c":"United States","y":38.9642,"x":-76.9266},{"n":"Shenango","c":"United States","y":40.9493,"x":-80.3059},{"n":"Donnacona","c":"Canada","y":46.6747,"x":-71.7294},{"n":"Wurenlos","c":"Switzerland","y":47.4418,"x":8.3647},{"n":"Fuentes de Andalucia","c":"Spain","y":37.4667,"x":-5.3333},{"n":"Ugine","c":"France","y":45.7528,"x":6.4197},{"n":"Mimizan","c":"France","y":44.2008,"x":-1.2286},{"n":"Swanzey","c":"United States","y":42.8625,"x":-72.2961},{"n":"Saint-Jean-Bonnefonds","c":"France","y":45.4511,"x":4.4464},{"n":"Hedon","c":"United Kingdom","y":53.7395,"x":-0.1948},{"n":"Polykastro","c":"Greece","y":40.9954,"x":22.5714},{"n":"West Bridgewater","c":"United States","y":42.0214,"x":-71.0267},{"n":"Grabs","c":"Switzerland","y":47.1831,"x":9.45},{"n":"Pegognaga","c":"Italy","y":45,"x":10.85},{"n":"Hanga Roa","c":"Chile","y":-27.1492,"x":-109.4323},{"n":"Cappeln","c":"Germany","y":52.8122,"x":8.1144},{"n":"Roda de Bara","c":"Spain","y":41.1857,"x":1.4568},{"n":"Feldkirchen bei Graz","c":"Austria","y":47.0125,"x":15.4425},{"n":"Cassolnovo","c":"Italy","y":45.3667,"x":8.8},{"n":"Unionville","c":"United States","y":35.0716,"x":-80.5173},{"n":"Gunnison","c":"United States","y":38.5455,"x":-106.9225},{"n":"Ibiraiaras","c":"Brazil","y":-28.37,"x":-51.6358},{"n":"Wiesendangen","c":"Switzerland","y":47.5222,"x":8.7911},{"n":"Church Gresley","c":"United Kingdom","y":52.76,"x":-1.566},{"n":"K'ajaran","c":"Armenia","y":39.1511,"x":46.16},{"n":"Spezzano Albanese","c":"Italy","y":39.6667,"x":16.3167},{"n":"Carhue","c":"Argentina","y":-37.1667,"x":-62.7333},{"n":"Merzhausen","c":"Germany","y":47.9664,"x":7.8286},{"n":"Santi Cosma e Damiano","c":"Italy","y":41.3,"x":13.8167},{"n":"Cisano Bergamasco","c":"Italy","y":45.7431,"x":9.4708},{"n":"San Vicente Pacaya","c":"Guatemala","y":14.4161,"x":-90.6392},{"n":"La Grandeza","c":"Mexico","y":15.5333,"x":-92.2333},{"n":"Souk el Had","c":"Algeria","y":36.6909,"x":3.5889},{"n":"Morrow","c":"United States","y":33.5816,"x":-84.3392},{"n":"Gueugnon","c":"France","y":46.6011,"x":4.0608},{"n":"Maasland","c":"Netherlands","y":51.9333,"x":4.2667},{"n":"Atlantida","c":"Uruguay","y":-34.7701,"x":-55.7613},{"n":"Abel Figueiredo","c":"Brazil","y":-4.9539,"x":-48.3928},{"n":"Semenovka","c":"Russia","y":56.6519,"x":47.9756},{"n":"Grazzanise","c":"Italy","y":41.0833,"x":14.1},{"n":"Southgate","c":"Canada","y":44.1,"x":-80.5833},{"n":"Belzyce","c":"Poland","y":51.1833,"x":22.2667},{"n":"Downside","c":"United Kingdom","y":51.3117,"x":-0.4095},{"n":"Sapri","c":"Italy","y":40.0667,"x":15.6333},{"n":"Alfdorf","c":"Germany","y":48.8453,"x":9.7189},{"n":"Sandston","c":"United States","y":37.512,"x":-77.3149},{"n":"Cles","c":"Italy","y":46.3667,"x":11.0333},{"n":"Vodnany","c":"Czechia","y":49.148,"x":14.1751},{"n":"Socha","c":"Colombia","y":5.9978,"x":-72.6922},{"n":"Kato Achaia","c":"Greece","y":38.15,"x":21.55},{"n":"Earl","c":"United States","y":40.1142,"x":-76.0959},{"n":"Trino","c":"Italy","y":45.1953,"x":8.2961},{"n":"Roccarainola","c":"Italy","y":40.9667,"x":14.5667},{"n":"Belle Plaine","c":"United States","y":44.6188,"x":-93.7643},{"n":"Baricella","c":"Italy","y":44.6475,"x":11.5353},{"n":"Antonio Martins","c":"Brazil","y":-6.2128,"x":-37.9058},{"n":"Sobotka","c":"Poland","y":50.8986,"x":16.7444},{"n":"Nuevo","c":"United States","y":33.8011,"x":-117.1415},{"n":"Wimereux","c":"France","y":50.7697,"x":1.61},{"n":"Enoch","c":"United States","y":37.767,"x":-113.0449},{"n":"Caulonia","c":"Italy","y":38.3833,"x":16.4167},{"n":"Gerbstedt","c":"Germany","y":51.6331,"x":11.6167},{"n":"Nuriootpa","c":"Australia","y":-34.4667,"x":138.9833},{"n":"Rodalben","c":"Germany","y":49.2397,"x":7.6425},{"n":"Cajvana","c":"Romania","y":47.7044,"x":25.9694},{"n":"Pedro Avelino","c":"Brazil","y":-5.5219,"x":-36.3878},{"n":"Tregunc","c":"France","y":47.8558,"x":-3.8519},{"n":"McNab/Braeside","c":"Canada","y":45.45,"x":-76.5},{"n":"Dronero","c":"Italy","y":44.4667,"x":7.3667},{"n":"Puilboreau","c":"France","y":46.1858,"x":-1.1172},{"n":"Vernole","c":"Italy","y":40.2833,"x":18.3},{"n":"Grubbenvorst","c":"Netherlands","y":51.4189,"x":6.1431},{"n":"Utuado","c":"Puerto Rico","y":18.2697,"x":-66.7049},{"n":"Canfield","c":"United States","y":41.0315,"x":-80.7672},{"n":"Eugendorf","c":"Austria","y":47.8669,"x":13.1242},{"n":"Brioude","c":"France","y":45.2942,"x":3.3842},{"n":"Rouadi","c":"Morocco","y":35.1403,"x":-4.1347},{"n":"Elsa","c":"United States","y":26.2978,"x":-97.9936},{"n":"Haapavesi","c":"Finland","y":64.1375,"x":25.3667},{"n":"Assoul","c":"Morocco","y":31.9458,"x":-5.2083},{"n":"Murgeni","c":"Romania","y":46.2,"x":28.0167},{"n":"Scorrano","c":"Italy","y":40.0902,"x":18.2999},{"n":"General Toshevo","c":"Bulgaria","y":43.7006,"x":28.0367},{"n":"Austell","c":"United States","y":33.82,"x":-84.645},{"n":"Faro","c":"Brazil","y":-2.1708,"x":-56.745},{"n":"Moncofar","c":"Spain","y":39.8025,"x":-0.1339},{"n":"Montfort-sur-Meu","c":"France","y":48.1381,"x":-1.9558},{"n":"Jettingen-Scheppach","c":"Germany","y":48.3833,"x":10.4333},{"n":"Jacuipe","c":"Brazil","y":-8.8419,"x":-35.46},{"n":"Urbania","c":"Italy","y":43.6678,"x":12.5221},{"n":"Vipiteno","c":"Italy","y":46.8931,"x":11.4296},{"n":"Centallo","c":"Italy","y":44.5,"x":7.5833},{"n":"Esher","c":"United Kingdom","y":51.3691,"x":-0.365},{"n":"Grasbrunn","c":"Germany","y":48.0789,"x":11.7436},{"n":"Venegono Inferiore","c":"Italy","y":45.7333,"x":8.9},{"n":"Huautepec","c":"Mexico","y":18.1,"x":-96.7833},{"n":"Fontanellato","c":"Italy","y":44.8825,"x":10.1558},{"n":"Hartha","c":"Germany","y":51.0978,"x":12.9772},{"n":"Cerrik","c":"Albania","y":41.0333,"x":19.9833},{"n":"Dois Irmaos do Tocantins","c":"Brazil","y":-9.2578,"x":-49.0639},{"n":"Les Arcs","c":"France","y":43.4633,"x":6.4789},{"n":"East Vincent","c":"United States","y":40.1684,"x":-75.5946},{"n":"Macdonald","c":"Canada","y":49.6725,"x":-97.4472},{"n":"Durgeli","c":"Russia","y":42.6656,"x":47.2967},{"n":"Schwarzenbach an der Saale","c":"Germany","y":50.2208,"x":11.9333},{"n":"Myadzyel","c":"Belarus","y":54.8756,"x":26.9386},{"n":"Bagneres-de-Bigorre","c":"France","y":43.0642,"x":0.1497},{"n":"Capellades","c":"Spain","y":41.5319,"x":1.6867},{"n":"Crozet","c":"United States","y":38.0645,"x":-78.6962},{"n":"Chuarrancho","c":"Guatemala","y":14.8167,"x":-90.5167},{"n":"Navarcles","c":"Spain","y":41.7532,"x":1.9034},{"n":"Cava Manara","c":"Italy","y":45.1333,"x":9.1},{"n":"Araguacema","c":"Brazil","y":-8.8039,"x":-49.5558},{"n":"Senas","c":"France","y":43.7444,"x":5.0786},{"n":"Champagne-sur-Seine","c":"France","y":48.3972,"x":2.8011},{"n":"Pollock Pines","c":"United States","y":38.7564,"x":-120.5904},{"n":"Sassoferrato","c":"Italy","y":43.4275,"x":12.8565},{"n":"Sao Miguel de Taipu","c":"Brazil","y":-7.25,"x":-35.21},{"n":"Outokumpu","c":"Finland","y":62.725,"x":29.0167},{"n":"Gilford","c":"United States","y":43.5581,"x":-71.385},{"n":"Magaramkent","c":"Russia","y":41.6159,"x":48.348},{"n":"Laurentino","c":"Brazil","y":-27.2169,"x":-49.7328},{"n":"Zibido San Giacomo","c":"Italy","y":45.3667,"x":9.1167},{"n":"Larose","c":"United States","y":29.5669,"x":-90.3751},{"n":"Lanton","c":"France","y":44.7039,"x":-1.0353},{"n":"Le Perray-en-Yvelines","c":"France","y":48.6942,"x":1.8542},{"n":"Fundulea","c":"Romania","y":44.4528,"x":26.5153},{"n":"Murston","c":"United Kingdom","y":51.341,"x":0.7524},{"n":"Eu","c":"France","y":50.0472,"x":1.4197},{"n":"Waging am See","c":"Germany","y":47.9333,"x":12.7333},{"n":"Brook Highland","c":"United States","y":33.4359,"x":-86.6849},{"n":"Saint-Mandrier-sur-Mer","c":"France","y":43.0761,"x":5.9278},{"n":"Baie-Saint-Paul","c":"Canada","y":47.45,"x":-70.5},{"n":"Onishi","c":"Japan","y":36.1606,"x":139.0619},{"n":"Ayotzintepec","c":"Mexico","y":17.6667,"x":-96.1333},{"n":"Bo Phloi","c":"Thailand","y":14.3253,"x":99.5147},{"n":"Pleurtuit","c":"France","y":48.5797,"x":-2.0583},{"n":"Sains-en-Gohelle","c":"France","y":50.4447,"x":2.6836},{"n":"De Soto","c":"United States","y":38.141,"x":-90.5609},{"n":"San Benedetto Po","c":"Italy","y":45.0333,"x":10.9167},{"n":"Sao Tome das Letras","c":"Brazil","y":-21.7219,"x":-44.985},{"n":"Bouchemaine","c":"France","y":47.4223,"x":-0.6089},{"n":"Nappanee","c":"United States","y":41.4452,"x":-85.9941},{"n":"Merritt","c":"Canada","y":50.1128,"x":-120.7897},{"n":"Treze de Maio","c":"Brazil","y":-28.5589,"x":-49.1478},{"n":"Atherton","c":"United States","y":37.4539,"x":-122.2032},{"n":"Bellante","c":"Italy","y":42.75,"x":13.8},{"n":"Stryn","c":"Norway","y":61.8386,"x":6.8628},{"n":"Nienhagen","c":"Germany","y":52.5562,"x":10.1044},{"n":"Delfinopolis","c":"Brazil","y":-20.3439,"x":-46.8539},{"n":"Saint-Rambert-d'Albon","c":"France","y":45.2939,"x":4.8169},{"n":"Bluewater","c":"Canada","y":43.45,"x":-81.6},{"n":"Krasnyy Klyuch","c":"Russia","y":55.3842,"x":56.6483},{"n":"Nibley","c":"United States","y":41.6725,"x":-111.8454},{"n":"Dalcahue","c":"Chile","y":-42.3796,"x":-73.6473},{"n":"Walled Lake","c":"United States","y":42.538,"x":-83.4786},{"n":"Santana dos Garrotes","c":"Brazil","y":-7.3839,"x":-37.9858},{"n":"Machacalis","c":"Brazil","y":-17.0769,"x":-40.7158},{"n":"Manduel","c":"France","y":43.8183,"x":4.4733},{"n":"Buttigliera Alta","c":"Italy","y":45.0667,"x":7.4167},{"n":"East Zorra-Tavistock","c":"Canada","y":43.2333,"x":-80.7833},{"n":"Pozzuolo del Friuli","c":"Italy","y":45.9681,"x":13.1969},{"n":"Museros","c":"Spain","y":39.5658,"x":-0.3411},{"n":"Orosei","c":"Italy","y":40.3797,"x":9.6942},{"n":"San Jose de Cusmapa","c":"Nicaragua","y":13.2884,"x":-86.6554},{"n":"Porrentruy","c":"Switzerland","y":47.4167,"x":7.0833},{"n":"Pinhoe","c":"United Kingdom","y":50.7407,"x":-3.4672},{"n":"Holle","c":"Germany","y":52.0917,"x":10.1583},{"n":"Bednodem'yanovsk","c":"Russia","y":53.9333,"x":43.1833},{"n":"Akhmeta","c":"Georgia","y":42.0333,"x":45.2},{"n":"Boavita","c":"Colombia","y":6.3308,"x":-72.5842},{"n":"Pantigliate","c":"Italy","y":45.4353,"x":9.3522},{"n":"Eno","c":"Finland","y":62.7997,"x":30.1497},{"n":"Salento","c":"Colombia","y":4.6372,"x":-75.5708},{"n":"Letavertes","c":"Hungary","y":47.3833,"x":21.9},{"n":"Winsted","c":"United States","y":41.9268,"x":-73.0675},{"n":"Ko Pha-Ngan","c":"Thailand","y":9.7176,"x":99.9949},{"n":"Isliam-Terek","c":"Ukraine","y":45.2256,"x":35.2033},{"n":"Novy Bydzov","c":"Czechia","y":50.2416,"x":15.4909},{"n":"Trelissac","c":"France","y":45.1958,"x":0.7825},{"n":"Sao Tomas de Aquino","c":"Brazil","y":-20.7839,"x":-47.0978},{"n":"Chauvigny","c":"France","y":46.5686,"x":0.6467},{"n":"Bonne Terre","c":"United States","y":37.9209,"x":-90.5426},{"n":"Attica","c":"United States","y":42.8257,"x":-78.249},{"n":"Saveni","c":"Romania","y":47.9533,"x":26.8589},{"n":"Chatel-Saint-Denis","c":"Switzerland","y":46.5269,"x":6.9011},{"n":"Etrechy","c":"France","y":48.4931,"x":2.1911},{"n":"Calipatria","c":"United States","y":33.1493,"x":-115.5056},{"n":"Mead","c":"United States","y":47.7795,"x":-117.35},{"n":"Green Brook","c":"United States","y":40.6038,"x":-74.4825},{"n":"Novosokolniki","c":"Russia","y":56.3333,"x":30.15},{"n":"Montellano","c":"Spain","y":36.9833,"x":-5.5667},{"n":"Campomorone","c":"Italy","y":44.5069,"x":8.8918},{"n":"Salzweg","c":"Germany","y":48.6158,"x":13.4825},{"n":"Parkwood","c":"United States","y":47.5266,"x":-122.5986},{"n":"Capetinga","c":"Brazil","y":-20.6158,"x":-47.0539},{"n":"Deeping Saint James","c":"United Kingdom","y":52.6717,"x":-0.2995},{"n":"Colonia Venustiano Carranza","c":"Mexico","y":32.2275,"x":-115.1703},{"n":"Sedlcany","c":"Czechia","y":49.6606,"x":14.4267},{"n":"Ebermannstadt","c":"Germany","y":49.7806,"x":11.1848},{"n":"Oued Naanaa","c":"Morocco","y":33.0167,"x":-7.3333},{"n":"Timlilt","c":"Morocco","y":31.0336,"x":-9.1392},{"n":"Wallersdorf","c":"Germany","y":48.7333,"x":12.75},{"n":"Asciano","c":"Italy","y":43.2342,"x":11.5608},{"n":"Saint-Georges","c":"Belgium","y":50.6,"x":5.35},{"n":"New Romney","c":"United Kingdom","y":50.985,"x":0.941},{"n":"Krasnyy Chikoy","c":"Russia","y":50.3667,"x":108.75},{"n":"Southam","c":"United Kingdom","y":52.252,"x":-1.39},{"n":"Eiterfeld","c":"Germany","y":50.7667,"x":9.8},{"n":"Assebbab","c":"Morocco","y":35.1333,"x":-3.0833},{"n":"Naque","c":"Brazil","y":-19.23,"x":-42.3278},{"n":"Pinson","c":"United States","y":33.7057,"x":-86.6674},{"n":"Stoneham-et-Tewkesbury","c":"Canada","y":47.1667,"x":-71.4333},{"n":"Rishton","c":"United Kingdom","y":53.7701,"x":-2.4187},{"n":"Ruhpolding","c":"Germany","y":47.7667,"x":12.65},{"n":"Gryfow Slaski","c":"Poland","y":51.0272,"x":15.4192},{"n":"Palmitinho","c":"Brazil","y":-27.355,"x":-53.555},{"n":"Douar Oulad Amer","c":"Morocco","y":32.0697,"x":-7.2142},{"n":"Novo Areal","c":"Brazil","y":-7.0478,"x":-35.9308},{"n":"Katlenburg-Lindau","c":"Germany","y":51.6825,"x":10.0992},{"n":"Benalup de Sidonia","c":"Spain","y":36.3333,"x":-5.8},{"n":"Serino","c":"Italy","y":40.85,"x":14.875},{"n":"Bammental","c":"Germany","y":49.3508,"x":8.7758},{"n":"Sidi Yahia Sawad","c":"Morocco","y":32.6833,"x":-5.5833},{"n":"Tlilapan","c":"Mexico","y":18.8,"x":-97.1},{"n":"Kupiansk","c":"Ukraine","y":49.7064,"x":37.6167},{"n":"Schonkirchen","c":"Germany","y":54.3417,"x":10.2242},{"n":"Amaral Ferrador","c":"Brazil","y":-30.875,"x":-52.2528},{"n":"Marble Falls","c":"United States","y":30.5649,"x":-98.2768},{"n":"Llissa de Vall","c":"Spain","y":41.5936,"x":2.2431},{"n":"El Triunfo","c":"El Salvador","y":13.5589,"x":-88.43},{"n":"Monte San Vito","c":"Italy","y":43.6005,"x":13.2711},{"n":"Okhansk","c":"Russia","y":57.7167,"x":55.3833},{"n":"Bridge of Allan","c":"United Kingdom","y":56.155,"x":-3.942},{"n":"Montluel","c":"France","y":45.8517,"x":5.0564},{"n":"Erndtebruck","c":"Germany","y":50.9889,"x":8.2556},{"n":"Manoppello","c":"Italy","y":42.2578,"x":14.0597},{"n":"Ellerau","c":"Germany","y":53.75,"x":9.9167},{"n":"Mantta","c":"Finland","y":62.0292,"x":24.6236},{"n":"Asbestos","c":"Canada","y":45.7667,"x":-71.9333},{"n":"Junco do Serido","c":"Brazil","y":-6.9969,"x":-36.7128},{"n":"Herscheid","c":"Germany","y":51.1772,"x":7.7458},{"n":"Lavrinhas","c":"Brazil","y":-22.5708,"x":-44.9022},{"n":"Fort Myers Beach","c":"United States","y":26.4324,"x":-81.9168},{"n":"Theix","c":"France","y":47.6292,"x":-2.6558},{"n":"Oberndorf bei Salzburg","c":"Austria","y":47.9417,"x":12.9417},{"n":"Dunbar","c":"United States","y":38.3688,"x":-81.7345},{"n":"Mogyorod","c":"Hungary","y":47.6,"x":19.25},{"n":"Nambu","c":"Japan","y":35.2425,"x":138.4861},{"n":"Roncoferraro","c":"Italy","y":45.1342,"x":10.9524},{"n":"Casteggio","c":"Italy","y":45.0167,"x":9.1333},{"n":"Cologny","c":"Switzerland","y":46.2167,"x":6.1833},{"n":"Serra Redonda","c":"Brazil","y":-7.1778,"x":-35.675},{"n":"Neukirchen","c":"Germany","y":50.8667,"x":9.3333},{"n":"Borgo a Mozzano","c":"Italy","y":43.9797,"x":10.5467},{"n":"Hensies","c":"Belgium","y":50.4328,"x":3.6847},{"n":"Stadtroda","c":"Germany","y":50.85,"x":11.7333},{"n":"Trith-Saint-Leger","c":"France","y":50.3256,"x":3.4858},{"n":"Buzias","c":"Romania","y":45.65,"x":21.6},{"n":"Genadendal","c":"South Africa","y":-34.0333,"x":19.55},{"n":"Byron Center","c":"United States","y":42.8121,"x":-85.7279},{"n":"Homestead Meadows South","c":"United States","y":31.811,"x":-106.1643},{"n":"Portage Lakes","c":"United States","y":41.0034,"x":-81.5347},{"n":"Meridianville","c":"United States","y":34.8729,"x":-86.5722},{"n":"Wiernsheim","c":"Germany","y":48.89,"x":8.8506},{"n":"Homeland","c":"United States","y":33.7459,"x":-117.1132},{"n":"Osceola","c":"United States","y":35.6942,"x":-89.9934},{"n":"Eberdingen","c":"Germany","y":48.8794,"x":8.9653},{"n":"Clarkson","c":"United States","y":43.2533,"x":-77.9228},{"n":"Neustadt-Glewe","c":"Germany","y":53.3794,"x":11.5883},{"n":"Andreapol","c":"Russia","y":56.65,"x":32.2667},{"n":"Borgo","c":"Italy","y":46.0512,"x":11.4576},{"n":"Chiang Kham","c":"Thailand","y":19.5223,"x":100.3034},{"n":"Central de Minas","c":"Brazil","y":-18.7619,"x":-41.3058},{"n":"Besao","c":"Philippines","y":17.1,"x":120.8167},{"n":"Guia Lopes","c":"Brazil","y":-20.245,"x":-46.3658},{"n":"Marshfield","c":"United Kingdom","y":51.5439,"x":-3.0469},{"n":"Flatwoods","c":"United States","y":38.521,"x":-82.7195},{"n":"Sharhorod","c":"Ukraine","y":48.75,"x":28.0833},{"n":"Santa Filomena do Maranhao","c":"Brazil","y":-5.5008,"x":-44.5608},{"n":"Ruinen","c":"Netherlands","y":52.7633,"x":6.3564},{"n":"Petropavlivka","c":"Ukraine","y":48.4549,"x":36.4394},{"n":"Segarcea","c":"Romania","y":44.0919,"x":23.7334},{"n":"Quievrain","c":"Belgium","y":50.4049,"x":3.6829},{"n":"Quarrington","c":"United Kingdom","y":52.987,"x":-0.4304},{"n":"Fair Plain","c":"United States","y":42.0823,"x":-86.4515},{"n":"Shibayama","c":"Japan","y":35.6931,"x":140.4142},{"n":"Naquera","c":"Spain","y":39.6589,"x":-0.4263},{"n":"Mount Ivy","c":"United States","y":41.1926,"x":-74.0297},{"n":"Nova Ibia","c":"Brazil","y":-13.81,"x":-39.6258},{"n":"Sommatino","c":"Italy","y":37.3369,"x":13.9975},{"n":"Milton-Freewater","c":"United States","y":45.9348,"x":-118.3913},{"n":"Ceyrat","c":"France","y":45.7328,"x":3.0633},{"n":"Buttstadt","c":"Germany","y":51.1167,"x":11.4167},{"n":"Dietenheim","c":"Germany","y":48.2119,"x":10.0733},{"n":"Itteville","c":"France","y":48.5142,"x":2.3419},{"n":"Frouard","c":"France","y":48.7606,"x":6.1289},{"n":"Ichemrarn","c":"Morocco","y":31.0961,"x":-9.17},{"n":"Horbranz","c":"Austria","y":47.5553,"x":9.7528},{"n":"Coppenbrugge","c":"Germany","y":52.1203,"x":9.5493},{"n":"Nyons","c":"France","y":44.3608,"x":5.1406},{"n":"River Park","c":"United States","y":27.3214,"x":-80.3307},{"n":"Marne","c":"Germany","y":53.95,"x":9},{"n":"Sakyla","c":"Finland","y":61.05,"x":22.35},{"n":"Novska","c":"Croatia","y":45.3333,"x":16.9833},{"n":"Huron-Kinloss","c":"Canada","y":44.05,"x":-81.5333},{"n":"Lazise","c":"Italy","y":45.5053,"x":10.7325},{"n":"Brunstatt","c":"France","y":47.7233,"x":7.3228},{"n":"Sausalito","c":"United States","y":37.858,"x":-122.4932},{"n":"Alecrim","c":"Brazil","y":-27.655,"x":-54.7639},{"n":"Martignacco","c":"Italy","y":46.1,"x":13.1333},{"n":"Senise","c":"Italy","y":40.1333,"x":16.2833},{"n":"Periquito","c":"Brazil","y":-19.1578,"x":-42.2339},{"n":"South Lockport","c":"United States","y":43.1377,"x":-78.6864},{"n":"Chadegan","c":"Iran","y":32.7683,"x":50.6286},{"n":"Barnesville","c":"United States","y":33.0509,"x":-84.1527},{"n":"Edenkoben","c":"Germany","y":49.2839,"x":8.1272},{"n":"Bomlitz","c":"Germany","y":52.9,"x":9.65},{"n":"Rungis","c":"France","y":48.7483,"x":2.3497},{"n":"Tlapanaloya","c":"Mexico","y":19.9358,"x":-99.1019},{"n":"Robecco sul Naviglio","c":"Italy","y":45.4333,"x":8.8833},{"n":"Altmannstein","c":"Germany","y":48.9,"x":11.65},{"n":"Laneuveville-devant-Nancy","c":"France","y":48.6553,"x":6.2314},{"n":"Ittre","c":"Belgium","y":50.65,"x":4.2667},{"n":"Kirkleatham","c":"United Kingdom","y":54.5833,"x":-1.0833},{"n":"Oliena","c":"Italy","y":40.271,"x":9.4028},{"n":"Newbury","c":"United States","y":42.7706,"x":-70.8747},{"n":"Berrien Springs","c":"United States","y":41.9474,"x":-86.3403},{"n":"Mzefroune","c":"Morocco","y":34.8422,"x":-5.6842},{"n":"St. Helena","c":"United States","y":38.5063,"x":-122.4682},{"n":"Polch","c":"Germany","y":50.3011,"x":7.3167},{"n":"Tismana","c":"Romania","y":45.0506,"x":22.9489},{"n":"Molochansk","c":"Ukraine","y":47.2038,"x":35.5985},{"n":"Hudson Falls","c":"United States","y":43.3042,"x":-73.5818},{"n":"Ciboure","c":"France","y":43.3853,"x":-1.6678},{"n":"Saulx-les-Chartreux","c":"France","y":48.6922,"x":2.2664},{"n":"Veitsbronn","c":"Germany","y":49.5108,"x":10.8894},{"n":"Sainte-Pazanne","c":"France","y":47.1031,"x":-1.8108},{"n":"Ungheni","c":"Romania","y":46.4858,"x":24.4608},{"n":"Noble","c":"United States","y":35.1385,"x":-97.371},{"n":"Gulf Park Estates","c":"United States","y":30.3801,"x":-88.7581},{"n":"Caudan","c":"France","y":47.8089,"x":-3.3425},{"n":"Lastrup","c":"Germany","y":52.7667,"x":7.8333},{"n":"Fehraltorf","c":"Switzerland","y":47.3861,"x":8.7547},{"n":"Sotuta","c":"Mexico","y":20.5968,"x":-89.0082},{"n":"Settimo San Pietro","c":"Italy","y":39.291,"x":9.1853},{"n":"Redondo","c":"Portugal","y":38.6464,"x":-7.5464},{"n":"Pancota","c":"Romania","y":46.3225,"x":21.6869},{"n":"Sao Bras","c":"Brazil","y":-10.1278,"x":-36.9006},{"n":"Irai de Minas","c":"Brazil","y":-18.9839,"x":-47.4608},{"n":"Honley","c":"United Kingdom","y":53.6027,"x":-1.7921},{"n":"Mallersdorf-Pfaffenberg","c":"Germany","y":48.7667,"x":12.2333},{"n":"In Guezzam","c":"Algeria","y":19.5686,"x":5.7722},{"n":"Acigne","c":"France","y":48.1342,"x":-1.5367},{"n":"Bothwell","c":"United Kingdom","y":55.8023,"x":-4.0662},{"n":"Albisola Marina","c":"Italy","y":44.3273,"x":8.5031},{"n":"Tumut","c":"Australia","y":-35.3039,"x":148.2233},{"n":"Diepoldsau","c":"Switzerland","y":47.3831,"x":9.65},{"n":"Coteau-du-Lac","c":"Canada","y":45.3,"x":-74.18},{"n":"Aigina","c":"Greece","y":37.7467,"x":23.4275},{"n":"Carnarvon","c":"South Africa","y":-30.9667,"x":22.1333},{"n":"Hecklingen","c":"Germany","y":51.85,"x":11.5167},{"n":"Kaitaia","c":"New Zealand","y":-35.1125,"x":173.2628},{"n":"Grassau","c":"Germany","y":47.7789,"x":12.45},{"n":"Shinmachi","c":"Japan","y":35.1917,"x":140.3486},{"n":"Moringen","c":"Germany","y":51.7,"x":9.8667},{"n":"San Clemente","c":"Spain","y":39.4039,"x":-2.4294},{"n":"Sunndalsora","c":"Norway","y":62.6128,"x":8.6342},{"n":"Piskivka","c":"Ukraine","y":50.7078,"x":29.595},{"n":"Sant'Agostino","c":"Italy","y":44.792,"x":11.3869},{"n":"Meleiro","c":"Brazil","y":-28.8289,"x":-49.6358},{"n":"Groesbeck","c":"United States","y":39.2292,"x":-84.5964},{"n":"Litochoro","c":"Greece","y":40.1028,"x":22.5069},{"n":"Chabeuil","c":"France","y":44.8997,"x":5.02},{"n":"Springs","c":"United States","y":41.0212,"x":-72.1584},{"n":"Marksville","c":"United States","y":31.1247,"x":-92.0652},{"n":"Truth or Consequences","c":"United States","y":33.1864,"x":-107.2589},{"n":"Mondelange","c":"France","y":49.2625,"x":6.1686},{"n":"Les Essarts-le-Roi","c":"France","y":48.7167,"x":1.8944},{"n":"Nanteuil-les-Meaux","c":"France","y":48.9297,"x":2.8969},{"n":"Polessk","c":"Russia","y":54.8667,"x":21.1},{"n":"Surgeres","c":"France","y":46.1081,"x":-0.7517},{"n":"Laurium","c":"United States","y":47.2351,"x":-88.4382},{"n":"Sarmasu","c":"Romania","y":46.7536,"x":24.1667},{"n":"Pignola","c":"Italy","y":40.5667,"x":15.7833},{"n":"Blythebridge","c":"United Kingdom","y":52.9704,"x":-2.0709},{"n":"Archbald","c":"United States","y":41.5077,"x":-75.5453},{"n":"Busseto","c":"Italy","y":44.9794,"x":10.0433},{"n":"Neukieritzsch","c":"Germany","y":51.1514,"x":12.4097},{"n":"Puerto Serrano","c":"Spain","y":36.9333,"x":-5.55},{"n":"Schliersee","c":"Germany","y":47.7333,"x":11.8667},{"n":"Pinotepa de Don Luis","c":"Mexico","y":16.4333,"x":-97.9667},{"n":"Willis","c":"United States","y":30.4314,"x":-95.4832},{"n":"Algrange","c":"France","y":49.3594,"x":6.0483},{"n":"Neo Karlovasi","c":"Greece","y":37.7917,"x":26.7051},{"n":"Cannonvale","c":"Australia","y":-20.2863,"x":148.6866},{"n":"Zaouiat Sidi Hammou Ben Hmida","c":"Morocco","y":31.7547,"x":-9.3717},{"n":"Krasno nad Kysucou","c":"Slovakia","y":49.3978,"x":18.8364},{"n":"Gradisca d'Isonzo","c":"Italy","y":45.8833,"x":13.5},{"n":"Herbignac","c":"France","y":47.4489,"x":-2.3175},{"n":"Eyguieres","c":"France","y":43.6953,"x":5.0311},{"n":"Ustaritz","c":"France","y":43.3994,"x":-1.4564},{"n":"Formigueiro","c":"Brazil","y":-30,"x":-53.4989},{"n":"Rancho Calaveras","c":"United States","y":38.1248,"x":-120.857},{"n":"Tenamaxtlan","c":"Mexico","y":20.2167,"x":-104.167},{"n":"The Blue Mountains","c":"Canada","y":44.4833,"x":-80.3833},{"n":"Meopham","c":"United Kingdom","y":51.364,"x":0.36},{"n":"Aridaia","c":"Greece","y":40.975,"x":22.0583},{"n":"Tuzamapan","c":"Mexico","y":20.0833,"x":-97.5667},{"n":"Cerano","c":"Italy","y":45.4,"x":8.7833},{"n":"Eston","c":"United Kingdom","y":54.56,"x":-1.144},{"n":"Abercynon","c":"United Kingdom","y":51.6445,"x":-3.3267},{"n":"Yarkovo","c":"Russia","y":57.4081,"x":67.0825},{"n":"Kentfield","c":"United States","y":37.9481,"x":-122.5496},{"n":"Labico","c":"Italy","y":41.7833,"x":12.8833},{"n":"Salto da Divisa","c":"Brazil","y":-16.0028,"x":-39.9469},{"n":"Limours","c":"France","y":48.6456,"x":2.0761},{"n":"Kiel","c":"United States","y":43.9167,"x":-88.0266},{"n":"Gouverneur","c":"United States","y":44.3673,"x":-75.4838},{"n":"Racari","c":"Romania","y":44.6333,"x":25.7333},{"n":"Tubinskiy","c":"Russia","y":52.8892,"x":58.2225},{"n":"Kistelek","c":"Hungary","y":46.4731,"x":19.98},{"n":"Villasor","c":"Italy","y":39.3809,"x":8.9413},{"n":"Frutigen","c":"Switzerland","y":46.5831,"x":7.6497},{"n":"Wigton","c":"United Kingdom","y":54.823,"x":-3.159},{"n":"Carlton","c":"United Kingdom","y":52.967,"x":-1.088},{"n":"Wellsville","c":"United States","y":42.1206,"x":-77.9219},{"n":"Grand-Charmont","c":"France","y":47.5272,"x":6.8236},{"n":"Chaek","c":"Kyrgyzstan","y":41.93,"x":74.51},{"n":"Newbridge","c":"United Kingdom","y":51.67,"x":-3.136},{"n":"Schwerzenbach","c":"Switzerland","y":47.3818,"x":8.6559},{"n":"Carnforth","c":"United Kingdom","y":54.123,"x":-2.766},{"n":"Geithain","c":"Germany","y":51.05,"x":12.6833},{"n":"Sapucai-Mirim","c":"Brazil","y":-22.7478,"x":-45.7428},{"n":"Bonndorf im Schwarzwald","c":"Germany","y":47.8194,"x":8.3431},{"n":"Melesse","c":"France","y":48.2172,"x":-1.6961},{"n":"Polgardi","c":"Hungary","y":47.0538,"x":18.3049},{"n":"Lutterbach","c":"France","y":47.7597,"x":7.2806},{"n":"Fuente el Saz","c":"Spain","y":40.6361,"x":-3.5111},{"n":"Marina di Gioiosa Ionica","c":"Italy","y":38.3,"x":16.3333},{"n":"Marcallo con Casone","c":"Italy","y":45.4982,"x":8.8764},{"n":"Camerino","c":"Italy","y":43.1333,"x":13.0667},{"n":"Epone","c":"France","y":48.9558,"x":1.8153},{"n":"Whitewater Region","c":"Canada","y":45.7167,"x":-76.8333},{"n":"Chessy","c":"France","y":48.8803,"x":2.7633},{"n":"Virrat","c":"Finland","y":62.2403,"x":23.7708},{"n":"Ruswil","c":"Switzerland","y":47.0836,"x":8.1261},{"n":"Preesall","c":"United Kingdom","y":53.917,"x":-2.967},{"n":"Meraux","c":"United States","y":29.9284,"x":-89.9179},{"n":"Point Vernon","c":"Australia","y":-25.2538,"x":152.8177},{"n":"Kiefersfelden","c":"Germany","y":47.6167,"x":12.1833},{"n":"Vorozhba","c":"Ukraine","y":51.1749,"x":34.2299},{"n":"Garden Home-Whitford","c":"United States","y":45.4642,"x":-122.7589},{"n":"Kravare","c":"Czechia","y":49.932,"x":18.0048},{"n":"Mezhdurechenskoye","c":"Kazakhstan","y":43.4528,"x":76.7228},{"n":"Lutzelbach","c":"Germany","y":49.788,"x":9.0766},{"n":"St. Augustine Beach","c":"United States","y":29.8414,"x":-81.2713},{"n":"Oppdal","c":"Norway","y":62.5667,"x":9.6},{"n":"Sosnytsia","c":"Ukraine","y":51.5222,"x":32.5017},{"n":"Velika Kladusa","c":"Bosnia And Herzegovina","y":45.1667,"x":15.8},{"n":"Kouango","c":"Central African Republic","y":4.9667,"x":19.9833},{"n":"Warnemunde","c":"Germany","y":54.1753,"x":12.0883},{"n":"Rosny-sur-Seine","c":"France","y":48.9997,"x":1.6317},{"n":"Praia a Mare","c":"Italy","y":39.9167,"x":15.7667},{"n":"Pilawa Gorna","c":"Poland","y":50.6833,"x":16.75},{"n":"Solyanka","c":"Russia","y":46.3889,"x":48.0175},{"n":"Cazenovia","c":"United States","y":42.9122,"x":-75.8636},{"n":"Zuni Pueblo","c":"United States","y":35.0708,"x":-108.8484},{"n":"Ovacik","c":"Turkey","y":39.3586,"x":39.2164},{"n":"Vimianzo","c":"Spain","y":43.11,"x":-9.0344},{"n":"Vacarisas","c":"Spain","y":41.6063,"x":1.9182},{"n":"Luxeuil-les-Bains","c":"France","y":47.8161,"x":6.3808},{"n":"Ponto Belo","c":"Brazil","y":-18.1239,"x":-40.5408},{"n":"Pryvillya","c":"Ukraine","y":48.9999,"x":38.2948},{"n":"Xochicoatlan","c":"Mexico","y":20.7767,"x":-98.68},{"n":"Lipany","c":"Slovakia","y":49.1528,"x":20.9619},{"n":"Olevano sul Tusciano","c":"Italy","y":40.65,"x":15.0167},{"n":"Torrisholme","c":"United Kingdom","y":54.066,"x":-2.83},{"n":"Cabeceira Grande","c":"Brazil","y":-16.03,"x":-47.0908},{"n":"Nambucca Heads","c":"Australia","y":-30.6414,"x":152.9906},{"n":"Saint-Pee-sur-Nivelle","c":"France","y":43.3567,"x":-1.5506},{"n":"Laer","c":"Germany","y":52.0547,"x":7.3569},{"n":"Labenne","c":"France","y":43.5928,"x":-1.4267},{"n":"Guatavita","c":"Colombia","y":4.9344,"x":-73.8344},{"n":"Cos Cob","c":"United States","y":41.0513,"x":-73.5931},{"n":"Herrliberg","c":"Switzerland","y":47.2972,"x":8.6302},{"n":"Sao Miguel do Anta","c":"Brazil","y":-20.7069,"x":-42.7189},{"n":"Tixpehual","c":"Mexico","y":20.9778,"x":-89.4417},{"n":"Adel","c":"United States","y":31.1272,"x":-83.4232},{"n":"Wynyard","c":"Australia","y":-41,"x":145.7167},{"n":"Champigneulles","c":"France","y":48.7336,"x":6.1644},{"n":"Cangyanshanzhen","c":"China","y":37.8445,"x":114.1338},{"n":"Vendargues","c":"France","y":43.6578,"x":3.9694},{"n":"Zirc","c":"Hungary","y":47.2633,"x":17.8725},{"n":"Heathrow","c":"United States","y":28.7753,"x":-81.3721},{"n":"Galliano","c":"United States","y":29.447,"x":-90.3096},{"n":"Alliste","c":"Italy","y":39.95,"x":18.0833},{"n":"Faina","c":"Brazil","y":-15.4458,"x":-50.3608},{"n":"Vetroz","c":"Switzerland","y":46.2258,"x":7.2707},{"n":"Caussade","c":"France","y":44.1617,"x":1.5369},{"n":"Tomakivka","c":"Ukraine","y":47.8163,"x":34.7471},{"n":"Schwarzenburg","c":"Switzerland","y":46.8167,"x":7.3333},{"n":"Pauliceia","c":"Brazil","y":-21.3167,"x":-51.8333},{"n":"Kieta","c":"Papua New Guinea","y":-6.2058,"x":155.6227},{"n":"Bad Hofgastein","c":"Austria","y":47.1711,"x":13.1072},{"n":"Zeliezovce","c":"Slovakia","y":48.0486,"x":18.6603},{"n":"Conquista","c":"Brazil","y":-19.9369,"x":-47.5419},{"n":"Shevchenkove","c":"Ukraine","y":49.6939,"x":37.1794},{"n":"Abadia dos Dourados","c":"Brazil","y":-18.4864,"x":-47.4033},{"n":"Lozen","c":"Bulgaria","y":42.6,"x":23.4833},{"n":"Keyport","c":"United States","y":40.4327,"x":-74.2011},{"n":"Whitianga","c":"New Zealand","y":-36.8331,"x":175.6997},{"n":"Bunola","c":"Spain","y":39.6967,"x":2.6997},{"n":"Beacon Square","c":"United States","y":28.2118,"x":-82.7504},{"n":"North Mackay","c":"Australia","y":-21.1216,"x":149.1783},{"n":"Wustenrot","c":"Germany","y":49.0833,"x":9.4667},{"n":"Ammanford","c":"United Kingdom","y":51.8,"x":-3.993},{"n":"Vilshany","c":"Ukraine","y":50.0533,"x":35.8847},{"n":"Schelklingen","c":"Germany","y":48.3756,"x":9.7325},{"n":"Heillecourt","c":"France","y":48.6525,"x":6.1942},{"n":"Jarovnice","c":"Slovakia","y":49.05,"x":21.0667},{"n":"Laudenbach","c":"Germany","y":49.6114,"x":8.65},{"n":"Villadossola","c":"Italy","y":46.0736,"x":8.2669},{"n":"Brier","c":"United States","y":47.7924,"x":-122.2734},{"n":"Givet","c":"France","y":50.1381,"x":4.8242},{"n":"Trumann","c":"United States","y":35.6771,"x":-90.5261},{"n":"Santa Giustina","c":"Italy","y":46.0839,"x":12.0432},{"n":"La Ametlla de Mar","c":"Spain","y":40.8839,"x":0.8025},{"n":"Milltown","c":"United States","y":40.4504,"x":-74.4351},{"n":"Vyerkhnyadzvinsk","c":"Belarus","y":55.7667,"x":27.9333},{"n":"Agua Doce","c":"Brazil","y":-26.9978,"x":-51.5558},{"n":"Pleidelsheim","c":"Germany","y":48.9614,"x":9.2042},{"n":"Epping","c":"United States","y":43.0501,"x":-71.0747},{"n":"Almacellas","c":"Spain","y":41.7322,"x":0.4372},{"n":"Chynadiyovo","c":"Ukraine","y":48.4833,"x":22.8333},{"n":"Arosio","c":"Italy","y":45.7167,"x":9.2167},{"n":"Dubrowna","c":"Belarus","y":54.5667,"x":30.6833},{"n":"Le Pian-Medoc","c":"France","y":44.955,"x":-0.6697},{"n":"Leitchfield","c":"United States","y":37.4862,"x":-86.2857},{"n":"Confins","c":"Brazil","y":-19.6328,"x":-43.9828},{"n":"Calamonte","c":"Spain","y":38.89,"x":-6.385},{"n":"Galileia","c":"Brazil","y":-18.9989,"x":-41.5378},{"n":"Burgebrach","c":"Germany","y":49.8167,"x":10.75},{"n":"Carapelle","c":"Italy","y":41.3667,"x":15.7},{"n":"Indianopolis","c":"Brazil","y":-19.0389,"x":-47.9169},{"n":"Bohlen","c":"Germany","y":51.2025,"x":12.3858},{"n":"Assais","c":"Morocco","y":30.9131,"x":-9.2439},{"n":"Creswell","c":"United States","y":43.9212,"x":-123.016},{"n":"Edwardsburgh/Cardinal","c":"Canada","y":44.8333,"x":-75.5},{"n":"Hartberg","c":"Austria","y":47.2806,"x":15.97},{"n":"Nerac","c":"France","y":44.1361,"x":0.3394},{"n":"Bondurant","c":"United States","y":41.6986,"x":-93.4551},{"n":"Charoen Sin","c":"Thailand","y":17.5837,"x":103.5422},{"n":"Freckleton","c":"United Kingdom","y":53.753,"x":-2.867},{"n":"Haworth","c":"United Kingdom","y":53.83,"x":-1.96},{"n":"Argamasilla de Alba","c":"Spain","y":39.1167,"x":-3.1},{"n":"Arapora","c":"Brazil","y":-18.4369,"x":-49.1869},{"n":"Prairie View","c":"United States","y":30.085,"x":-95.9897},{"n":"Catoosa","c":"United States","y":36.1832,"x":-95.7662},{"n":"Borgo Val di Taro","c":"Italy","y":44.4833,"x":9.7667},{"n":"Paintsville","c":"United States","y":37.8167,"x":-82.8088},{"n":"Atkinson","c":"United States","y":42.837,"x":-71.1605},{"n":"Dielsdorf","c":"Switzerland","y":47.4836,"x":8.4542},{"n":"Neoi Epivates","c":"Greece","y":40.501,"x":22.909},{"n":"Taliwine","c":"Morocco","y":30.5328,"x":-7.9256},{"n":"Ipeuna","c":"Brazil","y":-22.4333,"x":-47.7167},{"n":"Artern","c":"Germany","y":51.3667,"x":11.3},{"n":"Akyar","c":"Russia","y":51.8636,"x":58.2106},{"n":"Texhuacan","c":"Mexico","y":18.6167,"x":-97.0333},{"n":"San Cipriano Picentino","c":"Italy","y":40.7167,"x":14.8667},{"n":"Ogunimachi","c":"Japan","y":38.0614,"x":139.7433},{"n":"Pledran","c":"France","y":48.4458,"x":-2.7461},{"n":"Plymouth Meeting","c":"United States","y":40.11,"x":-75.2794},{"n":"Ixtenco","c":"Mexico","y":19.2514,"x":-97.8942},{"n":"Cliza","c":"Bolivia","y":-17.5919,"x":-65.9342},{"n":"Palmopolis","c":"Brazil","y":-16.735,"x":-40.42},{"n":"Colbe","c":"Germany","y":50.8506,"x":8.7842},{"n":"Divinopolis do Tocantins","c":"Brazil","y":-9.8,"x":-49.2139},{"n":"Teshikaga","c":"Japan","y":43.4853,"x":144.4592},{"n":"Bremen","c":"United States","y":33.7085,"x":-85.1495},{"n":"Marzabotto","c":"Italy","y":44.3333,"x":11.2},{"n":"Caraglio","c":"Italy","y":44.4167,"x":7.4333},{"n":"Lercara Friddi","c":"Italy","y":37.75,"x":13.6},{"n":"Enderby","c":"United Kingdom","y":52.5881,"x":-1.2092},{"n":"Birmensdorf","c":"Switzerland","y":47.3542,"x":8.4378},{"n":"Sao Jose do Ouro","c":"Brazil","y":-27.7689,"x":-51.5939},{"n":"Samahil","c":"Mexico","y":20.8858,"x":-89.8894},{"n":"Dobroslav","c":"Ukraine","y":46.82,"x":30.945},{"n":"Upper Freehold","c":"United States","y":40.1552,"x":-74.5283},{"n":"Roost-Warendin","c":"France","y":50.4203,"x":3.1056},{"n":"Selfoss","c":"Iceland","y":63.9322,"x":-21.0002},{"n":"Azgour","c":"Morocco","y":31.35,"x":-7.5},{"n":"Aya","c":"Japan","y":31.9992,"x":131.2531},{"n":"Nova Siri","c":"Italy","y":40.15,"x":16.5333},{"n":"Holice","c":"Czechia","y":50.0661,"x":15.986},{"n":"Cojusna","c":"Moldova","y":47.0931,"x":28.6583},{"n":"Kornik","c":"Poland","y":52.2367,"x":17.0986},{"n":"Zolakar","c":"Armenia","y":40.125,"x":45.375},{"n":"Roskovec","c":"Albania","y":40.7375,"x":19.7022},{"n":"Baarle-Nassau","c":"Netherlands","y":51.45,"x":4.9333},{"n":"Hochstadt an der Donau","c":"Germany","y":48.6112,"x":10.5682},{"n":"Tommot","c":"Russia","y":58.9667,"x":126.2667},{"n":"Edgemoor","c":"United States","y":39.7551,"x":-75.507},{"n":"Westmere","c":"United States","y":42.6883,"x":-73.8744},{"n":"Sainte-Anne-des-Monts","c":"Canada","y":49.1333,"x":-66.5},{"n":"Vengerovo","c":"Russia","y":55.6833,"x":76.7492},{"n":"Mileto","c":"Italy","y":38.6078,"x":16.0675},{"n":"Osprey","c":"United States","y":27.1914,"x":-82.48},{"n":"Gniew","c":"Poland","y":53.8333,"x":18.8333},{"n":"Thyez","c":"France","y":46.0836,"x":6.5411},{"n":"Newton Grange","c":"United Kingdom","y":55.868,"x":-3.067},{"n":"Limasawa","c":"Philippines","y":9.9078,"x":125.075},{"n":"Waddington","c":"United Kingdom","y":53.1664,"x":-0.5389},{"n":"San Luis","c":"Spain","y":39.8494,"x":4.2581},{"n":"Geiselhoring","c":"Germany","y":48.8258,"x":12.3925},{"n":"Sabaudia","c":"Brazil","y":-23.3178,"x":-51.5528},{"n":"Askino","c":"Russia","y":56.0869,"x":56.5792},{"n":"Roma","c":"Australia","y":-26.5733,"x":148.7869},{"n":"Divisa Alegre","c":"Brazil","y":-15.7258,"x":-41.345},{"n":"Casares","c":"Spain","y":36.4444,"x":-5.2728},{"n":"Fort Pierce North","c":"United States","y":27.4736,"x":-80.3594},{"n":"Romhild","c":"Germany","y":50.3833,"x":10.55},{"n":"San Jose del Progreso","c":"Mexico","y":16.6833,"x":-96.6833},{"n":"Ploeren","c":"France","y":47.6561,"x":-2.8667},{"n":"Salgareda","c":"Italy","y":45.7061,"x":12.4913},{"n":"Burguillos","c":"Spain","y":37.5858,"x":-5.9673},{"n":"Canohes","c":"France","y":42.6519,"x":2.8344},{"n":"Felsozsolca","c":"Hungary","y":48.1083,"x":20.8556},{"n":"Rodenberg","c":"Germany","y":52.3128,"x":9.3594},{"n":"Sao Carlos do Ivai","c":"Brazil","y":-23.315,"x":-52.4758},{"n":"Aguiarnopolis","c":"Brazil","y":-6.5628,"x":-47.4658},{"n":"Seraitang","c":"China","y":32.9352,"x":100.7376},{"n":"Neufchateau","c":"France","y":48.3556,"x":5.6961},{"n":"West Samoset","c":"United States","y":27.4702,"x":-82.5552},{"n":"Bern","c":"United States","y":40.4005,"x":-75.9933},{"n":"Treasure Island","c":"United States","y":27.774,"x":-82.7663},{"n":"Iitti","c":"Finland","y":60.8833,"x":26.3333},{"n":"Estaires","c":"France","y":50.6439,"x":2.7231},{"n":"Talmaciu","c":"Romania","y":45.6667,"x":24.2611},{"n":"Cegrane","c":"Macedonia","y":41.8358,"x":20.9736},{"n":"Branston","c":"United Kingdom","y":52.787,"x":-1.659},{"n":"Tizi Ouzli","c":"Morocco","y":34.7625,"x":-3.7953},{"n":"Schoppingen","c":"Germany","y":52.1,"x":7.2331},{"n":"Spring Lake Park","c":"United States","y":45.1161,"x":-93.2451},{"n":"Paradas","c":"Spain","y":37.2903,"x":-5.4967},{"n":"Olevano Romano","c":"Italy","y":41.8606,"x":13.0319},{"n":"Black Jack","c":"United States","y":38.7993,"x":-90.264},{"n":"Camposano","c":"Italy","y":40.95,"x":14.5333},{"n":"Susa","c":"Italy","y":45.1333,"x":7.05},{"n":"Guican","c":"Colombia","y":6.4625,"x":-72.4119},{"n":"Maquine","c":"Brazil","y":-29.675,"x":-50.2069},{"n":"Carrigtohill","c":"Ireland","y":51.9,"x":-8.2667},{"n":"Heber Springs","c":"United States","y":35.5003,"x":-92.0332},{"n":"Senafe","c":"Eritrea","y":14.7,"x":39.4167},{"n":"Muncheberg","c":"Germany","y":52.5036,"x":14.1397},{"n":"Saue","c":"Estonia","y":59.3231,"x":24.5622},{"n":"Galia","c":"Brazil","y":-22.2914,"x":-49.5528},{"n":"Conemaugh","c":"United States","y":40.2432,"x":-78.966},{"n":"West Slope","c":"United States","y":45.4962,"x":-122.7731},{"n":"Villmar","c":"Germany","y":50.3914,"x":8.1919},{"n":"Guarena","c":"Spain","y":38.85,"x":-6.0833},{"n":"Glorinha","c":"Brazil","y":-29.8808,"x":-50.7669},{"n":"El Maader El Kabir","c":"Morocco","y":29.8502,"x":-9.6575},{"n":"Ostiglia","c":"Italy","y":45.0704,"x":11.1364},{"n":"Devin","c":"Bulgaria","y":41.7425,"x":24.3992},{"n":"Veszto","c":"Hungary","y":46.9256,"x":21.2639},{"n":"Tiros","c":"Brazil","y":-19.0039,"x":-45.9639},{"n":"Old Chelsea","c":"Canada","y":45.5,"x":-75.7833},{"n":"Tiefenbach","c":"Germany","y":48.6244,"x":13.3989},{"n":"Moelan-sur-Mer","c":"France","y":47.8142,"x":-3.6281},{"n":"Saham al Jawlan","c":"Syria","y":32.7811,"x":35.9347},{"n":"Mercato Saraceno","c":"Italy","y":43.95,"x":12.2},{"n":"Oberrieden","c":"Switzerland","y":47.2778,"x":8.5781},{"n":"Volkmarsen","c":"Germany","y":51.3833,"x":9.1167},{"n":"Erp","c":"Netherlands","y":51.6003,"x":5.6053},{"n":"Cambo-les-Bains","c":"France","y":43.3578,"x":-1.4017},{"n":"Chasse-sur-Rhone","c":"France","y":45.5806,"x":4.8},{"n":"Ferreira Gomes","c":"Brazil","y":0.8578,"x":-51.18},{"n":"Sikatuna","c":"Philippines","y":9.6833,"x":123.9667},{"n":"Orgeval","c":"France","y":48.9206,"x":1.9758},{"n":"Interlaken","c":"Switzerland","y":46.6881,"x":7.8646},{"n":"Zakan-Yurt","c":"Russia","y":43.2617,"x":45.4217},{"n":"Garabogaz","c":"Turkmenistan","y":41.5397,"x":52.57},{"n":"Great Barrington","c":"United States","y":42.211,"x":-73.3416},{"n":"Nandy","c":"France","y":48.5842,"x":2.5661},{"n":"Gulf Breeze","c":"United States","y":30.3685,"x":-87.1769},{"n":"Infiesto","c":"Spain","y":43.35,"x":-5.35},{"n":"Guenes","c":"Spain","y":43.2139,"x":-3.0942},{"n":"Viola","c":"United States","y":41.1287,"x":-74.0855},{"n":"Freeland","c":"United States","y":43.5198,"x":-84.1124},{"n":"Noyelles-Godault","c":"France","y":50.42,"x":2.9939},{"n":"Schoorl","c":"Netherlands","y":52.7014,"x":4.6944},{"n":"Bandjoun","c":"Cameroon","y":5.35,"x":10.4},{"n":"Lake Mills","c":"United States","y":43.0776,"x":-88.9054},{"n":"Byron","c":"United States","y":42.1224,"x":-89.2665},{"n":"Limeira d'Oeste","c":"Brazil","y":-19.5508,"x":-50.5808},{"n":"Hulin","c":"Czechia","y":49.3169,"x":17.4638},{"n":"Latimer","c":"United States","y":30.4972,"x":-88.8607},{"n":"Loison-sous-Lens","c":"France","y":50.4383,"x":2.8683},{"n":"Loudun","c":"France","y":47.01,"x":0.0836},{"n":"Thermalito","c":"United States","y":39.4909,"x":-121.615},{"n":"Whitemarsh Island","c":"United States","y":32.0304,"x":-81.0109},{"n":"Colusa","c":"United States","y":39.2059,"x":-122.0125},{"n":"Taradell","c":"Spain","y":41.8737,"x":2.2874},{"n":"Santiago Yaveo","c":"Mexico","y":17.3333,"x":-95.7},{"n":"Ait Said","c":"Morocco","y":31.4458,"x":-9.4383},{"n":"Merrimac","c":"United States","y":42.8386,"x":-71.0119},{"n":"Ben Lomond","c":"United States","y":37.0782,"x":-122.0882},{"n":"Stawell","c":"Australia","y":-37.05,"x":142.7667},{"n":"Fabbrico","c":"Italy","y":44.8667,"x":10.8},{"n":"Bossoroca","c":"Brazil","y":-28.73,"x":-54.9},{"n":"Kampong Beribi","c":"Brunei","y":4.8841,"x":114.896},{"n":"Marilena","c":"Brazil","y":-22.7358,"x":-53.04},{"n":"Stare Mesto","c":"Czechia","y":49.0752,"x":17.4334},{"n":"Ban Haet","c":"Thailand","y":16.2,"x":102.7492},{"n":"Yeniceoba","c":"Turkey","y":38.8708,"x":32.7919},{"n":"Akka","c":"Morocco","y":29.3908,"x":-8.2564},{"n":"Beerwah","c":"Australia","y":-26.8556,"x":152.96},{"n":"Sury-le-Comtal","c":"France","y":45.5375,"x":4.1831},{"n":"Gleneagle","c":"United States","y":39.0453,"x":-104.8288},{"n":"Mountainside","c":"United States","y":40.6811,"x":-74.36},{"n":"Saint-Pol-de-Leon","c":"France","y":48.6853,"x":-3.9864},{"n":"Ludres","c":"France","y":48.6217,"x":6.1617},{"n":"Lienden","c":"Netherlands","y":51.9467,"x":5.5189},{"n":"Jerichow","c":"Germany","y":52.4995,"x":12.028},{"n":"Jevnaker","c":"Norway","y":60.2389,"x":10.3931},{"n":"Brendola","c":"Italy","y":45.4667,"x":11.45},{"n":"Bonfim","c":"Brazil","y":-20.3269,"x":-44.2389},{"n":"Battle","c":"United Kingdom","y":50.92,"x":0.48},{"n":"Moores Mill","c":"United States","y":34.8491,"x":-86.5222},{"n":"East Buffalo","c":"United States","y":40.9337,"x":-76.9135},{"n":"Vitorino","c":"Brazil","y":-26.2769,"x":-52.7839},{"n":"Constanti","c":"Spain","y":41.1532,"x":1.2143},{"n":"Sao Sebastiao do Curral","c":"Brazil","y":-20.2758,"x":-45.005},{"n":"Peronnas","c":"France","y":46.1786,"x":5.2028},{"n":"Mambai","c":"Brazil","y":-14.4878,"x":-46.1128},{"n":"Aydemir","c":"Bulgaria","y":44.1,"x":27.1667},{"n":"Chestertown","c":"United States","y":39.2182,"x":-76.0714},{"n":"Saint-Alban-Leysse","c":"France","y":45.58,"x":5.9581},{"n":"Notaresco","c":"Italy","y":42.65,"x":13.9},{"n":"Cheddleton","c":"United Kingdom","y":53.064,"x":-2.043},{"n":"Almenno San Salvatore","c":"Italy","y":45.75,"x":9.5875},{"n":"Labarthe-sur-Leze","c":"France","y":43.4517,"x":1.4},{"n":"Brindas","c":"France","y":45.7211,"x":4.6936},{"n":"Pietraperzia","c":"Italy","y":37.4,"x":14.1333},{"n":"Saanen","c":"Switzerland","y":46.4831,"x":7.2664},{"n":"North Stormont","c":"Canada","y":45.2167,"x":-75},{"n":"Mojacar","c":"Spain","y":37.1403,"x":-1.8514},{"n":"St. Martinville","c":"United States","y":30.1263,"x":-91.8319},{"n":"Harrisville","c":"United States","y":41.2853,"x":-111.9859},{"n":"Pottmes","c":"Germany","y":48.5833,"x":11.1},{"n":"Fishtoft","c":"United Kingdom","y":52.9617,"x":0.0259},{"n":"Oulad Sbih","c":"Morocco","y":33.7333,"x":-7.2},{"n":"Cuitegi","c":"Brazil","y":-6.8928,"x":-35.5228},{"n":"Assays","c":"Morocco","y":30.5981,"x":-7.6523},{"n":"Beaufort-en-Vallee","c":"France","y":47.4394,"x":-0.2156},{"n":"Oakley","c":"United Kingdom","y":51.251,"x":-1.1764},{"n":"Mechanicstown","c":"United States","y":41.4472,"x":-74.3914},{"n":"Alnwick/Haldimand","c":"Canada","y":44.0833,"x":-78.0333},{"n":"Rosice","c":"Czechia","y":49.1824,"x":16.3879},{"n":"Newbiggin-by-the-Sea","c":"United Kingdom","y":55.183,"x":-1.515},{"n":"Oberuzwil","c":"Switzerland","y":47.4294,"x":9.1236},{"n":"Loomis","c":"United States","y":38.8093,"x":-121.1955},{"n":"Nervesa della Battaglia","c":"Italy","y":45.8333,"x":12.2167},{"n":"Northam","c":"Australia","y":-31.6531,"x":116.6661},{"n":"Balozi","c":"Latvia","y":56.875,"x":24.1194},{"n":"Sawtry","c":"United Kingdom","y":52.44,"x":-0.28},{"n":"Montegiorgio","c":"Italy","y":43.1307,"x":13.5371},{"n":"Thorpe","c":"United Kingdom","y":51.4069,"x":-0.5354},{"n":"Bergondo","c":"Spain","y":43.3167,"x":-8.2333},{"n":"Montaigu","c":"France","y":46.9728,"x":-1.31},{"n":"Schwendi","c":"Germany","y":48.1756,"x":9.9758},{"n":"Dozza","c":"Italy","y":44.359,"x":11.6277},{"n":"Wutoschingen","c":"Germany","y":47.6636,"x":8.3689},{"n":"Great Chart","c":"United Kingdom","y":51.1409,"x":0.8372},{"n":"Nagatoro","c":"Japan","y":36.11,"x":139.11},{"n":"King","c":"United States","y":36.2766,"x":-80.3564},{"n":"Breidenbach","c":"Germany","y":50.8833,"x":8.4667},{"n":"West Glens Falls","c":"United States","y":43.3019,"x":-73.6874},{"n":"Leinburg","c":"Germany","y":49.4517,"x":11.31},{"n":"Herdorf","c":"Germany","y":50.7775,"x":7.9547},{"n":"Youngtown","c":"United States","y":33.5846,"x":-112.3047},{"n":"Mesola","c":"Italy","y":44.9206,"x":12.23},{"n":"Phelps","c":"United States","y":42.9574,"x":-77.048},{"n":"Upper Nazareth","c":"United States","y":40.7369,"x":-75.3346},{"n":"Lemoore Station","c":"United States","y":36.2633,"x":-119.9049},{"n":"Erere","c":"Brazil","y":-6.0319,"x":-38.3489},{"n":"Lutherville","c":"United States","y":39.4239,"x":-76.6176},{"n":"Spisska Bela","c":"Slovakia","y":49.1858,"x":20.4567},{"n":"Upper Mount Bethel","c":"United States","y":40.8984,"x":-75.1386},{"n":"Greenbrier","c":"United States","y":36.4239,"x":-86.7976},{"n":"Letovice","c":"Czechia","y":49.5471,"x":16.5736},{"n":"Tabernacle","c":"United States","y":39.8192,"x":-74.6551},{"n":"Venta de Banos","c":"Spain","y":41.9333,"x":-4.5},{"n":"Horncastle","c":"United Kingdom","y":53.208,"x":-0.114},{"n":"Nizhnyaya Tavda","c":"Russia","y":57.6731,"x":66.1725},{"n":"Georgensgmund","c":"Germany","y":49.1833,"x":11},{"n":"Saint-Pierre-d'Oleron","c":"France","y":45.9436,"x":-1.3058},{"n":"Meung-sur-Loire","c":"France","y":47.8286,"x":1.6983},{"n":"Maulbronn","c":"Germany","y":49.0003,"x":8.8108},{"n":"Negreira","c":"Spain","y":42.911,"x":-8.735},{"n":"Lecanto","c":"United States","y":28.8359,"x":-82.488},{"n":"Curinga","c":"Italy","y":38.8267,"x":16.3139},{"n":"Ribeiro Goncalves","c":"Brazil","y":-7.5578,"x":-45.2419},{"n":"Montebello Vicentino","c":"Italy","y":45.45,"x":11.3833},{"n":"Sandycroft","c":"United Kingdom","y":53.195,"x":-2.999},{"n":"Mount Cotton","c":"Australia","y":-27.6188,"x":153.221},{"n":"Risor","c":"Norway","y":58.7247,"x":9.23},{"n":"Eldridge","c":"United States","y":41.639,"x":-90.5809},{"n":"Teius","c":"Romania","y":46.2,"x":23.68},{"n":"East Earl","c":"United States","y":40.1235,"x":-76.0332},{"n":"Hulha Negra","c":"Brazil","y":-31.4039,"x":-53.8689},{"n":"Dobruska","c":"Czechia","y":50.292,"x":16.1601},{"n":"Old Greenwich","c":"United States","y":41.0253,"x":-73.5691},{"n":"Malvern Link","c":"United Kingdom","y":52.1255,"x":-2.3161},{"n":"Idabel","c":"United States","y":33.9041,"x":-94.8294},{"n":"Mehun-sur-Yevre","c":"France","y":47.1453,"x":2.2158},{"n":"Piedimonte San Germano","c":"Italy","y":41.5,"x":13.7333},{"n":"South Patrick Shores","c":"United States","y":28.202,"x":-80.6137},{"n":"Peace River","c":"Canada","y":56.2339,"x":-117.2897},{"n":"Isenbuttel","c":"Germany","y":52.4358,"x":10.5794},{"n":"Bee Cave","c":"United States","y":30.3084,"x":-97.9629},{"n":"Haag in Oberbayern","c":"Germany","y":48.162,"x":12.1794},{"n":"Lovejoy","c":"United States","y":33.4426,"x":-84.3176},{"n":"Gigean","c":"France","y":43.4997,"x":3.7111},{"n":"Torgiano","c":"Italy","y":43.0256,"x":12.4342},{"n":"Sallent","c":"Spain","y":41.8259,"x":1.8949},{"n":"Garsten","c":"Austria","y":48.0217,"x":14.4089},{"n":"Chugqensumdo","c":"China","y":33.4352,"x":101.4866},{"n":"Sekigahara","c":"Japan","y":35.3653,"x":136.4672},{"n":"Acs","c":"Hungary","y":47.71,"x":18.0156},{"n":"Almenno San Bartolomeo","c":"Italy","y":45.7489,"x":9.5797},{"n":"Loriol-sur-Drome","c":"France","y":44.7517,"x":4.8225},{"n":"Machern","c":"Germany","y":51.3583,"x":12.6278},{"n":"Fircrest","c":"United States","y":47.2307,"x":-122.5157},{"n":"Landore","c":"United Kingdom","y":51.64,"x":-3.94},{"n":"Annezin","c":"France","y":50.5336,"x":2.6183},{"n":"Altenkirchen","c":"Germany","y":50.6872,"x":7.6456},{"n":"Gelterkinden","c":"Switzerland","y":47.4653,"x":7.8528},{"n":"Ladbergen","c":"Germany","y":52.1367,"x":7.7372},{"n":"Bietigheim","c":"Germany","y":48.9103,"x":8.2531},{"n":"Hainburg an der Donau","c":"Austria","y":48.1478,"x":16.9419},{"n":"Balan","c":"Romania","y":46.6497,"x":25.81},{"n":"Tagliacozzo","c":"Italy","y":42.0694,"x":13.2547},{"n":"Puchezh","c":"Russia","y":56.9833,"x":43.1667},{"n":"Alstonville","c":"Australia","y":-28.8317,"x":153.4344},{"n":"Ivanka pri Dunaji","c":"Slovakia","y":48.1833,"x":17.2667},{"n":"Brixworth","c":"United Kingdom","y":52.329,"x":-0.904},{"n":"Livada","c":"Romania","y":47.8667,"x":23.1333},{"n":"Careacu","c":"Brazil","y":-22.0428,"x":-45.6989},{"n":"Klundert","c":"Netherlands","y":51.6628,"x":4.5289},{"n":"Cacimbas","c":"Brazil","y":-7.2108,"x":-37.0578},{"n":"Renascenca","c":"Brazil","y":-26.1578,"x":-52.9689},{"n":"Milo","c":"United States","y":42.615,"x":-77.0031},{"n":"San Vincenzo","c":"Italy","y":43.1007,"x":10.5388},{"n":"Mozonte","c":"Nicaragua","y":13.65,"x":-86.45},{"n":"Huntertown","c":"United States","y":41.2155,"x":-85.1715},{"n":"Saint-Andre-des-Eaux","c":"France","y":47.3139,"x":-2.3108},{"n":"Oberhausbergen","c":"France","y":48.6067,"x":7.6853},{"n":"Mejji","c":"Morocco","y":31.55,"x":-9.35},{"n":"Lagoa de Sao Francisco","c":"Brazil","y":-4.3919,"x":-41.6008},{"n":"Bilmak","c":"Ukraine","y":47.3589,"x":36.65},{"n":"Saint Blazey","c":"United Kingdom","y":50.361,"x":-4.716},{"n":"Crossett","c":"United States","y":33.128,"x":-91.9631},{"n":"Vidigulfo","c":"Italy","y":45.3,"x":9.2333},{"n":"Puerto Narino","c":"Colombia","y":-3.7703,"x":-70.3831},{"n":"Waldeck","c":"Germany","y":51.2,"x":9.0667},{"n":"Kropp","c":"Germany","y":54.4111,"x":9.5087},{"n":"Ostrach","c":"Germany","y":47.9525,"x":9.3814},{"n":"Knyaginino","c":"Russia","y":55.8167,"x":45.0333},{"n":"Jose Pedro Varela","c":"Uruguay","y":-33.45,"x":-54.5333},{"n":"Baboua","c":"Central African Republic","y":5.7833,"x":14.8192},{"n":"Herval","c":"Brazil","y":-32.0239,"x":-53.3958},{"n":"Santo Antonio do Pinhal","c":"Brazil","y":-22.8269,"x":-45.6628},{"n":"Margaret River","c":"Australia","y":-33.955,"x":115.075},{"n":"Belo Monte","c":"Brazil","y":-9.8278,"x":-37.28},{"n":"Taneytown","c":"United States","y":39.657,"x":-77.1683},{"n":"Glen Innes","c":"Australia","y":-29.75,"x":151.7361},{"n":"Kostenets","c":"Bulgaria","y":42.3075,"x":23.8575},{"n":"Roteiro","c":"Brazil","y":-9.8328,"x":-35.9778},{"n":"San Francisco del Norte","c":"Nicaragua","y":13.2333,"x":-86.7},{"n":"Penarrubia","c":"Philippines","y":17.5642,"x":120.6522},{"n":"Angical do Piaui","c":"Brazil","y":-6.0858,"x":-42.7389},{"n":"Cittaducale","c":"Italy","y":42.3833,"x":12.95},{"n":"Puerto Aventuras","c":"Mexico","y":20.5117,"x":-87.2342},{"n":"Fort Myers Shores","c":"United States","y":26.7135,"x":-81.7383},{"n":"Bovenkarspel","c":"Netherlands","y":52.7,"x":5.25},{"n":"Offenbach an der Queich","c":"Germany","y":49.1977,"x":8.1974},{"n":"Vizinga","c":"Russia","y":61.075,"x":50.1031},{"n":"Lossiemouth","c":"United Kingdom","y":57.7189,"x":-3.2875},{"n":"Kirtland","c":"United States","y":41.5969,"x":-81.3406},{"n":"Bishops Waltham","c":"United Kingdom","y":50.9536,"x":-1.2118},{"n":"Hornostaivka","c":"Ukraine","y":47.007,"x":33.728},{"n":"Castello d'Argile","c":"Italy","y":44.6811,"x":11.2967},{"n":"Lakes of the Four Seasons","c":"United States","y":41.4074,"x":-87.2203},{"n":"Na Duang","c":"Thailand","y":17.4743,"x":101.98},{"n":"Verneuil-sur-Avre","c":"France","y":48.7389,"x":0.9278},{"n":"Rheurdt","c":"Germany","y":51.4667,"x":6.4667},{"n":"Loanhead","c":"United Kingdom","y":55.878,"x":-3.148},{"n":"Tyrnava","c":"Finland","y":64.75,"x":25.65},{"n":"Gilwala","c":"Pakistan","y":32.2925,"x":74.0506},{"n":"Znada","c":"Morocco","y":31.2357,"x":-8.7278},{"n":"Bolzano Vicentino","c":"Italy","y":45.6,"x":11.6167},{"n":"Oensingen","c":"Switzerland","y":47.2886,"x":7.7139},{"n":"Faget","c":"Romania","y":45.85,"x":22.18},{"n":"Turis","c":"Spain","y":39.3899,"x":-0.7105},{"n":"Yamba","c":"Australia","y":-29.4333,"x":153.35},{"n":"Nagaya","c":"Japan","y":35.4308,"x":140.2269},{"n":"Senov","c":"Czechia","y":49.7931,"x":18.3761},{"n":"Inari","c":"Finland","y":68.9055,"x":27.0176},{"n":"Kristinestad","c":"Finland","y":62.2736,"x":21.3778},{"n":"Chui","c":"Brazil","y":-33.6908,"x":-53.4569},{"n":"San Martin","c":"United States","y":37.0829,"x":-121.5963},{"n":"Arran-Elderslie","c":"Canada","y":44.4,"x":-81.2},{"n":"Ban Bang Pakong","c":"Thailand","y":13.5051,"x":100.9567},{"n":"Kimberly","c":"United States","y":44.267,"x":-88.3377},{"n":"Taylor Mill","c":"United States","y":39.0092,"x":-84.4988},{"n":"Marmolejo","c":"Spain","y":38.05,"x":-4.1667},{"n":"Yardville","c":"United States","y":40.1849,"x":-74.6603},{"n":"East Shoreham","c":"United States","y":40.946,"x":-72.8811},{"n":"Bani Bangou","c":"Niger","y":15.0408,"x":2.705},{"n":"Nachrodt-Wiblingwerde","c":"Germany","y":51.3167,"x":7.65},{"n":"Ouvidor","c":"Brazil","y":-18.2339,"x":-47.8389},{"n":"Arges","c":"Spain","y":39.805,"x":-4.0572},{"n":"Cromwell","c":"New Zealand","y":-45.04,"x":169.2},{"n":"South Hanover","c":"United States","y":40.2962,"x":-76.7085},{"n":"Ytyk-Kyuyel'","c":"Russia","y":62.3623,"x":133.5625},{"n":"Mutzig","c":"France","y":48.5386,"x":7.4542},{"n":"Velizh","c":"Russia","y":55.6,"x":31.2},{"n":"Bienenbuttel","c":"Germany","y":53.1416,"x":10.4868},{"n":"Valley Park","c":"United States","y":38.5513,"x":-90.4924},{"n":"General Fernandez Oro","c":"Argentina","y":-38.95,"x":-67.9167},{"n":"Saint-Yrieix-la-Perche","c":"France","y":45.5144,"x":1.2033},{"n":"Waldsassen","c":"Germany","y":50,"x":12.3},{"n":"Waldmunchen","c":"Germany","y":49.3785,"x":12.7049},{"n":"Svelvik","c":"Norway","y":59.6236,"x":10.3717},{"n":"Natividade da Serra","c":"Brazil","y":-23.3756,"x":-45.4419},{"n":"Thousand Palms","c":"United States","y":33.815,"x":-116.3545},{"n":"Amory","c":"United States","y":33.9813,"x":-88.4823},{"n":"Perola do Oeste","c":"Brazil","y":-25.8239,"x":-53.74},{"n":"Brech","c":"France","y":47.7206,"x":-2.9956},{"n":"Celeiroz","c":"Portugal","y":41.5136,"x":-8.4522},{"n":"Waterford","c":"Australia","y":-27.6833,"x":153.133},{"n":"Lake Mathews","c":"United States","y":33.825,"x":-117.3683},{"n":"Marvin","c":"United States","y":34.989,"x":-80.8032},{"n":"Itambaraca","c":"Brazil","y":-23.0178,"x":-50.4058},{"n":"Heitersheim","c":"Germany","y":47.8753,"x":7.6547},{"n":"Fowler","c":"United States","y":36.6243,"x":-119.6737},{"n":"Mellingen","c":"Switzerland","y":47.4192,"x":8.2764},{"n":"Le Cendre","c":"France","y":45.7225,"x":3.1872},{"n":"Kervignac","c":"France","y":47.7633,"x":-3.2389},{"n":"Malaunay","c":"France","y":49.5261,"x":1.0403},{"n":"Fishhook","c":"United States","y":61.711,"x":-149.2657},{"n":"Kraslice","c":"Czechia","y":50.3238,"x":12.5176},{"n":"Ampfing","c":"Germany","y":48.2667,"x":12.4167},{"n":"San Feliu de Codinas","c":"Spain","y":41.6885,"x":2.1647},{"n":"Courtepin","c":"Switzerland","y":46.8667,"x":7.1167},{"n":"Landriano","c":"Italy","y":45.3167,"x":9.2667},{"n":"Hoosick","c":"United States","y":42.8903,"x":-73.3561},{"n":"Almese","c":"Italy","y":45.1167,"x":7.4},{"n":"Castel di Sangro","c":"Italy","y":41.7842,"x":14.1085},{"n":"Hersin-Coupigny","c":"France","y":50.4461,"x":2.6478},{"n":"Hombourg-Haut","c":"France","y":49.1258,"x":6.7781},{"n":"Breinigsville","c":"United States","y":40.5394,"x":-75.6344},{"n":"Marles-les-Mines","c":"France","y":50.5022,"x":2.5022},{"n":"Douar el Caid el Gueddari","c":"Morocco","y":34.4228,"x":-6.089},{"n":"Gordonvale","c":"Australia","y":-17.0936,"x":145.7866},{"n":"Terezinha","c":"Brazil","y":-9.0558,"x":-36.6228},{"n":"Charagua","c":"Bolivia","y":-19.7919,"x":-63.2006},{"n":"Mimon","c":"Czechia","y":50.6588,"x":14.7248},{"n":"Kishkenekol","c":"Kazakhstan","y":53.6394,"x":72.3439},{"n":"Poggio Rusco","c":"Italy","y":44.9775,"x":11.1192},{"n":"Melenci","c":"Serbia","y":45.5083,"x":20.3169},{"n":"Tumiritinga","c":"Brazil","y":-18.9789,"x":-41.645},{"n":"Untergrombach","c":"Germany","y":49.0865,"x":8.5542},{"n":"Dovolnoye","c":"Russia","y":54.4917,"x":79.6736},{"n":"Blainville-sur-Orne","c":"France","y":49.2289,"x":-0.3},{"n":"Santa Cruz da Vitoria","c":"Brazil","y":-14.9608,"x":-39.8119},{"n":"Myers Corner","c":"United States","y":41.5947,"x":-73.8744},{"n":"Ispringen","c":"Germany","y":48.9158,"x":8.6708},{"n":"Mede","c":"Italy","y":45.1,"x":8.7333},{"n":"Plouguerneau","c":"France","y":48.6058,"x":-4.5042},{"n":"Malchow","c":"Germany","y":53.4833,"x":12.4333},{"n":"Luftkurort Arendsee","c":"Germany","y":52.8767,"x":11.4867},{"n":"`Ayn `Isa","c":"Syria","y":36.3858,"x":38.8472},{"n":"Trappenkamp","c":"Germany","y":54.05,"x":10.2167},{"n":"Ghafsai","c":"Morocco","y":34.6245,"x":-4.9112},{"n":"Colombier","c":"Switzerland","y":46.9667,"x":6.8667},{"n":"Boa Vista do Burica","c":"Brazil","y":-27.6689,"x":-54.11},{"n":"Parkano","c":"Finland","y":62.0097,"x":23.025},{"n":"Zerkat","c":"Morocco","y":34.8819,"x":-4.2803},{"n":"Saint-Zotique","c":"Canada","y":45.25,"x":-74.25},{"n":"Greifenstein","c":"Germany","y":50.6094,"x":8.2431},{"n":"Cellamare","c":"Italy","y":41.0203,"x":16.9292},{"n":"La Canonja","c":"Spain","y":41.1191,"x":1.183},{"n":"Riudoms","c":"Spain","y":41.1391,"x":1.052},{"n":"Quixaba","c":"Brazil","y":-7.72,"x":-37.8478},{"n":"Reutte","c":"Austria","y":47.4833,"x":10.7167},{"n":"Oleksandrivsk","c":"Ukraine","y":48.5833,"x":39.1833},{"n":"Danbury","c":"United Kingdom","y":51.715,"x":0.582},{"n":"Castro Marim","c":"Portugal","y":37.2167,"x":-7.45},{"n":"Ciserano","c":"Italy","y":45.5833,"x":9.6},{"n":"Glashutte","c":"Germany","y":50.85,"x":13.7833},{"n":"Cornuda","c":"Italy","y":45.8322,"x":12.0081},{"n":"Crisolita","c":"Brazil","y":-17.2369,"x":-40.9119},{"n":"Serra San Bruno","c":"Italy","y":38.5833,"x":16.3333},{"n":"Eggersdorf bei Graz","c":"Austria","y":47.1228,"x":15.5992},{"n":"Cazaclia","c":"Moldova","y":46.0103,"x":28.6628},{"n":"Mitterteich","c":"Germany","y":49.9498,"x":12.2442},{"n":"Montelepre","c":"Italy","y":38.1,"x":13.1667},{"n":"Guanica","c":"Puerto Rico","y":17.9698,"x":-66.9309},{"n":"San Donaci","c":"Italy","y":40.45,"x":17.9167},{"n":"Chatelaillon-Plage","c":"France","y":46.0731,"x":-1.0881},{"n":"Annaburg","c":"Germany","y":51.7328,"x":13.0456},{"n":"Santo Antonio da Alegria","c":"Brazil","y":-21.0869,"x":-47.1508},{"n":"Irshansk","c":"Ukraine","y":50.7167,"x":28.7167},{"n":"East Coventry","c":"United States","y":40.2014,"x":-75.6162},{"n":"Oedheim","c":"Germany","y":49.2333,"x":9.25},{"n":"Hardheim","c":"Germany","y":49.6106,"x":9.4739},{"n":"Santa Clara do Sul","c":"Brazil","y":-29.4689,"x":-52.0878},{"n":"Ibrany","c":"Hungary","y":48.1282,"x":21.7135},{"n":"Grand-Fort-Philippe","c":"France","y":50.9978,"x":2.1092},{"n":"Williamson","c":"United States","y":43.2417,"x":-77.1923},{"n":"Avallon","c":"France","y":47.49,"x":3.9083},{"n":"Larino","c":"Italy","y":41.8,"x":14.9167},{"n":"Desert Palms","c":"United States","y":33.779,"x":-116.293},{"n":"Acua","c":"Brazil","y":-8.215,"x":-41.0819},{"n":"Lathen","c":"Germany","y":52.8667,"x":7.3167},{"n":"Indian River Estates","c":"United States","y":27.3564,"x":-80.2983},{"n":"Cedeira","c":"Spain","y":43.65,"x":-8.05},{"n":"Ghisalba","c":"Italy","y":45.6,"x":9.75},{"n":"Yetkul","c":"Russia","y":54.8222,"x":61.5881},{"n":"Kamihonbetsu","c":"Japan","y":43.1244,"x":143.6106},{"n":"Sutri","c":"Italy","y":42.2478,"x":12.2158},{"n":"Asten","c":"Austria","y":48.2167,"x":14.4167},{"n":"Odolena Voda","c":"Czechia","y":50.2335,"x":14.4109},{"n":"Cranbrook","c":"United Kingdom","y":51.0967,"x":0.5356},{"n":"Fuente del Maestre","c":"Spain","y":38.5289,"x":-6.45},{"n":"Medzilaborce","c":"Slovakia","y":49.2717,"x":21.9042},{"n":"Alilem","c":"Philippines","y":16.8869,"x":120.531},{"n":"Gemenos","c":"France","y":43.2961,"x":5.6269},{"n":"Petershausen","c":"Germany","y":48.4103,"x":11.4708},{"n":"La Bouilladisse","c":"France","y":43.3953,"x":5.5953},{"n":"Santiago Maravatio","c":"Mexico","y":20.1667,"x":-101},{"n":"Pembroke Park","c":"United States","y":25.9852,"x":-80.1777},{"n":"Vezin-le-Coquet","c":"France","y":48.1186,"x":-1.7561},{"n":"Horbourg","c":"France","y":48.0794,"x":7.3944},{"n":"Sobrance","c":"Slovakia","y":48.746,"x":22.179},{"n":"Lake Hallie","c":"United States","y":44.8921,"x":-91.4199},{"n":"Ellettsville","c":"United States","y":39.2322,"x":-86.6232},{"n":"Diano Marina","c":"Italy","y":43.9099,"x":8.082},{"n":"Arapoema","c":"Brazil","y":-7.6578,"x":-49.0639},{"n":"Sapopema","c":"Brazil","y":-23.9108,"x":-50.58},{"n":"Saint-Florent-sur-Cher","c":"France","y":46.9956,"x":2.2517},{"n":"Ambert","c":"France","y":45.5494,"x":3.7417},{"n":"Guglingen","c":"Germany","y":49.0667,"x":9},{"n":"Saint-Girons","c":"France","y":42.9847,"x":1.1458},{"n":"Sankt Margrethen","c":"Switzerland","y":47.4497,"x":9.6331},{"n":"Moraleja","c":"Spain","y":40.0667,"x":-6.65},{"n":"Kremsmunster","c":"Austria","y":48.055,"x":14.1308},{"n":"Guged","c":"Iran","y":33.4756,"x":50.3525},{"n":"Prairie Grove","c":"United States","y":35.9858,"x":-94.3048},{"n":"Tvarditsa","c":"Bulgaria","y":42.7017,"x":25.8975},{"n":"Timoulilt","c":"Morocco","y":32.2,"x":-6.4667},{"n":"Napili-Honokowai","c":"United States","y":20.9767,"x":-156.6646},{"n":"Buia","c":"Italy","y":46.2122,"x":13.1169},{"n":"Khmis Sidi Yahia","c":"Morocco","y":33.7983,"x":-6.2653},{"n":"Gorom-Gorom","c":"Burkina Faso","y":14.4439,"x":-0.2361},{"n":"Montevallo","c":"United States","y":33.1246,"x":-86.8476},{"n":"Sinn","c":"Germany","y":50.65,"x":8.3333},{"n":"Kimberley","c":"United Kingdom","y":52.997,"x":-1.255},{"n":"Marineo","c":"Italy","y":37.95,"x":13.4167},{"n":"Countesthorpe","c":"United Kingdom","y":52.555,"x":-1.14},{"n":"Beromunster","c":"Switzerland","y":47.1997,"x":8.2},{"n":"Mount Healthy","c":"United States","y":39.2338,"x":-84.5469},{"n":"Change","c":"France","y":47.9878,"x":0.2819},{"n":"Enying","c":"Hungary","y":46.9296,"x":18.243},{"n":"Clover Creek","c":"United States","y":47.1404,"x":-122.3827},{"n":"Luislandia","c":"Brazil","y":-16.1178,"x":-44.5889},{"n":"Marange-Silvange","c":"France","y":49.2108,"x":6.1039},{"n":"Bois-le-Roi","c":"France","y":48.4736,"x":2.6972},{"n":"Marignier","c":"France","y":46.0903,"x":6.4997},{"n":"Rupert","c":"United States","y":42.6189,"x":-113.674},{"n":"Snowflake","c":"United States","y":34.5225,"x":-110.0913},{"n":"Bayville","c":"United States","y":40.9076,"x":-73.5602},{"n":"Ijoukak","c":"Morocco","y":30.9931,"x":-8.1528},{"n":"Puebla de Alfinden","c":"Spain","y":41.634,"x":-0.748},{"n":"Perechyn","c":"Ukraine","y":48.7333,"x":22.4667},{"n":"Douar Oulad Mkoudou","c":"Morocco","y":33.8136,"x":-4.5169},{"n":"Mount Hope","c":"United States","y":41.46,"x":-74.5281},{"n":"Muggensturm","c":"Germany","y":48.8725,"x":8.2794},{"n":"Boxberg","c":"Germany","y":49.4814,"x":9.6417},{"n":"Schildow","c":"Germany","y":52.6356,"x":13.3771},{"n":"Cubara","c":"Colombia","y":7.0008,"x":-72.1081},{"n":"Verzuolo","c":"Italy","y":44.6,"x":7.4833},{"n":"Glandorf","c":"Germany","y":52.0839,"x":8.0022},{"n":"Jimena de la Frontera","c":"Spain","y":36.4333,"x":-5.45},{"n":"Weisendorf","c":"Germany","y":49.6167,"x":10.8333},{"n":"Maple Glen","c":"United States","y":40.1778,"x":-75.1793},{"n":"Eatonton","c":"United States","y":33.3258,"x":-83.3886},{"n":"Tuxcueca","c":"Mexico","y":20.1553,"x":-103.1847},{"n":"Kamennogorsk","c":"Russia","y":60.95,"x":29.1333},{"n":"Kiama Downs","c":"Australia","y":-34.6317,"x":150.8511},{"n":"Catugi","c":"Brazil","y":-17.3119,"x":-41.5169},{"n":"Bulkington","c":"United Kingdom","y":52.4769,"x":-1.425},{"n":"Thones","c":"France","y":45.8822,"x":6.3256},{"n":"Vora","c":"Finland","y":63.1333,"x":22.25},{"n":"Obdam","c":"Netherlands","y":52.6743,"x":4.8995},{"n":"Alvechurch","c":"United Kingdom","y":52.3506,"x":-1.9647},{"n":"Aleksandrovskoye","c":"Russia","y":60.4286,"x":77.8658},{"n":"Lacy-Lakeview","c":"United States","y":31.6292,"x":-97.1052},{"n":"Bad Bruckenau","c":"Germany","y":50.3091,"x":9.7871},{"n":"Saint-Marcel-les-Valence","c":"France","y":44.9708,"x":4.9567},{"n":"Kosciusko","c":"United States","y":33.0584,"x":-89.5893},{"n":"Tunkhannock","c":"United States","y":41.0447,"x":-75.4813},{"n":"Hinojosa del Duque","c":"Spain","y":38.5,"x":-5.1333},{"n":"Rajamaki","c":"Finland","y":60.5275,"x":24.75},{"n":"Orchard Mesa","c":"United States","y":39.0363,"x":-108.5169},{"n":"Roaring Spring","c":"United States","y":40.3348,"x":-78.3958},{"n":"Calonne-Ricouart","c":"France","y":50.4869,"x":2.4836},{"n":"San Martino Siccomario","c":"Italy","y":45.15,"x":9.1333},{"n":"Woodfin","c":"United States","y":35.6458,"x":-82.5914},{"n":"Eggolsheim","c":"Germany","y":49.7708,"x":11.0581},{"n":"Pollenza","c":"Italy","y":43.2678,"x":13.3481},{"n":"Saint-Marcel","c":"France","y":46.7756,"x":4.8894},{"n":"Rumson","c":"United States","y":40.3626,"x":-74.0046},{"n":"Pedra Bonita","c":"Brazil","y":-20.5208,"x":-42.33},{"n":"Saint-Prex","c":"Switzerland","y":46.4836,"x":6.4575},{"n":"Bazargan","c":"Iran","y":39.3914,"x":44.3875},{"n":"Letohrad","c":"Czechia","y":50.0358,"x":16.4988},{"n":"Broadway","c":"United States","y":38.6083,"x":-78.8016},{"n":"San Juan Mixtepec","c":"Mexico","y":17.3,"x":-97.8333},{"n":"Orio","c":"Spain","y":43.278,"x":-2.126},{"n":"Kaiseraugst","c":"Switzerland","y":47.5414,"x":7.7278},{"n":"Val-Shefford","c":"Canada","y":45.35,"x":-72.5667},{"n":"Et Tnine des Beni Ammart","c":"Morocco","y":34.8119,"x":-4.1581},{"n":"Velden","c":"Germany","y":48.3667,"x":12.25},{"n":"Douro-Dummer","c":"Canada","y":44.45,"x":-78.1},{"n":"Schwabhausen","c":"Germany","y":48.2833,"x":11.3333},{"n":"Frohnleiten","c":"Austria","y":47.2703,"x":15.3244},{"n":"Yaring","c":"Thailand","y":6.868,"x":101.3587},{"n":"Ilshofen","c":"Germany","y":49.1703,"x":9.9203},{"n":"Phanom Sarakham","c":"Thailand","y":13.7437,"x":101.3523},{"n":"Santa Lucia Monte Verde","c":"Mexico","y":16.95,"x":-97.6667},{"n":"Gamovo","c":"Russia","y":57.8672,"x":56.1031},{"n":"Bouillargues","c":"France","y":43.8003,"x":4.4269},{"n":"Kampong Mulaut","c":"Brunei","y":4.8693,"x":114.8466},{"n":"Pottsville","c":"Australia","y":-28.3869,"x":153.5608},{"n":"Bermuda Dunes","c":"United States","y":33.7434,"x":-116.2874},{"n":"Cellino San Marco","c":"Italy","y":40.4667,"x":17.9667},{"n":"Hermeskeil","c":"Germany","y":49.6572,"x":6.9489},{"n":"Dusslingen","c":"Germany","y":48.4506,"x":9.0606},{"n":"Villers-le-Bouillet","c":"Belgium","y":50.5833,"x":5.2667},{"n":"Pavilly","c":"France","y":49.5683,"x":0.9536},{"n":"Losone","c":"Switzerland","y":46.1689,"x":8.7421},{"n":"New Alresford","c":"United Kingdom","y":51.0907,"x":-1.1612},{"n":"Viriat","c":"France","y":46.2536,"x":5.2167},{"n":"Wilhelmsburg","c":"Austria","y":48.1108,"x":15.61},{"n":"Bol'shaya Chernigovka","c":"Russia","y":52.0983,"x":50.8667},{"n":"Kuttigen","c":"Switzerland","y":47.4164,"x":8.05},{"n":"Bucovice","c":"Czechia","y":49.149,"x":17.0019},{"n":"Gochsheim","c":"Germany","y":50.0167,"x":10.2833},{"n":"Olney","c":"United Kingdom","y":52.1529,"x":-0.7015},{"n":"That Phanom","c":"Thailand","y":16.9364,"x":104.7103},{"n":"Bullskin","c":"United States","y":40.0803,"x":-79.5124},{"n":"Horstmar","c":"Germany","y":52.0806,"x":7.3083},{"n":"San Cesario sul Panaro","c":"Italy","y":44.5667,"x":11.0333},{"n":"Cinquefrondi","c":"Italy","y":38.4167,"x":16.1},{"n":"Castelnau-d'Estretefonds","c":"France","y":43.7822,"x":1.3583},{"n":"Chalonnes-sur-Loire","c":"France","y":47.3506,"x":-0.7639},{"n":"Sottrum","c":"Germany","y":53.1167,"x":9.2167},{"n":"Phan Thong","c":"Thailand","y":13.4681,"x":101.0953},{"n":"Villabe","c":"France","y":48.5883,"x":2.4561},{"n":"Lityn","c":"Ukraine","y":49.3255,"x":28.0872},{"n":"Corbie","c":"France","y":49.9089,"x":2.5072},{"n":"Rohrmoos","c":"Germany","y":48.3333,"x":11.4833},{"n":"Staryi Sambir","c":"Ukraine","y":49.4333,"x":23},{"n":"Wescosville","c":"United States","y":40.5617,"x":-75.5489},{"n":"Chinchilla","c":"Australia","y":-26.7397,"x":150.625},{"n":"Blatna","c":"Czechia","y":49.425,"x":13.8818},{"n":"Avetrana","c":"Italy","y":40.3539,"x":17.7358},{"n":"Rinconada","c":"Argentina","y":-22.4403,"x":-66.1672},{"n":"Karagay","c":"Russia","y":58.2714,"x":54.9389},{"n":"Kronoby","c":"Finland","y":63.725,"x":23.0333},{"n":"Pontenure","c":"Italy","y":45,"x":9.7833},{"n":"Hage","c":"Germany","y":53.6,"x":7.2833},{"n":"Trezzano Rosa","c":"Italy","y":45.5833,"x":9.4833},{"n":"Ashoro","c":"Japan","y":43.2447,"x":143.5542},{"n":"Gramsbergen","c":"Netherlands","y":52.6103,"x":6.6728},{"n":"Roeland Park","c":"United States","y":39.0358,"x":-94.6374},{"n":"Plessisville","c":"Canada","y":46.2167,"x":-71.7833},{"n":"Palkane","c":"Finland","y":61.3389,"x":24.2681},{"n":"Horn","c":"Austria","y":48.6653,"x":15.6558},{"n":"Lucas Valley-Marinwood","c":"United States","y":38.0405,"x":-122.5765},{"n":"Zevenhuizen","c":"Netherlands","y":52.0108,"x":4.58},{"n":"Arbucias","c":"Spain","y":41.8161,"x":2.5142},{"n":"Sawley","c":"United Kingdom","y":52.882,"x":-1.299},{"n":"Faxinal do Soturno","c":"Brazil","y":-29.575,"x":-53.445},{"n":"Montenero di Bisaccia","c":"Italy","y":41.95,"x":14.7833},{"n":"Tafingoult","c":"Morocco","y":30.7667,"x":-8.3833},{"n":"Louhans","c":"France","y":46.6264,"x":5.2247},{"n":"Cherryville","c":"United States","y":35.3844,"x":-81.3781},{"n":"Pecquencourt","c":"France","y":50.3772,"x":3.2158},{"n":"Belfast","c":"United States","y":44.428,"x":-69.0325},{"n":"Ritchot","c":"Canada","y":49.6647,"x":-97.1167},{"n":"Putnok","c":"Hungary","y":48.2936,"x":20.4367},{"n":"Padre Marcos","c":"Brazil","y":-7.355,"x":-40.9039},{"n":"Alcala de Chivert","c":"Spain","y":40.3042,"x":0.2256},{"n":"Fishguard","c":"United Kingdom","y":51.9982,"x":-4.9804},{"n":"Lichtetanne","c":"Germany","y":50.7,"x":12.4333},{"n":"Gouesnou","c":"France","y":48.4536,"x":-4.4644},{"n":"Sevsk","c":"Russia","y":52.15,"x":34.4939},{"n":"Alpicat","c":"Spain","y":41.6681,"x":0.5561},{"n":"Lysterfield","c":"Australia","y":-37.9333,"x":145.3},{"n":"Saint-Maurice-l'Exil","c":"France","y":45.3969,"x":4.7747},{"n":"Teufen","c":"Switzerland","y":47.39,"x":9.39},{"n":"Sallapadan","c":"Philippines","y":17.4551,"x":120.7599},{"n":"Calci","c":"Italy","y":43.7244,"x":10.5192},{"n":"Ijaci","c":"Brazil","y":-21.17,"x":-44.925},{"n":"Sumirago","c":"Italy","y":45.7393,"x":8.7808},{"n":"Montauroux","c":"France","y":43.6183,"x":6.7653},{"n":"Viitasaari","c":"Finland","y":63.075,"x":25.8597},{"n":"Eppertshausen","c":"Germany","y":49.9479,"x":8.8495},{"n":"Svesa","c":"Ukraine","y":51.9481,"x":33.9367},{"n":"Mindszent","c":"Hungary","y":46.525,"x":20.185},{"n":"Arnstedt","c":"Germany","y":51.6833,"x":11.4667},{"n":"Otonabee-South Monaghan","c":"Canada","y":44.2333,"x":-78.2333},{"n":"Pinhao","c":"Brazil","y":-10.5669,"x":-37.7228},{"n":"Schladming","c":"Austria","y":47.3942,"x":13.6892},{"n":"Las Pedroneras","c":"Spain","y":39.45,"x":-2.6667},{"n":"Zierenberg","c":"Germany","y":51.3667,"x":9.3},{"n":"Cwmafan","c":"United Kingdom","y":51.6155,"x":-3.7717},{"n":"Neuenstein","c":"Germany","y":49.2,"x":9.5833},{"n":"Misinto","c":"Italy","y":45.6667,"x":9.0833},{"n":"Dunlap","c":"United States","y":41.6346,"x":-85.9235},{"n":"South Molton","c":"United Kingdom","y":51.02,"x":-3.83},{"n":"Sainte-Livrade-sur-Lot","c":"France","y":44.3981,"x":0.5894},{"n":"Pizzighettone","c":"Italy","y":45.1833,"x":9.7833},{"n":"Nong Chik","c":"Thailand","y":6.8436,"x":101.1781},{"n":"Knetzgau","c":"Germany","y":49.9833,"x":10.55},{"n":"Guaranta","c":"Brazil","y":-21.895,"x":-49.5897},{"n":"Montdidier","c":"France","y":49.6481,"x":2.57},{"n":"Vairano Patenora","c":"Italy","y":41.3333,"x":14.1333},{"n":"Albizzate","c":"Italy","y":45.7167,"x":8.8},{"n":"Ar Rawdah","c":"Yemen","y":14.48,"x":47.27},{"n":"Marcaria","c":"Italy","y":45.1167,"x":10.5333},{"n":"Church Hill","c":"United States","y":36.5204,"x":-82.715},{"n":"Potomac Mills","c":"United States","y":38.6547,"x":-77.3012},{"n":"Shediac","c":"Canada","y":46.2167,"x":-64.5333},{"n":"Tatatila","c":"Mexico","y":19.7,"x":-97.1167},{"n":"Bickenbach","c":"Germany","y":49.754,"x":8.6117},{"n":"Briviesca","c":"Spain","y":42.55,"x":-3.3167},{"n":"Verkhniye Tatyshly","c":"Russia","y":56.2903,"x":55.8539},{"n":"Tangstedt","c":"Germany","y":53.7353,"x":10.0867},{"n":"San Antonio de Vilamajor","c":"Spain","y":41.6726,"x":2.4},{"n":"Neuffen","c":"Germany","y":48.5544,"x":9.3756},{"n":"Cooranbong","c":"Australia","y":-33.074,"x":151.451},{"n":"Illogan","c":"United Kingdom","y":50.25,"x":-5.268},{"n":"Straldzha","c":"Bulgaria","y":42.6,"x":26.6833},{"n":"Hopefield","c":"South Africa","y":-33.0667,"x":18.35},{"n":"Eichendorf","c":"Germany","y":48.6333,"x":12.85},{"n":"Lachendorf","c":"Germany","y":52.6167,"x":10.25},{"n":"Linwood","c":"United States","y":39.3436,"x":-74.5708},{"n":"Ashville","c":"United States","y":39.7239,"x":-82.9575},{"n":"Barro Duro","c":"Brazil","y":-5.8178,"x":-42.5128},{"n":"Wirksworth","c":"United Kingdom","y":53.082,"x":-1.574},{"n":"Ventnor","c":"United Kingdom","y":50.5976,"x":-1.2084},{"n":"Kizilskoye","c":"Russia","y":52.725,"x":58.8917},{"n":"Pilsting","c":"Germany","y":48.7,"x":12.65},{"n":"Sandersville","c":"United States","y":32.9827,"x":-82.8089},{"n":"Colnbrook","c":"United Kingdom","y":51.4835,"x":-0.5221},{"n":"Rissa","c":"Norway","y":63.6556,"x":10.0397},{"n":"Chapelhall","c":"United Kingdom","y":55.845,"x":-3.9472},{"n":"Blairsville","c":"United States","y":40.4325,"x":-79.2599},{"n":"Fegersheim","c":"France","y":48.4906,"x":7.6803},{"n":"Douvaine","c":"France","y":46.305,"x":6.3036},{"n":"Gualtieri","c":"Italy","y":44.9,"x":10.6333},{"n":"Diekholzen","c":"Germany","y":52.1,"x":9.9333},{"n":"Ascona","c":"Switzerland","y":46.15,"x":8.7667},{"n":"Hunters Quay","c":"United Kingdom","y":55.9707,"x":-4.9116},{"n":"Sturtevant","c":"United States","y":42.6995,"x":-87.9019},{"n":"Nyirtelek","c":"Hungary","y":48.0094,"x":21.6322},{"n":"Eaunes","c":"France","y":43.4217,"x":1.3544},{"n":"Slave Lake","c":"Canada","y":55.2853,"x":-114.7706},{"n":"Port-Cartier","c":"Canada","y":50.0333,"x":-66.8667},{"n":"Castronno","c":"Italy","y":45.7333,"x":8.8},{"n":"Sammichele di Bari","c":"Italy","y":40.8833,"x":16.95},{"n":"San Adrian","c":"Spain","y":42.3325,"x":-1.9333},{"n":"Verkhniye Kigi","c":"Russia","y":55.4053,"x":58.6043},{"n":"Cherry Hills Village","c":"United States","y":39.6375,"x":-104.9481},{"n":"Souda","c":"Greece","y":35.4833,"x":24.0667},{"n":"Grandes Rios","c":"Brazil","y":-24.1458,"x":-51.5058},{"n":"Barrington","c":"Canada","y":43.5646,"x":-65.5639},{"n":"Douar El Gouzal","c":"Morocco","y":34.5019,"x":-4.1567},{"n":"Barao de Cotegipe","c":"Brazil","y":-27.6208,"x":-52.38},{"n":"Kozarmisleny","c":"Hungary","y":46.0289,"x":18.2925},{"n":"Pocahontas","c":"United States","y":36.2637,"x":-90.9706},{"n":"Morrilton","c":"United States","y":35.1558,"x":-92.7387},{"n":"La Moncada","c":"Mexico","y":20.2667,"x":-100.8},{"n":"Saint-Genest-Lerpt","c":"France","y":45.4461,"x":4.3367},{"n":"Osterburken","c":"Germany","y":49.4308,"x":9.4261},{"n":"Corjeuti","c":"Moldova","y":48.2167,"x":27.05},{"n":"Blanca","c":"Spain","y":38.1792,"x":-1.3761},{"n":"Chatenoy-le-Royal","c":"France","y":46.7942,"x":4.8164},{"n":"Bellingwolde","c":"Netherlands","y":53.1203,"x":7.1719},{"n":"Fislisbach","c":"Switzerland","y":47.4386,"x":8.2944},{"n":"Shikama","c":"Japan","y":38.5489,"x":140.85},{"n":"Mariopolis","c":"Brazil","y":-26.355,"x":-52.5589},{"n":"Belle Haven","c":"United States","y":38.7775,"x":-77.0574},{"n":"Bolligen","c":"Switzerland","y":46.9761,"x":7.4986},{"n":"Tanvald","c":"Czechia","y":50.7374,"x":15.306},{"n":"Capannoli","c":"Italy","y":43.59,"x":10.6697},{"n":"Zavetnoye","c":"Russia","y":47.1172,"x":43.8908},{"n":"Juana Diaz","c":"Puerto Rico","y":18.0532,"x":-66.5047},{"n":"Chatel-Guyon","c":"France","y":45.9225,"x":3.0642},{"n":"Mecca","c":"United States","y":33.5767,"x":-116.0645},{"n":"Rocky Mountain House","c":"Canada","y":52.3753,"x":-114.9217},{"n":"Flers-en-Escrebieux","c":"France","y":50.3978,"x":3.0625},{"n":"Poggio Mirteto","c":"Italy","y":42.2672,"x":12.6886},{"n":"Mira Monte","c":"United States","y":34.4284,"x":-119.2853},{"n":"Gournay-en-Bray","c":"France","y":49.4806,"x":1.7239},{"n":"Einhausen","c":"Germany","y":49.6722,"x":8.5451},{"n":"Kounoupidiana","c":"Greece","y":35.536,"x":24.076},{"n":"Creel","c":"Mexico","y":27.7522,"x":-107.6347},{"n":"Pea Ridge","c":"United States","y":38.4154,"x":-82.3188},{"n":"Palma","c":"Brazil","y":-21.375,"x":-42.3139},{"n":"Yemilchyne","c":"Ukraine","y":50.8708,"x":27.8028},{"n":"Tsiolkovskiy","c":"Russia","y":51.7603,"x":128.1212},{"n":"Green Knoll","c":"United States","y":40.6048,"x":-74.615},{"n":"Ban Hua Saphan","c":"Thailand","y":13.1248,"x":99.8716},{"n":"Villamuriel de Cerrato","c":"Spain","y":41.95,"x":-4.5167},{"n":"Chatsworth","c":"Canada","y":44.38,"x":-80.87},{"n":"Trysil","c":"Norway","y":61.31,"x":12.315},{"n":"Lloseta","c":"Spain","y":39.7179,"x":2.8667},{"n":"Dona Eusebia","c":"Brazil","y":-21.3161,"x":-42.8108},{"n":"Veneta","c":"United States","y":44.0471,"x":-123.3514},{"n":"North Syracuse","c":"United States","y":43.1339,"x":-76.1306},{"n":"Kirchberg","c":"Switzerland","y":47.0858,"x":7.5861},{"n":"Uffenheim","c":"Germany","y":49.5333,"x":10.25},{"n":"Jiaotanzhuang","c":"China","y":38.5284,"x":113.75},{"n":"Anta","c":"Brazil","y":-19.4978,"x":-41.9839},{"n":"Amga","c":"Russia","y":60.8972,"x":131.9806},{"n":"Ghadamis","c":"Libya","y":30.1333,"x":9.5},{"n":"Monte Aguila","c":"Chile","y":-37.0879,"x":-72.4385},{"n":"Bellona","c":"Italy","y":41.1667,"x":14.2333},{"n":"Stephenville","c":"Canada","y":48.55,"x":-58.5667},{"n":"Schlangenbad","c":"Germany","y":50.0929,"x":8.1019},{"n":"Le Palais-sur-Vienne","c":"France","y":45.8642,"x":1.3231},{"n":"Cadaujac","c":"France","y":44.7556,"x":-0.53},{"n":"Cornetu","c":"Romania","y":44.3434,"x":25.9421},{"n":"Battlefield","c":"United States","y":37.1194,"x":-93.3683},{"n":"Grezieu-la-Varenne","c":"France","y":45.7472,"x":4.6903},{"n":"East Leake","c":"United Kingdom","y":52.832,"x":-1.177},{"n":"North Caldwell","c":"United States","y":40.8629,"x":-74.2576},{"n":"Prades","c":"France","y":42.6172,"x":2.4219},{"n":"Metsavan","c":"Armenia","y":41.2017,"x":44.2289},{"n":"Roccella Ionica","c":"Italy","y":38.3167,"x":16.4},{"n":"Guinisiliban","c":"Philippines","y":9.1,"x":124.7833},{"n":"Ladera Heights","c":"United States","y":33.9972,"x":-118.374},{"n":"Stewarton","c":"United Kingdom","y":55.68,"x":-4.515},{"n":"Bezopasnoye","c":"Russia","y":45.6376,"x":41.9358},{"n":"Winthrop Harbor","c":"United States","y":42.4805,"x":-87.8294},{"n":"Whitmore Lake","c":"United States","y":42.4235,"x":-83.7524},{"n":"Neuhofen an der Krems","c":"Austria","y":48.1336,"x":14.2333},{"n":"Verkhneye Kazanishche","c":"Russia","y":42.7306,"x":47.1381},{"n":"Market Weighton","c":"United Kingdom","y":53.8642,"x":-0.6624},{"n":"Valdovino","c":"Spain","y":43.6,"x":-8.1331},{"n":"L'Hopital","c":"France","y":49.1581,"x":6.7322},{"n":"Arquata Scrivia","c":"Italy","y":44.6925,"x":8.8817},{"n":"Diamante","c":"Brazil","y":-7.4278,"x":-38.2639},{"n":"Grao Para","c":"Brazil","y":-28.185,"x":-49.215},{"n":"Brewton","c":"United States","y":31.1111,"x":-87.0737},{"n":"Tamanredjo","c":"Suriname","y":5.7667,"x":-55},{"n":"Limbricht","c":"Netherlands","y":51.0117,"x":5.8369},{"n":"Anavyssos","c":"Greece","y":37.7333,"x":23.95},{"n":"Orlov","c":"Russia","y":58.5333,"x":48.8833},{"n":"Kermit","c":"United States","y":31.854,"x":-103.0924},{"n":"Belisce","c":"Croatia","y":45.6825,"x":18.4069},{"n":"Demopolis","c":"United States","y":32.498,"x":-87.8298},{"n":"Thalheim","c":"Germany","y":50.7025,"x":12.8517},{"n":"Veigne","c":"France","y":47.2875,"x":0.7375},{"n":"Awjilah","c":"Libya","y":29.1081,"x":21.2869},{"n":"Sao Jose do Piaui","c":"Brazil","y":-6.8719,"x":-41.475},{"n":"Burgkunstadt","c":"Germany","y":50.1356,"x":11.2499},{"n":"Guairaca","c":"Brazil","y":-22.9339,"x":-52.6858},{"n":"Labruguiere","c":"France","y":43.5392,"x":2.2633},{"n":"Saint-Pryve-Saint-Mesmin","c":"France","y":47.8808,"x":1.8678},{"n":"Talent","c":"United States","y":42.2404,"x":-122.7807},{"n":"Carral","c":"Spain","y":43.2296,"x":-8.356},{"n":"Dubnany","c":"Czechia","y":48.917,"x":17.09},{"n":"Sudova Vyshnya","c":"Ukraine","y":49.7892,"x":23.3722},{"n":"Almensilla","c":"Spain","y":37.3167,"x":-6.1167},{"n":"Pan de Azucar","c":"Uruguay","y":-34.8,"x":-55.2167},{"n":"Jaraiz de la Vera","c":"Spain","y":40.0603,"x":-5.755},{"n":"Ploce","c":"Croatia","y":43.0525,"x":17.4367},{"n":"Oberding","c":"Germany","y":48.3167,"x":11.85},{"n":"Uthai","c":"Thailand","y":14.368,"x":100.6713},{"n":"Normandy Park","c":"United States","y":47.4343,"x":-122.3436},{"n":"Peterborough","c":"United States","y":42.8905,"x":-71.9394},{"n":"Montesano sulla Marcellana","c":"Italy","y":40.2833,"x":15.7},{"n":"Santa Fe do Araguaia","c":"Brazil","y":-7.1569,"x":-48.7208},{"n":"Kerkwijk","c":"Netherlands","y":51.7744,"x":5.2194},{"n":"Echallens","c":"Switzerland","y":46.6333,"x":6.6333},{"n":"Ambridge","c":"United States","y":40.5922,"x":-80.2265},{"n":"Amite City","c":"United States","y":30.7323,"x":-90.5133},{"n":"Saint-Flour","c":"France","y":45.0336,"x":3.0928},{"n":"Catasauqua","c":"United States","y":40.6531,"x":-75.4643},{"n":"Ivanychi","c":"Ukraine","y":50.6419,"x":24.3606},{"n":"Passo do Sobrado","c":"Brazil","y":-29.7478,"x":-52.275},{"n":"Lydd","c":"United Kingdom","y":50.9509,"x":0.9064},{"n":"Kirchheim am Neckar","c":"Germany","y":49.0439,"x":9.1464},{"n":"Afonso Cunha","c":"Brazil","y":-4.1328,"x":-43.3239},{"n":"Rodewisch","c":"Germany","y":50.5167,"x":12.4167},{"n":"Cocoa West","c":"United States","y":28.3595,"x":-80.7712},{"n":"Pryazovske","c":"Ukraine","y":46.7378,"x":35.6416},{"n":"Tetecala","c":"Mexico","y":18.7167,"x":-99.3833},{"n":"Lat Yao","c":"Thailand","y":15.7543,"x":99.7808},{"n":"Tuddern","c":"Germany","y":51.0139,"x":5.9008},{"n":"Strongoli","c":"Italy","y":39.2667,"x":17.0667},{"n":"Mainleus","c":"Germany","y":50.1,"x":11.3792},{"n":"Alessano","c":"Italy","y":39.8833,"x":18.3333},{"n":"Strensall","c":"United Kingdom","y":54.0401,"x":-1.0344},{"n":"Dingwall","c":"United Kingdom","y":57.597,"x":-4.428},{"n":"Tsuman","c":"Ukraine","y":50.8333,"x":25.8833},{"n":"Slatyne","c":"Ukraine","y":50.2161,"x":36.1525},{"n":"Nikhom Kham Soi","c":"Thailand","y":16.3749,"x":104.5551},{"n":"Nishiharadai","c":"Japan","y":32.8347,"x":130.9031},{"n":"Gyorujbarat","c":"Hungary","y":47.6079,"x":17.6464},{"n":"Forestbrook","c":"United States","y":33.7243,"x":-78.9678},{"n":"Thannhausen","c":"Germany","y":48.2667,"x":10.4667},{"n":"Gallicano nel Lazio","c":"Italy","y":41.8667,"x":12.8167},{"n":"Cipotanea","c":"Brazil","y":-20.905,"x":-43.3658},{"n":"Siziano","c":"Italy","y":45.3167,"x":9.2},{"n":"Kerekegyhaza","c":"Hungary","y":46.9369,"x":19.4769},{"n":"Eliot","c":"United States","y":43.1488,"x":-70.786},{"n":"Treforest","c":"United Kingdom","y":51.5878,"x":-3.3222},{"n":"Templeuve","c":"France","y":50.5267,"x":3.175},{"n":"Morro Reuter","c":"Brazil","y":-29.5378,"x":-51.0808},{"n":"Bad Blankenburg","c":"Germany","y":50.6833,"x":11.2667},{"n":"Capranica","c":"Italy","y":42.2585,"x":12.1728},{"n":"Nova Alianca","c":"Brazil","y":-21.0158,"x":-49.4958},{"n":"Tuiuti","c":"Brazil","y":-22.8158,"x":-46.6939},{"n":"Lavelanet","c":"France","y":42.9328,"x":1.8486},{"n":"Aratiba","c":"Brazil","y":-27.3939,"x":-52.3},{"n":"Buc","c":"France","y":48.7733,"x":2.1253},{"n":"Meolo","c":"Italy","y":45.6203,"x":12.4559},{"n":"Northgate","c":"United States","y":39.2531,"x":-84.5943},{"n":"Sretensk","c":"Russia","y":52.25,"x":117.7167},{"n":"Gonnosfanadiga","c":"Italy","y":39.4933,"x":8.6629},{"n":"Makaryev","c":"Russia","y":57.8833,"x":43.8},{"n":"Svetla nad Sazavou","c":"Czechia","y":49.6681,"x":15.404},{"n":"Turcianske Teplice","c":"Slovakia","y":48.8589,"x":18.8636},{"n":"Havelberg","c":"Germany","y":52.825,"x":12.0744},{"n":"Ishqoshim","c":"Tajikistan","y":36.7272,"x":71.6117},{"n":"Varshets","c":"Bulgaria","y":43.1953,"x":23.2858},{"n":"Isen","c":"Japan","y":27.6736,"x":128.9375},{"n":"Calatafimi","c":"Italy","y":37.9,"x":12.85},{"n":"Aguas Mornas","c":"Brazil","y":-27.6939,"x":-48.8239},{"n":"Livigno","c":"Italy","y":46.5333,"x":10.1333},{"n":"Roseti","c":"Romania","y":44.2106,"x":27.4481},{"n":"Devon","c":"Canada","y":53.3633,"x":-113.7322},{"n":"Lehliu-Gara","c":"Romania","y":44.4386,"x":26.8533},{"n":"Arcole","c":"Italy","y":45.35,"x":11.2833},{"n":"Solbiate Olona","c":"Italy","y":45.65,"x":8.8833},{"n":"Mamonas","c":"Brazil","y":-15.05,"x":-42.9489},{"n":"Phu Khiao","c":"Thailand","y":16.3682,"x":102.1344},{"n":"Bua Chet","c":"Thailand","y":14.5326,"x":103.9301},{"n":"Condom","c":"France","y":43.9575,"x":0.3725},{"n":"Lezo","c":"Spain","y":43.3167,"x":-1.9},{"n":"Khok Samrong","c":"Thailand","y":15.0691,"x":100.7234},{"n":"Ribeira de Pena","c":"Portugal","y":41.5167,"x":-7.8},{"n":"Agapovka","c":"Russia","y":53.2942,"x":59.1344},{"n":"Mont Belvieu","c":"United States","y":29.8524,"x":-94.8784},{"n":"Bilokurakyne","c":"Ukraine","y":49.5167,"x":38.7167},{"n":"Teglas","c":"Hungary","y":47.7167,"x":21.6833},{"n":"Challes-les-Eaux","c":"France","y":45.5475,"x":5.9839},{"n":"Guarda Mor","c":"Brazil","y":-17.7708,"x":-47.0978},{"n":"Grossalmerode","c":"Germany","y":51.2575,"x":9.7844},{"n":"Porter","c":"United States","y":43.2517,"x":-78.972},{"n":"Sao Jose do Jacuri","c":"Brazil","y":-18.275,"x":-42.67},{"n":"Cold Spring","c":"United States","y":39.013,"x":-84.4349},{"n":"Makarov","c":"Russia","y":48.627,"x":142.78},{"n":"San Giorgio in Bosco","c":"Italy","y":45.5833,"x":11.8},{"n":"Velez Rubio","c":"Spain","y":37.65,"x":-2.0667},{"n":"Scriba","c":"United States","y":43.4599,"x":-76.4186},{"n":"Fossacesia","c":"Italy","y":42.25,"x":14.4833},{"n":"Walnut Ridge","c":"United States","y":36.0851,"x":-90.9463},{"n":"Topsfield","c":"United States","y":42.6373,"x":-70.9425},{"n":"Krimpen aan de Lek","c":"Netherlands","y":51.8931,"x":4.6275},{"n":"Thompson's Station","c":"United States","y":35.809,"x":-86.8994},{"n":"Condor","c":"Brazil","y":-28.2078,"x":-53.4869},{"n":"Schoffengrund","c":"Germany","y":50.4833,"x":8.4833},{"n":"Stickney","c":"United States","y":41.8183,"x":-87.773},{"n":"Aszod","c":"Hungary","y":47.6514,"x":19.4894},{"n":"Ohio","c":"United States","y":40.5425,"x":-80.0926},{"n":"Haparanda","c":"Sweden","y":65.8342,"x":24.117},{"n":"Burwell","c":"United Kingdom","y":52.275,"x":0.327},{"n":"Spassk-Ryazanskiy","c":"Russia","y":54.4,"x":40.3833},{"n":"Wentworth Falls","c":"Australia","y":-33.7164,"x":150.3772},{"n":"Ploudalmezeau","c":"France","y":48.5403,"x":-4.6575},{"n":"Quinzano d'Oglio","c":"Italy","y":45.3167,"x":9.9833},{"n":"Sertao de Santana","c":"Brazil","y":-30.46,"x":-51.6028},{"n":"Green Hill","c":"United States","y":36.2349,"x":-86.5733},{"n":"Raon-l'Etape","c":"France","y":48.4058,"x":6.8411},{"n":"Seeboden","c":"Austria","y":46.8189,"x":13.5183},{"n":"Rossford","c":"United States","y":41.5832,"x":-83.5692},{"n":"Blackwell","c":"United States","y":36.8011,"x":-97.3008},{"n":"Aguas de Chapeco","c":"Brazil","y":-27.07,"x":-52.9869},{"n":"Serzhen'-Yurt","c":"Russia","y":43.1228,"x":45.9858},{"n":"Outjo","c":"Namibia","y":-20.1069,"x":16.1503},{"n":"Candido Godoi","c":"Brazil","y":-27.9519,"x":-54.7519},{"n":"Bad Marienberg","c":"Germany","y":50.6519,"x":7.9522},{"n":"Wathlingen","c":"Germany","y":52.5333,"x":10.15},{"n":"Insuratei","c":"Romania","y":44.9167,"x":27.6},{"n":"Nemsova","c":"Slovakia","y":48.9669,"x":18.1169},{"n":"Hiroo","c":"Japan","y":42.2861,"x":143.3117},{"n":"Andijk","c":"Netherlands","y":52.75,"x":5.22},{"n":"Scone","c":"Australia","y":-32.0833,"x":150.85},{"n":"Blonay","c":"Switzerland","y":46.4667,"x":6.9},{"n":"Ottersweier","c":"Germany","y":48.6711,"x":8.1108},{"n":"Codevigo","c":"Italy","y":45.2672,"x":12.1014},{"n":"Barrow upon Soar","c":"United Kingdom","y":52.7517,"x":-1.15},{"n":"Juva","c":"Finland","y":61.8972,"x":27.8569},{"n":"Ras Ijerri","c":"Morocco","y":33.7833,"x":-5.7167},{"n":"Roslyn Heights","c":"United States","y":40.7787,"x":-73.6396},{"n":"Albanella","c":"Italy","y":40.4833,"x":15.1167},{"n":"Gignac","c":"France","y":43.6519,"x":3.5511},{"n":"Spinazzola","c":"Italy","y":40.9667,"x":16.0833},{"n":"Vestnes","c":"Norway","y":62.6213,"x":7.0897},{"n":"Gata de Gorgos","c":"Spain","y":38.7747,"x":0.0853},{"n":"Earlswood","c":"United Kingdom","y":51.228,"x":-0.171},{"n":"Quirihue","c":"Chile","y":-36.2833,"x":-72.5333},{"n":"Waki","c":"Japan","y":34.2022,"x":132.2203},{"n":"Waikoloa Village","c":"United States","y":19.9285,"x":-155.8185},{"n":"Veseli nad Luznici","c":"Czechia","y":49.1844,"x":14.6974},{"n":"Sehma","c":"Germany","y":50.5167,"x":12.9833},{"n":"Keyes","c":"United States","y":37.5618,"x":-120.9088},{"n":"Cumming","c":"United States","y":34.2064,"x":-84.1337},{"n":"Cregy-les-Meaux","c":"France","y":48.9786,"x":2.8783},{"n":"Zaratan","c":"Spain","y":41.6603,"x":-4.7836},{"n":"Dettingen unter Teck","c":"Germany","y":48.6161,"x":9.4517},{"n":"Katikati","c":"New Zealand","y":-37.55,"x":175.9167},{"n":"Linz am Rhein","c":"Germany","y":50.5703,"x":7.2847},{"n":"South Elmsall","c":"United Kingdom","y":53.5959,"x":-1.2726},{"n":"Fox Point","c":"United States","y":43.1581,"x":-87.9013},{"n":"Castelgomberto","c":"Italy","y":45.5833,"x":11.4},{"n":"Porto do Mangue","c":"Brazil","y":-5.0678,"x":-36.7819},{"n":"Rosolina","c":"Italy","y":45.0667,"x":12.2333},{"n":"Bruguieres","c":"France","y":43.7242,"x":1.4114},{"n":"Beaudesert","c":"Australia","y":-27.988,"x":152.9958},{"n":"Slippery Rock","c":"United States","y":41.0695,"x":-80.058},{"n":"Clairton","c":"United States","y":40.2976,"x":-79.8853},{"n":"Oakmont","c":"United States","y":40.5201,"x":-79.8365},{"n":"Sao Francisco de Oliveira","c":"Brazil","y":-20.71,"x":-44.985},{"n":"Melhus","c":"Norway","y":63.2856,"x":10.2781},{"n":"Plaquemine","c":"United States","y":30.2834,"x":-91.2429},{"n":"Agria","c":"Greece","y":39.34,"x":23.0133},{"n":"Elkin","c":"United States","y":36.2621,"x":-80.8441},{"n":"Nova Palma","c":"Brazil","y":-29.4719,"x":-53.4689},{"n":"Beyram","c":"Iran","y":27.4306,"x":53.5144},{"n":"Bischofszell","c":"Switzerland","y":47.4997,"x":9.2333},{"n":"Plattsmouth","c":"United States","y":41.0053,"x":-95.894},{"n":"De Queen","c":"United States","y":34.0426,"x":-94.342},{"n":"Swanton","c":"United States","y":44.9081,"x":-73.1252},{"n":"Hapeville","c":"United States","y":33.6609,"x":-84.4093},{"n":"Laurence Harbor","c":"United States","y":40.4489,"x":-74.2494},{"n":"Montech","c":"France","y":43.9569,"x":1.2297},{"n":"Plaidt","c":"Germany","y":50.3903,"x":7.3894},{"n":"L'Isle-d'Espagnac","c":"France","y":45.6614,"x":0.1997},{"n":"Marisopolis","c":"Brazil","y":-6.8419,"x":-38.3469},{"n":"Zellingen","c":"Germany","y":49.9,"x":9.8167},{"n":"Beaurains","c":"France","y":50.2631,"x":2.7886},{"n":"Pa Daet","c":"Thailand","y":19.505,"x":99.9925},{"n":"Bursledon","c":"United Kingdom","y":50.8847,"x":-1.3117},{"n":"Lurago d'Erba","c":"Italy","y":45.75,"x":9.2167},{"n":"Pedda Nandipadu","c":"India","y":16.0728,"x":80.3294},{"n":"Olula del Rio","c":"Spain","y":37.35,"x":-2.2833},{"n":"Eibiswald","c":"Austria","y":46.6867,"x":15.2472},{"n":"Sao Jose da Boa Vista","c":"Brazil","y":-23.9158,"x":-49.6519},{"n":"Moudon","c":"Switzerland","y":46.6687,"x":6.7974},{"n":"Villaverla","c":"Italy","y":45.65,"x":11.5},{"n":"Atlantic","c":"United States","y":41.3957,"x":-95.0138},{"n":"Blaby","c":"United Kingdom","y":52.5724,"x":-1.1678},{"n":"Ramillies-Offus","c":"Belgium","y":50.6333,"x":4.9},{"n":"Jowzdan","c":"Iran","y":32.5567,"x":51.3725},{"n":"Parentis-en-Born","c":"France","y":44.3494,"x":-1.0744},{"n":"Sesto al Reghena","c":"Italy","y":45.85,"x":12.8167},{"n":"Cagayancillo","c":"Philippines","y":9.5769,"x":121.1972},{"n":"Horneburg","c":"Germany","y":53.5094,"x":9.575},{"n":"Sant'Arcangelo","c":"Italy","y":40.2485,"x":16.2705},{"n":"Dinkelscherben","c":"Germany","y":48.35,"x":10.5833},{"n":"Brolo","c":"Italy","y":38.1562,"x":14.828},{"n":"Torrellas de Llobregat","c":"Spain","y":41.3565,"x":1.9816},{"n":"Orindiuva","c":"Brazil","y":-20.1819,"x":-49.3508},{"n":"Boudry","c":"Switzerland","y":46.95,"x":6.8333},{"n":"Yarmouth","c":"Canada","y":43.8361,"x":-66.1175},{"n":"Mature","c":"Brazil","y":-7.2669,"x":-37.3508},{"n":"Dan Khun Thot","c":"Thailand","y":15.2099,"x":101.7667},{"n":"Altlussheim","c":"Germany","y":49.2997,"x":8.5},{"n":"Russells Point","c":"United States","y":40.468,"x":-83.8939},{"n":"Martins Ferry","c":"United States","y":40.1014,"x":-80.7253},{"n":"Bom Jardim de Minas","c":"Brazil","y":-21.9469,"x":-44.1908},{"n":"Vargem Alegre","c":"Brazil","y":-19.6078,"x":-42.2978},{"n":"Port Mathurin","c":"Mauritius","y":-19.6833,"x":63.4211},{"n":"Calstock","c":"United Kingdom","y":50.497,"x":-4.21},{"n":"Dromana","c":"Australia","y":-38.338,"x":144.965},{"n":"Douar Tassila Imassouane","c":"Morocco","y":31.1386,"x":-9.6092},{"n":"Dobrotvir","c":"Ukraine","y":50.2056,"x":24.3864},{"n":"Bispingen","c":"Germany","y":53.0828,"x":9.9983},{"n":"Weaverham","c":"United Kingdom","y":53.262,"x":-2.577},{"n":"Bagrationovsk","c":"Russia","y":54.3833,"x":20.6333},{"n":"Schallstadt","c":"Germany","y":47.9581,"x":7.7503},{"n":"Bacsalmas","c":"Hungary","y":46.1239,"x":19.3261},{"n":"Air Force Academy","c":"United States","y":38.9942,"x":-104.8639},{"n":"Blankenhain","c":"Germany","y":50.86,"x":11.3439},{"n":"Luis Domingues","c":"Brazil","y":-1.2678,"x":-45.8728},{"n":"Silacayoapam","c":"Mexico","y":17.5,"x":-98.1333},{"n":"Offanengo","c":"Italy","y":45.3833,"x":9.7333},{"n":"Barzano","c":"Italy","y":45.7333,"x":9.3167},{"n":"Casorate Sempione","c":"Italy","y":45.6667,"x":8.7333},{"n":"Castries","c":"France","y":43.6789,"x":3.9814},{"n":"New Inn","c":"United Kingdom","y":51.691,"x":-3.009},{"n":"Nilsia","c":"Finland","y":63.2042,"x":28.0833},{"n":"Leves","c":"France","y":48.4689,"x":1.4814},{"n":"Chrastava","c":"Czechia","y":50.817,"x":14.9689},{"n":"Metelen","c":"Germany","y":52.1444,"x":7.2119},{"n":"Heathcote","c":"United States","y":40.3908,"x":-74.5756},{"n":"Jaunay-Clan","c":"France","y":46.6856,"x":0.37},{"n":"Balsthal","c":"Switzerland","y":47.3164,"x":7.6944},{"n":"Rittman","c":"United States","y":40.9736,"x":-81.7849},{"n":"Bangor Base","c":"United States","y":47.7227,"x":-122.7146},{"n":"Saint-Cyr-au-Mont-d'Or","c":"France","y":45.8144,"x":4.8181},{"n":"Brignano Gera d'Adda","c":"Italy","y":45.5333,"x":9.6333},{"n":"Lassance","c":"Brazil","y":-17.8869,"x":-44.5778},{"n":"Anadarko","c":"United States","y":35.0652,"x":-98.2441},{"n":"Slavicin","c":"Czechia","y":49.088,"x":17.8735},{"n":"Barnstorf","c":"Germany","y":52.7103,"x":8.5086},{"n":"Bahman","c":"Iran","y":31.1942,"x":52.4839},{"n":"Dourges","c":"France","y":50.4361,"x":2.9867},{"n":"Botumirim","c":"Brazil","y":-16.8719,"x":-43.0108},{"n":"Weiskirchen","c":"Germany","y":49.5561,"x":6.82},{"n":"Laudun-l'Ardoise","c":"France","y":44.105,"x":4.6575},{"n":"Zell im Wiesental","c":"Germany","y":47.7069,"x":7.8514},{"n":"Schriever","c":"United States","y":29.7334,"x":-90.831},{"n":"Sommariva del Bosco","c":"Italy","y":44.7667,"x":7.7833},{"n":"Harrah","c":"United States","y":35.4779,"x":-97.1857},{"n":"Obergunzburg","c":"Germany","y":47.85,"x":10.4167},{"n":"Podborany","c":"Czechia","y":50.2295,"x":13.412},{"n":"Williamston","c":"United States","y":42.6835,"x":-84.2836},{"n":"Homeacre-Lyndora","c":"United States","y":40.8721,"x":-79.9211},{"n":"Oishida","c":"Japan","y":38.5939,"x":140.3728},{"n":"Brannenburg","c":"Germany","y":47.7333,"x":12.1},{"n":"Doutor Severiano","c":"Brazil","y":-6.0939,"x":-38.375},{"n":"Bakum","c":"Germany","y":52.7428,"x":8.1958},{"n":"Nossa Senhora de Lourdes","c":"Brazil","y":-10.0794,"x":-37.1078},{"n":"Pratt","c":"United States","y":37.6764,"x":-98.7451},{"n":"Basehor","c":"United States","y":39.1332,"x":-94.9333},{"n":"Dudenhofen","c":"Germany","y":49.3178,"x":8.3906},{"n":"Benfeld","c":"France","y":48.3706,"x":7.5922},{"n":"Millingen aan de Rijn","c":"Netherlands","y":51.8667,"x":6.05},{"n":"Severance","c":"United States","y":40.527,"x":-104.8642},{"n":"Ocean Shores","c":"United States","y":46.9685,"x":-124.1521},{"n":"San Michele Salentino","c":"Italy","y":40.6333,"x":17.6333},{"n":"Kondor","c":"Iran","y":35.2131,"x":58.1514},{"n":"Sciez","c":"France","y":46.3319,"x":6.3739},{"n":"La Habra Heights","c":"United States","y":33.9602,"x":-117.951},{"n":"Gangkofen","c":"Germany","y":48.4369,"x":12.5633},{"n":"San Ramon","c":"Bolivia","y":-13.2672,"x":-64.6172},{"n":"Caneva","c":"Italy","y":45.9667,"x":12.45},{"n":"East Rochester","c":"United States","y":43.112,"x":-77.4869},{"n":"Cournonterral","c":"France","y":43.5578,"x":3.7189},{"n":"Dragalina","c":"Romania","y":44.4346,"x":27.3318},{"n":"Rio Sono","c":"Brazil","y":-9.3439,"x":-47.9019},{"n":"Mulvane","c":"United States","y":37.4788,"x":-97.2724},{"n":"Beerfelden","c":"Germany","y":49.5676,"x":8.9738},{"n":"Tiradentes","c":"Brazil","y":-27.3978,"x":-54.0839},{"n":"Looe","c":"United Kingdom","y":50.354,"x":-4.454},{"n":"Bungay","c":"United Kingdom","y":52.4496,"x":1.4477},{"n":"Camilla","c":"United States","y":31.2337,"x":-84.2089},{"n":"Hillandale","c":"United States","y":39.0254,"x":-76.9751},{"n":"Yar-Sale","c":"Russia","y":66.8633,"x":70.83},{"n":"Zarnovica","c":"Slovakia","y":48.4833,"x":18.7167},{"n":"Schwarzenfeld","c":"Germany","y":49.3833,"x":12.1333},{"n":"Grayvoron","c":"Russia","y":50.4833,"x":35.6667},{"n":"Taksony","c":"Hungary","y":47.3319,"x":19.0631},{"n":"Weiler-Simmerberg","c":"Germany","y":47.5833,"x":9.9333},{"n":"Medolla","c":"Italy","y":44.8488,"x":11.0714},{"n":"Iacri","c":"Brazil","y":-21.8583,"x":-50.6894},{"n":"Stratmoor","c":"United States","y":38.7732,"x":-104.7787},{"n":"Saint-Jean-de-Boiseau","c":"France","y":47.1942,"x":-1.7247},{"n":"Jonage","c":"France","y":45.7964,"x":5.0467},{"n":"Granville","c":"United States","y":43.4188,"x":-73.3086},{"n":"Mestigmer","c":"Morocco","y":34.4868,"x":-2.6883},{"n":"Bon-Encontre","c":"France","y":44.1864,"x":0.6719},{"n":"Sernaglia della Battaglia","c":"Italy","y":45.8833,"x":12.1333},{"n":"Sao Martinho","c":"Portugal","y":38.8125,"x":-9.4208},{"n":"Pimonte","c":"Italy","y":40.6736,"x":14.5125},{"n":"Brejo dos Santos","c":"Brazil","y":-6.3769,"x":-37.825},{"n":"Ares","c":"France","y":44.765,"x":-1.1367},{"n":"Abercarn","c":"United Kingdom","y":51.649,"x":-3.135},{"n":"Asiago","c":"Italy","y":45.8667,"x":11.5167},{"n":"Juti","c":"Brazil","y":-22.8608,"x":-54.6028},{"n":"Drabiv","c":"Ukraine","y":49.9603,"x":32.1481},{"n":"Pont-Saint-Martin","c":"France","y":47.1236,"x":-1.5844},{"n":"Lagoao","c":"Brazil","y":-29.235,"x":-52.7958},{"n":"Sardarapat","c":"Armenia","y":40.1321,"x":44.0097},{"n":"Ida Ou Gailal","c":"Morocco","y":30.6377,"x":-8.6315},{"n":"Duanesburg","c":"United States","y":42.7799,"x":-74.1805},{"n":"Prairie du Chien","c":"United States","y":43.0429,"x":-91.1373},{"n":"Winterlingen","c":"Germany","y":48.1797,"x":9.1153},{"n":"Wiset Chaichan","c":"Thailand","y":14.589,"x":100.3482},{"n":"Drayton","c":"United Kingdom","y":52.675,"x":1.225},{"n":"Silver Lake","c":"United States","y":34.1408,"x":-77.909},{"n":"Shalya","c":"Russia","y":57.2408,"x":58.7344},{"n":"Maiolati Spontini","c":"Italy","y":43.4772,"x":13.1192},{"n":"Laage","c":"Germany","y":53.9322,"x":12.3467},{"n":"Miraflores de la Sierra","c":"Spain","y":40.8114,"x":-3.7686},{"n":"Laranjal","c":"Brazil","y":-21.3739,"x":-42.4769},{"n":"Sarria de Ter","c":"Spain","y":42.0181,"x":2.8261},{"n":"Monzuno","c":"Italy","y":44.2833,"x":11.2667},{"n":"Prestonsburg","c":"United States","y":37.6816,"x":-82.7662},{"n":"Uetendorf","c":"Switzerland","y":46.7664,"x":7.5667},{"n":"Gomez Farias","c":"Mexico","y":29.3583,"x":-107.7361},{"n":"Rosenfeld","c":"Germany","y":48.2864,"x":8.7242},{"n":"Nagyecsed","c":"Hungary","y":47.8619,"x":22.3867},{"n":"Selviria","c":"Brazil","y":-20.3669,"x":-51.4189},{"n":"Zusmarshausen","c":"Germany","y":48.3833,"x":10.5833},{"n":"Neumarkt am Wallersee","c":"Austria","y":47.9453,"x":13.2247},{"n":"Lentilly","c":"France","y":45.8186,"x":4.6631},{"n":"Sidley","c":"United Kingdom","y":50.86,"x":0.47},{"n":"Fockbek","c":"Germany","y":54.305,"x":9.6008},{"n":"Marsillargues","c":"France","y":43.6644,"x":4.1769},{"n":"Moraine","c":"United States","y":39.6983,"x":-84.2459},{"n":"Castle Donnington","c":"United Kingdom","y":52.8444,"x":-1.3377},{"n":"Penn Yan","c":"United States","y":42.6608,"x":-77.0536},{"n":"Scenic Oaks","c":"United States","y":29.7038,"x":-98.6713},{"n":"Lanchkhuti","c":"Georgia","y":42.0875,"x":42.0333},{"n":"Ras Tabouda","c":"Morocco","y":34,"x":-4.7167},{"n":"Gorliz-Elexalde","c":"Spain","y":43.4167,"x":-2.9333},{"n":"Moya","c":"Spain","y":41.8131,"x":2.0971},{"n":"Villanuova sul clisi","c":"Italy","y":45.6,"x":10.45},{"n":"Mendes Pimentel","c":"Brazil","y":-18.6608,"x":-41.405},{"n":"Seloncourt","c":"France","y":47.4606,"x":6.8583},{"n":"Genoa","c":"United States","y":42.0926,"x":-88.6964},{"n":"Otis Orchards-East Farms","c":"United States","y":47.703,"x":-117.0854},{"n":"Fagagna","c":"Italy","y":46.1167,"x":13.0833},{"n":"Herrera","c":"Spain","y":37.3667,"x":-4.8333},{"n":"Boischatel","c":"Canada","y":46.9,"x":-71.15},{"n":"Loutolim","c":"India","y":15.33,"x":73.98},{"n":"Dalaba","c":"Guinea","y":10.656,"x":-12.272},{"n":"Baykalovo","c":"Russia","y":57.3969,"x":63.7672},{"n":"Bauvin","c":"France","y":50.5142,"x":2.8981},{"n":"South Grafton","c":"Australia","y":-29.715,"x":152.9344},{"n":"Kolleda","c":"Germany","y":51.1667,"x":11.2167},{"n":"Loches","c":"France","y":47.1286,"x":0.9953},{"n":"Berdigestyakh","c":"Russia","y":62.0984,"x":126.6957},{"n":"Darnestown","c":"United States","y":39.096,"x":-77.3033},{"n":"Urnieta","c":"Spain","y":43.2469,"x":-1.9917},{"n":"Collins","c":"United States","y":42.4908,"x":-78.8623},{"n":"Essingen","c":"Germany","y":48.8083,"x":10.0278},{"n":"Glendive","c":"United States","y":47.1102,"x":-104.7069},{"n":"Cuddington","c":"United Kingdom","y":53.24,"x":-2.6},{"n":"Epernon","c":"France","y":48.6108,"x":1.6742},{"n":"Yorketown","c":"United States","y":40.3064,"x":-74.3385},{"n":"Guichon","c":"Uruguay","y":-32.35,"x":-57.2},{"n":"Bizhbulyak","c":"Russia","y":53.6967,"x":54.2642},{"n":"Oficina Maria Elena","c":"Chile","y":-22.35,"x":-69.6667},{"n":"Barra do Rocha","c":"Brazil","y":-14.2108,"x":-39.6019},{"n":"Wem","c":"United Kingdom","y":52.8536,"x":-2.7267},{"n":"Santo Antonio de Lisboa","c":"Brazil","y":-6.9808,"x":-41.2339},{"n":"Umkirch","c":"Germany","y":48.0328,"x":7.7636},{"n":"Liss","c":"United Kingdom","y":51.0429,"x":-0.8918},{"n":"Ingeniero Guillermo N. Juarez","c":"Argentina","y":-23.9,"x":-61.85},{"n":"Nufringen","c":"Germany","y":48.6222,"x":8.8875},{"n":"Uzzano","c":"Italy","y":43.8833,"x":10.7167},{"n":"Lake Murray of Richland","c":"United States","y":34.1209,"x":-81.2653},{"n":"Encs","c":"Hungary","y":48.3306,"x":21.1217},{"n":"Subbiano","c":"Italy","y":43.58,"x":11.8722},{"n":"Pont-Sainte-Marie","c":"France","y":48.3206,"x":4.1014},{"n":"Pereiro de Aguiar","c":"Spain","y":42.3464,"x":-7.8003},{"n":"Commentry","c":"France","y":46.2889,"x":2.7417},{"n":"Belgioioso","c":"Italy","y":45.1667,"x":9.3167},{"n":"Lubz","c":"Germany","y":53.4631,"x":12.0283},{"n":"Klingenberg am Main","c":"Germany","y":49.7833,"x":9.1833},{"n":"Marolles-en-Hurepoix","c":"France","y":48.5625,"x":2.2983},{"n":"Beni Sidal Louta","c":"Morocco","y":35.1069,"x":-3.0656},{"n":"Tiyghmi","c":"Morocco","y":29.5875,"x":-9.4063},{"n":"Porto Cesareo","c":"Italy","y":40.2667,"x":17.9},{"n":"Girvan","c":"United Kingdom","y":55.2382,"x":-4.8561},{"n":"Saidat","c":"Morocco","y":31.3442,"x":-8.7053},{"n":"Swanscombe","c":"United Kingdom","y":51.4491,"x":0.2993},{"n":"Ironwood","c":"United States","y":46.4522,"x":-90.1505},{"n":"Macambira","c":"Brazil","y":-10.6658,"x":-37.5408},{"n":"Burghaun","c":"Germany","y":50.7,"x":9.7167},{"n":"Halych","c":"Ukraine","y":49.1128,"x":24.7217},{"n":"Breal-sous-Montfort","c":"France","y":48.0478,"x":-1.8667},{"n":"Tancherfi","c":"Morocco","y":34.3539,"x":-2.6255},{"n":"Collepasso","c":"Italy","y":40.0667,"x":18.1667},{"n":"Trochtelfingen","c":"Germany","y":48.3081,"x":9.2444},{"n":"Sealy","c":"United States","y":29.7676,"x":-96.1679},{"n":"Iscar","c":"Spain","y":41.3606,"x":-4.5358},{"n":"Falkenberg","c":"Germany","y":51.5831,"x":13.2322},{"n":"Aparan","c":"Armenia","y":40.5961,"x":44.3536},{"n":"Deta","c":"Romania","y":45.4,"x":21.22},{"n":"Strambino","c":"Italy","y":45.3833,"x":7.8833},{"n":"Saint-Just-en-Chaussee","c":"France","y":49.5061,"x":2.4308},{"n":"San Marcello Pistoiese","c":"Italy","y":44.0556,"x":10.7908},{"n":"Beelen","c":"Germany","y":51.9292,"x":8.1181},{"n":"La Grand-Croix","c":"France","y":45.5031,"x":4.5689},{"n":"Torreglia","c":"Italy","y":45.3333,"x":11.7333},{"n":"Dmitriyev-L'govskiy","c":"Russia","y":52.1289,"x":35.0756},{"n":"Bekkevoort","c":"Belgium","y":50.95,"x":4.9667},{"n":"Corrego Fundo","c":"Brazil","y":-20.4489,"x":-45.555},{"n":"Wervicq-Sud","c":"France","y":50.7722,"x":3.0478},{"n":"Quintana","c":"Brazil","y":-22.0725,"x":-50.3075},{"n":"Ligonier","c":"United States","y":40.2348,"x":-79.2137},{"n":"Inverness Highlands South","c":"United States","y":28.8007,"x":-82.3371},{"n":"East Falmouth","c":"United States","y":41.5707,"x":-70.5556},{"n":"Beilstein","c":"Germany","y":49.0333,"x":9.3167},{"n":"Upper Sandusky","c":"United States","y":40.8298,"x":-83.2721},{"n":"Mer","c":"France","y":47.6986,"x":1.5078},{"n":"Gammertingen","c":"Germany","y":48.2494,"x":9.2175},{"n":"Burkhardtsdorf","c":"Germany","y":50.7347,"x":12.9219},{"n":"Vine Grove","c":"United States","y":37.8133,"x":-85.9828},{"n":"Portel","c":"Portugal","y":38.3,"x":-7.7},{"n":"Wrestedt","c":"Germany","y":52.9,"x":10.5833},{"n":"Padre Carvalho","c":"Brazil","y":-16.3639,"x":-42.515},{"n":"Kununurra","c":"Australia","y":-15.7736,"x":128.7386},{"n":"Meersburg","c":"Germany","y":47.6958,"x":9.2708},{"n":"Martfu","c":"Hungary","y":47.017,"x":20.284},{"n":"Litchfield Park","c":"United States","y":33.5024,"x":-112.3586},{"n":"Devine","c":"United States","y":29.1457,"x":-98.9049},{"n":"Dunningen","c":"Germany","y":48.2114,"x":8.5072},{"n":"Si Prachan","c":"Thailand","y":14.6204,"x":100.1444},{"n":"Malesherbes","c":"France","y":48.2964,"x":2.4053},{"n":"Orange Lake","c":"United States","y":41.5319,"x":-74.0936},{"n":"Mornant","c":"France","y":45.6189,"x":4.6722},{"n":"Rumelange","c":"Luxembourg","y":49.4597,"x":6.0306},{"n":"Cambiano","c":"Italy","y":44.9711,"x":7.7744},{"n":"Gersheim","c":"Germany","y":49.1333,"x":7.2},{"n":"Oelwein","c":"United States","y":42.6715,"x":-91.9133},{"n":"Santo Domingo de la Calzada","c":"Spain","y":42.433,"x":-2.95},{"n":"Zouar","c":"Chad","y":20.45,"x":16.5167},{"n":"Abbadia San Salvatore","c":"Italy","y":42.8831,"x":11.6706},{"n":"Santa Margherita di Belice","c":"Italy","y":37.6928,"x":13.0211},{"n":"Wheathampstead","c":"United Kingdom","y":51.812,"x":-0.293},{"n":"Rosal","c":"Spain","y":41.9356,"x":-8.825},{"n":"Ixtapan del Oro","c":"Mexico","y":19.2614,"x":-100.2628},{"n":"Grossbreitenbach","c":"Germany","y":50.5833,"x":11.012},{"n":"Cottenham","c":"United Kingdom","y":52.2865,"x":0.1244},{"n":"Machecoul","c":"France","y":46.9931,"x":-1.8228},{"n":"North Riverside","c":"United States","y":41.8461,"x":-87.8263},{"n":"Le Blanc","c":"France","y":46.6336,"x":1.0628},{"n":"San Miguel de Salinas","c":"Spain","y":37.9806,"x":-0.7897},{"n":"Cheverly","c":"United States","y":38.9254,"x":-76.914},{"n":"Sils","c":"Spain","y":41.8094,"x":2.7435},{"n":"Yermolayevo","c":"Russia","y":52.7167,"x":55.8},{"n":"Aussillon","c":"France","y":43.4983,"x":2.365},{"n":"Hjo","c":"Sweden","y":58.3044,"x":14.2786},{"n":"Sengiley","c":"Russia","y":53.9667,"x":48.8},{"n":"Huttlingen","c":"Germany","y":48.8928,"x":10.1006},{"n":"Sao Francisco do Piaui","c":"Brazil","y":-7.2508,"x":-42.5428},{"n":"Kostelec nad Orlici","c":"Czechia","y":50.1227,"x":16.2133},{"n":"Mesoraca","c":"Italy","y":39.0833,"x":16.7833},{"n":"Valley City","c":"United States","y":46.9223,"x":-98.0055},{"n":"Francisco Alves","c":"Brazil","y":-24.0658,"x":-53.8478},{"n":"Tafraout","c":"Morocco","y":29.7167,"x":-8.9667},{"n":"Cacaulandia","c":"Brazil","y":-10.3392,"x":-62.8953},{"n":"Pegau","c":"Germany","y":51.1667,"x":12.25},{"n":"Kittila","c":"Finland","y":67.6531,"x":24.9114},{"n":"Santes","c":"France","y":50.5933,"x":2.9622},{"n":"Gogolin","c":"Poland","y":50.4881,"x":18.0239},{"n":"Melut","c":"South Sudan","y":10.4404,"x":32.2015},{"n":"Orlovista","c":"United States","y":28.5441,"x":-81.4629},{"n":"Eudora","c":"United States","y":38.9345,"x":-95.0957},{"n":"Walkersville","c":"United States","y":39.4832,"x":-77.3559},{"n":"Bischberg","c":"Germany","y":49.9,"x":10.8167},{"n":"Usurbil","c":"Spain","y":43.2667,"x":-2.05},{"n":"Garrett","c":"United States","y":41.3526,"x":-85.1238},{"n":"Zimmern ob Rottweil","c":"Germany","y":48.1681,"x":8.5911},{"n":"Bowleys Quarters","c":"United States","y":39.3198,"x":-76.3858},{"n":"Naco","c":"Mexico","y":31.3269,"x":-109.9478},{"n":"Recoaro Terme","c":"Italy","y":45.7,"x":11.2333},{"n":"Higashikyoshin","c":"Japan","y":31.3858,"x":130.9733},{"n":"San Canzian d'lsonzo","c":"Italy","y":45.8,"x":13.4667},{"n":"Horgos","c":"Serbia","y":46.1556,"x":19.9725},{"n":"Prathai","c":"Thailand","y":15.5341,"x":102.7175},{"n":"Littlestown","c":"United States","y":39.7452,"x":-77.0892},{"n":"Lee","c":"United States","y":43.3257,"x":-75.5175},{"n":"Rio Saliceto","c":"Italy","y":44.8167,"x":10.8},{"n":"Parry Sound","c":"Canada","y":45.3333,"x":-80.0333},{"n":"Embrun","c":"France","y":44.565,"x":6.4953},{"n":"Kappelrodeck","c":"Germany","y":48.5911,"x":8.1175},{"n":"Sickte","c":"Germany","y":52.2156,"x":10.6378},{"n":"Szentlorinc","c":"Hungary","y":46.0422,"x":17.9856},{"n":"Sardoa","c":"Brazil","y":-18.7839,"x":-42.365},{"n":"Burnet","c":"United States","y":30.7496,"x":-98.2383},{"n":"Comandante Luis Piedra Buena","c":"Argentina","y":-49.983,"x":-68.91},{"n":"Kerns","c":"Switzerland","y":46.9025,"x":8.2761},{"n":"Lincroft","c":"United States","y":40.3391,"x":-74.1283},{"n":"Monte San Biagio","c":"Italy","y":41.35,"x":13.35},{"n":"Mszczonow","c":"Poland","y":51.9742,"x":20.5267},{"n":"Lezoux","c":"France","y":45.8275,"x":3.38},{"n":"Toma","c":"Japan","y":43.8281,"x":142.5083},{"n":"Jordan","c":"United States","y":44.6652,"x":-93.6351},{"n":"Talmaza","c":"Moldova","y":46.6358,"x":29.6647},{"n":"Alpirsbach","c":"Germany","y":48.3461,"x":8.4039},{"n":"Sabrosa","c":"Portugal","y":41.2651,"x":-7.5751},{"n":"Gojar","c":"Spain","y":37.1,"x":-3.6},{"n":"Ceggia","c":"Italy","y":45.6833,"x":12.6333},{"n":"Aurec-sur-Loire","c":"France","y":45.3692,"x":4.2017},{"n":"Tasco","c":"Colombia","y":5.9092,"x":-72.7814},{"n":"Carolina Beach","c":"United States","y":34.0396,"x":-77.8966},{"n":"Ridgeway","c":"United States","y":43.2619,"x":-78.3806},{"n":"Lionville","c":"United States","y":40.0524,"x":-75.644},{"n":"Tabuaco","c":"Portugal","y":41.1167,"x":-7.5667},{"n":"Oberboihingen","c":"Germany","y":48.6469,"x":9.3667},{"n":"Shamong","c":"United States","y":39.7781,"x":-74.7272},{"n":"Pointe-Calumet","c":"Canada","y":45.5,"x":-73.97},{"n":"Jussari","c":"Brazil","y":-15.1908,"x":-39.495},{"n":"Carrazeda de Anciaes","c":"Portugal","y":41.25,"x":-7.3},{"n":"La Glacerie","c":"France","y":49.6142,"x":-1.6042},{"n":"Blaenavon","c":"United Kingdom","y":51.7736,"x":-3.0828},{"n":"Papudo","c":"Chile","y":-32.5167,"x":-71.45},{"n":"Grybow","c":"Poland","y":49.6244,"x":20.9483},{"n":"Ramtown","c":"United States","y":40.1144,"x":-74.1492},{"n":"Bethoncourt","c":"France","y":47.5344,"x":6.8039},{"n":"Terrasson-Lavilledieu","c":"France","y":45.13,"x":1.3014},{"n":"Sao Juliao","c":"Brazil","y":-7.085,"x":-40.8258},{"n":"Grafenwohr","c":"Germany","y":49.7167,"x":11.9},{"n":"San Giovanni al Natisone","c":"Italy","y":45.9833,"x":13.4},{"n":"Santa Maria Yucuhiti","c":"Mexico","y":17.0167,"x":-97.7667},{"n":"Killingworth","c":"United States","y":41.3792,"x":-72.5785},{"n":"Wittenburg","c":"Germany","y":53.5,"x":11.0667},{"n":"Waldsee","c":"Germany","y":49.3956,"x":8.4406},{"n":"Cana","c":"Slovakia","y":48.6125,"x":21.3244},{"n":"Meredith","c":"United States","y":43.6301,"x":-71.5018},{"n":"Fenain","c":"France","y":50.3658,"x":3.3006},{"n":"Le Barcares","c":"France","y":42.7883,"x":3.0356},{"n":"Douar Oulad Jaber","c":"Morocco","y":32.3011,"x":-7.2053},{"n":"Steilacoom","c":"United States","y":47.1703,"x":-122.5934},{"n":"Opp","c":"United States","y":31.2848,"x":-86.257},{"n":"Warkworth","c":"New Zealand","y":-36.4,"x":174.6667},{"n":"Nackenheim","c":"Germany","y":49.9153,"x":8.3389},{"n":"Fossalta di Portogruaro","c":"Italy","y":45.7833,"x":12.9167},{"n":"Sandown","c":"United States","y":42.9332,"x":-71.1833},{"n":"Valdoie","c":"France","y":47.6672,"x":6.8419},{"n":"Wadomari","c":"Japan","y":27.3922,"x":128.6553},{"n":"Jegenstorf","c":"Switzerland","y":47.0497,"x":7.5069},{"n":"Rhome","c":"United States","y":33.0647,"x":-97.4779},{"n":"Aptos","c":"United States","y":36.9912,"x":-121.8934},{"n":"Lesina","c":"Italy","y":41.8667,"x":15.35},{"n":"Povoacao","c":"Portugal","y":37.746,"x":-25.245},{"n":"Zell","c":"Switzerland","y":47.4489,"x":8.8233},{"n":"Belpre","c":"United States","y":39.2815,"x":-81.5971},{"n":"Mudersbach","c":"Germany","y":50.8247,"x":7.9447},{"n":"Crockett","c":"United States","y":31.3177,"x":-95.4564},{"n":"Zamberk","c":"Czechia","y":50.086,"x":16.4674},{"n":"Ellenville","c":"United States","y":41.7009,"x":-74.3609},{"n":"East End","c":"United States","y":34.5554,"x":-92.3261},{"n":"Oranzherei","c":"Russia","y":45.8476,"x":47.5663},{"n":"Alexandra","c":"New Zealand","y":-45.2492,"x":169.3797},{"n":"Yazykovo","c":"Russia","y":54.6917,"x":55.0161},{"n":"Rushville","c":"United States","y":39.6172,"x":-85.4463},{"n":"Cavaion Veronese","c":"Italy","y":45.5401,"x":10.7705},{"n":"Saint-Genis-les-Ollieres","c":"France","y":45.7572,"x":4.7264},{"n":"International Falls","c":"United States","y":48.5884,"x":-93.4083},{"n":"Calcinate","c":"Italy","y":45.6212,"x":9.8003},{"n":"Luba","c":"Philippines","y":17.3181,"x":120.6952},{"n":"Atengo","c":"Mexico","y":20.2167,"x":-104.0833},{"n":"Permet","c":"Albania","y":40.2333,"x":20.35},{"n":"Piatra Olt","c":"Romania","y":44.3603,"x":24.2942},{"n":"Saint-Arnoult-en-Yvelines","c":"France","y":48.5717,"x":1.9406},{"n":"Naracoorte","c":"Australia","y":-36.955,"x":140.7429},{"n":"Adrianopolis","c":"Brazil","y":-24.6569,"x":-48.9908},{"n":"Villennes-sur-Seine","c":"France","y":48.9392,"x":1.9978},{"n":"Corowa","c":"Australia","y":-35.9942,"x":146.3844},{"n":"Rogersville","c":"United States","y":36.4081,"x":-83.0043},{"n":"Prosser","c":"United States","y":46.2068,"x":-119.7662},{"n":"Groot-Valkenisse","c":"Netherlands","y":51.4889,"x":3.5156},{"n":"Nephi","c":"United States","y":39.7072,"x":-111.8323},{"n":"Richboro","c":"United States","y":40.2262,"x":-75.0006},{"n":"Pulianas","c":"Spain","y":37.2167,"x":-3.6},{"n":"Cullowhee","c":"United States","y":35.3107,"x":-83.1815},{"n":"Baud","c":"France","y":47.8756,"x":-3.0189},{"n":"Adelebsen","c":"Germany","y":51.58,"x":9.7544},{"n":"Arenas de San Pedro","c":"Spain","y":40.2089,"x":-5.0911},{"n":"Headley","c":"United Kingdom","y":51.1192,"x":-0.8271},{"n":"Warmond","c":"Netherlands","y":52.1972,"x":4.5017},{"n":"Arpajon-sur-Cere","c":"France","y":44.9039,"x":2.4567},{"n":"Beaubassin East / Beaubassin-est","c":"Canada","y":46.1726,"x":-64.3122},{"n":"Woolgoolga","c":"Australia","y":-30.115,"x":153.2011},{"n":"Chervonohryhorivka","c":"Ukraine","y":47.6233,"x":34.5309},{"n":"Saint-Martin-le-Vinoux","c":"France","y":45.2031,"x":5.7164},{"n":"Kizhinga","c":"Russia","y":51.8464,"x":109.9128},{"n":"Mims","c":"United States","y":28.6928,"x":-80.8468},{"n":"Village of Oak Creek","c":"United States","y":34.7813,"x":-111.7606},{"n":"Pieksamaen Maalaiskunta","c":"Finland","y":62.2833,"x":27.0667},{"n":"Bela Vista do Toldo","c":"Brazil","y":-26.2728,"x":-50.4639},{"n":"Gebenstorf","c":"Switzerland","y":47.4795,"x":8.2424},{"n":"Stavyshche","c":"Ukraine","y":49.3914,"x":30.1917},{"n":"Santa Maria do Erval","c":"Brazil","y":-29.4978,"x":-50.9928},{"n":"Arandu","c":"Brazil","y":-23.1347,"x":-49.0542},{"n":"Nitro","c":"United States","y":38.4119,"x":-81.8194},{"n":"Nicotera","c":"Italy","y":38.55,"x":15.9333},{"n":"Saint-Andre-de-Sangonis","c":"France","y":43.6497,"x":3.5036},{"n":"Rowley","c":"United States","y":42.7224,"x":-70.8883},{"n":"Wainfleet","c":"Canada","y":42.925,"x":-79.375},{"n":"Shimonita","c":"Japan","y":36.2125,"x":138.7892},{"n":"Usolye","c":"Russia","y":59.4167,"x":56.6833},{"n":"Okehampton","c":"United Kingdom","y":50.7388,"x":-4.0041},{"n":"San Carlos","c":"Bolivia","y":-17.4044,"x":-63.7325},{"n":"Rudiano","c":"Italy","y":45.4833,"x":9.8833},{"n":"Kronau","c":"Germany","y":49.22,"x":8.6339},{"n":"Petropavlivs'ka Borshchahivka","c":"Ukraine","y":50.4378,"x":30.3439},{"n":"Serravalle Scrivia","c":"Italy","y":44.7225,"x":8.8603},{"n":"Traismauer","c":"Austria","y":48.3333,"x":15.7331},{"n":"Rupperswil","c":"Switzerland","y":47.4025,"x":8.1278},{"n":"Johnsburg","c":"United States","y":42.383,"x":-88.2476},{"n":"Fort Riley","c":"United States","y":39.1111,"x":-96.8138},{"n":"Vinkivtsi","c":"Ukraine","y":49.0333,"x":27.2333},{"n":"Pirajuba","c":"Brazil","y":-19.9069,"x":-48.7008},{"n":"Laa an der Thaya","c":"Austria","y":48.7167,"x":16.3833},{"n":"Turbiv","c":"Ukraine","y":49.3463,"x":28.7244},{"n":"Bujor","c":"Romania","y":45.8667,"x":27.9},{"n":"Horsching","c":"Austria","y":48.2267,"x":14.1794},{"n":"Wollochet","c":"United States","y":47.2828,"x":-122.5769},{"n":"Stockstadt am Rhein","c":"Germany","y":49.8092,"x":8.4669},{"n":"Chirsova","c":"Moldova","y":46.2339,"x":28.6481},{"n":"Grandchamps-des-Fontaines","c":"France","y":47.365,"x":-1.6053},{"n":"Feytiat","c":"France","y":45.8094,"x":1.3317},{"n":"Goondiwindi","c":"Australia","y":-28.5461,"x":150.3097},{"n":"Villa Cura Brochero","c":"Argentina","y":-31.71,"x":-65.02},{"n":"Pulnoy","c":"France","y":48.7011,"x":6.2583},{"n":"Cogorno","c":"Italy","y":44.3331,"x":9.3725},{"n":"Keyser","c":"United States","y":39.4394,"x":-78.9822},{"n":"Dohna","c":"Germany","y":50.9547,"x":13.8575},{"n":"Holmes Chapel","c":"United Kingdom","y":53.204,"x":-2.353},{"n":"Ichu","c":"Brazil","y":-11.7489,"x":-39.1919},{"n":"Chizu","c":"Japan","y":35.265,"x":134.2267},{"n":"Itirapua","c":"Brazil","y":-20.6408,"x":-47.2192},{"n":"Beith","c":"United Kingdom","y":55.7533,"x":-4.6319},{"n":"Velyki Mosty","c":"Ukraine","y":50.24,"x":24.1394},{"n":"Tanque d'Arca","c":"Brazil","y":-9.5319,"x":-36.4328},{"n":"Dussen","c":"Netherlands","y":51.7317,"x":4.9633},{"n":"Charbonnieres-les-Bains","c":"France","y":45.7806,"x":4.7464},{"n":"Trevelin","c":"Argentina","y":-43.0833,"x":-71.4667},{"n":"Dadaab","c":"Kenya","y":0.0531,"x":40.3086},{"n":"Vanzaghello","c":"Italy","y":45.5833,"x":8.7833},{"n":"Kathleen","c":"United States","y":28.1224,"x":-82.0387},{"n":"Ait Bou Madhi","c":"Algeria","y":36.5009,"x":4.2},{"n":"Combee Settlement","c":"United States","y":28.0596,"x":-81.9053},{"n":"Mahdalynivka","c":"Ukraine","y":48.9147,"x":34.9154},{"n":"Cynthiana","c":"United States","y":38.386,"x":-84.2993},{"n":"Tabor City","c":"United States","y":34.1538,"x":-78.8737},{"n":"North Fort Lewis","c":"United States","y":47.122,"x":-122.5966},{"n":"Cramahe","c":"Canada","y":44.0833,"x":-77.8833},{"n":"Beauceville","c":"Canada","y":46.2,"x":-70.7833},{"n":"Pinhalao","c":"Brazil","y":-23.7928,"x":-50.0558},{"n":"Ihringen","c":"Germany","y":48.0431,"x":7.6475},{"n":"Buq`ata","c":"Israel","y":33.2014,"x":35.7797},{"n":"West Hattiesburg","c":"United States","y":31.3114,"x":-89.374},{"n":"North Middlesex","c":"Canada","y":43.15,"x":-81.6333},{"n":"Karmir Gyukh","c":"Armenia","y":40.3306,"x":45.1839},{"n":"Armamar","c":"Portugal","y":41.1167,"x":-7.6833},{"n":"Hronov","c":"Czechia","y":50.4797,"x":16.1824},{"n":"Allegan","c":"United States","y":42.5299,"x":-85.8462},{"n":"Dacula","c":"United States","y":33.9816,"x":-83.8951},{"n":"Saint-Quentin-Fallavier","c":"France","y":45.6322,"x":5.1106},{"n":"Matarnia","c":"Poland","y":54.3818,"x":18.4839},{"n":"Canejan","c":"France","y":44.7631,"x":-0.6547},{"n":"Schuyler","c":"United States","y":41.4497,"x":-97.0619},{"n":"Tipton","c":"United States","y":40.282,"x":-86.0422},{"n":"Clarkston Heights-Vineland","c":"United States","y":46.3876,"x":-117.0831},{"n":"Tortorici","c":"Italy","y":38.0308,"x":14.8242},{"n":"Vidal Ramos","c":"Brazil","y":-27.3919,"x":-49.3558},{"n":"Galax","c":"United States","y":36.6661,"x":-80.9176},{"n":"Messini","c":"Greece","y":37.05,"x":22},{"n":"Ravarino","c":"Italy","y":44.7167,"x":11.1},{"n":"San Polo d'Enza in Caviano","c":"Italy","y":44.6333,"x":10.4333},{"n":"Palosco","c":"Italy","y":45.5833,"x":9.8333},{"n":"Mattinata","c":"Italy","y":41.7167,"x":16.05},{"n":"Baixio","c":"Brazil","y":-6.73,"x":-38.7169},{"n":"Jan Phyl Village","c":"United States","y":28.0201,"x":-81.7933},{"n":"Swarthmore","c":"United States","y":39.9023,"x":-75.3488},{"n":"Krk","c":"Croatia","y":45.0261,"x":14.5756},{"n":"Izumizaki","c":"Japan","y":37.1569,"x":140.2953},{"n":"Neumarkt-Sankt Veit","c":"Germany","y":48.3667,"x":12.5},{"n":"Chipping Norton","c":"United Kingdom","y":51.94,"x":-1.55},{"n":"Carmel Hamlet","c":"United States","y":41.415,"x":-73.6855},{"n":"Kalefeld","c":"Germany","y":51.7981,"x":10.035},{"n":"Bondorf","c":"Germany","y":48.5167,"x":8.8333},{"n":"Dobrany","c":"Czechia","y":49.6549,"x":13.2931},{"n":"Immendingen","c":"Germany","y":47.94,"x":8.7331},{"n":"Lazcano","c":"Spain","y":43.0378,"x":-2.1872},{"n":"Hachenburg","c":"Germany","y":50.6614,"x":7.8203},{"n":"Walluf","c":"Germany","y":50.0371,"x":8.1542},{"n":"Maarn","c":"Netherlands","y":52.0642,"x":5.3731},{"n":"Staraya Mayna","c":"Russia","y":54.6089,"x":48.9281},{"n":"Arrinj","c":"Armenia","y":40.2314,"x":44.5711},{"n":"Gladewater","c":"United States","y":32.5426,"x":-94.9465},{"n":"Zalaszentgrot","c":"Hungary","y":46.9469,"x":17.0789},{"n":"Litzendorf","c":"Germany","y":49.9,"x":11},{"n":"Iowa Park","c":"United States","y":33.9622,"x":-98.6819},{"n":"Migne","c":"France","y":46.6267,"x":0.3136},{"n":"Yaphank","c":"United States","y":40.8323,"x":-72.9233},{"n":"Inhauma","c":"Brazil","y":-19.4908,"x":-44.39},{"n":"Penon Blanco","c":"Mexico","y":24.7833,"x":-104.0333},{"n":"Amapora","c":"Brazil","y":-23.0958,"x":-52.7878},{"n":"Mattapoisett","c":"United States","y":41.6687,"x":-70.817},{"n":"Crocetta del Montello","c":"Italy","y":45.8333,"x":12.0333},{"n":"Svislach","c":"Belarus","y":53.0333,"x":24.1},{"n":"Theodore","c":"United States","y":30.5408,"x":-88.1884},{"n":"Souq at Tlata des Loulad","c":"Morocco","y":32.9833,"x":-7.1333},{"n":"Fegyvernek","c":"Hungary","y":47.2667,"x":20.5333},{"n":"Karasburg","c":"Namibia","y":-28.0172,"x":18.7478},{"n":"Paraiso","c":"Brazil","y":-21.0164,"x":-48.7736},{"n":"Pepper Pike","c":"United States","y":41.4801,"x":-81.4619},{"n":"Red Lion","c":"United States","y":39.8986,"x":-76.6078},{"n":"Vrbove","c":"Slovakia","y":48.6208,"x":17.7225},{"n":"Verkhnevilyuysk","c":"Russia","y":63.4506,"x":120.2983},{"n":"Echapora","c":"Brazil","y":-22.4294,"x":-50.2006},{"n":"Deisslingen","c":"Germany","y":48.1133,"x":8.6061},{"n":"Hamlet","c":"United States","y":34.8891,"x":-79.7099},{"n":"Olival","c":"Portugal","y":41.0711,"x":-8.5272},{"n":"Fazenda Nova","c":"Brazil","y":-16.1828,"x":-50.78},{"n":"Pentling","c":"Germany","y":48.9836,"x":12.0589},{"n":"Spirano","c":"Italy","y":45.5828,"x":9.6692},{"n":"Carry-le-Rouet","c":"France","y":43.3319,"x":5.1519},{"n":"El Main","c":"Algeria","y":36.3667,"x":4.75},{"n":"Myrina","c":"Greece","y":39.8797,"x":25.0742},{"n":"Amqui","c":"Canada","y":48.4667,"x":-67.4333},{"n":"Axams","c":"Austria","y":47.2303,"x":11.2792},{"n":"Norderney","c":"Germany","y":53.7072,"x":7.1469},{"n":"Dotlingen","c":"Germany","y":52.9361,"x":8.3806},{"n":"Wolfeboro","c":"United States","y":43.6117,"x":-71.1705},{"n":"Chambourcy","c":"France","y":48.9061,"x":2.0403},{"n":"Kis","c":"Azerbaijan","y":41.2594,"x":47.1881},{"n":"Sainte-Catherine-de-la-Jacques-Cartier","c":"Canada","y":46.85,"x":-71.6167},{"n":"Trasacco","c":"Italy","y":41.9578,"x":13.5353},{"n":"Vila Boa","c":"Brazil","y":-15.0378,"x":-47.0589},{"n":"Georges","c":"United States","y":39.8135,"x":-79.7617},{"n":"Comstock Northwest","c":"United States","y":42.3219,"x":-85.518},{"n":"Allariz","c":"Spain","y":42.1833,"x":-7.8},{"n":"Florian","c":"Colombia","y":5.8028,"x":-73.9714},{"n":"Enrique Villanueva","c":"Philippines","y":9.276,"x":123.647},{"n":"Mesoy","c":"Norway","y":66.7881,"x":13.6758},{"n":"Islamorada, Village of Islands","c":"United States","y":24.9408,"x":-80.6097},{"n":"Horezu","c":"Romania","y":45.1433,"x":23.9917},{"n":"Astrakhan","c":"Kazakhstan","y":51.5228,"x":69.795},{"n":"Markt Sankt Florian","c":"Austria","y":48.2089,"x":14.3794},{"n":"Teplyk","c":"Ukraine","y":48.6594,"x":29.7539},{"n":"San Benigno Canavese","c":"Italy","y":45.25,"x":7.7833},{"n":"Anhembi","c":"Brazil","y":-22.7897,"x":-48.1278},{"n":"Mascotte","c":"United States","y":28.611,"x":-81.9107},{"n":"Mnisek pod Brdy","c":"Czechia","y":49.8666,"x":14.2618},{"n":"Bataszek","c":"Hungary","y":46.1833,"x":18.7167},{"n":"Roveredo in Piano","c":"Italy","y":46.0167,"x":12.6167},{"n":"Marly-la-Ville","c":"France","y":49.0808,"x":2.4994},{"n":"Cobleskill","c":"United States","y":42.6841,"x":-74.4478},{"n":"Newarthill","c":"United Kingdom","y":55.81,"x":-3.9333},{"n":"Loon-Plage","c":"France","y":50.9942,"x":2.2197},{"n":"Almenara","c":"Spain","y":39.7533,"x":-0.2256},{"n":"Wagna","c":"Austria","y":46.7681,"x":15.5583},{"n":"Jedlicze","c":"Poland","y":49.7164,"x":21.6456},{"n":"Farebersviller","c":"France","y":49.1147,"x":6.8636},{"n":"Saint-Denis-les-Bourg","c":"France","y":46.1997,"x":5.1922},{"n":"Bonchamp-les-Laval","c":"France","y":48.0742,"x":-0.7014},{"n":"Sertao","c":"Brazil","y":-27.98,"x":-52.26},{"n":"Zubtsov","c":"Russia","y":56.1667,"x":34.5833},{"n":"Jouars-Pontchartrain","c":"France","y":48.8031,"x":1.9014},{"n":"Pass Christian","c":"United States","y":30.327,"x":-89.2436},{"n":"Lochau","c":"Austria","y":47.53,"x":9.7517},{"n":"Balkany","c":"Hungary","y":47.7694,"x":21.8569},{"n":"Cobram","c":"Australia","y":-35.9667,"x":145.65},{"n":"Hutthurm","c":"Germany","y":48.6714,"x":13.4711},{"n":"Jeanerette","c":"United States","y":29.9157,"x":-91.6758},{"n":"Waveland","c":"United States","y":30.293,"x":-89.3904},{"n":"Itaruma","c":"Brazil","y":-18.7689,"x":-51.3478},{"n":"Besnate","c":"Italy","y":45.7,"x":8.7667},{"n":"Remanzacco","c":"Italy","y":46.0833,"x":13.3167},{"n":"North Hobbs","c":"United States","y":32.7731,"x":-103.125},{"n":"Luisburgo","c":"Brazil","y":-20.44,"x":-42.1028},{"n":"Fronton","c":"France","y":43.8403,"x":1.3894},{"n":"Mallemort","c":"France","y":43.7308,"x":5.1794},{"n":"Nattheim","c":"Germany","y":48.6992,"x":10.2414},{"n":"Stonewood","c":"United Kingdom","y":51.445,"x":0.256},{"n":"Lubizhde","c":"Kosovo","y":42.238,"x":20.7615},{"n":"Marsh Harbour","c":"Bahamas, The","y":26.4,"x":-77.17},{"n":"El Rio","c":"United States","y":34.2452,"x":-119.1568},{"n":"Tarleton","c":"United Kingdom","y":53.678,"x":-2.841},{"n":"Nenzing","c":"Austria","y":47.1667,"x":9.6833},{"n":"Altkirch","c":"France","y":47.6231,"x":7.2394},{"n":"Delle","c":"France","y":47.5069,"x":6.9981},{"n":"Lely Resort","c":"United States","y":26.0889,"x":-81.7031},{"n":"Carloforte","c":"Italy","y":39.145,"x":8.3054},{"n":"Marton","c":"New Zealand","y":-40.0692,"x":175.3783},{"n":"Poggiardo","c":"Italy","y":40.05,"x":18.3833},{"n":"Ihsim","c":"Syria","y":35.72,"x":36.5608},{"n":"East Porterville","c":"United States","y":36.0573,"x":-118.9713},{"n":"Clarenville","c":"Canada","y":48.1566,"x":-53.965},{"n":"Kuchen","c":"Germany","y":48.6392,"x":9.7992},{"n":"Bonstetten","c":"Switzerland","y":47.3156,"x":8.4692},{"n":"Munhoz","c":"Brazil","y":-22.6128,"x":-46.3608},{"n":"Ranchettes","c":"United States","y":41.2186,"x":-104.7729},{"n":"Mazan","c":"France","y":44.0567,"x":5.1281},{"n":"Montebello Ionico","c":"Italy","y":37.9833,"x":15.7667},{"n":"Nouzonville","c":"France","y":49.815,"x":4.745},{"n":"Sotnikovo","c":"Russia","y":51.8833,"x":107.4833},{"n":"Boiling Spring Lakes","c":"United States","y":34.0322,"x":-78.068},{"n":"Wannweil","c":"Germany","y":48.5147,"x":9.1508},{"n":"Geisingen","c":"Germany","y":47.9222,"x":8.6464},{"n":"Lioni","c":"Italy","y":40.8775,"x":15.1886},{"n":"Nogent-sur-Seine","c":"France","y":48.4936,"x":3.5025},{"n":"Port Saint John's","c":"South Africa","y":-31.6288,"x":29.5369},{"n":"Rio Grande do Piaui","c":"Brazil","y":-7.775,"x":-43.1419},{"n":"Phanna Nikhom","c":"Thailand","y":17.3456,"x":103.8478},{"n":"Obererli","c":"Switzerland","y":47.1358,"x":8.6136},{"n":"Sao Francisco de Goias","c":"Brazil","y":-15.9308,"x":-49.2608},{"n":"Oberlungwitz","c":"Germany","y":50.7833,"x":12.7167},{"n":"Godega di Sant'Urbano","c":"Italy","y":45.9286,"x":12.3969},{"n":"Nor Geghi","c":"Armenia","y":40.3211,"x":44.5797},{"n":"Guidizzolo","c":"Italy","y":45.3167,"x":10.5833},{"n":"Stone Mountain","c":"United States","y":33.8034,"x":-84.1724},{"n":"Ashburnham","c":"United States","y":42.659,"x":-71.9252},{"n":"Mont-Joli","c":"Canada","y":48.58,"x":-68.18},{"n":"Gaiarine","c":"Italy","y":45.8833,"x":12.4833},{"n":"Octeville-sur-Mer","c":"France","y":49.5558,"x":0.1169},{"n":"Casorezzo","c":"Italy","y":45.5167,"x":8.9},{"n":"Tammela","c":"Finland","y":60.8,"x":23.7667},{"n":"Hohenlockstedt","c":"Germany","y":53.9667,"x":9.6167},{"n":"Sao Francisco de Sales","c":"Brazil","y":-19.8628,"x":-49.7739},{"n":"Sursk","c":"Russia","y":53.0833,"x":45.7},{"n":"Glucksburg","c":"Germany","y":54.8336,"x":9.55},{"n":"Zelezny Brod","c":"Czechia","y":50.6428,"x":15.2542},{"n":"Kupferzell","c":"Germany","y":49.2333,"x":9.6833},{"n":"Covedale","c":"United States","y":39.1267,"x":-84.637},{"n":"Ardud","c":"Romania","y":47.6333,"x":22.8833},{"n":"Unterpremstatten","c":"Austria","y":46.9647,"x":15.4042},{"n":"Oberthal","c":"Germany","y":49.5167,"x":7.0833},{"n":"St. Robert","c":"United States","y":37.8244,"x":-92.1532},{"n":"Gildersome","c":"United Kingdom","y":53.759,"x":-1.6322},{"n":"Rotha","c":"Germany","y":51.1972,"x":12.4172},{"n":"Rechberghausen","c":"Germany","y":48.7306,"x":9.6397},{"n":"Mortagne-sur-Sevre","c":"France","y":46.9917,"x":-0.9539},{"n":"Dabrowa Bialostocka","c":"Poland","y":53.65,"x":23.35},{"n":"Ploneour-Lanvern","c":"France","y":47.9031,"x":-4.2839},{"n":"Figueira de Castelo Rodrigo","c":"Portugal","y":40.9,"x":-6.9667},{"n":"Pernio","c":"Finland","y":60.2042,"x":23.1222},{"n":"Saleilles","c":"France","y":42.6542,"x":2.9517},{"n":"Ghidighici","c":"Moldova","y":47.0931,"x":28.7686},{"n":"Wainwright","c":"Canada","y":52.8333,"x":-110.8667},{"n":"Noyal-sur-Vilaine","c":"France","y":48.1117,"x":-1.5244},{"n":"Ivankovo","c":"Croatia","y":45.2833,"x":18.6833},{"n":"Birstein","c":"Germany","y":50.3531,"x":9.3092},{"n":"Elven","c":"France","y":47.7314,"x":-2.5906},{"n":"Burntisland","c":"United Kingdom","y":56.06,"x":-3.231},{"n":"Howland Center","c":"United States","y":41.2483,"x":-80.7444},{"n":"Tortora","c":"Italy","y":39.9413,"x":15.8052},{"n":"Silvianopolis","c":"Brazil","y":-22.0289,"x":-45.835},{"n":"Mamers","c":"France","y":48.3494,"x":0.3694},{"n":"Donji Miholjac","c":"Croatia","y":45.75,"x":18.15},{"n":"Sao Goncalo do Abaete","c":"Brazil","y":-18.3378,"x":-45.8328},{"n":"Sao Jose de Gaiana","c":"Brazil","y":-7.2489,"x":-38.3008},{"n":"Pigeon Forge","c":"United States","y":35.7977,"x":-83.5623},{"n":"Gmund am Tegernsee","c":"Germany","y":47.75,"x":11.7333},{"n":"Aradan","c":"Iran","y":35.2497,"x":52.4933},{"n":"Huntington Woods","c":"United States","y":42.4816,"x":-83.1685},{"n":"Lower Nazareth","c":"United States","y":40.7067,"x":-75.3258},{"n":"Rong Kham","c":"Thailand","y":16.271,"x":103.7474},{"n":"North East","c":"United States","y":42.2,"x":-79.825},{"n":"Progresso","c":"Brazil","y":-29.2439,"x":-52.3119},{"n":"Tazouta","c":"Morocco","y":33.6667,"x":-4.6333},{"n":"Taiacu","c":"Brazil","y":-21.1439,"x":-48.5128},{"n":"Hooge Zwaluwe","c":"Netherlands","y":51.6989,"x":4.7245},{"n":"Blahovishchenske","c":"Ukraine","y":48.3197,"x":30.2353},{"n":"Viator","c":"Spain","y":36.8833,"x":-2.4167},{"n":"Maffra","c":"Australia","y":-37.95,"x":146.983},{"n":"Antis","c":"United States","y":40.6221,"x":-78.3563},{"n":"Ingeniero Jacobacci","c":"Argentina","y":-41.3,"x":-69.5833},{"n":"Pontal do Araguaia","c":"Brazil","y":-15.9339,"x":-52.3169},{"n":"Tahmoor","c":"Australia","y":-34.2233,"x":150.5928},{"n":"East Glenville","c":"United States","y":42.8614,"x":-73.9206},{"n":"Guer","c":"France","y":47.9039,"x":-2.1206},{"n":"Santa Cruz do Piaui","c":"Brazil","y":-7.185,"x":-41.7678},{"n":"Lake Alfred","c":"United States","y":28.1041,"x":-81.7264},{"n":"Nong Song Hong","c":"Thailand","y":15.7359,"x":102.7909},{"n":"Plescop","c":"France","y":47.6989,"x":-2.8061},{"n":"Zeitlarn","c":"Germany","y":49.0758,"x":12.1053},{"n":"Izon","c":"France","y":44.9203,"x":-0.3619},{"n":"Snyderville","c":"United States","y":40.7042,"x":-111.5438},{"n":"Morris Plains","c":"United States","y":40.8357,"x":-74.4786},{"n":"Lambert's Bay","c":"South Africa","y":-32.0833,"x":18.3},{"n":"Pinxton","c":"United Kingdom","y":53.0905,"x":-1.3237},{"n":"Glyncorrwg","c":"United Kingdom","y":51.6776,"x":-3.6292},{"n":"Contrecoeur","c":"Canada","y":45.85,"x":-73.2333},{"n":"Piana degli Albanesi","c":"Italy","y":38,"x":13.2833},{"n":"Heric","c":"France","y":47.4125,"x":-1.6517},{"n":"Hampshire","c":"United States","y":42.1124,"x":-88.5122},{"n":"Enola","c":"United States","y":40.2908,"x":-76.9348},{"n":"Ingeniero Luis A. Huergo","c":"Argentina","y":-39.0833,"x":-67.2333},{"n":"Sainghin-en-Weppes","c":"France","y":50.5625,"x":2.9006},{"n":"Sarrians","c":"France","y":44.0833,"x":4.9711},{"n":"Berghem","c":"Netherlands","y":51.77,"x":5.5747},{"n":"Salton City","c":"United States","y":33.2994,"x":-115.9609},{"n":"Blue Bell","c":"United States","y":40.1474,"x":-75.2687},{"n":"Blanzy","c":"France","y":46.7039,"x":4.3903},{"n":"Collecorvino","c":"Italy","y":42.4667,"x":14.0167},{"n":"Dives-sur-Mer","c":"France","y":49.2856,"x":-0.1011},{"n":"General Sampaio","c":"Brazil","y":-4.0528,"x":-39.4539},{"n":"Spangenberg","c":"Germany","y":51.1167,"x":9.6667},{"n":"Bir Anzarane","c":"Morocco","y":23.8883,"x":-14.5306},{"n":"Kirchbichl","c":"Austria","y":47.5167,"x":12.0667},{"n":"Ebersdorf bei Coburg","c":"Germany","y":50.22,"x":11.0706},{"n":"Woodend","c":"Australia","y":-37.363,"x":144.526},{"n":"Puebla de la Calzada","c":"Spain","y":38.9,"x":-6.6167},{"n":"Hvardiys'ke","c":"Ukraine","y":48.7328,"x":35.311},{"n":"Geghahovit","c":"Armenia","y":40.1044,"x":45.2897},{"n":"Inaciolandia","c":"Brazil","y":-18.4878,"x":-49.9869},{"n":"Camp Swift","c":"United States","y":30.1885,"x":-97.2933},{"n":"South Run","c":"United States","y":38.7467,"x":-77.2754},{"n":"Pecan Plantation","c":"United States","y":32.3628,"x":-97.6554},{"n":"Nieul-sur-Mer","c":"France","y":46.2067,"x":-1.1636},{"n":"Vernaison","c":"France","y":45.6478,"x":4.8114},{"n":"Tapioszecso","c":"Hungary","y":47.45,"x":19.6},{"n":"Cadeo","c":"Italy","y":44.9667,"x":9.8333},{"n":"Elva","c":"Estonia","y":58.2275,"x":26.4158},{"n":"New Whiteland","c":"United States","y":39.5617,"x":-86.0996},{"n":"La Roquette-sur-Siagne","c":"France","y":43.58,"x":6.9556},{"n":"Sylvester","c":"United States","y":31.53,"x":-83.8338},{"n":"Balabyne","c":"Ukraine","y":47.735,"x":35.2142},{"n":"Inverloch","c":"Australia","y":-38.6334,"x":145.7278},{"n":"Pouso Alto","c":"Brazil","y":-22.1939,"x":-44.9728},{"n":"Boothwyn","c":"United States","y":39.8357,"x":-75.4453},{"n":"Moergestel","c":"Netherlands","y":51.55,"x":5.1833},{"n":"Orange Beach","c":"United States","y":30.2941,"x":-87.5851},{"n":"Silandro","c":"Italy","y":46.6283,"x":10.7681},{"n":"La Ville-aux-Dames","c":"France","y":47.3958,"x":0.7644},{"n":"Serraria","c":"Brazil","y":-6.82,"x":-35.6328},{"n":"Solvay","c":"United States","y":43.0573,"x":-76.2126},{"n":"Whittlesea","c":"Australia","y":-37.5139,"x":145.114},{"n":"Champion Heights","c":"United States","y":41.3031,"x":-80.8514},{"n":"East Foothills","c":"United States","y":37.3827,"x":-121.8138},{"n":"South Gate Ridge","c":"United States","y":27.2856,"x":-82.497},{"n":"Bodelshausen","c":"Germany","y":48.3942,"x":8.9725},{"n":"Brena Baja","c":"Spain","y":28.6167,"x":-17.7667},{"n":"Amrharas","c":"Morocco","y":31.21,"x":-8.1834},{"n":"Niedergorsdorf","c":"Germany","y":51.9792,"x":13},{"n":"Noormarkku","c":"Finland","y":61.5917,"x":21.8694},{"n":"Sao Joao do Sabugi","c":"Brazil","y":-6.7178,"x":-37.2008},{"n":"Cammarata","c":"Italy","y":37.6311,"x":13.6322},{"n":"Marnaz","c":"France","y":46.0592,"x":6.5258},{"n":"Carentan","c":"France","y":49.3033,"x":-1.2483},{"n":"Lardy","c":"France","y":48.5222,"x":2.2653},{"n":"Esvres","c":"France","y":47.2844,"x":0.7861},{"n":"Vesyegonsk","c":"Russia","y":58.65,"x":37.2667},{"n":"Homer","c":"United States","y":42.6661,"x":-76.1701},{"n":"Aire-sur-l'Adour","c":"France","y":43.7031,"x":-0.2628},{"n":"Rolde","c":"Netherlands","y":52.9869,"x":6.6461},{"n":"Zhur","c":"Kosovo","y":42.1639,"x":20.6211},{"n":"West Greenwich","c":"United States","y":41.6291,"x":-71.6671},{"n":"Trans-en-Provence","c":"France","y":43.5033,"x":6.4861},{"n":"Kenedy","c":"United States","y":28.8176,"x":-97.8518},{"n":"Pimmit Hills","c":"United States","y":38.9105,"x":-77.1991},{"n":"Casalbordino","c":"Italy","y":42.15,"x":14.5833},{"n":"Edinboro","c":"United States","y":41.8762,"x":-80.1246},{"n":"Murashi","c":"Russia","y":59.3833,"x":48.9667},{"n":"Domusnovas","c":"Italy","y":39.3211,"x":8.6531},{"n":"Fruit Heights","c":"United States","y":41.0277,"x":-111.9081},{"n":"Addis","c":"United States","y":30.3652,"x":-91.2659},{"n":"Soledade de Minas","c":"Brazil","y":-22.06,"x":-45.045},{"n":"Nikolo-Berezovka","c":"Russia","y":56.1242,"x":54.1557},{"n":"Colombia","c":"Brazil","y":-20.1758,"x":-48.6889},{"n":"Swanwick","c":"United Kingdom","y":53.075,"x":-1.398},{"n":"Morahalom","c":"Hungary","y":46.2167,"x":19.8833},{"n":"Gloggnitz","c":"Austria","y":47.6758,"x":15.9383},{"n":"Biasca","c":"Switzerland","y":46.35,"x":8.9667},{"n":"Demidov","c":"Russia","y":55.2667,"x":31.5167},{"n":"Sao Joao da Ponta","c":"Brazil","y":-0.85,"x":-47.92},{"n":"Rohrbach","c":"Germany","y":48.6167,"x":11.5667},{"n":"Wailea","c":"United States","y":20.6873,"x":-156.4291},{"n":"Nicolas Flores","c":"Mexico","y":20.7669,"x":-99.1514},{"n":"Maule","c":"France","y":48.9089,"x":1.8483},{"n":"Khur","c":"Iran","y":33.775,"x":55.0831},{"n":"Hustopece","c":"Czechia","y":48.9409,"x":16.7376},{"n":"Sittensen","c":"Germany","y":53.2833,"x":9.5},{"n":"Motta San Giovanni","c":"Italy","y":38,"x":15.7},{"n":"Outes","c":"Spain","y":42.85,"x":-8.9},{"n":"Poppi","c":"Italy","y":43.7358,"x":11.7617},{"n":"Barao","c":"Brazil","y":-29.3769,"x":-51.4958},{"n":"Tarazona de la Mancha","c":"Spain","y":39.265,"x":-1.9128},{"n":"Nabburg","c":"Germany","y":49.4533,"x":12.1808},{"n":"Tsarevo","c":"Bulgaria","y":42.1708,"x":27.8511},{"n":"Saint-Zacharie","c":"France","y":43.3842,"x":5.7067},{"n":"Curcani","c":"Romania","y":44.1985,"x":26.5882},{"n":"Bad Honningen","c":"Germany","y":50.5178,"x":7.3086},{"n":"Savinesti","c":"Romania","y":46.8602,"x":26.4687},{"n":"Hethersett","c":"United Kingdom","y":52.5983,"x":1.1833},{"n":"Liverdun","c":"France","y":48.7503,"x":6.0619},{"n":"Saint-Symphorien-d'Ozon","c":"France","y":45.6328,"x":4.8564},{"n":"Chelan","c":"United States","y":47.8414,"x":-120.0263},{"n":"Saint-Jory","c":"France","y":43.7422,"x":1.3697},{"n":"Americano Brasil","c":"Brazil","y":-16.255,"x":-49.9828},{"n":"La Primaube","c":"France","y":44.3139,"x":2.535},{"n":"Blakely","c":"United States","y":41.4859,"x":-75.6012},{"n":"Saint-Sebastien-de-Morsent","c":"France","y":49.0086,"x":1.0894},{"n":"Prades-le-Lez","c":"France","y":43.6989,"x":3.8647},{"n":"Grayson Valley","c":"United States","y":33.6469,"x":-86.6414},{"n":"Vigneux-de-Bretagne","c":"France","y":47.3261,"x":-1.7383},{"n":"Vouneuil-sous-Biard","c":"France","y":46.5731,"x":0.2714},{"n":"Corry","c":"United States","y":41.9259,"x":-79.6358},{"n":"Rio das Antas","c":"Brazil","y":-26.8989,"x":-51.0739},{"n":"Siuntio","c":"Finland","y":60.1333,"x":24.2167},{"n":"Villabona","c":"Spain","y":43.1881,"x":-2.0525},{"n":"Fontenilles","c":"France","y":43.5531,"x":1.1911},{"n":"Partenit","c":"Ukraine","y":44.5764,"x":34.3397},{"n":"Gelnica","c":"Slovakia","y":48.855,"x":20.9397},{"n":"Takhtamukay","c":"Russia","y":44.9172,"x":38.9961},{"n":"Wilkins","c":"United States","y":40.4265,"x":-79.823},{"n":"East Calder","c":"United Kingdom","y":55.896,"x":-3.462},{"n":"Gunskirchen","c":"Austria","y":48.1344,"x":13.9431},{"n":"Schaftlarn","c":"Germany","y":47.985,"x":11.4567},{"n":"Avra Valley","c":"United States","y":32.4195,"x":-111.3393},{"n":"Buchen","c":"Germany","y":53.4833,"x":10.6167},{"n":"Sermide","c":"Italy","y":45.0035,"x":11.2929},{"n":"Everman","c":"United States","y":32.6296,"x":-97.2827},{"n":"Parecis","c":"Brazil","y":-12.1961,"x":-61.6014},{"n":"Luco dei Marsi","c":"Italy","y":41.9613,"x":13.4685},{"n":"Suria","c":"Spain","y":41.8311,"x":1.7526},{"n":"Rowlands Gill","c":"United Kingdom","y":54.9209,"x":-1.7441},{"n":"Union Gap","c":"United States","y":46.5566,"x":-120.4977},{"n":"Seichamps","c":"France","y":48.7158,"x":6.2661},{"n":"Bellach","c":"Switzerland","y":47.215,"x":7.5},{"n":"Ternay","c":"France","y":45.6022,"x":4.8106},{"n":"Stowe","c":"United States","y":40.4829,"x":-80.0734},{"n":"Kirchardt","c":"Germany","y":49.2,"x":8.9833},{"n":"Fassberg","c":"Germany","y":52.8833,"x":10.1667},{"n":"Sachkhere","c":"Georgia","y":42.3389,"x":43.4039},{"n":"Sant'Elia Fiumerapido","c":"Italy","y":41.55,"x":13.8667},{"n":"Revin","c":"France","y":49.9425,"x":4.6386},{"n":"Saint-Joseph-du-Lac","c":"Canada","y":45.5333,"x":-74},{"n":"Belfeld","c":"Netherlands","y":51.31,"x":6.1144},{"n":"Porcuna","c":"Spain","y":37.8697,"x":-4.1872},{"n":"Heliconia","c":"Colombia","y":6.2106,"x":-75.73},{"n":"Campo San Martino","c":"Italy","y":45.55,"x":11.8167},{"n":"Satsuma","c":"United States","y":30.8577,"x":-88.0632},{"n":"Prinzapolka","c":"Nicaragua","y":13.4,"x":-83.5667},{"n":"Tuakau","c":"New Zealand","y":-37.2667,"x":174.95},{"n":"Kirton","c":"United Kingdom","y":52.9278,"x":-0.0598},{"n":"Temnikov","c":"Russia","y":54.6333,"x":43.2167},{"n":"Thoiry","c":"France","y":46.2364,"x":5.9797},{"n":"Lutjenburg","c":"Germany","y":54.2947,"x":10.5914},{"n":"Vilseck","c":"Germany","y":49.6,"x":11.8},{"n":"Riviersonderend","c":"South Africa","y":-34.15,"x":19.9},{"n":"Dyce","c":"United Kingdom","y":57.2031,"x":-2.192},{"n":"Ascoli Satriano","c":"Italy","y":41.2156,"x":15.5578},{"n":"Slanic","c":"Romania","y":45.2333,"x":25.9392},{"n":"Lendelede","c":"Belgium","y":50.8858,"x":3.2372},{"n":"Berceni","c":"Romania","y":44.3167,"x":26.1833},{"n":"Vendenheim","c":"France","y":48.6675,"x":7.7131},{"n":"Le Lavandou","c":"France","y":43.1378,"x":6.3678},{"n":"Truccazzano","c":"Italy","y":45.4833,"x":9.4667},{"n":"Leonardtown","c":"United States","y":38.3039,"x":-76.6396},{"n":"Poussan","c":"France","y":43.4886,"x":3.67},{"n":"Westhausen","c":"Germany","y":48.8839,"x":10.1864},{"n":"Steyning","c":"United Kingdom","y":50.8868,"x":-0.3279},{"n":"Parmain","c":"France","y":49.1147,"x":2.2086},{"n":"Hope","c":"Canada","y":49.3858,"x":-121.4419},{"n":"Gimli","c":"Canada","y":50.6619,"x":-97.0297},{"n":"Eastman","c":"United States","y":32.1973,"x":-83.1714},{"n":"Yeranos","c":"Armenia","y":40.2081,"x":45.1861},{"n":"Dusheti","c":"Georgia","y":42.0845,"x":44.6961},{"n":"Asakawa","c":"Japan","y":37.0808,"x":140.4128},{"n":"San Cristobal Acasaguastlan","c":"Guatemala","y":14.9189,"x":-89.8722},{"n":"Darcinopolis","c":"Brazil","y":-6.7128,"x":-47.76},{"n":"High Springs","c":"United States","y":29.808,"x":-82.5949},{"n":"Doullens","c":"France","y":50.1567,"x":2.3403},{"n":"Konigsfeld im Schwarzwald","c":"Germany","y":48.1383,"x":8.4214},{"n":"Orsett","c":"United Kingdom","y":51.51,"x":0.37},{"n":"University at Buffalo","c":"United States","y":43.0025,"x":-78.7887},{"n":"Olhos d'Agua","c":"Brazil","y":-17.3969,"x":-43.5728},{"n":"Vaison-la-Romaine","c":"France","y":44.2408,"x":5.075},{"n":"Au in der Hallertau","c":"Germany","y":48.5575,"x":11.7417},{"n":"Silveiras","c":"Brazil","y":-22.6639,"x":-44.8528},{"n":"Pembury","c":"United Kingdom","y":51.1456,"x":0.3224},{"n":"Ibiracatu","c":"Brazil","y":-15.6639,"x":-44.1639},{"n":"Jandaia","c":"Brazil","y":-17.0489,"x":-50.1458},{"n":"Loimaan Kunta","c":"Finland","y":60.8667,"x":22.9833},{"n":"Solt","c":"Hungary","y":46.8008,"x":19.0042},{"n":"Untergriesbach","c":"Germany","y":48.5736,"x":13.6672},{"n":"Huntingburg","c":"United States","y":38.301,"x":-86.9622},{"n":"Almadina","c":"Brazil","y":-14.705,"x":-39.6369},{"n":"Dainville","c":"France","y":50.2819,"x":2.7272},{"n":"Cocal dos Alves","c":"Brazil","y":-3.7289,"x":-41.4489},{"n":"Nieheim","c":"Germany","y":51.7997,"x":9.1097},{"n":"Pontotoc","c":"United States","y":34.2532,"x":-89.0091},{"n":"Pierrefeu-du-Var","c":"France","y":43.2244,"x":6.1453},{"n":"Lingenfeld","c":"Germany","y":49.2453,"x":8.3442},{"n":"Treffurt","c":"Germany","y":51.1367,"x":10.2375},{"n":"Monterenzio","c":"Italy","y":44.3333,"x":11.4},{"n":"Beacon Falls","c":"United States","y":41.439,"x":-73.0568},{"n":"East Farmingdale","c":"United States","y":40.7336,"x":-73.4169},{"n":"Richmond","c":"Australia","y":-33.5983,"x":150.7511},{"n":"Dartmouth","c":"United Kingdom","y":50.351,"x":-3.579},{"n":"Clyde","c":"United States","y":41.3046,"x":-82.9782},{"n":"Tyniste nad Orlici","c":"Czechia","y":50.1514,"x":16.0778},{"n":"Itumirim","c":"Brazil","y":-21.3169,"x":-44.8708},{"n":"Mantyharju","c":"Finland","y":61.4181,"x":26.8792},{"n":"Yoshinoyama","c":"Japan","y":34.4,"x":135.85},{"n":"Eagar","c":"United States","y":34.1058,"x":-109.2956},{"n":"Ida Ou Moumene","c":"Morocco","y":30.5983,"x":-9.0025},{"n":"Senador Eloi de Souza","c":"Brazil","y":-6.0358,"x":-35.6928},{"n":"Sao Joao da Serra","c":"Brazil","y":-5.5139,"x":-41.8989},{"n":"Gyangze","c":"China","y":28.9203,"x":89.5996},{"n":"Branford Center","c":"United States","y":41.2779,"x":-72.8148},{"n":"Rib Mountain","c":"United States","y":44.9196,"x":-89.6763},{"n":"Adligenswil","c":"Switzerland","y":47.0706,"x":8.365},{"n":"Kuybyshevo","c":"Russia","y":47.8183,"x":38.9083},{"n":"Henryetta","c":"United States","y":35.4421,"x":-95.9848},{"n":"Unterseen","c":"Switzerland","y":46.6872,"x":7.8497},{"n":"Magny-en-Vexin","c":"France","y":49.1544,"x":1.7867},{"n":"Fort Edward","c":"United States","y":43.2294,"x":-73.56},{"n":"Barra Longa","c":"Brazil","y":-20.2828,"x":-43.0408},{"n":"Polygyros","c":"Greece","y":40.3783,"x":23.4453},{"n":"Szabadszallas","c":"Hungary","y":46.8761,"x":19.2217},{"n":"Rusko","c":"Finland","y":60.5417,"x":22.2222},{"n":"San Gerardo","c":"El Salvador","y":13.8,"x":-88.4},{"n":"Odesskoye","c":"Russia","y":54.1861,"x":73.05},{"n":"Erdweg","c":"Germany","y":48.3167,"x":11.3},{"n":"Jemna","c":"Tunisia","y":33.57,"x":9.01},{"n":"Hemhofen","c":"Germany","y":49.6831,"x":10.9331},{"n":"Simsbury Center","c":"United States","y":41.8808,"x":-72.8111},{"n":"Chanceford","c":"United States","y":39.8832,"x":-76.4757},{"n":"Wassertrudingen","c":"Germany","y":49.0333,"x":10.6},{"n":"Kojetin","c":"Czechia","y":49.3518,"x":17.3021},{"n":"Sainte-Sigolene","c":"France","y":45.2431,"x":4.2347},{"n":"Monteiasi","c":"Italy","y":40.5,"x":17.3833},{"n":"Kulary","c":"Russia","y":43.2397,"x":45.5042},{"n":"Bonares","c":"Spain","y":37.3167,"x":-6.6667},{"n":"San Pol de Mar","c":"Spain","y":41.6033,"x":2.6244},{"n":"Pardinho","c":"Brazil","y":-23.0811,"x":-48.3736},{"n":"Saxon","c":"Switzerland","y":46.15,"x":7.1667},{"n":"Lanett","c":"United States","y":32.8571,"x":-85.2081},{"n":"Quinto Vicentino","c":"Italy","y":45.5667,"x":11.6167},{"n":"Veintiocho de Noviembre","c":"Argentina","y":-51.584,"x":-72.2143},{"n":"Pignataro Maggiore","c":"Italy","y":41.2,"x":14.1667},{"n":"Nurensdorf","c":"Switzerland","y":47.4467,"x":8.6486},{"n":"Ares","c":"Spain","y":43.4278,"x":-8.2417},{"n":"Ujszasz","c":"Hungary","y":47.3,"x":20.0833},{"n":"Ballingry","c":"United Kingdom","y":56.15,"x":-3.3333},{"n":"Raleigh Hills","c":"United States","y":45.4852,"x":-122.7567},{"n":"Naintre","c":"France","y":46.7636,"x":0.4864},{"n":"Kleinwallstadt","c":"Germany","y":49.8717,"x":9.1678},{"n":"Lausen","c":"Switzerland","y":47.4725,"x":7.7597},{"n":"Graca Aranha","c":"Brazil","y":-5.41,"x":-44.3339},{"n":"Vernio","c":"Italy","y":44.05,"x":11.15},{"n":"Santorso","c":"Italy","y":45.7333,"x":11.3833},{"n":"Glenarden","c":"United States","y":38.9293,"x":-76.8577},{"n":"East Pasadena","c":"United States","y":34.1377,"x":-118.0776},{"n":"Kechoulah","c":"Morocco","y":31.5592,"x":-9.2483},{"n":"Sint Pancras","c":"Netherlands","y":52.6631,"x":4.7853},{"n":"Trunovskoye","c":"Russia","y":45.495,"x":42.1294},{"n":"Maiano","c":"Italy","y":46.1833,"x":13.0667},{"n":"Saint-Jorioz","c":"France","y":45.8336,"x":6.1639},{"n":"Hofbieber","c":"Germany","y":50.5863,"x":9.8353},{"n":"Ronco all'Adige","c":"Italy","y":45.3365,"x":11.2466},{"n":"Potiretama","c":"Brazil","y":-5.6678,"x":-38.2508},{"n":"New Norfolk","c":"Australia","y":-42.7828,"x":147.0594},{"n":"Gurinhata","c":"Brazil","y":-19.2128,"x":-49.7858},{"n":"Pelican Bay","c":"United States","y":26.2326,"x":-81.8108},{"n":"Dornhan","c":"Germany","y":48.3494,"x":8.5122},{"n":"Tequesta","c":"United States","y":26.9618,"x":-80.1011},{"n":"Montbonnot-Saint-Martin","c":"France","y":45.2269,"x":5.8025},{"n":"Clapiers","c":"France","y":43.6575,"x":3.8883},{"n":"Alpnach","c":"Switzerland","y":46.9499,"x":8.2309},{"n":"Elm Grove","c":"United States","y":43.0479,"x":-88.0867},{"n":"Borso del Grappa","c":"Italy","y":45.8167,"x":11.8},{"n":"Genazzano","c":"Italy","y":41.8333,"x":12.9667},{"n":"Varnita","c":"Moldova","y":46.8614,"x":29.4692},{"n":"Sidi Mbark","c":"Morocco","y":29.2987,"x":-9.825},{"n":"Welshpool","c":"United Kingdom","y":52.6597,"x":-3.1473},{"n":"Lom Kao","c":"Thailand","y":16.8847,"x":101.2336},{"n":"Carlstadt","c":"United States","y":40.8247,"x":-74.0613},{"n":"Vaugneray","c":"France","y":45.7378,"x":4.6564},{"n":"Sumeg","c":"Hungary","y":46.9775,"x":17.2817},{"n":"Torrebelvicino","c":"Italy","y":45.7167,"x":11.3167},{"n":"North Windham","c":"United States","y":43.8238,"x":-70.4288},{"n":"Cochran","c":"United States","y":32.3875,"x":-83.3523},{"n":"Sedgefield","c":"United Kingdom","y":54.65,"x":-1.45},{"n":"Riantec","c":"France","y":47.7108,"x":-3.3106},{"n":"Eucalyptus Hills","c":"United States","y":32.885,"x":-116.9453},{"n":"Brownville","c":"United States","y":44.0298,"x":-76.053},{"n":"Sosnovo-Ozerskoye","c":"Russia","y":52.5247,"x":111.5411},{"n":"Helmshore","c":"United Kingdom","y":53.687,"x":-2.329},{"n":"Castelsardo","c":"Italy","y":40.9144,"x":8.7128},{"n":"Emskirchen","c":"Germany","y":49.5514,"x":10.7178},{"n":"Novokhopersk","c":"Russia","y":51.1,"x":41.6167},{"n":"Jambeiro","c":"Brazil","y":-23.2536,"x":-45.6878},{"n":"Shikhany","c":"Russia","y":52.1167,"x":47.2},{"n":"Bo","c":"Norway","y":59.4572,"x":9.0314},{"n":"Laurel Bay","c":"United States","y":32.4599,"x":-80.7869},{"n":"Braunlage","c":"Germany","y":51.7264,"x":10.6101},{"n":"Garrettsville","c":"United States","y":41.2843,"x":-81.0933},{"n":"Abanilla","c":"Spain","y":38.2072,"x":-1.0414},{"n":"Pollau","c":"Austria","y":47.3019,"x":15.8339},{"n":"Douvrin","c":"France","y":50.51,"x":2.8317},{"n":"Fundeni","c":"Romania","y":44.3833,"x":26.3667},{"n":"Frick","c":"Switzerland","y":47.5081,"x":8.0222},{"n":"Kirchentellinsfurt","c":"Germany","y":48.5311,"x":9.1483},{"n":"Gardnerville","c":"United States","y":38.939,"x":-119.7369},{"n":"Gnas","c":"Austria","y":46.8749,"x":15.8263},{"n":"Candiolo","c":"Italy","y":44.9667,"x":7.6},{"n":"Fleurance","c":"France","y":43.8494,"x":0.6636},{"n":"Lochgau","c":"Germany","y":49.0017,"x":9.1083},{"n":"Isanti","c":"United States","y":45.4928,"x":-93.2407},{"n":"Taciba","c":"Brazil","y":-22.39,"x":-51.285},{"n":"Vizzini","c":"Italy","y":37.1667,"x":14.75},{"n":"Mainhardt","c":"Germany","y":49.0833,"x":9.55},{"n":"Otaci","c":"Moldova","y":48.43,"x":27.7939},{"n":"Norena","c":"Spain","y":43.3933,"x":-5.7042},{"n":"Lannemezan","c":"France","y":43.1239,"x":0.3847},{"n":"Punxsutawney","c":"United States","y":40.9437,"x":-78.9767},{"n":"Country Homes","c":"United States","y":47.7478,"x":-117.4196},{"n":"Wailua Homesteads","c":"United States","y":22.065,"x":-159.3771},{"n":"Hergiswil","c":"Switzerland","y":46.9844,"x":8.3125},{"n":"Kehychivka","c":"Ukraine","y":49.2858,"x":35.7622},{"n":"Haute-Goulaine","c":"France","y":47.1989,"x":-1.4286},{"n":"Chiquilistlan","c":"Mexico","y":20.0856,"x":-103.8939},{"n":"Brigg","c":"United Kingdom","y":53.5529,"x":-0.485},{"n":"Fahrland","c":"Germany","y":52.4675,"x":13.0139},{"n":"Aznalcollar","c":"Spain","y":37.5167,"x":-6.2667},{"n":"Moulay Bouzarqtoune","c":"Morocco","y":31.65,"x":-9.6833},{"n":"Spydeberg","c":"Norway","y":59.6153,"x":11.0764},{"n":"Bartonville","c":"United States","y":40.6398,"x":-89.6608},{"n":"Ixcateopan de Cuauhtemoc","c":"Mexico","y":18.5,"x":-99.7933},{"n":"Chena Ridge","c":"United States","y":64.7941,"x":-148.0357},{"n":"Pauls Valley","c":"United States","y":34.7236,"x":-97.2291},{"n":"Saint-Apollinaire","c":"Canada","y":46.6167,"x":-71.5167},{"n":"Wanon Niwat","c":"Thailand","y":17.6358,"x":103.7549},{"n":"Tazemmourt","c":"Morocco","y":30.4083,"x":-8.8269},{"n":"Munford","c":"United States","y":35.4433,"x":-89.8148},{"n":"Tarrant","c":"United States","y":33.5945,"x":-86.7684},{"n":"Los Chaves","c":"United States","y":34.7332,"x":-106.7631},{"n":"Woodville","c":"United Kingdom","y":52.769,"x":-1.533},{"n":"Fornovo di Taro","c":"Italy","y":44.6833,"x":10.1},{"n":"Wildon","c":"Austria","y":46.8869,"x":15.5142},{"n":"Wilhering","c":"Austria","y":48.3239,"x":14.1906},{"n":"Santo Antonio do Jardim","c":"Brazil","y":-22.1158,"x":-46.68},{"n":"Los Ranchos de Albuquerque","c":"United States","y":35.1625,"x":-106.6481},{"n":"Megalopoli","c":"Greece","y":37.4,"x":22.1333},{"n":"Prrenjas","c":"Albania","y":41.0667,"x":20.55},{"n":"San Antonio Canada","c":"Mexico","y":18.5,"x":-97.2833},{"n":"Windsbach","c":"Germany","y":49.2489,"x":10.8291},{"n":"Aquia Harbour","c":"United States","y":38.4597,"x":-77.3806},{"n":"Nereto","c":"Italy","y":42.82,"x":13.8169},{"n":"Indian Hills","c":"United States","y":39.0894,"x":-119.7977},{"n":"Bresje","c":"Kosovo","y":42.6264,"x":21.0874},{"n":"Coursan","c":"France","y":43.2325,"x":3.0589},{"n":"Klaebu","c":"Norway","y":63.2761,"x":10.5142},{"n":"El Granada","c":"United States","y":37.5134,"x":-122.466},{"n":"Pai Pedro","c":"Brazil","y":-15.5169,"x":-43.065},{"n":"Villefranche-sur-Mer","c":"France","y":43.7042,"x":7.3117},{"n":"Concepcion de Buenos Aires","c":"Mexico","y":19.8667,"x":-103.15},{"n":"San Giovanni Suergiu","c":"Italy","y":39.1109,"x":8.5225},{"n":"Serradifalco","c":"Italy","y":37.4538,"x":13.8805},{"n":"Alkoven","c":"Austria","y":48.2872,"x":14.1069},{"n":"Acque Dolci","c":"Italy","y":38.05,"x":14.5833},{"n":"Thelepte","c":"Tunisia","y":34.9758,"x":8.5939},{"n":"Chalfont Saint Giles","c":"United Kingdom","y":51.632,"x":-0.576},{"n":"Tillicoultry","c":"United Kingdom","y":56.153,"x":-3.742},{"n":"Anta Gorda","c":"Brazil","y":-28.97,"x":-52.005},{"n":"Alcudia de Crespins","c":"Spain","y":38.9708,"x":-0.5908},{"n":"Gauchy","c":"France","y":49.8253,"x":3.2856},{"n":"Niedereschach","c":"Germany","y":48.1317,"x":8.5272},{"n":"Pueai Noi","c":"Thailand","y":15.8707,"x":102.9064},{"n":"Rio Espera","c":"Brazil","y":-20.855,"x":-43.4739},{"n":"Lucciana","c":"France","y":42.5458,"x":9.4172},{"n":"Rosate","c":"Italy","y":45.3333,"x":9.0167},{"n":"Stewartville","c":"United States","y":43.8605,"x":-92.4896},{"n":"Filiatra","c":"Greece","y":37.1572,"x":21.5858},{"n":"Pagham","c":"United Kingdom","y":50.7708,"x":-0.7448},{"n":"Navas","c":"Spain","y":41.8997,"x":1.8786},{"n":"Janossomorja","c":"Hungary","y":47.7852,"x":17.1359},{"n":"Oulad Amghar","c":"Morocco","y":35.25,"x":-3.65},{"n":"Bensley","c":"United States","y":37.447,"x":-77.442},{"n":"Hordle","c":"United Kingdom","y":50.7603,"x":-1.6212},{"n":"Mesquita","c":"Brazil","y":-19.2228,"x":-42.6069},{"n":"Adlington","c":"United Kingdom","y":53.6165,"x":-2.5986},{"n":"Madalena","c":"Portugal","y":38.5356,"x":-28.5234},{"n":"Riedenburg","c":"Germany","y":48.9667,"x":11.6833},{"n":"Villemur-sur-Tarn","c":"France","y":43.8656,"x":1.505},{"n":"Lindau","c":"Switzerland","y":47.4431,"x":8.6719},{"n":"Meriel","c":"France","y":49.0792,"x":2.205},{"n":"Harlan","c":"United States","y":36.8432,"x":-83.3184},{"n":"Ginoza","c":"Japan","y":26.4817,"x":127.9756},{"n":"Los Villares","c":"Spain","y":37.6833,"x":-3.8167},{"n":"Hindon Hill","c":"Canada","y":44.9333,"x":-78.7333},{"n":"East Ballina","c":"Australia","y":-28.8594,"x":153.5872},{"n":"Dinguiraye","c":"Guinea","y":11.299,"x":-10.726},{"n":"Krume","c":"Albania","y":42.1961,"x":20.4146},{"n":"Willard","c":"United States","y":41.0518,"x":-82.7232},{"n":"Puttershoek","c":"Netherlands","y":51.8044,"x":4.5681},{"n":"Roquefort-la-Bedoule","c":"France","y":43.2475,"x":5.5908},{"n":"Biloela","c":"Australia","y":-24.4002,"x":150.5133},{"n":"Hastiere-par-dela","c":"Belgium","y":50.2167,"x":4.8333},{"n":"Artes","c":"Spain","y":41.7981,"x":1.9552},{"n":"Meyreuil","c":"France","y":43.4861,"x":5.4956},{"n":"Aubignan","c":"France","y":44.0997,"x":5.0253},{"n":"Pedra Bela","c":"Brazil","y":-22.7931,"x":-46.4433},{"n":"Wheelersburg","c":"United States","y":38.7383,"x":-82.8421},{"n":"Cheshire Village","c":"United States","y":41.5026,"x":-72.8993},{"n":"Dol-de-Bretagne","c":"France","y":48.5497,"x":-1.7508},{"n":"Albaida","c":"Spain","y":38.8369,"x":-0.5156},{"n":"Marcellus","c":"United States","y":42.9539,"x":-76.3255},{"n":"Hurley","c":"United States","y":41.9622,"x":-74.1159},{"n":"Les Cedres","c":"Canada","y":45.3,"x":-74.05},{"n":"Steinfort","c":"Luxembourg","y":49.66,"x":5.9156},{"n":"Meijel","c":"Netherlands","y":51.35,"x":5.8833},{"n":"Worragee","c":"Australia","y":-34.9144,"x":150.6386},{"n":"Montauban-de-Bretagne","c":"France","y":48.1992,"x":-2.0481},{"n":"Vilaboa","c":"Spain","y":42.4167,"x":-8.55},{"n":"Sannicola","c":"Italy","y":40.1,"x":18.0667},{"n":"Noves","c":"France","y":43.8769,"x":4.9014},{"n":"Roye","c":"France","y":49.7,"x":2.7903},{"n":"La Broquerie","c":"Canada","y":49.3994,"x":-96.5103},{"n":"Saint-Mitre-les-Remparts","c":"France","y":43.455,"x":5.0142},{"n":"Ahtari","c":"Finland","y":62.55,"x":24.0694},{"n":"Aixe-sur-Vienne","c":"France","y":45.7964,"x":1.1361},{"n":"Colney Heath","c":"United Kingdom","y":51.7353,"x":-0.2564},{"n":"Labunista","c":"Macedonia","y":41.2683,"x":20.5958},{"n":"Alezio","c":"Italy","y":40.0667,"x":18.05},{"n":"Ostricourt","c":"France","y":50.4544,"x":3.0308},{"n":"Verkhniy Avzyan","c":"Russia","y":53.5289,"x":57.5372},{"n":"Williams","c":"United States","y":40.6313,"x":-75.2278},{"n":"Neftenbach","c":"Switzerland","y":47.5283,"x":8.6681},{"n":"Clifton Springs","c":"United States","y":42.9608,"x":-77.1348},{"n":"Santa Catarina","c":"Mexico","y":21.1406,"x":-100.0619},{"n":"Butjadingen","c":"Germany","y":53.55,"x":8.3333},{"n":"Ceriale","c":"Italy","y":44.0966,"x":8.2321},{"n":"Bad Konigshofen im Grabfeld","c":"Germany","y":50.2992,"x":10.4667},{"n":"Breitenfurth bei Wien","c":"Austria","y":48.1333,"x":16.15},{"n":"Sebis","c":"Romania","y":46.3728,"x":22.1294},{"n":"Mrgashat","c":"Armenia","y":40.1297,"x":44.0706},{"n":"Guadasuar","c":"Spain","y":39.1833,"x":-0.4781},{"n":"Sandnessjoen","c":"Norway","y":66.0167,"x":12.6333},{"n":"Gozzano","c":"Italy","y":45.75,"x":8.4333},{"n":"Verkh-Tula","c":"Russia","y":54.8833,"x":82.7806},{"n":"Chorvatsky Grob","c":"Slovakia","y":48.2275,"x":17.2908},{"n":"South Williamsport","c":"United States","y":41.2294,"x":-77.0009},{"n":"Westmoreland","c":"United States","y":43.1216,"x":-75.4476},{"n":"La Wantzenau","c":"France","y":48.6581,"x":7.8283},{"n":"Chevreuse","c":"France","y":48.7075,"x":2.0383},{"n":"Allershausen","c":"Germany","y":48.425,"x":11.5917},{"n":"Kent","c":"Canada","y":49.2833,"x":-121.75},{"n":"Baltmannsweiler","c":"Germany","y":48.7433,"x":9.4492},{"n":"Vilafant","c":"Spain","y":42.2468,"x":2.9379},{"n":"Itueta","c":"Brazil","y":-19.3939,"x":-41.17},{"n":"Carcare","c":"Italy","y":44.3579,"x":8.2906},{"n":"Munchwilen","c":"Switzerland","y":47.4815,"x":8.9924},{"n":"Altafulla","c":"Spain","y":41.1433,"x":1.3769},{"n":"Geislingen","c":"Germany","y":48.2875,"x":8.8125},{"n":"Ostellato","c":"Italy","y":44.75,"x":11.9333},{"n":"Pacuja","c":"Brazil","y":-3.9878,"x":-40.6969},{"n":"Saint-Georges-d'Orques","c":"France","y":43.6103,"x":3.7806},{"n":"Bagnolo Piemonte","c":"Italy","y":44.7667,"x":7.3167},{"n":"Campo Alegre de Goias","c":"Brazil","y":-17.6389,"x":-47.7819},{"n":"Ulety","c":"Russia","y":51.3561,"x":112.4828},{"n":"San Lucido","c":"Italy","y":39.3167,"x":16.05},{"n":"Cirali","c":"Turkey","y":36.4073,"x":30.4786},{"n":"Waihi","c":"New Zealand","y":-37.393,"x":175.832},{"n":"Alban","c":"Colombia","y":4.8783,"x":-74.4383},{"n":"Coloso","c":"Colombia","y":9.4942,"x":-75.3525},{"n":"Monchique","c":"Portugal","y":37.3167,"x":-8.6},{"n":"Donzere","c":"France","y":44.4436,"x":4.71},{"n":"Maurik","c":"Netherlands","y":51.96,"x":5.4236},{"n":"Bechhofen","c":"Germany","y":49.1637,"x":10.5549},{"n":"Bagnolo San Vito","c":"Italy","y":45.0833,"x":10.8833},{"n":"Saint-Hilaire-du-Harcouet","c":"France","y":48.5778,"x":-1.0919},{"n":"Moosinning","c":"Germany","y":48.2833,"x":11.85},{"n":"Zumikon","c":"Switzerland","y":47.3328,"x":8.6239},{"n":"Thalgau","c":"Austria","y":47.8413,"x":13.2537},{"n":"Rindge","c":"United States","y":42.7523,"x":-72.0107},{"n":"Sersheim","c":"Germany","y":48.9617,"x":9.0139},{"n":"Divisa Nova","c":"Brazil","y":-21.5108,"x":-46.1958},{"n":"Rhuthun","c":"United Kingdom","y":53.115,"x":-3.312},{"n":"Fort Ann","c":"United States","y":43.4698,"x":-73.5231},{"n":"Arnemuiden","c":"Netherlands","y":51.5,"x":3.6667},{"n":"Lindfield","c":"United Kingdom","y":51.0135,"x":-0.0833},{"n":"Askern","c":"United Kingdom","y":53.6167,"x":-1.15},{"n":"Ouro Verde de Minas","c":"Brazil","y":-18.0708,"x":-41.27},{"n":"Shihoro","c":"Japan","y":43.1683,"x":143.2411},{"n":"Colonia do Gurgueia","c":"Brazil","y":-8.1819,"x":-43.7919},{"n":"Nelsonville","c":"United States","y":39.456,"x":-82.2219},{"n":"Writtle","c":"United Kingdom","y":51.729,"x":0.427},{"n":"Kastellaun","c":"Germany","y":50.0694,"x":7.4431},{"n":"Obfelden","c":"Switzerland","y":47.2639,"x":8.4242},{"n":"Magdalena Tequisistlan","c":"Mexico","y":16.3992,"x":-95.6033},{"n":"Childress","c":"United States","y":34.4293,"x":-100.2516},{"n":"Brezoi","c":"Romania","y":45.3442,"x":24.2394},{"n":"Lonate Ceppino","c":"Italy","y":45.7,"x":8.8667},{"n":"Staplehurst","c":"United Kingdom","y":51.164,"x":0.553},{"n":"Bni Abdellah","c":"Morocco","y":35.0728,"x":-4.0706},{"n":"Kotel","c":"Bulgaria","y":42.8863,"x":26.45},{"n":"Kabansk","c":"Russia","y":52.0486,"x":106.6528},{"n":"Oraison","c":"France","y":43.9172,"x":5.9186},{"n":"Deschutes River Woods","c":"United States","y":43.9887,"x":-121.3608},{"n":"Tweed","c":"Canada","y":44.6,"x":-77.3333},{"n":"Laufen","c":"Switzerland","y":47.4167,"x":7.5},{"n":"Carrizo Springs","c":"United States","y":28.5266,"x":-99.8589},{"n":"Totkomlos","c":"Hungary","y":46.4169,"x":20.7328},{"n":"Maintirano","c":"Madagascar","y":-18.0666,"x":44.0167},{"n":"Sanitz","c":"Germany","y":54.0833,"x":12.3833},{"n":"Belusa","c":"Slovakia","y":49.0653,"x":18.3278},{"n":"Combourg","c":"France","y":48.4086,"x":-1.7517},{"n":"Wasselonne","c":"France","y":48.6372,"x":7.4481},{"n":"Lossa","c":"Germany","y":51.3992,"x":12.8736},{"n":"Mel","c":"Italy","y":46.0622,"x":12.0798},{"n":"Itaguatins","c":"Brazil","y":-5.7678,"x":-47.4808},{"n":"Pau D'Arco","c":"Brazil","y":-7.8328,"x":-50.0439},{"n":"Mishkino","c":"Russia","y":55.5342,"x":55.9633},{"n":"Barbourville","c":"United States","y":36.8667,"x":-83.885},{"n":"Buttenwiesen","c":"Germany","y":48.6,"x":10.7167},{"n":"Dubasarii Vechi","c":"Moldova","y":47.1356,"x":29.2008},{"n":"Calvisson","c":"France","y":43.785,"x":4.1922},{"n":"Dacono","c":"United States","y":40.062,"x":-104.9484},{"n":"Tapa","c":"Estonia","y":59.2644,"x":25.9628},{"n":"Chapeu","c":"Brazil","y":-23.5558,"x":-52.2178},{"n":"Bagni di Lucca","c":"Italy","y":44.0094,"x":10.5794},{"n":"Cartes","c":"Spain","y":43.3256,"x":-4.0681},{"n":"Saint-Galmier","c":"France","y":45.59,"x":4.3172},{"n":"Wilna","c":"United States","y":44.0562,"x":-75.5903},{"n":"Tea","c":"United States","y":43.4511,"x":-96.834},{"n":"Hambrucken","c":"Germany","y":49.1861,"x":8.5439},{"n":"Milhaud","c":"France","y":43.7897,"x":4.3075},{"n":"Rohrdorf","c":"Germany","y":47.7989,"x":12.1675},{"n":"Saint-Felix-de-Valois","c":"Canada","y":46.17,"x":-73.43},{"n":"Xambre","c":"Brazil","y":-23.7358,"x":-53.49},{"n":"Krasavino","c":"Russia","y":60.9667,"x":46.4833},{"n":"Khlevnoye","c":"Russia","y":52.1951,"x":39.0932},{"n":"Corsano","c":"Italy","y":39.8891,"x":18.3675},{"n":"Penela","c":"Portugal","y":40.0333,"x":-8.3833},{"n":"Bottanuco","c":"Italy","y":45.6397,"x":9.5064},{"n":"Beaucourt","c":"France","y":47.4861,"x":6.9253},{"n":"Deryneia","c":"Cyprus","y":35.063,"x":33.9585},{"n":"Gualdo Cattaneo","c":"Italy","y":42.9167,"x":12.55},{"n":"Great Warley Street","c":"United Kingdom","y":51.607,"x":0.3},{"n":"Schlusselfeld","c":"Germany","y":49.7567,"x":10.6193},{"n":"La Ferte-Mace","c":"France","y":48.5925,"x":-0.3572},{"n":"Volodarka","c":"Ukraine","y":49.52,"x":29.9153},{"n":"Billigheim","c":"Germany","y":49.3478,"x":9.2544},{"n":"Chepes","c":"Argentina","y":-31.35,"x":-66.6},{"n":"Timelkam","c":"Austria","y":48.0014,"x":13.6125},{"n":"Nove Straseci","c":"Czechia","y":50.1528,"x":13.9005},{"n":"Ban Chet Samian","c":"Thailand","y":13.6264,"x":99.8293},{"n":"Sales","c":"Brazil","y":-21.3408,"x":-49.485},{"n":"Finley","c":"United States","y":46.1697,"x":-119.0446},{"n":"Betania do Piaui","c":"Brazil","y":-8.1478,"x":-40.7958},{"n":"Mugeln","c":"Germany","y":51.2333,"x":13.05},{"n":"Darjazin","c":"Iran","y":35.6447,"x":53.3342},{"n":"Stoke Mandeville","c":"United Kingdom","y":51.7861,"x":-0.7914},{"n":"Felipe Guerra","c":"Brazil","y":-5.6028,"x":-37.6889},{"n":"Parabel'","c":"Russia","y":58.6978,"x":81.4825},{"n":"Seaton Carew","c":"United Kingdom","y":54.6628,"x":-1.1888},{"n":"Pluak Daeng","c":"Thailand","y":12.9728,"x":101.2143},{"n":"Pluneret","c":"France","y":47.6756,"x":-2.9575},{"n":"Nerokouros","c":"Greece","y":35.4758,"x":24.0383},{"n":"Montmorillon","c":"France","y":46.4261,"x":0.8708},{"n":"Douar Tazrout","c":"Morocco","y":35.2631,"x":-5.5453},{"n":"Ra's al Khashufah","c":"Syria","y":34.8833,"x":36.1333},{"n":"Querqueville","c":"France","y":49.6633,"x":-1.6953},{"n":"Azovo","c":"Russia","y":54.6997,"x":73.0236},{"n":"Aiuruoca","c":"Brazil","y":-21.9758,"x":-44.6028},{"n":"Bay Roberts","c":"Canada","y":47.5847,"x":-53.2783},{"n":"La Gorgue","c":"France","y":50.6383,"x":2.7142},{"n":"Crofton","c":"United Kingdom","y":53.657,"x":-1.427},{"n":"Ascea","c":"Italy","y":40.15,"x":15.1833},{"n":"Hainesport","c":"United States","y":39.9767,"x":-74.8369},{"n":"Fort Shawnee","c":"United States","y":40.6814,"x":-84.1487},{"n":"Metropolis","c":"United States","y":37.1565,"x":-88.7083},{"n":"Oshakan","c":"Armenia","y":40.2633,"x":44.3147},{"n":"Maquoketa","c":"United States","y":42.0598,"x":-90.6651},{"n":"Watchung","c":"United States","y":40.6432,"x":-74.4391},{"n":"Zhongcha","c":"China","y":33.2911,"x":103.8735},{"n":"Zeeland","c":"Netherlands","y":51.6967,"x":5.6731},{"n":"Los Reyes","c":"Mexico","y":18.6743,"x":-97.0385},{"n":"Godstone","c":"United Kingdom","y":51.248,"x":-0.064},{"n":"St. Thomas","c":"United States","y":39.9239,"x":-77.8063},{"n":"Herrnhut","c":"Germany","y":51.0167,"x":14.7417},{"n":"Matsuzaki","c":"Japan","y":34.7531,"x":138.7789},{"n":"Soligalich","c":"Russia","y":59.0833,"x":42.2833},{"n":"Du Quoin","c":"United States","y":38.0019,"x":-89.2323},{"n":"Rajec","c":"Slovakia","y":49.0833,"x":18.6333},{"n":"Angles","c":"Spain","y":41.9574,"x":2.64},{"n":"Tessalit","c":"Mali","y":20.2011,"x":1.0125},{"n":"Villanova Mondovi","c":"Italy","y":44.35,"x":7.7667},{"n":"Burghfield","c":"United Kingdom","y":51.411,"x":-1.042},{"n":"Bons-en-Chablais","c":"France","y":46.2644,"x":6.3703},{"n":"Ibiara","c":"Brazil","y":-7.5008,"x":-38.405},{"n":"Karlshuld","c":"Germany","y":48.6833,"x":11.3},{"n":"Blean","c":"United Kingdom","y":51.307,"x":1.043},{"n":"Amalfi","c":"Italy","y":40.6333,"x":14.6028},{"n":"Elburn","c":"United States","y":41.8838,"x":-88.4615},{"n":"Ashton-Sandy Spring","c":"United States","y":39.1515,"x":-77.0065},{"n":"Belyayevka","c":"Russia","y":51.3975,"x":56.4167},{"n":"Jose da Penha","c":"Brazil","y":-6.3169,"x":-38.2808},{"n":"Tarp","c":"Germany","y":54.6667,"x":9.4},{"n":"Hittfeld","c":"Germany","y":53.3856,"x":9.9844},{"n":"Yukhnov","c":"Russia","y":54.75,"x":35.2333},{"n":"Kvinesdal","c":"Norway","y":58.3381,"x":7.0231},{"n":"Santa Albertina","c":"Brazil","y":-20.0319,"x":-50.7278},{"n":"Porvenir","c":"Chile","y":-53.2956,"x":-70.3687},{"n":"Coristanco","c":"Spain","y":43.2,"x":-8.75},{"n":"Castelnuovo di Garfagnana","c":"Italy","y":44.1219,"x":10.4056},{"n":"Melfort","c":"Canada","y":52.8564,"x":-104.61},{"n":"San Dorligo della Valle","c":"Italy","y":45.6225,"x":13.8578},{"n":"Villa Bartolomea","c":"Italy","y":45.1583,"x":11.3531},{"n":"Coulogne","c":"France","y":50.9242,"x":1.885},{"n":"Pinkafeld","c":"Austria","y":47.3717,"x":16.1219},{"n":"Upice","c":"Czechia","y":50.5124,"x":16.0162},{"n":"Cristalia","c":"Brazil","y":-16.8,"x":-42.8619},{"n":"Bathmen","c":"Netherlands","y":52.25,"x":6.2869},{"n":"Eastampton","c":"United States","y":40.001,"x":-74.7553},{"n":"Wingham","c":"Australia","y":-31.85,"x":152.367},{"n":"Trebechovice pod Orebem","c":"Czechia","y":50.201,"x":15.9923},{"n":"Stadtoldendorf","c":"Germany","y":51.8833,"x":9.6167},{"n":"Almodovar del Campo","c":"Spain","y":38.7186,"x":-4.1667},{"n":"Homeland Park","c":"United States","y":34.4644,"x":-82.6593},{"n":"Karaidel","c":"Russia","y":55.8377,"x":56.9098},{"n":"Alnashi","c":"Russia","y":56.1874,"x":52.4792},{"n":"Bredstedt","c":"Germany","y":54.62,"x":8.9644},{"n":"Wemding","c":"Germany","y":48.8667,"x":10.7167},{"n":"Tegernheim","c":"Germany","y":49.0247,"x":12.1725},{"n":"Cut Off","c":"United States","y":29.5164,"x":-90.3291},{"n":"Tapioszele","c":"Hungary","y":47.3333,"x":19.8833},{"n":"Murca","c":"Portugal","y":41.4,"x":-7.45},{"n":"Membrilla","c":"Spain","y":38.9667,"x":-3.35},{"n":"Gannat","c":"France","y":46.1,"x":3.1983},{"n":"Bussoleno","c":"Italy","y":45.1411,"x":7.1475},{"n":"Northern Cambria","c":"United States","y":40.6561,"x":-78.7784},{"n":"Camalau","c":"Brazil","y":-7.8889,"x":-36.8228},{"n":"Costigliole d'Asti","c":"Italy","y":44.785,"x":8.1819},{"n":"Balatonboglar","c":"Hungary","y":46.7667,"x":17.6667},{"n":"Romentino","c":"Italy","y":45.4667,"x":8.7167},{"n":"Rousinov","c":"Czechia","y":49.2013,"x":16.8822},{"n":"Bedarieux","c":"France","y":43.6159,"x":3.1588},{"n":"Pevely","c":"United States","y":38.2863,"x":-90.4005},{"n":"Sao Pedro de Alcantara","c":"Brazil","y":-27.5658,"x":-48.805},{"n":"South Monroe","c":"United States","y":41.893,"x":-83.4179},{"n":"Bourne End","c":"United Kingdom","y":51.5817,"x":-0.7134},{"n":"Douar Oulad Bou Krae El Fouqani","c":"Morocco","y":31.5617,"x":-8.8944},{"n":"Hungerford","c":"United Kingdom","y":51.414,"x":-1.515},{"n":"Bonnyville","c":"Canada","y":54.2667,"x":-110.75},{"n":"Sutamarchan","c":"Colombia","y":5.6206,"x":-73.6214},{"n":"Stornara","c":"Italy","y":41.2833,"x":15.7667},{"n":"Fayence","c":"France","y":43.6233,"x":6.6939},{"n":"Hellam","c":"United States","y":40.0206,"x":-76.5962},{"n":"Westerburg","c":"Germany","y":50.5639,"x":7.9725},{"n":"Velesta","c":"Macedonia","y":41.2408,"x":20.6439},{"n":"Kisanpur","c":"Nepal","y":26.9333,"x":85.5833},{"n":"Ettingen","c":"Switzerland","y":47.4809,"x":7.5444},{"n":"Robbio","c":"Italy","y":45.2914,"x":8.5922},{"n":"Corigliano d'Otranto","c":"Italy","y":40.1667,"x":18.25},{"n":"Lagodekhi","c":"Georgia","y":41.8222,"x":46.275},{"n":"Gieten","c":"Netherlands","y":53.0053,"x":6.7631},{"n":"Micheldorf in Oberosterreich","c":"Austria","y":47.8781,"x":14.1333},{"n":"Kivioli","c":"Estonia","y":59.3517,"x":26.9611},{"n":"Chinnor","c":"United Kingdom","y":51.702,"x":-0.911},{"n":"Kazimierza Wielka","c":"Poland","y":50.2656,"x":20.4936},{"n":"Berhida","c":"Hungary","y":47.1131,"x":18.1342},{"n":"Jablunkov","c":"Czechia","y":49.5767,"x":18.7646},{"n":"North Hills","c":"United States","y":40.7765,"x":-73.6778},{"n":"Andebu","c":"Norway","y":59.2972,"x":10.105},{"n":"Carbonne","c":"France","y":43.2972,"x":1.2192},{"n":"Murs-Erigne","c":"France","y":47.3986,"x":-0.5372},{"n":"Novobelokatay","c":"Russia","y":55.7066,"x":58.958},{"n":"Bad Saarow-Pieskow","c":"Germany","y":52.2916,"x":14.0558},{"n":"Valga","c":"Spain","y":42.6893,"x":-8.6481},{"n":"Lakemoor","c":"United States","y":42.3396,"x":-88.2038},{"n":"Karstadt","c":"Germany","y":53.1497,"x":11.75},{"n":"Guardo","c":"Spain","y":42.7833,"x":-4.8333},{"n":"Americo de Campos","c":"Brazil","y":-20.3,"x":-49.7333},{"n":"Quincy-Voisins","c":"France","y":48.8994,"x":2.8736},{"n":"Isen","c":"Germany","y":48.2167,"x":12.0667},{"n":"Fatezh","c":"Russia","y":52.0894,"x":35.8589},{"n":"Lower Heidelberg","c":"United States","y":40.3556,"x":-76.0528},{"n":"Trooper","c":"United States","y":40.1489,"x":-75.3995},{"n":"Echzell","c":"Germany","y":50.3833,"x":8.8833},{"n":"Zaraysk","c":"Russia","y":54.7653,"x":38.8836},{"n":"Lengnau","c":"Switzerland","y":47.1817,"x":7.3667},{"n":"Inniswold","c":"United States","y":30.3982,"x":-91.071},{"n":"Peypin","c":"France","y":43.3858,"x":5.5783},{"n":"Axminster","c":"United Kingdom","y":50.781,"x":-3},{"n":"Girifalco","c":"Italy","y":38.8167,"x":16.4333},{"n":"Steelton","c":"United States","y":40.2258,"x":-76.8254},{"n":"Lesparre-Medoc","c":"France","y":45.3069,"x":-0.9378},{"n":"Le Poinconnet","c":"France","y":46.7639,"x":1.7189},{"n":"Sao Joao de Manteninha","c":"Brazil","y":-18.7208,"x":-41.16},{"n":"Haiterbach","c":"Germany","y":48.5244,"x":8.6503},{"n":"Maria Helena","c":"Brazil","y":-23.6158,"x":-53.205},{"n":"Santa Barbara do Rio Pardo","c":"Brazil","y":-22.8808,"x":-49.2389},{"n":"Pusztaszabolcs","c":"Hungary","y":47.1413,"x":18.7594},{"n":"Northville","c":"United States","y":42.4355,"x":-83.489},{"n":"Johnson Lane","c":"United States","y":39.0489,"x":-119.7245},{"n":"Lucerne Valley","c":"United States","y":34.4427,"x":-116.9021},{"n":"Kao Liao","c":"Thailand","y":15.8506,"x":100.0792},{"n":"St. Clair","c":"United States","y":38.3479,"x":-90.9934},{"n":"Ao Luek","c":"Thailand","y":8.378,"x":98.7211},{"n":"East Alton","c":"United States","y":38.884,"x":-90.1073},{"n":"La Creche","c":"France","y":46.3608,"x":-0.3},{"n":"Dedoplists'q'aro","c":"Georgia","y":41.4652,"x":46.1045},{"n":"San Miguel Panixtlahuaca","c":"Mexico","y":16.2597,"x":-97.3781},{"n":"Desselgem","c":"Belgium","y":50.8864,"x":3.35},{"n":"Beniganim","c":"Spain","y":38.9431,"x":-0.4433},{"n":"Stettler","c":"Canada","y":52.3236,"x":-112.7192},{"n":"Dionysos","c":"Greece","y":38.1,"x":23.8667},{"n":"Munzenberg","c":"Germany","y":50.4533,"x":8.7761},{"n":"Rochlitz","c":"Germany","y":51.0481,"x":12.7986},{"n":"Kungsor","c":"Sweden","y":59.4227,"x":16.1059},{"n":"Vidigueira","c":"Portugal","y":38.2,"x":-7.8},{"n":"Sireti","c":"Moldova","y":47.1472,"x":28.6775},{"n":"Eberndorf","c":"Austria","y":46.5914,"x":14.6436},{"n":"Modrice","c":"Czechia","y":49.1279,"x":16.6144},{"n":"Kozaki","c":"Japan","y":35.9017,"x":140.4053},{"n":"Barnhart","c":"United States","y":38.336,"x":-90.4046},{"n":"Fruta de Leite","c":"Brazil","y":-16.1308,"x":-42.5328},{"n":"Villeneuve","c":"Switzerland","y":46.4063,"x":6.9731},{"n":"Eurajoki","c":"Finland","y":61.2,"x":21.7333},{"n":"Mila Doce","c":"United States","y":26.223,"x":-97.9601},{"n":"Hopedale","c":"United States","y":42.1247,"x":-71.535},{"n":"Tashtyp","c":"Russia","y":52.7975,"x":89.8936},{"n":"Fernandes Pinheiro","c":"Brazil","y":-25.4128,"x":-50.5478},{"n":"Waldbrunn","c":"Germany","y":50.5167,"x":8.1167},{"n":"Gowanda","c":"United States","y":42.4612,"x":-78.9339},{"n":"Shields","c":"United States","y":43.4174,"x":-84.0731},{"n":"Sharan","c":"Russia","y":54.8167,"x":54},{"n":"Shatsk","c":"Russia","y":54.0333,"x":41.7},{"n":"Progreso","c":"United States","y":26.0962,"x":-97.9566},{"n":"Picerno","c":"Italy","y":40.6333,"x":15.6333},{"n":"Frasin","c":"Romania","y":47.5183,"x":25.7819},{"n":"Westville","c":"United States","y":41.5375,"x":-86.9049},{"n":"Studley","c":"United Kingdom","y":52.2696,"x":-1.8915},{"n":"Sterlibashevo","c":"Russia","y":53.4372,"x":55.2586},{"n":"Callington","c":"United Kingdom","y":50.503,"x":-4.316},{"n":"Davyd-Haradok","c":"Belarus","y":52.0556,"x":27.2139},{"n":"Itau","c":"Brazil","y":-5.84,"x":-37.9928},{"n":"Dechy","c":"France","y":50.3525,"x":3.1283},{"n":"Yoakum","c":"United States","y":29.2933,"x":-97.1469},{"n":"Darlington","c":"United States","y":34.3015,"x":-79.867},{"n":"Kaba","c":"Hungary","y":47.3557,"x":21.2742},{"n":"Canale","c":"Italy","y":44.8,"x":8},{"n":"Rodeio Bonito","c":"Brazil","y":-27.4708,"x":-53.1689},{"n":"Tinzart","c":"Morocco","y":30.6167,"x":-7.75},{"n":"Ubarana","c":"Brazil","y":-21.1658,"x":-49.7178},{"n":"Waakirchen","c":"Germany","y":47.7667,"x":11.6667},{"n":"Ornago","c":"Italy","y":45.6,"x":9.4167},{"n":"Montalcino","c":"Italy","y":43.0592,"x":11.4892},{"n":"Wolfach","c":"Germany","y":48.2994,"x":8.2228},{"n":"East Preston","c":"United Kingdom","y":50.8104,"x":-0.4819},{"n":"Raton","c":"United States","y":36.8849,"x":-104.4396},{"n":"Mojen","c":"Iran","y":36.48,"x":54.6458},{"n":"Al Qutaylibiyah","c":"Syria","y":35.2889,"x":36.0153},{"n":"Shefar`am","c":"Israel","y":32.8056,"x":35.1694},{"n":"Certosa di Pavia","c":"Italy","y":45.2544,"x":9.1279},{"n":"Goodrich","c":"United States","y":42.9147,"x":-83.5092},{"n":"Psachna","c":"Greece","y":38.5828,"x":23.6328},{"n":"Fontenay-Tresigny","c":"France","y":48.7075,"x":2.8694},{"n":"Ararica","c":"Brazil","y":-29.6139,"x":-50.925},{"n":"Freshwater","c":"United Kingdom","y":50.6826,"x":-1.5249},{"n":"Morshyn","c":"Ukraine","y":49.155,"x":23.8725},{"n":"Leongatha","c":"Australia","y":-38.4833,"x":145.95},{"n":"Saint-Calixte","c":"Canada","y":45.95,"x":-73.85},{"n":"Longare","c":"Italy","y":45.4833,"x":11.6167},{"n":"Campina do Monte Alegre","c":"Brazil","y":-23.4253,"x":-48.4772},{"n":"Furiani","c":"France","y":42.6567,"x":9.4331},{"n":"Xylokastro","c":"Greece","y":38.0667,"x":22.6333},{"n":"Sullivan City","c":"United States","y":26.2752,"x":-98.5644},{"n":"Lac-Megantic","c":"Canada","y":45.5833,"x":-70.8833},{"n":"Tucunduva","c":"Brazil","y":-27.6569,"x":-54.44},{"n":"Tremp","c":"Spain","y":42.1667,"x":0.8946},{"n":"Perth","c":"Canada","y":44.9,"x":-76.25},{"n":"Etalle","c":"Belgium","y":49.6739,"x":5.6019},{"n":"Mucuchies","c":"Venezuela","y":8.75,"x":-70.9167},{"n":"Loro Ciuffenna","c":"Italy","y":43.5867,"x":11.6286},{"n":"Pyrbaum","c":"Germany","y":49.2983,"x":11.2894},{"n":"Keswick","c":"United Kingdom","y":54.5999,"x":-3.1293},{"n":"Leun","c":"Germany","y":50.55,"x":8.3667},{"n":"Hausach","c":"Germany","y":48.2853,"x":8.1797},{"n":"Boe","c":"France","y":44.1597,"x":0.6286},{"n":"Havelte","c":"Netherlands","y":52.7739,"x":6.2383},{"n":"Leiston","c":"United Kingdom","y":52.206,"x":1.579},{"n":"Blaichach","c":"Germany","y":47.5333,"x":10.2667},{"n":"Pagosa Springs","c":"United States","y":37.2674,"x":-107.0307},{"n":"Santa Maria da Serra","c":"Brazil","y":-22.5672,"x":-48.1606},{"n":"Mullica","c":"United States","y":39.6018,"x":-74.6805},{"n":"Woodcreek","c":"United States","y":30.0266,"x":-98.1115},{"n":"Surnadal","c":"Norway","y":62.9475,"x":8.77},{"n":"Dettenhausen","c":"Germany","y":48.6075,"x":9.1006},{"n":"Paula Freitas","c":"Brazil","y":-26.2078,"x":-50.9378},{"n":"Dumfries","c":"United States","y":38.567,"x":-77.3233},{"n":"Oliver Paipoonge","c":"Canada","y":48.39,"x":-89.52},{"n":"Braunlingen","c":"Germany","y":47.9297,"x":8.4481},{"n":"Tynec nad Sazavou","c":"Czechia","y":49.8335,"x":14.5899},{"n":"Gransee","c":"Germany","y":53.0069,"x":13.1586},{"n":"Wesley Hills","c":"United States","y":41.1579,"x":-74.0768},{"n":"Finderne","c":"United States","y":40.5626,"x":-74.5743},{"n":"San Donato di Lecce","c":"Italy","y":40.2667,"x":18.1833},{"n":"Coqueiro Seco","c":"Brazil","y":-9.6378,"x":-35.8028},{"n":"Marennes","c":"France","y":45.8225,"x":-1.1053},{"n":"Zebulon","c":"United States","y":35.8318,"x":-78.3162},{"n":"Banatski Karlovac","c":"Serbia","y":45.0472,"x":21.0161},{"n":"Cresaptown","c":"United States","y":39.5912,"x":-78.855},{"n":"Akbarabad","c":"Iran","y":29.2464,"x":52.7792},{"n":"Kaltennordheim","c":"Germany","y":50.6333,"x":10.1667},{"n":"Sao Joao do Caiua","c":"Brazil","y":-22.8519,"x":-52.3369},{"n":"Ospedaletto Euganeo","c":"Italy","y":45.2231,"x":11.6111},{"n":"Palmwoods","c":"Australia","y":-26.6883,"x":152.9597},{"n":"Vias","c":"France","y":43.3128,"x":3.4186},{"n":"Bazarnyye Mataki","c":"Russia","y":54.9053,"x":49.9258},{"n":"Chambarak","c":"Armenia","y":40.5931,"x":45.3572},{"n":"Dunsborough","c":"Australia","y":-33.6167,"x":115.1},{"n":"Ruhen","c":"Germany","y":52.4833,"x":10.8833},{"n":"Schwarmstedt","c":"Germany","y":52.68,"x":9.6254},{"n":"Le Valdahon","c":"France","y":47.1497,"x":6.3447},{"n":"Wilnis","c":"Netherlands","y":52.1978,"x":4.9},{"n":"Kipfenberg","c":"Germany","y":48.9494,"x":11.395},{"n":"El Arba Bouzemmour","c":"Morocco","y":31.0061,"x":-9.4042},{"n":"Alzamay","c":"Russia","y":55.55,"x":98.6667},{"n":"Ubinskoye","c":"Russia","y":55.3,"x":79.6833},{"n":"Luzerne","c":"United States","y":39.9715,"x":-79.9357},{"n":"Koreiz","c":"Ukraine","y":44.4331,"x":34.0872},{"n":"Ceva","c":"Italy","y":44.3833,"x":8.0333},{"n":"Bracigliano","c":"Italy","y":40.8167,"x":14.7},{"n":"Fontanelle","c":"Italy","y":45.8333,"x":12.4667},{"n":"Trebes","c":"France","y":43.2097,"x":2.4414},{"n":"Saint-Memmie","c":"France","y":48.9531,"x":4.3831},{"n":"Horst","c":"Germany","y":53.8111,"x":9.6183},{"n":"Rio Manso","c":"Brazil","y":-20.265,"x":-44.3078},{"n":"Waibstadt","c":"Germany","y":49.2975,"x":8.92},{"n":"Maiori","c":"Italy","y":40.6486,"x":14.6389},{"n":"Buyni Qarah","c":"Afghanistan","y":36.3172,"x":66.8747},{"n":"Uelsen","c":"Germany","y":52.5,"x":6.8667},{"n":"Turuntayevo","c":"Russia","y":52.2,"x":107.6167},{"n":"Eagleton Village","c":"United States","y":35.7885,"x":-83.9363},{"n":"Aljezur","c":"Portugal","y":37.3178,"x":-8.8},{"n":"Selinsgrove","c":"United States","y":40.8003,"x":-76.8647},{"n":"Tournus","c":"France","y":46.5617,"x":4.9122},{"n":"Murovani Kurylivtsi","c":"Ukraine","y":48.7222,"x":27.515},{"n":"Bandeira do Sul","c":"Brazil","y":-21.7278,"x":-46.3858},{"n":"Gataia","c":"Romania","y":45.4333,"x":21.4333},{"n":"Schonenberg-Kubelberg","c":"Germany","y":49.4106,"x":7.3767},{"n":"Borabue","c":"Thailand","y":16.037,"x":103.1231},{"n":"Nasrabad","c":"Iran","y":32.2794,"x":52.0631},{"n":"Bagno di Romagna","c":"Italy","y":43.8333,"x":11.9667},{"n":"Ozerne","c":"Ukraine","y":50.1794,"x":28.7361},{"n":"Courthezon","c":"France","y":44.0875,"x":4.8842},{"n":"Aimargues","c":"France","y":43.6847,"x":4.2086},{"n":"Radenthein","c":"Austria","y":46.8,"x":13.7},{"n":"Visegrad","c":"Bosnia And Herzegovina","y":43.7833,"x":19.2833},{"n":"Rogliano","c":"Italy","y":39.1833,"x":16.3167},{"n":"Hermon","c":"United States","y":44.8141,"x":-68.9087},{"n":"Huai Mek","c":"Thailand","y":16.6001,"x":103.2264},{"n":"Sambuca di Sicilia","c":"Italy","y":37.6478,"x":13.1111},{"n":"Old Tappan","c":"United States","y":41.0163,"x":-73.9856},{"n":"Hebertshausen","c":"Germany","y":48.2908,"x":11.4692},{"n":"Willington","c":"United States","y":41.8896,"x":-72.2593},{"n":"Ober-Morlen","c":"Germany","y":50.3728,"x":8.6906},{"n":"Ait Ouakrim","c":"Morocco","y":30.0297,"x":-9.2478},{"n":"Viggiu","c":"Italy","y":45.8667,"x":8.9},{"n":"Mengerskirchen","c":"Germany","y":50.5639,"x":8.1558},{"n":"Drighlington","c":"United Kingdom","y":53.7568,"x":-1.6616},{"n":"Fismes","c":"France","y":49.3072,"x":3.6806},{"n":"Naturno","c":"Italy","y":46.6502,"x":11.0084},{"n":"Lannilis","c":"France","y":48.5697,"x":-4.5194},{"n":"Gaurama","c":"Brazil","y":-27.5839,"x":-52.0939},{"n":"Los Yebenes","c":"Spain","y":39.5667,"x":-3.8833},{"n":"Ybbs an der Donau","c":"Austria","y":48.1667,"x":15.0667},{"n":"Simiane-Collongue","c":"France","y":43.4311,"x":5.4325},{"n":"Loudon","c":"United States","y":35.7413,"x":-84.3704},{"n":"Slaton","c":"United States","y":33.4421,"x":-101.6476},{"n":"Buti","c":"Italy","y":43.7297,"x":10.5867},{"n":"Frei Gaspar","c":"Brazil","y":-18.0658,"x":-41.4289},{"n":"Mouroux","c":"France","y":48.8225,"x":3.0381},{"n":"Flines-les-Raches","c":"France","y":50.4267,"x":3.1831},{"n":"Chamberlayne","c":"United States","y":37.628,"x":-77.4288},{"n":"Irymple","c":"Australia","y":-34.2333,"x":142.1667},{"n":"Uttenreuth","c":"Germany","y":49.6,"x":11.0667},{"n":"Aragominas","c":"Brazil","y":-7.1619,"x":-48.5278},{"n":"Santa Luz","c":"Brazil","y":-8.9539,"x":-44.1289},{"n":"Weischlitz","c":"Germany","y":50.4472,"x":12.0597},{"n":"Montezuma","c":"United States","y":32.2997,"x":-84.0246},{"n":"Dulliken","c":"Switzerland","y":47.3525,"x":7.9458},{"n":"Vargarda","c":"Sweden","y":58.0341,"x":12.8083},{"n":"Biesenthal","c":"Germany","y":52.7667,"x":13.6331},{"n":"Sollies-Toucas","c":"France","y":43.2056,"x":6.025},{"n":"Port-la-Nouvelle","c":"France","y":43.0206,"x":3.0433},{"n":"Massanetta Springs","c":"United States","y":38.3899,"x":-78.834},{"n":"Lovere","c":"Italy","y":45.8125,"x":10.07},{"n":"Briey","c":"France","y":49.2486,"x":5.9394},{"n":"Bryukhovychi","c":"Ukraine","y":49.9,"x":23.9436},{"n":"Gustine","c":"United States","y":37.2545,"x":-120.9949},{"n":"Wellesbourne Hastings","c":"United Kingdom","y":52.1943,"x":-1.5947},{"n":"Erquinghem-Lys","c":"France","y":50.6756,"x":2.8475},{"n":"Alhama de Granada","c":"Spain","y":37,"x":-3.9833},{"n":"Gattatico","c":"Italy","y":44.8,"x":10.4667},{"n":"Korocha","c":"Russia","y":50.8167,"x":37.2},{"n":"Moeiwadi","c":"Thailand","y":16.3894,"x":104.1572},{"n":"Poltar","c":"Slovakia","y":48.4306,"x":19.7975},{"n":"Mezokovacshaza","c":"Hungary","y":46.4119,"x":20.9108},{"n":"San Juan Numi","c":"Mexico","y":17.4,"x":-97.7},{"n":"Nolanville","c":"United States","y":31.0754,"x":-97.609},{"n":"Tittmoning","c":"Germany","y":48.0631,"x":12.7669},{"n":"Mindyak","c":"Russia","y":54.0331,"x":58.8025},{"n":"Dierdorf","c":"Germany","y":50.5489,"x":7.6594},{"n":"Speichersdorf","c":"Germany","y":49.8667,"x":11.7667},{"n":"Boulay-Moselle","c":"France","y":49.1833,"x":6.4936},{"n":"Pliening","c":"Germany","y":48.2,"x":11.8},{"n":"Rottach-Egern","c":"Germany","y":47.6897,"x":11.7706},{"n":"Poloni","c":"Brazil","y":-20.7853,"x":-49.8236},{"n":"Constantina","c":"Spain","y":37.8667,"x":-5.6167},{"n":"Argamasilla de Calatrava","c":"Spain","y":38.7333,"x":-4.0667},{"n":"Windcrest","c":"United States","y":29.5149,"x":-98.3818},{"n":"Spring Ridge","c":"United States","y":39.4043,"x":-77.3413},{"n":"Phachi","c":"Thailand","y":14.4453,"x":100.7367},{"n":"Paternion","c":"Austria","y":46.7122,"x":13.6378},{"n":"Otranto","c":"Italy","y":40.15,"x":18.4833},{"n":"Brookville","c":"United States","y":39.8393,"x":-84.4176},{"n":"Abtenau","c":"Austria","y":47.5333,"x":13.35},{"n":"Marlow Heights","c":"United States","y":38.8237,"x":-76.9485},{"n":"Ighil","c":"Morocco","y":31.4167,"x":-7.65},{"n":"Wormhout","c":"France","y":50.8828,"x":2.4678},{"n":"Hagenbach","c":"Germany","y":49.0204,"x":8.247},{"n":"Al Mulayhah al Gharbiyah","c":"Syria","y":32.7515,"x":36.3447},{"n":"Campagnola Emilia","c":"Italy","y":44.8361,"x":10.7547},{"n":"Busalla","c":"Italy","y":44.571,"x":8.9453},{"n":"Turpin Hills","c":"United States","y":39.1063,"x":-84.3703},{"n":"Wirges","c":"Germany","y":50.4742,"x":7.7953},{"n":"Castelverde","c":"Italy","y":45.1875,"x":9.9969},{"n":"Humboldt","c":"Canada","y":52.2019,"x":-105.1231},{"n":"Camporosso","c":"Italy","y":43.8151,"x":7.6284},{"n":"Mereni","c":"Moldova","y":46.9633,"x":29.055},{"n":"Ernee","c":"France","y":48.2969,"x":-0.9328},{"n":"Mikomeseng","c":"Equatorial Guinea","y":2.1333,"x":10.6167},{"n":"Le Puy-Sainte-Reparade","c":"France","y":43.6633,"x":5.4372},{"n":"Tahitofalu","c":"Hungary","y":47.7522,"x":19.0781},{"n":"Azatan","c":"Armenia","y":40.7175,"x":43.8258},{"n":"Amersid","c":"Morocco","y":32.75,"x":-4.4667},{"n":"Vilppula","c":"Finland","y":62.0222,"x":24.5097},{"n":"Martlesham","c":"United Kingdom","y":52.0733,"x":1.2818},{"n":"Hutchins","c":"United States","y":32.6421,"x":-96.7093},{"n":"Furstenberg","c":"Germany","y":53.1853,"x":13.1456},{"n":"Cortina d'Ampezzo","c":"Italy","y":46.5381,"x":12.1372},{"n":"Vilanova de la Roca","c":"Spain","y":41.5542,"x":2.2886},{"n":"Margate City","c":"United States","y":39.3307,"x":-74.5071},{"n":"Posen","c":"United States","y":41.6291,"x":-87.6858},{"n":"Delvine","c":"Albania","y":39.9494,"x":20.0958},{"n":"Dowagiac","c":"United States","y":41.9834,"x":-86.1126},{"n":"Dompierre-sur-Mer","c":"France","y":46.1878,"x":-1.065},{"n":"La Chevroliere","c":"France","y":47.0908,"x":-1.6119},{"n":"`Assal al Ward","c":"Syria","y":33.8658,"x":36.4133},{"n":"Nieuwe Pekela","c":"Netherlands","y":53.0786,"x":6.9642},{"n":"Chlumec nad Cidlinou","c":"Czechia","y":50.1545,"x":15.4603},{"n":"Las Flores","c":"United States","y":33.5838,"x":-117.6235},{"n":"Birnbach","c":"Germany","y":48.45,"x":13.0833},{"n":"Vereide","c":"Norway","y":61.7773,"x":6.2156},{"n":"Grebenstein","c":"Germany","y":51.45,"x":9.4167},{"n":"Franklin Center","c":"United States","y":40.5321,"x":-74.5415},{"n":"Angera","c":"Italy","y":45.7667,"x":8.5833},{"n":"Sobralia","c":"Brazil","y":-19.235,"x":-42.0978},{"n":"Saint-Denis-de-Pile","c":"France","y":44.9917,"x":-0.2061},{"n":"Rosendale","c":"United States","y":41.8473,"x":-74.0786},{"n":"Algaida","c":"Spain","y":39.5592,"x":2.8947},{"n":"Viarmes","c":"France","y":49.1278,"x":2.3703},{"n":"Helsa","c":"Germany","y":51.2268,"x":9.6717},{"n":"Dawran ad Daydah","c":"Yemen","y":14.7608,"x":44.1904},{"n":"Weidenberg","c":"Germany","y":49.9422,"x":11.7203},{"n":"Cilavegna","c":"Italy","y":45.3167,"x":8.75},{"n":"La Chapelle-Basse-Mer","c":"France","y":47.2717,"x":-1.3381},{"n":"Paulsboro","c":"United States","y":39.84,"x":-75.2397},{"n":"Alandroal","c":"Portugal","y":38.7,"x":-7.4},{"n":"Bohain-en-Vermandois","c":"France","y":49.9864,"x":3.4547},{"n":"Martonvasar","c":"Hungary","y":47.314,"x":18.7885},{"n":"New Martinsville","c":"United States","y":39.6636,"x":-80.8569},{"n":"Breese","c":"United States","y":38.6138,"x":-89.523},{"n":"Verkhovyna","c":"Ukraine","y":48.1517,"x":24.8136},{"n":"Red Cliffs","c":"Australia","y":-34.3075,"x":142.1881},{"n":"Mount Arlington","c":"United States","y":40.919,"x":-74.639},{"n":"Neubulach","c":"Germany","y":48.6611,"x":8.6967},{"n":"Botley","c":"United Kingdom","y":50.9144,"x":-1.27},{"n":"Old Fig Garden","c":"United States","y":36.7989,"x":-119.8051},{"n":"Pontiac","c":"Canada","y":45.5833,"x":-76.1333},{"n":"Silver Lakes","c":"United States","y":34.7519,"x":-117.3431},{"n":"Arnage","c":"France","y":47.9261,"x":0.1878},{"n":"Gracho Cardoso","c":"Brazil","y":-10.2269,"x":-37.1978},{"n":"Tacherting","c":"Germany","y":48.0833,"x":12.5667},{"n":"Sluknov","c":"Czechia","y":51.0038,"x":14.4527},{"n":"Calvi","c":"France","y":42.5678,"x":8.7567},{"n":"Cumnor","c":"United Kingdom","y":51.735,"x":-1.332},{"n":"Harris Hill","c":"United States","y":42.973,"x":-78.6793},{"n":"Carterville","c":"United States","y":37.763,"x":-89.0841},{"n":"Orchard Homes","c":"United States","y":46.8559,"x":-114.0778},{"n":"Celra","c":"Spain","y":42.0247,"x":2.8789},{"n":"Buochs","c":"Switzerland","y":46.9746,"x":8.4207},{"n":"Haimhausen","c":"Germany","y":48.3167,"x":11.5667},{"n":"Kartal","c":"Hungary","y":47.6675,"x":19.5283},{"n":"Saint-Georges-de-Didonne","c":"France","y":45.6053,"x":-0.9986},{"n":"Esquivias","c":"Spain","y":40.1,"x":-3.7667},{"n":"Yakoruda","c":"Bulgaria","y":42.0183,"x":23.6697},{"n":"La Selva","c":"Spain","y":41.2155,"x":1.1373},{"n":"Littlefield","c":"United States","y":33.9191,"x":-102.3349},{"n":"Paterna de Rivera","c":"Spain","y":36.5167,"x":-5.8667},{"n":"Sidi Harazem","c":"Morocco","y":34.0278,"x":-4.8833},{"n":"Willow Park","c":"United States","y":32.7548,"x":-97.6499},{"n":"Dello","c":"Italy","y":45.4194,"x":10.075},{"n":"Hartwell","c":"United States","y":34.3496,"x":-82.9289},{"n":"Villa del Conte","c":"Italy","y":45.5833,"x":11.8667},{"n":"Saint-Pierre-d'Irube","c":"France","y":43.4764,"x":-1.4589},{"n":"Shintoku","c":"Japan","y":43.0797,"x":142.8389},{"n":"Hambergen","c":"Germany","y":53.3167,"x":8.8167},{"n":"Woodcliff Lake","c":"United States","y":41.0253,"x":-74.0603},{"n":"Rijsbergen","c":"Netherlands","y":51.5167,"x":4.7},{"n":"Cave Creek","c":"United States","y":33.8513,"x":-111.9801},{"n":"Seon","c":"Switzerland","y":47.3458,"x":8.1597},{"n":"Wusterhausen","c":"Germany","y":52.8912,"x":12.4602},{"n":"San Secondo Parmense","c":"Italy","y":44.9167,"x":10.2333},{"n":"Roseland","c":"United States","y":40.8208,"x":-74.3085},{"n":"Glina","c":"Romania","y":44.3833,"x":26.25},{"n":"Wallers","c":"France","y":50.3753,"x":3.3919},{"n":"Aroazes","c":"Brazil","y":-6.1189,"x":-41.7928},{"n":"Ohira","c":"Japan","y":38.4675,"x":140.8803},{"n":"Langquaid","c":"Germany","y":48.8167,"x":12.05},{"n":"Brescello","c":"Italy","y":44.9,"x":10.5167},{"n":"Gossolengo","c":"Italy","y":45,"x":9.6167},{"n":"Sauvian","c":"France","y":43.2919,"x":3.2606},{"n":"Grotte","c":"Italy","y":37.4058,"x":13.7011},{"n":"Saint-Cannat","c":"France","y":43.6214,"x":5.2981},{"n":"Yeles","c":"Spain","y":40.1167,"x":-3.8},{"n":"Jaszfenyszaru","c":"Hungary","y":47.5667,"x":19.7167},{"n":"Filyro","c":"Greece","y":40.6911,"x":23.0042},{"n":"Moosic","c":"United States","y":41.3584,"x":-75.7027},{"n":"Tancoco","c":"Mexico","y":21.2861,"x":-97.7906},{"n":"Guines","c":"France","y":50.8678,"x":1.8736},{"n":"Potcoava","c":"Romania","y":44.491,"x":24.6083},{"n":"Melicucco","c":"Italy","y":38.4333,"x":16.05},{"n":"Les Avenieres","c":"France","y":45.6358,"x":5.5633},{"n":"Alfacar","c":"Spain","y":37.2333,"x":-3.5667},{"n":"Fontevivo","c":"Italy","y":44.8565,"x":10.1762},{"n":"Hellertown","c":"United States","y":40.5811,"x":-75.3378},{"n":"South Hooksett","c":"United States","y":43.0337,"x":-71.4256},{"n":"Cancello","c":"Italy","y":41.0734,"x":14.0254},{"n":"Aragatsavan","c":"Armenia","y":40.3331,"x":43.6581},{"n":"Guagnano","c":"Italy","y":40.4,"x":17.95},{"n":"Berne","c":"United States","y":40.6572,"x":-84.9555},{"n":"West Clarkston-Highland","c":"United States","y":46.4022,"x":-117.0628},{"n":"Houlton","c":"United States","y":46.1403,"x":-67.8429},{"n":"Bni Hadifa","c":"Morocco","y":35.0228,"x":-4.1408},{"n":"Chagny","c":"France","y":46.9106,"x":4.7533},{"n":"Orjiva","c":"Spain","y":36.9,"x":-3.4167},{"n":"St. Paul","c":"Canada","y":53.9928,"x":-111.2972},{"n":"Chernihivka","c":"Ukraine","y":47.1942,"x":36.2023},{"n":"Arkhangelskoye","c":"Russia","y":54.4039,"x":56.7797},{"n":"Palmanova","c":"Italy","y":45.9,"x":13.3167},{"n":"Fenouillet","c":"France","y":43.6797,"x":1.3939},{"n":"Dasing","c":"Germany","y":48.3667,"x":11.05},{"n":"Tuglie","c":"Italy","y":40.0735,"x":18.0987},{"n":"Eschau","c":"France","y":48.4881,"x":7.7158},{"n":"Poshekhonye","c":"Russia","y":58.5,"x":39.1167},{"n":"Baar-Ebenhausen","c":"Germany","y":48.6667,"x":11.4333},{"n":"Thalheim bei Wels","c":"Austria","y":48.1514,"x":14.0383},{"n":"Sibbesse","c":"Germany","y":52.05,"x":9.9},{"n":"Tatsugo","c":"Japan","y":28.4131,"x":129.5894},{"n":"Eldorado at Santa Fe","c":"United States","y":35.5273,"x":-105.934},{"n":"Firmino Alves","c":"Brazil","y":-14.985,"x":-39.9239},{"n":"Vayk","c":"Armenia","y":39.6833,"x":45.4667},{"n":"Villanova d'Asti","c":"Italy","y":44.9428,"x":7.9383},{"n":"Schwarzheide","c":"Germany","y":51.4831,"x":13.8333},{"n":"Ferriere-la-Grande","c":"France","y":50.255,"x":3.9928},{"n":"Kremasti","c":"Greece","y":36.4105,"x":28.1191},{"n":"Kameno","c":"Bulgaria","y":42.5667,"x":27.3},{"n":"Ouderkerk aan den IJssel","c":"Netherlands","y":51.9322,"x":4.6361},{"n":"Senhora de Oliveira","c":"Brazil","y":-20.7939,"x":-43.3439},{"n":"Mattydale","c":"United States","y":43.0992,"x":-76.1388},{"n":"Sertaneja","c":"Brazil","y":-23.0369,"x":-50.8378},{"n":"Itaverava","c":"Brazil","y":-20.6778,"x":-43.61},{"n":"Fuzesgyarmat","c":"Hungary","y":47.1058,"x":21.2119},{"n":"Szecseny","c":"Hungary","y":48.0808,"x":19.5194},{"n":"Harvest","c":"United States","y":34.8558,"x":-86.7521},{"n":"Audruicq","c":"France","y":50.8792,"x":2.0806},{"n":"Balerno","c":"United Kingdom","y":55.8852,"x":-3.3375},{"n":"Aylsham","c":"United Kingdom","y":52.79,"x":1.256},{"n":"Non Sila","c":"Thailand","y":15.9617,"x":102.6911},{"n":"Chatuzange-le-Goubet","c":"France","y":45.0067,"x":5.0908},{"n":"Phayuha Khiri","c":"Thailand","y":15.4557,"x":100.1351},{"n":"Brookshire","c":"United States","y":29.7824,"x":-95.9515},{"n":"Bright","c":"United States","y":39.2254,"x":-84.8613},{"n":"Gray","c":"France","y":47.4442,"x":5.5914},{"n":"Chauchina","c":"Spain","y":37.2,"x":-3.7667},{"n":"Sausheim","c":"France","y":47.7867,"x":7.3731},{"n":"Arce","c":"Italy","y":41.5833,"x":13.5833},{"n":"Montrond-les-Bains","c":"France","y":45.6436,"x":4.2306},{"n":"Volo","c":"United States","y":42.3298,"x":-88.1599},{"n":"Ramblewood","c":"United States","y":39.9322,"x":-74.9527},{"n":"Plouay","c":"France","y":47.9147,"x":-3.3353},{"n":"Arroyo de la Luz","c":"Spain","y":39.484,"x":-6.5846},{"n":"Serra de Sao Bento","c":"Brazil","y":-6.4169,"x":-35.7039},{"n":"Kippenheim","c":"Germany","y":48.2947,"x":7.8214},{"n":"Riolo Terme","c":"Italy","y":44.2833,"x":11.7333},{"n":"Wittichenau","c":"Germany","y":51.385,"x":14.244},{"n":"Leopoldsdorf","c":"Austria","y":48.1167,"x":16.4},{"n":"Lake Mohegan","c":"United States","y":41.3165,"x":-73.8475},{"n":"Orleans","c":"United States","y":41.7665,"x":-69.9675},{"n":"Jilemnice","c":"Czechia","y":50.6089,"x":15.5066},{"n":"Rocca di Neto","c":"Italy","y":39.1883,"x":17.0042},{"n":"Fischamend","c":"Austria","y":48.1156,"x":16.6128},{"n":"Cambria","c":"United States","y":40.4931,"x":-78.7448},{"n":"Beardstown","c":"United States","y":39.9994,"x":-90.4178},{"n":"Manasquan","c":"United States","y":40.1186,"x":-74.045},{"n":"Sala Baganza","c":"Italy","y":44.7167,"x":10.2333},{"n":"Nagyhalasz","c":"Hungary","y":48.1333,"x":21.7583},{"n":"Liberato Salzano","c":"Brazil","y":-27.6,"x":-53.0728},{"n":"Veselynove","c":"Ukraine","y":47.3583,"x":31.2397},{"n":"San Paolo di Civitate","c":"Italy","y":41.7333,"x":15.2667},{"n":"Walenstadt","c":"Switzerland","y":47.1234,"x":9.315},{"n":"Aschau im Chiemgau","c":"Germany","y":47.7769,"x":12.323},{"n":"Marianna","c":"United States","y":30.7943,"x":-85.226},{"n":"Trest'","c":"Czechia","y":49.291,"x":15.4821},{"n":"Moravsky Krumlov","c":"Czechia","y":49.049,"x":16.3117},{"n":"Schliengen","c":"Germany","y":47.7556,"x":7.5772},{"n":"Markfield","c":"United Kingdom","y":52.6878,"x":-1.2775},{"n":"Pont-Eveque","c":"France","y":45.5303,"x":4.9111},{"n":"Britania","c":"Brazil","y":-15.2408,"x":-51.1608},{"n":"Semeac","c":"France","y":43.2281,"x":0.1067},{"n":"West Bountiful","c":"United States","y":40.8982,"x":-111.9082},{"n":"Fellsmere","c":"United States","y":27.7241,"x":-80.5975},{"n":"Mondorf-les-Bains","c":"Luxembourg","y":49.5069,"x":6.2806},{"n":"Wernberg","c":"Austria","y":46.6231,"x":13.9394},{"n":"Oscadnica","c":"Slovakia","y":49.4375,"x":18.8857},{"n":"Gorebridge","c":"United Kingdom","y":55.8436,"x":-3.05},{"n":"Castuera","c":"Spain","y":38.7231,"x":-5.5444},{"n":"Svaty Jur","c":"Slovakia","y":48.2519,"x":17.2156},{"n":"Hrebinky","c":"Ukraine","y":49.9564,"x":30.1714},{"n":"Selkirk","c":"United Kingdom","y":55.55,"x":-2.84},{"n":"Tomislavgrad","c":"Bosnia And Herzegovina","y":43.7135,"x":17.2266},{"n":"Ban Bang Tabun","c":"Thailand","y":13.2638,"x":99.9439},{"n":"Schrozberg","c":"Germany","y":49.3444,"x":9.9806},{"n":"Mount Zion","c":"United States","y":39.7794,"x":-88.8834},{"n":"Casaleone","c":"Italy","y":45.1667,"x":11.2},{"n":"Fernando Prestes","c":"Brazil","y":-21.2644,"x":-48.6853},{"n":"Turi","c":"Estonia","y":58.8094,"x":25.4292},{"n":"China","c":"Japan","y":27.3336,"x":128.5736},{"n":"Riachos","c":"Portugal","y":39.4453,"x":-8.5142},{"n":"Dosrius","c":"Spain","y":41.5942,"x":2.4072},{"n":"Debesy","c":"Russia","y":57.65,"x":53.8167},{"n":"Novaya Mayna","c":"Russia","y":54.1472,"x":49.7719},{"n":"Dobrovelychkivka","c":"Ukraine","y":48.35,"x":31.1667},{"n":"Tupper Lake","c":"United States","y":44.2431,"x":-74.4747},{"n":"Sveio","c":"Norway","y":59.5736,"x":5.3633},{"n":"Belogradchik","c":"Bulgaria","y":43.6269,"x":22.6833},{"n":"Severiano Melo","c":"Brazil","y":-5.7769,"x":-37.9578},{"n":"San Giorgio Piacentino","c":"Italy","y":44.95,"x":9.7333},{"n":"Vadso","c":"Norway","y":70.0733,"x":29.7497},{"n":"Lyubeshiv","c":"Ukraine","y":51.7631,"x":25.4992},{"n":"Mouy","c":"France","y":49.3158,"x":2.3194},{"n":"Rudna","c":"Czechia","y":50.0351,"x":14.2344},{"n":"Highgrove","c":"United States","y":34.0106,"x":-117.3098},{"n":"The Village of Indian Hill","c":"United States","y":39.1916,"x":-84.3344},{"n":"Solidao","c":"Brazil","y":-7.6,"x":-37.6519},{"n":"Sudzha","c":"Russia","y":51.1907,"x":35.2708},{"n":"Wangen bei Olten","c":"Switzerland","y":47.3442,"x":7.8694},{"n":"Turner","c":"United States","y":44.2671,"x":-70.2429},{"n":"Markt Erlbach","c":"Germany","y":49.4833,"x":10.65},{"n":"Conley","c":"United States","y":33.6398,"x":-84.3376},{"n":"Little Silver","c":"United States","y":40.3357,"x":-74.0346},{"n":"Jahnsdorf","c":"Germany","y":50.7456,"x":12.8544},{"n":"Slobozia Mare","c":"Moldova","y":45.5667,"x":28.1667},{"n":"Edna","c":"United States","y":28.9757,"x":-96.6483},{"n":"Peoria Heights","c":"United States","y":40.7466,"x":-89.57},{"n":"Dunboyne","c":"Ireland","y":53.4199,"x":-6.4751},{"n":"Llerena","c":"Spain","y":38.2333,"x":-6.0167},{"n":"Cestica","c":"Croatia","y":46.37,"x":16.12},{"n":"Montehermoso","c":"Spain","y":40.0833,"x":-6.3333},{"n":"Hilton","c":"United States","y":43.29,"x":-77.7925},{"n":"Sewickley","c":"United States","y":40.2522,"x":-79.731},{"n":"Eschede","c":"Germany","y":52.7333,"x":10.25},{"n":"Dyshne-Vedeno","c":"Russia","y":42.9555,"x":46.1248},{"n":"Meymeh","c":"Iran","y":33.4461,"x":51.1681},{"n":"Granite Shoals","c":"United States","y":30.5897,"x":-98.3715},{"n":"Palmview","c":"United States","y":26.2303,"x":-98.3791},{"n":"Fountainhead-Orchard Hills","c":"United States","y":39.6878,"x":-77.7173},{"n":"La Guancha","c":"Spain","y":28.3738,"x":-16.6516},{"n":"Stavern","c":"Norway","y":59,"x":10.0333},{"n":"Calumbi","c":"Brazil","y":-7.9408,"x":-38.15},{"n":"Vetovo","c":"Bulgaria","y":43.7,"x":26.2667},{"n":"Domsod","c":"Hungary","y":47.0833,"x":19},{"n":"Gas City","c":"United States","y":40.4889,"x":-85.5946},{"n":"Brownfields","c":"United States","y":30.5467,"x":-91.1225},{"n":"San Hilario Sacalm","c":"Spain","y":41.8786,"x":2.5079},{"n":"Trivero","c":"Italy","y":45.6667,"x":8.1667},{"n":"Attalla","c":"United States","y":34.0049,"x":-86.104},{"n":"Belding","c":"United States","y":43.0968,"x":-85.2331},{"n":"Bannockburn","c":"Australia","y":-38.05,"x":144.1667},{"n":"Le Boulou","c":"France","y":42.5239,"x":2.83},{"n":"Crafton","c":"United States","y":40.4333,"x":-80.0712},{"n":"Harris","c":"United States","y":40.7633,"x":-77.7674},{"n":"Washingtonville","c":"United States","y":41.4296,"x":-74.1578},{"n":"Suolahti","c":"Finland","y":62.5639,"x":25.8528},{"n":"Brush","c":"United States","y":40.2598,"x":-103.6323},{"n":"Chiaravalle Centrale","c":"Italy","y":38.6833,"x":16.4},{"n":"Jaramataia","c":"Brazil","y":-9.6589,"x":-37.0019},{"n":"Patrocinio do Muriae","c":"Brazil","y":-21.1528,"x":-42.215},{"n":"Ajdir","c":"Morocco","y":35.193,"x":-3.912},{"n":"Huelma","c":"Spain","y":37.65,"x":-3.45},{"n":"Wartenberg","c":"Germany","y":48.405,"x":11.9889},{"n":"Tamsweg","c":"Austria","y":47.1167,"x":13.8},{"n":"Dobsina","c":"Slovakia","y":48.8206,"x":20.3675},{"n":"Piacatu","c":"Brazil","y":-21.5922,"x":-50.5992},{"n":"Ait el Farsi","c":"Morocco","y":31.35,"x":-5.3},{"n":"Oak Point","c":"United States","y":33.1803,"x":-96.9911},{"n":"West Modesto","c":"United States","y":37.618,"x":-121.0343},{"n":"Kampong Rimba","c":"Brunei","y":4.9271,"x":114.9059},{"n":"Torreblanca","c":"Spain","y":40.2206,"x":0.1953},{"n":"Dickson City","c":"United States","y":41.4684,"x":-75.6358},{"n":"Medina de Pomar","c":"Spain","y":42.9333,"x":-3.4833},{"n":"Romont","c":"Switzerland","y":46.7001,"x":6.9181},{"n":"Coroados","c":"Brazil","y":-21.3519,"x":-50.2814},{"n":"El Aargub","c":"Morocco","y":23.6111,"x":-15.8583},{"n":"Vergeze","c":"France","y":43.7433,"x":4.22},{"n":"Oulad Zarrad","c":"Morocco","y":31.875,"x":-7.4217},{"n":"Arafo","c":"Spain","y":28.3404,"x":-16.4173},{"n":"Viana do Alentejo","c":"Portugal","y":38.3342,"x":-8.0014},{"n":"Arienzo","c":"Italy","y":41.0273,"x":14.4977},{"n":"Grossschirma","c":"Germany","y":50.9664,"x":13.2781},{"n":"Takamori","c":"Japan","y":32.8272,"x":131.1219},{"n":"Valer","c":"Norway","y":59.4725,"x":10.9169},{"n":"Negrepelisse","c":"France","y":44.0753,"x":1.5217},{"n":"Tres Fronteiras","c":"Brazil","y":-20.235,"x":-50.89},{"n":"Saint-Martin-de-Seignanx","c":"France","y":43.5428,"x":-1.3869},{"n":"Elena","c":"Bulgaria","y":42.9298,"x":25.8787},{"n":"Ribadesella","c":"Spain","y":43.4625,"x":-5.0583},{"n":"Hilmar-Irwin","c":"United States","y":37.4045,"x":-120.8504},{"n":"Violet","c":"United States","y":29.8962,"x":-89.892},{"n":"Mendham","c":"United States","y":40.7828,"x":-74.5943},{"n":"Lansdowne","c":"India","y":29.83,"x":78.68},{"n":"Szada","c":"Hungary","y":47.6333,"x":19.3167},{"n":"Bodenwerder","c":"Germany","y":51.9667,"x":9.5167},{"n":"Brunnthal","c":"Germany","y":48.0167,"x":11.6833},{"n":"Davoli","c":"Italy","y":38.65,"x":16.4833},{"n":"Rabastens","c":"France","y":43.8222,"x":1.7253},{"n":"White Rock","c":"United States","y":35.8075,"x":-106.2067},{"n":"Sao Domingos das Dores","c":"Brazil","y":-19.5269,"x":-42.0108},{"n":"Flanders","c":"United States","y":40.8925,"x":-72.6049},{"n":"Fischbachau","c":"Germany","y":47.7167,"x":11.95},{"n":"Schattdorf","c":"Switzerland","y":46.8494,"x":8.6713},{"n":"Tiefenbronn","c":"Germany","y":48.8242,"x":8.8003},{"n":"Bagshot","c":"United Kingdom","y":51.3607,"x":-0.6982},{"n":"Onagawa","c":"Japan","y":38.4456,"x":141.4444},{"n":"Hanstedt","c":"Germany","y":53.2667,"x":10.0167},{"n":"Sansom Park","c":"United States","y":32.8028,"x":-97.4021},{"n":"Nocera Umbra","c":"Italy","y":43.1167,"x":12.7833},{"n":"North Manchester","c":"United States","y":41.0044,"x":-85.775},{"n":"Asbury","c":"United States","y":42.5119,"x":-90.7795},{"n":"Riedering","c":"Germany","y":47.8333,"x":12.2},{"n":"Bascharage","c":"Luxembourg","y":49.5667,"x":5.9167},{"n":"Fort Wright","c":"United States","y":39.0462,"x":-84.5362},{"n":"Marsannay-la-Cote","c":"France","y":47.2706,"x":4.9886},{"n":"Sancraiu de Mures","c":"Romania","y":46.55,"x":24.52},{"n":"Traben-Trarbach","c":"Germany","y":49.9511,"x":7.1167},{"n":"Melk","c":"Austria","y":48.2269,"x":15.3439},{"n":"Rancho Murieta","c":"United States","y":38.5085,"x":-121.0716},{"n":"Niederorschel","c":"Germany","y":51.3694,"x":10.4267},{"n":"Hosszupalyi","c":"Hungary","y":47.4,"x":21.75},{"n":"Tichla","c":"Morocco","y":21.61,"x":-15},{"n":"Bergheim","c":"Austria","y":47.8403,"x":13.0222},{"n":"Pong","c":"Thailand","y":19.1494,"x":100.2753},{"n":"Petrolia","c":"Canada","y":42.8833,"x":-82.1417},{"n":"Alkhazurovo","c":"Russia","y":43.0628,"x":45.6511},{"n":"Ebbs","c":"Austria","y":47.63,"x":12.2147},{"n":"Elbridge","c":"United States","y":43.0535,"x":-76.4389},{"n":"West Yarmouth","c":"United States","y":41.6496,"x":-70.2487},{"n":"Ensues-la-Redonne","c":"France","y":43.3558,"x":5.2042},{"n":"Aldeamayor de San Martin","c":"Spain","y":41.5167,"x":-4.6333},{"n":"Eglisau","c":"Switzerland","y":47.5733,"x":8.5261},{"n":"Lomnice nad Popelkou","c":"Czechia","y":50.5307,"x":15.3735},{"n":"Alaro","c":"Spain","y":39.7067,"x":2.7908},{"n":"Coublevie","c":"France","y":45.3556,"x":5.6167},{"n":"Sao Nicolau","c":"Brazil","y":-28.1828,"x":-55.2669},{"n":"Decazeville","c":"France","y":44.5592,"x":2.2556},{"n":"Sinton","c":"United States","y":28.0392,"x":-97.5154},{"n":"New Gloucester","c":"United States","y":43.9641,"x":-70.2959},{"n":"Pyrford","c":"United Kingdom","y":51.3146,"x":-0.5064},{"n":"Geltendorf","c":"Germany","y":48.1222,"x":11.0278},{"n":"Kapustin Yar","c":"Russia","y":48.5672,"x":45.7778},{"n":"East Rockhill","c":"United States","y":40.4082,"x":-75.2831},{"n":"Bannalec","c":"France","y":47.9325,"x":-3.6969},{"n":"Veredinha","c":"Brazil","y":-17.3989,"x":-42.7358},{"n":"Fair Haven","c":"United States","y":40.3619,"x":-74.0392},{"n":"Fabens","c":"United States","y":31.5136,"x":-106.1521},{"n":"Erdmannhausen","c":"Germany","y":48.9422,"x":9.2956},{"n":"Wernberg-Koblitz","c":"Germany","y":49.5333,"x":12.15},{"n":"Pavia di Udine","c":"Italy","y":46,"x":13.3},{"n":"Lee Acres","c":"United States","y":36.7103,"x":-108.0725},{"n":"Moulins-les-Metz","c":"France","y":49.1064,"x":6.1089},{"n":"Zsambek","c":"Hungary","y":47.5483,"x":18.7186},{"n":"Dagmersellen","c":"Switzerland","y":47.2131,"x":7.9894},{"n":"Oleiros","c":"Portugal","y":39.9167,"x":-7.9167},{"n":"Pomarance","c":"Italy","y":43.2997,"x":10.8736},{"n":"Naples Park","c":"United States","y":26.2633,"x":-81.8094},{"n":"Luzerna","c":"Brazil","y":-27.1328,"x":-51.4669},{"n":"Uncia","c":"Bolivia","y":-18.4682,"x":-66.5648},{"n":"Blairstown","c":"United States","y":40.9813,"x":-74.9984},{"n":"Roquemaure","c":"France","y":44.0517,"x":4.7783},{"n":"Zubri","c":"Czechia","y":49.466,"x":18.0925},{"n":"Botzingen","c":"Germany","y":48.0769,"x":7.7256},{"n":"Wasungen","c":"Germany","y":50.6667,"x":10.3667},{"n":"Diamante","c":"Italy","y":39.6833,"x":15.8167},{"n":"Tat","c":"Hungary","y":47.7407,"x":18.6447},{"n":"Nord-Fron","c":"Norway","y":61.5956,"x":9.7481},{"n":"Celanova","c":"Spain","y":42.1519,"x":-7.9575},{"n":"Ambazac","c":"France","y":45.9578,"x":1.4},{"n":"Crosspointe","c":"United States","y":38.7253,"x":-77.2638},{"n":"Thayngen","c":"Switzerland","y":47.7331,"x":8.6997},{"n":"Sennwald","c":"Switzerland","y":47.2439,"x":9.4768},{"n":"Pato Bragado","c":"Brazil","y":-24.6258,"x":-54.225},{"n":"Volney","c":"United States","y":43.3594,"x":-76.3732},{"n":"Chale","c":"Brazil","y":-20.0439,"x":-41.6878},{"n":"Piding","c":"Germany","y":47.7667,"x":12.9167},{"n":"Gugark","c":"Armenia","y":40.8072,"x":44.5381},{"n":"Longswamp","c":"United States","y":40.4907,"x":-75.6601},{"n":"Ait Ban","c":"Morocco","y":30.07,"x":-9.155},{"n":"Lorinci","c":"Hungary","y":47.7378,"x":19.6786},{"n":"Santa Ernestina","c":"Brazil","y":-21.4628,"x":-48.3908},{"n":"Chitaraque","c":"Colombia","y":6.0283,"x":-73.4469},{"n":"Southwest Middlesex","c":"Canada","y":42.75,"x":-81.7},{"n":"Montpon-Menesterol","c":"France","y":45.0092,"x":0.1592},{"n":"Bol'shaya Kudara","c":"Russia","y":50.2039,"x":107.0492},{"n":"Guaimbe","c":"Brazil","y":-21.91,"x":-49.8967},{"n":"Vitkov","c":"Czechia","y":49.7744,"x":17.7495},{"n":"Oceanport","c":"United States","y":40.316,"x":-74.0205},{"n":"Hjarup","c":"Sweden","y":55.6707,"x":13.141},{"n":"Lammi","c":"Finland","y":61.0792,"x":25.0111},{"n":"South Haven","c":"United States","y":42.4011,"x":-86.2677},{"n":"Paola","c":"United States","y":38.5784,"x":-94.862},{"n":"Rumford","c":"United States","y":44.5347,"x":-70.6154},{"n":"Velence","c":"Hungary","y":47.2418,"x":18.6479},{"n":"Wessling","c":"Germany","y":48.0781,"x":11.2525},{"n":"Cividate al Piano","c":"Italy","y":45.55,"x":9.8167},{"n":"Gergebil","c":"Russia","y":42.505,"x":47.0658},{"n":"Zapata","c":"United States","y":26.9027,"x":-99.2612},{"n":"San Andres Huayapam","c":"Mexico","y":17.1,"x":-96.6667},{"n":"Briec","c":"France","y":48.1017,"x":-4.0017},{"n":"Mezocsat","c":"Hungary","y":47.8233,"x":20.9028},{"n":"Genzano di Lucania","c":"Italy","y":40.85,"x":16.0333},{"n":"Vladimiro-Aleksandrovskoye","c":"Russia","y":42.8903,"x":133.0722},{"n":"Gabicce","c":"Italy","y":43.9668,"x":12.7563},{"n":"Rio Pinar","c":"United States","y":28.5271,"x":-81.2628},{"n":"Tubo","c":"Philippines","y":17.2567,"x":120.7256},{"n":"Passignano sul Trasimeno","c":"Italy","y":43.1833,"x":12.1333},{"n":"La Cadiere-d'Azur","c":"France","y":43.1958,"x":5.7556},{"n":"Hopfgarten im Brixental","c":"Austria","y":47.45,"x":12.1667},{"n":"Grabow","c":"Germany","y":53.2798,"x":11.5531},{"n":"Trevignano Romano","c":"Italy","y":42.15,"x":12.25},{"n":"Ulysses","c":"United States","y":37.5774,"x":-101.3549},{"n":"New Boston","c":"United States","y":42.9774,"x":-71.686},{"n":"Ilava","c":"Slovakia","y":48.9994,"x":18.2361},{"n":"Primorsk","c":"Russia","y":60.3667,"x":28.6167},{"n":"Mengjiazhuang","c":"China","y":38.4252,"x":113.8824},{"n":"Ondres","c":"France","y":43.5608,"x":-1.4494},{"n":"Front of Yonge","c":"Canada","y":44.5333,"x":-75.8667},{"n":"Montepaone","c":"Italy","y":38.7167,"x":16.5},{"n":"Kunovice","c":"Czechia","y":49.045,"x":17.4701},{"n":"Santa Rita do Itueto","c":"Brazil","y":-19.36,"x":-41.38},{"n":"Sillingy","c":"France","y":45.9458,"x":6.0353},{"n":"Genlis","c":"France","y":47.2408,"x":5.2231},{"n":"Malta","c":"Brazil","y":-6.9039,"x":-37.5219},{"n":"Claverack","c":"United States","y":42.2235,"x":-73.6873},{"n":"Dripping Springs","c":"United States","y":30.1954,"x":-98.094},{"n":"Vegreville","c":"Canada","y":53.4928,"x":-112.0522},{"n":"Saint-Laurent-de-Mure","c":"France","y":45.6856,"x":5.0447},{"n":"Wareham","c":"United Kingdom","y":50.686,"x":-2.1099},{"n":"Douglass Hills","c":"United States","y":38.2366,"x":-85.5499},{"n":"Bystrice","c":"Czechia","y":49.6365,"x":18.7204},{"n":"Lamspringe","c":"Germany","y":51.9567,"x":10.0081},{"n":"Spring Grove","c":"United States","y":42.4543,"x":-88.2402},{"n":"Woods Creek","c":"United States","y":47.8821,"x":-121.8982},{"n":"Casalserugo","c":"Italy","y":45.3167,"x":11.9167},{"n":"Gan","c":"France","y":43.2286,"x":-0.3875},{"n":"Reichshoffen","c":"France","y":48.9344,"x":7.6661},{"n":"Hirschau","c":"Germany","y":49.5445,"x":11.9464},{"n":"Prado del Rey","c":"Spain","y":36.7833,"x":-5.5667},{"n":"Laie","c":"United States","y":21.6443,"x":-157.928},{"n":"Barguzin","c":"Russia","y":53.6172,"x":109.6347},{"n":"Cedro de Sao Joao","c":"Brazil","y":-10.2519,"x":-36.8839},{"n":"Kembs","c":"France","y":47.6889,"x":7.5036},{"n":"Belle Fourche","c":"United States","y":44.6642,"x":-103.8564},{"n":"Chickasaw","c":"United States","y":30.7714,"x":-88.0793},{"n":"Nazareth","c":"United States","y":40.74,"x":-75.3132},{"n":"Allendorf","c":"Germany","y":51.0333,"x":8.6833},{"n":"Pouzauges","c":"France","y":46.7822,"x":-0.8372},{"n":"Barabash","c":"Russia","y":43.1917,"x":131.4889},{"n":"Sontheim an der Brenz","c":"Germany","y":48.5523,"x":10.291},{"n":"Mugnano del Cardinale","c":"Italy","y":40.9333,"x":14.6333},{"n":"Turiys'k","c":"Ukraine","y":51.0833,"x":24.5333},{"n":"Elmwood","c":"United States","y":29.9555,"x":-90.188},{"n":"Munderkingen","c":"Germany","y":48.2353,"x":9.6439},{"n":"Ylistaro","c":"Finland","y":62.9403,"x":22.5167},{"n":"Sainte-Brigitte-de-Laval","c":"Canada","y":47,"x":-71.2},{"n":"Saint-Pierre-les-Nemours","c":"France","y":48.2653,"x":2.6797},{"n":"Konolfingen Dorf","c":"Switzerland","y":46.8833,"x":7.6167},{"n":"Grossschonau","c":"Germany","y":50.8964,"x":14.6622},{"n":"Divilaca","c":"Philippines","y":17.3333,"x":122.3},{"n":"Mezzocorona","c":"Italy","y":46.2167,"x":11.1167},{"n":"Shatrovo","c":"Russia","y":56.5197,"x":64.6319},{"n":"Penamacor","c":"Portugal","y":40.1667,"x":-7.1667},{"n":"Dniprovske","c":"Ukraine","y":48.5953,"x":34.4207},{"n":"Babak","c":"Azerbaijan","y":39.1111,"x":45.4114},{"n":"La Cenia","c":"Spain","y":40.6336,"x":0.2853},{"n":"Vercheres","c":"Canada","y":45.7833,"x":-73.35},{"n":"Apice","c":"Italy","y":41.1167,"x":14.9333},{"n":"Oleksandriiske","c":"Ukraine","y":48.6019,"x":32.9889},{"n":"Bobov Dol","c":"Bulgaria","y":42.3638,"x":22.9979},{"n":"Marchwood","c":"United Kingdom","y":50.89,"x":-1.454},{"n":"Westenschouwen","c":"Netherlands","y":51.705,"x":3.7403},{"n":"The Pas","c":"Canada","y":53.825,"x":-101.2533},{"n":"Duffield","c":"United Kingdom","y":52.989,"x":-1.489},{"n":"Wrightsville","c":"United States","y":32.7265,"x":-82.7197},{"n":"Linglestown","c":"United States","y":40.3445,"x":-76.795},{"n":"Sigean","c":"France","y":43.0281,"x":2.9778},{"n":"Hamanaka-sakuraminami","c":"Japan","y":43.0772,"x":145.1294},{"n":"Dalen","c":"Netherlands","y":52.7,"x":6.75},{"n":"Saint-Cesaire","c":"Canada","y":45.4167,"x":-73},{"n":"Nuits-Saint-Georges","c":"France","y":47.1375,"x":4.9503},{"n":"Les Essarts","c":"France","y":46.7736,"x":-1.2281},{"n":"Satteldorf","c":"Germany","y":49.1681,"x":10.0808},{"n":"Rottendorf","c":"Germany","y":49.7906,"x":10.0267},{"n":"Ruhla","c":"Germany","y":50.8919,"x":10.3667},{"n":"Leutershausen","c":"Germany","y":49.2919,"x":10.4162},{"n":"Igersheim","c":"Germany","y":49.4931,"x":9.8167},{"n":"Nakkila","c":"Finland","y":61.3653,"x":22.0042},{"n":"Cocalinho","c":"Brazil","y":-14.3969,"x":-50.9958},{"n":"Glenbrook","c":"Australia","y":-33.765,"x":150.6267},{"n":"San Tammaro","c":"Italy","y":41.0759,"x":14.231},{"n":"Bacurituba","c":"Brazil","y":-2.7058,"x":-44.7378},{"n":"Virgolandia","c":"Brazil","y":-18.4758,"x":-42.3069},{"n":"Saint-Gervais-les-Bains","c":"France","y":45.8925,"x":6.7136},{"n":"Panicale","c":"Italy","y":43.0333,"x":12.1},{"n":"Marsico Vetere","c":"Italy","y":40.3744,"x":15.8261},{"n":"Prum","c":"Germany","y":50.2081,"x":6.4244},{"n":"Grangetown","c":"United Kingdom","y":54.58,"x":-1.144},{"n":"Topolovgrad","c":"Bulgaria","y":42.0842,"x":26.3375},{"n":"Tafadna","c":"Morocco","y":31.0958,"x":-9.8208},{"n":"Gavrilov Posad","c":"Russia","y":56.5667,"x":40.1167},{"n":"Nunchritz","c":"Germany","y":51.2833,"x":13.4167},{"n":"Borderes-sur-l'Echez","c":"France","y":43.2592,"x":0.0492},{"n":"Alianca do Tocantins","c":"Brazil","y":-11.3058,"x":-48.9358},{"n":"Ebensfeld","c":"Germany","y":50.0667,"x":10.9497},{"n":"Quistello","c":"Italy","y":45.0066,"x":10.9805},{"n":"Hollidaysburg","c":"United States","y":40.4311,"x":-78.393},{"n":"Loughman","c":"United States","y":28.2381,"x":-81.5685},{"n":"Dove Valley","c":"United States","y":39.5741,"x":-104.8289},{"n":"Manzariyeh","c":"Iran","y":31.9458,"x":51.8719},{"n":"Sigayevo","c":"Russia","y":56.42,"x":53.7678},{"n":"Bad Boll","c":"Germany","y":48.6394,"x":9.6156},{"n":"Tellico Village","c":"United States","y":35.6977,"x":-84.2661},{"n":"La Ronge","c":"Canada","y":55.1,"x":-105.3},{"n":"Narjeh","c":"Iran","y":35.9908,"x":49.6247},{"n":"Belin-Beliet","c":"France","y":44.4975,"x":-0.79},{"n":"Kelso","c":"United Kingdom","y":55.5985,"x":-2.4336},{"n":"Casoli","c":"Italy","y":42.1151,"x":14.2906},{"n":"Himmelpforten","c":"Germany","y":53.6167,"x":9.3},{"n":"Arradon","c":"France","y":47.6256,"x":-2.8233},{"n":"Stolpen","c":"Germany","y":51.0489,"x":14.0828},{"n":"Cupra Marittima","c":"Italy","y":43.0249,"x":13.8589},{"n":"Perobal","c":"Brazil","y":-23.8958,"x":-53.41},{"n":"Saint-Martin-d'Uriage","c":"France","y":45.1522,"x":5.8392},{"n":"Sao Jose do Goiabal","c":"Brazil","y":-19.9289,"x":-42.705},{"n":"Zermatt","c":"Switzerland","y":46.0193,"x":7.7461},{"n":"Estherville","c":"United States","y":43.3998,"x":-94.8343},{"n":"Philomath","c":"United States","y":44.5422,"x":-123.3599},{"n":"Tay Valley","c":"Canada","y":44.8667,"x":-76.3833},{"n":"Jonquieres","c":"France","y":44.1153,"x":4.8992},{"n":"Mechra-Hommadi","c":"Morocco","y":34.7233,"x":-2.7918},{"n":"Butgenbach","c":"Belgium","y":50.4262,"x":6.2041},{"n":"Mathis","c":"United States","y":28.0909,"x":-97.817},{"n":"Vadul lui Voda","c":"Moldova","y":47.0917,"x":29.0756},{"n":"Villa Huidobro","c":"Argentina","y":-34.8333,"x":-64.5833},{"n":"Salteras","c":"Spain","y":37.4167,"x":-6.1},{"n":"Dietenhofen","c":"Germany","y":49.4,"x":10.69},{"n":"Hartford City","c":"United States","y":40.4537,"x":-85.3736},{"n":"Santa Marta de Ortigueira","c":"Spain","y":43.6831,"x":-7.85},{"n":"Zeithain","c":"Germany","y":51.3333,"x":13.35},{"n":"Moglia","c":"Italy","y":44.9333,"x":10.9167},{"n":"Sasbach","c":"Germany","y":48.6383,"x":8.0917},{"n":"Barrolandia","c":"Brazil","y":-9.8358,"x":-48.725},{"n":"Montefalco","c":"Italy","y":42.8908,"x":12.6483},{"n":"Myshkin","c":"Russia","y":57.7833,"x":38.45},{"n":"Oberammergau","c":"Germany","y":47.5967,"x":11.0644},{"n":"Eastwood","c":"United States","y":42.3028,"x":-85.5447},{"n":"Bruckberg","c":"Germany","y":48.5333,"x":12},{"n":"Sarcedo","c":"Italy","y":45.7,"x":11.5333},{"n":"La Roque-d'Antheron","c":"France","y":43.7147,"x":5.3108},{"n":"Sannazzaro de' Burgondi","c":"Italy","y":45.1,"x":8.9},{"n":"Subkhankulovo","c":"Russia","y":54.5586,"x":53.8147},{"n":"Miercurea Nirajului","c":"Romania","y":46.53,"x":24.8},{"n":"Gardiner","c":"United States","y":44.191,"x":-69.7921},{"n":"Pranchita","c":"Brazil","y":-26.02,"x":-53.74},{"n":"Puhoi","c":"Moldova","y":46.7858,"x":28.7781},{"n":"Vohl","c":"Germany","y":51.2,"x":8.9333},{"n":"Paoli","c":"United States","y":40.042,"x":-75.4912},{"n":"Schwertberg","c":"Austria","y":48.2717,"x":14.5833},{"n":"Custonaci","c":"Italy","y":38.0788,"x":12.6751},{"n":"Elsbethen","c":"Austria","y":47.7636,"x":13.0817},{"n":"Zipacon","c":"Colombia","y":4.76,"x":-74.3797},{"n":"Povegliano","c":"Italy","y":45.7667,"x":12.2},{"n":"Haag","c":"Austria","y":48.1122,"x":14.5656},{"n":"Jemaat Moul Blad","c":"Morocco","y":33.5881,"x":-6.4264},{"n":"Domburg","c":"Suriname","y":5.7,"x":-55.0833},{"n":"Chubar","c":"Iran","y":38.1803,"x":48.8933},{"n":"Taiuva","c":"Brazil","y":-21.1239,"x":-48.4519},{"n":"Telgate","c":"Italy","y":45.6333,"x":9.85},{"n":"Gareoult","c":"France","y":43.3283,"x":6.0461},{"n":"Nederhorst den Berg","c":"Netherlands","y":52.2567,"x":5.0458},{"n":"San Sebastian del Oeste","c":"Mexico","y":20.8511,"x":-104.819},{"n":"Starke","c":"United States","y":29.9474,"x":-82.1129},{"n":"East Flat Rock","c":"United States","y":35.2802,"x":-82.4171},{"n":"Dandridge","c":"United States","y":36.0285,"x":-83.4308},{"n":"Lambres-les-Douai","c":"France","y":50.3531,"x":3.0678},{"n":"Gadebusch","c":"Germany","y":53.7,"x":11.1167},{"n":"Corydon","c":"United States","y":38.213,"x":-86.1257},{"n":"Chonchi","c":"Chile","y":-42.6238,"x":-73.7725},{"n":"Nueva-Carteya","c":"Spain","y":37.5833,"x":-4.4667},{"n":"Huejucar","c":"Mexico","y":22.3591,"x":-103.2108},{"n":"Aiffres","c":"France","y":46.2864,"x":-0.4172},{"n":"Kolitzheim","c":"Germany","y":49.9167,"x":10.2333},{"n":"Upper Pottsgrove","c":"United States","y":40.2824,"x":-75.6362},{"n":"Peveragno","c":"Italy","y":44.3333,"x":7.6167},{"n":"Poncarale","c":"Italy","y":45.4619,"x":10.1778},{"n":"Couto de Magalhaes","c":"Brazil","y":-8.2839,"x":-49.2469},{"n":"Fulnek","c":"Czechia","y":49.7124,"x":17.9032},{"n":"Straznice","c":"Czechia","y":48.901,"x":17.3168},{"n":"Pontoon Beach","c":"United States","y":38.7208,"x":-90.0609},{"n":"Ban Krang","c":"Thailand","y":14.63,"x":100.1307},{"n":"Porreras","c":"Spain","y":39.5144,"x":3.0237},{"n":"Boretto","c":"Italy","y":44.9,"x":10.55},{"n":"Oye-Plage","c":"France","y":50.9778,"x":2.0442},{"n":"Borgo San Giacomo","c":"Italy","y":45.348,"x":9.9682},{"n":"Rakova","c":"Slovakia","y":49.443,"x":18.7345},{"n":"Ventabren","c":"France","y":43.5389,"x":5.2931},{"n":"Champlain","c":"United States","y":44.9591,"x":-73.4324},{"n":"South Bruce","c":"Canada","y":44.0333,"x":-81.2},{"n":"Wyndmoor","c":"United States","y":40.0856,"x":-75.1941},{"n":"Caiazzo","c":"Italy","y":41.1833,"x":14.3667},{"n":"Samsula-Spruce Creek","c":"United States","y":29.0484,"x":-81.0628},{"n":"Zephyrhills South","c":"United States","y":28.2152,"x":-82.1886},{"n":"Unkel","c":"Germany","y":50.6008,"x":7.215},{"n":"Bohmenkirch","c":"Germany","y":48.6844,"x":9.9339},{"n":"Goiandira","c":"Brazil","y":-18.1328,"x":-48.085},{"n":"Etoile-sur-Rhone","c":"France","y":44.8369,"x":4.8939},{"n":"Kangasniemi","c":"Finland","y":61.99,"x":26.6417},{"n":"Bang Sai","c":"Thailand","y":14.3347,"x":100.3037},{"n":"Lakehills","c":"United States","y":29.6237,"x":-98.9448},{"n":"Kosmonosy","c":"Czechia","y":50.4386,"x":14.9301},{"n":"Elstree","c":"United Kingdom","y":51.64,"x":-0.3},{"n":"Dymer","c":"Ukraine","y":50.7872,"x":30.3117},{"n":"Taquarivai","c":"Brazil","y":-23.9239,"x":-48.6928},{"n":"Beni Ounif","c":"Algeria","y":32.05,"x":-1.25},{"n":"Alva","c":"United States","y":36.7892,"x":-98.6648},{"n":"Atarjea","c":"Mexico","y":21.2678,"x":-99.7183},{"n":"Hotton","c":"Belgium","y":50.2683,"x":5.4467},{"n":"Campinas do Piaui","c":"Brazil","y":-7.66,"x":-41.8819},{"n":"Onrus","c":"South Africa","y":-34.4122,"x":19.17},{"n":"Spielberg bei Knittelfeld","c":"Austria","y":47.2167,"x":14.7833},{"n":"Oreland","c":"United States","y":40.1148,"x":-75.1801},{"n":"Abenberg","c":"Germany","y":49.2406,"x":10.9619},{"n":"Corguinho","c":"Brazil","y":-19.8319,"x":-54.8289},{"n":"Mellrichstadt","c":"Germany","y":50.4278,"x":10.3027},{"n":"Mugardos","c":"Spain","y":43.4544,"x":-8.2358},{"n":"Ellrich","c":"Germany","y":51.5856,"x":10.6681},{"n":"Root","c":"Switzerland","y":47.1158,"x":8.3914},{"n":"Frantiskovy Lazne","c":"Czechia","y":50.1205,"x":12.3518},{"n":"Riga","c":"United States","y":43.0802,"x":-77.8753},{"n":"Groveport","c":"United States","y":39.8585,"x":-82.8978},{"n":"Olivarez","c":"United States","y":26.2285,"x":-97.9931},{"n":"Willow Springs","c":"United States","y":41.7332,"x":-87.8859},{"n":"Bentivoglio","c":"Italy","y":44.6353,"x":11.4189},{"n":"Waidhofen an der Thaya","c":"Austria","y":48.8167,"x":15.2833},{"n":"Chazelles-sur-Lyon","c":"France","y":45.6386,"x":4.3919},{"n":"Cana Verde","c":"Brazil","y":-21.0208,"x":-45.1819},{"n":"Forino","c":"Italy","y":40.8636,"x":14.7369},{"n":"Neuville-de-Poitou","c":"France","y":46.685,"x":0.245},{"n":"Hradec nad Moravici","c":"Czechia","y":49.871,"x":17.8759},{"n":"Chudniv","c":"Ukraine","y":50.0528,"x":28.0969},{"n":"Strazhitsa","c":"Bulgaria","y":43.2333,"x":25.9667},{"n":"Izsak","c":"Hungary","y":46.8014,"x":19.3587},{"n":"Giebelstadt","c":"Germany","y":49.65,"x":9.95},{"n":"Neilston","c":"United Kingdom","y":55.7847,"x":-4.4234},{"n":"Beratzhausen","c":"Germany","y":49.0953,"x":11.8103},{"n":"Attert","c":"Belgium","y":49.75,"x":5.7867},{"n":"McMasterville","c":"Canada","y":45.55,"x":-73.2333},{"n":"Botricello","c":"Italy","y":38.9333,"x":16.85},{"n":"Sovere","c":"Italy","y":45.8167,"x":10.0333},{"n":"Vel'ky Saris","c":"Slovakia","y":49.0383,"x":21.1917},{"n":"Sao Cristovao do Sul","c":"Brazil","y":-27.2667,"x":-50.4406},{"n":"West Pennsboro","c":"United States","y":40.1798,"x":-77.3335},{"n":"Ochtendung","c":"Germany","y":50.3481,"x":7.3897},{"n":"Copsa Mica","c":"Romania","y":46.1125,"x":24.2306},{"n":"Savyntsi","c":"Ukraine","y":49.4105,"x":37.0617},{"n":"Broshniv-Osada","c":"Ukraine","y":48.9994,"x":24.1814},{"n":"Schoppenstedt","c":"Germany","y":52.1331,"x":10.7783},{"n":"Pittstown","c":"United States","y":42.8647,"x":-73.5051},{"n":"Klyuchevka","c":"Kyrgyzstan","y":42.5686,"x":71.8172},{"n":"Starobaltachevo","c":"Russia","y":56.0012,"x":55.9273},{"n":"Ostseebad Binz","c":"Germany","y":54.4,"x":13.6},{"n":"Jonesborough","c":"United States","y":36.2959,"x":-82.4766},{"n":"Glattfelden","c":"Switzerland","y":47.5608,"x":8.4994},{"n":"Harburg","c":"Germany","y":48.7865,"x":10.6917},{"n":"Lenzing","c":"Austria","y":47.9761,"x":13.5956},{"n":"Kingstree","c":"United States","y":33.6665,"x":-79.8292},{"n":"Lake Delton","c":"United States","y":43.5932,"x":-89.7842},{"n":"Cottleville","c":"United States","y":38.7513,"x":-90.6582},{"n":"Le Barp","c":"France","y":44.6061,"x":-0.7678},{"n":"Ille-sur-Tet","c":"France","y":42.6706,"x":2.6206},{"n":"Ispra","c":"Italy","y":45.8167,"x":8.6167},{"n":"Geveze","c":"France","y":48.2194,"x":-1.7894},{"n":"Guenfouda","c":"Morocco","y":34.4836,"x":-2.0456},{"n":"Wyke Regis","c":"United Kingdom","y":50.592,"x":-2.475},{"n":"Dicomano","c":"Italy","y":43.9,"x":11.5333},{"n":"Oberkotzau","c":"Germany","y":50.2625,"x":11.9333},{"n":"Lackland AFB","c":"United States","y":29.3867,"x":-98.6179},{"n":"Elverta","c":"United States","y":38.7185,"x":-121.4455},{"n":"Kemnath","c":"Germany","y":49.8667,"x":11.8833},{"n":"Macael","c":"Spain","y":37.3333,"x":-2.3},{"n":"Cavour","c":"Italy","y":44.7833,"x":7.3833},{"n":"San Cipirello","c":"Italy","y":37.9667,"x":13.1833},{"n":"Rusk","c":"United States","y":31.7978,"x":-95.1491},{"n":"Kibale","c":"Uganda","y":0.8,"x":31.0667},{"n":"Novoyegor'yevskoye","c":"Russia","y":51.7667,"x":80.8667},{"n":"Leacock","c":"United States","y":40.0406,"x":-76.1117},{"n":"Soleto","c":"Italy","y":40.1877,"x":18.2074},{"n":"Redcliff","c":"Canada","y":50.0792,"x":-110.7783},{"n":"Barra do Chapeu","c":"Brazil","y":-24.4731,"x":-49.0244},{"n":"Smithfield Heights","c":"Australia","y":-16.8314,"x":145.691},{"n":"Affing","c":"Germany","y":48.4581,"x":10.9814},{"n":"Castiglione dei Pepoli","c":"Italy","y":44.15,"x":11.15},{"n":"Ingelfingen","c":"Germany","y":49.3,"x":9.65},{"n":"Galliera","c":"Italy","y":44.75,"x":11.4},{"n":"Hohenwestedt","c":"Germany","y":54.0833,"x":9.6667},{"n":"Dhar Souk","c":"Morocco","y":34.6519,"x":-4.2786},{"n":"Puente Caldelas","c":"Spain","y":42.3833,"x":-8.5},{"n":"Linton","c":"United States","y":39.0356,"x":-87.1586},{"n":"Aquino","c":"Italy","y":41.5,"x":13.7},{"n":"Alambari","c":"Brazil","y":-23.5667,"x":-47.8861},{"n":"Hartford","c":"United Kingdom","y":53.245,"x":-2.549},{"n":"Cravolandia","c":"Brazil","y":-13.3589,"x":-39.815},{"n":"Korishe","c":"Kosovo","y":42.2576,"x":20.7981},{"n":"Semmes","c":"United States","y":30.7941,"x":-88.2358},{"n":"Pannal","c":"United Kingdom","y":53.9609,"x":-1.5362},{"n":"Caiana","c":"Brazil","y":-20.6958,"x":-41.925},{"n":"Glashutten","c":"Germany","y":50.2167,"x":8.4},{"n":"Benejuzar","c":"Spain","y":38.0778,"x":-0.8386},{"n":"Waldmohr","c":"Germany","y":49.3953,"x":7.3411},{"n":"Wilhermsdorf","c":"Germany","y":49.4864,"x":10.7181},{"n":"Gmund","c":"Austria","y":48.7667,"x":14.9833},{"n":"Palmview South","c":"United States","y":26.2164,"x":-98.378},{"n":"Honesdale","c":"United States","y":41.5774,"x":-75.2524},{"n":"Poland","c":"United States","y":44.0463,"x":-70.39},{"n":"Sao Pedro do Suacui","c":"Brazil","y":-18.3658,"x":-42.6028},{"n":"Zilair","c":"Russia","y":52.2322,"x":57.4403},{"n":"Onguday","c":"Russia","y":50.75,"x":86.1333},{"n":"Contulmo","c":"Chile","y":-38,"x":-73.2333},{"n":"Torchiarolo","c":"Italy","y":40.4833,"x":18.05},{"n":"Lipcani","c":"Moldova","y":48.2653,"x":26.8039},{"n":"Codogne","c":"Italy","y":45.8667,"x":12.4333},{"n":"Pedro Vicente Maldonado","c":"Ecuador","y":0.0853,"x":-79.0511},{"n":"Poysdorf","c":"Austria","y":48.6667,"x":16.6333},{"n":"Amphawa","c":"Thailand","y":13.4248,"x":99.9559},{"n":"Tonganoxie","c":"United States","y":39.1083,"x":-95.0829},{"n":"Saint-Cheron","c":"France","y":48.5536,"x":2.1247},{"n":"Bergrheinfeld","c":"Germany","y":50,"x":10.1667},{"n":"Souppes-sur-Loing","c":"France","y":48.1831,"x":2.7353},{"n":"Dargaville","c":"New Zealand","y":-35.9333,"x":173.8833},{"n":"Maralik","c":"Armenia","y":40.5722,"x":43.8669},{"n":"Marlin","c":"United States","y":31.3085,"x":-96.8934},{"n":"Tynset","c":"Norway","y":62.2753,"x":10.8325},{"n":"Saint-Astier","c":"France","y":45.1453,"x":0.5281},{"n":"San Vito Chietino","c":"Italy","y":42.3,"x":14.45},{"n":"Islip Terrace","c":"United States","y":40.7506,"x":-73.1872},{"n":"Anghiari","c":"Italy","y":43.5417,"x":12.055},{"n":"Bessemer City","c":"United States","y":35.2841,"x":-81.283},{"n":"Aguiar","c":"Brazil","y":-7.0762,"x":-38.2426},{"n":"Drebkau","c":"Germany","y":51.65,"x":14.2167},{"n":"Romelandia","c":"Brazil","y":-26.6758,"x":-53.3139},{"n":"Gandino","c":"Italy","y":45.8117,"x":9.9031},{"n":"Mulsanne","c":"France","y":47.9117,"x":0.2489},{"n":"Siesta Key","c":"United States","y":27.2779,"x":-82.5516},{"n":"Beaucouze","c":"France","y":47.4756,"x":-0.6328},{"n":"Barbing","c":"Germany","y":49.0033,"x":12.1992},{"n":"Wegscheid","c":"Germany","y":48.5997,"x":13.79},{"n":"Zakamenne","c":"Slovakia","y":49.3897,"x":19.3025},{"n":"Nueil-les-Aubiers","c":"France","y":46.9372,"x":-0.59},{"n":"Tomashpil","c":"Ukraine","y":48.5471,"x":28.5157},{"n":"New Carlisle","c":"United States","y":39.9446,"x":-84.0257},{"n":"Kumhausen","c":"Germany","y":48.5,"x":12.1667},{"n":"Povoletto","c":"Italy","y":46.1167,"x":13.2833},{"n":"Aubigny-sur-Nere","c":"France","y":47.4886,"x":2.4392},{"n":"Deba","c":"Spain","y":43.2955,"x":-2.3538},{"n":"Deggingen","c":"Germany","y":48.5964,"x":9.7192},{"n":"Ploumagoar","c":"France","y":48.5453,"x":-3.1325},{"n":"Slinger","c":"United States","y":43.3318,"x":-88.2799},{"n":"Aceuchal","c":"Spain","y":38.65,"x":-6.4831},{"n":"Bowling","c":"United Kingdom","y":55.932,"x":-4.494},{"n":"Dayr al Bukht","c":"Syria","y":33.1469,"x":36.1903},{"n":"Mali","c":"Guinea","y":12.084,"x":-12.301},{"n":"Schonau am Konigssee","c":"Germany","y":47.6028,"x":12.9831},{"n":"Cochem","c":"Germany","y":50.1469,"x":7.1667},{"n":"Kerimaki","c":"Finland","y":61.9167,"x":29.2833},{"n":"Feusisberg","c":"Switzerland","y":47.1869,"x":8.7472},{"n":"Stochov","c":"Czechia","y":50.1464,"x":13.9635},{"n":"Korop","c":"Ukraine","y":51.5661,"x":32.9508},{"n":"Lake Bluff","c":"United States","y":42.2826,"x":-87.851},{"n":"Boxborough","c":"United States","y":42.4884,"x":-71.5178},{"n":"Caiua","c":"Brazil","y":-21.8317,"x":-51.9983},{"n":"Cavallermaggiore","c":"Italy","y":44.7167,"x":7.6833},{"n":"Frankenmuth","c":"United States","y":43.3321,"x":-83.7395},{"n":"Balsfjord","c":"Norway","y":69.3047,"x":19.2036},{"n":"Guxhagen","c":"Germany","y":51.2,"x":9.4833},{"n":"Nova Borova","c":"Ukraine","y":50.6922,"x":28.6367},{"n":"Stroudsburg","c":"United States","y":40.9838,"x":-75.1972},{"n":"Duquesne","c":"United States","y":40.3732,"x":-79.8502},{"n":"Preston","c":"United States","y":42.0989,"x":-111.8799},{"n":"Malax","c":"Finland","y":62.9417,"x":21.55},{"n":"Otterberg","c":"Germany","y":49.5044,"x":7.7711},{"n":"Ertingen","c":"Germany","y":48.1,"x":9.4667},{"n":"Inga","c":"Finland","y":60.0458,"x":24.0056},{"n":"Tracyton","c":"United States","y":47.6095,"x":-122.6533},{"n":"Champagne-sur-Oise","c":"France","y":49.1358,"x":2.2356},{"n":"Conceicao do Para","c":"Brazil","y":-19.7528,"x":-44.8969},{"n":"Cancale","c":"France","y":48.6767,"x":-1.8519},{"n":"San Nicolas Tolentino","c":"Mexico","y":22.2489,"x":-100.5525},{"n":"Leadville","c":"United States","y":39.2473,"x":-106.2934},{"n":"Battonya","c":"Hungary","y":46.2833,"x":21.0167},{"n":"Brebieres","c":"France","y":50.3369,"x":3.0228},{"n":"Seelow","c":"Germany","y":52.5167,"x":14.3831},{"n":"Vila do Porto","c":"Portugal","y":36.945,"x":-25.145},{"n":"Darkush","c":"Syria","y":35.9925,"x":36.3931},{"n":"Heiningen","c":"Germany","y":48.6619,"x":9.6483},{"n":"Commercy","c":"France","y":48.7642,"x":5.5917},{"n":"Dabancheng","c":"China","y":43.3552,"x":88.306},{"n":"Japi","c":"Brazil","y":-6.465,"x":-35.9469},{"n":"Egling","c":"Germany","y":47.9167,"x":11.5167},{"n":"Ceiba","c":"Puerto Rico","y":18.265,"x":-65.6488},{"n":"Espenau","c":"Germany","y":51.3966,"x":9.4702},{"n":"Meckesheim","c":"Germany","y":49.3214,"x":8.8153},{"n":"Berryville","c":"United States","y":36.3713,"x":-93.5704},{"n":"Vinita","c":"United States","y":36.6364,"x":-95.177},{"n":"Arjona","c":"Spain","y":37.935,"x":-4.0569},{"n":"Neviano","c":"Italy","y":40.1,"x":18.1167},{"n":"Saint-Privat-des-Vieux","c":"France","y":44.1442,"x":4.1292},{"n":"Algodonales","c":"Spain","y":36.8811,"x":-5.4056},{"n":"Hubynykha","c":"Ukraine","y":48.8084,"x":35.2535},{"n":"Altenkunstadt","c":"Germany","y":50.1167,"x":11.25},{"n":"Tidenham","c":"United Kingdom","y":51.6605,"x":-2.6435},{"n":"Siatista","c":"Greece","y":40.2564,"x":21.5522},{"n":"Otyniia","c":"Ukraine","y":48.7339,"x":24.8569},{"n":"Sao Jorge do Ivai","c":"Brazil","y":-23.4328,"x":-52.2928},{"n":"Connell","c":"United States","y":46.6622,"x":-118.8404},{"n":"Buckner","c":"United States","y":38.3867,"x":-85.4503},{"n":"Itaara","c":"Brazil","y":-29.61,"x":-53.765},{"n":"Sarina","c":"Australia","y":-21.4225,"x":149.2175},{"n":"Wappingers Falls","c":"United States","y":41.5984,"x":-73.9182},{"n":"Bento Fernandes","c":"Brazil","y":-5.6939,"x":-35.82},{"n":"Renswoude","c":"Netherlands","y":52.0739,"x":5.5406},{"n":"Drusenheim","c":"France","y":48.7619,"x":7.9517},{"n":"Lohra","c":"Germany","y":50.7333,"x":8.6333},{"n":"Grand-Champ","c":"France","y":47.7586,"x":-2.8444},{"n":"Rondinha","c":"Brazil","y":-27.8278,"x":-52.91},{"n":"Shalazhi","c":"Russia","y":43.0947,"x":45.3589},{"n":"Hidden Valley Lake","c":"United States","y":38.8003,"x":-122.5505},{"n":"Piolenc","c":"France","y":44.1778,"x":4.7614},{"n":"Canzo","c":"Italy","y":45.85,"x":9.2667},{"n":"Kae Dam","c":"Thailand","y":16.0233,"x":103.3862},{"n":"Waimanalo","c":"United States","y":21.3421,"x":-157.7303},{"n":"Lendak","c":"Slovakia","y":49.2442,"x":20.3556},{"n":"Anamosa","c":"United States","y":42.1091,"x":-91.2758},{"n":"Golega","c":"Portugal","y":39.4,"x":-8.4833},{"n":"Zeeland","c":"United States","y":42.8139,"x":-86.0129},{"n":"Favria","c":"Italy","y":45.3333,"x":7.6833},{"n":"Cotronei","c":"Italy","y":39.1667,"x":16.7833},{"n":"Pelham Manor","c":"United States","y":40.893,"x":-73.8057},{"n":"Nedryhayliv","c":"Ukraine","y":50.8332,"x":33.8799},{"n":"Coronel Ezequiel","c":"Brazil","y":-6.3831,"x":-36.2125},{"n":"Amagi","c":"Japan","y":27.8092,"x":128.8978},{"n":"Weldon Spring","c":"United States","y":38.7118,"x":-90.6513},{"n":"Montemiletto","c":"Italy","y":41.0167,"x":14.9},{"n":"Jestetten","c":"Germany","y":47.6522,"x":8.5708},{"n":"Stara Syniava","c":"Ukraine","y":49.6,"x":27.6167},{"n":"San Ciprian de Vinas","c":"Spain","y":42.2969,"x":-7.8714},{"n":"Kannus","c":"Finland","y":63.9017,"x":23.9151},{"n":"Casariche","c":"Spain","y":37.2833,"x":-4.75},{"n":"Hidden Valley","c":"United States","y":39.1673,"x":-84.8444},{"n":"Hachirougata","c":"Japan","y":39.9494,"x":140.0733},{"n":"Cap Malheureux","c":"Mauritius","y":-19.9861,"x":57.6119},{"n":"Chiquiza","c":"Colombia","y":5.61,"x":-73.4889},{"n":"Lieboch","c":"Austria","y":46.9742,"x":15.3375},{"n":"Falcon Heights","c":"United States","y":44.9899,"x":-93.177},{"n":"Ore","c":"United Kingdom","y":50.8721,"x":0.6085},{"n":"Feres","c":"Greece","y":40.8933,"x":26.1739},{"n":"Lichk","c":"Armenia","y":40.1636,"x":45.2278},{"n":"Campinas do Sul","c":"Brazil","y":-27.7158,"x":-52.6278},{"n":"Strawberry","c":"United States","y":37.8925,"x":-122.5078},{"n":"South Huntingdon","c":"United States","y":40.1702,"x":-79.7001},{"n":"Incourt","c":"Belgium","y":50.7,"x":4.7833},{"n":"Machadinho","c":"Brazil","y":-27.5669,"x":-51.6678},{"n":"Estenfeld","c":"Germany","y":49.8281,"x":10.0075},{"n":"Obrigheim","c":"Germany","y":49.3522,"x":9.0928},{"n":"Saint Legier-La Chiesaz","c":"Switzerland","y":46.4667,"x":6.8833},{"n":"Zschorlau","c":"Germany","y":50.5667,"x":12.65},{"n":"Horni Slavkov","c":"Czechia","y":50.1387,"x":12.8077},{"n":"Warthausen","c":"Germany","y":48.1267,"x":9.7958},{"n":"Weiser","c":"United States","y":44.2547,"x":-116.9689},{"n":"Yosemite Lakes","c":"United States","y":37.1885,"x":-119.7723},{"n":"Ambleve","c":"Belgium","y":50.3539,"x":6.1692},{"n":"Erlenbach","c":"Germany","y":49.17,"x":9.2694},{"n":"Kirchdorf am Inn","c":"Germany","y":48.2467,"x":12.9828},{"n":"Barnard Castle","c":"United Kingdom","y":54.55,"x":-1.92},{"n":"Harrietstown","c":"United States","y":44.243,"x":-74.2363},{"n":"Nassogne","c":"Belgium","y":50.1286,"x":5.3419},{"n":"San Benito","c":"Philippines","y":9.958,"x":126.007},{"n":"Trilport","c":"France","y":48.9572,"x":2.9492},{"n":"Brejinho de Nazare","c":"Brazil","y":-11,"x":-48.5658},{"n":"Clare","c":"United States","y":43.8258,"x":-84.763},{"n":"Byron Bay","c":"Australia","y":-28.6483,"x":153.6178},{"n":"Horgenzell","c":"Germany","y":47.8053,"x":9.4981},{"n":"Esterwegen","c":"Germany","y":52.9919,"x":7.6336},{"n":"Sabino","c":"Brazil","y":-21.46,"x":-49.5778},{"n":"Wool","c":"United Kingdom","y":50.6789,"x":-2.2189},{"n":"Bom Jesus do Amparo","c":"Brazil","y":-19.7039,"x":-43.4739},{"n":"Gersfeld","c":"Germany","y":50.45,"x":9.9167},{"n":"Highland Lakes","c":"United States","y":33.397,"x":-86.6497},{"n":"Wangen","c":"Switzerland","y":47.1908,"x":8.8956},{"n":"Plouhinec","c":"France","y":47.6975,"x":-3.2511},{"n":"Nong Muang","c":"Thailand","y":15.2348,"x":100.6524},{"n":"Pequizeiro","c":"Brazil","y":-8.595,"x":-48.9339},{"n":"Luisiania","c":"Brazil","y":-21.6758,"x":-50.3267},{"n":"Hamptonburgh","c":"United States","y":41.4484,"x":-74.254},{"n":"Chatillon-sur-Seine","c":"France","y":47.8583,"x":4.5742},{"n":"Dietramszell","c":"Germany","y":47.85,"x":11.6},{"n":"Brosteni","c":"Romania","y":47.2442,"x":25.6981},{"n":"Bagan","c":"Russia","y":54.1,"x":77.6667},{"n":"Pirangucu","c":"Brazil","y":-22.5278,"x":-45.495},{"n":"Baxley","c":"United States","y":31.7643,"x":-82.3508},{"n":"Santa Teresa","c":"United States","y":31.8701,"x":-106.6714},{"n":"Boa Ventura","c":"Brazil","y":-7.4139,"x":-38.2158},{"n":"Carlinville","c":"United States","y":39.2774,"x":-89.8761},{"n":"Smigiel","c":"Poland","y":52.0134,"x":16.527},{"n":"Montanaro","c":"Italy","y":45.2327,"x":7.8549},{"n":"Bernhardswald","c":"Germany","y":49.0906,"x":12.2444},{"n":"Aramina","c":"Brazil","y":-20.0903,"x":-47.7858},{"n":"Sherwood Manor","c":"United States","y":42.0125,"x":-72.566},{"n":"Bidokht","c":"Iran","y":34.3472,"x":58.7572},{"n":"Meano","c":"Spain","y":42.45,"x":-8.7833},{"n":"Kham Sakae Saeng","c":"Thailand","y":15.3322,"x":102.1728},{"n":"Elberton","c":"United States","y":34.1064,"x":-82.8705},{"n":"Kayenta","c":"United States","y":36.7144,"x":-110.2589},{"n":"Bertolinia","c":"Brazil","y":-7.6408,"x":-43.9508},{"n":"Vechigen","c":"Switzerland","y":46.9469,"x":7.5625},{"n":"Ebstorf","c":"Germany","y":53.03,"x":10.4147},{"n":"Dolni Lutyne","c":"Czechia","y":49.8987,"x":18.4282},{"n":"Winston","c":"United States","y":43.12,"x":-123.4242},{"n":"Hluboka nad Vltavou","c":"Czechia","y":49.0523,"x":14.4343},{"n":"Rivanazzano","c":"Italy","y":44.9308,"x":9.0142},{"n":"Sollenau","c":"Austria","y":47.9,"x":16.25},{"n":"Almazan","c":"Spain","y":41.3525,"x":-2.5331},{"n":"Pyhajarvi","c":"Finland","y":63.6833,"x":25.9833},{"n":"Guitiriz","c":"Spain","y":43.182,"x":-7.8954},{"n":"Nachalovo","c":"Russia","y":46.3386,"x":48.1997},{"n":"Faulquemont","c":"France","y":49.0411,"x":6.5992},{"n":"Hagendorf","c":"Switzerland","y":47.3344,"x":7.8444},{"n":"Wellston","c":"United States","y":39.1172,"x":-82.5375},{"n":"San Pietro di Feletto","c":"Italy","y":45.9333,"x":12.25},{"n":"Blackrod","c":"United Kingdom","y":53.5898,"x":-2.5809},{"n":"Rockdale","c":"United States","y":30.6542,"x":-97.0089},{"n":"Stornarella","c":"Italy","y":41.25,"x":15.7333},{"n":"Villapiana","c":"Italy","y":39.85,"x":16.45},{"n":"Presicce","c":"Italy","y":39.9,"x":18.2667},{"n":"Viry","c":"France","y":46.1175,"x":6.0375},{"n":"Jubbah","c":"Saudi Arabia","y":28.0062,"x":40.9416},{"n":"Holdenville","c":"United States","y":35.0836,"x":-96.4004},{"n":"Swartz Creek","c":"United States","y":42.9626,"x":-83.826},{"n":"Mutriku","c":"Spain","y":43.3072,"x":-2.385},{"n":"Aying","c":"Germany","y":47.9667,"x":11.7833},{"n":"Ladyville","c":"Belize","y":17.5567,"x":-88.2889},{"n":"Tympaki","c":"Greece","y":35.0719,"x":24.7683},{"n":"Viiala","c":"Finland","y":61.2111,"x":23.7667},{"n":"Gravenwiesbach","c":"Germany","y":50.3857,"x":8.457},{"n":"Aguiar da Beira","c":"Portugal","y":40.818,"x":-7.5414},{"n":"Phanom Thuan","c":"Thailand","y":14.1315,"x":99.7029},{"n":"Lanzo Torinese","c":"Italy","y":45.2667,"x":7.4833},{"n":"Rangendingen","c":"Germany","y":48.3811,"x":8.8889},{"n":"Feldkirchen an der Donau","c":"Austria","y":48.3456,"x":14.0503},{"n":"Mirecourt","c":"France","y":48.2986,"x":6.1303},{"n":"Marbletown","c":"United States","y":41.8699,"x":-74.1628},{"n":"Makhkety","c":"Russia","y":42.9663,"x":45.9063},{"n":"Glabbeek-Zuurbemde","c":"Belgium","y":50.8667,"x":4.95},{"n":"Saint-Philippe","c":"Canada","y":45.35,"x":-73.47},{"n":"Gabcikovo","c":"Slovakia","y":47.8921,"x":17.5788},{"n":"Archidona","c":"Ecuador","y":-0.9167,"x":-77.7833},{"n":"Caparao","c":"Brazil","y":-20.5208,"x":-41.9069},{"n":"Schrems","c":"Austria","y":48.7833,"x":15.0667},{"n":"Teuva","c":"Finland","y":62.4861,"x":21.7472},{"n":"Imigdal","c":"Morocco","y":31.1097,"x":-8.1336},{"n":"Dzierzgon","c":"Poland","y":53.9233,"x":19.3514},{"n":"Riltsi","c":"Bulgaria","y":42.0401,"x":23.0656},{"n":"Lagonegro","c":"Italy","y":40.1333,"x":15.7667},{"n":"Mena","c":"United States","y":34.5812,"x":-94.2369},{"n":"Casal Velino","c":"Italy","y":40.1833,"x":15.1167},{"n":"Sambaiba","c":"Brazil","y":-7.14,"x":-45.3458},{"n":"Stokesdale","c":"United States","y":36.2318,"x":-79.9834},{"n":"Caprarola","c":"Italy","y":42.3275,"x":12.2367},{"n":"Lanusei","c":"Italy","y":39.8787,"x":9.5415},{"n":"Fort Plain","c":"United States","y":42.9316,"x":-74.6277},{"n":"Kalaheo","c":"United States","y":21.9159,"x":-159.5236},{"n":"Corlateni","c":"Moldova","y":47.8222,"x":27.8314},{"n":"Wolfforth","c":"United States","y":33.5148,"x":-102.0066},{"n":"General Conesa","c":"Argentina","y":-40.1,"x":-64.4333},{"n":"Jaszladany","c":"Hungary","y":47.3667,"x":20.1667},{"n":"Borriol","c":"Spain","y":40.0422,"x":-0.0714},{"n":"Vaileka","c":"Fiji","y":-17.3667,"x":178.15},{"n":"Perranzabuloe","c":"United Kingdom","y":50.326,"x":-5.133},{"n":"Pregarten","c":"Austria","y":48.3556,"x":14.5306},{"n":"Castelvetro Piacentino","c":"Italy","y":45.1,"x":9.9833},{"n":"Vila de Porto Santo","c":"Portugal","y":33.0619,"x":-16.3564},{"n":"Tvardita","c":"Moldova","y":46.1547,"x":28.9656},{"n":"Bol'shoye Nagatkino","c":"Russia","y":54.5167,"x":47.9667},{"n":"Laufach","c":"Germany","y":50.0167,"x":9.3},{"n":"Saint-Etienne-au-Mont","c":"France","y":50.6817,"x":1.6258},{"n":"Kremnica","c":"Slovakia","y":48.7044,"x":18.9183},{"n":"San Antonio de los Cobres","c":"Argentina","y":-24.2256,"x":-66.3192},{"n":"Manteo","c":"United States","y":35.9013,"x":-75.661},{"n":"Acquapendente","c":"Italy","y":42.7447,"x":11.865},{"n":"Kuzumaki","c":"Japan","y":40.0397,"x":141.4364},{"n":"Kouli Kouara","c":"Niger","y":13.8718,"x":1.4867},{"n":"Lekala","c":"Botswana","y":-22.7803,"x":27.7769},{"n":"Agramunt","c":"Spain","y":41.7863,"x":1.0964},{"n":"Cucq","c":"France","y":50.4869,"x":1.6244},{"n":"Peculiar","c":"United States","y":38.7306,"x":-94.4736},{"n":"Muldrow","c":"United States","y":35.4039,"x":-94.5969},{"n":"Vic-le-Comte","c":"France","y":45.6431,"x":3.2461},{"n":"Somerdale","c":"United States","y":39.8454,"x":-75.0218},{"n":"Desaguadero","c":"Peru","y":-16.5684,"x":-69.0421},{"n":"Tharandt","c":"Germany","y":50.9833,"x":13.5808},{"n":"Beekmantown","c":"United States","y":44.7719,"x":-73.4997},{"n":"Dulles Town Center","c":"United States","y":39.0265,"x":-77.4196},{"n":"Pommelsbrunn","c":"Germany","y":49.5,"x":11.5167},{"n":"Calatabiano","c":"Italy","y":37.8228,"x":15.2278},{"n":"Sulzbach an der Murr","c":"Germany","y":49.0044,"x":9.5056},{"n":"Nandlstadt","c":"Germany","y":48.5333,"x":11.8},{"n":"Caramanta","c":"Colombia","y":5.5467,"x":-75.6442},{"n":"Oryahovo","c":"Bulgaria","y":43.7389,"x":23.9612},{"n":"Sant'Omero","c":"Italy","y":42.7833,"x":13.8},{"n":"Macachin","c":"Argentina","y":-37.1377,"x":-63.662},{"n":"Niedenstein","c":"Germany","y":51.2333,"x":9.3167},{"n":"Hartley","c":"United Kingdom","y":51.3868,"x":0.3037},{"n":"Limana","c":"Italy","y":46.1,"x":12.1833},{"n":"Plana","c":"Czechia","y":49.8683,"x":12.7438},{"n":"Condat-sur-Vienne","c":"France","y":45.7931,"x":1.2317},{"n":"Indian Wells","c":"United States","y":33.7036,"x":-116.3396},{"n":"Bar Harbor","c":"United States","y":44.3852,"x":-68.2711},{"n":"Alameda","c":"Spain","y":37.2,"x":-4.65},{"n":"Bine Al Widane","c":"Morocco","y":32.1083,"x":-6.475},{"n":"Borgo Ticino","c":"Italy","y":45.6833,"x":8.6},{"n":"Benedito Leite","c":"Brazil","y":-7.2228,"x":-44.5578},{"n":"Basiliano","c":"Italy","y":46.0167,"x":13.1},{"n":"Zhizdra","c":"Russia","y":53.7503,"x":34.7361},{"n":"Pervomayskoye","c":"Russia","y":52.5883,"x":85.2614},{"n":"Alcantil","c":"Brazil","y":-7.7439,"x":-36.0558},{"n":"Telc","c":"Czechia","y":49.1842,"x":15.4528},{"n":"Colle Umberto","c":"Italy","y":45.95,"x":12.35},{"n":"Richelieu","c":"Canada","y":45.45,"x":-73.25},{"n":"Notre-Dame-du-Mont-Carmel","c":"Canada","y":46.4833,"x":-72.65},{"n":"Rockenhausen","c":"Germany","y":49.6286,"x":7.8206},{"n":"Kurumkan","c":"Russia","y":54.3167,"x":110.3167},{"n":"Fragagnano","c":"Italy","y":40.4333,"x":17.4667},{"n":"Campo Novo","c":"Brazil","y":-27.675,"x":-53.8028},{"n":"New Holland","c":"United States","y":40.1008,"x":-76.09},{"n":"L'Ange-Gardien","c":"Canada","y":45.5833,"x":-75.45},{"n":"Pana","c":"United States","y":39.3828,"x":-89.0642},{"n":"Arzakan","c":"Armenia","y":40.4494,"x":44.6064},{"n":"Cabaceiras","c":"Brazil","y":-7.4889,"x":-36.2869},{"n":"Sladkovicovo","c":"Slovakia","y":48.2,"x":17.65},{"n":"Abegondo","c":"Spain","y":43.2067,"x":-8.31},{"n":"Caxinga","c":"Brazil","y":-3.4178,"x":-41.8958},{"n":"Sainte-Martine","c":"Canada","y":45.25,"x":-73.8},{"n":"Hisya'","c":"Syria","y":34.4108,"x":36.7586},{"n":"Rot am See","c":"Germany","y":49.2508,"x":10.0233},{"n":"Niederaula","c":"Germany","y":50.8,"x":9.6},{"n":"Itaguaru","c":"Brazil","y":-15.7578,"x":-49.6339},{"n":"Chinchon","c":"Spain","y":40.1394,"x":-3.4264},{"n":"Komadi","c":"Hungary","y":47,"x":21.5},{"n":"Woodside","c":"United States","y":37.4222,"x":-122.2591},{"n":"Brauna","c":"Brazil","y":-21.5,"x":-50.3167},{"n":"Giavera del Montello","c":"Italy","y":45.8,"x":12.1667},{"n":"Hugelsheim","c":"Germany","y":48.7972,"x":8.1117},{"n":"Padula","c":"Italy","y":40.339,"x":15.6563},{"n":"Missillac","c":"France","y":47.4822,"x":-2.1589},{"n":"Wesendorf","c":"Germany","y":52.6,"x":10.5331},{"n":"Harwinton","c":"United States","y":41.755,"x":-73.0582},{"n":"Colibasi","c":"Moldova","y":45.7333,"x":28.1667},{"n":"Penmarch","c":"France","y":47.8122,"x":-4.3378},{"n":"Taiki","c":"Japan","y":42.4975,"x":143.2789},{"n":"Bedarrides","c":"France","y":44.0406,"x":4.8981},{"n":"Jokioinen","c":"Finland","y":60.8042,"x":23.4861},{"n":"San Simon de Guerrero","c":"Mexico","y":19.0225,"x":-100.0067},{"n":"Nursling","c":"United Kingdom","y":50.9449,"x":-1.4727},{"n":"Vamospercs","c":"Hungary","y":47.5266,"x":21.8984},{"n":"Barton on Sea","c":"United Kingdom","y":50.7428,"x":-1.6552},{"n":"Novaci-Straini","c":"Romania","y":45.18,"x":23.67},{"n":"Sam Sung","c":"Thailand","y":16.5415,"x":103.0796},{"n":"Pfreimd","c":"Germany","y":49.5,"x":12.1833},{"n":"Batinci","c":"Macedonia","y":41.9197,"x":21.4819},{"n":"Ahlerstedt","c":"Germany","y":53.4069,"x":9.4528},{"n":"Illasi","c":"Italy","y":45.4667,"x":11.1833},{"n":"Stary Plzenec","c":"Czechia","y":49.6978,"x":13.4736},{"n":"Zistersdorf","c":"Austria","y":48.5167,"x":16.75},{"n":"Earls Barton","c":"United Kingdom","y":52.263,"x":-0.746},{"n":"Bad Gleichenberg","c":"Austria","y":46.8702,"x":15.9027},{"n":"Glonn","c":"Germany","y":47.9833,"x":11.8667},{"n":"Baindt","c":"Germany","y":47.8414,"x":9.6619},{"n":"Vrontados","c":"Greece","y":38.4167,"x":26.1333},{"n":"Jim Thorpe","c":"United States","y":40.8712,"x":-75.7433},{"n":"Poretskoye","c":"Russia","y":55.1975,"x":46.3292},{"n":"Joanesia","c":"Brazil","y":-19.1719,"x":-42.6789},{"n":"Valle de Juarez","c":"Mexico","y":19.8667,"x":-102.8167},{"n":"Terrell Hills","c":"United States","y":29.4771,"x":-98.4472},{"n":"Dorpen","c":"Germany","y":52.9667,"x":7.3367},{"n":"Longuyon","c":"France","y":49.4469,"x":5.6006},{"n":"Piterka","c":"Russia","y":50.6667,"x":47.4333},{"n":"Caseara","c":"Brazil","y":-9.2778,"x":-49.9558},{"n":"Colby","c":"United States","y":39.3843,"x":-101.0459},{"n":"Jamul","c":"United States","y":32.7184,"x":-116.8709},{"n":"East Moriches","c":"United States","y":40.8097,"x":-72.7581},{"n":"Saliste","c":"Romania","y":45.7942,"x":23.8864},{"n":"Villaviciosa","c":"Philippines","y":17.4379,"x":120.6253},{"n":"Velas","c":"Portugal","y":38.6817,"x":-28.2079},{"n":"Springhill","c":"United States","y":33.0019,"x":-93.4613},{"n":"Catas Altas","c":"Brazil","y":-20.075,"x":-43.4078},{"n":"Monte Libretti","c":"Italy","y":42.1333,"x":12.7333},{"n":"Castrignano del Capo","c":"Italy","y":39.8333,"x":18.35},{"n":"Santa Teresa Gallura","c":"Italy","y":41.2392,"x":9.1888},{"n":"Schermerhorn","c":"Netherlands","y":52.6067,"x":4.8511},{"n":"Imouzzer des Ida ou Tanane","c":"Morocco","y":30.674,"x":-9.5624},{"n":"Gazzo Veronese","c":"Italy","y":45.15,"x":11.0833},{"n":"Marquise","c":"France","y":50.8147,"x":1.7033},{"n":"Entre-Folhas","c":"Brazil","y":-19.625,"x":-42.2308},{"n":"Jampruca","c":"Brazil","y":-18.4628,"x":-41.8039},{"n":"Malpica","c":"Spain","y":43.3167,"x":-8.8},{"n":"La Grand-Combe","c":"France","y":44.2111,"x":4.0294},{"n":"South Pittsburg","c":"United States","y":35.0111,"x":-85.7183},{"n":"Eaton Rapids","c":"United States","y":42.5092,"x":-84.653},{"n":"Datas","c":"Brazil","y":-18.4458,"x":-43.6558},{"n":"Gizzeria","c":"Italy","y":38.9833,"x":16.2},{"n":"Chateaulin","c":"France","y":48.1967,"x":-4.09},{"n":"Pulyny","c":"Ukraine","y":50.4664,"x":28.2778},{"n":"Gilbertsville","c":"United States","y":40.3219,"x":-75.609},{"n":"Robbins","c":"United States","y":41.6431,"x":-87.708},{"n":"Saint-Pie","c":"Canada","y":45.5,"x":-72.9},{"n":"Maraba Paulista","c":"Brazil","y":-22.1081,"x":-51.9625},{"n":"Porto Lucena","c":"Brazil","y":-27.8558,"x":-55.0158},{"n":"Heroldsbach","c":"Germany","y":49.7,"x":11},{"n":"Northwood","c":"United States","y":41.6089,"x":-83.4836},{"n":"Cardenden","c":"United Kingdom","y":56.133,"x":-3.25},{"n":"Silvanopolis","c":"Brazil","y":-11.1469,"x":-48.1689},{"n":"Eltmann","c":"Germany","y":49.9718,"x":10.6666},{"n":"Mouguerre","c":"France","y":43.4683,"x":-1.4161},{"n":"Paranga","c":"Russia","y":56.7039,"x":49.4047},{"n":"St. Augustine South","c":"United States","y":29.8449,"x":-81.3156},{"n":"Archangelos","c":"Greece","y":36.2167,"x":28.1167},{"n":"Black River Falls","c":"United States","y":44.2981,"x":-90.842},{"n":"Sankt Ruprecht an der Raab","c":"Austria","y":47.1539,"x":15.6622},{"n":"Grossposna","c":"Germany","y":51.2667,"x":12.5},{"n":"West Vincent","c":"United States","y":40.1256,"x":-75.6477},{"n":"Grieskirchen","c":"Austria","y":48.235,"x":13.8319},{"n":"Maslog","c":"Philippines","y":12.1,"x":125.1667},{"n":"Skydra","c":"Greece","y":40.7667,"x":22.15},{"n":"Quorndon","c":"United Kingdom","y":52.7428,"x":-1.17},{"n":"Honeoye Falls","c":"United States","y":42.9557,"x":-77.5903},{"n":"Peachland","c":"Canada","y":49.7736,"x":-119.7369},{"n":"Fruitland","c":"United States","y":44.0195,"x":-116.9221},{"n":"Neudenau","c":"Germany","y":49.2833,"x":9.2667},{"n":"Linguaglossa","c":"Italy","y":37.8428,"x":15.1419},{"n":"Teojomulco","c":"Mexico","y":16.6,"x":-97.2333},{"n":"Debeljaca","c":"Serbia","y":45.0711,"x":20.6},{"n":"Coraopolis","c":"United States","y":40.5148,"x":-80.1627},{"n":"Scharding","c":"Austria","y":48.4569,"x":13.4317},{"n":"Ofterdingen","c":"Germany","y":48.4203,"x":9.0319},{"n":"Szikszo","c":"Hungary","y":48.195,"x":20.9461},{"n":"Ludersdorf","c":"Germany","y":53.8167,"x":10.8167},{"n":"Shady Side","c":"United States","y":38.8285,"x":-76.5211},{"n":"Tremosna","c":"Czechia","y":49.8159,"x":13.3951},{"n":"Iffezheim","c":"Germany","y":48.8206,"x":8.1422},{"n":"Esine","c":"Italy","y":45.9264,"x":10.2517},{"n":"Ashfield-Colborne-Wawanosh","c":"Canada","y":43.8667,"x":-81.6},{"n":"Wackersdorf","c":"Germany","y":49.3167,"x":12.1833},{"n":"Monaca","c":"United States","y":40.6833,"x":-80.2736},{"n":"Dalry","c":"United Kingdom","y":55.711,"x":-4.723},{"n":"Mittersill","c":"Austria","y":47.2667,"x":12.4667},{"n":"Bad Hall","c":"Austria","y":48.0344,"x":14.2097},{"n":"Blere","c":"France","y":47.3253,"x":0.9897},{"n":"El Limon","c":"Mexico","y":19.75,"x":-104.0167},{"n":"Librilla","c":"Spain","y":37.8831,"x":-1.35},{"n":"Itacambira","c":"Brazil","y":-17.065,"x":-43.3089},{"n":"Santo Inacio","c":"Brazil","y":-22.6978,"x":-51.7939},{"n":"Thum","c":"Germany","y":50.6711,"x":12.9514},{"n":"Benkovski","c":"Bulgaria","y":41.3833,"x":25.2667},{"n":"Jeceaba","c":"Brazil","y":-20.535,"x":-43.9828},{"n":"Rheinzabern","c":"Germany","y":49.1194,"x":8.2794},{"n":"Hobol","c":"Norway","y":59.5931,"x":10.9458},{"n":"Weitnau","c":"Germany","y":47.65,"x":10.1333},{"n":"Cigales","c":"Spain","y":41.7581,"x":-4.6997},{"n":"Ripi","c":"Italy","y":41.6167,"x":13.4333},{"n":"Angier","c":"United States","y":35.512,"x":-78.7405},{"n":"Batesburg-Leesville","c":"United States","y":33.9125,"x":-81.5313},{"n":"North Sewickley","c":"United States","y":40.8055,"x":-80.2837},{"n":"Gemmingen","c":"Germany","y":49.15,"x":8.9833},{"n":"Denver City","c":"United States","y":32.968,"x":-102.8318},{"n":"Chadron","c":"United States","y":42.826,"x":-103.0025},{"n":"Ferriday","c":"United States","y":31.6343,"x":-91.5562},{"n":"Kisber","c":"Hungary","y":47.5017,"x":18.0267},{"n":"Ixtapangajoya","c":"Mexico","y":17.4972,"x":-93.0017},{"n":"Buchenbach","c":"Germany","y":49.2667,"x":11.0667},{"n":"New Hempstead","c":"United States","y":41.1488,"x":-74.0485},{"n":"Gazzaniga","c":"Italy","y":45.8,"x":9.8333},{"n":"Coal City","c":"United States","y":41.2772,"x":-88.2803},{"n":"San Miguel Panan","c":"Guatemala","y":14.5333,"x":-91.3667},{"n":"Kusel","c":"Germany","y":49.5347,"x":7.3981},{"n":"Vitorchiano","c":"Italy","y":42.4664,"x":12.1733},{"n":"Canal Fulton","c":"United States","y":40.8895,"x":-81.5882},{"n":"Holdrege","c":"United States","y":40.4395,"x":-99.3773},{"n":"Sebezh","c":"Russia","y":56.2833,"x":28.4833},{"n":"Baia de Arama","c":"Romania","y":45,"x":22.8114},{"n":"Sully-sur-Loire","c":"France","y":47.765,"x":2.3753},{"n":"Altentreptow","c":"Germany","y":53.6927,"x":13.2562},{"n":"East Port Orchard","c":"United States","y":47.5193,"x":-122.6183},{"n":"Skalite","c":"Slovakia","y":49.4972,"x":18.8983},{"n":"Zdvinsk","c":"Russia","y":54.7,"x":78.6667},{"n":"Battenberg","c":"Germany","y":51.0167,"x":8.65},{"n":"Gagliano del Capo","c":"Italy","y":39.85,"x":18.3667},{"n":"Basdorf","c":"Germany","y":52.7142,"x":13.4392},{"n":"Qaminis","c":"Libya","y":31.6572,"x":20.0144},{"n":"Takae","c":"Japan","y":42.3625,"x":142.3186},{"n":"Centuripe","c":"Italy","y":37.6233,"x":14.7395},{"n":"Tota","c":"Colombia","y":5.5603,"x":-72.9861},{"n":"Rakoczifalva","c":"Hungary","y":47.0833,"x":20.2333},{"n":"Salamanca","c":"United States","y":42.1631,"x":-78.7233},{"n":"Monticelli d'Ongina","c":"Italy","y":45.0833,"x":9.9333},{"n":"Rosheim","c":"France","y":48.4967,"x":7.4694},{"n":"Talavera La Real","c":"Spain","y":38.8833,"x":-6.7667},{"n":"Valatie","c":"United States","y":42.4134,"x":-73.6778},{"n":"Chateau-Arnoux-Saint-Auban","c":"France","y":44.0933,"x":6.0083},{"n":"Rodigo","c":"Italy","y":45.2,"x":10.6333},{"n":"Los Montesinos","c":"Spain","y":38.0281,"x":-0.7419},{"n":"Laaber","c":"Germany","y":49.0653,"x":11.8861},{"n":"Villanueva del Trabuco","c":"Spain","y":37.0286,"x":-4.3381},{"n":"Pagnacco","c":"Italy","y":46.1167,"x":13.1833},{"n":"Ourique","c":"Portugal","y":37.65,"x":-8.225},{"n":"Algona","c":"United States","y":43.0743,"x":-94.2302},{"n":"Mocksville","c":"United States","y":35.9006,"x":-80.5631},{"n":"Trent Lakes","c":"Canada","y":44.6667,"x":-78.4333},{"n":"Leglise","c":"Belgium","y":49.8,"x":5.5375},{"n":"La Ferriere","c":"France","y":46.7136,"x":-1.3144},{"n":"Senador Amaral","c":"Brazil","y":-22.5869,"x":-46.1769},{"n":"San Vicente de Alcantara","c":"Spain","y":39.3611,"x":-7.1333},{"n":"Ohlsdorf","c":"Austria","y":47.9614,"x":13.7928},{"n":"Giussago","c":"Italy","y":45.2848,"x":9.1407},{"n":"Rocbaron","c":"France","y":43.3042,"x":6.0908},{"n":"Palermo","c":"United States","y":39.4313,"x":-121.5225},{"n":"Floral City","c":"United States","y":28.7065,"x":-82.309},{"n":"Centerport","c":"United States","y":40.8943,"x":-73.3714},{"n":"Jacare dos Homens","c":"Brazil","y":-9.6358,"x":-37.205},{"n":"Pinckneyville","c":"United States","y":38.0851,"x":-89.3718},{"n":"Northern Rockies","c":"Canada","y":59,"x":-123.75},{"n":"Kinross","c":"United Kingdom","y":56.205,"x":-3.423},{"n":"Purulha","c":"Guatemala","y":15.2353,"x":-90.235},{"n":"Celopek","c":"Macedonia","y":41.9317,"x":21.0133},{"n":"Smiths Station","c":"United States","y":32.5284,"x":-85.096},{"n":"Simancas","c":"Spain","y":41.5919,"x":-4.8286},{"n":"Scaer","c":"France","y":48.0272,"x":-3.7022},{"n":"Warm Mineral Springs","c":"United States","y":27.0469,"x":-82.2702},{"n":"Manitou Springs","c":"United States","y":38.8576,"x":-104.9128},{"n":"Kale","c":"Myanmar","y":16.0961,"x":97.8989},{"n":"Stadl-Paura","c":"Austria","y":48.0839,"x":13.8639},{"n":"Rambervillers","c":"France","y":48.3458,"x":6.6347},{"n":"General Bravo","c":"Mexico","y":25.8,"x":-99.1667},{"n":"Heimsheim","c":"Germany","y":48.8056,"x":8.8619},{"n":"Komsomolskoye","c":"Russia","y":55.2615,"x":47.5386},{"n":"Muro Lucano","c":"Italy","y":40.75,"x":15.4833},{"n":"Bidford-on-Avon","c":"United Kingdom","y":52.1644,"x":-1.8567},{"n":"Zlynka","c":"Russia","y":52.4333,"x":31.7333},{"n":"Hitzkirch","c":"Switzerland","y":47.225,"x":8.2622},{"n":"Stuhlingen","c":"Germany","y":47.7453,"x":8.4458},{"n":"Osterronfeld","c":"Germany","y":54.2833,"x":9.7},{"n":"Pechenizhyn","c":"Ukraine","y":48.51,"x":24.8892},{"n":"Winterset","c":"United States","y":41.3457,"x":-94.0137},{"n":"Manchester-by-the-Sea","c":"United States","y":42.5815,"x":-70.7682},{"n":"Lemmon Valley","c":"United States","y":39.6879,"x":-119.8364},{"n":"Polla","c":"Italy","y":40.5167,"x":15.5},{"n":"Fraureuth","c":"Germany","y":50.7,"x":12.35},{"n":"Exton","c":"United States","y":40.0307,"x":-75.6303},{"n":"Bridgton","c":"United States","y":44.0481,"x":-70.7362},{"n":"Valencia de Alcantara","c":"Spain","y":39.4133,"x":-7.2436},{"n":"Entrambasaguas","c":"Spain","y":43.3778,"x":-3.6767},{"n":"Nagbukel","c":"Philippines","y":17.45,"x":120.55},{"n":"Bellows Falls","c":"United States","y":43.1344,"x":-72.455},{"n":"Oppido Mamertina","c":"Italy","y":38.3,"x":15.9833},{"n":"Darda","c":"Croatia","y":45.6261,"x":18.6925},{"n":"Trhove Sviny","c":"Czechia","y":48.8424,"x":14.6392},{"n":"Saint-Michel-Chef-Chef","c":"France","y":47.1807,"x":-2.1487},{"n":"Measham","c":"United Kingdom","y":52.7061,"x":-1.508},{"n":"Wonthaggi","c":"Australia","y":-38.6056,"x":145.5917},{"n":"Marilla","c":"United States","y":42.8251,"x":-78.5322},{"n":"Neuhausen","c":"Germany","y":48.7933,"x":8.7786},{"n":"Totontepec Villa de Morelos","c":"Mexico","y":17.2567,"x":-96.0269},{"n":"Acula","c":"Mexico","y":18.5167,"x":-95.7833},{"n":"Decize","c":"France","y":46.8292,"x":3.4614},{"n":"Orwigsburg","c":"United States","y":40.6541,"x":-76.104},{"n":"Albaredo d'Adige","c":"Italy","y":45.3167,"x":11.2667},{"n":"Newmains","c":"United Kingdom","y":55.7832,"x":-3.8771},{"n":"Sao Tome","c":"Brazil","y":-23.5378,"x":-52.5908},{"n":"Trogstad","c":"Norway","y":59.6514,"x":11.3397},{"n":"Pohorelice","c":"Czechia","y":48.9812,"x":16.5245},{"n":"Odzun","c":"Armenia","y":41.0517,"x":44.6153},{"n":"Momignies","c":"Belgium","y":50.0294,"x":4.1667},{"n":"Turvelandia","c":"Brazil","y":-17.8528,"x":-50.3019},{"n":"Polson","c":"United States","y":47.6886,"x":-114.1411},{"n":"Cavalero","c":"United States","y":47.9846,"x":-122.0743},{"n":"Carsoli","c":"Italy","y":42.0988,"x":13.0886},{"n":"Hanna","c":"Iran","y":31.1989,"x":51.7247},{"n":"Ciacova","c":"Romania","y":45.5,"x":21.1333},{"n":"Hoshcha","c":"Ukraine","y":50.5986,"x":26.6753},{"n":"Bodenkirchen","c":"Germany","y":48.3667,"x":12.3667},{"n":"Rapolano Terme","c":"Italy","y":43.2833,"x":11.6},{"n":"Pettenbach","c":"Austria","y":47.9617,"x":14.0167},{"n":"Estacada","c":"United States","y":45.2987,"x":-122.3338},{"n":"Chackbay","c":"United States","y":29.8817,"x":-90.7742},{"n":"West St. Paul","c":"Canada","y":50.0119,"x":-97.115},{"n":"Vanju-Mare","c":"Romania","y":44.4319,"x":22.8769},{"n":"Bellpuig","c":"Spain","y":41.6267,"x":1.0133},{"n":"Lindenfels","c":"Germany","y":49.6849,"x":8.7803},{"n":"Mahlberg","c":"Germany","y":48.2869,"x":7.8114},{"n":"Clarinda","c":"United States","y":40.738,"x":-95.034},{"n":"Ribadumia","c":"Spain","y":42.5167,"x":-8.75},{"n":"Santa Cristina de Aro","c":"Spain","y":41.8139,"x":2.9974},{"n":"Pytalovo","c":"Russia","y":57.0667,"x":27.9167},{"n":"Wind Lake","c":"United States","y":42.823,"x":-88.1573},{"n":"Porto dos Gauchos","c":"Brazil","y":-11.535,"x":-57.4139},{"n":"Penn Estates","c":"United States","y":41.0346,"x":-75.2417},{"n":"Valencia de Don Juan","c":"Spain","y":42.3,"x":-5.5167},{"n":"Janduis","c":"Brazil","y":-6.0158,"x":-37.4089},{"n":"Horodnytsia","c":"Ukraine","y":50.8094,"x":27.3183},{"n":"Alness","c":"United Kingdom","y":57.695,"x":-4.258},{"n":"St. Paul Park","c":"United States","y":44.836,"x":-92.9949},{"n":"Simonton Lake","c":"United States","y":41.7478,"x":-85.9657},{"n":"Redbourn","c":"United Kingdom","y":51.8002,"x":-0.3965},{"n":"Krieglach","c":"Austria","y":47.5456,"x":15.5594},{"n":"Veronella","c":"Italy","y":45.3231,"x":11.3244},{"n":"Gottolengo","c":"Italy","y":45.2928,"x":10.2734},{"n":"Sarroch","c":"Italy","y":39.0658,"x":9.0102},{"n":"Noyemberyan","c":"Armenia","y":41.1725,"x":44.9936},{"n":"Le Rove","c":"France","y":43.3692,"x":5.2503},{"n":"Liberdade","c":"Brazil","y":-22.0289,"x":-44.32},{"n":"Ward","c":"United States","y":35.0117,"x":-91.9577},{"n":"Gualchos","c":"Spain","y":36.75,"x":-3.3833},{"n":"Parres","c":"Spain","y":43.3587,"x":-5.1846},{"n":"Pishchanka","c":"Ukraine","y":48.2058,"x":28.8889},{"n":"Roundway","c":"United Kingdom","y":51.368,"x":-1.981},{"n":"Hockinson","c":"United States","y":45.7302,"x":-122.4833},{"n":"Velden","c":"Netherlands","y":51.4117,"x":6.1678},{"n":"Uhlingen-Birkendorf","c":"Germany","y":47.7194,"x":8.3181},{"n":"Pabrade","c":"Lithuania","y":54.9806,"x":25.7667},{"n":"Englewood Cliffs","c":"United States","y":40.8822,"x":-73.9466},{"n":"James City","c":"United States","y":35.0592,"x":-77.02},{"n":"Oberaudorf","c":"Germany","y":47.6475,"x":12.1719},{"n":"Feira Nova","c":"Brazil","y":-10.2639,"x":-37.3128},{"n":"Redstone","c":"United States","y":39.9809,"x":-79.8451},{"n":"Shepherdstown","c":"United States","y":39.4318,"x":-77.8048},{"n":"North Oaks","c":"United States","y":45.1002,"x":-93.0882},{"n":"Creston","c":"Canada","y":49.09,"x":-116.51},{"n":"Smithers","c":"Canada","y":54.7819,"x":-127.1681},{"n":"Breitenbrunn","c":"Germany","y":50.4747,"x":12.7667},{"n":"Bajram Curri","c":"Albania","y":42.3582,"x":20.076},{"n":"Mattawa","c":"United States","y":46.737,"x":-119.904},{"n":"Bederkesa","c":"Germany","y":53.6271,"x":8.8304},{"n":"Caruthersville","c":"United States","y":36.1814,"x":-89.6664},{"n":"Port LaBelle","c":"United States","y":26.7493,"x":-81.3876},{"n":"Castellucchio","c":"Italy","y":45.15,"x":10.65},{"n":"Maruggio","c":"Italy","y":40.3228,"x":17.5736},{"n":"San Pedro de Atacama","c":"Chile","y":-22.9108,"x":-68.2001},{"n":"Campegine","c":"Italy","y":44.7844,"x":10.5328},{"n":"Ligne","c":"France","y":47.4117,"x":-1.3772},{"n":"Mollina","c":"Spain","y":37.1231,"x":-4.6561},{"n":"Travelers Rest","c":"United States","y":34.9684,"x":-82.4417},{"n":"Rincon Valley","c":"United States","y":32.1101,"x":-110.6889},{"n":"Kyparissia","c":"Greece","y":37.2333,"x":21.6667},{"n":"Meadow Lake","c":"Canada","y":54.1242,"x":-108.4358},{"n":"Balatonlelle","c":"Hungary","y":46.7822,"x":17.6757},{"n":"East Quogue","c":"United States","y":40.8489,"x":-72.5783},{"n":"Figueiropolis","c":"Brazil","y":-12.1308,"x":-49.1739},{"n":"Shatsk","c":"Ukraine","y":51.4878,"x":23.9297},{"n":"Velburg","c":"Germany","y":49.2328,"x":11.6719},{"n":"Alsonemedi","c":"Hungary","y":47.3137,"x":19.1665},{"n":"Blaufelden","c":"Germany","y":49.2969,"x":9.9719},{"n":"Jaboti","c":"Brazil","y":-23.7428,"x":-50.0758},{"n":"Schweitenkirchen","c":"Germany","y":48.5,"x":11.6167},{"n":"Kunmadaras","c":"Hungary","y":47.4333,"x":20.8},{"n":"Frankford","c":"United States","y":41.1615,"x":-74.7381},{"n":"Tassamert","c":"Algeria","y":36.2693,"x":4.823},{"n":"Botuvera","c":"Brazil","y":-27.1989,"x":-49.075},{"n":"Rupea","c":"Romania","y":46.0389,"x":25.2225},{"n":"Spas-Klepiki","c":"Russia","y":55.1333,"x":40.1667},{"n":"Polna","c":"Czechia","y":49.487,"x":15.7188},{"n":"Pyhtaa","c":"Finland","y":60.5,"x":26.55},{"n":"Lanark Highlands","c":"Canada","y":45.088,"x":-76.517},{"n":"Ilomantsi","c":"Finland","y":62.6667,"x":30.9333},{"n":"Velka Bites","c":"Czechia","y":49.2887,"x":16.2259},{"n":"Chiusa","c":"Italy","y":46.64,"x":11.5657},{"n":"Morganfield","c":"United States","y":37.6869,"x":-87.8876},{"n":"Palmerton","c":"United States","y":40.8023,"x":-75.616},{"n":"San Leon","c":"United States","y":29.4901,"x":-94.9403},{"n":"Chions","c":"Italy","y":45.85,"x":12.7167},{"n":"Horazd'ovice","c":"Czechia","y":49.3208,"x":13.701},{"n":"Montefrio","c":"Spain","y":37.3211,"x":-4.0111},{"n":"Doutor Mauricio Cardoso","c":"Brazil","y":-27.5058,"x":-54.3608},{"n":"Terrujem","c":"Portugal","y":38.8511,"x":-9.3747},{"n":"Tickhill","c":"United Kingdom","y":53.4305,"x":-1.1135},{"n":"La Balme-de-Sillingy","c":"France","y":45.9611,"x":6.0419},{"n":"Bakov nad Jizerou","c":"Czechia","y":50.4824,"x":14.9416},{"n":"Puchuncavi","c":"Chile","y":-32.7261,"x":-71.4151},{"n":"Nava","c":"Spain","y":43.35,"x":-5.5167},{"n":"Sackville","c":"Canada","y":45.9,"x":-64.3667},{"n":"Triftern","c":"Germany","y":48.4,"x":13.0167},{"n":"Viadutos","c":"Brazil","y":-27.5689,"x":-52.02},{"n":"Bratske","c":"Ukraine","y":47.8636,"x":31.5781},{"n":"Ceska Kamenice","c":"Czechia","y":50.7979,"x":14.4178},{"n":"Westernport","c":"United States","y":39.488,"x":-79.0429},{"n":"Muravera","c":"Italy","y":39.4196,"x":9.5763},{"n":"Maze","c":"France","y":47.4564,"x":-0.2731},{"n":"Geoagiu","c":"Romania","y":45.92,"x":23.2},{"n":"Mapire","c":"Venezuela","y":7.7411,"x":-64.7107},{"n":"Holysov","c":"Czechia","y":49.5937,"x":13.1013},{"n":"Saint-Pourcain-sur-Sioule","c":"France","y":46.3075,"x":3.2894},{"n":"Wake Village","c":"United States","y":33.424,"x":-94.1188},{"n":"Canino","c":"Italy","y":42.465,"x":11.7519},{"n":"Kdyne","c":"Czechia","y":49.3909,"x":13.0397},{"n":"Tiszalok","c":"Hungary","y":48.0197,"x":21.3778},{"n":"Santa Caterina Villarmosa","c":"Italy","y":37.6,"x":14.0333},{"n":"Mourmelon-le-Grand","c":"France","y":49.1408,"x":4.3644},{"n":"Briare","c":"France","y":47.6381,"x":2.7392},{"n":"San Ildefonso","c":"Spain","y":40.9017,"x":-4.0067},{"n":"Bol'shoye Sorokino","c":"Russia","y":56.6272,"x":69.7911},{"n":"New Ipswich","c":"United States","y":42.7489,"x":-71.8747},{"n":"Hawaiian Beaches","c":"United States","y":19.5423,"x":-154.9223},{"n":"Bilibino","c":"Russia","y":68.05,"x":166.45},{"n":"Hadley","c":"United States","y":42.3556,"x":-72.5692},{"n":"Coreglia Antelminelli","c":"Italy","y":44.0644,"x":10.5264},{"n":"Sedelnikovo","c":"Russia","y":56.95,"x":75.3333},{"n":"Gommiswald","c":"Switzerland","y":47.2404,"x":9.0474},{"n":"Ruokolahti","c":"Finland","y":61.2917,"x":28.8167},{"n":"Opishnya","c":"Ukraine","y":49.9564,"x":34.612},{"n":"Le Pellerin","c":"France","y":47.1983,"x":-1.7539},{"n":"Correzzola","c":"Italy","y":45.2333,"x":12.0667},{"n":"Marystown","c":"Canada","y":47.1667,"x":-55.1667},{"n":"Kolosovka","c":"Russia","y":56.4644,"x":73.6114},{"n":"Ocean Shores","c":"Australia","y":-28.5092,"x":153.5375},{"n":"McKenzie","c":"United States","y":36.1371,"x":-88.5077},{"n":"Uhrichsville","c":"United States","y":40.4005,"x":-81.3515},{"n":"Saint-Germain-du-Puy","c":"France","y":47.0992,"x":2.4811},{"n":"Lehighton","c":"United States","y":40.8306,"x":-75.7166},{"n":"Vicente Dutra","c":"Brazil","y":-27.1619,"x":-53.405},{"n":"Minot AFB","c":"United States","y":48.4209,"x":-101.3381},{"n":"Grossheubach","c":"Germany","y":49.7333,"x":9.2333},{"n":"Fort Rucker","c":"United States","y":31.3428,"x":-85.7154},{"n":"Bandar-e Rig","c":"Iran","y":29.4856,"x":50.6281},{"n":"Zolynia","c":"Poland","y":50.162,"x":22.3083},{"n":"Andorf","c":"Austria","y":48.3667,"x":13.5667},{"n":"Lohsa","c":"Germany","y":51.3833,"x":14.4},{"n":"Camarinas","c":"Spain","y":43.13,"x":-9.185},{"n":"Locmaria-Plouzane","c":"France","y":48.3747,"x":-4.6436},{"n":"Villeneuve-sur-Yonne","c":"France","y":48.0814,"x":3.2967},{"n":"Taliouine","c":"Morocco","y":35.1483,"x":-3.5478},{"n":"Plesse","c":"France","y":47.5417,"x":-1.8869},{"n":"Castelnuovo Scrivia","c":"Italy","y":44.9814,"x":8.8822},{"n":"Molchanovo","c":"Russia","y":57.5811,"x":83.7606},{"n":"Gweta","c":"Botswana","y":-20.2072,"x":25.2561},{"n":"Lampazos de Naranjo","c":"Mexico","y":27.025,"x":-100.5056},{"n":"Khatassy","c":"Russia","y":61.9064,"x":129.6331},{"n":"Tha Wang Pha","c":"Thailand","y":19.0945,"x":100.8097},{"n":"Wiedemar","c":"Germany","y":51.4667,"x":12.2036},{"n":"Ceska Skalice","c":"Czechia","y":50.3947,"x":16.0428},{"n":"Zovuni","c":"Armenia","y":40.2364,"x":44.5039},{"n":"Hirbovat","c":"Moldova","y":46.8442,"x":29.3592},{"n":"Avdon","c":"Russia","y":54.6692,"x":55.7164},{"n":"Grans","c":"France","y":43.6086,"x":5.0631},{"n":"Fairport","c":"United States","y":43.099,"x":-77.4427},{"n":"Union Beach","c":"United States","y":40.4454,"x":-74.1699},{"n":"Pawcatuck","c":"United States","y":41.3774,"x":-71.8492},{"n":"Bessan","c":"France","y":43.3614,"x":3.4242},{"n":"Berri","c":"Australia","y":-34.2833,"x":140.6},{"n":"Hightstown","c":"United States","y":40.2686,"x":-74.5253},{"n":"East Granby","c":"United States","y":41.9424,"x":-72.741},{"n":"Suvorovo","c":"Bulgaria","y":43.33,"x":27.5925},{"n":"Rochedo","c":"Brazil","y":-19.9528,"x":-54.8928},{"n":"Conches-en-Ouche","c":"France","y":48.9606,"x":0.9425},{"n":"Brady","c":"United States","y":31.1322,"x":-99.3697},{"n":"Eagleville","c":"United States","y":40.1604,"x":-75.409},{"n":"Ovelgonne","c":"Germany","y":53.35,"x":8.4},{"n":"Kelly","c":"United States","y":40.9984,"x":-76.9245},{"n":"Henfield","c":"United Kingdom","y":50.933,"x":-0.277},{"n":"Alburquerque","c":"Spain","y":39.2167,"x":-7},{"n":"Krivosheino","c":"Russia","y":57.3431,"x":83.9261},{"n":"Camogli","c":"Italy","y":44.3484,"x":9.1558},{"n":"Bulverde","c":"United States","y":29.7744,"x":-98.4364},{"n":"Alto del Carmen","c":"Chile","y":-28.9336,"x":-70.4623},{"n":"Waeng Yai","c":"Thailand","y":15.9624,"x":102.5419},{"n":"Pacy-sur-Eure","c":"France","y":49.0158,"x":1.3819},{"n":"Bolton","c":"United States","y":42.4362,"x":-71.6073},{"n":"Kirchberg in Tirol","c":"Austria","y":47.45,"x":12.3167},{"n":"Guglionesi","c":"Italy","y":41.9167,"x":14.9167},{"n":"Hareid","c":"Norway","y":62.3642,"x":6.0014},{"n":"Pottenstein","c":"Germany","y":49.7722,"x":11.4114},{"n":"Znamenskoye","c":"Russia","y":57.1278,"x":73.8244},{"n":"Komyshuvakha","c":"Ukraine","y":47.7155,"x":35.5241},{"n":"Longarone","c":"Italy","y":46.2667,"x":12.3},{"n":"Dom Cavati","c":"Brazil","y":-19.3739,"x":-42.1058},{"n":"Odelzhausen","c":"Germany","y":48.3167,"x":11.1833},{"n":"Santa Maria do Salto","c":"Brazil","y":-16.2489,"x":-40.1489},{"n":"Paxtonia","c":"United States","y":40.3166,"x":-76.7884},{"n":"Ochamchire","c":"Georgia","y":42.71,"x":41.47},{"n":"Ayora","c":"Spain","y":39.0583,"x":-1.0572},{"n":"Naie","c":"Japan","y":43.4253,"x":141.8828},{"n":"Kappel-Grafenhausen","c":"Germany","y":48.2922,"x":7.7414},{"n":"Cerda","c":"Italy","y":37.9,"x":13.8167},{"n":"Waldems","c":"Germany","y":50.2503,"x":8.3133},{"n":"Borkum","c":"Germany","y":53.5881,"x":6.6697},{"n":"Parazinho","c":"Brazil","y":-5.2228,"x":-35.8378},{"n":"Oettingen in Bayern","c":"Germany","y":48.95,"x":10.5833},{"n":"Kings Point","c":"United States","y":40.8162,"x":-73.7407},{"n":"Bear Valley Springs","c":"United States","y":35.1775,"x":-118.646},{"n":"San Jose de Pare","c":"Colombia","y":6.0192,"x":-73.5467},{"n":"Benjamin Hill","c":"Mexico","y":30.1667,"x":-111.1},{"n":"Maser","c":"Italy","y":45.8167,"x":11.9833},{"n":"Kahaluu-Keauhou","c":"United States","y":19.5726,"x":-155.958},{"n":"Vacha","c":"Germany","y":50.8289,"x":10.0214},{"n":"Cannobio","c":"Italy","y":46.0667,"x":8.7},{"n":"Ronneburg","c":"Germany","y":50.8636,"x":12.1808},{"n":"Vigone","c":"Italy","y":44.85,"x":7.5},{"n":"Wanroij","c":"Netherlands","y":51.6561,"x":5.82},{"n":"Polop","c":"Spain","y":38.622,"x":-0.127},{"n":"Iola","c":"United States","y":37.9274,"x":-95.4006},{"n":"Tizagzawine","c":"Morocco","y":31,"x":-7.15},{"n":"Pechenihy","c":"Ukraine","y":49.8647,"x":36.9364},{"n":"Vila do Bispo","c":"Portugal","y":37.0825,"x":-8.9119},{"n":"Landri Sales","c":"Brazil","y":-7.2658,"x":-43.93},{"n":"Zephyrhills West","c":"United States","y":28.2311,"x":-82.2052},{"n":"Malles Venosta","c":"Italy","y":46.6879,"x":10.5465},{"n":"Volta Grande","c":"Brazil","y":-21.7708,"x":-42.5389},{"n":"San Giovanni Ilarione","c":"Italy","y":45.5167,"x":11.2333},{"n":"Garnet","c":"United States","y":33.9179,"x":-116.4796},{"n":"Avai","c":"Brazil","y":-22.1467,"x":-49.3331},{"n":"Igensdorf","c":"Germany","y":49.6217,"x":11.2319},{"n":"Lake Fenton","c":"United States","y":42.8453,"x":-83.7086},{"n":"Novohuivynske","c":"Ukraine","y":50.2022,"x":28.685},{"n":"Kyshtovka","c":"Russia","y":56.555,"x":76.6271},{"n":"Baliza","c":"Brazil","y":-16.1958,"x":-52.545},{"n":"Old Bethpage","c":"United States","y":40.7557,"x":-73.4544},{"n":"South Sarasota","c":"United States","y":27.2856,"x":-82.5333},{"n":"Jaffrey","c":"United States","y":42.8294,"x":-72.0597},{"n":"Corropoli","c":"Italy","y":42.8333,"x":13.8333},{"n":"Laces","c":"Italy","y":46.6167,"x":10.8667},{"n":"North Dansville","c":"United States","y":42.5583,"x":-77.6915},{"n":"Marano sul Panaro","c":"Italy","y":44.4572,"x":10.9719},{"n":"Nalbandyan","c":"Armenia","y":40.0678,"x":43.9856},{"n":"Chepelare","c":"Bulgaria","y":41.7233,"x":24.6861},{"n":"La Campana","c":"Spain","y":37.5681,"x":-5.4278},{"n":"Cuges-les-Pins","c":"France","y":43.2764,"x":5.7006},{"n":"Big Bear Lake","c":"United States","y":34.2429,"x":-116.8951},{"n":"Austevoll","c":"Norway","y":60.0378,"x":5.2683},{"n":"Bratslav","c":"Ukraine","y":48.8147,"x":28.9447},{"n":"Grayson","c":"United States","y":38.3317,"x":-82.9371},{"n":"Stara Vyzhivka","c":"Ukraine","y":51.4396,"x":24.4373},{"n":"Cave Springs","c":"United States","y":36.2701,"x":-94.2225},{"n":"Peal de Becerro","c":"Spain","y":37.9,"x":-3.1167},{"n":"Acorizal","c":"Brazil","y":-15.205,"x":-56.3658},{"n":"Wadesboro","c":"United States","y":34.9645,"x":-80.0746},{"n":"Frei","c":"Norway","y":63.0625,"x":7.8031},{"n":"Arcabuco","c":"Colombia","y":5.7544,"x":-73.4375},{"n":"Edwinstowe","c":"United Kingdom","y":53.16,"x":-1.07},{"n":"Drebach","c":"Germany","y":50.6733,"x":13.0181},{"n":"Sioux Lookout","c":"Canada","y":50.1,"x":-91.9167},{"n":"Zarat","c":"Tunisia","y":33.6679,"x":10.3505},{"n":"Divina Pastora","c":"Brazil","y":-10.6889,"x":-37.1478},{"n":"Peyrolles-en-Provence","c":"France","y":43.6456,"x":5.585},{"n":"Sevelen","c":"Switzerland","y":47.1204,"x":9.4857},{"n":"Arzberg","c":"Germany","y":50.0572,"x":12.1864},{"n":"Ardore","c":"Italy","y":38.1833,"x":16.1667},{"n":"Hawkinsville","c":"United States","y":32.2964,"x":-83.4814},{"n":"Santana do Itarare","c":"Brazil","y":-23.755,"x":-49.6289},{"n":"Csakvar","c":"Hungary","y":47.3933,"x":18.4605},{"n":"Pourrieres","c":"France","y":43.5039,"x":5.7339},{"n":"Le Bourget-du-Lac","c":"France","y":45.6483,"x":5.8597},{"n":"Sechenovo","c":"Russia","y":55.2244,"x":45.8906},{"n":"Didsbury","c":"Canada","y":51.6658,"x":-114.1311},{"n":"Yamanaka","c":"Japan","y":35.4106,"x":138.8608},{"n":"Thalmassing","c":"Germany","y":49.0833,"x":11.2167},{"n":"Rothschild","c":"United States","y":44.8761,"x":-89.6173},{"n":"Lomovka","c":"Russia","y":53.9208,"x":58.3683},{"n":"Fraubrunnen","c":"Switzerland","y":47.085,"x":7.5269},{"n":"Delhi Hills","c":"United States","y":39.0871,"x":-84.6178},{"n":"Ban Bang Pramung","c":"Thailand","y":15.7133,"x":100.1353},{"n":"Grossaitingen","c":"Germany","y":48.2283,"x":10.7814},{"n":"Champniers","c":"France","y":45.715,"x":0.2056},{"n":"Belvedere","c":"United States","y":33.5369,"x":-81.9424},{"n":"El Cocuy","c":"Colombia","y":6.4094,"x":-72.4444},{"n":"Shaykh al Hadid","c":"Syria","y":36.5011,"x":36.5978},{"n":"Centola","c":"Italy","y":40.0667,"x":15.3167},{"n":"Wermsdorf","c":"Germany","y":51.2833,"x":12.95},{"n":"Bucchianico","c":"Italy","y":42.3044,"x":14.1806},{"n":"Angelina","c":"Brazil","y":-27.5729,"x":-48.9841},{"n":"Lagundo","c":"Italy","y":46.6833,"x":11.1333},{"n":"Pecan Acres","c":"United States","y":32.9703,"x":-97.4727},{"n":"Timzguida Ouftas","c":"Morocco","y":30.9908,"x":-9.7994},{"n":"Dom Silverio","c":"Brazil","y":-20.16,"x":-42.9678},{"n":"Villers-le-Lac","c":"France","y":47.0608,"x":6.6703},{"n":"Nea Anchialos","c":"Greece","y":39.2667,"x":22.8167},{"n":"Esporlas","c":"Spain","y":39.6662,"x":2.5799},{"n":"Rottenmann","c":"Austria","y":47.5267,"x":14.3558},{"n":"Wilhelmsdorf","c":"Germany","y":47.865,"x":9.4275},{"n":"Syumsi","c":"Russia","y":57.1111,"x":51.615},{"n":"Mansue","c":"Italy","y":45.8232,"x":12.5356},{"n":"Marianopolis do Tocantins","c":"Brazil","y":-9.7958,"x":-49.6539},{"n":"Guemene-Penfao","c":"France","y":47.63,"x":-1.8325},{"n":"Howard Springs","c":"Australia","y":-12.4922,"x":131.053},{"n":"Alcover","c":"Spain","y":41.2621,"x":1.1711},{"n":"Villette-d'Anthon","c":"France","y":45.7953,"x":5.1158},{"n":"Francinopolis","c":"Brazil","y":-6.3958,"x":-42.2619},{"n":"Novomykolayivka","c":"Ukraine","y":47.9779,"x":35.9099},{"n":"Parigne-l'Eveque","c":"France","y":47.9364,"x":0.3644},{"n":"Giddings","c":"United States","y":30.1833,"x":-96.9279},{"n":"Beya","c":"Russia","y":53.0458,"x":90.9414},{"n":"Houffalize","c":"Belgium","y":50.132,"x":5.7894},{"n":"Baretswil","c":"Switzerland","y":47.3369,"x":8.8575},{"n":"Servian","c":"France","y":43.4272,"x":3.2992},{"n":"Abrud","c":"Romania","y":46.2739,"x":23.05},{"n":"Venus","c":"United States","y":32.4312,"x":-97.102},{"n":"Orchomenos","c":"Greece","y":38.4933,"x":22.9749},{"n":"Jilove","c":"Czechia","y":50.7609,"x":14.1039},{"n":"Castelbellino","c":"Italy","y":43.4878,"x":13.1458},{"n":"Turangi","c":"New Zealand","y":-38.989,"x":175.81},{"n":"Worthsee","c":"Germany","y":48.0833,"x":11.2},{"n":"Fernie","c":"Canada","y":49.5042,"x":-115.0628},{"n":"Deer Lake","c":"Canada","y":49.1744,"x":-57.4269},{"n":"Luynes","c":"France","y":47.3847,"x":0.5544},{"n":"Hankasalmi","c":"Finland","y":62.3889,"x":26.4361},{"n":"Tvrdosovce","c":"Slovakia","y":48.1,"x":18.0667},{"n":"Otero de Rey","c":"Spain","y":43.1025,"x":-7.6136},{"n":"Sankt Johann","c":"Germany","y":48.4528,"x":9.3431},{"n":"Carlyss","c":"United States","y":30.1761,"x":-93.3704},{"n":"Tapioszentmarton","c":"Hungary","y":47.3404,"x":19.7438},{"n":"Doksy","c":"Czechia","y":50.5648,"x":14.6556},{"n":"Calberlah","c":"Germany","y":52.4247,"x":10.6164},{"n":"Calistoga","c":"United States","y":38.5818,"x":-122.5824},{"n":"Perushtitsa","c":"Bulgaria","y":42.0561,"x":24.5444},{"n":"Chemerivtsi","c":"Ukraine","y":49,"x":26.3667},{"n":"Francisco Dumont","c":"Brazil","y":-17.315,"x":-44.2339},{"n":"Steyerberg","c":"Germany","y":52.5703,"x":9.0236},{"n":"Brensbach","c":"Germany","y":49.7725,"x":8.8785},{"n":"Holmfirth","c":"United Kingdom","y":53.57,"x":-1.787},{"n":"Poolesville","c":"United States","y":39.1423,"x":-77.4102},{"n":"Pedrera","c":"Spain","y":37.2167,"x":-4.8833},{"n":"Eckersdorf","c":"Germany","y":49.9328,"x":11.5011},{"n":"Walkertown","c":"United States","y":36.1578,"x":-80.1642},{"n":"Yarmouth Port","c":"United States","y":41.71,"x":-70.2257},{"n":"Parikkala","c":"Finland","y":61.55,"x":29.5},{"n":"Sachseln","c":"Switzerland","y":46.8678,"x":8.2386},{"n":"Gbely","c":"Slovakia","y":48.7175,"x":17.115},{"n":"Briar","c":"United States","y":32.9884,"x":-97.5528},{"n":"Wenham","c":"United States","y":42.6008,"x":-70.8826},{"n":"Ranson","c":"United States","y":39.325,"x":-77.8666},{"n":"Capistrello","c":"Italy","y":41.9736,"x":13.4},{"n":"Portoscuso","c":"Italy","y":39.2049,"x":8.3805},{"n":"Gouvy","c":"Belgium","y":50.1874,"x":5.9449},{"n":"Alcala de los Gazules","c":"Spain","y":36.4667,"x":-5.7167},{"n":"Dores de Guanhaes","c":"Brazil","y":-19.0578,"x":-42.9289},{"n":"Holytown","c":"United Kingdom","y":55.8229,"x":-3.9701},{"n":"Santana de Mangueira","c":"Brazil","y":-7.555,"x":-38.3319},{"n":"Oderwitz","c":"Germany","y":50.9589,"x":14.7186},{"n":"Moral de Calatrava","c":"Spain","y":38.8831,"x":-3.7167},{"n":"Sanom","c":"Thailand","y":15.1988,"x":103.7567},{"n":"Prroshyan","c":"Armenia","y":40.2472,"x":44.4194},{"n":"Birkenes","c":"Norway","y":58.4494,"x":8.2333},{"n":"Neda","c":"Spain","y":43.5,"x":-8.1167},{"n":"Seubersdorf","c":"Germany","y":49.1667,"x":11.6167},{"n":"Buje","c":"Croatia","y":45.4,"x":13.65},{"n":"Lake Wildwood","c":"United States","y":39.235,"x":-121.2003},{"n":"West Rockhill","c":"United States","y":40.3686,"x":-75.3489},{"n":"Samassi","c":"Italy","y":39.4815,"x":8.9053},{"n":"La Souterraine","c":"France","y":46.2381,"x":1.4856},{"n":"Tricarico","c":"Italy","y":40.6167,"x":16.15},{"n":"Ruskington","c":"United Kingdom","y":53.0444,"x":-0.3875},{"n":"Luhacovice","c":"Czechia","y":49.0998,"x":17.7575},{"n":"Sasykoli","c":"Russia","y":47.5515,"x":46.9968},{"n":"Gramastetten","c":"Austria","y":48.3811,"x":14.19},{"n":"Xibaipo","c":"China","y":38.35,"x":113.883},{"n":"Radoaia","c":"Moldova","y":47.7261,"x":28.1614},{"n":"Hendron","c":"United States","y":37.0346,"x":-88.6437},{"n":"Rio do Prado","c":"Brazil","y":-16.6078,"x":-40.57},{"n":"Laille","c":"France","y":47.9778,"x":-1.7183},{"n":"Ses Salines","c":"Spain","y":39.3386,"x":3.0536},{"n":"Ballston Spa","c":"United States","y":43.0068,"x":-73.8525},{"n":"Nong Na Kham","c":"Thailand","y":16.802,"x":102.3404},{"n":"Bisbee","c":"United States","y":31.4126,"x":-109.9179},{"n":"Vaglia","c":"Italy","y":43.9107,"x":11.28},{"n":"Chisago City","c":"United States","y":45.3474,"x":-92.9116},{"n":"Sariegos","c":"Spain","y":42.65,"x":-5.6333},{"n":"Santiago Zacatepec","c":"Mexico","y":17.15,"x":-95.9167},{"n":"North Stonington","c":"United States","y":41.4697,"x":-71.8755},{"n":"Laureana di Borrello","c":"Italy","y":38.4919,"x":16.0811},{"n":"Myrtletown","c":"United States","y":40.7888,"x":-124.1286},{"n":"Almaden","c":"Spain","y":38.7764,"x":-4.8369},{"n":"Victor Meireles","c":"Brazil","y":-26.8808,"x":-49.8328},{"n":"Chiny","c":"Belgium","y":49.7383,"x":5.3433},{"n":"Kut Bak","c":"Thailand","y":17.0857,"x":103.8204},{"n":"Gilmer","c":"United States","y":32.7317,"x":-94.946},{"n":"Williamsville","c":"United States","y":42.9623,"x":-78.7418},{"n":"Martic","c":"United States","y":39.8721,"x":-76.3144},{"n":"Guaramiranga","c":"Brazil","y":-4.2628,"x":-38.9328},{"n":"Bugyi","c":"Hungary","y":47.2233,"x":19.1499},{"n":"Jequitiba","c":"Brazil","y":-19.2358,"x":-44.0278},{"n":"Jinzhong","c":"China","y":26.3504,"x":103.4167},{"n":"Vereya","c":"Russia","y":55.3333,"x":36.1833},{"n":"San Jose del Golfo","c":"Guatemala","y":14.7629,"x":-90.3726},{"n":"Manoel Emidio","c":"Brazil","y":-8.0128,"x":-43.8719},{"n":"Layhill","c":"United States","y":39.087,"x":-77.0401},{"n":"Elmsford","c":"United States","y":41.0541,"x":-73.8143},{"n":"Farmers Loop","c":"United States","y":64.9061,"x":-147.6957},{"n":"Amoneburg","c":"Germany","y":50.7978,"x":8.9231},{"n":"Kyren","c":"Russia","y":51.6783,"x":102.1361},{"n":"Halsbrucke","c":"Germany","y":50.95,"x":13.3497},{"n":"Quesada","c":"Spain","y":37.85,"x":-3.0667},{"n":"Jicalapa","c":"El Salvador","y":13.55,"x":-89.5},{"n":"Driedorf","c":"Germany","y":50.6333,"x":8.1833},{"n":"Ribadavia","c":"Spain","y":42.2833,"x":-8.1333},{"n":"Selty","c":"Russia","y":57.3097,"x":52.1358},{"n":"Sao Francisco do Gloria","c":"Brazil","y":-20.7889,"x":-42.2678},{"n":"Tunari","c":"Romania","y":44.5472,"x":26.1413},{"n":"Val-David","c":"Canada","y":46.03,"x":-74.22},{"n":"Akarma","c":"Morocco","y":31.8667,"x":-7.65},{"n":"Robel","c":"Germany","y":53.3761,"x":12.6061},{"n":"Pinardville","c":"United States","y":43.001,"x":-71.5171},{"n":"Tiouli","c":"Morocco","y":34.4542,"x":-1.8986},{"n":"Frensdorf","c":"Germany","y":49.8167,"x":10.85},{"n":"Jaszkiser","c":"Hungary","y":47.45,"x":20.2167},{"n":"Bulboaca","c":"Moldova","y":46.8847,"x":29.3086},{"n":"Baystonhill","c":"United Kingdom","y":52.6727,"x":-2.7654},{"n":"Vila Nova de Paiva","c":"Portugal","y":40.85,"x":-7.7333},{"n":"Gresford","c":"United Kingdom","y":53.087,"x":-2.966},{"n":"Rabca","c":"Slovakia","y":49.4833,"x":19.4833},{"n":"Lagoa do Sitio","c":"Brazil","y":-6.5128,"x":-41.5839},{"n":"Sankt Peter in der Au Markt","c":"Austria","y":48.045,"x":14.6247},{"n":"Konstantinovka","c":"Russia","y":49.6175,"x":127.9889},{"n":"Diboll","c":"United States","y":31.1881,"x":-94.783},{"n":"Hutchinson Island South","c":"United States","y":27.3243,"x":-80.2425},{"n":"Salto do Itarare","c":"Brazil","y":-23.6008,"x":-49.6258},{"n":"Izmorene","c":"Morocco","y":35.1833,"x":-4},{"n":"Wiggensbach","c":"Germany","y":47.7458,"x":10.2319},{"n":"Ravena","c":"United States","y":42.4755,"x":-73.8113},{"n":"Skutec","c":"Czechia","y":49.8435,"x":15.9966},{"n":"In Buri","c":"Thailand","y":15.0054,"x":100.3264},{"n":"San Cristobal Amatlan","c":"Mexico","y":16.3167,"x":-96.4},{"n":"Ettrick","c":"United States","y":37.2435,"x":-77.4287},{"n":"Tannum Sands","c":"Australia","y":-23.9474,"x":151.3675},{"n":"Thatcher","c":"United States","y":32.832,"x":-109.7595},{"n":"South Bay","c":"United States","y":26.677,"x":-80.7265},{"n":"Hofheim in Unterfranken","c":"Germany","y":50.1333,"x":10.5167},{"n":"Grassano","c":"Italy","y":40.6333,"x":16.2833},{"n":"Ocean Bluff-Brant Rock","c":"United States","y":42.1006,"x":-70.6625},{"n":"Boheimkirchen","c":"Austria","y":48.1978,"x":15.7622},{"n":"Baselga di Pine","c":"Italy","y":46.1298,"x":11.2446},{"n":"Timber Pines","c":"United States","y":28.469,"x":-82.5999},{"n":"Llangefni","c":"United Kingdom","y":53.256,"x":-4.314},{"n":"West Wendover","c":"United States","y":40.7407,"x":-114.0783},{"n":"Larsmo","c":"Finland","y":63.75,"x":22.8},{"n":"Obetz","c":"United States","y":39.8671,"x":-82.9451},{"n":"Cristiano Otoni","c":"Brazil","y":-20.8319,"x":-43.8058},{"n":"Chipping Sodbury","c":"United Kingdom","y":51.538,"x":-2.394},{"n":"Staroye Shaygovo","c":"Russia","y":54.3031,"x":44.4739},{"n":"Douar Oulad Amer Leqliaa","c":"Morocco","y":32.2536,"x":-8.3972},{"n":"Florensac","c":"France","y":43.3828,"x":3.465},{"n":"DeWitt","c":"United States","y":41.8227,"x":-90.5448},{"n":"Ranstadt","c":"Germany","y":50.3575,"x":8.9842},{"n":"Ubersee","c":"Germany","y":47.8167,"x":12.4667},{"n":"Forchtenberg","c":"Germany","y":49.2833,"x":9.5667},{"n":"Aghbar","c":"Morocco","y":30.5167,"x":-6.8167},{"n":"Sawmills","c":"United States","y":35.8162,"x":-81.4779},{"n":"Paulden","c":"United States","y":34.8899,"x":-112.4938},{"n":"Newfield","c":"United States","y":42.3377,"x":-76.613},{"n":"Shebalino","c":"Russia","y":51.2917,"x":85.6772},{"n":"Maetinga","c":"Brazil","y":-14.6628,"x":-41.4919},{"n":"Malishka","c":"Armenia","y":39.7369,"x":45.3875},{"n":"Los Menucos","c":"Argentina","y":-40.8424,"x":-68.0896},{"n":"Forcalquier","c":"France","y":43.9592,"x":5.7797},{"n":"Flin Flon","c":"Canada","y":54.7667,"x":-101.8778},{"n":"Kulsheim","c":"Germany","y":49.6694,"x":9.5206},{"n":"Sainte-Marie-aux-Mines","c":"France","y":48.2467,"x":7.1839},{"n":"Celle Ligure","c":"Italy","y":44.3421,"x":8.5456},{"n":"Mae Chai","c":"Thailand","y":19.3453,"x":99.8138},{"n":"Nesvady","c":"Slovakia","y":47.9275,"x":18.1269},{"n":"Boulder Creek","c":"United States","y":37.1341,"x":-122.1271},{"n":"Weisenberg","c":"United States","y":40.6051,"x":-75.7099},{"n":"Salmourao","c":"Brazil","y":-21.6239,"x":-50.8608},{"n":"Kings Langley","c":"United Kingdom","y":51.7156,"x":-0.4569},{"n":"Marquina-Jemein","c":"Spain","y":43.2689,"x":-2.4964},{"n":"Erval Grande","c":"Brazil","y":-27.3908,"x":-52.5708},{"n":"Weitramsdorf","c":"Germany","y":50.25,"x":10.8667},{"n":"Tichigan","c":"United States","y":42.8087,"x":-88.215},{"n":"Conklin","c":"United States","y":42.0399,"x":-75.8342},{"n":"Walton","c":"United States","y":42.1741,"x":-75.1273},{"n":"Severnoye","c":"Russia","y":56.35,"x":78.3667},{"n":"Pound Ridge","c":"United States","y":41.2115,"x":-73.5747},{"n":"Tiszaluc","c":"Hungary","y":48.0367,"x":21.0629},{"n":"Abuzeydabad","c":"Iran","y":33.9042,"x":51.7686},{"n":"Agricolandia","c":"Brazil","y":-5.7989,"x":-42.6689},{"n":"Doffing","c":"United States","y":26.2788,"x":-98.3856},{"n":"Vedeno","c":"Russia","y":42.9616,"x":46.1038},{"n":"Bad Wiessee","c":"Germany","y":47.7167,"x":11.7167},{"n":"Fahrenzhausen","c":"Germany","y":48.35,"x":11.55},{"n":"Vomp","c":"Austria","y":47.3422,"x":11.6833},{"n":"Volovets","c":"Ukraine","y":48.7242,"x":23.2},{"n":"Collegeville","c":"United States","y":40.1873,"x":-75.4581},{"n":"Zlatitsa","c":"Bulgaria","y":42.7134,"x":24.1391},{"n":"Saint-Mars-du-Desert","c":"France","y":47.3664,"x":-1.4058},{"n":"West Pleasant View","c":"United States","y":39.732,"x":-105.1785},{"n":"Obersontheim","c":"Germany","y":49.0578,"x":9.8967},{"n":"Ninotsminda","c":"Georgia","y":41.2658,"x":43.5889},{"n":"Villadose","c":"Italy","y":45.0667,"x":11.9},{"n":"Grandwood Park","c":"United States","y":42.3929,"x":-87.9871},{"n":"La Caniza","c":"Spain","y":42.2128,"x":-8.2744},{"n":"Muzillac","c":"France","y":47.5531,"x":-2.4817},{"n":"Broadalbin","c":"United States","y":43.0764,"x":-74.1574},{"n":"Pfeffenhausen","c":"Germany","y":48.6667,"x":11.9667},{"n":"North Salem","c":"United States","y":41.333,"x":-73.6042},{"n":"Cierny Balog","c":"Slovakia","y":48.75,"x":19.6667},{"n":"Rehfelde","c":"Germany","y":52.52,"x":13.9292},{"n":"Sangeorgiu de Padure","c":"Romania","y":46.4303,"x":24.8417},{"n":"Monheim","c":"Germany","y":48.8422,"x":10.8564},{"n":"Zapfendorf","c":"Germany","y":50.0175,"x":10.9308},{"n":"Hudson","c":"Canada","y":45.45,"x":-74.15},{"n":"Crawfordville","c":"United States","y":30.1995,"x":-84.3634},{"n":"Bigoudine","c":"Morocco","y":30.7185,"x":-9.2101},{"n":"Dvory nad Zitavou","c":"Slovakia","y":47.9933,"x":18.2642},{"n":"Ibiquera","c":"Brazil","y":-12.6508,"x":-40.9339},{"n":"Maratea","c":"Italy","y":39.9928,"x":15.7167},{"n":"Victor Harbor","c":"Australia","y":-35.55,"x":138.6167},{"n":"Berdyuzhye","c":"Russia","y":55.8042,"x":68.3},{"n":"Plouigneau","c":"France","y":48.5675,"x":-3.7014},{"n":"Tamboara","c":"Brazil","y":-23.2,"x":-52.4689},{"n":"Erbendorf","c":"Germany","y":49.8333,"x":12.05},{"n":"La Garnache","c":"France","y":46.8906,"x":-1.8311},{"n":"Pornainen","c":"Finland","y":60.475,"x":25.375},{"n":"Gruissan","c":"France","y":43.1069,"x":3.0883},{"n":"Gananoque","c":"Canada","y":44.33,"x":-76.17},{"n":"Fezouane","c":"Morocco","y":34.9164,"x":-2.2042},{"n":"Rackwitz","c":"Germany","y":51.4333,"x":12.3833},{"n":"Oulad Messaoud","c":"Morocco","y":32.1883,"x":-7.1808},{"n":"Grigor'evka","c":"Kyrgyzstan","y":42.72,"x":77.47},{"n":"Ochi","c":"Japan","y":33.5328,"x":133.2519},{"n":"Peize","c":"Netherlands","y":53.1478,"x":6.4961},{"n":"Marcelino Ramos","c":"Brazil","y":-27.4619,"x":-51.9058},{"n":"Felicio dos Santos","c":"Brazil","y":-18.0769,"x":-43.2469},{"n":"Crihana Veche","c":"Moldova","y":45.8333,"x":28.1833},{"n":"Grosse Pointe","c":"United States","y":42.3915,"x":-82.9118},{"n":"Oerlenbach","c":"Germany","y":50.1497,"x":10.1331},{"n":"Cazouls-les-Beziers","c":"France","y":43.3922,"x":3.1014},{"n":"Zyryanskoye","c":"Russia","y":56.8306,"x":86.6272},{"n":"Schwaan","c":"Germany","y":53.9333,"x":12.1},{"n":"Blauvelt","c":"United States","y":41.0689,"x":-73.9545},{"n":"Maine","c":"United States","y":42.2,"x":-76.0314},{"n":"Alcala del Valle","c":"Spain","y":36.9,"x":-5.1667},{"n":"Brochier","c":"Brazil","y":-29.5508,"x":-51.5928},{"n":"Hanamaulu","c":"United States","y":21.9954,"x":-159.3493},{"n":"Bliss Corner","c":"United States","y":41.6054,"x":-70.9421},{"n":"Grambling","c":"United States","y":32.5276,"x":-92.7124},{"n":"San Dionisio del Mar","c":"Mexico","y":16.3217,"x":-94.7569},{"n":"Milisauti","c":"Romania","y":47.7864,"x":26.0044},{"n":"Vila Propicio","c":"Brazil","y":-15.4569,"x":-48.8889},{"n":"Bitche","c":"France","y":49.0517,"x":7.4253},{"n":"Krasnyy Kholm","c":"Russia","y":58.05,"x":37.0167},{"n":"Ebnat-Kappel","c":"Switzerland","y":47.2632,"x":9.1234},{"n":"Las Navas del Marques","c":"Spain","y":40.6039,"x":-4.3278},{"n":"Birdsboro","c":"United States","y":40.262,"x":-75.8099},{"n":"Upper Yoder","c":"United States","y":40.2995,"x":-78.9907},{"n":"Gameleiras","c":"Brazil","y":-15.0819,"x":-43.1239},{"n":"Rafael Fernandes","c":"Brazil","y":-6.195,"x":-38.2258},{"n":"St. Clairsville","c":"United States","y":40.0792,"x":-80.8997},{"n":"Ayden","c":"United States","y":35.4694,"x":-77.4167},{"n":"Russkiy Kameshkir","c":"Russia","y":52.8657,"x":46.0933},{"n":"Turriff","c":"United Kingdom","y":57.539,"x":-2.4611},{"n":"Combarbala","c":"Chile","y":-31.1667,"x":-71.05},{"n":"Colebrookdale","c":"United States","y":40.3468,"x":-75.6464},{"n":"Idrinskoye","c":"Russia","y":54.3697,"x":92.1342},{"n":"Margaret","c":"United States","y":33.6735,"x":-86.468},{"n":"Condofuri","c":"Italy","y":38,"x":15.8667},{"n":"Iznalloz","c":"Spain","y":37.3925,"x":-3.5225},{"n":"Aetsa","c":"Finland","y":61.2847,"x":22.6972},{"n":"Assoro","c":"Italy","y":37.6333,"x":14.4167},{"n":"Lenzkirch","c":"Germany","y":47.8681,"x":8.205},{"n":"Colville","c":"United States","y":48.5454,"x":-117.8986},{"n":"Bierutow","c":"Poland","y":51.1333,"x":17.5333},{"n":"Mukhorshibir","c":"Russia","y":51.0473,"x":107.8236},{"n":"Tourves","c":"France","y":43.4081,"x":5.9239},{"n":"Beas de Segura","c":"Spain","y":38.25,"x":-2.8833},{"n":"Goianorte","c":"Brazil","y":-8.7758,"x":-48.9319},{"n":"Ghent","c":"United States","y":42.312,"x":-73.6509},{"n":"Shibetsu","c":"Japan","y":43.6614,"x":145.1314},{"n":"Sumiswald","c":"Switzerland","y":47.0275,"x":7.7453},{"n":"Sievi","c":"Finland","y":63.9069,"x":24.5167},{"n":"Primera","c":"United States","y":26.2237,"x":-97.7528},{"n":"Oshamambe","c":"Japan","y":42.5136,"x":140.3804},{"n":"Askola","c":"Finland","y":60.5278,"x":25.6},{"n":"Sergeant Bluff","c":"United States","y":42.3976,"x":-96.3517},{"n":"Homestead Meadows North","c":"United States","y":31.8483,"x":-106.1707},{"n":"Lonsee","c":"Germany","y":48.5433,"x":9.9214},{"n":"Caturai","c":"Brazil","y":-16.4467,"x":-49.4892},{"n":"Freren","c":"Germany","y":52.4667,"x":7.5333},{"n":"Oberthulba","c":"Germany","y":50.2,"x":9.9667},{"n":"Flagler Beach","c":"United States","y":29.4716,"x":-81.1303},{"n":"Canutillo","c":"United States","y":31.9185,"x":-106.6006},{"n":"Rainsville","c":"United States","y":34.4939,"x":-85.8435},{"n":"Khatukay","c":"Russia","y":45.1833,"x":39.6667},{"n":"Brokenhead","c":"Canada","y":50.1428,"x":-96.5319},{"n":"Saint-Paul","c":"Canada","y":45.9833,"x":-73.45},{"n":"Recani","c":"Morocco","y":31.2842,"x":-4.2642},{"n":"Lone Grove","c":"United States","y":34.1809,"x":-97.2559},{"n":"La Puebla de Almoradiel","c":"Spain","y":39.6,"x":-3.1},{"n":"Penafiel","c":"Spain","y":41.6,"x":-4.1167},{"n":"Oliva de la Frontera","c":"Spain","y":38.2764,"x":-6.92},{"n":"Silver Hill","c":"United States","y":38.8392,"x":-76.9367},{"n":"Colona","c":"United States","y":41.4678,"x":-90.3445},{"n":"Alfandega da Fe","c":"Portugal","y":41.35,"x":-6.9667},{"n":"Catuti","c":"Brazil","y":-15.3578,"x":-42.9628},{"n":"Madre de Deus de Minas","c":"Brazil","y":-21.4828,"x":-44.33},{"n":"Egyek","c":"Hungary","y":47.6317,"x":20.8889},{"n":"Krauchenwies","c":"Germany","y":48.0169,"x":9.2503},{"n":"Negru Voda","c":"Romania","y":43.8181,"x":28.2125},{"n":"Halac","c":"Turkmenistan","y":38.0686,"x":64.8811},{"n":"Joroinen","c":"Finland","y":62.1792,"x":27.8278},{"n":"Bab Boudir","c":"Morocco","y":34.0697,"x":-4.1203},{"n":"Valverde","c":"Spain","y":27.8097,"x":-17.9151},{"n":"Montecastrilli","c":"Italy","y":42.65,"x":12.4833},{"n":"Battlement Mesa","c":"United States","y":39.4505,"x":-108.0066},{"n":"Post","c":"United States","y":33.1911,"x":-101.3814},{"n":"Dmitrovsk-Orlovskiy","c":"Russia","y":52.505,"x":35.1464},{"n":"Northumberland","c":"United States","y":43.1621,"x":-73.6305},{"n":"Spalt","c":"Germany","y":49.1739,"x":10.9275},{"n":"McGuire AFB","c":"United States","y":40.0285,"x":-74.5883},{"n":"Guzolandia","c":"Brazil","y":-20.6497,"x":-50.6619},{"n":"Montbard","c":"France","y":47.6231,"x":4.3369},{"n":"Serra do Navio","c":"Brazil","y":0.9014,"x":-52.0022},{"n":"Carmi","c":"United States","y":38.0863,"x":-88.1718},{"n":"Oberviechtach","c":"Germany","y":49.4667,"x":12.4167},{"n":"Lesignano de' Bagni","c":"Italy","y":44.643,"x":10.2994},{"n":"Ilok","c":"Croatia","y":45.2225,"x":19.3728},{"n":"Quantico Base","c":"United States","y":38.5228,"x":-77.3187},{"n":"Mineo","c":"Italy","y":37.2664,"x":14.6911},{"n":"Thung Yai","c":"Thailand","y":8.3132,"x":99.3631},{"n":"Oyer","c":"Norway","y":61.2653,"x":10.4133},{"n":"Stara Moravica","c":"Serbia","y":45.8689,"x":19.4661},{"n":"Gargalianoi","c":"Greece","y":37.0667,"x":21.6333},{"n":"Coco","c":"Puerto Rico","y":18.001,"x":-66.2603},{"n":"Lake","c":"United States","y":41.4549,"x":-75.3754},{"n":"Salbris","c":"France","y":47.4253,"x":2.0519},{"n":"Labranzagrande","c":"Colombia","y":5.5633,"x":-72.5775},{"n":"Schuylkill Haven","c":"United States","y":40.6284,"x":-76.1729},{"n":"Lacanau","c":"France","y":44.9792,"x":-1.0794},{"n":"Hollfeld","c":"Germany","y":49.9369,"x":11.2908},{"n":"Korpilahti","c":"Finland","y":62.0167,"x":25.5611},{"n":"Scott City","c":"United States","y":37.2243,"x":-89.536},{"n":"Poplar Grove","c":"United States","y":42.3516,"x":-88.8353},{"n":"Tineg","c":"Philippines","y":17.7828,"x":120.9439},{"n":"Sao Jose da Varginha","c":"Brazil","y":-19.71,"x":-44.5569},{"n":"Phanom","c":"Thailand","y":8.8584,"x":98.8122},{"n":"Bozhurishte","c":"Bulgaria","y":42.75,"x":23.2},{"n":"Bevagna","c":"Italy","y":42.9333,"x":12.6167},{"n":"Buellton","c":"United States","y":34.6152,"x":-120.1943},{"n":"Daleville","c":"United States","y":31.2915,"x":-85.7117},{"n":"Susel","c":"Germany","y":54.0778,"x":10.7181},{"n":"Castro de Rey","c":"Spain","y":43.2079,"x":-7.4001},{"n":"Belleview","c":"United States","y":29.0609,"x":-82.0565},{"n":"Schuyler Falls","c":"United States","y":44.6578,"x":-73.5842},{"n":"Denair","c":"United States","y":37.5262,"x":-120.7994},{"n":"Westlock","c":"Canada","y":54.1522,"x":-113.8511},{"n":"Bocaina de Minas","c":"Brazil","y":-22.1678,"x":-44.395},{"n":"Cacique Doble","c":"Brazil","y":-27.77,"x":-51.66},{"n":"Ostrov","c":"Romania","y":44.102,"x":27.4017},{"n":"Temiscouata-sur-le-Lac","c":"Canada","y":47.68,"x":-68.88},{"n":"Pojo","c":"Finland","y":60.0972,"x":23.5264},{"n":"Klavdiyevo-Tarasove","c":"Ukraine","y":50.5825,"x":30.0053},{"n":"Turvolandia","c":"Brazil","y":-21.8758,"x":-45.7869},{"n":"Sousel","c":"Portugal","y":38.9532,"x":-7.6757},{"n":"Tice","c":"United States","y":26.6758,"x":-81.8171},{"n":"Jalcomulco","c":"Mexico","y":19.3333,"x":-96.7667},{"n":"Quinta do Sol","c":"Brazil","y":-23.8519,"x":-52.13},{"n":"Morganville","c":"United States","y":40.3756,"x":-74.2444},{"n":"New Burlington","c":"United States","y":39.2624,"x":-84.552},{"n":"Mockrehna","c":"Germany","y":51.5,"x":12.8},{"n":"Bol'shoye Boldino","c":"Russia","y":55.0039,"x":45.3097},{"n":"Shannon","c":"Canada","y":46.8833,"x":-71.5167},{"n":"Osoyoos","c":"Canada","y":49.0325,"x":-119.4661},{"n":"Crucilandia","c":"Brazil","y":-20.3839,"x":-44.3369},{"n":"Rio Hondo","c":"United States","y":26.2347,"x":-97.5817},{"n":"Sheldon","c":"United States","y":43.1796,"x":-95.8441},{"n":"Lyubim","c":"Russia","y":58.35,"x":40.7},{"n":"North Fond du Lac","c":"United States","y":43.8107,"x":-88.4861},{"n":"Middle Paxton","c":"United States","y":40.3934,"x":-76.8753},{"n":"Whiston","c":"United Kingdom","y":53.4,"x":-1.32},{"n":"Moulay Driss Aghbal","c":"Morocco","y":33.7897,"x":-6.4986},{"n":"Isaccea","c":"Romania","y":45.2697,"x":28.4597},{"n":"Jose Raydam","c":"Brazil","y":-18.2189,"x":-42.4989},{"n":"Middleton-on-Sea","c":"United Kingdom","y":50.7949,"x":-0.6197},{"n":"Fox Chapel","c":"United States","y":40.5247,"x":-79.8898},{"n":"De Motte","c":"United States","y":41.1988,"x":-87.1973},{"n":"Silver Springs","c":"United States","y":39.3826,"x":-119.2149},{"n":"Laraquete","c":"Chile","y":-37.1677,"x":-73.1859},{"n":"Chaiten","c":"Chile","y":-42.9193,"x":-72.7088},{"n":"Kolochava","c":"Ukraine","y":48.4266,"x":23.6984},{"n":"Hearst","c":"Canada","y":49.6869,"x":-83.6544},{"n":"West Mead","c":"United States","y":41.6266,"x":-80.1247},{"n":"Canterbury","c":"United States","y":41.6979,"x":-71.9998},{"n":"Shanor-Northvue","c":"United States","y":40.9104,"x":-79.9157},{"n":"Dachi","c":"China","y":32.5293,"x":107.5658},{"n":"Domeikava","c":"Lithuania","y":54.9667,"x":23.9167},{"n":"Tiszaalpar","c":"Hungary","y":46.8167,"x":19.9833},{"n":"Shipston on Stour","c":"United Kingdom","y":52.06,"x":-1.623},{"n":"Itaja","c":"Brazil","y":-19.0669,"x":-51.5439},{"n":"Bella","c":"Italy","y":40.7667,"x":15.5333},{"n":"Sao Goncalo do Piaui","c":"Brazil","y":-5.9928,"x":-42.7028},{"n":"Massac","c":"United States","y":37.0335,"x":-88.6859},{"n":"Lower Oxford","c":"United States","y":39.806,"x":-75.9895},{"n":"Naganohara","c":"Japan","y":36.5522,"x":138.6375},{"n":"Alvaro de Carvalho","c":"Brazil","y":-22.0797,"x":-49.7197},{"n":"Munroe Falls","c":"United States","y":41.1386,"x":-81.4344},{"n":"Saltillo","c":"United States","y":34.3789,"x":-88.6939},{"n":"Monee","c":"United States","y":41.4181,"x":-87.7499},{"n":"Imagane","c":"Japan","y":42.4294,"x":140.0086},{"n":"Vedra","c":"Spain","y":42.7833,"x":-8.4667},{"n":"Agnone","c":"Italy","y":41.8104,"x":14.3785},{"n":"Sao Pedro da Uniao","c":"Brazil","y":-21.1269,"x":-46.615},{"n":"Iowa Falls","c":"United States","y":42.519,"x":-93.2662},{"n":"Roseburg North","c":"United States","y":43.2653,"x":-123.3025},{"n":"Ipigua","c":"Brazil","y":-20.6569,"x":-49.3869},{"n":"Congonhas do Norte","c":"Brazil","y":-18.8069,"x":-43.6808},{"n":"Buckley","c":"United States","y":47.1615,"x":-122.02},{"n":"Nottingham","c":"United States","y":43.1242,"x":-71.121},{"n":"Candor","c":"United States","y":42.2318,"x":-76.3329},{"n":"Stewartstown","c":"United States","y":39.7528,"x":-76.5925},{"n":"Hitra","c":"Norway","y":63.5472,"x":8.8547},{"n":"Z.hurivka","c":"Ukraine","y":50.4976,"x":31.7739},{"n":"Bohdanivka","c":"Ukraine","y":48.5015,"x":36.11},{"n":"Baile Herculane","c":"Romania","y":44.8772,"x":22.4175},{"n":"Florai","c":"Brazil","y":-23.3169,"x":-52.3039},{"n":"West Hills","c":"United States","y":40.8198,"x":-73.4339},{"n":"Glen Head","c":"United States","y":40.845,"x":-73.618},{"n":"Cerceda","c":"Spain","y":43.1886,"x":-8.4703},{"n":"Descoberto","c":"Brazil","y":-21.46,"x":-42.9678},{"n":"Azrar","c":"Morocco","y":30.1702,"x":-7.9234},{"n":"Pratania","c":"Brazil","y":-22.8083,"x":-48.6661},{"n":"Candeleda","c":"Spain","y":40.1558,"x":-5.2408},{"n":"Offutt AFB","c":"United States","y":41.1207,"x":-95.9209},{"n":"Dundee","c":"United States","y":28.0115,"x":-81.5995},{"n":"North Scituate","c":"United States","y":42.2121,"x":-70.7652},{"n":"Braunas","c":"Brazil","y":-19.0558,"x":-42.7158},{"n":"Montevideo","c":"United States","y":44.9505,"x":-95.7153},{"n":"Ibertioga","c":"Brazil","y":-21.43,"x":-43.9628},{"n":"Amelia","c":"United States","y":39.0229,"x":-84.2184},{"n":"Juuka","c":"Finland","y":63.2417,"x":29.25},{"n":"Vargem Grande do Rio Pardo","c":"Brazil","y":-15.4028,"x":-42.3078},{"n":"Barling","c":"United States","y":35.3284,"x":-94.2792},{"n":"Krum","c":"United States","y":33.2652,"x":-97.2256},{"n":"Tolfa","c":"Italy","y":42.15,"x":11.9333},{"n":"Alfred","c":"United States","y":42.2385,"x":-77.7891},{"n":"San Jeronimo Coatlan","c":"Mexico","y":16.2333,"x":-96.8667},{"n":"Uvat","c":"Russia","y":59.1423,"x":68.8888},{"n":"La Crescent","c":"United States","y":43.8299,"x":-91.3043},{"n":"Piedade dos Gerais","c":"Brazil","y":-20.4708,"x":-44.2269},{"n":"Cuparaque","c":"Brazil","y":-18.9689,"x":-41.0989},{"n":"Admont","c":"Austria","y":47.5731,"x":14.4611},{"n":"Sand","c":"Norway","y":60.4422,"x":11.5681},{"n":"Worland","c":"United States","y":44.0026,"x":-107.9543},{"n":"Olyphant","c":"United States","y":41.4507,"x":-75.5753},{"n":"Stafford Springs","c":"United States","y":41.9595,"x":-72.3105},{"n":"Whiskey Creek","c":"United States","y":26.5733,"x":-81.8903},{"n":"Doney Park","c":"United States","y":35.2687,"x":-111.5053},{"n":"Glennville","c":"United States","y":31.9382,"x":-81.9305},{"n":"Sea Cliff","c":"United States","y":40.8441,"x":-73.6442},{"n":"Lackawaxen","c":"United States","y":41.4866,"x":-75.0592},{"n":"Jose Boiteux","c":"Brazil","y":-26.9578,"x":-49.6278},{"n":"Muleshoe","c":"United States","y":34.2292,"x":-102.7284},{"n":"Chukhloma","c":"Russia","y":58.75,"x":42.7},{"n":"West Salem","c":"United States","y":43.8989,"x":-91.0883},{"n":"Mossamedes","c":"Brazil","y":-16.1269,"x":-50.215},{"n":"Guerneville","c":"United States","y":38.5137,"x":-122.9894},{"n":"Dinapigue","c":"Philippines","y":16.6667,"x":122.35},{"n":"Bom Jesus do Tocantins","c":"Brazil","y":-8.965,"x":-48.1658},{"n":"Hawaiian Ocean View","c":"United States","y":19.0959,"x":-155.775},{"n":"West Sayville","c":"United States","y":40.7294,"x":-73.105},{"n":"Mullins","c":"United States","y":34.2042,"x":-79.2535},{"n":"Peach Bottom","c":"United States","y":39.7478,"x":-76.3311},{"n":"Waldoboro","c":"United States","y":44.1098,"x":-69.3696},{"n":"Swoyersville","c":"United States","y":41.2975,"x":-75.8799},{"n":"Hoopeston","c":"United States","y":40.4608,"x":-87.6635},{"n":"Chechelnyk","c":"Ukraine","y":48.2122,"x":29.3622},{"n":"Dwight","c":"United States","y":41.0987,"x":-88.424},{"n":"Oak Park Heights","c":"United States","y":45.0324,"x":-92.8099},{"n":"Gillespie","c":"United States","y":39.1258,"x":-89.8173},{"n":"Midfield","c":"United States","y":33.4552,"x":-86.9226},{"n":"Antigonish","c":"Canada","y":45.6167,"x":-61.9833},{"n":"Igarka","c":"Russia","y":67.4667,"x":86.5667},{"n":"Ingham","c":"Australia","y":-18.65,"x":146.1667},{"n":"Oranjemund","c":"Namibia","y":-28.55,"x":16.4333},{"n":"Manjimup","c":"Australia","y":-34.2411,"x":116.1464},{"n":"Nata","c":"Botswana","y":-20.2103,"x":26.1867},{"n":"Carnarvon","c":"Australia","y":-24.8672,"x":113.6611},{"n":"Turukhansk","c":"Russia","y":65.7931,"x":87.9622},{"n":"Susuman","c":"Russia","y":62.7808,"x":148.1539},{"n":"Bagdarin","c":"Russia","y":54.4444,"x":113.5872},{"n":"Smithton","c":"Australia","y":-40.844,"x":145.12},{"n":"Svolvaer","c":"Norway","y":68.2333,"x":14.5667},{"n":"Narrogin","c":"Australia","y":-32.936,"x":117.178},{"n":"Westport","c":"New Zealand","y":-41.755,"x":171.599},{"n":"Perito Moreno","c":"Argentina","y":-46.59,"x":-70.9297},{"n":"Newman","c":"Australia","y":-23.3539,"x":119.7319},{"n":"Otavi","c":"Namibia","y":-19.6381,"x":17.3403},{"n":"Tepelene","c":"Albania","y":40.3,"x":20.0167},{"n":"Camargo","c":"Bolivia","y":-20.6403,"x":-65.2103},{"n":"Gobernador Gregores","c":"Argentina","y":-48.7509,"x":-70.2485},{"n":"Abra Pampa","c":"Argentina","y":-22.7167,"x":-65.7},{"n":"Pofadder","c":"South Africa","y":-29.1286,"x":19.3947},{"n":"Victorica","c":"Argentina","y":-36.2167,"x":-65.434},{"n":"La Paz","c":"Argentina","y":-33.4661,"x":-67.55},{"n":"Kyaukpyu","c":"Myanmar","y":19.4333,"x":93.55},{"n":"Sokolo","c":"Mali","y":14.7328,"x":-6.1219},{"n":"Merimbula","c":"Australia","y":-36.8983,"x":149.9011},{"n":"Manica","c":"Mozambique","y":-18.9344,"x":32.8756},{"n":"Katanning","c":"Australia","y":-33.6908,"x":117.5553},{"n":"Dehiba","c":"Tunisia","y":32.011,"x":10.7028},{"n":"Comandante Fontana","c":"Argentina","y":-25.3333,"x":-59.6833},{"n":"Erseke","c":"Albania","y":40.3333,"x":20.6833},{"n":"Weipa","c":"Australia","y":-12.6167,"x":141.8667},{"n":"Wallaroo","c":"Australia","y":-33.9167,"x":137.6167},{"n":"Renwick","c":"New Zealand","y":-41.5099,"x":173.8282},{"n":"Mitzic","c":"Gabon","y":0.7833,"x":11.5667},{"n":"Brus Laguna","c":"Honduras","y":15.75,"x":-84.4833},{"n":"Corovode","c":"Albania","y":40.5042,"x":20.2272},{"n":"Pevek","c":"Russia","y":69.7,"x":170.3167},{"n":"El Maiten","c":"Argentina","y":-42.05,"x":-71.1667},{"n":"Central Coast","c":"Australia","y":-33.42,"x":151.3},{"n":"Karmah an Nuzul","c":"Sudan","y":19.6008,"x":30.4097},{"n":"Mayumba","c":"Gabon","y":-3.4167,"x":10.65},{"n":"La Paloma","c":"Uruguay","y":-34.67,"x":-54.17},{"n":"Nautla","c":"Mexico","y":20.2167,"x":-96.7833},{"n":"Finnsnes","c":"Norway","y":69.2406,"x":18.0086},{"n":"Sapouy","c":"Burkina Faso","y":11.5478,"x":-1.775},{"n":"Sicasica","c":"Bolivia","y":-17.3333,"x":-67.7333},{"n":"Teseney","c":"Eritrea","y":15.11,"x":36.6575},{"n":"Ulaan-Uul","c":"Mongolia","y":44.3337,"x":111.2333},{"n":"Yomou","c":"Guinea","y":7.566,"x":-9.2533},{"n":"Lavumisa","c":"Swaziland","y":-27.3167,"x":31.9},{"n":"Proserpine","c":"Australia","y":-20.4017,"x":148.5814},{"n":"Port Douglas","c":"Australia","y":-16.4834,"x":145.4652},{"n":"Baltasar Brum","c":"Uruguay","y":-30.73,"x":-57.32},{"n":"Clare","c":"Australia","y":-33.8333,"x":138.6},{"n":"Tom Price","c":"Australia","y":-22.6939,"x":117.795},{"n":"Hokitika","c":"New Zealand","y":-42.7167,"x":170.9667},{"n":"Kirkenes","c":"Norway","y":69.7271,"x":30.0451},{"n":"Te Anau","c":"New Zealand","y":-45.4167,"x":167.7167},{"n":"Santa Barbara","c":"Chile","y":-37.6667,"x":-72.0167},{"n":"Srednekolymsk","c":"Russia","y":67.45,"x":153.7},{"n":"Magdalena","c":"Bolivia","y":-13.2606,"x":-64.0528},{"n":"Zhigansk","c":"Russia","y":66.7708,"x":123.371},{"n":"Charleville","c":"Australia","y":-26.4016,"x":146.2383},{"n":"Sebba","c":"Burkina Faso","y":13.4392,"x":0.5289},{"n":"Mopipi","c":"Botswana","y":-21.1833,"x":24.8833},{"n":"Donegal","c":"Ireland","y":54.65,"x":-8.117},{"n":"Mezen","c":"Russia","y":65.85,"x":44.2333},{"n":"Caballococha","c":"Peru","y":-3.9058,"x":-70.5164},{"n":"Teeli","c":"Russia","y":51.014,"x":90.2053},{"n":"Sinnamary","c":"French Guiana","y":5.38,"x":-52.96},{"n":"Cloncurry","c":"Australia","y":-20.7,"x":140.5},{"n":"Bordertown","c":"Australia","y":-36.3118,"x":140.7702},{"n":"Aigua","c":"Uruguay","y":-34.2,"x":-54.75},{"n":"Mkokotoni","c":"Tanzania","y":-5.88,"x":39.2731},{"n":"Buur Gaabo","c":"Somalia","y":-1.2192,"x":41.8372},{"n":"Karungu","c":"Kenya","y":-0.8496,"x":34.15},{"n":"Mangbwalu","c":"Congo (Kinshasa)","y":1.9504,"x":30.0333},{"n":"I-n-Amguel","c":"Algeria","y":23.6936,"x":5.1647},{"n":"Longreach","c":"Australia","y":-23.4422,"x":144.2491},{"n":"Merredin","c":"Australia","y":-31.482,"x":118.279},{"n":"Samaipata","c":"Bolivia","y":-18.1794,"x":-63.8756},{"n":"Padilla","c":"Bolivia","y":-19.3075,"x":-64.3022},{"n":"Pampa del Infierno","c":"Argentina","y":-26.5167,"x":-61.1667},{"n":"Kailu","c":"China","y":43.5837,"x":121.2},{"n":"Urubamba","c":"Peru","y":-13.3042,"x":-72.1167},{"n":"Hlatikulu","c":"Swaziland","y":-26.9667,"x":31.3167},{"n":"Rio Mayo","c":"Argentina","y":-45.687,"x":-70.26},{"n":"Cochrane","c":"Chile","y":-47.2539,"x":-72.5732},{"n":"Puerto Villamil","c":"Ecuador","y":-0.9333,"x":-91.0167},{"n":"Saint-Georges","c":"French Guiana","y":3.9105,"x":-51.81},{"n":"Scottsdale","c":"Australia","y":-41.1667,"x":147.5167},{"n":"Rorvik","c":"Norway","y":64.868,"x":11.2053},{"n":"Isafjordhur","c":"Iceland","y":66.0738,"x":-23.1417},{"n":"Bourke","c":"Australia","y":-30.0817,"x":145.9511},{"n":"Chumbicha","c":"Argentina","y":-28.8666,"x":-66.2333},{"n":"Huasco","c":"Chile","y":-28.45,"x":-71.2167},{"n":"Severo-Kuril'sk","c":"Russia","y":50.6833,"x":156.1167},{"n":"Nauta","c":"Peru","y":-4.5083,"x":-73.5833},{"n":"Exmouth","c":"Australia","y":-21.9331,"x":114.1281},{"n":"Queenstown","c":"Australia","y":-42.0667,"x":145.55},{"n":"Tarabuco","c":"Bolivia","y":-19.1825,"x":-64.915},{"n":"Baures","c":"Bolivia","y":-13.5833,"x":-63.5833},{"n":"Al `Alamayn","c":"Egypt","y":30.8333,"x":28.95},{"n":"El Dorado","c":"Venezuela","y":6.7167,"x":-61.6167},{"n":"Hofn","c":"Iceland","y":64.25,"x":-15.2167},{"n":"Boffa","c":"Guinea","y":10.185,"x":-14.043},{"n":"Dondo","c":"Angola","y":-9.6942,"x":14.4228},{"n":"Jurado","c":"Colombia","y":7.1114,"x":-77.7714},{"n":"Coroico","c":"Bolivia","y":-16.1833,"x":-67.7333},{"n":"Egilsstadhir","c":"Iceland","y":65.2667,"x":-14.4},{"n":"Saskylakh","c":"Russia","y":71.9653,"x":114.0923},{"n":"Lehututu","c":"Botswana","y":-23.9169,"x":21.8264},{"n":"Roura","c":"French Guiana","y":4.73,"x":-52.33},{"n":"Sorata","c":"Bolivia","y":-15.7736,"x":-68.6486},{"n":"Plumtree","c":"Zimbabwe","y":-20.4869,"x":27.8042},{"n":"Kaikoura","c":"New Zealand","y":-42.4,"x":173.6814},{"n":"Katwe","c":"Uganda","y":-0.1296,"x":29.92},{"n":"Alexander Bay","c":"South Africa","y":-28.6083,"x":16.5033},{"n":"Mejillones","c":"Chile","y":-23.1,"x":-70.45},{"n":"Wagin","c":"Australia","y":-33.3167,"x":117.35},{"n":"Tasiilaq","c":"Greenland","y":65.615,"x":-37.641},{"n":"Kingston South East","c":"Australia","y":-36.8167,"x":139.85},{"n":"Tumby Bay","c":"Australia","y":-34.3667,"x":136.1},{"n":"Borgarnes","c":"Iceland","y":64.5333,"x":-21.9167},{"n":"Qasigiannguit","c":"Greenland","y":68.8201,"x":-51.1932},{"n":"Puerto Williams","c":"Chile","y":-54.9341,"x":-67.6109},{"n":"Novyy Port","c":"Russia","y":67.6919,"x":72.8964},{"n":"Kalbarri","c":"Australia","y":-27.71,"x":114.16},{"n":"Nokaneng","c":"Botswana","y":-19.6639,"x":22.1917},{"n":"Port Denison","c":"Australia","y":-29.2833,"x":114.9167},{"n":"Penola","c":"Australia","y":-37.3786,"x":140.8362},{"n":"Artemovsk","c":"Russia","y":54.35,"x":93.4333},{"n":"Streaky Bay","c":"Australia","y":-32.8,"x":134.2167},{"n":"Cuevo","c":"Bolivia","y":-20.4547,"x":-63.5189},{"n":"Qaanaaq","c":"Greenland","y":77.467,"x":-69.233},{"n":"Halls Creek","c":"Australia","y":-18.23,"x":127.67},{"n":"Trancas","c":"Argentina","y":-26.2308,"x":-65.2781},{"n":"Uummannaq","c":"Greenland","y":70.6747,"x":-52.1264},{"n":"Peterborough","c":"Australia","y":-32.9667,"x":138.8333},{"n":"Alto Rio Senguer","c":"Argentina","y":-45.0419,"x":-70.8234},{"n":"Sierra Colorada","c":"Argentina","y":-40.5875,"x":-67.7583},{"n":"Iracoubo","c":"French Guiana","y":5.4804,"x":-53.22},{"n":"Ouyen","c":"Australia","y":-35.0667,"x":142.317},{"n":"Chibemba","c":"Angola","y":-15.7355,"x":13.8905},{"n":"Tajarhi","c":"Libya","y":24.2622,"x":14.5603},{"n":"Katherine","c":"Australia","y":-14.4667,"x":132.2667},{"n":"Lokwabe","c":"Botswana","y":-24.0961,"x":21.7781},{"n":"Chibia","c":"Angola","y":-15.1833,"x":13.7},{"n":"Paamiut","c":"Greenland","y":61.9956,"x":-49.6636},{"n":"Barcaldine","c":"Australia","y":-23.5555,"x":145.2888},{"n":"Tsau","c":"Botswana","y":-20.1686,"x":22.4558},{"n":"Tarutung","c":"Indonesia","y":2.0171,"x":98.9667},{"n":"Jaque","c":"Panama","y":7.519,"x":-78.166},{"n":"Ourense","c":"Spain","y":42.3364,"x":-7.8633},{"n":"Lavrentiya","c":"Russia","y":65.5842,"x":-170.9889},{"n":"Cowell","c":"Australia","y":-33.6833,"x":136.9167},{"n":"Principe da Beira","c":"Brazil","y":-12.4167,"x":-64.4166},{"n":"Meningie","c":"Australia","y":-35.6883,"x":139.338},{"n":"Las Lajas","c":"Argentina","y":-38.5208,"x":-70.3667},{"n":"Upernavik","c":"Greenland","y":72.7839,"x":-56.1506},{"n":"Hughenden","c":"Australia","y":-20.8438,"x":144.1986},{"n":"Verkhoyansk","c":"Russia","y":67.55,"x":133.3833},{"n":"Meekatharra","c":"Australia","y":-26.5931,"x":118.4911},{"n":"Uad Damran","c":"Morocco","y":27.4181,"x":-12.9869},{"n":"Yulara","c":"Australia","y":-25.2406,"x":130.9889},{"n":"Wyndham","c":"Australia","y":-15.4825,"x":128.123},{"n":"Susques","c":"Argentina","y":-23.4006,"x":-66.3672},{"n":"Chumikan","c":"Russia","y":54.7,"x":135.3},{"n":"Roebourne","c":"Australia","y":-20.7667,"x":117.15},{"n":"Yelimane","c":"Mali","y":15.1337,"x":-10.5666},{"n":"Kaupanger","c":"Norway","y":61.1844,"x":7.2422},{"n":"Tunduru","c":"Tanzania","y":-11.0896,"x":37.37},{"n":"Bicheno","c":"Australia","y":-41.8667,"x":148.2833},{"n":"Kullorsuaq","c":"Greenland","y":74.5781,"x":-57.225},{"n":"Winton","c":"Australia","y":-22.3913,"x":143.0381},{"n":"Oatlands","c":"Australia","y":-42.3,"x":147.3706},{"n":"Godhavn","c":"Greenland","y":69.2472,"x":-53.5333},{"n":"Leonora","c":"Australia","y":-28.88,"x":121.33},{"n":"Gingin","c":"Australia","y":-31.34,"x":115.91},{"n":"Ayan","c":"Russia","y":56.4686,"x":138.1867},{"n":"Wilcannia","c":"Australia","y":-31.565,"x":143.3678},{"n":"Onslow","c":"Australia","y":-21.6333,"x":115.1167},{"n":"Laverton","c":"Australia","y":-28.628,"x":122.403},{"n":"Morawa","c":"Australia","y":-29.2111,"x":116.009},{"n":"Southern Cross","c":"Australia","y":-31.25,"x":119.35},{"n":"Omolon","c":"Russia","y":65.2331,"x":160.537},{"n":"Linxi","c":"China","y":43.5171,"x":118.0333},{"n":"Comallo","c":"Argentina","y":-41.0333,"x":-70.2667},{"n":"Norseman","c":"Australia","y":-32.1961,"x":121.778},{"n":"Ravensthorpe","c":"Australia","y":-33.5831,"x":120.049},{"n":"Eidsvold","c":"Australia","y":-25.3667,"x":151.1333},{"n":"Pannawonica","c":"Australia","y":-21.635,"x":116.336},{"n":"Rodeo","c":"Argentina","y":-30.2156,"x":-69.14},{"n":"Ubombo","c":"South Africa","y":-27.5667,"x":32.0833},{"n":"Kimba","c":"Australia","y":-33.1333,"x":136.417},{"n":"Peterborough","c":"United Kingdom","y":52.5833,"x":-0.25},{"n":"Mount Magnet","c":"Australia","y":-28.06,"x":117.846},{"n":"Three Springs","c":"Australia","y":-29.5333,"x":115.717},{"n":"Uelen","c":"Russia","y":66.1667,"x":-169.8167},{"n":"Theodore","c":"Australia","y":-24.95,"x":150.0833},{"n":"Gastre","c":"Argentina","y":-42.2667,"x":-69.2167},{"n":"Tinogasta","c":"Argentina","y":-28.0667,"x":-67.5667},{"n":"Halfmoon Bay","c":"New Zealand","y":-46.899,"x":168.127},{"n":"Lemsid","c":"Morocco","y":26.5404,"x":-13.8477},{"n":"Mikhalkino","c":"Russia","y":69.4225,"x":161.53},{"n":"Lasserre","c":"Guadeloupe","y":16.2304,"x":-61.44},{"n":"Scoresbysund","c":"Greenland","y":70.4853,"x":-21.9667},{"n":"Telsen","c":"Argentina","y":-42.3833,"x":-66.95},{"n":"Karumba","c":"Australia","y":-17.4838,"x":140.8397},{"n":"Andamooka","c":"Australia","y":-30.447,"x":137.166},{"n":"Georgetown","c":"Australia","y":-18.3,"x":143.55},{"n":"Xangongo","c":"Angola","y":-16.7467,"x":14.9747},{"n":"Boulia","c":"Australia","y":-22.9,"x":139.9},{"n":"Espungabera","c":"Mozambique","y":-20.4531,"x":32.7725},{"n":"Adelaide River","c":"Australia","y":-13.2381,"x":131.1061},{"n":"Burketown","c":"Australia","y":-17.7167,"x":139.5667},{"n":"Progress","c":"Russia","y":49.7504,"x":129.6167},{"n":"Kairaki","c":"New Zealand","y":-43.385,"x":172.703},{"n":"Ivanhoe","c":"Australia","y":-32.8983,"x":144.3},{"n":"Nimule","c":"South Sudan","y":3.6,"x":32.06},{"n":"Thargomindah","c":"Australia","y":-28,"x":143.8167},{"n":"Pine Creek","c":"Australia","y":-13.8231,"x":131.833},{"n":"Ikela","c":"Congo (Kinshasa)","y":-1.1833,"x":23.2667},{"n":"Cazombo","c":"Angola","y":-11.9058,"x":22.9217},{"n":"Shoyna","c":"Russia","y":67.8783,"x":44.1526},{"n":"Enurmino","c":"Russia","y":66.9545,"x":-171.8671},{"n":"Timbedgha","c":"Mauritania","y":16.2447,"x":-8.1675},{"n":"Greytown","c":"Nicaragua","y":10.9167,"x":-83.7},{"n":"Camooweal","c":"Australia","y":-19.9167,"x":138.117},{"n":"Vilankulo","c":"Mozambique","y":-22,"x":35.3167},{"n":"Quipungo","c":"Angola","y":-14.8167,"x":14.55},{"n":"Sayhut","c":"Yemen","y":15.2105,"x":51.2454},{"n":"Korf","c":"Russia","y":60.3731,"x":166.0206},{"n":"La Esmeralda","c":"Venezuela","y":3.1738,"x":-65.5466},{"n":"Birdsville","c":"Australia","y":-25.8989,"x":139.352},{"n":"Bedourie","c":"Australia","y":-24.35,"x":139.4667},{"n":"Windorah","c":"Australia","y":-25.4206,"x":142.6547},{"n":"Punta Prieta","c":"Mexico","y":28.9289,"x":-114.1556},{"n":"Al `Uqaylah","c":"Libya","y":30.2558,"x":19.1994},{"n":"Ituni","c":"Guyana","y":5.5333,"x":-58.25},{"n":"Southend","c":"United Kingdom","y":51.55,"x":0.71},{"n":"Kovda","c":"Russia","y":66.6903,"x":32.8703},{"n":"Kingoonya","c":"Australia","y":-30.9,"x":135.3},{"n":"Hodrogo","c":"Mongolia","y":48.9664,"x":96.7833},{"n":"Tiyerbes","c":"Russia","y":64.3728,"x":120.549},{"n":"Ust'-Nyukzha","c":"Russia","y":56.5608,"x":121.6031},{"n":"Chegga","c":"Mauritania","y":25.3719,"x":-5.7867},{"n":"Zhilinda","c":"Russia","y":70.1333,"x":113.9833},{"n":"Ust'-Olenek","c":"Russia","y":73.0081,"x":119.833},{"n":"Olenek","c":"Russia","y":68.5042,"x":112.4472},{"n":"Ambarchik","c":"Russia","y":69.6167,"x":162.2833},{"n":"Logashkino","c":"Russia","y":70.8536,"x":153.8744},{"n":"Bolsward","c":"Netherlands","y":53.0667,"x":5.5333},{"n":"Mazoe","c":"Zimbabwe","y":-17.5196,"x":30.97},{"n":"Al Qurayyat","c":"Saudi Arabia","y":31.3333,"x":37.3333},{"n":"Yueyaquan","c":"China","y":40.1261,"x":94.6638},{"n":"Gamba","c":"Gabon","y":-2.65,"x":10},{"n":"Jixian","c":"China","y":35.7321,"x":107.9731},{"n":"Ksar Oulad Azzouz","c":"Morocco","y":32.8397,"x":-6.6947},{"n":"Qarabalyq","c":"Kazakhstan","y":53.7506,"x":62.0502},{"n":"Mandritsara","c":"Madagascar","y":-15.8328,"x":48.8166},{"n":"Lakha Nevre","c":"Russia","y":43.6228,"x":45.3397},{"n":"Olmos","c":"Peru","y":-5.9796,"x":-79.75},{"n":"Dangcheng","c":"China","y":39.5161,"x":94.8728},{"n":"Xiba","c":"China","y":40.1645,"x":98.7521},{"n":"Shiyuan","c":"China","y":35.7991,"x":102.8437},{"n":"Zengjiaba","c":"China","y":32.1305,"x":109.5307},{"n":"Aqadyr","c":"Kazakhstan","y":48.2749,"x":72.8599},{"n":"Sembe","c":"Congo (Brazzaville)","y":1.6404,"x":14.58},{"n":"Tounfafi","c":"Niger","y":14.0464,"x":5.9812},{"n":"Xiada","c":"China","y":24.0391,"x":113.4543},{"n":"Bou Zemou","c":"Morocco","y":32.1114,"x":-5.5197},{"n":"Sultan-Yangiyurt","c":"Russia","y":43.2167,"x":46.8667},{"n":"Dombarovskiy","c":"Russia","y":50.7546,"x":59.54},{"n":"Novogagatli","c":"Russia","y":43.4561,"x":46.4819},{"n":"Igrim","c":"Russia","y":63.1933,"x":64.4194},{"n":"Soldato-Aleksandrovskoye","c":"Russia","y":44.2659,"x":43.7562},{"n":"Pedro Luro","c":"Argentina","y":-39.5,"x":-62.6833},{"n":"Benbutucun","c":"China","y":42.0263,"x":86.6714},{"n":"Douar Oulad Bouziane","c":"Morocco","y":34.2083,"x":-5.0522},{"n":"Chechen-Aul","c":"Russia","y":43.2,"x":45.7889},{"n":"Weerselo","c":"Netherlands","y":52.3519,"x":6.8572},{"n":"Moisei","c":"Romania","y":47.654,"x":24.5507},{"n":"Ban Kham Pom","c":"Thailand","y":15.9653,"x":105.2112},{"n":"Douar El Mellaliyine","c":"Morocco","y":35.6264,"x":-5.3414},{"n":"Bandio","c":"Niger","y":13.8888,"x":1.0896},{"n":"Mikhaylovskoye","c":"Russia","y":43.0997,"x":44.6317},{"n":"Saumalkol","c":"Kazakhstan","y":53.2914,"x":68.1046},{"n":"Xiangping","c":"China","y":24.6014,"x":112.1222},{"n":"Monte Cristo","c":"Argentina","y":-31.3431,"x":-63.9444},{"n":"Kawara","c":"Niger","y":14.0706,"x":5.6715},{"n":"Leichi","c":"China","y":36.3351,"x":110.2612},{"n":"Sholaqqorghan","c":"Kazakhstan","y":43.765,"x":69.1814},{"n":"Podstepki","c":"Russia","y":53.5151,"x":49.1294},{"n":"Ust'-Nera","c":"Russia","y":64.5666,"x":143.2},{"n":"Dazhuangzi","c":"China","y":40.2321,"x":99.0558},{"n":"Vinsady","c":"Russia","y":44.0817,"x":42.9606},{"n":"Jumla","c":"Nepal","y":29.25,"x":82.2167},{"n":"Coatetelco","c":"Mexico","y":18.7294,"x":-99.3256},{"n":"Ixtapa Zihuatanejo","c":"Mexico","y":17.6367,"x":-101.5514},{"n":"Shar","c":"Kazakhstan","y":49.6003,"x":81.0549},{"n":"Mandishah","c":"Egypt","y":28.3515,"x":28.9317},{"n":"Liesti","c":"Romania","y":45.616,"x":27.5442},{"n":"Qashyr","c":"Kazakhstan","y":53.0804,"x":76.09},{"n":"Daping","c":"China","y":24.6501,"x":112.1693},{"n":"Yanchep","c":"Australia","y":-31.55,"x":115.634},{"n":"Zhangaozen","c":"Kazakhstan","y":43.3004,"x":52.8},{"n":"Toulou","c":"Niger","y":14.1688,"x":5.199},{"n":"Marrupa","c":"Mozambique","y":-13.1833,"x":37.5},{"n":"Verkhniye Achaluki","c":"Russia","y":43.3469,"x":44.6975},{"n":"Gidan Ider","c":"Niger","y":14.0131,"x":5.3185},{"n":"Al Quway`iyah","c":"Saudi Arabia","y":24.0737,"x":45.2806},{"n":"Marginea","c":"Romania","y":47.8167,"x":25.8333},{"n":"Nerubaiske","c":"Ukraine","y":46.5467,"x":30.6306},{"n":"Chermen","c":"Russia","y":43.15,"x":44.7333},{"n":"Vicam Pueblo","c":"Mexico","y":27.6422,"x":-110.2897},{"n":"Zhujiagua","c":"China","y":38.2242,"x":110.4032},{"n":"Corman Park No. 344","c":"Canada","y":52.2291,"x":-106.8002},{"n":"Justiniano Posse","c":"Argentina","y":-32.8833,"x":-62.6667},{"n":"Elin-Yurt","c":"Russia","y":43.6717,"x":44.9602},{"n":"Ban Tham","c":"Thailand","y":19.0727,"x":100.0698},{"n":"Ban Pa Lu Ru","c":"Thailand","y":6.0874,"x":101.8728},{"n":"Alougoum","c":"Morocco","y":30.2778,"x":-6.8292},{"n":"Mihail Kogalniceanu","c":"Romania","y":44.3667,"x":28.4583},{"n":"Masindi Port","c":"Uganda","y":1.7004,"x":32.0699},{"n":"Hukou","c":"China","y":36.1371,"x":110.4104},{"n":"Ivanivka","c":"Ukraine","y":48.2325,"x":38.9525},{"n":"Olovyannaya","c":"Russia","y":50.95,"x":115.5666},{"n":"Baili","c":"China","y":35.0333,"x":107.389},{"n":"Qarqaraly","c":"Kazakhstan","y":49.4249,"x":75.4649},{"n":"Khomutovo","c":"Russia","y":52.4758,"x":104.4156},{"n":"Sarmakovo","c":"Russia","y":43.7397,"x":43.1894},{"n":"Putina","c":"Peru","y":-15.47,"x":-69.43},{"n":"Happy Valley","c":"Canada","y":53.3396,"x":-60.4467},{"n":"Borcea","c":"Romania","y":44.3294,"x":27.7315},{"n":"Oldeani","c":"Tanzania","y":-3.35,"x":35.55},{"n":"Ban Banlang","c":"Thailand","y":15.2255,"x":101.9112},{"n":"Ban Huai Mai","c":"Thailand","y":18.4217,"x":100.1403},{"n":"Grabovo","c":"Russia","y":53.3794,"x":45.0619},{"n":"Afumati","c":"Romania","y":44.5255,"x":26.2496},{"n":"Guazhoucun","c":"China","y":40.4638,"x":95.6712},{"n":"Qusmuryn","c":"Kazakhstan","y":52.458,"x":64.6},{"n":"Staraya Sunzha","c":"Russia","y":43.3356,"x":45.7439},{"n":"Kontcha","c":"Cameroon","y":7.967,"x":12.2333},{"n":"Matarka","c":"Morocco","y":33.2106,"x":-2.5564},{"n":"Baksanenok","c":"Russia","y":43.6897,"x":43.6547},{"n":"Ain Bida","c":"Morocco","y":33.9856,"x":-4.8931},{"n":"Lumina","c":"Romania","y":44.2833,"x":28.5667},{"n":"Ch'osan-up","c":"Korea, North","y":40.8255,"x":125.8008},{"n":"Ban Pao","c":"Thailand","y":16.377,"x":101.9751},{"n":"Benoy-Yurt","c":"Russia","y":43.6931,"x":45.0503},{"n":"Iqaluit","c":"Canada","y":63.7598,"x":-68.5107},{"n":"Kalabo","c":"Zambia","y":-14.9896,"x":22.68},{"n":"Velykyi Dalnyk","c":"Ukraine","y":46.4658,"x":30.5583},{"n":"Bansang","c":"Gambia, The","y":13.4336,"x":-14.65},{"n":"Baguey","c":"Niger","y":14.8503,"x":5.5636},{"n":"Bayghanin","c":"Kazakhstan","y":48.6917,"x":55.874},{"n":"Holmestrand","c":"Norway","y":59.4875,"x":10.3175},{"n":"Kabardinka","c":"Russia","y":44.6511,"x":37.9386},{"n":"Senillosa","c":"Argentina","y":-39,"x":-68.4167},{"n":"Morfou","c":"Cyprus","y":35.1978,"x":32.9927},{"n":"Ivanovskoye","c":"Russia","y":44.5772,"x":41.8697},{"n":"Birnin Kazoe","c":"Niger","y":14.2171,"x":9.9702},{"n":"Tranqueras","c":"Uruguay","y":-31.1833,"x":-55.7667},{"n":"Sipoteni","c":"Moldova","y":47.2764,"x":28.1983},{"n":"Neiafu","c":"Tonga","y":-18.6496,"x":-173.9833},{"n":"Laguna Larga","c":"Argentina","y":-31.7767,"x":-63.8025},{"n":"Yaama","c":"Niger","y":14.3601,"x":5.4975},{"n":"Luan Chau","c":"Vietnam","y":21.74,"x":103.343},{"n":"Sierra Grande","c":"Argentina","y":-41.6061,"x":-65.3558},{"n":"Mzizal","c":"Morocco","y":32.2269,"x":-4.6475},{"n":"Kurush","c":"Russia","y":43.385,"x":46.7592},{"n":"Basing","c":"United Kingdom","y":51.2704,"x":-1.0473},{"n":"Osakarovka","c":"Kazakhstan","y":50.5799,"x":72.5699},{"n":"Bossembele","c":"Central African Republic","y":5.267,"x":17.65},{"n":"Dalakovo","c":"Russia","y":43.2375,"x":44.5897},{"n":"Peterculter","c":"United Kingdom","y":57.097,"x":-2.2657},{"n":"Nkob","c":"Morocco","y":30.8722,"x":-5.8639},{"n":"Ban Bua Ngam","c":"Thailand","y":14.8108,"x":105.2312},{"n":"Hafendorf","c":"Austria","y":47.4556,"x":15.3194},{"n":"Bestobe","c":"Kazakhstan","y":52.4997,"x":73.0997},{"n":"Tobyl","c":"Kazakhstan","y":52.698,"x":62.5749},{"n":"Okondja","c":"Gabon","y":-0.6829,"x":13.7833},{"n":"Berdakel","c":"Russia","y":43.2645,"x":45.8226},{"n":"Sichon","c":"Thailand","y":9.0072,"x":99.9018},{"n":"Brownsburg","c":"Canada","y":45.6703,"x":-74.4467},{"n":"Dafawa","c":"Niger","y":14.1371,"x":5.0637},{"n":"Ban Karaket","c":"Thailand","y":8.0887,"x":100.1398},{"n":"Datian","c":"China","y":22.4814,"x":112.1191},{"n":"Taza","c":"Niger","y":15.3608,"x":5.2072},{"n":"Zambezi","c":"Zambia","y":-13.54,"x":23.1099},{"n":"Dosey","c":"Niger","y":13.8825,"x":5.1928},{"n":"Guanzhuang","c":"China","y":36.9218,"x":109.9341},{"n":"Angoul Denya","c":"Niger","y":14.3433,"x":5.7002},{"n":"Melekeok","c":"Palau","y":7.4874,"x":134.6265},{"n":"Rio Primero","c":"Argentina","y":-31.3333,"x":-63.6167},{"n":"La Punta","c":"Chile","y":-34.0125,"x":-70.6501},{"n":"Quellon","c":"Chile","y":-43.1201,"x":-73.6203},{"n":"Staryy Cherek","c":"Russia","y":43.475,"x":43.8611},{"n":"Bghaghza","c":"Morocco","y":35.4542,"x":-5.6125},{"n":"Azitan","c":"China","y":34.7101,"x":103.3152},{"n":"Nicoadala","c":"Mozambique","y":-17.6077,"x":36.8197},{"n":"Sidi Bettach","c":"Morocco","y":33.5667,"x":-6.8936},{"n":"Yangjiagetai","c":"China","y":36.7124,"x":110.1864},{"n":"Ban Kamphuan","c":"Thailand","y":9.3782,"x":98.4209},{"n":"Dovhe","c":"Ukraine","y":48.3675,"x":23.2869},{"n":"Psygansu","c":"Russia","y":43.4125,"x":43.8056},{"n":"Karibib","c":"Namibia","y":-21.939,"x":15.853},{"n":"Toubout","c":"Niger","y":14.3387,"x":5.5951},{"n":"Ban Wang Kalang","c":"Thailand","y":15.1436,"x":98.4498},{"n":"Zholymbet","c":"Kazakhstan","y":51.7502,"x":71.7099},{"n":"Tuzla","c":"Romania","y":44,"x":28.6333},{"n":"Nova Maiachka","c":"Ukraine","y":46.6033,"x":33.2283},{"n":"Supsekh","c":"Russia","y":44.8611,"x":37.3667},{"n":"Outerbat","c":"Morocco","y":32.1433,"x":-5.3503},{"n":"Velyki Komiaty","c":"Ukraine","y":48.2386,"x":22.9789},{"n":"Laba","c":"Niger","y":14.6187,"x":5.9375},{"n":"Levokumka","c":"Russia","y":44.2297,"x":43.1481},{"n":"Moussadeye","c":"Niger","y":13.3918,"x":3.1952},{"n":"Golfito","c":"Costa Rica","y":8.65,"x":-83.15},{"n":"Khandyga","c":"Russia","y":62.666,"x":135.6},{"n":"Taouz","c":"Morocco","y":30.9069,"x":-3.9958},{"n":"Beni Khaled","c":"Morocco","y":34.8614,"x":-2.021},{"n":"Rozsoshentsi","c":"Ukraine","y":49.5406,"x":34.5042},{"n":"Saddina","c":"Morocco","y":35.6633,"x":-5.4886},{"n":"Sadova","c":"Romania","y":43.9,"x":23.9667},{"n":"Lozuvatka","c":"Ukraine","y":48.061,"x":33.2927},{"n":"Kurumoch","c":"Russia","y":53.4889,"x":50.0372},{"n":"Bakin Birji I","c":"Niger","y":14.2565,"x":8.7943},{"n":"Dagou","c":"China","y":37.4833,"x":102.5742},{"n":"Domna","c":"Russia","y":51.8971,"x":113.1573},{"n":"Voronovytsia","c":"Ukraine","y":49.0989,"x":28.6831},{"n":"Saint-Lambert-de-Lauzon","c":"Canada","y":46.5865,"x":-71.2271},{"n":"Ban Phon Yai","c":"Thailand","y":17.1821,"x":104.3316},{"n":"Tyourout","c":"Niger","y":14.1542,"x":5.4391},{"n":"Sokole","c":"Niger","y":14.8347,"x":5.7036},{"n":"Ban Tai","c":"Thailand","y":17.4333,"x":103.4051},{"n":"Diosig","c":"Romania","y":47.3,"x":22},{"n":"Kubei","c":"Ukraine","y":45.7925,"x":28.7475},{"n":"Muskoka Falls","c":"Canada","y":45.1264,"x":-79.558},{"n":"Qazaly","c":"Kazakhstan","y":45.7628,"x":62.1075},{"n":"Bile","c":"Ukraine","y":48.4936,"x":39.0367},{"n":"Shechengtan","c":"China","y":37.1995,"x":112.9408},{"n":"Nasarawa","c":"Niger","y":14.0821,"x":5.8153},{"n":"Gilau","c":"Romania","y":46.75,"x":23.3833},{"n":"Vladimirescu","c":"Romania","y":46.15,"x":21.4},{"n":"Cobadin","c":"Romania","y":44.0627,"x":28.2349},{"n":"Adis","c":"Morocco","y":29.6919,"x":-7.9856},{"n":"Vozdvizhenka","c":"Russia","y":43.9,"x":131.9333},{"n":"Bingzhongluo","c":"China","y":28.0174,"x":98.6212},{"n":"Balotesti","c":"Romania","y":44.6128,"x":26.0787},{"n":"Akka Irene","c":"Morocco","y":29.9919,"x":-7.5322},{"n":"Jiyek","c":"China","y":46.3916,"x":82.8928},{"n":"Bosanci","c":"Romania","y":47.5833,"x":26.3167},{"n":"Divnomorskoye","c":"Russia","y":44.5008,"x":38.1353},{"n":"Fangjiata","c":"China","y":38.2755,"x":110.0961},{"n":"Tatarka","c":"Russia","y":44.9575,"x":41.9299},{"n":"Peretu","c":"Romania","y":44.05,"x":25.0833},{"n":"Madeta II","c":"Niger","y":14.2713,"x":6.014},{"n":"Garswood","c":"United Kingdom","y":53.488,"x":-2.67},{"n":"Cudalbi","c":"Romania","y":45.7833,"x":27.7},{"n":"San Matias","c":"Bolivia","y":-16.36,"x":-58.42},{"n":"Lydiate","c":"United Kingdom","y":53.536,"x":-2.959},{"n":"Fontanka","c":"Ukraine","y":46.5644,"x":30.8586},{"n":"Belbeji","c":"Niger","y":14.6811,"x":7.9949},{"n":"Aouloumal","c":"Niger","y":14.2283,"x":6.0301},{"n":"Velikovechnoye","c":"Russia","y":44.935,"x":39.755},{"n":"Strugi-Krasnyye","c":"Russia","y":58.2719,"x":29.1083},{"n":"Tamchen","c":"Mexico","y":20.8753,"x":-89.9319},{"n":"Strejnicu","c":"Romania","y":44.9176,"x":25.9563},{"n":"Oum Azza","c":"Morocco","y":33.8808,"x":-6.7858},{"n":"Dysart et al","c":"Canada","y":45.2042,"x":-78.4047},{"n":"Khurba","c":"Russia","y":50.4069,"x":136.8761},{"n":"Kushnytsia","c":"Ukraine","y":48.4517,"x":23.2581},{"n":"Kudryashovskiy","c":"Russia","y":55.0944,"x":82.7778},{"n":"Tadighoust","c":"Morocco","y":31.8017,"x":-4.9673},{"n":"Lakkha Nevre","c":"Russia","y":43.6103,"x":45.2453},{"n":"Beresford","c":"Canada","y":47.7181,"x":-65.8794},{"n":"Ban Dong Mafai","c":"Thailand","y":17.275,"x":103.994},{"n":"Remetea","c":"Romania","y":46.7935,"x":25.4503},{"n":"Baciu","c":"Romania","y":46.7928,"x":23.525},{"n":"Hamdallay","c":"Niger","y":13.5572,"x":2.4064},{"n":"Pattijoki","c":"Finland","y":64.6931,"x":24.575},{"n":"Ndende","c":"Gabon","y":-2.3829,"x":11.3833},{"n":"El Palqui","c":"Chile","y":-30.7679,"x":-70.9433},{"n":"Chemodanovka","c":"Russia","y":53.2353,"x":45.2475},{"n":"Ban Chiang","c":"Thailand","y":17.3999,"x":103.2259},{"n":"Douglas","c":"Canada","y":46.2819,"x":-66.942},{"n":"Sandominic","c":"Romania","y":46.5833,"x":25.7833},{"n":"Asoudie","c":"Niger","y":14.3841,"x":5.7345},{"n":"Ivanovka","c":"Russia","y":51.7183,"x":55.1882},{"n":"Umba","c":"Russia","y":66.6814,"x":34.3455},{"n":"Ahrarne","c":"Ukraine","y":45.0186,"x":34.0544},{"n":"Sutysky","c":"Ukraine","y":49.0422,"x":28.4208},{"n":"Hollington","c":"United Kingdom","y":50.875,"x":0.548},{"n":"Sabon Birni","c":"Niger","y":11.8847,"x":3.5931},{"n":"Apahida","c":"Romania","y":46.8078,"x":23.74},{"n":"Vicovu de Jos","c":"Romania","y":47.9011,"x":25.7266},{"n":"Lea Town","c":"United Kingdom","y":53.774,"x":-2.795},{"n":"Lozova","c":"Moldova","y":47.1328,"x":28.3856},{"n":"Dindi","c":"Niger","y":14.4179,"x":5.6135},{"n":"Barbulesti","c":"Romania","y":44.7261,"x":26.5992},{"n":"Plosca","c":"Romania","y":44.0236,"x":25.1488},{"n":"Chapaev","c":"Kazakhstan","y":50.1915,"x":51.1449},{"n":"Dan Kori","c":"Niger","y":13.9109,"x":7.9719},{"n":"Tazovskiy","c":"Russia","y":67.4667,"x":78.7},{"n":"Achikulak","c":"Russia","y":44.5467,"x":44.8314},{"n":"General Zaragoza","c":"Mexico","y":23.8667,"x":-97.8833},{"n":"Ban Talat Ko Ta Ba Ru","c":"Thailand","y":6.4585,"x":101.3543},{"n":"Masalata","c":"Niger","y":13.7795,"x":5.2077},{"n":"Shemordan","c":"Russia","y":56.1833,"x":50.3833},{"n":"Toudouni","c":"Niger","y":14.7398,"x":5.4578},{"n":"Urvan","c":"Russia","y":43.4894,"x":43.7653},{"n":"Garadoume","c":"Niger","y":14.3671,"x":5.8841},{"n":"Kelente","c":"Niger","y":14.3234,"x":5.8087},{"n":"Mundybash","c":"Russia","y":53.2333,"x":87.3167},{"n":"Zandak","c":"Russia","y":43.0572,"x":46.4556},{"n":"Djibale","c":"Niger","y":14.5007,"x":5.9857},{"n":"Sokilnyky","c":"Ukraine","y":49.7769,"x":23.9614},{"n":"Ibstock","c":"United Kingdom","y":52.687,"x":-1.401},{"n":"Aiyomojok","c":"Cameroon","y":5.7504,"x":8.9833},{"n":"Feldru","c":"Romania","y":47.2833,"x":24.6},{"n":"Giroc","c":"Romania","y":45.7,"x":21.2333},{"n":"Peris","c":"Romania","y":44.6833,"x":26.0167},{"n":"Piggs Peak","c":"Swaziland","y":-25.961,"x":31.247},{"n":"Spasskoye","c":"Russia","y":44.6145,"x":132.797},{"n":"Sokur","c":"Russia","y":55.2092,"x":83.3183},{"n":"Kamennomostskoye","c":"Russia","y":43.7336,"x":43.0458},{"n":"Bouti","c":"Niger","y":13.9872,"x":11.3333},{"n":"Kaora Abdou","c":"Niger","y":14.4525,"x":5.6604},{"n":"Chernolesskoye","c":"Russia","y":44.7156,"x":43.7133},{"n":"Koundoumawa","c":"Niger","y":13.6702,"x":8.3627},{"n":"Fderik","c":"Mauritania","y":22.679,"x":-12.707},{"n":"Soubdou","c":"Niger","y":13.8146,"x":10.5399},{"n":"Krym","c":"Russia","y":47.3003,"x":39.5164},{"n":"Saal","c":"Germany","y":48.9011,"x":11.9319},{"n":"Horonda","c":"Ukraine","y":48.3786,"x":22.5681},{"n":"Presnovka","c":"Kazakhstan","y":54.6703,"x":67.15},{"n":"Kazminskoye","c":"Russia","y":44.5888,"x":41.673},{"n":"General Levalle","c":"Argentina","y":-34.0167,"x":-63.9167},{"n":"Tiksi","c":"Russia","y":71.6269,"x":128.835},{"n":"Princeville","c":"Canada","y":46.1667,"x":-71.8833},{"n":"Perugorria","c":"Argentina","y":-29.3414,"x":-58.6106},{"n":"Macea","c":"Romania","y":46.38,"x":21.33},{"n":"Ruscova","c":"Romania","y":47.7883,"x":24.2808},{"n":"Oituz","c":"Romania","y":46.2039,"x":26.6231},{"n":"Jiajiaping","c":"China","y":36.9744,"x":110.0224},{"n":"Prigorodnoye","c":"Russia","y":43.2531,"x":45.7581},{"n":"Rucar","c":"Romania","y":45.3886,"x":25.1741},{"n":"Rodna","c":"Romania","y":47.4217,"x":24.8122},{"n":"Kasempa","c":"Zambia","y":-13.4596,"x":25.82},{"n":"Altud","c":"Russia","y":43.7181,"x":43.8722},{"n":"Riadi Dan Bizo","c":"Niger","y":13.4334,"x":7.1399},{"n":"Kugulta","c":"Russia","y":45.3642,"x":42.3869},{"n":"Crowsnest Pass","c":"Canada","y":49.5955,"x":-114.5136},{"n":"Vitomirice","c":"Kosovo","y":42.6819,"x":20.3173},{"n":"Gugesti","c":"Romania","y":45.567,"x":27.1287},{"n":"Vossevangen","c":"Norway","y":60.63,"x":6.441},{"n":"Benoy","c":"Russia","y":42.9774,"x":46.3094},{"n":"Okhotsk","c":"Russia","y":59.383,"x":143.217},{"n":"Stanthorpe","c":"Australia","y":-28.6547,"x":151.935},{"n":"Zoria","c":"Ukraine","y":45.9917,"x":29.6989},{"n":"Souloulou","c":"Niger","y":13.6127,"x":6.4177},{"n":"Tsibanobalka","c":"Russia","y":44.9803,"x":37.3439},{"n":"Horenka","c":"Ukraine","y":50.5569,"x":30.3175},{"n":"Bullsbrook","c":"Australia","y":-31.663,"x":116.03},{"n":"Stepanivka","c":"Ukraine","y":50.943,"x":34.6334},{"n":"Bialet Masse","c":"Argentina","y":-31.3214,"x":-64.4694},{"n":"Tash-Dobo","c":"Kyrgyzstan","y":42.7237,"x":74.5721},{"n":"Moulela","c":"Niger","y":14.6338,"x":4.9575},{"n":"Renzhuangcun","c":"China","y":28.0453,"x":120.2476},{"n":"Cairima","c":"China","y":33.3651,"x":102.0968},{"n":"Zawyat Sidi Hamza","c":"Morocco","y":32.4403,"x":-4.7114},{"n":"Hejiachuan","c":"China","y":38.4679,"x":110.7513},{"n":"Witu","c":"Kenya","y":-2.3796,"x":40.43},{"n":"Nakoni","c":"Niger","y":14.1094,"x":5.9159},{"n":"Motatei","c":"Romania","y":44.1,"x":23.2},{"n":"Sollom","c":"United Kingdom","y":53.662,"x":-2.825},{"n":"Ait Athmane","c":"Morocco","y":30.6142,"x":-5.5223},{"n":"Tura","c":"Russia","y":64.2833,"x":100.25},{"n":"Prejmer","c":"Romania","y":45.7205,"x":25.7715},{"n":"San Quintin","c":"Mexico","y":30.4837,"x":-115.95},{"n":"Ouadda","c":"Central African Republic","y":8.0671,"x":22.4},{"n":"Gandasamou","c":"Niger","y":14.1938,"x":6.0669},{"n":"Linda","c":"Russia","y":56.6128,"x":44.0972},{"n":"Sanmucha","c":"China","y":34.5637,"x":102.828},{"n":"Sabonkafi","c":"Niger","y":14.6416,"x":8.7449},{"n":"Taoyan","c":"China","y":34.7706,"x":103.7903},{"n":"Russko-Vysotskoye","c":"Russia","y":59.7014,"x":29.9431},{"n":"Homocea","c":"Romania","y":46.1375,"x":27.2412},{"n":"Cookshire","c":"Canada","y":45.3729,"x":-71.672},{"n":"Maieru","c":"Romania","y":47.4003,"x":24.7467},{"n":"Jambriji","c":"Niger","y":13.407,"x":9.4426},{"n":"Pavlodarskoe","c":"Kazakhstan","y":52.4,"x":76.8333},{"n":"Zyazikov","c":"Russia","y":43.4957,"x":44.7677},{"n":"Mykolayivka","c":"Ukraine","y":48.3823,"x":36.3086},{"n":"Timoulay Izder","c":"Morocco","y":29.1228,"x":-9.5992},{"n":"Arbore","c":"Romania","y":47.7313,"x":25.92},{"n":"Baia","c":"Romania","y":47.4183,"x":26.219},{"n":"Hohenau","c":"Paraguay","y":-27.0795,"x":-55.75},{"n":"Komsomol'skoye","c":"Russia","y":43.3892,"x":46.1573},{"n":"Verkhnerusskiy","c":"Russia","y":45.1324,"x":41.9424},{"n":"Damjan","c":"Kosovo","y":42.296,"x":20.5162},{"n":"Bogoslovka","c":"Russia","y":53.2189,"x":44.8083},{"n":"Giarmata","c":"Romania","y":45.8367,"x":21.31},{"n":"Tufesti","c":"Romania","y":44.9914,"x":27.8097},{"n":"Kuba","c":"Russia","y":43.8589,"x":43.4472},{"n":"Corund","c":"Romania","y":46.4667,"x":25.1833},{"n":"Inkeroinen","c":"Finland","y":60.6925,"x":26.8394},{"n":"Torghay","c":"Kazakhstan","y":49.626,"x":63.499},{"n":"Ez Zinat","c":"Morocco","y":35.6519,"x":-5.7328},{"n":"Tafetchna","c":"Morocco","y":30.645,"x":-5.8386},{"n":"Otrado-Ol'ginskoye","c":"Russia","y":45.306,"x":40.9397},{"n":"Saint-Honore","c":"Canada","y":48.5333,"x":-71.0833},{"n":"Ban Chiang Klom","c":"Thailand","y":17.8005,"x":101.9448},{"n":"Baryshevo","c":"Russia","y":54.9561,"x":83.1854},{"n":"Malgorou","c":"Niger","y":12.1733,"x":3.4633},{"n":"Dan Gona","c":"Niger","y":14.2697,"x":5.0383},{"n":"Ban Nam Phong","c":"Thailand","y":16.7321,"x":102.8033},{"n":"Horodnicu de Sus","c":"Romania","y":47.8356,"x":25.8354},{"n":"Fort-Shevchenko","c":"Kazakhstan","y":44.5171,"x":50.2666},{"n":"Xiangkhoang","c":"Laos","y":19.3337,"x":103.3666},{"n":"San Francisco","c":"Mexico","y":20.5333,"x":-102.5},{"n":"Straja","c":"Romania","y":47.92,"x":25.55},{"n":"Greci","c":"Romania","y":45.1833,"x":28.2333},{"n":"Tudora","c":"Romania","y":47.5167,"x":26.6333},{"n":"Yablanovo","c":"Bulgaria","y":42.9833,"x":26.55},{"n":"Souk el Had-des Beni-Batao","c":"Morocco","y":32.8938,"x":-6.245},{"n":"Algeti","c":"Georgia","y":41.4481,"x":44.8953},{"n":"Na`jan","c":"Saudi Arabia","y":24.0731,"x":47.17},{"n":"Raducaneni","c":"Romania","y":46.9659,"x":27.9231},{"n":"Kyrnasivka","c":"Ukraine","y":48.5914,"x":28.98},{"n":"Chernyshevskiy","c":"Russia","y":63.0128,"x":112.4714},{"n":"Ban San","c":"Thailand","y":18.0951,"x":98.6615},{"n":"Villa del Rosario","c":"Paraguay","y":-24.4196,"x":-57.1},{"n":"Rasinari","c":"Romania","y":45.7,"x":24.0667},{"n":"Dayi","c":"China","y":33.8312,"x":104.0362},{"n":"Burton","c":"Canada","y":45.8009,"x":-66.4066},{"n":"Paunesti","c":"Romania","y":46.0323,"x":27.1134},{"n":"McMinns Lagoon","c":"Australia","y":-12.5329,"x":131.05},{"n":"Spallumcheen","c":"Canada","y":50.4462,"x":-119.2121},{"n":"Konstantinovskoye","c":"Russia","y":45.2992,"x":42.6367},{"n":"Biancang","c":"China","y":33.9007,"x":104.0321},{"n":"Lesnikovo","c":"Russia","y":55.2822,"x":65.3175},{"n":"Diambala","c":"Niger","y":14.3145,"x":1.2988},{"n":"Draginovo","c":"Bulgaria","y":42.0667,"x":24.0167},{"n":"Qasr al Farafirah","c":"Egypt","y":27.0671,"x":27.9666},{"n":"Nikolo-Pavlovskoye","c":"Russia","y":57.8036,"x":60.0286},{"n":"Saint-Henri","c":"Canada","y":46.7,"x":-71.0667},{"n":"Ste. Anne","c":"Canada","y":49.6186,"x":-96.5708},{"n":"Puerto Casado","c":"Paraguay","y":-22.2896,"x":-57.94},{"n":"Ust'-Kamchatsk","c":"Russia","y":56.2135,"x":162.435},{"n":"Betanzos","c":"Bolivia","y":-19.56,"x":-65.45},{"n":"Sangar","c":"Russia","y":63.9241,"x":127.4739},{"n":"Khatanga","c":"Russia","y":71.9833,"x":102.5},{"n":"Brownsweg","c":"Suriname","y":5.02,"x":-55.17},{"n":"Al Qasr","c":"Egypt","y":25.6959,"x":28.8837},{"n":"Saryshaghan","c":"Kazakhstan","y":46.1195,"x":73.6191},{"n":"Bekily","c":"Madagascar","y":-24.2162,"x":45.3166},{"n":"Batagay","c":"Russia","y":67.656,"x":134.635},{"n":"San Javier","c":"Bolivia","y":-16.2896,"x":-62.5},{"n":"Omsukchan","c":"Russia","y":62.5333,"x":155.8},{"n":"Apolo","c":"Bolivia","y":-14.7196,"x":-68.42},{"n":"Novyy Uoyan","c":"Russia","y":56.135,"x":111.7339},{"n":"Bongandanga","c":"Congo (Kinshasa)","y":1.5104,"x":21.05},{"n":"Quime","c":"Bolivia","y":-16.98,"x":-67.22},{"n":"Araouane","c":"Mali","y":18.9,"x":-3.53},{"n":"Vergara","c":"Uruguay","y":-32.9377,"x":-53.9378},{"n":"Mbe","c":"Cameroon","y":7.8504,"x":13.6},{"n":"Shongzhy","c":"Kazakhstan","y":43.5421,"x":79.4703},{"n":"Ciudad Cortes","c":"Costa Rica","y":8.96,"x":-83.5239},{"n":"P'ungsan","c":"Korea, North","y":40.8175,"x":128.1553},{"n":"Vitim","c":"Russia","y":59.4515,"x":112.5578},{"n":"Puke","c":"Albania","y":42.05,"x":19.9},{"n":"Palana","c":"Russia","y":59.084,"x":159.95},{"n":"Cherskiy","c":"Russia","y":68.7501,"x":161.33},{"n":"Zyryanka","c":"Russia","y":65.736,"x":150.89},{"n":"De-Kastri","c":"Russia","y":51.4666,"x":140.7833},{"n":"Ligonha","c":"Mozambique","y":-15.1757,"x":37.74},{"n":"Darregueira","c":"Argentina","y":-37.6996,"x":-63.1666},{"n":"Bukachacha","c":"Russia","y":52.9833,"x":116.9166},{"n":"Ugol'nyye Kopi","c":"Russia","y":64.7333,"x":177.7},{"n":"Lukulu","c":"Zambia","y":-14.3896,"x":23.24},{"n":"Mekambo","c":"Gabon","y":1.0171,"x":13.9333},{"n":"Arroyos y Esteros","c":"Paraguay","y":-25.05,"x":-57.09},{"n":"Ust'-Maya","c":"Russia","y":60.4566,"x":134.5433},{"n":"Abai","c":"Paraguay","y":-26.0296,"x":-55.94},{"n":"Taoudenni","c":"Mali","y":22.6666,"x":-3.9834},{"n":"San Lorenzo","c":"Bolivia","y":-21.4799,"x":-64.77},{"n":"Saranpaul","c":"Russia","y":64.26,"x":60.9083},{"n":"Villalonga","c":"Argentina","y":-39.8829,"x":-62.5833},{"n":"Villa Ygatimi","c":"Paraguay","y":-24.0796,"x":-55.5},{"n":"Entre Rios","c":"Bolivia","y":-21.53,"x":-64.19},{"n":"Saudharkrokur","c":"Iceland","y":65.7464,"x":-19.639},{"n":"Provideniya","c":"Russia","y":64.4235,"x":-173.2258},{"n":"Chokurdakh","c":"Russia","y":70.6183,"x":147.8946},{"n":"Maradah","c":"Libya","y":29.2337,"x":19.2166},{"n":"Mariscal Jose Felix Estigarribia","c":"Paraguay","y":-22.03,"x":-60.61},{"n":"Jose Batlle y Ordonez","c":"Uruguay","y":-33.47,"x":-55.12},{"n":"Uspallata","c":"Argentina","y":-32.5931,"x":-69.346},{"n":"Sohano","c":"Papua New Guinea","y":-5.4297,"x":154.6711},{"n":"Ceduna","c":"Australia","y":-32.1167,"x":133.6667},{"n":"Maltahohe","c":"Namibia","y":-24.84,"x":16.94},{"n":"Muconda","c":"Angola","y":-10.5996,"x":21.32},{"n":"Tolten","c":"Chile","y":-39.2166,"x":-73.2123},{"n":"Mwenga","c":"Congo (Kinshasa)","y":-3.0382,"x":28.4325},{"n":"Egvekinot","c":"Russia","y":66.3221,"x":-179.1837},{"n":"El Manteco","c":"Venezuela","y":7.35,"x":-62.5453},{"n":"Pozo Colorado","c":"Paraguay","y":-23.43,"x":-58.86},{"n":"Evensk","c":"Russia","y":61.95,"x":159.2333},{"n":"Konza","c":"Kenya","y":-1.7496,"x":37.12},{"n":"Altata","c":"Mexico","y":24.6333,"x":-107.9167},{"n":"Dawwah","c":"Oman","y":20.633,"x":58.908},{"n":"Taedong","c":"Korea, North","y":40.6171,"x":125.4501},{"n":"Abuna","c":"Brazil","y":-9.6954,"x":-65.3597},{"n":"Corocoro","c":"Bolivia","y":-17.1667,"x":-68.4167},{"n":"Beringovskiy","c":"Russia","y":63.0655,"x":179.3067},{"n":"Nasir","c":"South Sudan","y":8.6004,"x":33.0666},{"n":"Labutta","c":"Myanmar","y":16.1619,"x":94.7014},{"n":"Al Jaghbub","c":"Libya","y":29.7504,"x":24.5166},{"n":"Omboue","c":"Gabon","y":-1.5662,"x":9.25},{"n":"Kipili","c":"Tanzania","y":-7.4329,"x":30.6},{"n":"Manja","c":"Madagascar","y":-21.4329,"x":44.3333},{"n":"Ust'-Kuyga","c":"Russia","y":70.0171,"x":135.6},{"n":"Eldikan","c":"Russia","y":60.8,"x":135.1833},{"n":"Qardho","c":"Somalia","y":9.5004,"x":49.166},{"n":"Nyimba","c":"Zambia","y":-14.5495,"x":30.81},{"n":"Fulacunda","c":"Guinea-Bissau","y":11.773,"x":-15.195},{"n":"Lubutu","c":"Congo (Kinshasa)","y":-0.7329,"x":26.5833},{"n":"Cangamba","c":"Angola","y":-13.6996,"x":19.86},{"n":"Regedor Quissico","c":"Mozambique","y":-24.7257,"x":34.766},{"n":"Villa Rumipal","c":"Argentina","y":-32.1895,"x":-64.4792},{"n":"Nacunday","c":"Paraguay","y":-26.02,"x":-54.7699},{"n":"Celeken","c":"Turkmenistan","y":39.4362,"x":53.1226},{"n":"Buluko","c":"Congo (Kinshasa)","y":-0.757,"x":28.528},{"n":"San Rafael","c":"Bolivia","y":-16.7795,"x":-60.68},{"n":"Capitan Pablo Lagerenza","c":"Paraguay","y":-19.9161,"x":-60.7833},{"n":"Puerto Acosta","c":"Bolivia","y":-15.4996,"x":-69.1667},{"n":"Los Blancos","c":"Argentina","y":-23.5996,"x":-62.6},{"n":"Mirbat","c":"Oman","y":16.9924,"x":54.6918},{"n":"Klyuchi","c":"Russia","y":56.3,"x":160.85},{"n":"Besalampy","c":"Madagascar","y":-16.7495,"x":44.4833},{"n":"Cacolo","c":"Angola","y":-10.1496,"x":19.26},{"n":"General Eugenio A. Garay","c":"Paraguay","y":-20.52,"x":-62.21},{"n":"Daraj","c":"Libya","y":30.15,"x":10.45},{"n":"Bavaro","c":"Dominican Republic","y":18.717,"x":-68.45},{"n":"Luanza","c":"Congo (Kinshasa)","y":-8.6996,"x":28.7},{"n":"Hoskins","c":"Papua New Guinea","y":-5.4746,"x":150.41},{"n":"Calulo","c":"Angola","y":-9.9996,"x":14.9},{"n":"Muhembo","c":"Botswana","y":-18.2996,"x":21.8},{"n":"Yerema","c":"Russia","y":60.3808,"x":107.7794},{"n":"Satadougou","c":"Mali","y":12.617,"x":-11.4066},{"n":"Dibaya","c":"Congo (Kinshasa)","y":-6.5095,"x":22.87},{"n":"Serebryansk","c":"Kazakhstan","y":49.6999,"x":83.4249},{"n":"Zhaltyr","c":"Kazakhstan","y":51.6324,"x":69.8328},{"n":"Manily","c":"Russia","y":62.4908,"x":165.3298},{"n":"Calatrava","c":"Equatorial Guinea","y":1.1164,"x":9.4186},{"n":"Massangena","c":"Mozambique","y":-21.5373,"x":32.9564},{"n":"Panda","c":"Mozambique","y":-24.0629,"x":34.7303},{"n":"Ypejhu","c":"Paraguay","y":-23.91,"x":-55.46},{"n":"Quilpie","c":"Australia","y":-26.6161,"x":144.2675},{"n":"Sabaya","c":"Bolivia","y":-19.1,"x":-68.4333},{"n":"Chiramba","c":"Mozambique","y":-16.8921,"x":34.6559},{"n":"Mereeg","c":"Somalia","y":3.7666,"x":47.3},{"n":"Llica","c":"Bolivia","y":-19.8496,"x":-68.25},{"n":"Calenga","c":"Angola","y":-11.3196,"x":16.2},{"n":"Dikson","c":"Russia","y":73.5,"x":80.517},{"n":"Caluula","c":"Somalia","y":11.967,"x":50.75},{"n":"Tournavista","c":"Peru","y":-8.9322,"x":-74.7052},{"n":"Puerto Pinasco","c":"Paraguay","y":-22.64,"x":-57.79},{"n":"Tchitado","c":"Angola","y":-17.3196,"x":13.92},{"n":"Yakossi","c":"Central African Republic","y":5.617,"x":23.3167},{"n":"Tmassah","c":"Libya","y":26.3666,"x":15.8},{"n":"Manyoni","c":"Tanzania","y":-5.7796,"x":34.9},{"n":"Woomera","c":"Australia","y":-31.1496,"x":136.8},{"n":"Tasiusaq","c":"Greenland","y":73.369,"x":-56.0598},{"n":"Sherlovaya Gora","c":"Russia","y":50.5306,"x":116.3006},{"n":"Tsavo","c":"Kenya","y":-2.9828,"x":38.4666},{"n":"Nizhneyansk","c":"Russia","y":71.4333,"x":136.0666},{"n":"Toconao","c":"Chile","y":-23.1829,"x":-68.0166},{"n":"Balsadero Rio Verde","c":"Chile","y":-52.65,"x":-71.4666},{"n":"Kanyato","c":"Tanzania","y":-4.4565,"x":30.2614},{"n":"Kulusuk","c":"Greenland","y":65.5666,"x":-37.1833},{"n":"Umm al `Abid","c":"Libya","y":27.517,"x":15.0333},{"n":"Bugrino","c":"Russia","y":68.8079,"x":49.3042},{"n":"Put' Lenina","c":"Russia","y":68.5166,"x":107.8},{"n":"Yaupi","c":"Ecuador","y":-2.8543,"x":-77.9363},{"n":"Amderma","c":"Russia","y":69.763,"x":61.6677},{"n":"Kangersuatsiaq","c":"Greenland","y":72.3796,"x":-55.5491},{"n":"Villa O'Higgins","c":"Chile","y":-48.4679,"x":-72.56},{"n":"Amau","c":"Papua New Guinea","y":-10.0426,"x":148.565},{"n":"Kalima","c":"Congo (Kinshasa)","y":-2.5096,"x":26.43},{"n":"Al Qunfudhah","c":"Saudi Arabia","y":19.1264,"x":41.0789},{"n":"Lusanga","c":"Congo (Kinshasa)","y":-5.5829,"x":16.5167},{"n":"Kraulshavn","c":"Greenland","y":74.121,"x":-57.0674},{"n":"Androka","c":"Madagascar","y":-25.0219,"x":44.0749},{"n":"Charana","c":"Bolivia","y":-17.5996,"x":-69.4666},{"n":"Nichicun","c":"China","y":29.5333,"x":94.4167},{"n":"Hurdiyo","c":"Somalia","y":10.5667,"x":51.1333},{"n":"Buton","c":"Indonesia","y":4.217,"x":108.2},{"n":"Narsarsuaq","c":"Greenland","y":61.1666,"x":-45.4166},{"n":"Bafwasende","c":"Congo (Kinshasa)","y":1.0838,"x":27.2666},{"n":"Bifoun","c":"Gabon","y":-0.3329,"x":10.3832},{"n":"Il'pyrskiy","c":"Russia","y":59.96,"x":164.2},{"n":"Sharbaqty","c":"Kazakhstan","y":52.4999,"x":78.1499},{"n":"Savissivik","c":"Greenland","y":76.0195,"x":-65.1125},{"n":"Cuya","c":"Chile","y":-19.1597,"x":-70.1794},{"n":"Villa Martin Colchak","c":"Bolivia","y":-20.7666,"x":-67.7833},{"n":"Gyda","c":"Russia","y":70.8814,"x":78.4661},{"n":"Gueppi","c":"Peru","y":-0.1166,"x":-75.23},{"n":"Puerto Heath","c":"Bolivia","y":-12.52,"x":-68.6186},{"n":"Bir Mogrein","c":"Mauritania","y":25.2333,"x":-11.5833},{"n":"Yessey","c":"Russia","y":68.4837,"x":102.1666},{"n":"Burubaytal","c":"Kazakhstan","y":44.9387,"x":74.0303},{"n":"Mukhomornoye","c":"Russia","y":66.4171,"x":173.3333},{"n":"Vorontsovo","c":"Russia","y":71.6983,"x":83.5642},{"n":"Grytviken","c":"South Georgia And South Sandwich Islands","y":-54.2806,"x":-36.508},{"n":"Piso Firme","c":"Bolivia","y":-13.683,"x":-61.8666},{"n":"As Sidrah","c":"Libya","y":30.6704,"x":18.2666},{"n":"Rocafuerte","c":"Peru","y":-0.9329,"x":-75.4},{"n":"Peregrebnoye","c":"Russia","y":62.967,"x":65.0859},{"n":"Laryak","c":"Russia","y":61.1012,"x":80.2514},{"n":"Lagunas","c":"Chile","y":-20.9829,"x":-69.6833},{"n":"Andoas","c":"Peru","y":-2.9021,"x":-76.4025},{"n":"Puca Urco","c":"Peru","y":-2.3328,"x":-71.9167},{"n":"Zillah","c":"Libya","y":28.5504,"x":17.5834},{"n":"Ulkan","c":"Russia","y":55.9004,"x":107.7833},{"n":"Barnis","c":"Egypt","y":23.946,"x":35.4842},{"n":"Soldado Bartra","c":"Peru","y":-2.5161,"x":-75.7666},{"n":"Strelka","c":"Russia","y":61.867,"x":152.2502},{"n":"Bol'sheretsk","c":"Russia","y":52.439,"x":156.3594},{"n":"Karamken","c":"Russia","y":60.2004,"x":151.1666},{"n":"Djado","c":"Niger","y":21.015,"x":12.3075},{"n":"Omchak","c":"Russia","y":61.6333,"x":147.9167},{"n":"Shalaurova","c":"Russia","y":73.2204,"x":143.1833},{"n":"Khorgo","c":"Russia","y":73.4833,"x":113.63},{"n":"Komsa","c":"Russia","y":61.868,"x":89.2577},{"n":"Pakhachi","c":"Russia","y":60.5816,"x":169.05},{"n":"Indiga","c":"Russia","y":67.6898,"x":49.0166},{"n":"Sagastyr","c":"Russia","y":73.3779,"x":126.5924},{"n":"Chagda","c":"Russia","y":60.1,"x":133.9},{"n":"Tunguskhaya","c":"Russia","y":64.9004,"x":125.25},{"n":"Podkamennaya Tunguska","c":"Russia","y":61.5995,"x":90.1236},{"n":"Siglan","c":"Russia","y":59.0337,"x":152.4166},{"n":"Utkholok","c":"Russia","y":57.5504,"x":157.2333},{"n":"Varnek","c":"Russia","y":69.7301,"x":60.0636},{"n":"Trofimovsk","c":"Russia","y":72.5997,"x":127.0337},{"n":"Matochkin Shar","c":"Russia","y":73.27,"x":56.4497},{"n":"Menkerya","c":"Russia","y":67.9886,"x":123.3505},{"n":"Khakhar","c":"Russia","y":57.6666,"x":135.43},{"n":"Zvezdnyy","c":"Russia","y":70.9566,"x":-179.59},{"n":"Zemlya Bunge","c":"Russia","y":74.8983,"x":142.105},{"n":"Starorybnoye","c":"Russia","y":72.7666,"x":104.8},{"n":"Agapa","c":"Russia","y":71.4504,"x":89.25},{"n":"Tukchi","c":"Russia","y":57.367,"x":139.5},{"n":"Numto","c":"Russia","y":63.6667,"x":71.3333},{"n":"Nord","c":"Greenland","y":81.7166,"x":-17.8},{"n":"Timmiarmiut","c":"Greenland","y":62.5333,"x":-42.2167},{"n":"Nordvik","c":"Russia","y":74.0165,"x":111.51}]}

/***/ }
/******/ ]);